id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/12062#issuecomment-1419265262:136,Usability,simpl,simplified,136,"> Some further debugging (but really just dumping notes from some experiments):; > ; > * The problem of `histhistdrawv7testUnit` can be simplified, in some approximation, to:; > ; > ; > ```; > root [0] TClass::GetClass(""ROOT::Experimental::RHist<1, double, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty>""); > root.exe: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:4120: unsigned int clang::FunctionDecl::getODRHash() const: Assertion `hasODRHash()' failed.; > ```; > ; > * Even simpler, just trying to create an object of that template instantiation fails:; > ; > ; > ```; > root [0] ROOT::Experimental::RHist<1, double, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty> h;; > root.exe: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:4120: unsigned int clang::FunctionDecl::getODRHash() const: Assertion `hasODRHash()' failed.; > ```; > ; > * Funnily enough, the `using RH1D = RHist<1, double, RHistStatContent, RHistStatUncertainty>` works just fine; same if I remove the second `STAT` template and only leave `RHistStatContent`. I've been stumbling upon these before: this is not simple as it has some template parameter pack expansion as part of the class inheritance chain...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12062#issuecomment-1419265262
https://github.com/root-project/root/pull/12062#issuecomment-1419265262:540,Usability,simpl,simpler,540,"> Some further debugging (but really just dumping notes from some experiments):; > ; > * The problem of `histhistdrawv7testUnit` can be simplified, in some approximation, to:; > ; > ; > ```; > root [0] TClass::GetClass(""ROOT::Experimental::RHist<1, double, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty>""); > root.exe: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:4120: unsigned int clang::FunctionDecl::getODRHash() const: Assertion `hasODRHash()' failed.; > ```; > ; > * Even simpler, just trying to create an object of that template instantiation fails:; > ; > ; > ```; > root [0] ROOT::Experimental::RHist<1, double, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty> h;; > root.exe: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:4120: unsigned int clang::FunctionDecl::getODRHash() const: Assertion `hasODRHash()' failed.; > ```; > ; > * Funnily enough, the `using RH1D = RHist<1, double, RHistStatContent, RHistStatUncertainty>` works just fine; same if I remove the second `STAT` template and only leave `RHistStatContent`. I've been stumbling upon these before: this is not simple as it has some template parameter pack expansion as part of the class inheritance chain...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12062#issuecomment-1419265262
https://github.com/root-project/root/pull/12062#issuecomment-1419265262:1201,Usability,simpl,simple,1201,"> Some further debugging (but really just dumping notes from some experiments):; > ; > * The problem of `histhistdrawv7testUnit` can be simplified, in some approximation, to:; > ; > ; > ```; > root [0] TClass::GetClass(""ROOT::Experimental::RHist<1, double, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty>""); > root.exe: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:4120: unsigned int clang::FunctionDecl::getODRHash() const: Assertion `hasODRHash()' failed.; > ```; > ; > * Even simpler, just trying to create an object of that template instantiation fails:; > ; > ; > ```; > root [0] ROOT::Experimental::RHist<1, double, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty> h;; > root.exe: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:4120: unsigned int clang::FunctionDecl::getODRHash() const: Assertion `hasODRHash()' failed.; > ```; > ; > * Funnily enough, the `using RH1D = RHist<1, double, RHistStatContent, RHistStatUncertainty>` works just fine; same if I remove the second `STAT` template and only leave `RHistStatContent`. I've been stumbling upon these before: this is not simple as it has some template parameter pack expansion as part of the class inheritance chain...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12062#issuecomment-1419265262
https://github.com/root-project/root/pull/12085#issuecomment-1403615900:515,Deployability,release,released,515,"> Hi, I don't understand what temporary gcc's message refers to?; > ; > * `GetColumnType` returns a `string` by value that is taken in as a `const string &` by `TypeName2TypeID`, so everything should be fine there; > ; > * `TypeName2TypeID` returns a `const type_info &` that is conditionally assigned to a `const auto &` and that should also be ok: the `const type_info &` is produced by expressions such as `typeid(bool)` and that value should have static lifetime; > ; > ; > Help?. GCC13 has not been officially released yet. It comes with the [new `-Wdangling-reference` diagnostic](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=106393), which I think still provides many false positives, e.g. [see this](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=107532). In particular, this warning seems absolutely bogus. It can be reproduced with this simple excerpt (compile with `g++ -Werror=dangling-reference`).; ```c++; #include <string>; #include <typeinfo>. const std::type_info &f(const std::string &);; void g() {; // A `std::string` temporary is implicitly constructed passing the string literal ""foo"" to the ctor.; // Apparently, this triggers one of the patterns in GCC's new `[-Wdangling-reference]`. ; const auto &ti = f(""foo"");; }; ```. IMO, this warning is totally bogus (and might be seen in other parts of ROOT). Thus, I would suggest not changing the code but conditionally ignoring it,; _(a)_ Either in this translation unit only; ```c++; #pragma GCC diagnostic ignored ...; ```; , or _(b)_ most likely for all ROOT (appending `-Wno-dangling-reference` from CMake). I would go for `_(b)_`, at least until the feature becomes mature enough and does not yield false positives. What do you think, @linev, @eguiraud?. Also CC: @Axel-Naumann and @hahnjo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12085#issuecomment-1403615900
https://github.com/root-project/root/pull/12085#issuecomment-1403615900:46,Integrability,message,message,46,"> Hi, I don't understand what temporary gcc's message refers to?; > ; > * `GetColumnType` returns a `string` by value that is taken in as a `const string &` by `TypeName2TypeID`, so everything should be fine there; > ; > * `TypeName2TypeID` returns a `const type_info &` that is conditionally assigned to a `const auto &` and that should also be ok: the `const type_info &` is produced by expressions such as `typeid(bool)` and that value should have static lifetime; > ; > ; > Help?. GCC13 has not been officially released yet. It comes with the [new `-Wdangling-reference` diagnostic](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=106393), which I think still provides many false positives, e.g. [see this](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=107532). In particular, this warning seems absolutely bogus. It can be reproduced with this simple excerpt (compile with `g++ -Werror=dangling-reference`).; ```c++; #include <string>; #include <typeinfo>. const std::type_info &f(const std::string &);; void g() {; // A `std::string` temporary is implicitly constructed passing the string literal ""foo"" to the ctor.; // Apparently, this triggers one of the patterns in GCC's new `[-Wdangling-reference]`. ; const auto &ti = f(""foo"");; }; ```. IMO, this warning is totally bogus (and might be seen in other parts of ROOT). Thus, I would suggest not changing the code but conditionally ignoring it,; _(a)_ Either in this translation unit only; ```c++; #pragma GCC diagnostic ignored ...; ```; , or _(b)_ most likely for all ROOT (appending `-Wno-dangling-reference` from CMake). I would go for `_(b)_`, at least until the feature becomes mature enough and does not yield false positives. What do you think, @linev, @eguiraud?. Also CC: @Axel-Naumann and @hahnjo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12085#issuecomment-1403615900
https://github.com/root-project/root/pull/12085#issuecomment-1403615900:845,Usability,simpl,simple,845,"> Hi, I don't understand what temporary gcc's message refers to?; > ; > * `GetColumnType` returns a `string` by value that is taken in as a `const string &` by `TypeName2TypeID`, so everything should be fine there; > ; > * `TypeName2TypeID` returns a `const type_info &` that is conditionally assigned to a `const auto &` and that should also be ok: the `const type_info &` is produced by expressions such as `typeid(bool)` and that value should have static lifetime; > ; > ; > Help?. GCC13 has not been officially released yet. It comes with the [new `-Wdangling-reference` diagnostic](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=106393), which I think still provides many false positives, e.g. [see this](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=107532). In particular, this warning seems absolutely bogus. It can be reproduced with this simple excerpt (compile with `g++ -Werror=dangling-reference`).; ```c++; #include <string>; #include <typeinfo>. const std::type_info &f(const std::string &);; void g() {; // A `std::string` temporary is implicitly constructed passing the string literal ""foo"" to the ctor.; // Apparently, this triggers one of the patterns in GCC's new `[-Wdangling-reference]`. ; const auto &ti = f(""foo"");; }; ```. IMO, this warning is totally bogus (and might be seen in other parts of ROOT). Thus, I would suggest not changing the code but conditionally ignoring it,; _(a)_ Either in this translation unit only; ```c++; #pragma GCC diagnostic ignored ...; ```; , or _(b)_ most likely for all ROOT (appending `-Wno-dangling-reference` from CMake). I would go for `_(b)_`, at least until the feature becomes mature enough and does not yield false positives. What do you think, @linev, @eguiraud?. Also CC: @Axel-Naumann and @hahnjo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12085#issuecomment-1403615900
https://github.com/root-project/root/pull/12102#issuecomment-1419337842:79,Availability,down,downside,79,"+1 as it make `diffs` clearer in case of change to the member initialization. (downside, is the number of extra lines).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12102#issuecomment-1419337842
https://github.com/root-project/root/pull/12102#issuecomment-1419337842:22,Usability,clear,clearer,22,"+1 as it make `diffs` clearer in case of change to the member initialization. (downside, is the number of extra lines).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12102#issuecomment-1419337842
https://github.com/root-project/root/issues/12116#issuecomment-1405620021:15,Usability,learn,learned,15,"Just because I learned to not trust the lifetime of GitHub comments: this refers to the comment; ```c++; // FIXME: Uncomment and debug the various type mismatches.; ```; in a future version of `interpreter/cling/include/cling/Interpreter/Value.h`, around line 266.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12116#issuecomment-1405620021
https://github.com/root-project/root/pull/12121#issuecomment-1405524377:45,Deployability,update,updated,45,"Thanks @eguiraud for all your comments! I've updated the text, I believe it is now clearer and more to the point.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12121#issuecomment-1405524377
https://github.com/root-project/root/pull/12121#issuecomment-1405524377:83,Usability,clear,clearer,83,"Thanks @eguiraud for all your comments! I've updated the text, I believe it is now clearer and more to the point.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12121#issuecomment-1405524377
https://github.com/root-project/root/pull/12140#issuecomment-1410407239:996,Modifiability,refactor,refactored,996,"> Can you elaborate a bit: what is the purpose of this change or the benefits/changes to the code using views?. Sure, `RNTupleGlobalRange` and `RNTupleClusterRange` before this PR are defined as forward ranges. So they can basically be used in a range-for loop and for STL algorithms, but they will use slower versions in some cases, because of the less capable iterator category. A good example is that `std::distance(globalRange.begin(), globalRange.end())` unnecessarily has linear complexity, although it could easility be constant. This effects us a lot as well for the parallel STL. E.g. spanning a parallel index space:; ```c++; std::for_each(std::execution::par, globalRange.begin(), globalRange.end(), [](NTupleSize_t i) { ... });; ```; This has unnecessary complex setup time, because partitioning the index space has linear complexity due to the iterator category. The support for C++20 ranges is orthogonal to these usuability improvements, but should fall out for free. Allowing the refactored types to be used with ranges is just a cherry-on-top to allow the client using the RNTuple API to combine it with a larger set of the C++ standard library. So this changeset is mainly about broadening the usability of these types.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140#issuecomment-1410407239
https://github.com/root-project/root/pull/12140#issuecomment-1410407239:1212,Usability,usab,usability,1212,"> Can you elaborate a bit: what is the purpose of this change or the benefits/changes to the code using views?. Sure, `RNTupleGlobalRange` and `RNTupleClusterRange` before this PR are defined as forward ranges. So they can basically be used in a range-for loop and for STL algorithms, but they will use slower versions in some cases, because of the less capable iterator category. A good example is that `std::distance(globalRange.begin(), globalRange.end())` unnecessarily has linear complexity, although it could easility be constant. This effects us a lot as well for the parallel STL. E.g. spanning a parallel index space:; ```c++; std::for_each(std::execution::par, globalRange.begin(), globalRange.end(), [](NTupleSize_t i) { ... });; ```; This has unnecessary complex setup time, because partitioning the index space has linear complexity due to the iterator category. The support for C++20 ranges is orthogonal to these usuability improvements, but should fall out for free. Allowing the refactored types to be used with ranges is just a cherry-on-top to allow the client using the RNTuple API to combine it with a larger set of the C++ standard library. So this changeset is mainly about broadening the usability of these types.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140#issuecomment-1410407239
https://github.com/root-project/root/pull/12149#issuecomment-1661811809:95,Usability,clear,clear,95,"Well not quite, it broke clean builds on the `master` branch on basically all platforms... Not clear why, investigating.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12149#issuecomment-1661811809
https://github.com/root-project/root/pull/12149#issuecomment-1661819517:97,Usability,clear,clear,97,"> Well not quite, it broke clean builds on the `master` branch on basically all platforms... Not clear why, investigating. Where did you see that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12149#issuecomment-1661819517
https://github.com/root-project/root/issues/12156#issuecomment-1665604004:118,Security,access,access,118,It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1665604004
https://github.com/root-project/root/issues/12156#issuecomment-1665604004:13,Usability,simpl,simple,13,It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1665604004
https://github.com/root-project/root/issues/12156#issuecomment-1666915077:482,Modifiability,config,config,482,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want?. In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666915077
https://github.com/root-project/root/issues/12156#issuecomment-1666915077:120,Security,access,access,120,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want?. In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666915077
https://github.com/root-project/root/issues/12156#issuecomment-1666915077:15,Usability,simpl,simple,15,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want?. In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666915077
https://github.com/root-project/root/issues/12156#issuecomment-1666915077:243,Usability,simpl,simple,243,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want?. In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666915077
https://github.com/root-project/root/issues/12156#issuecomment-1666916384:320,Modifiability,config,config,320,"> I noticed that by default everything is linked using the static libraries from LLVM. As I [said](https://github.com/root-project/root/issues/12156#issuecomment-1662255320):; > if we link the static libraries we don't want to *also* link the shared library. And we prefer static libs. And what you suggest:; > In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it... sounds both plausible and simple :-) Let us know, please!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666916384
https://github.com/root-project/root/issues/12156#issuecomment-1666916384:426,Usability,simpl,simple,426,"> I noticed that by default everything is linked using the static libraries from LLVM. As I [said](https://github.com/root-project/root/issues/12156#issuecomment-1662255320):; > if we link the static libraries we don't want to *also* link the shared library. And we prefer static libs. And what you suggest:; > In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it... sounds both plausible and simple :-) Let us know, please!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666916384
https://github.com/root-project/root/issues/12156#issuecomment-1666920625:182,Modifiability,config,config,182,"> sounds both plausible and simple :-) Let us know, please!. I struggle a bit to find out exactly where CMake gets the LLVM library, unfortunately it doesn't look like it uses `llvm-config --libs`...; Will look around though",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666920625
https://github.com/root-project/root/issues/12156#issuecomment-1666920625:28,Usability,simpl,simple,28,"> sounds both plausible and simple :-) Let us know, please!. I struggle a bit to find out exactly where CMake gets the LLVM library, unfortunately it doesn't look like it uses `llvm-config --libs`...; Will look around though",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666920625
https://github.com/root-project/root/issues/12156#issuecomment-1666954709:349,Deployability,install,installed,349,"Found it! As it turns out, it is a ""simple"" 2 line fix:; https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4. We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. The only disadvantage is that links against *all* LLVM libraries, which means additionally dependencies might need to be installed. In particular LLVM 16 is broken due to https://github.com/llvm/llvm-project/issues/62300.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666954709
https://github.com/root-project/root/issues/12156#issuecomment-1666954709:319,Integrability,depend,dependencies,319,"Found it! As it turns out, it is a ""simple"" 2 line fix:; https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4. We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. The only disadvantage is that links against *all* LLVM libraries, which means additionally dependencies might need to be installed. In particular LLVM 16 is broken due to https://github.com/llvm/llvm-project/issues/62300.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666954709
https://github.com/root-project/root/issues/12156#issuecomment-1666954709:36,Usability,simpl,simple,36,"Found it! As it turns out, it is a ""simple"" 2 line fix:; https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4. We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. The only disadvantage is that links against *all* LLVM libraries, which means additionally dependencies might need to be installed. In particular LLVM 16 is broken due to https://github.com/llvm/llvm-project/issues/62300.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666954709
https://github.com/root-project/root/issues/12156#issuecomment-1668344363:38,Usability,simpl,simple,38,"> Found it! As it turns out, it is a ""simple"" 2 line fix: [stephanlachnit@65ae229](https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4); > ; > We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. I'm surprised that this helps. I remember trying using a static-only build of LLVM to fix this with no success.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1668344363
https://github.com/root-project/root/issues/12164#issuecomment-1410380142:383,Modifiability,variab,variable,383,"It's understood; Lorenzo will find a workaround for 6.28/00. We will still need to solve the underlying issue, but with lower urgency. The issue is with llvm-IR using non-unique symbol names for the function-local constants, and re-using the already emitted symbols in subsequent modules (due to cling's ""private"" => ""weak"" symbol rewriting). A simple workaround is to use different variable names for the function-local constants.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164#issuecomment-1410380142
https://github.com/root-project/root/issues/12164#issuecomment-1410380142:345,Usability,simpl,simple,345,"It's understood; Lorenzo will find a workaround for 6.28/00. We will still need to solve the underlying issue, but with lower urgency. The issue is with llvm-IR using non-unique symbol names for the function-local constants, and re-using the already emitted symbols in subsequent modules (due to cling's ""private"" => ""weak"" symbol rewriting). A simple workaround is to use different variable names for the function-local constants.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164#issuecomment-1410380142
https://github.com/root-project/root/issues/12164#issuecomment-1410442720:16,Usability,simpl,simple,16,"This is another simple reproducible example: ; ```; #include <iostream>; #include <vector>. void Dummy(const std::vector<size_t> & targetShape) {; std::cout << ""target shape "";; for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";; std::cout << std::endl;; }. struct Test1 {; Test1() {; Dummy({ 1 , 2 , 3, 4 });; }; };. struct Test2 {; Test2() {; Dummy({ 5 , 6 , 7});; }. };",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164#issuecomment-1410442720
https://github.com/root-project/root/pull/12178#issuecomment-1410285135:33,Usability,clear,clear,33,"Hello, I can do that. Just to be clear, that applies only to RooEffGenContex.h and cxx, right? Not RooRealIntegral.cxx, which would change a lot with the ROOT format",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178#issuecomment-1410285135
https://github.com/root-project/root/issues/12182#issuecomment-2270986830:159,Modifiability,variab,variable,159,"I can't identify the problem either. But there is a simple workaround: you can just use `TPython::Exec()` and bring the string to the C++ world with an output variable. In the interest of a more stable ROOT, I would suggest to promote this way of doing things and to to deprecate `TPython::Eval()`:. * https://github.com/root-project/root/pull/16175. Would this be a good way forward also for ATLAS?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182#issuecomment-2270986830
https://github.com/root-project/root/issues/12182#issuecomment-2270986830:52,Usability,simpl,simple,52,"I can't identify the problem either. But there is a simple workaround: you can just use `TPython::Exec()` and bring the string to the C++ world with an output variable. In the interest of a more stable ROOT, I would suggest to promote this way of doing things and to to deprecate `TPython::Eval()`:. * https://github.com/root-project/root/pull/16175. Would this be a good way forward also for ATLAS?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182#issuecomment-2270986830
https://github.com/root-project/root/pull/12187#issuecomment-1412117260:437,Usability,clear,clearing,437,"Build failed on ROOT-ubuntu2204/cxx17.; Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/166598/console).; ### Warnings:; - [2023-02-01T13:46:58.435Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/tbb/concurrent_hash_map.h:131:24: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12187#issuecomment-1412117260
https://github.com/root-project/root/pull/12201#issuecomment-1412357738:322,Usability,simpl,simple,322,"Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201#issuecomment-1412357738
https://github.com/root-project/root/pull/12201#issuecomment-1412402025:438,Availability,avail,available,438,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201#issuecomment-1412402025
https://github.com/root-project/root/pull/12201#issuecomment-1412402025:324,Usability,simpl,simple,324,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201#issuecomment-1412402025
https://github.com/root-project/root/pull/12202#issuecomment-2091419386:619,Integrability,wrap,wrapper,619,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector.; 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202#issuecomment-2091419386
https://github.com/root-project/root/pull/12202#issuecomment-2091419386:421,Testability,test,tests,421,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector.; 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202#issuecomment-2091419386
https://github.com/root-project/root/pull/12202#issuecomment-2091419386:571,Testability,log,logic,571,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector.; 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202#issuecomment-2091419386
https://github.com/root-project/root/pull/12202#issuecomment-2091419386:612,Usability,simpl,simple,612,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector.; 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202#issuecomment-2091419386
https://github.com/root-project/root/issues/12208#issuecomment-1413764933:570,Deployability,rolling,rolling,570,"Thanks for your report! I think much of this would cause churn without much benefit on the users' side: they would simply hate us for littering them with deprecation warnings that they just don't care about. Instead, we moved away from these types in new code (RDataFrame, RNTuple, etc); new tutorials are also just using standard types. I don't know whether anything but this will be constructive / productive enough. What are your thoughts?. I'd certainly like to use std features for the underlying types / values for what's in Rtypes as much as possible, instead of rolling out own. But that seems orthogonal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208#issuecomment-1413764933
https://github.com/root-project/root/issues/12208#issuecomment-1413764933:115,Usability,simpl,simply,115,"Thanks for your report! I think much of this would cause churn without much benefit on the users' side: they would simply hate us for littering them with deprecation warnings that they just don't care about. Instead, we moved away from these types in new code (RDataFrame, RNTuple, etc); new tutorials are also just using standard types. I don't know whether anything but this will be constructive / productive enough. What are your thoughts?. I'd certainly like to use std features for the underlying types / values for what's in Rtypes as much as possible, instead of rolling out own. But that seems orthogonal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208#issuecomment-1413764933
https://github.com/root-project/root/pull/12211#issuecomment-1414055652:437,Usability,clear,clearing,437,"Build failed on ROOT-ubuntu2204/cxx17.; Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/166784/console).; ### Warnings:; - [2023-02-02T16:04:19.482Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/tbb/concurrent_hash_map.h:131:24: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12211#issuecomment-1414055652
https://github.com/root-project/root/pull/12276#issuecomment-1427114379:11,Integrability,message,message,11,The commit message seems pretty clear to me. Can you suggest something?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1427114379
https://github.com/root-project/root/pull/12276#issuecomment-1427114379:32,Usability,clear,clear,32,The commit message seems pretty clear to me. Can you suggest something?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1427114379
https://github.com/root-project/root/pull/12276#issuecomment-1429251757:55,Availability,failure,failure,55,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757
https://github.com/root-project/root/pull/12276#issuecomment-1429251757:349,Availability,failure,failure,349,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757
https://github.com/root-project/root/pull/12276#issuecomment-1429251757:601,Availability,error,error,601,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757
https://github.com/root-project/root/pull/12276#issuecomment-1429251757:656,Availability,error,error,656,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757
https://github.com/root-project/root/pull/12276#issuecomment-1429251757:1077,Availability,error,error,1077,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757
https://github.com/root-project/root/pull/12276#issuecomment-1429251757:1410,Deployability,update,update,1410,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757
https://github.com/root-project/root/pull/12276#issuecomment-1429251757:753,Integrability,message,message,753,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757
https://github.com/root-project/root/pull/12276#issuecomment-1429251757:368,Safety,avoid,avoiding,368,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757
https://github.com/root-project/root/pull/12276#issuecomment-1429251757:305,Testability,log,log,305,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757
https://github.com/root-project/root/pull/12276#issuecomment-1429251757:571,Testability,log,log,571,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757
https://github.com/root-project/root/pull/12276#issuecomment-1429251757:1421,Testability,log,log,1421,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757
https://github.com/root-project/root/pull/12276#issuecomment-1429251757:1657,Testability,log,log,1657,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757
https://github.com/root-project/root/pull/12276#issuecomment-1429251757:1664,Usability,simpl,simply,1664,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:57,Availability,failure,failure,57,"> Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!; > ; > Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; > ; > ```; > That should fix a recent nightly failure with gcc11 avoiding to require; > module ""bits/ranges_base.h"" in C++20 context.; > ```; > ; > does not call out; > ; > * that it's during dictionary generation; > ; > * that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); > ; > * that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the exp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:365,Availability,failure,failure,365,"> Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!; > ; > Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; > ; > ```; > That should fix a recent nightly failure with gcc11 avoiding to require; > module ""bits/ranges_base.h"" in C++20 context.; > ```; > ; > does not call out; > ; > * that it's during dictionary generation; > ; > * that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); > ; > * that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the exp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:639,Availability,error,error,639,"> Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!; > ; > Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; > ; > ```; > That should fix a recent nightly failure with gcc11 avoiding to require; > module ""bits/ranges_base.h"" in C++20 context.; > ```; > ; > does not call out; > ; > * that it's during dictionary generation; > ; > * that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); > ; > * that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the exp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:694,Availability,error,error,694,"> Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!; > ; > Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; > ; > ```; > That should fix a recent nightly failure with gcc11 avoiding to require; > module ""bits/ranges_base.h"" in C++20 context.; > ```; > ; > does not call out; > ; > * that it's during dictionary generation; > ; > * that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); > ; > * that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the exp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:1127,Availability,error,error,1127,"he actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; > ; > ```; > That should fix a recent nightly failure with gcc11 avoiding to require; > module ""bits/ranges_base.h"" in C++20 context.; > ```; > ; > does not call out; > ; > * that it's during dictionary generation; > ; > * that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); > ; > * that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). I am not sure if pasting a diagnostic from a random system makes this clearer in any form. I agree with you this should have be 1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:2198,Availability,failure,failure,2198,"our message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). I am not sure if pasting a diagnostic from a random system makes this clearer in any form. I agree with you this should have be 1 min review fixing an important failure that we introduced with the c++20 support and some of the new releases of maybe libstdc++. @pcanal I find pasting errors in the logs a bad practice, especially when it obfuscates the real fix. Can you suggest a commit message which adds enough information which makes me happy as well?. In general it is a bit unfortunate how the whole review went for this PR. This should been just a simple ""approve"" as I thought we needed a quick fix which I developed in between travels and a business trip... I suspect this would help me define urgent/important in similar circumstances in future...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:2320,Availability,error,errors,2320,"our message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). I am not sure if pasting a diagnostic from a random system makes this clearer in any form. I agree with you this should have be 1 min review fixing an important failure that we introduced with the c++20 support and some of the new releases of maybe libstdc++. @pcanal I find pasting errors in the logs a bad practice, especially when it obfuscates the real fix. Can you suggest a commit message which adds enough information which makes me happy as well?. In general it is a bit unfortunate how the whole review went for this PR. This should been just a simple ""approve"" as I thought we needed a quick fix which I developed in between travels and a business trip... I suspect this would help me define urgent/important in similar circumstances in future...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:1470,Deployability,update,update,1470,"emap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); > ; > * that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). I am not sure if pasting a diagnostic from a random system makes this clearer in any form. I agree with you this should have be 1 min review fixing an important failure that we introduced with the c++20 support and some of the new releases of maybe libstdc++. @pcanal I find pasting errors in the logs a bad practice, especially when it obfuscates the real fix. Can you suggest a commit message which adds enough information which makes me happy as well?. In general it is a bit unfortunate how the whole review went fo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:2268,Deployability,release,releases,2268,"our message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). I am not sure if pasting a diagnostic from a random system makes this clearer in any form. I agree with you this should have be 1 min review fixing an important failure that we introduced with the c++20 support and some of the new releases of maybe libstdc++. @pcanal I find pasting errors in the logs a bad practice, especially when it obfuscates the real fix. Can you suggest a commit message which adds enough information which makes me happy as well?. In general it is a bit unfortunate how the whole review went for this PR. This should been just a simple ""approve"" as I thought we needed a quick fix which I developed in between travels and a business trip... I suspect this would help me define urgent/important in similar circumstances in future...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:797,Integrability,message,message,797,"> Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!; > ; > Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; > ; > ```; > That should fix a recent nightly failure with gcc11 avoiding to require; > module ""bits/ranges_base.h"" in C++20 context.; > ```; > ; > does not call out; > ; > * that it's during dictionary generation; > ; > * that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); > ; > * that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the exp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:2424,Integrability,message,message,2424,"our message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). I am not sure if pasting a diagnostic from a random system makes this clearer in any form. I agree with you this should have be 1 min review fixing an important failure that we introduced with the c++20 support and some of the new releases of maybe libstdc++. @pcanal I find pasting errors in the logs a bad practice, especially when it obfuscates the real fix. Can you suggest a commit message which adds enough information which makes me happy as well?. In general it is a bit unfortunate how the whole review went for this PR. This should been just a simple ""approve"" as I thought we needed a quick fix which I developed in between travels and a business trip... I suspect this would help me define urgent/important in similar circumstances in future...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:384,Safety,avoid,avoiding,384,"> Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!; > ; > Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; > ; > ```; > That should fix a recent nightly failure with gcc11 avoiding to require; > module ""bits/ranges_base.h"" in C++20 context.; > ```; > ; > does not call out; > ; > * that it's during dictionary generation; > ; > * that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); > ; > * that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the exp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:313,Testability,log,log,313,"> Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!; > ; > Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; > ; > ```; > That should fix a recent nightly failure with gcc11 avoiding to require; > module ""bits/ranges_base.h"" in C++20 context.; > ```; > ; > does not call out; > ; > * that it's during dictionary generation; > ; > * that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); > ; > * that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the exp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:609,Testability,log,log,609,"> Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!; > ; > Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; > ; > ```; > That should fix a recent nightly failure with gcc11 avoiding to require; > module ""bits/ranges_base.h"" in C++20 context.; > ```; > ; > does not call out; > ; > * that it's during dictionary generation; > ; > * that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); > ; > * that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the exp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:1481,Testability,log,log,1481,"emap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); > ; > * that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). I am not sure if pasting a diagnostic from a random system makes this clearer in any form. I agree with you this should have be 1 min review fixing an important failure that we introduced with the c++20 support and some of the new releases of maybe libstdc++. @pcanal I find pasting errors in the logs a bad practice, especially when it obfuscates the real fix. Can you suggest a commit message which adds enough information which makes me happy as well?. In general it is a bit unfortunate how the whole review went fo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:1723,Testability,log,log,1723,"emap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); > ; > * that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). I am not sure if pasting a diagnostic from a random system makes this clearer in any form. I agree with you this should have be 1 min review fixing an important failure that we introduced with the c++20 support and some of the new releases of maybe libstdc++. @pcanal I find pasting errors in the logs a bad practice, especially when it obfuscates the real fix. Can you suggest a commit message which adds enough information which makes me happy as well?. In general it is a bit unfortunate how the whole review went fo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:2334,Testability,log,logs,2334,"our message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). I am not sure if pasting a diagnostic from a random system makes this clearer in any form. I agree with you this should have be 1 min review fixing an important failure that we introduced with the c++20 support and some of the new releases of maybe libstdc++. @pcanal I find pasting errors in the logs a bad practice, especially when it obfuscates the real fix. Can you suggest a commit message which adds enough information which makes me happy as well?. In general it is a bit unfortunate how the whole review went for this PR. This should been just a simple ""approve"" as I thought we needed a quick fix which I developed in between travels and a business trip... I suspect this would help me define urgent/important in similar circumstances in future...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:1730,Usability,simpl,simply,1730,"our message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). I am not sure if pasting a diagnostic from a random system makes this clearer in any form. I agree with you this should have be 1 min review fixing an important failure that we introduced with the c++20 support and some of the new releases of maybe libstdc++. @pcanal I find pasting errors in the logs a bad practice, especially when it obfuscates the real fix. Can you suggest a commit message which adds enough information which makes me happy as well?. In general it is a bit unfortunate how the whole review went for this PR. This should been just a simple ""approve"" as I thought we needed a quick fix which I developed in between travels and a business trip... I suspect this would help me define urgent/important in similar circumstances in future...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:2107,Usability,clear,clearer,2107,"our message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). I am not sure if pasting a diagnostic from a random system makes this clearer in any form. I agree with you this should have be 1 min review fixing an important failure that we introduced with the c++20 support and some of the new releases of maybe libstdc++. @pcanal I find pasting errors in the logs a bad practice, especially when it obfuscates the real fix. Can you suggest a commit message which adds enough information which makes me happy as well?. In general it is a bit unfortunate how the whole review went for this PR. This should been just a simple ""approve"" as I thought we needed a quick fix which I developed in between travels and a business trip... I suspect this would help me define urgent/important in similar circumstances in future...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430019305:2591,Usability,simpl,simple,2591,"our message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). I am not sure if pasting a diagnostic from a random system makes this clearer in any form. I agree with you this should have be 1 min review fixing an important failure that we introduced with the c++20 support and some of the new releases of maybe libstdc++. @pcanal I find pasting errors in the logs a bad practice, especially when it obfuscates the real fix. Can you suggest a commit message which adds enough information which makes me happy as well?. In general it is a bit unfortunate how the whole review went for this PR. This should been just a simple ""approve"" as I thought we needed a quick fix which I developed in between travels and a business trip... I suspect this would help me define urgent/important in similar circumstances in future...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305
https://github.com/root-project/root/pull/12276#issuecomment-1430326540:158,Availability,failure,failure,158,"@vgvassilev Let me clarify the disconnect. The title says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540
https://github.com/root-project/root/pull/12276#issuecomment-1430326540:809,Availability,error,error,809,"@vgvassilev Let me clarify the disconnect. The title says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540
https://github.com/root-project/root/pull/12276#issuecomment-1430326540:1030,Availability,error,error,1030,"silev Let me clarify the disconnect. The title says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module maps p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540
https://github.com/root-project/root/pull/12276#issuecomment-1430326540:1212,Availability,error,error,1212,"says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module maps provided by the standard library in those case""?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540
https://github.com/root-project/root/pull/12276#issuecomment-1430326540:1284,Availability,failure,failure,1284,"says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module maps provided by the standard library in those case""?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540
https://github.com/root-project/root/pull/12276#issuecomment-1430326540:1308,Availability,failure,failure,1308,"says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module maps provided by the standard library in those case""?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540
https://github.com/root-project/root/pull/12276#issuecomment-1430326540:1111,Integrability,message,message,1111,"says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module maps provided by the standard library in those case""?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540
https://github.com/root-project/root/pull/12276#issuecomment-1430326540:177,Safety,avoid,avoiding,177,"@vgvassilev Let me clarify the disconnect. The title says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540
https://github.com/root-project/root/pull/12276#issuecomment-1430326540:1973,Safety,avoid,avoiding,1973,"says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module maps provided by the standard library in those case""?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540
https://github.com/root-project/root/pull/12276#issuecomment-1430326540:421,Testability,log,log,421,"@vgvassilev Let me clarify the disconnect. The title says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540
https://github.com/root-project/root/pull/12276#issuecomment-1430326540:909,Usability,simpl,simple,909,"@vgvassilev Let me clarify the disconnect. The title says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540
https://github.com/root-project/root/pull/12276#issuecomment-1430326540:1006,Usability,simpl,simply,1006,"silev Let me clarify the disconnect. The title says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module maps p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540
https://github.com/root-project/root/issues/12286#issuecomment-1425901083:87,Usability,simpl,simply,87,Thank you for the fix! ; It appears that while forcing the use of `RooFoamGenerator` I simply skipped that code path...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12286#issuecomment-1425901083
https://github.com/root-project/root/issues/12296#issuecomment-1431275163:380,Integrability,message,messages,380,"I tried to reproduce this issue with the following C++ script:; ```; void nan(){; auto g = new TGraph ();; g->AddPoint(0,TMath::QuietNaN());; g->AddPoint(1,TMath::QuietNaN());; g->AddPoint(2,TMath::QuietNaN());; g->AddPoint(3,TMath::QuietNaN());; g->AddPoint(4,TMath::QuietNaN());; g->Draw(""APL"");; }; ```; Like you it gives me a blank canvas but in parallel, I get the following messages in the terminal output:; ```; root [0] ; Processing nan.C...; Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; Warning in <TCanvas::ResizePad>: Inf/NaN propagated to the pad. Check drawn objects.; Warning in <TCanvas::ResizePad>: c1 height changed from 0 to 10; ``` ; So it is pretty clear that there NaNs in the data. ; The message even invites the user to check the ""drawn objects"". I do not think we can do more than that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12296#issuecomment-1431275163
https://github.com/root-project/root/issues/12296#issuecomment-1431275163:737,Integrability,message,message,737,"I tried to reproduce this issue with the following C++ script:; ```; void nan(){; auto g = new TGraph ();; g->AddPoint(0,TMath::QuietNaN());; g->AddPoint(1,TMath::QuietNaN());; g->AddPoint(2,TMath::QuietNaN());; g->AddPoint(3,TMath::QuietNaN());; g->AddPoint(4,TMath::QuietNaN());; g->Draw(""APL"");; }; ```; Like you it gives me a blank canvas but in parallel, I get the following messages in the terminal output:; ```; root [0] ; Processing nan.C...; Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; Warning in <TCanvas::ResizePad>: Inf/NaN propagated to the pad. Check drawn objects.; Warning in <TCanvas::ResizePad>: c1 height changed from 0 to 10; ``` ; So it is pretty clear that there NaNs in the data. ; The message even invites the user to check the ""drawn objects"". I do not think we can do more than that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12296#issuecomment-1431275163
https://github.com/root-project/root/issues/12296#issuecomment-1431275163:696,Usability,clear,clear,696,"I tried to reproduce this issue with the following C++ script:; ```; void nan(){; auto g = new TGraph ();; g->AddPoint(0,TMath::QuietNaN());; g->AddPoint(1,TMath::QuietNaN());; g->AddPoint(2,TMath::QuietNaN());; g->AddPoint(3,TMath::QuietNaN());; g->AddPoint(4,TMath::QuietNaN());; g->Draw(""APL"");; }; ```; Like you it gives me a blank canvas but in parallel, I get the following messages in the terminal output:; ```; root [0] ; Processing nan.C...; Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; Warning in <TCanvas::ResizePad>: Inf/NaN propagated to the pad. Check drawn objects.; Warning in <TCanvas::ResizePad>: c1 height changed from 0 to 10; ``` ; So it is pretty clear that there NaNs in the data. ; The message even invites the user to check the ""drawn objects"". I do not think we can do more than that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12296#issuecomment-1431275163
https://github.com/root-project/root/issues/12307#issuecomment-1542423864:65,Availability,failure,failures,65,"Right - @smuzaffar was quite clear that we should separate build failures from test failures. But we now fail for build failures, too, so maybe including test failures in the failed state makes sense? Anyway, just pinging @smuzaffar for his recommendation + arguments before we decide what to do here!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12307#issuecomment-1542423864
https://github.com/root-project/root/issues/12307#issuecomment-1542423864:84,Availability,failure,failures,84,"Right - @smuzaffar was quite clear that we should separate build failures from test failures. But we now fail for build failures, too, so maybe including test failures in the failed state makes sense? Anyway, just pinging @smuzaffar for his recommendation + arguments before we decide what to do here!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12307#issuecomment-1542423864
https://github.com/root-project/root/issues/12307#issuecomment-1542423864:120,Availability,failure,failures,120,"Right - @smuzaffar was quite clear that we should separate build failures from test failures. But we now fail for build failures, too, so maybe including test failures in the failed state makes sense? Anyway, just pinging @smuzaffar for his recommendation + arguments before we decide what to do here!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12307#issuecomment-1542423864
https://github.com/root-project/root/issues/12307#issuecomment-1542423864:159,Availability,failure,failures,159,"Right - @smuzaffar was quite clear that we should separate build failures from test failures. But we now fail for build failures, too, so maybe including test failures in the failed state makes sense? Anyway, just pinging @smuzaffar for his recommendation + arguments before we decide what to do here!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12307#issuecomment-1542423864
https://github.com/root-project/root/issues/12307#issuecomment-1542423864:214,Availability,ping,pinging,214,"Right - @smuzaffar was quite clear that we should separate build failures from test failures. But we now fail for build failures, too, so maybe including test failures in the failed state makes sense? Anyway, just pinging @smuzaffar for his recommendation + arguments before we decide what to do here!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12307#issuecomment-1542423864
https://github.com/root-project/root/issues/12307#issuecomment-1542423864:79,Testability,test,test,79,"Right - @smuzaffar was quite clear that we should separate build failures from test failures. But we now fail for build failures, too, so maybe including test failures in the failed state makes sense? Anyway, just pinging @smuzaffar for his recommendation + arguments before we decide what to do here!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12307#issuecomment-1542423864
https://github.com/root-project/root/issues/12307#issuecomment-1542423864:154,Testability,test,test,154,"Right - @smuzaffar was quite clear that we should separate build failures from test failures. But we now fail for build failures, too, so maybe including test failures in the failed state makes sense? Anyway, just pinging @smuzaffar for his recommendation + arguments before we decide what to do here!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12307#issuecomment-1542423864
https://github.com/root-project/root/issues/12307#issuecomment-1542423864:29,Usability,clear,clear,29,"Right - @smuzaffar was quite clear that we should separate build failures from test failures. But we now fail for build failures, too, so maybe including test failures in the failed state makes sense? Anyway, just pinging @smuzaffar for his recommendation + arguments before we decide what to do here!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12307#issuecomment-1542423864
https://github.com/root-project/root/pull/12348#issuecomment-1439898961:522,Integrability,message,messages,522,"Well, that argument would apply to 95 % percent of the classes in ROOT then :D Users that are adventurous to use this probably also know about C++ ownership. I personally don't think the added complexity and less clear ownership when using `shared_ptr` + `weak_ptr` is justified in this case. I think `shared_ptr` should only be used when there are really shared resources in the implementation details, not as a general solution to prevent the user from making memory management mistakes. As you say, it gives also mixed messages on how to manage the resources. Would you be okay with leaving it like this for now? We can always revisit this if need be...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12348#issuecomment-1439898961
https://github.com/root-project/root/pull/12348#issuecomment-1439898961:213,Usability,clear,clear,213,"Well, that argument would apply to 95 % percent of the classes in ROOT then :D Users that are adventurous to use this probably also know about C++ ownership. I personally don't think the added complexity and less clear ownership when using `shared_ptr` + `weak_ptr` is justified in this case. I think `shared_ptr` should only be used when there are really shared resources in the implementation details, not as a general solution to prevent the user from making memory management mistakes. As you say, it gives also mixed messages on how to manage the resources. Would you be okay with leaving it like this for now? We can always revisit this if need be...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12348#issuecomment-1439898961
https://github.com/root-project/root/pull/12349#issuecomment-1479066603:41,Usability,simpl,simplify,41,"I add commit to fix compiler warning and simplify a bit code.; @couet, can I merge it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12349#issuecomment-1479066603
https://github.com/root-project/root/pull/12353#issuecomment-1437462950:93,Usability,simpl,simply,93,"> I don't think `#if __arm64__` will work. Should be `#ifdef __aarch64__`. Oh yes, my bad, I simply copied from the line above which is for Apple / macOS. Thanks for catching, fixing, and confirming that the approach works. Then we can merge this and backport for 6.28/02 :smiley:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12353#issuecomment-1437462950
https://github.com/root-project/root/pull/12363#issuecomment-1581162133:79,Deployability,update,updated,79,"Thank you so much @eguiraud for the comments! I have addressed all of them and updated the commits accordingly, also splitting them in smaller commits to make intentions clearer. New tests are still missing, but I would appreciate if you could take another look. In particular, these changes hopefully streamline the code a bit:; * `rdf_uuid`: this was previously not well named, since we need something that contains both an identifier for the current RDataFrame instance and also one for the current (distributed) execution of that RDataFrame (e.g. to separate to consecutive triggers of the computation graph). I have added the type `ExecutionIdentifier` that holds both. This class is now used everywhere (in Ranges.py, HeadNode.py) and should improve readability.; * I merged `CloneResultPtr` and `CloneResultMap` into `CloneResultAndAction`. This helps making the logic in DistRDF more simple (i.e. is what allows the usage of `singledispatch` to distinguish different ways of cloning actions of the distributed computation graph).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12363#issuecomment-1581162133
https://github.com/root-project/root/pull/12363#issuecomment-1581162133:183,Testability,test,tests,183,"Thank you so much @eguiraud for the comments! I have addressed all of them and updated the commits accordingly, also splitting them in smaller commits to make intentions clearer. New tests are still missing, but I would appreciate if you could take another look. In particular, these changes hopefully streamline the code a bit:; * `rdf_uuid`: this was previously not well named, since we need something that contains both an identifier for the current RDataFrame instance and also one for the current (distributed) execution of that RDataFrame (e.g. to separate to consecutive triggers of the computation graph). I have added the type `ExecutionIdentifier` that holds both. This class is now used everywhere (in Ranges.py, HeadNode.py) and should improve readability.; * I merged `CloneResultPtr` and `CloneResultMap` into `CloneResultAndAction`. This helps making the logic in DistRDF more simple (i.e. is what allows the usage of `singledispatch` to distinguish different ways of cloning actions of the distributed computation graph).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12363#issuecomment-1581162133
https://github.com/root-project/root/pull/12363#issuecomment-1581162133:870,Testability,log,logic,870,"Thank you so much @eguiraud for the comments! I have addressed all of them and updated the commits accordingly, also splitting them in smaller commits to make intentions clearer. New tests are still missing, but I would appreciate if you could take another look. In particular, these changes hopefully streamline the code a bit:; * `rdf_uuid`: this was previously not well named, since we need something that contains both an identifier for the current RDataFrame instance and also one for the current (distributed) execution of that RDataFrame (e.g. to separate to consecutive triggers of the computation graph). I have added the type `ExecutionIdentifier` that holds both. This class is now used everywhere (in Ranges.py, HeadNode.py) and should improve readability.; * I merged `CloneResultPtr` and `CloneResultMap` into `CloneResultAndAction`. This helps making the logic in DistRDF more simple (i.e. is what allows the usage of `singledispatch` to distinguish different ways of cloning actions of the distributed computation graph).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12363#issuecomment-1581162133
https://github.com/root-project/root/pull/12363#issuecomment-1581162133:170,Usability,clear,clearer,170,"Thank you so much @eguiraud for the comments! I have addressed all of them and updated the commits accordingly, also splitting them in smaller commits to make intentions clearer. New tests are still missing, but I would appreciate if you could take another look. In particular, these changes hopefully streamline the code a bit:; * `rdf_uuid`: this was previously not well named, since we need something that contains both an identifier for the current RDataFrame instance and also one for the current (distributed) execution of that RDataFrame (e.g. to separate to consecutive triggers of the computation graph). I have added the type `ExecutionIdentifier` that holds both. This class is now used everywhere (in Ranges.py, HeadNode.py) and should improve readability.; * I merged `CloneResultPtr` and `CloneResultMap` into `CloneResultAndAction`. This helps making the logic in DistRDF more simple (i.e. is what allows the usage of `singledispatch` to distinguish different ways of cloning actions of the distributed computation graph).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12363#issuecomment-1581162133
https://github.com/root-project/root/pull/12363#issuecomment-1581162133:892,Usability,simpl,simple,892,"Thank you so much @eguiraud for the comments! I have addressed all of them and updated the commits accordingly, also splitting them in smaller commits to make intentions clearer. New tests are still missing, but I would appreciate if you could take another look. In particular, these changes hopefully streamline the code a bit:; * `rdf_uuid`: this was previously not well named, since we need something that contains both an identifier for the current RDataFrame instance and also one for the current (distributed) execution of that RDataFrame (e.g. to separate to consecutive triggers of the computation graph). I have added the type `ExecutionIdentifier` that holds both. This class is now used everywhere (in Ranges.py, HeadNode.py) and should improve readability.; * I merged `CloneResultPtr` and `CloneResultMap` into `CloneResultAndAction`. This helps making the logic in DistRDF more simple (i.e. is what allows the usage of `singledispatch` to distinguish different ways of cloning actions of the distributed computation graph).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12363#issuecomment-1581162133
https://github.com/root-project/root/pull/12363#issuecomment-1585596942:71,Availability,failure,failure,71,"Added tests for the C++ mechanisms, and attempt at fixing the ubuntu18 failure (see last commit) with a much more simplified approach w.r.t. https://github.com/root-project/root/pull/12981, which should not be needed anymore (let's see what the CI thinks).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12363#issuecomment-1585596942
https://github.com/root-project/root/pull/12363#issuecomment-1585596942:6,Testability,test,tests,6,"Added tests for the C++ mechanisms, and attempt at fixing the ubuntu18 failure (see last commit) with a much more simplified approach w.r.t. https://github.com/root-project/root/pull/12981, which should not be needed anymore (let's see what the CI thinks).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12363#issuecomment-1585596942
https://github.com/root-project/root/pull/12363#issuecomment-1585596942:114,Usability,simpl,simplified,114,"Added tests for the C++ mechanisms, and attempt at fixing the ubuntu18 failure (see last commit) with a much more simplified approach w.r.t. https://github.com/root-project/root/pull/12981, which should not be needed anymore (let's see what the CI thinks).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12363#issuecomment-1585596942
https://github.com/root-project/root/issues/12370#issuecomment-1443741367:124,Deployability,install,installed,124,"Hi @bsunanda ,; Can you provide a simple reproducer of your case? Together with some information about your system (how you installed ROOT etc., compiler version etc.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12370#issuecomment-1443741367
https://github.com/root-project/root/issues/12370#issuecomment-1443741367:34,Usability,simpl,simple,34,"Hi @bsunanda ,; Can you provide a simple reproducer of your case? Together with some information about your system (how you installed ROOT etc., compiler version etc.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12370#issuecomment-1443741367
https://github.com/root-project/root/issues/12378#issuecomment-1462615809:234,Testability,test,test,234,"Hi Marcin,. That worked and did some progress in understanding the problem. A potential work-around would be requested the dictionary for the 2 level of namespace/struct that contains the typedef (in the same dictionary). In order to test any solution to the problem I still need a standalone reproducer and I am still having some difficulties. In particular in my attempts to reproduce the dictionary generation the typedef does not appear in the dictionary nor in the rootmap file. Weirder even, when I follow the [instructions](https://atlassoftwaredocs.web.cern.ch/guides/build_release/) to build Athena from scratch (on zeus.lbl.gov; done a couple of weeks ago), I get a different rootmap file (however because the build is currently (for other reason) partially broken I did not try with it):; ```; grep jetlink_t ../atlas_working/build/build/Athena/_CPack_Packages/Linux/RPM/Athena_23.0.17_x86_64-centos7-gcc11-opt/usr/Athena/23.0.17/InstallArea/x86_64-centos7-gcc11-opt/lib/Athena.rootmap; ```; vs; ```; grep jetlink_t /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/2023-03-05T2101/Athena/23.0.20/InstallArea/x86_64-centos7-gcc11-opt/lib/Athena.rootmap; typedef MissingETBase::Types::jetlink_t; ```. So I am not sure what I am doing different in my reproducer and in my local Athena.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12378#issuecomment-1462615809
https://github.com/root-project/root/issues/12378#issuecomment-1462615809:569,Usability,guid,guides,569,"Hi Marcin,. That worked and did some progress in understanding the problem. A potential work-around would be requested the dictionary for the 2 level of namespace/struct that contains the typedef (in the same dictionary). In order to test any solution to the problem I still need a standalone reproducer and I am still having some difficulties. In particular in my attempts to reproduce the dictionary generation the typedef does not appear in the dictionary nor in the rootmap file. Weirder even, when I follow the [instructions](https://atlassoftwaredocs.web.cern.ch/guides/build_release/) to build Athena from scratch (on zeus.lbl.gov; done a couple of weeks ago), I get a different rootmap file (however because the build is currently (for other reason) partially broken I did not try with it):; ```; grep jetlink_t ../atlas_working/build/build/Athena/_CPack_Packages/Linux/RPM/Athena_23.0.17_x86_64-centos7-gcc11-opt/usr/Athena/23.0.17/InstallArea/x86_64-centos7-gcc11-opt/lib/Athena.rootmap; ```; vs; ```; grep jetlink_t /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/2023-03-05T2101/Athena/23.0.20/InstallArea/x86_64-centos7-gcc11-opt/lib/Athena.rootmap; typedef MissingETBase::Types::jetlink_t; ```. So I am not sure what I am doing different in my reproducer and in my local Athena.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12378#issuecomment-1462615809
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:219,Availability,down,down,219,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:878,Availability,down,down,878,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:1023,Availability,robust,robustness,1023,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:1035,Availability,reliab,reliability,1035,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:1364,Availability,error,errors,1364,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:586,Deployability,integrat,integration,586,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:586,Integrability,integrat,integration,586,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:1130,Performance,perform,performance,1130,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:59,Testability,test,test,59,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:158,Testability,test,tests,158,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:250,Testability,test,tests,250,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:335,Testability,test,tests,335,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:432,Testability,test,tests,432,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:501,Testability,test,tests,501,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:599,Testability,test,tests,599,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1538758017:667,Usability,simpl,simply,667,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017
https://github.com/root-project/root/pull/12389#issuecomment-1540010898:224,Availability,failure,failure,224,"I cannot decide, that's up to you @egpbos and @lmoneta given the input by @hahnjo and me here. Please consider this:. IIUC you are interpreting this lack of bitwise equality as a bug. In that case our approach is to fix the failure asap. If ""asap"" isn't happening because reasons then we disable the test, and create a bug report about the test failure, reminding ourselves (you, @egpbos in this case) that the test needs to be fixed and re-enabled. ""Disabling the test"" can as well be a switch from equality to equality-with-range, as long as the GitHub issue is clear which commit needs to be reverted to reprouce the original test failure. How does that sound?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1540010898
https://github.com/root-project/root/pull/12389#issuecomment-1540010898:345,Availability,failure,failure,345,"I cannot decide, that's up to you @egpbos and @lmoneta given the input by @hahnjo and me here. Please consider this:. IIUC you are interpreting this lack of bitwise equality as a bug. In that case our approach is to fix the failure asap. If ""asap"" isn't happening because reasons then we disable the test, and create a bug report about the test failure, reminding ourselves (you, @egpbos in this case) that the test needs to be fixed and re-enabled. ""Disabling the test"" can as well be a switch from equality to equality-with-range, as long as the GitHub issue is clear which commit needs to be reverted to reprouce the original test failure. How does that sound?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1540010898
https://github.com/root-project/root/pull/12389#issuecomment-1540010898:634,Availability,failure,failure,634,"I cannot decide, that's up to you @egpbos and @lmoneta given the input by @hahnjo and me here. Please consider this:. IIUC you are interpreting this lack of bitwise equality as a bug. In that case our approach is to fix the failure asap. If ""asap"" isn't happening because reasons then we disable the test, and create a bug report about the test failure, reminding ourselves (you, @egpbos in this case) that the test needs to be fixed and re-enabled. ""Disabling the test"" can as well be a switch from equality to equality-with-range, as long as the GitHub issue is clear which commit needs to be reverted to reprouce the original test failure. How does that sound?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1540010898
https://github.com/root-project/root/pull/12389#issuecomment-1540010898:300,Testability,test,test,300,"I cannot decide, that's up to you @egpbos and @lmoneta given the input by @hahnjo and me here. Please consider this:. IIUC you are interpreting this lack of bitwise equality as a bug. In that case our approach is to fix the failure asap. If ""asap"" isn't happening because reasons then we disable the test, and create a bug report about the test failure, reminding ourselves (you, @egpbos in this case) that the test needs to be fixed and re-enabled. ""Disabling the test"" can as well be a switch from equality to equality-with-range, as long as the GitHub issue is clear which commit needs to be reverted to reprouce the original test failure. How does that sound?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1540010898
https://github.com/root-project/root/pull/12389#issuecomment-1540010898:340,Testability,test,test,340,"I cannot decide, that's up to you @egpbos and @lmoneta given the input by @hahnjo and me here. Please consider this:. IIUC you are interpreting this lack of bitwise equality as a bug. In that case our approach is to fix the failure asap. If ""asap"" isn't happening because reasons then we disable the test, and create a bug report about the test failure, reminding ourselves (you, @egpbos in this case) that the test needs to be fixed and re-enabled. ""Disabling the test"" can as well be a switch from equality to equality-with-range, as long as the GitHub issue is clear which commit needs to be reverted to reprouce the original test failure. How does that sound?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1540010898
https://github.com/root-project/root/pull/12389#issuecomment-1540010898:411,Testability,test,test,411,"I cannot decide, that's up to you @egpbos and @lmoneta given the input by @hahnjo and me here. Please consider this:. IIUC you are interpreting this lack of bitwise equality as a bug. In that case our approach is to fix the failure asap. If ""asap"" isn't happening because reasons then we disable the test, and create a bug report about the test failure, reminding ourselves (you, @egpbos in this case) that the test needs to be fixed and re-enabled. ""Disabling the test"" can as well be a switch from equality to equality-with-range, as long as the GitHub issue is clear which commit needs to be reverted to reprouce the original test failure. How does that sound?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1540010898
https://github.com/root-project/root/pull/12389#issuecomment-1540010898:465,Testability,test,test,465,"I cannot decide, that's up to you @egpbos and @lmoneta given the input by @hahnjo and me here. Please consider this:. IIUC you are interpreting this lack of bitwise equality as a bug. In that case our approach is to fix the failure asap. If ""asap"" isn't happening because reasons then we disable the test, and create a bug report about the test failure, reminding ourselves (you, @egpbos in this case) that the test needs to be fixed and re-enabled. ""Disabling the test"" can as well be a switch from equality to equality-with-range, as long as the GitHub issue is clear which commit needs to be reverted to reprouce the original test failure. How does that sound?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1540010898
https://github.com/root-project/root/pull/12389#issuecomment-1540010898:629,Testability,test,test,629,"I cannot decide, that's up to you @egpbos and @lmoneta given the input by @hahnjo and me here. Please consider this:. IIUC you are interpreting this lack of bitwise equality as a bug. In that case our approach is to fix the failure asap. If ""asap"" isn't happening because reasons then we disable the test, and create a bug report about the test failure, reminding ourselves (you, @egpbos in this case) that the test needs to be fixed and re-enabled. ""Disabling the test"" can as well be a switch from equality to equality-with-range, as long as the GitHub issue is clear which commit needs to be reverted to reprouce the original test failure. How does that sound?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1540010898
https://github.com/root-project/root/pull/12389#issuecomment-1540010898:564,Usability,clear,clear,564,"I cannot decide, that's up to you @egpbos and @lmoneta given the input by @hahnjo and me here. Please consider this:. IIUC you are interpreting this lack of bitwise equality as a bug. In that case our approach is to fix the failure asap. If ""asap"" isn't happening because reasons then we disable the test, and create a bug report about the test failure, reminding ourselves (you, @egpbos in this case) that the test needs to be fixed and re-enabled. ""Disabling the test"" can as well be a switch from equality to equality-with-range, as long as the GitHub issue is clear which commit needs to be reverted to reprouce the original test failure. How does that sound?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1540010898
https://github.com/root-project/root/pull/12397#issuecomment-1448506389:76,Modifiability,inherit,inherited,76,"Hi! I'm not sure if this is a good idea. The ROOT Fitter is not meant to be inherited from in C++, right? It has no virtual functions, and nowhere do we inherit from it. I'm worried that encouraging users to inherit from the Fitter like this will cause further complications, so maybe it's good that it doesn't work? What is the benefit of this?. If you think this is really necessary, maybe better add a comment to the destructor explaining why it needs to be `virtual` for PyROOT, because when reading the C++ code it's not clear why it should be there and there is the risk that future developers interpret it as an accidentally added keyword and remove it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12397#issuecomment-1448506389
https://github.com/root-project/root/pull/12397#issuecomment-1448506389:153,Modifiability,inherit,inherit,153,"Hi! I'm not sure if this is a good idea. The ROOT Fitter is not meant to be inherited from in C++, right? It has no virtual functions, and nowhere do we inherit from it. I'm worried that encouraging users to inherit from the Fitter like this will cause further complications, so maybe it's good that it doesn't work? What is the benefit of this?. If you think this is really necessary, maybe better add a comment to the destructor explaining why it needs to be `virtual` for PyROOT, because when reading the C++ code it's not clear why it should be there and there is the risk that future developers interpret it as an accidentally added keyword and remove it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12397#issuecomment-1448506389
https://github.com/root-project/root/pull/12397#issuecomment-1448506389:208,Modifiability,inherit,inherit,208,"Hi! I'm not sure if this is a good idea. The ROOT Fitter is not meant to be inherited from in C++, right? It has no virtual functions, and nowhere do we inherit from it. I'm worried that encouraging users to inherit from the Fitter like this will cause further complications, so maybe it's good that it doesn't work? What is the benefit of this?. If you think this is really necessary, maybe better add a comment to the destructor explaining why it needs to be `virtual` for PyROOT, because when reading the C++ code it's not clear why it should be there and there is the risk that future developers interpret it as an accidentally added keyword and remove it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12397#issuecomment-1448506389
https://github.com/root-project/root/pull/12397#issuecomment-1448506389:572,Safety,risk,risk,572,"Hi! I'm not sure if this is a good idea. The ROOT Fitter is not meant to be inherited from in C++, right? It has no virtual functions, and nowhere do we inherit from it. I'm worried that encouraging users to inherit from the Fitter like this will cause further complications, so maybe it's good that it doesn't work? What is the benefit of this?. If you think this is really necessary, maybe better add a comment to the destructor explaining why it needs to be `virtual` for PyROOT, because when reading the C++ code it's not clear why it should be there and there is the risk that future developers interpret it as an accidentally added keyword and remove it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12397#issuecomment-1448506389
https://github.com/root-project/root/pull/12397#issuecomment-1448506389:526,Usability,clear,clear,526,"Hi! I'm not sure if this is a good idea. The ROOT Fitter is not meant to be inherited from in C++, right? It has no virtual functions, and nowhere do we inherit from it. I'm worried that encouraging users to inherit from the Fitter like this will cause further complications, so maybe it's good that it doesn't work? What is the benefit of this?. If you think this is really necessary, maybe better add a comment to the destructor explaining why it needs to be `virtual` for PyROOT, because when reading the C++ code it's not clear why it should be there and there is the risk that future developers interpret it as an accidentally added keyword and remove it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12397#issuecomment-1448506389
https://github.com/root-project/root/pull/12415#issuecomment-1456017123:218,Testability,test,tests,218,Build failed on windows10/cxx14.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/console).; ### Failing tests:; - [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_collection_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_collection_build/); - [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_pair_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_pair_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tprofile_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tprofile_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_ttree_read_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_ttree_read_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_th1f_fill_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_th1f_fill_build/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_libInitOrderDups_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_libInitOrde,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12415#issuecomment-1456017123
https://github.com/root-project/root/pull/12415#issuecomment-1456017123:389,Testability,test,testReport,389,Build failed on windows10/cxx14.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/console).; ### Failing tests:; - [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_collection_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_collection_build/); - [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_pair_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_pair_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tprofile_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tprofile_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_ttree_read_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_ttree_read_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_th1f_fill_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_th1f_fill_build/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_libInitOrderDups_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_libInitOrde,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12415#issuecomment-1456017123
https://github.com/root-project/root/pull/12415#issuecomment-1456017123:639,Testability,test,testReport,639,Build failed on windows10/cxx14.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/console).; ### Failing tests:; - [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_collection_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_collection_build/); - [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_pair_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_pair_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tprofile_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tprofile_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_ttree_read_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_ttree_read_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_th1f_fill_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_th1f_fill_build/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_libInitOrderDups_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_libInitOrde,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12415#issuecomment-1456017123
https://github.com/root-project/root/pull/12415#issuecomment-1456017123:891,Testability,test,testReport,891,Build failed on windows10/cxx14.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/console).; ### Failing tests:; - [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_collection_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_collection_build/); - [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_pair_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_pair_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tprofile_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tprofile_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_ttree_read_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_ttree_read_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_th1f_fill_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_th1f_fill_build/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_libInitOrderDups_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_libInitOrde,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12415#issuecomment-1456017123
https://github.com/root-project/root/pull/12415#issuecomment-1456017123:1145,Testability,test,testReport,1145,ervices.cern.ch/root-jenkins/job/root-pullrequests-build/169780/console).; ### Failing tests:; - [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_collection_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_collection_build/); - [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_pair_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_pair_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tprofile_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tprofile_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_ttree_read_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_ttree_read_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_th1f_fill_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_th1f_fill_build/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_libInitOrderDups_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_libInitOrderDups_build/); - [projectroot.roottest.root.meta.genreflex.ROOT-5709.roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build](http,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12415#issuecomment-1456017123
https://github.com/root-project/root/pull/12415#issuecomment-1456017123:1399,Testability,test,testReport,1399,780/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_collection_build/); - [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_pair_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_pair_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tprofile_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tprofile_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_ttree_read_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_ttree_read_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_th1f_fill_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_th1f_fill_build/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_libInitOrderDups_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_libInitOrderDups_build/); - [projectroot.roottest.root.meta.genreflex.ROOT-5709.roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta.genreflex/ROOT-5709/roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build/); - [projectroot.roottest.root.multicore.roottest_root_mult,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12415#issuecomment-1456017123
https://github.com/root-project/root/pull/12415#issuecomment-1456017123:1654,Testability,test,testReport,1654,estReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_pair_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tprofile_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tprofile_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_ttree_read_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_ttree_read_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_th1f_fill_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_th1f_fill_build/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_libInitOrderDups_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_libInitOrderDups_build/); - [projectroot.roottest.root.meta.genreflex.ROOT-5709.roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta.genreflex/ROOT-5709/roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_testSetAddress_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_testSetAddress_build/); - [projectroot.roottest.root.selector.simple.roottes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12415#issuecomment-1456017123
https://github.com/root-project/root/pull/12415#issuecomment-1456017123:1915,Testability,test,testReport,1915,ild/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tprofile_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tprofile_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_ttree_read_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_ttree_read_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_th1f_fill_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_th1f_fill_build/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_libInitOrderDups_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_libInitOrderDups_build/); - [projectroot.roottest.root.meta.genreflex.ROOT-5709.roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta.genreflex/ROOT-5709/roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_testSetAddress_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_testSetAddress_build/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_testSelector_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_testSelector_build/). And 155 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12415#issuecomment-1456017123
https://github.com/root-project/root/pull/12415#issuecomment-1456017123:2207,Testability,test,testReport,2207,ild/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tprofile_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tprofile_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_ttree_read_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_ttree_read_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_th1f_fill_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_th1f_fill_build/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_libInitOrderDups_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_libInitOrderDups_build/); - [projectroot.roottest.root.meta.genreflex.ROOT-5709.roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta.genreflex/ROOT-5709/roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_testSetAddress_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_testSetAddress_build/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_testSelector_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_testSelector_build/). And 155 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12415#issuecomment-1456017123
https://github.com/root-project/root/pull/12415#issuecomment-1456017123:2493,Testability,test,testReport,2493,ild/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tprofile_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tprofile_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_ttree_read_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_ttree_read_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_th1f_fill_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_th1f_fill_build/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_libInitOrderDups_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_libInitOrderDups_build/); - [projectroot.roottest.root.meta.genreflex.ROOT-5709.roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta.genreflex/ROOT-5709/roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_testSetAddress_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_testSetAddress_build/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_testSelector_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_testSelector_build/). And 155 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12415#issuecomment-1456017123
https://github.com/root-project/root/pull/12415#issuecomment-1456017123:2763,Testability,test,testReport,2763,ild/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tprofile_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tprofile_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_ttree_read_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_ttree_read_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_th1f_fill_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_th1f_fill_build/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_libInitOrderDups_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_libInitOrderDups_build/); - [projectroot.roottest.root.meta.genreflex.ROOT-5709.roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta.genreflex/ROOT-5709/roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_testSetAddress_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_testSetAddress_build/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_testSelector_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_testSelector_build/). And 155 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12415#issuecomment-1456017123
https://github.com/root-project/root/pull/12415#issuecomment-1456017123:2626,Usability,simpl,simple,2626,ild/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tprofile_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tprofile_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_ttree_read_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_ttree_read_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_th1f_fill_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_th1f_fill_build/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_libInitOrderDups_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_libInitOrderDups_build/); - [projectroot.roottest.root.meta.genreflex.ROOT-5709.roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta.genreflex/ROOT-5709/roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_testSetAddress_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_testSetAddress_build/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_testSelector_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_testSelector_build/). And 155 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12415#issuecomment-1456017123
https://github.com/root-project/root/pull/12415#issuecomment-1456017123:2809,Usability,simpl,simple,2809,ild/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tprofile_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tprofile_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_ttree_read_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_ttree_read_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_th1f_fill_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_th1f_fill_build/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_libInitOrderDups_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_libInitOrderDups_build/); - [projectroot.roottest.root.meta.genreflex.ROOT-5709.roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta.genreflex/ROOT-5709/roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_testSetAddress_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_testSetAddress_build/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_testSelector_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_testSelector_build/). And 155 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12415#issuecomment-1456017123
https://github.com/root-project/root/pull/12421#issuecomment-1458668358:87,Usability,simpl,simplify,87,"Ok, so, despite being a native speaker, I'll admit writing is not my forte. I tried to simplify what you wrote a bit, but please lmk what to change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12421#issuecomment-1458668358
https://github.com/root-project/root/issues/12426#issuecomment-1470788474:122,Usability,simpl,simpler,122,"Thank you for the additional information! We are setting up a big endian node here, which will make working on this issue simpler.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12426#issuecomment-1470788474
https://github.com/root-project/root/issues/12427#issuecomment-1458084140:161,Usability,simpl,simpler,161,"Thank you for the bug report! Our 32bit CI is currently not running on the experimental namespace (including RNTuple). Let us fix that first, which will make it simpler to fix this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12427#issuecomment-1458084140
https://github.com/root-project/root/issues/12492#issuecomment-1473275035:28,Testability,log,logs,28,"Dear Denys,. Thanks for the logs and for the information. So if you cannot use c++17, why not simply use c++14 and disable root7?. Cheers, Bertrand.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12492#issuecomment-1473275035
https://github.com/root-project/root/issues/12492#issuecomment-1473275035:94,Usability,simpl,simply,94,"Dear Denys,. Thanks for the logs and for the information. So if you cannot use c++17, why not simply use c++14 and disable root7?. Cheers, Bertrand.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12492#issuecomment-1473275035
https://github.com/root-project/root/issues/12496#issuecomment-1564653938:27,Usability,feedback,feedback,27,"@eguiraud , thanks for the feedback!. Ineed I have tried my reproducer with `/cvmfs/sft.cern.ch/lcg/views/LCG_103/x86_64-centos7-gcc11-opt/setup.sh`; and everything seems to work properly!. So I assume something magical happened between; `root 6.26.06` and `root 6.28.00`; or between; `Python 3.9.10` and `Python 3.9.12`. I will close the issue then. Thanks for your time investigating this :pray:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12496#issuecomment-1564653938
https://github.com/root-project/root/pull/12513#issuecomment-1490325536:140,Usability,simpl,simple,140,"You mean `gStyle->GetAxisMaxDigits()`?. I guess, one should understand why it happens.; How I can reproduce it?. As a workaround, I can add simple check in this function that it returns meaningful positive value from the range [0..100]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12513#issuecomment-1490325536
https://github.com/root-project/root/pull/12551#issuecomment-1485254013:25,Usability,guid,guide,25,"In principle, the user's guide is frozen. We now rely on the [Manual](https://root.cern/manual/) and the [reference guide](https://root.cern/doc/master/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551#issuecomment-1485254013
https://github.com/root-project/root/pull/12551#issuecomment-1485254013:116,Usability,guid,guide,116,"In principle, the user's guide is frozen. We now rely on the [Manual](https://root.cern/manual/) and the [reference guide](https://root.cern/doc/master/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551#issuecomment-1485254013
https://github.com/root-project/root/pull/12551#issuecomment-1485286794:96,Usability,guid,guide,96,"@olantwin how did you find this? (Tells us what we need to remove.). > In principle, the user's guide is frozen. @couet should we remove this file then?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551#issuecomment-1485286794
https://github.com/root-project/root/pull/12551#issuecomment-1485324939:68,Usability,guid,guide,68,"@axel, It is just a few lines to be removed in [documentation/users-guide/Trees.md](https://github.com/root-project/root/pull/12551#diff-117cc7b0ab6e57e24e841291453a0649b39771247133629bd536ebd0212a3510) (not a complete file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551#issuecomment-1485324939
https://github.com/root-project/root/pull/12551#issuecomment-1882573439:98,Usability,guid,guide,98,"There was no followup here on the discussion on what should be in the manual and in the reference guide, but I think this discussion is not directly connected to removing this outdated statement about STL splitting from the users guide. So I would suggest to merge this PR as is, thanks @olantwin! If you want to follow up on adding this information to the reference guide (doxygen) or have other suggestions to improve the documentation, feel free to open more PRs :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551#issuecomment-1882573439
https://github.com/root-project/root/pull/12551#issuecomment-1882573439:230,Usability,guid,guide,230,"There was no followup here on the discussion on what should be in the manual and in the reference guide, but I think this discussion is not directly connected to removing this outdated statement about STL splitting from the users guide. So I would suggest to merge this PR as is, thanks @olantwin! If you want to follow up on adding this information to the reference guide (doxygen) or have other suggestions to improve the documentation, feel free to open more PRs :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551#issuecomment-1882573439
https://github.com/root-project/root/pull/12551#issuecomment-1882573439:367,Usability,guid,guide,367,"There was no followup here on the discussion on what should be in the manual and in the reference guide, but I think this discussion is not directly connected to removing this outdated statement about STL splitting from the users guide. So I would suggest to merge this PR as is, thanks @olantwin! If you want to follow up on adding this information to the reference guide (doxygen) or have other suggestions to improve the documentation, feel free to open more PRs :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551#issuecomment-1882573439
https://github.com/root-project/root/issues/12559#issuecomment-1494518922:201,Usability,simpl,simple,201,"The problem is in automatic reading the objects, probably for some missing library (as in this case the `TMath::Abs` definition). I think we had similar issues with TFormula/TF1 before. ; There is the simple workaround:; ```; auto legends = file->Get(""legends""); legends->Draw();; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559#issuecomment-1494518922
https://github.com/root-project/root/pull/12561#issuecomment-1491725885:714,Availability,failure,failures,714,"> > > @hahnjo, is there a way to move forward without losing progress we made for windows?; > > ; > > I don't see one, please see my very lengthy and detailed commit message of why I think it's not going to work like that.; > ; > Would it not help if we annotate all dependencies by hand all of the dependencies that cannot work with modules?. Yes, this is the direction I've also been thinking about. But it's certainly not an easy change of a couple of lines, and I really would like to fix the currently broken state first. To be clear, this is currently *blocking* me from making changes in ROOT / Cling, or at least making it unnecessarily hard because I always have to either deal with 20-ish unrelated test failures or base my branches on these fixes. It's really painful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561#issuecomment-1491725885
https://github.com/root-project/root/pull/12561#issuecomment-1491725885:166,Integrability,message,message,166,"> > > @hahnjo, is there a way to move forward without losing progress we made for windows?; > > ; > > I don't see one, please see my very lengthy and detailed commit message of why I think it's not going to work like that.; > ; > Would it not help if we annotate all dependencies by hand all of the dependencies that cannot work with modules?. Yes, this is the direction I've also been thinking about. But it's certainly not an easy change of a couple of lines, and I really would like to fix the currently broken state first. To be clear, this is currently *blocking* me from making changes in ROOT / Cling, or at least making it unnecessarily hard because I always have to either deal with 20-ish unrelated test failures or base my branches on these fixes. It's really painful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561#issuecomment-1491725885
https://github.com/root-project/root/pull/12561#issuecomment-1491725885:267,Integrability,depend,dependencies,267,"> > > @hahnjo, is there a way to move forward without losing progress we made for windows?; > > ; > > I don't see one, please see my very lengthy and detailed commit message of why I think it's not going to work like that.; > ; > Would it not help if we annotate all dependencies by hand all of the dependencies that cannot work with modules?. Yes, this is the direction I've also been thinking about. But it's certainly not an easy change of a couple of lines, and I really would like to fix the currently broken state first. To be clear, this is currently *blocking* me from making changes in ROOT / Cling, or at least making it unnecessarily hard because I always have to either deal with 20-ish unrelated test failures or base my branches on these fixes. It's really painful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561#issuecomment-1491725885
https://github.com/root-project/root/pull/12561#issuecomment-1491725885:299,Integrability,depend,dependencies,299,"> > > @hahnjo, is there a way to move forward without losing progress we made for windows?; > > ; > > I don't see one, please see my very lengthy and detailed commit message of why I think it's not going to work like that.; > ; > Would it not help if we annotate all dependencies by hand all of the dependencies that cannot work with modules?. Yes, this is the direction I've also been thinking about. But it's certainly not an easy change of a couple of lines, and I really would like to fix the currently broken state first. To be clear, this is currently *blocking* me from making changes in ROOT / Cling, or at least making it unnecessarily hard because I always have to either deal with 20-ish unrelated test failures or base my branches on these fixes. It's really painful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561#issuecomment-1491725885
https://github.com/root-project/root/pull/12561#issuecomment-1491725885:709,Testability,test,test,709,"> > > @hahnjo, is there a way to move forward without losing progress we made for windows?; > > ; > > I don't see one, please see my very lengthy and detailed commit message of why I think it's not going to work like that.; > ; > Would it not help if we annotate all dependencies by hand all of the dependencies that cannot work with modules?. Yes, this is the direction I've also been thinking about. But it's certainly not an easy change of a couple of lines, and I really would like to fix the currently broken state first. To be clear, this is currently *blocking* me from making changes in ROOT / Cling, or at least making it unnecessarily hard because I always have to either deal with 20-ish unrelated test failures or base my branches on these fixes. It's really painful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561#issuecomment-1491725885
https://github.com/root-project/root/pull/12561#issuecomment-1491725885:533,Usability,clear,clear,533,"> > > @hahnjo, is there a way to move forward without losing progress we made for windows?; > > ; > > I don't see one, please see my very lengthy and detailed commit message of why I think it's not going to work like that.; > ; > Would it not help if we annotate all dependencies by hand all of the dependencies that cannot work with modules?. Yes, this is the direction I've also been thinking about. But it's certainly not an easy change of a couple of lines, and I really would like to fix the currently broken state first. To be clear, this is currently *blocking* me from making changes in ROOT / Cling, or at least making it unnecessarily hard because I always have to either deal with 20-ish unrelated test failures or base my branches on these fixes. It's really painful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561#issuecomment-1491725885
https://github.com/root-project/root/pull/12565#issuecomment-1488072046:206,Availability,error,errors,206,"Yes, of course! I will also copy it here:. The rationale behind this change is that the public methods will (in most cases) be directly used by end users, so there is no need to further propagate potential errors. It removes the need to `Unwrap` the importer object returned by `Create`, making it more intuitive to use. As a potential downside, this means that in case the importer is used in more elaborate call; chains this propagation is of course not possible anymore. A possible solution could be to have methods for both, although this will obviously add some bloat.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565#issuecomment-1488072046
https://github.com/root-project/root/pull/12565#issuecomment-1488072046:336,Availability,down,downside,336,"Yes, of course! I will also copy it here:. The rationale behind this change is that the public methods will (in most cases) be directly used by end users, so there is no need to further propagate potential errors. It removes the need to `Unwrap` the importer object returned by `Create`, making it more intuitive to use. As a potential downside, this means that in case the importer is used in more elaborate call; chains this propagation is of course not possible anymore. A possible solution could be to have methods for both, although this will obviously add some bloat.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565#issuecomment-1488072046
https://github.com/root-project/root/pull/12565#issuecomment-1488072046:303,Usability,intuit,intuitive,303,"Yes, of course! I will also copy it here:. The rationale behind this change is that the public methods will (in most cases) be directly used by end users, so there is no need to further propagate potential errors. It removes the need to `Unwrap` the importer object returned by `Create`, making it more intuitive to use. As a potential downside, this means that in case the importer is used in more elaborate call; chains this propagation is of course not possible anymore. A possible solution could be to have methods for both, although this will obviously add some bloat.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565#issuecomment-1488072046
https://github.com/root-project/root/issues/12569#issuecomment-1561019614:2,Usability,simpl,simple,2,A simple workaround that does not involve modifying the TTimeStamp code is provided o the ROOT forum.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12569#issuecomment-1561019614
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:3258,Availability,error,errors,3258,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:3686,Availability,redundant,redundantly,3686,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:4791,Availability,error,errors,4791,,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:4815,Availability,error,errors,4815,,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:4895,Availability,error,error,4895,,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:5547,Availability,error,error,5547,"distributions and functions from dicts to arrays; [RF][HS3] Change some fields to use arrays and not dictionaries; [RF] Suggest alternative to RooDataSet c'tor that takes weight name; [RF] Add unit test for splitting RooDataSets with weight errors; [RF] Add weight errors and not weight squared when filling split data; [RF] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:6350,Availability,error,errors,6350,"ess `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:8342,Availability,error,error,8342,"n RooFit JSON IO; [RF] Add test for a simultaneous model written and read from JSON; [RF] Skip the RooSimultaneous in JSON IO; [RF] Don't export `factory_tag` in JSON; [RF][HS3] Move the default variable values to the estimates section; [RF] RooFit JSON: no need to tag variables, just export them; [RF] Rename fields in JSON file to match new standard; [RF] Complete also the reading of likelihoods and analysis fields; [RF] Add likelihoods and analyses fields for HS3 v2; [RF] Decouple `RooDataHist` reading from rest of workspace in RooFitHS3; [RF] Some refactoring of RooFit HS3; [RF] New `domains` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel: local `xmin` and `xmax` to make code more readable; [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Inline infinity constant and checks in `RooNumber`; [RF] Code-format RooNumber.h and RooNumber.cxx; [RF] Fill weight errors when importing RooDataHists to RooDataSet; [RF] Make it possible to directly import RooDataHist to RooDataSet; [RF] Reduce code duplication in RooDataSet constructor; [RF] Always create weight var in RooDataSet when importing weighted data; [RF] Implicitly create `WeightVar` for RooDataSet if it doesn't exist; [RF] Support also importing `RooDataHists` into RooDataSets; [RF] Avoid some code duplication in `RooDataSet` with importing slices; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:8406,Availability,error,error,8406,"n RooFit JSON IO; [RF] Add test for a simultaneous model written and read from JSON; [RF] Skip the RooSimultaneous in JSON IO; [RF] Don't export `factory_tag` in JSON; [RF][HS3] Move the default variable values to the estimates section; [RF] RooFit JSON: no need to tag variables, just export them; [RF] Rename fields in JSON file to match new standard; [RF] Complete also the reading of likelihoods and analysis fields; [RF] Add likelihoods and analyses fields for HS3 v2; [RF] Decouple `RooDataHist` reading from rest of workspace in RooFitHS3; [RF] Some refactoring of RooFit HS3; [RF] New `domains` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel: local `xmin` and `xmax` to make code more readable; [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Inline infinity constant and checks in `RooNumber`; [RF] Code-format RooNumber.h and RooNumber.cxx; [RF] Fill weight errors when importing RooDataHists to RooDataSet; [RF] Make it possible to directly import RooDataHist to RooDataSet; [RF] Reduce code duplication in RooDataSet constructor; [RF] Always create weight var in RooDataSet when importing weighted data; [RF] Implicitly create `WeightVar` for RooDataSet if it doesn't exist; [RF] Support also importing `RooDataHists` into RooDataSets; [RF] Avoid some code duplication in `RooDataSet` with importing slices; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:8815,Availability,error,errors,8815,` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel: local `xmin` and `xmax` to make code more readable; [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Inline infinity constant and checks in `RooNumber`; [RF] Code-format RooNumber.h and RooNumber.cxx; [RF] Fill weight errors when importing RooDataHists to RooDataSet; [RF] Make it possible to directly import RooDataHist to RooDataSet; [RF] Reduce code duplication in RooDataSet constructor; [RF] Always create weight var in RooDataSet when importing weighted data; [RF] Implicitly create `WeightVar` for RooDataSet if it doesn't exist; [RF] Support also importing `RooDataHists` into RooDataSets; [RF] Avoid some code duplication in `RooDataSet` with importing slices; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`; Add AD based derivatives for RooFuncWrapper.; [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; [RF] Make it possible to switch to `ryml` backend after building ROOT; [RF] Add a C/C++ function wrapper class in roofit.; [RF] Fix implementation error from typo in `RooGenProdProj`; [RF] New mechanism to implicitly convert numbers to RooRealVar&; [RF] Remove RooFormula code for gcc <= 4.8; [RF] Remove `RooGenFunction` and `RooMultiGenFunction`; [RF] More use of `snapshot()` overload with output parameter; [RF] Bring back `RooStats::FeldmanCousins::SetData()`; [RF] Remove d,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:9715,Availability,error,error,9715,les.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel: local `xmin` and `xmax` to make code more readable; [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Inline infinity constant and checks in `RooNumber`; [RF] Code-format RooNumber.h and RooNumber.cxx; [RF] Fill weight errors when importing RooDataHists to RooDataSet; [RF] Make it possible to directly import RooDataHist to RooDataSet; [RF] Reduce code duplication in RooDataSet constructor; [RF] Always create weight var in RooDataSet when importing weighted data; [RF] Implicitly create `WeightVar` for RooDataSet if it doesn't exist; [RF] Support also importing `RooDataHists` into RooDataSets; [RF] Avoid some code duplication in `RooDataSet` with importing slices; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`; Add AD based derivatives for RooFuncWrapper.; [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; [RF] Make it possible to switch to `ryml` backend after building ROOT; [RF] Add a C/C++ function wrapper class in roofit.; [RF] Fix implementation error from typo in `RooGenProdProj`; [RF] New mechanism to implicitly convert numbers to RooRealVar&; [RF] Remove RooFormula code for gcc <= 4.8; [RF] Remove `RooGenFunction` and `RooMultiGenFunction`; [RF] More use of `snapshot()` overload with output parameter; [RF] Bring back `RooStats::FeldmanCousins::SetData()`; [RF] Remove deprecated RooFit parts that are marked for removal in 6.30; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:122,Deployability,patch,patches,122,"After merging this PR, the following commits in ROOT `master` (as of `6dcc352289`) are the ones that are not in `v6-28-00-patches` (as of `c512572f9973`). ```txt; 41370dd378 [RF] Make it possible to use parameter titles in `RooAbsPdf::paramOn()`; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 3f925503b4 [RF] Fix memory leaks from `RooAbsL::getParameters()`; fb891723bc [RF][HS3] Avoid code duplication in `JSONFactories_RooFitCore`; 9a605d7f35 [RF][HS3] Make `combined_data_name` optional; b87c368b6a [RF][HS3] Keep all info necessary to reconstruct simultaneous pdfs; f9348f857c [RF][HS3] Don't convert RooHistPdf first to TH1 when exporting; 195d5b8111 [RF][HS3] Additions to JSONInterface to reduce code duplication; a75dec1868 [RF][HS3] Keep all information necessary to reconstruct combined datas; 6b80645765 Revert ""[RF] Make RooBatchCompute dependency public.""; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for diffe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:3398,Deployability,integrat,integration,3398,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:729,Energy Efficiency,reduce,reduce,729,"After merging this PR, the following commits in ROOT `master` (as of `6dcc352289`) are the ones that are not in `v6-28-00-patches` (as of `c512572f9973`). ```txt; 41370dd378 [RF] Make it possible to use parameter titles in `RooAbsPdf::paramOn()`; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 3f925503b4 [RF] Fix memory leaks from `RooAbsL::getParameters()`; fb891723bc [RF][HS3] Avoid code duplication in `JSONFactories_RooFitCore`; 9a605d7f35 [RF][HS3] Make `combined_data_name` optional; b87c368b6a [RF][HS3] Keep all info necessary to reconstruct simultaneous pdfs; f9348f857c [RF][HS3] Don't convert RooHistPdf first to TH1 when exporting; 195d5b8111 [RF][HS3] Additions to JSONInterface to reduce code duplication; a75dec1868 [RF][HS3] Keep all information necessary to reconstruct combined datas; 6b80645765 Revert ""[RF] Make RooBatchCompute dependency public.""; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for diffe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:882,Integrability,depend,dependency,882,"After merging this PR, the following commits in ROOT `master` (as of `6dcc352289`) are the ones that are not in `v6-28-00-patches` (as of `c512572f9973`). ```txt; 41370dd378 [RF] Make it possible to use parameter titles in `RooAbsPdf::paramOn()`; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 3f925503b4 [RF] Fix memory leaks from `RooAbsL::getParameters()`; fb891723bc [RF][HS3] Avoid code duplication in `JSONFactories_RooFitCore`; 9a605d7f35 [RF][HS3] Make `combined_data_name` optional; b87c368b6a [RF][HS3] Keep all info necessary to reconstruct simultaneous pdfs; f9348f857c [RF][HS3] Don't convert RooHistPdf first to TH1 when exporting; 195d5b8111 [RF][HS3] Additions to JSONInterface to reduce code duplication; a75dec1868 [RF][HS3] Keep all information necessary to reconstruct combined datas; 6b80645765 Revert ""[RF] Make RooBatchCompute dependency public.""; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for diffe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:1573,Integrability,depend,dependency,1573," to reconstruct simultaneous pdfs; f9348f857c [RF][HS3] Don't convert RooHistPdf first to TH1 when exporting; 195d5b8111 [RF][HS3] Additions to JSONInterface to reduce code duplication; a75dec1868 [RF][HS3] Keep all information necessary to reconstruct combined datas; 6b80645765 Revert ""[RF] Make RooBatchCompute dependency public.""; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:1610,Integrability,interface,interface,1610,"Don't convert RooHistPdf first to TH1 when exporting; 195d5b8111 [RF][HS3] Additions to JSONInterface to reduce code duplication; a75dec1868 [RF][HS3] Keep all information necessary to reconstruct combined datas; 6b80645765 Revert ""[RF] Make RooBatchCompute dependency public.""; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory var",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:3398,Integrability,integrat,integration,3398,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:3628,Integrability,depend,dependants,3628,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:3794,Integrability,interface,interface,3794,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:4449,Integrability,interface,interface,4449,,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:5553,Integrability,message,messages,5553,"utions and functions from dicts to arrays; [RF][HS3] Change some fields to use arrays and not dictionaries; [RF] Suggest alternative to RooDataSet c'tor that takes weight name; [RF] Add unit test for splitting RooDataSets with weight errors; [RF] Add weight errors and not weight squared when filling split data; [RF] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:7000,Integrability,interface,interface,7000,"ess `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:9665,Integrability,wrap,wrapper,9665,les.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel: local `xmin` and `xmax` to make code more readable; [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Inline infinity constant and checks in `RooNumber`; [RF] Code-format RooNumber.h and RooNumber.cxx; [RF] Fill weight errors when importing RooDataHists to RooDataSet; [RF] Make it possible to directly import RooDataHist to RooDataSet; [RF] Reduce code duplication in RooDataSet constructor; [RF] Always create weight var in RooDataSet when importing weighted data; [RF] Implicitly create `WeightVar` for RooDataSet if it doesn't exist; [RF] Support also importing `RooDataHists` into RooDataSets; [RF] Avoid some code duplication in `RooDataSet` with importing slices; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`; Add AD based derivatives for RooFuncWrapper.; [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; [RF] Make it possible to switch to `ryml` backend after building ROOT; [RF] Add a C/C++ function wrapper class in roofit.; [RF] Fix implementation error from typo in `RooGenProdProj`; [RF] New mechanism to implicitly convert numbers to RooRealVar&; [RF] Remove RooFormula code for gcc <= 4.8; [RF] Remove `RooGenFunction` and `RooMultiGenFunction`; [RF] More use of `snapshot()` overload with output parameter; [RF] Bring back `RooStats::FeldmanCousins::SetData()`; [RF] Remove deprecated RooFit parts that are marked for removal in 6.30; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:2622,Modifiability,variab,variables,2622,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:2977,Modifiability,refactor,refactoring,2977,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:5408,Modifiability,variab,variables,5408,"nction to clear node to RooFit JSON interface; [RF][HS3] Make ""parameter_points"" field conform with HS3 standard; [RF][HS3] Also migrate distributions and functions from dicts to arrays; [RF][HS3] Change some fields to use arrays and not dictionaries; [RF] Suggest alternative to RooDataSet c'tor that takes weight name; [RF] Add unit test for splitting RooDataSets with weight errors; [RF] Add weight errors and not weight squared when filling split data; [RF] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improv",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:5445,Modifiability,variab,variables,5445,"nterface; [RF][HS3] Make ""parameter_points"" field conform with HS3 standard; [RF][HS3] Also migrate distributions and functions from dicts to arrays; [RF][HS3] Change some fields to use arrays and not dictionaries; [RF] Suggest alternative to RooDataSet c'tor that takes weight name; [RF] Add unit test for splitting RooDataSets with weight errors; [RF] Add weight errors and not weight squared when filling split data; [RF] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `tes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:5494,Modifiability,variab,variable,5494,"d conform with HS3 standard; [RF][HS3] Also migrate distributions and functions from dicts to arrays; [RF][HS3] Change some fields to use arrays and not dictionaries; [RF] Suggest alternative to RooDataSet c'tor that takes weight name; [RF] Add unit test for splitting RooDataSets with weight errors; [RF] Add weight errors and not weight squared when filling split data; [RF] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:6270,Modifiability,refactor,refactoring,6270,"ess `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:7147,Modifiability,inherit,inheritance,7147,"endencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.; [RF] Improve code in `MinuitFcnGrad`; [RF] Code improvements in tests for new TestStatistics; [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; [RF] No need for `RooAbsMinimizerFcn::fit()` method; [RF] Further refactor RooJSONFactoryWSTool; [RF][HS3] Avoid catching without re-throwing; [RF][HS3] Write out bin counts as `int` and other small improvements; [RF] Correctly support constants in RooFit JSON IO; [RF] Add test for a simultaneous model written and read from JSON; [RF] Skip the RooSimultaneous in JSON IO; [RF] Don't export `factory_tag` in JSON; [RF][HS3] Move the default variable values to the estimates section; [RF] RooFit JSON: no need to tag variables, just export them; [RF] Rename fields in JSON file to match new standard; [RF] Complete also the reading of likelihoods and analysis fields; [RF] Add likelihoods and analyses fields for HS3 v2; [RF] Decouple `RooDataHist` reading from rest of workspace in RooFitHS3; [RF] Some refactoring of RooFit HS3; [RF] New `domains` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:7264,Modifiability,refactor,refactor,7264,"endencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.; [RF] Improve code in `MinuitFcnGrad`; [RF] Code improvements in tests for new TestStatistics; [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; [RF] No need for `RooAbsMinimizerFcn::fit()` method; [RF] Further refactor RooJSONFactoryWSTool; [RF][HS3] Avoid catching without re-throwing; [RF][HS3] Write out bin counts as `int` and other small improvements; [RF] Correctly support constants in RooFit JSON IO; [RF] Add test for a simultaneous model written and read from JSON; [RF] Skip the RooSimultaneous in JSON IO; [RF] Don't export `factory_tag` in JSON; [RF][HS3] Move the default variable values to the estimates section; [RF] RooFit JSON: no need to tag variables, just export them; [RF] Rename fields in JSON file to match new standard; [RF] Complete also the reading of likelihoods and analysis fields; [RF] Add likelihoods and analyses fields for HS3 v2; [RF] Decouple `RooDataHist` reading from rest of workspace in RooFitHS3; [RF] Some refactoring of RooFit HS3; [RF] New `domains` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:7640,Modifiability,variab,variable,7640,"endencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.; [RF] Improve code in `MinuitFcnGrad`; [RF] Code improvements in tests for new TestStatistics; [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; [RF] No need for `RooAbsMinimizerFcn::fit()` method; [RF] Further refactor RooJSONFactoryWSTool; [RF][HS3] Avoid catching without re-throwing; [RF][HS3] Write out bin counts as `int` and other small improvements; [RF] Correctly support constants in RooFit JSON IO; [RF] Add test for a simultaneous model written and read from JSON; [RF] Skip the RooSimultaneous in JSON IO; [RF] Don't export `factory_tag` in JSON; [RF][HS3] Move the default variable values to the estimates section; [RF] RooFit JSON: no need to tag variables, just export them; [RF] Rename fields in JSON file to match new standard; [RF] Complete also the reading of likelihoods and analysis fields; [RF] Add likelihoods and analyses fields for HS3 v2; [RF] Decouple `RooDataHist` reading from rest of workspace in RooFitHS3; [RF] Some refactoring of RooFit HS3; [RF] New `domains` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:7715,Modifiability,variab,variables,7715,"endencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.; [RF] Improve code in `MinuitFcnGrad`; [RF] Code improvements in tests for new TestStatistics; [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; [RF] No need for `RooAbsMinimizerFcn::fit()` method; [RF] Further refactor RooJSONFactoryWSTool; [RF][HS3] Avoid catching without re-throwing; [RF][HS3] Write out bin counts as `int` and other small improvements; [RF] Correctly support constants in RooFit JSON IO; [RF] Add test for a simultaneous model written and read from JSON; [RF] Skip the RooSimultaneous in JSON IO; [RF] Don't export `factory_tag` in JSON; [RF][HS3] Move the default variable values to the estimates section; [RF] RooFit JSON: no need to tag variables, just export them; [RF] Rename fields in JSON file to match new standard; [RF] Complete also the reading of likelihoods and analysis fields; [RF] Add likelihoods and analyses fields for HS3 v2; [RF] Decouple `RooDataHist` reading from rest of workspace in RooFitHS3; [RF] Some refactoring of RooFit HS3; [RF] New `domains` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:8002,Modifiability,refactor,refactoring,8002,"endencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.; [RF] Improve code in `MinuitFcnGrad`; [RF] Code improvements in tests for new TestStatistics; [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; [RF] No need for `RooAbsMinimizerFcn::fit()` method; [RF] Further refactor RooJSONFactoryWSTool; [RF][HS3] Avoid catching without re-throwing; [RF][HS3] Write out bin counts as `int` and other small improvements; [RF] Correctly support constants in RooFit JSON IO; [RF] Add test for a simultaneous model written and read from JSON; [RF] Skip the RooSimultaneous in JSON IO; [RF] Don't export `factory_tag` in JSON; [RF][HS3] Move the default variable values to the estimates section; [RF] RooFit JSON: no need to tag variables, just export them; [RF] Rename fields in JSON file to match new standard; [RF] Complete also the reading of likelihoods and analysis fields; [RF] Add likelihoods and analyses fields for HS3 v2; [RF] Decouple `RooDataHist` reading from rest of workspace in RooFitHS3; [RF] Some refactoring of RooFit HS3; [RF] New `domains` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:8073,Modifiability,variab,variable,8073,"endencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.; [RF] Improve code in `MinuitFcnGrad`; [RF] Code improvements in tests for new TestStatistics; [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; [RF] No need for `RooAbsMinimizerFcn::fit()` method; [RF] Further refactor RooJSONFactoryWSTool; [RF][HS3] Avoid catching without re-throwing; [RF][HS3] Write out bin counts as `int` and other small improvements; [RF] Correctly support constants in RooFit JSON IO; [RF] Add test for a simultaneous model written and read from JSON; [RF] Skip the RooSimultaneous in JSON IO; [RF] Don't export `factory_tag` in JSON; [RF][HS3] Move the default variable values to the estimates section; [RF] RooFit JSON: no need to tag variables, just export them; [RF] Rename fields in JSON file to match new standard; [RF] Complete also the reading of likelihoods and analysis fields; [RF] Add likelihoods and analyses fields for HS3 v2; [RF] Decouple `RooDataHist` reading from rest of workspace in RooFitHS3; [RF] Some refactoring of RooFit HS3; [RF] New `domains` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:3686,Safety,redund,redundantly,3686,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:5177,Safety,avoid,avoid,5177,,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:5778,Safety,avoid,avoid,5778,"th weight errors; [RF] Add weight errors and not weight squared when filling split data; [RF] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:8385,Safety,safe,safe,8385,"n RooFit JSON IO; [RF] Add test for a simultaneous model written and read from JSON; [RF] Skip the RooSimultaneous in JSON IO; [RF] Don't export `factory_tag` in JSON; [RF][HS3] Move the default variable values to the estimates section; [RF] RooFit JSON: no need to tag variables, just export them; [RF] Rename fields in JSON file to match new standard; [RF] Complete also the reading of likelihoods and analysis fields; [RF] Add likelihoods and analyses fields for HS3 v2; [RF] Decouple `RooDataHist` reading from rest of workspace in RooFitHS3; [RF] Some refactoring of RooFit HS3; [RF] New `domains` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel: local `xmin` and `xmax` to make code more readable; [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Inline infinity constant and checks in `RooNumber`; [RF] Code-format RooNumber.h and RooNumber.cxx; [RF] Fill weight errors when importing RooDataHists to RooDataSet; [RF] Make it possible to directly import RooDataHist to RooDataSet; [RF] Reduce code duplication in RooDataSet constructor; [RF] Always create weight var in RooDataSet when importing weighted data; [RF] Implicitly create `WeightVar` for RooDataSet if it doesn't exist; [RF] Support also importing `RooDataHists` into RooDataSets; [RF] Avoid some code duplication in `RooDataSet` with importing slices; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:6935,Security,access,access,6935,"ess `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:1421,Testability,test,test,1421,"id code duplication in `JSONFactories_RooFitCore`; 9a605d7f35 [RF][HS3] Make `combined_data_name` optional; b87c368b6a [RF][HS3] Keep all info necessary to reconstruct simultaneous pdfs; f9348f857c [RF][HS3] Don't convert RooHistPdf first to TH1 when exporting; 195d5b8111 [RF][HS3] Additions to JSONInterface to reduce code duplication; a75dec1868 [RF][HS3] Keep all information necessary to reconstruct combined datas; 6b80645765 Revert ""[RF] Make RooBatchCompute dependency public.""; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON ro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:1902,Testability,test,test,1902,"evert ""[RF] Make RooBatchCompute dependency public.""; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improveme",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:2111,Testability,mock,mock,2111,s LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:2131,Testability,test,test,2131,s LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:3823,Testability,test,testRooDataHist,3823,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:4263,Testability,test,test,4263,"losure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealFullVector` class; [RF][HS3] Move attributes and string attributes to `misc/ROOT_internal`; [RF][HS3] Support IO of models with RooConstVars; [RF][HS3] Don't do conversion to unbinned dataset manually in JSONIO; [RF] Enable AD code-gen test for RooFit.; [RF][HS3] Use arrays and not dicts to specify data axes; [RF][HS3] Remove exporter and importer function for RooProdPdf; [RF] Add function to clear node to RooFit JSON interface; [RF][HS3] Make ""parameter_points"" field conform with HS3 standard; [RF][HS3] Also migrate distributions and functions from dicts to arrays; [RF][HS3] Change some fields to use arrays and not dictionaries; [RF] Suggest alternative to RooDataSet c'tor that takes weight name; [RF] Add unit test for splitting RooDataSets with weight errors; [RF] Add weight errors and not weight squared when filling split data; [RF] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in Ro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:4748,Testability,test,test,4748,,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:5959,Testability,test,tests,5959," that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::print",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:7095,Testability,test,tests,7095,"endencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.; [RF] Improve code in `MinuitFcnGrad`; [RF] Code improvements in tests for new TestStatistics; [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; [RF] No need for `RooAbsMinimizerFcn::fit()` method; [RF] Further refactor RooJSONFactoryWSTool; [RF][HS3] Avoid catching without re-throwing; [RF][HS3] Write out bin counts as `int` and other small improvements; [RF] Correctly support constants in RooFit JSON IO; [RF] Add test for a simultaneous model written and read from JSON; [RF] Skip the RooSimultaneous in JSON IO; [RF] Don't export `factory_tag` in JSON; [RF][HS3] Move the default variable values to the estimates section; [RF] RooFit JSON: no need to tag variables, just export them; [RF] Rename fields in JSON file to match new standard; [RF] Complete also the reading of likelihoods and analysis fields; [RF] Add likelihoods and analyses fields for HS3 v2; [RF] Decouple `RooDataHist` reading from rest of workspace in RooFitHS3; [RF] Some refactoring of RooFit HS3; [RF] New `domains` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:7472,Testability,test,test,7472,"endencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.; [RF] Improve code in `MinuitFcnGrad`; [RF] Code improvements in tests for new TestStatistics; [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; [RF] No need for `RooAbsMinimizerFcn::fit()` method; [RF] Further refactor RooJSONFactoryWSTool; [RF][HS3] Avoid catching without re-throwing; [RF][HS3] Write out bin counts as `int` and other small improvements; [RF] Correctly support constants in RooFit JSON IO; [RF] Add test for a simultaneous model written and read from JSON; [RF] Skip the RooSimultaneous in JSON IO; [RF] Don't export `factory_tag` in JSON; [RF][HS3] Move the default variable values to the estimates section; [RF] RooFit JSON: no need to tag variables, just export them; [RF] Rename fields in JSON file to match new standard; [RF] Complete also the reading of likelihoods and analysis fields; [RF] Add likelihoods and analyses fields for HS3 v2; [RF] Decouple `RooDataHist` reading from rest of workspace in RooFitHS3; [RF] Some refactoring of RooFit HS3; [RF] New `domains` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:8412,Testability,log,logging,8412,"n RooFit JSON IO; [RF] Add test for a simultaneous model written and read from JSON; [RF] Skip the RooSimultaneous in JSON IO; [RF] Don't export `factory_tag` in JSON; [RF][HS3] Move the default variable values to the estimates section; [RF] RooFit JSON: no need to tag variables, just export them; [RF] Rename fields in JSON file to match new standard; [RF] Complete also the reading of likelihoods and analysis fields; [RF] Add likelihoods and analyses fields for HS3 v2; [RF] Decouple `RooDataHist` reading from rest of workspace in RooFitHS3; [RF] Some refactoring of RooFit HS3; [RF] New `domains` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel: local `xmin` and `xmax` to make code more readable; [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Inline infinity constant and checks in `RooNumber`; [RF] Code-format RooNumber.h and RooNumber.cxx; [RF] Fill weight errors when importing RooDataHists to RooDataSet; [RF] Make it possible to directly import RooDataHist to RooDataSet; [RF] Reduce code duplication in RooDataSet constructor; [RF] Always create weight var in RooDataSet when importing weighted data; [RF] Implicitly create `WeightVar` for RooDataSet if it doesn't exist; [RF] Support also importing `RooDataHists` into RooDataSets; [RF] Avoid some code duplication in `RooDataSet` with importing slices; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:9427,Testability,test,testRooFuncWrapper,9427,les.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel: local `xmin` and `xmax` to make code more readable; [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Inline infinity constant and checks in `RooNumber`; [RF] Code-format RooNumber.h and RooNumber.cxx; [RF] Fill weight errors when importing RooDataHists to RooDataSet; [RF] Make it possible to directly import RooDataHist to RooDataSet; [RF] Reduce code duplication in RooDataSet constructor; [RF] Always create weight var in RooDataSet when importing weighted data; [RF] Implicitly create `WeightVar` for RooDataSet if it doesn't exist; [RF] Support also importing `RooDataHists` into RooDataSets; [RF] Avoid some code duplication in `RooDataSet` with importing slices; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`; Add AD based derivatives for RooFuncWrapper.; [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; [RF] Make it possible to switch to `ryml` backend after building ROOT; [RF] Add a C/C++ function wrapper class in roofit.; [RF] Fix implementation error from typo in `RooGenProdProj`; [RF] New mechanism to implicitly convert numbers to RooRealVar&; [RF] Remove RooFormula code for gcc <= 4.8; [RF] Remove `RooGenFunction` and `RooMultiGenFunction`; [RF] More use of `snapshot()` overload with output parameter; [RF] Bring back `RooStats::FeldmanCousins::SetData()`; [RF] Remove deprecated RooFit parts that are marked for removal in 6.30; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:2723,Usability,simpl,simplification,2723,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12590#issuecomment-1491813664:4423,Usability,clear,clear,4423,,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664
https://github.com/root-project/root/pull/12602#issuecomment-1787077863:6,Usability,clear,clear,6,"To be clear, this would just be a first step towards (partially enabled) modules on Windows",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602#issuecomment-1787077863
https://github.com/root-project/root/pull/12613#issuecomment-1496294487:194,Availability,checkpoint,checkpointing,194,"By any means I am not against this change. However, since such overhead is a significant problem for your O(N) microservices and saving a few calls makes a difference, have you considered using checkpointing to cache ROOT startup operations altogether? A very simplistic way to achieve the checkpointing is to implement a core dump. That would probably yield better results AFAICT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613#issuecomment-1496294487
https://github.com/root-project/root/pull/12613#issuecomment-1496294487:290,Availability,checkpoint,checkpointing,290,"By any means I am not against this change. However, since such overhead is a significant problem for your O(N) microservices and saving a few calls makes a difference, have you considered using checkpointing to cache ROOT startup operations altogether? A very simplistic way to achieve the checkpointing is to implement a core dump. That would probably yield better results AFAICT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613#issuecomment-1496294487
https://github.com/root-project/root/pull/12613#issuecomment-1496294487:211,Performance,cache,cache,211,"By any means I am not against this change. However, since such overhead is a significant problem for your O(N) microservices and saving a few calls makes a difference, have you considered using checkpointing to cache ROOT startup operations altogether? A very simplistic way to achieve the checkpointing is to implement a core dump. That would probably yield better results AFAICT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613#issuecomment-1496294487
https://github.com/root-project/root/pull/12613#issuecomment-1496294487:260,Usability,simpl,simplistic,260,"By any means I am not against this change. However, since such overhead is a significant problem for your O(N) microservices and saving a few calls makes a difference, have you considered using checkpointing to cache ROOT startup operations altogether? A very simplistic way to achieve the checkpointing is to implement a core dump. That would probably yield better results AFAICT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613#issuecomment-1496294487
https://github.com/root-project/root/pull/12613#issuecomment-1514749749:157,Usability,simpl,simple,157,"@vgvassilev : Your idea sounds nice. Implementation of such a system is, however, not realistic for us at the moment and it would also go far far beyond the simple step here. Of course, we'd be happy to address smaller comments (naming of things, etc.) if there are any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613#issuecomment-1514749749
https://github.com/root-project/root/pull/12613#issuecomment-1514918749:67,Modifiability,variab,variable,67,This is indeed a good improvement. A few comments/opinions:; * The variable are used within `Cling` and thus should probably be prefixed by `CLING_` rather than `ROOT_`; * The setting used/necessary is complex and maybe we ought to provide a simpler mechanism (some thing similar to ; ```; export CLING_LDSYSPATH=`cling print_ld_syspath();`; ```; * The (pre-existing) duplication of the code/feature dealing with `ldsyspath` is less than optimal.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613#issuecomment-1514918749
https://github.com/root-project/root/pull/12613#issuecomment-1514918749:242,Usability,simpl,simpler,242,This is indeed a good improvement. A few comments/opinions:; * The variable are used within `Cling` and thus should probably be prefixed by `CLING_` rather than `ROOT_`; * The setting used/necessary is complex and maybe we ought to provide a simpler mechanism (some thing similar to ; ```; export CLING_LDSYSPATH=`cling print_ld_syspath();`; ```; * The (pre-existing) duplication of the code/feature dealing with `ldsyspath` is less than optimal.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613#issuecomment-1514918749
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:3186,Availability,error,errors,3186,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:3614,Availability,redundant,redundantly,3614,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:4719,Availability,error,errors,4719,,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:4743,Availability,error,errors,4743,,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:4823,Availability,error,error,4823,,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:5475,Availability,error,error,5475,"distributions and functions from dicts to arrays; [RF][HS3] Change some fields to use arrays and not dictionaries; [RF] Suggest alternative to RooDataSet c'tor that takes weight name; [RF] Add unit test for splitting RooDataSets with weight errors; [RF] Add weight errors and not weight squared when filling split data; [RF] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:6278,Availability,error,errors,6278,"ess `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:7811,Availability,error,error,7811,"ing of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.; [RF] Improve code in `MinuitFcnGrad`; [RF] Code improvements in tests for new TestStatistics; [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; [RF] No need for `RooAbsMinimizerFcn::fit()` method; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`; Add AD based derivatives for RooFuncWrapper.; [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; [RF] Make it possible to switch to `ryml` backend after building ROOT; [RF] Add a C/C++ function wrapper class in roofit.; [RF] Fix implementation error from typo in `RooGenProdProj`; [RF] New mechanism to implicitly convert numbers to RooRealVar&; [RF] Remove RooFormula code for gcc <= 4.8; [RF] Remove `RooGenFunction` and `RooMultiGenFunction`; [RF] More use of `snapshot()` overload with output parameter; [RF] Bring back `RooStats::FeldmanCousins::SetData()`; [RF] Remove deprecated RooFit parts that are marked for removal in 6.30; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:122,Deployability,patch,patches,122,"After merging this PR, the following commits in ROOT `master` (as of `2bb0f40e74`) are the ones that are not in `v6-28-00-patches` (`b700f596dbd8`). ```txt; 41370dd378 [RF] Make it possible to use parameter titles in `RooAbsPdf::paramOn()`; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 3f925503b4 [RF] Fix memory leaks from `RooAbsL::getParameters()`; fb891723bc [RF][HS3] Avoid code duplication in `JSONFactories_RooFitCore`; 9a605d7f35 [RF][HS3] Make `combined_data_name` optional; b87c368b6a [RF][HS3] Keep all info necessary to reconstruct simultaneous pdfs; f9348f857c [RF][HS3] Don't convert RooHistPdf first to TH1 when exporting; 195d5b8111 [RF][HS3] Additions to JSONInterface to reduce code duplication; a75dec1868 [RF][HS3] Keep all information necessary to reconstruct combined datas; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:3326,Deployability,integrat,integration,3326,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:723,Energy Efficiency,reduce,reduce,723,"After merging this PR, the following commits in ROOT `master` (as of `2bb0f40e74`) are the ones that are not in `v6-28-00-patches` (`b700f596dbd8`). ```txt; 41370dd378 [RF] Make it possible to use parameter titles in `RooAbsPdf::paramOn()`; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 3f925503b4 [RF] Fix memory leaks from `RooAbsL::getParameters()`; fb891723bc [RF][HS3] Avoid code duplication in `JSONFactories_RooFitCore`; 9a605d7f35 [RF][HS3] Make `combined_data_name` optional; b87c368b6a [RF][HS3] Keep all info necessary to reconstruct simultaneous pdfs; f9348f857c [RF][HS3] Don't convert RooHistPdf first to TH1 when exporting; 195d5b8111 [RF][HS3] Additions to JSONInterface to reduce code duplication; a75dec1868 [RF][HS3] Keep all information necessary to reconstruct combined datas; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:1501,Integrability,depend,dependency,1501,_data_name` optional; b87c368b6a [RF][HS3] Keep all info necessary to reconstruct simultaneous pdfs; f9348f857c [RF][HS3] Don't convert RooHistPdf first to TH1 when exporting; 195d5b8111 [RF][HS3] Additions to JSONInterface to reduce code duplication; a75dec1868 [RF][HS3] Keep all information necessary to reconstruct combined datas; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:1538,Integrability,interface,interface,1538, necessary to reconstruct simultaneous pdfs; f9348f857c [RF][HS3] Don't convert RooHistPdf first to TH1 when exporting; 195d5b8111 [RF][HS3] Additions to JSONInterface to reduce code duplication; a75dec1868 [RF][HS3] Keep all information necessary to reconstruct combined datas; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory var,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:3326,Integrability,integrat,integration,3326,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:3556,Integrability,depend,dependants,3556,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:3722,Integrability,interface,interface,3722,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:4377,Integrability,interface,interface,4377,,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:5481,Integrability,message,messages,5481,"utions and functions from dicts to arrays; [RF][HS3] Change some fields to use arrays and not dictionaries; [RF] Suggest alternative to RooDataSet c'tor that takes weight name; [RF] Add unit test for splitting RooDataSets with weight errors; [RF] Add weight errors and not weight squared when filling split data; [RF] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:6928,Integrability,interface,interface,6928,"ess `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:7761,Integrability,wrap,wrapper,7761,"ing of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.; [RF] Improve code in `MinuitFcnGrad`; [RF] Code improvements in tests for new TestStatistics; [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; [RF] No need for `RooAbsMinimizerFcn::fit()` method; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`; Add AD based derivatives for RooFuncWrapper.; [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; [RF] Make it possible to switch to `ryml` backend after building ROOT; [RF] Add a C/C++ function wrapper class in roofit.; [RF] Fix implementation error from typo in `RooGenProdProj`; [RF] New mechanism to implicitly convert numbers to RooRealVar&; [RF] Remove RooFormula code for gcc <= 4.8; [RF] Remove `RooGenFunction` and `RooMultiGenFunction`; [RF] More use of `snapshot()` overload with output parameter; [RF] Bring back `RooStats::FeldmanCousins::SetData()`; [RF] Remove deprecated RooFit parts that are marked for removal in 6.30; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:2550,Modifiability,variab,variables,2550,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:2905,Modifiability,refactor,refactoring,2905,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:5336,Modifiability,variab,variables,5336,"nction to clear node to RooFit JSON interface; [RF][HS3] Make ""parameter_points"" field conform with HS3 standard; [RF][HS3] Also migrate distributions and functions from dicts to arrays; [RF][HS3] Change some fields to use arrays and not dictionaries; [RF] Suggest alternative to RooDataSet c'tor that takes weight name; [RF] Add unit test for splitting RooDataSets with weight errors; [RF] Add weight errors and not weight squared when filling split data; [RF] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improv",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:5373,Modifiability,variab,variables,5373,"nterface; [RF][HS3] Make ""parameter_points"" field conform with HS3 standard; [RF][HS3] Also migrate distributions and functions from dicts to arrays; [RF][HS3] Change some fields to use arrays and not dictionaries; [RF] Suggest alternative to RooDataSet c'tor that takes weight name; [RF] Add unit test for splitting RooDataSets with weight errors; [RF] Add weight errors and not weight squared when filling split data; [RF] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `tes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:5422,Modifiability,variab,variable,5422,"d conform with HS3 standard; [RF][HS3] Also migrate distributions and functions from dicts to arrays; [RF][HS3] Change some fields to use arrays and not dictionaries; [RF] Suggest alternative to RooDataSet c'tor that takes weight name; [RF] Add unit test for splitting RooDataSets with weight errors; [RF] Add weight errors and not weight squared when filling split data; [RF] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:6198,Modifiability,refactor,refactoring,6198,"ess `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:7075,Modifiability,inherit,inheritance,7075," `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.; [RF] Improve code in `MinuitFcnGrad`; [RF] Code improvements in tests for new TestStatistics; [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; [RF] No need for `RooAbsMinimizerFcn::fit()` method; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`; Add AD based derivatives for RooFuncWrapper.; [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; [RF] Make it possible to switch to `ryml` backend after building ROOT; [RF] Add a C/C++ function wrapper class in roofit.; [RF] Fix implementation error from typo in `RooGenProdProj`; [RF] New mechanism to implicitly convert numbers to RooRealVar&; [RF] Remove RooFormula code for gcc <= 4.8; [RF] Remove `RooGenFunction` and `RooMultiGenFunction`; [RF] More use of `snapshot()` overload with output parameter; [RF] ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:3614,Safety,redund,redundantly,3614,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:5105,Safety,avoid,avoid,5105,,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:5706,Safety,avoid,avoid,5706,"th weight errors; [RF] Add weight errors and not weight squared when filling split data; [RF] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:6863,Security,access,access,6863,"ess `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:1349,Testability,test,test,1349,ry leaks from `RooAbsL::getParameters()`; fb891723bc [RF][HS3] Avoid code duplication in `JSONFactories_RooFitCore`; 9a605d7f35 [RF][HS3] Make `combined_data_name` optional; b87c368b6a [RF][HS3] Keep all info necessary to reconstruct simultaneous pdfs; f9348f857c [RF][HS3] Don't convert RooHistPdf first to TH1 when exporting; 195d5b8111 [RF][HS3] Additions to JSONInterface to reduce code duplication; a75dec1868 [RF][HS3] Keep all information necessary to reconstruct combined datas; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON ro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:1830,Testability,test,test,1830, information necessary to reconstruct combined datas; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improveme,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:2039,Testability,mock,mock,2039,s LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:2059,Testability,test,test,2059,s LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:3751,Testability,test,testRooDataHist,3751,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:4191,Testability,test,test,4191,"losure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealFullVector` class; [RF][HS3] Move attributes and string attributes to `misc/ROOT_internal`; [RF][HS3] Support IO of models with RooConstVars; [RF][HS3] Don't do conversion to unbinned dataset manually in JSONIO; [RF] Enable AD code-gen test for RooFit.; [RF][HS3] Use arrays and not dicts to specify data axes; [RF][HS3] Remove exporter and importer function for RooProdPdf; [RF] Add function to clear node to RooFit JSON interface; [RF][HS3] Make ""parameter_points"" field conform with HS3 standard; [RF][HS3] Also migrate distributions and functions from dicts to arrays; [RF][HS3] Change some fields to use arrays and not dictionaries; [RF] Suggest alternative to RooDataSet c'tor that takes weight name; [RF] Add unit test for splitting RooDataSets with weight errors; [RF] Add weight errors and not weight squared when filling split data; [RF] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in Ro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:4676,Testability,test,test,4676,,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:5887,Testability,test,tests,5887," that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::print",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:7023,Testability,test,tests,7023," `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.; [RF] Improve code in `MinuitFcnGrad`; [RF] Code improvements in tests for new TestStatistics; [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; [RF] No need for `RooAbsMinimizerFcn::fit()` method; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`; Add AD based derivatives for RooFuncWrapper.; [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; [RF] Make it possible to switch to `ryml` backend after building ROOT; [RF] Add a C/C++ function wrapper class in roofit.; [RF] Fix implementation error from typo in `RooGenProdProj`; [RF] New mechanism to implicitly convert numbers to RooRealVar&; [RF] Remove RooFormula code for gcc <= 4.8; [RF] Remove `RooGenFunction` and `RooMultiGenFunction`; [RF] More use of `snapshot()` overload with output parameter; [RF] ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:7523,Testability,test,testRooFuncWrapper,7523,"ing of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.; [RF] Improve code in `MinuitFcnGrad`; [RF] Code improvements in tests for new TestStatistics; [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; [RF] No need for `RooAbsMinimizerFcn::fit()` method; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`; Add AD based derivatives for RooFuncWrapper.; [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; [RF] Make it possible to switch to `ryml` backend after building ROOT; [RF] Add a C/C++ function wrapper class in roofit.; [RF] Fix implementation error from typo in `RooGenProdProj`; [RF] New mechanism to implicitly convert numbers to RooRealVar&; [RF] Remove RooFormula code for gcc <= 4.8; [RF] Remove `RooGenFunction` and `RooMultiGenFunction`; [RF] More use of `snapshot()` overload with output parameter; [RF] Bring back `RooStats::FeldmanCousins::SetData()`; [RF] Remove deprecated RooFit parts that are marked for removal in 6.30; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:2651,Usability,simpl,simplification,2651,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/pull/12618#issuecomment-1497317057:4351,Usability,clear,clear,4351,,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618#issuecomment-1497317057
https://github.com/root-project/root/issues/12635#issuecomment-2314956198:898,Availability,error,error-on-ubuntu-externally-managed-environment,898,"Hi @dpiparo and thanks a lot @adriansev for this useful report!. Yes, there is probably even more breakage than before now that the `cppyy` in ROOT is synced more with `cppyy` upstream. More files are expected to collide. The cppyy module is part of ROOT, and if you install it in two different ways in the same environment (standalone and via ROOT), clashes are bound to happen. So the question to @adriansev is really: what's your usecase for installing cppyy in two different ways in the same environment? What does cppyy standalone give you that you won't get with ROOT? And why is the recommended way of dealing with this (virtual environments) not an option for you?. Many Linux distributions even *force* you to use virtual environments and don't allow `pip install --user` outside of virtual environments anymore. E.g. Arch, NixOS, or Ubuntu:; * https://askubuntu.com/questions/1465218/pip-error-on-ubuntu-externally-managed-environment-%C3%97-this-environment-is-extern. So given that your usecase is against good practices and that it's expected that if you install the same library from two different sources you get breakage, I'm in favor of closing this as ""not planned"" unless @adriansev can follow up with a clear motivation :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635#issuecomment-2314956198
https://github.com/root-project/root/issues/12635#issuecomment-2314956198:267,Deployability,install,install,267,"Hi @dpiparo and thanks a lot @adriansev for this useful report!. Yes, there is probably even more breakage than before now that the `cppyy` in ROOT is synced more with `cppyy` upstream. More files are expected to collide. The cppyy module is part of ROOT, and if you install it in two different ways in the same environment (standalone and via ROOT), clashes are bound to happen. So the question to @adriansev is really: what's your usecase for installing cppyy in two different ways in the same environment? What does cppyy standalone give you that you won't get with ROOT? And why is the recommended way of dealing with this (virtual environments) not an option for you?. Many Linux distributions even *force* you to use virtual environments and don't allow `pip install --user` outside of virtual environments anymore. E.g. Arch, NixOS, or Ubuntu:; * https://askubuntu.com/questions/1465218/pip-error-on-ubuntu-externally-managed-environment-%C3%97-this-environment-is-extern. So given that your usecase is against good practices and that it's expected that if you install the same library from two different sources you get breakage, I'm in favor of closing this as ""not planned"" unless @adriansev can follow up with a clear motivation :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635#issuecomment-2314956198
https://github.com/root-project/root/issues/12635#issuecomment-2314956198:445,Deployability,install,installing,445,"Hi @dpiparo and thanks a lot @adriansev for this useful report!. Yes, there is probably even more breakage than before now that the `cppyy` in ROOT is synced more with `cppyy` upstream. More files are expected to collide. The cppyy module is part of ROOT, and if you install it in two different ways in the same environment (standalone and via ROOT), clashes are bound to happen. So the question to @adriansev is really: what's your usecase for installing cppyy in two different ways in the same environment? What does cppyy standalone give you that you won't get with ROOT? And why is the recommended way of dealing with this (virtual environments) not an option for you?. Many Linux distributions even *force* you to use virtual environments and don't allow `pip install --user` outside of virtual environments anymore. E.g. Arch, NixOS, or Ubuntu:; * https://askubuntu.com/questions/1465218/pip-error-on-ubuntu-externally-managed-environment-%C3%97-this-environment-is-extern. So given that your usecase is against good practices and that it's expected that if you install the same library from two different sources you get breakage, I'm in favor of closing this as ""not planned"" unless @adriansev can follow up with a clear motivation :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635#issuecomment-2314956198
https://github.com/root-project/root/issues/12635#issuecomment-2314956198:765,Deployability,install,install,765,"Hi @dpiparo and thanks a lot @adriansev for this useful report!. Yes, there is probably even more breakage than before now that the `cppyy` in ROOT is synced more with `cppyy` upstream. More files are expected to collide. The cppyy module is part of ROOT, and if you install it in two different ways in the same environment (standalone and via ROOT), clashes are bound to happen. So the question to @adriansev is really: what's your usecase for installing cppyy in two different ways in the same environment? What does cppyy standalone give you that you won't get with ROOT? And why is the recommended way of dealing with this (virtual environments) not an option for you?. Many Linux distributions even *force* you to use virtual environments and don't allow `pip install --user` outside of virtual environments anymore. E.g. Arch, NixOS, or Ubuntu:; * https://askubuntu.com/questions/1465218/pip-error-on-ubuntu-externally-managed-environment-%C3%97-this-environment-is-extern. So given that your usecase is against good practices and that it's expected that if you install the same library from two different sources you get breakage, I'm in favor of closing this as ""not planned"" unless @adriansev can follow up with a clear motivation :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635#issuecomment-2314956198
https://github.com/root-project/root/issues/12635#issuecomment-2314956198:1068,Deployability,install,install,1068,"Hi @dpiparo and thanks a lot @adriansev for this useful report!. Yes, there is probably even more breakage than before now that the `cppyy` in ROOT is synced more with `cppyy` upstream. More files are expected to collide. The cppyy module is part of ROOT, and if you install it in two different ways in the same environment (standalone and via ROOT), clashes are bound to happen. So the question to @adriansev is really: what's your usecase for installing cppyy in two different ways in the same environment? What does cppyy standalone give you that you won't get with ROOT? And why is the recommended way of dealing with this (virtual environments) not an option for you?. Many Linux distributions even *force* you to use virtual environments and don't allow `pip install --user` outside of virtual environments anymore. E.g. Arch, NixOS, or Ubuntu:; * https://askubuntu.com/questions/1465218/pip-error-on-ubuntu-externally-managed-environment-%C3%97-this-environment-is-extern. So given that your usecase is against good practices and that it's expected that if you install the same library from two different sources you get breakage, I'm in favor of closing this as ""not planned"" unless @adriansev can follow up with a clear motivation :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635#issuecomment-2314956198
https://github.com/root-project/root/issues/12635#issuecomment-2314956198:1223,Usability,clear,clear,1223,"Hi @dpiparo and thanks a lot @adriansev for this useful report!. Yes, there is probably even more breakage than before now that the `cppyy` in ROOT is synced more with `cppyy` upstream. More files are expected to collide. The cppyy module is part of ROOT, and if you install it in two different ways in the same environment (standalone and via ROOT), clashes are bound to happen. So the question to @adriansev is really: what's your usecase for installing cppyy in two different ways in the same environment? What does cppyy standalone give you that you won't get with ROOT? And why is the recommended way of dealing with this (virtual environments) not an option for you?. Many Linux distributions even *force* you to use virtual environments and don't allow `pip install --user` outside of virtual environments anymore. E.g. Arch, NixOS, or Ubuntu:; * https://askubuntu.com/questions/1465218/pip-error-on-ubuntu-externally-managed-environment-%C3%97-this-environment-is-extern. So given that your usecase is against good practices and that it's expected that if you install the same library from two different sources you get breakage, I'm in favor of closing this as ""not planned"" unless @adriansev can follow up with a clear motivation :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635#issuecomment-2314956198
https://github.com/root-project/root/issues/12648#issuecomment-1523186097:274,Usability,simpl,simpler,274,"When using the non-homebrew cmake, make sure you removed the previous CMakeCache.txt. As a brutal measure you can temporarily rename/ops/homebrew; that should also move it out of the way... Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523186097
https://github.com/root-project/root/issues/12648#issuecomment-1523361441:886,Availability,error,error,886,"> @cxwx please do not try to find workarounds when I try to find the source of the issues; we really don't want our users to pile up workarounds. sorry for that. > Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). I thought Josiah1 may meet the same problem, The home-brew root is still ver6.26.06(not upgrade), ; brew install --build-from-source also failed with the old version.; when using rootcling to generate DICTIONARY, it cause . ```; In file included from input_line_1:1:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/new:93:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/cstdlib:135:9: error: no member named 'at_quick_exit' in the global namespace; using ::at_quick_exit _LIBCPP_USING_IF_EXISTS;; ~~^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/cstdlib:136:9: error: no member named 'quick_exit' in the global namespace; using ::quick_exit _LIBCPP_USING_IF_EXISTS;; ~~^; In file included from input_line_1:1:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/new:94:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/exception:85:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/type_traits:485:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/__type_traits/is_pod.h:29:38: error: no template named 'is_trivially_default_constructible'; did you mean; 'is_nothrow_default_constructible'?; :",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523361441
https://github.com/root-project/root/issues/12648#issuecomment-1523361441:1134,Availability,error,error,1134,"rew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). I thought Josiah1 may meet the same problem, The home-brew root is still ver6.26.06(not upgrade), ; brew install --build-from-source also failed with the old version.; when using rootcling to generate DICTIONARY, it cause . ```; In file included from input_line_1:1:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/new:93:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/cstdlib:135:9: error: no member named 'at_quick_exit' in the global namespace; using ::at_quick_exit _LIBCPP_USING_IF_EXISTS;; ~~^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/cstdlib:136:9: error: no member named 'quick_exit' in the global namespace; using ::quick_exit _LIBCPP_USING_IF_EXISTS;; ~~^; In file included from input_line_1:1:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/new:94:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/exception:85:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/type_traits:485:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/__type_traits/is_pod.h:29:38: error: no template named 'is_trivially_default_constructible'; did you mean; 'is_nothrow_default_constructible'?; : public integral_constant<bool, is_trivially_default_constructibl...; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/__type_traits/is_noth",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523361441
https://github.com/root-project/root/issues/12648#issuecomment-1523361441:1886,Availability,error,error,1886,"r6.26.06(not upgrade), ; brew install --build-from-source also failed with the old version.; when using rootcling to generate DICTIONARY, it cause . ```; In file included from input_line_1:1:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/new:93:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/cstdlib:135:9: error: no member named 'at_quick_exit' in the global namespace; using ::at_quick_exit _LIBCPP_USING_IF_EXISTS;; ~~^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/cstdlib:136:9: error: no member named 'quick_exit' in the global namespace; using ::quick_exit _LIBCPP_USING_IF_EXISTS;; ~~^; In file included from input_line_1:1:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/new:94:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/exception:85:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/type_traits:485:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/__type_traits/is_pod.h:29:38: error: no template named 'is_trivially_default_constructible'; did you mean; 'is_nothrow_default_constructible'?; : public integral_constant<bool, is_trivially_default_constructibl...; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/__type_traits/is_nothrow_default_constructible.h:22:50: note: 'is_nothrow_default_constructible' declared here; template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_default_co...; ```; the APPLE system SDK has changed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523361441
https://github.com/root-project/root/issues/12648#issuecomment-1523361441:428,Deployability,upgrade,upgrade,428,"> @cxwx please do not try to find workarounds when I try to find the source of the issues; we really don't want our users to pile up workarounds. sorry for that. > Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). I thought Josiah1 may meet the same problem, The home-brew root is still ver6.26.06(not upgrade), ; brew install --build-from-source also failed with the old version.; when using rootcling to generate DICTIONARY, it cause . ```; In file included from input_line_1:1:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/new:93:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/cstdlib:135:9: error: no member named 'at_quick_exit' in the global namespace; using ::at_quick_exit _LIBCPP_USING_IF_EXISTS;; ~~^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/cstdlib:136:9: error: no member named 'quick_exit' in the global namespace; using ::quick_exit _LIBCPP_USING_IF_EXISTS;; ~~^; In file included from input_line_1:1:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/new:94:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/exception:85:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/type_traits:485:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/__type_traits/is_pod.h:29:38: error: no template named 'is_trivially_default_constructible'; did you mean; 'is_nothrow_default_constructible'?; :",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523361441
https://github.com/root-project/root/issues/12648#issuecomment-1523361441:445,Deployability,install,install,445,"> @cxwx please do not try to find workarounds when I try to find the source of the issues; we really don't want our users to pile up workarounds. sorry for that. > Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). I thought Josiah1 may meet the same problem, The home-brew root is still ver6.26.06(not upgrade), ; brew install --build-from-source also failed with the old version.; when using rootcling to generate DICTIONARY, it cause . ```; In file included from input_line_1:1:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/new:93:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/cstdlib:135:9: error: no member named 'at_quick_exit' in the global namespace; using ::at_quick_exit _LIBCPP_USING_IF_EXISTS;; ~~^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/cstdlib:136:9: error: no member named 'quick_exit' in the global namespace; using ::quick_exit _LIBCPP_USING_IF_EXISTS;; ~~^; In file included from input_line_1:1:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/new:94:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/exception:85:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/type_traits:485:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/__type_traits/is_pod.h:29:38: error: no template named 'is_trivially_default_constructible'; did you mean; 'is_nothrow_default_constructible'?; :",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523361441
https://github.com/root-project/root/issues/12648#issuecomment-1523361441:248,Usability,simpl,simpler,248,"> @cxwx please do not try to find workarounds when I try to find the source of the issues; we really don't want our users to pile up workarounds. sorry for that. > Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). I thought Josiah1 may meet the same problem, The home-brew root is still ver6.26.06(not upgrade), ; brew install --build-from-source also failed with the old version.; when using rootcling to generate DICTIONARY, it cause . ```; In file included from input_line_1:1:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/new:93:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/cstdlib:135:9: error: no member named 'at_quick_exit' in the global namespace; using ::at_quick_exit _LIBCPP_USING_IF_EXISTS;; ~~^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/cstdlib:136:9: error: no member named 'quick_exit' in the global namespace; using ::quick_exit _LIBCPP_USING_IF_EXISTS;; ~~^; In file included from input_line_1:1:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/new:94:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/exception:85:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/type_traits:485:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.sdk/usr/include/c++/v1/__type_traits/is_pod.h:29:38: error: no template named 'is_trivially_default_constructible'; did you mean; 'is_nothrow_default_constructible'?; :",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523361441
https://github.com/root-project/root/issues/12648#issuecomment-1523586633:612,Availability,error,errors,612,"> the APPLE system SDK has changed. @cxwx I agree. But I can't figure out why you can build successfully by turning off some options, but I can't. I also updated the command line tool to 14.3, did you?. > When using the non-homebrew cmake, make sure you removed the previous CMakeCache.txt. As a brutal measure you can temporarily rename/ops/homebrew; that should also move it out of the way... @Axel-Naumann Sure. I cleared all files when I built. It may work but I need to install the dependencies manually, which is also an annoying thing. ; And I do think there is something new happening for these building errors other than homebrew things. rootfit and glew errors are always there no matter if I use external dependencies or builtins. I have never encountered these errors before. >Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). It really isn't necessary, it's just a habit. In addition to macos, I also use root on various versions of linux servers. For the latter, in most cases, I can only compile it myself. And we have many codes that depend on root, so we hope that root's compilation options can be mastered by ourselves. As for contributing to the development of root, I hope that I can do it in the future, but at present more is to use root to complete physical analysis. Thank you for your invaluable contributions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523586633
https://github.com/root-project/root/issues/12648#issuecomment-1523586633:664,Availability,error,errors,664,"> the APPLE system SDK has changed. @cxwx I agree. But I can't figure out why you can build successfully by turning off some options, but I can't. I also updated the command line tool to 14.3, did you?. > When using the non-homebrew cmake, make sure you removed the previous CMakeCache.txt. As a brutal measure you can temporarily rename/ops/homebrew; that should also move it out of the way... @Axel-Naumann Sure. I cleared all files when I built. It may work but I need to install the dependencies manually, which is also an annoying thing. ; And I do think there is something new happening for these building errors other than homebrew things. rootfit and glew errors are always there no matter if I use external dependencies or builtins. I have never encountered these errors before. >Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). It really isn't necessary, it's just a habit. In addition to macos, I also use root on various versions of linux servers. For the latter, in most cases, I can only compile it myself. And we have many codes that depend on root, so we hope that root's compilation options can be mastered by ourselves. As for contributing to the development of root, I hope that I can do it in the future, but at present more is to use root to complete physical analysis. Thank you for your invaluable contributions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523586633
https://github.com/root-project/root/issues/12648#issuecomment-1523586633:773,Availability,error,errors,773,"> the APPLE system SDK has changed. @cxwx I agree. But I can't figure out why you can build successfully by turning off some options, but I can't. I also updated the command line tool to 14.3, did you?. > When using the non-homebrew cmake, make sure you removed the previous CMakeCache.txt. As a brutal measure you can temporarily rename/ops/homebrew; that should also move it out of the way... @Axel-Naumann Sure. I cleared all files when I built. It may work but I need to install the dependencies manually, which is also an annoying thing. ; And I do think there is something new happening for these building errors other than homebrew things. rootfit and glew errors are always there no matter if I use external dependencies or builtins. I have never encountered these errors before. >Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). It really isn't necessary, it's just a habit. In addition to macos, I also use root on various versions of linux servers. For the latter, in most cases, I can only compile it myself. And we have many codes that depend on root, so we hope that root's compilation options can be mastered by ourselves. As for contributing to the development of root, I hope that I can do it in the future, but at present more is to use root to complete physical analysis. Thank you for your invaluable contributions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523586633
https://github.com/root-project/root/issues/12648#issuecomment-1523586633:154,Deployability,update,updated,154,"> the APPLE system SDK has changed. @cxwx I agree. But I can't figure out why you can build successfully by turning off some options, but I can't. I also updated the command line tool to 14.3, did you?. > When using the non-homebrew cmake, make sure you removed the previous CMakeCache.txt. As a brutal measure you can temporarily rename/ops/homebrew; that should also move it out of the way... @Axel-Naumann Sure. I cleared all files when I built. It may work but I need to install the dependencies manually, which is also an annoying thing. ; And I do think there is something new happening for these building errors other than homebrew things. rootfit and glew errors are always there no matter if I use external dependencies or builtins. I have never encountered these errors before. >Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). It really isn't necessary, it's just a habit. In addition to macos, I also use root on various versions of linux servers. For the latter, in most cases, I can only compile it myself. And we have many codes that depend on root, so we hope that root's compilation options can be mastered by ourselves. As for contributing to the development of root, I hope that I can do it in the future, but at present more is to use root to complete physical analysis. Thank you for your invaluable contributions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523586633
https://github.com/root-project/root/issues/12648#issuecomment-1523586633:475,Deployability,install,install,475,"> the APPLE system SDK has changed. @cxwx I agree. But I can't figure out why you can build successfully by turning off some options, but I can't. I also updated the command line tool to 14.3, did you?. > When using the non-homebrew cmake, make sure you removed the previous CMakeCache.txt. As a brutal measure you can temporarily rename/ops/homebrew; that should also move it out of the way... @Axel-Naumann Sure. I cleared all files when I built. It may work but I need to install the dependencies manually, which is also an annoying thing. ; And I do think there is something new happening for these building errors other than homebrew things. rootfit and glew errors are always there no matter if I use external dependencies or builtins. I have never encountered these errors before. >Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). It really isn't necessary, it's just a habit. In addition to macos, I also use root on various versions of linux servers. For the latter, in most cases, I can only compile it myself. And we have many codes that depend on root, so we hope that root's compilation options can be mastered by ourselves. As for contributing to the development of root, I hope that I can do it in the future, but at present more is to use root to complete physical analysis. Thank you for your invaluable contributions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523586633
https://github.com/root-project/root/issues/12648#issuecomment-1523586633:487,Integrability,depend,dependencies,487,"> the APPLE system SDK has changed. @cxwx I agree. But I can't figure out why you can build successfully by turning off some options, but I can't. I also updated the command line tool to 14.3, did you?. > When using the non-homebrew cmake, make sure you removed the previous CMakeCache.txt. As a brutal measure you can temporarily rename/ops/homebrew; that should also move it out of the way... @Axel-Naumann Sure. I cleared all files when I built. It may work but I need to install the dependencies manually, which is also an annoying thing. ; And I do think there is something new happening for these building errors other than homebrew things. rootfit and glew errors are always there no matter if I use external dependencies or builtins. I have never encountered these errors before. >Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). It really isn't necessary, it's just a habit. In addition to macos, I also use root on various versions of linux servers. For the latter, in most cases, I can only compile it myself. And we have many codes that depend on root, so we hope that root's compilation options can be mastered by ourselves. As for contributing to the development of root, I hope that I can do it in the future, but at present more is to use root to complete physical analysis. Thank you for your invaluable contributions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523586633
https://github.com/root-project/root/issues/12648#issuecomment-1523586633:716,Integrability,depend,dependencies,716,"> the APPLE system SDK has changed. @cxwx I agree. But I can't figure out why you can build successfully by turning off some options, but I can't. I also updated the command line tool to 14.3, did you?. > When using the non-homebrew cmake, make sure you removed the previous CMakeCache.txt. As a brutal measure you can temporarily rename/ops/homebrew; that should also move it out of the way... @Axel-Naumann Sure. I cleared all files when I built. It may work but I need to install the dependencies manually, which is also an annoying thing. ; And I do think there is something new happening for these building errors other than homebrew things. rootfit and glew errors are always there no matter if I use external dependencies or builtins. I have never encountered these errors before. >Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). It really isn't necessary, it's just a habit. In addition to macos, I also use root on various versions of linux servers. For the latter, in most cases, I can only compile it myself. And we have many codes that depend on root, so we hope that root's compilation options can be mastered by ourselves. As for contributing to the development of root, I hope that I can do it in the future, but at present more is to use root to complete physical analysis. Thank you for your invaluable contributions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523586633
https://github.com/root-project/root/issues/12648#issuecomment-1523586633:1176,Integrability,depend,depend,1176,"> the APPLE system SDK has changed. @cxwx I agree. But I can't figure out why you can build successfully by turning off some options, but I can't. I also updated the command line tool to 14.3, did you?. > When using the non-homebrew cmake, make sure you removed the previous CMakeCache.txt. As a brutal measure you can temporarily rename/ops/homebrew; that should also move it out of the way... @Axel-Naumann Sure. I cleared all files when I built. It may work but I need to install the dependencies manually, which is also an annoying thing. ; And I do think there is something new happening for these building errors other than homebrew things. rootfit and glew errors are always there no matter if I use external dependencies or builtins. I have never encountered these errors before. >Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). It really isn't necessary, it's just a habit. In addition to macos, I also use root on various versions of linux servers. For the latter, in most cases, I can only compile it myself. And we have many codes that depend on root, so we hope that root's compilation options can be mastered by ourselves. As for contributing to the development of root, I hope that I can do it in the future, but at present more is to use root to complete physical analysis. Thank you for your invaluable contributions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523586633
https://github.com/root-project/root/issues/12648#issuecomment-1523586633:417,Usability,clear,cleared,417,"> the APPLE system SDK has changed. @cxwx I agree. But I can't figure out why you can build successfully by turning off some options, but I can't. I also updated the command line tool to 14.3, did you?. > When using the non-homebrew cmake, make sure you removed the previous CMakeCache.txt. As a brutal measure you can temporarily rename/ops/homebrew; that should also move it out of the way... @Axel-Naumann Sure. I cleared all files when I built. It may work but I need to install the dependencies manually, which is also an annoying thing. ; And I do think there is something new happening for these building errors other than homebrew things. rootfit and glew errors are always there no matter if I use external dependencies or builtins. I have never encountered these errors before. >Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). It really isn't necessary, it's just a habit. In addition to macos, I also use root on various versions of linux servers. For the latter, in most cases, I can only compile it myself. And we have many codes that depend on root, so we hope that root's compilation options can be mastered by ourselves. As for contributing to the development of root, I hope that I can do it in the future, but at present more is to use root to complete physical analysis. Thank you for your invaluable contributions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523586633
https://github.com/root-project/root/issues/12648#issuecomment-1523586633:873,Usability,simpl,simpler,873,"> the APPLE system SDK has changed. @cxwx I agree. But I can't figure out why you can build successfully by turning off some options, but I can't. I also updated the command line tool to 14.3, did you?. > When using the non-homebrew cmake, make sure you removed the previous CMakeCache.txt. As a brutal measure you can temporarily rename/ops/homebrew; that should also move it out of the way... @Axel-Naumann Sure. I cleared all files when I built. It may work but I need to install the dependencies manually, which is also an annoying thing. ; And I do think there is something new happening for these building errors other than homebrew things. rootfit and glew errors are always there no matter if I use external dependencies or builtins. I have never encountered these errors before. >Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). It really isn't necessary, it's just a habit. In addition to macos, I also use root on various versions of linux servers. For the latter, in most cases, I can only compile it myself. And we have many codes that depend on root, so we hope that root's compilation options can be mastered by ourselves. As for contributing to the development of root, I hope that I can do it in the future, but at present more is to use root to complete physical analysis. Thank you for your invaluable contributions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523586633
https://github.com/root-project/root/issues/12653#issuecomment-1507275282:30,Usability,feedback,feedback,30,"Alright, thanks again for the feedback!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653#issuecomment-1507275282
https://github.com/root-project/root/issues/12729#issuecomment-1527829256:1934,Availability,error,error,1934,"dy represent the yields that can be; // used by the RooNLLVar to sum the Poisson terms. However, this optimization; // doesn't work for this demo, maybe because it's not compatible with the; // RooBarlowBeestonLL. See also https://root.cern/doc/v628/release-notes.html.; HistoToWorkspaceFactoryFast::Configuration cfg;; cfg.binnedFitOptimization = false;; auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas, cfg);; #endif; ```. With this, the results I get with 6.28 are already more comparable to 6.24. Here the results of `fit-noshapes`:; ## ROOT 6.28. ```txt; FVAL = -1581.9159109118475; Edm = 0.000441898404860980383; Nfcn = 187; Lumi	 = 0.937281	 +/- 0.041571	(limited); Nmu	 = 68079	 +/- 3149.09	(limited); RawRDst	 = 0.0394995	 +/- 0.00466377	(limited); alpha_BFD1	 = -1.56966	 +/- 0.268056	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 0.000441626; Fit ran with status 0; Stat error on R(D*) is 0.004650; EDM at end was 0.000442; RooArgList:: = (Lumi,Nmu,RawRDst,alpha_BFD1); CURRENT NUISANCE PARAMETERS:; 0: Lumi			 = 0.937281 +/- 0.0414063; 1: Nmu			 = 68079 +/- 3136.33; 3: alpha_BFD1			 = -1.56966 +/- 0.267557; ```. ## ROOT 6.24; ```txt; FVAL = -1581.92046482683691; Edm = 1.80973200685341769e-07; Nfcn = 258; Lumi	 = 0.936911	 +/- 0.041654	(limited); Nmu	 = 63811.4	 +/- 402.673	(limited); RawRDst	 = 0.0394923	 +/- 0.00466481	(limited); alpha_BFD1	 = -1.56652	 +/- 0.266527	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 1.8221e-07; Fit ran with status 0; Stat error on R(D*) is 0.004658; EDM at end was 0.000000; RooArgList:: = (Lumi,Nmu,RawRDst,alpha_BFD1); CURRENT NUISANCE PARAMETERS:; 0: Lumi			 = 0.936911 +/- 0.0416284; 1: Nmu			 = 63811.4 +/- 401.335; 3: alpha_BFD1			 = -1.56652 +/- 0.264945; ```. There are still some problems. The produced p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527829256
https://github.com/root-project/root/issues/12729#issuecomment-1527829256:2634,Availability,error,error,2634,"eady more comparable to 6.24. Here the results of `fit-noshapes`:; ## ROOT 6.28. ```txt; FVAL = -1581.9159109118475; Edm = 0.000441898404860980383; Nfcn = 187; Lumi	 = 0.937281	 +/- 0.041571	(limited); Nmu	 = 68079	 +/- 3149.09	(limited); RawRDst	 = 0.0394995	 +/- 0.00466377	(limited); alpha_BFD1	 = -1.56966	 +/- 0.268056	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 0.000441626; Fit ran with status 0; Stat error on R(D*) is 0.004650; EDM at end was 0.000442; RooArgList:: = (Lumi,Nmu,RawRDst,alpha_BFD1); CURRENT NUISANCE PARAMETERS:; 0: Lumi			 = 0.937281 +/- 0.0414063; 1: Nmu			 = 68079 +/- 3136.33; 3: alpha_BFD1			 = -1.56966 +/- 0.267557; ```. ## ROOT 6.24; ```txt; FVAL = -1581.92046482683691; Edm = 1.80973200685341769e-07; Nfcn = 258; Lumi	 = 0.936911	 +/- 0.041654	(limited); Nmu	 = 63811.4	 +/- 402.673	(limited); RawRDst	 = 0.0394923	 +/- 0.00466481	(limited); alpha_BFD1	 = -1.56652	 +/- 0.266527	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 1.8221e-07; Fit ran with status 0; Stat error on R(D*) is 0.004658; EDM at end was 0.000000; RooArgList:: = (Lumi,Nmu,RawRDst,alpha_BFD1); CURRENT NUISANCE PARAMETERS:; 0: Lumi			 = 0.936911 +/- 0.0416284; 1: Nmu			 = 63811.4 +/- 401.335; 3: alpha_BFD1			 = -1.56652 +/- 0.264945; ```. There are still some problems. The produced plots don't look correct, and the `Nmu` parameter has an error that is way off. This is a problem I already see with 6.26, and it is probably related to the reorganization of the HistFactory model RooFit representation:; https://github.com/root-project/root/pull/8167. Indeed, it could be related to the new `RooBinWidthFunction`. I can only continue the investigation next week on Wednesday, if you learn something new in the meantime @yipengsun and @CoffeeIntoScience please let me know!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527829256
https://github.com/root-project/root/issues/12729#issuecomment-1527829256:2981,Availability,error,error,2981,"eady more comparable to 6.24. Here the results of `fit-noshapes`:; ## ROOT 6.28. ```txt; FVAL = -1581.9159109118475; Edm = 0.000441898404860980383; Nfcn = 187; Lumi	 = 0.937281	 +/- 0.041571	(limited); Nmu	 = 68079	 +/- 3149.09	(limited); RawRDst	 = 0.0394995	 +/- 0.00466377	(limited); alpha_BFD1	 = -1.56966	 +/- 0.268056	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 0.000441626; Fit ran with status 0; Stat error on R(D*) is 0.004650; EDM at end was 0.000442; RooArgList:: = (Lumi,Nmu,RawRDst,alpha_BFD1); CURRENT NUISANCE PARAMETERS:; 0: Lumi			 = 0.937281 +/- 0.0414063; 1: Nmu			 = 68079 +/- 3136.33; 3: alpha_BFD1			 = -1.56966 +/- 0.267557; ```. ## ROOT 6.24; ```txt; FVAL = -1581.92046482683691; Edm = 1.80973200685341769e-07; Nfcn = 258; Lumi	 = 0.936911	 +/- 0.041654	(limited); Nmu	 = 63811.4	 +/- 402.673	(limited); RawRDst	 = 0.0394923	 +/- 0.00466481	(limited); alpha_BFD1	 = -1.56652	 +/- 0.266527	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 1.8221e-07; Fit ran with status 0; Stat error on R(D*) is 0.004658; EDM at end was 0.000000; RooArgList:: = (Lumi,Nmu,RawRDst,alpha_BFD1); CURRENT NUISANCE PARAMETERS:; 0: Lumi			 = 0.936911 +/- 0.0416284; 1: Nmu			 = 63811.4 +/- 401.335; 3: alpha_BFD1			 = -1.56652 +/- 0.264945; ```. There are still some problems. The produced plots don't look correct, and the `Nmu` parameter has an error that is way off. This is a problem I already see with 6.26, and it is probably related to the reorganization of the HistFactory model RooFit representation:; https://github.com/root-project/root/pull/8167. Indeed, it could be related to the new `RooBinWidthFunction`. I can only continue the investigation next week on Wednesday, if you learn something new in the meantime @yipengsun and @CoffeeIntoScience please let me know!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527829256
https://github.com/root-project/root/issues/12729#issuecomment-1527829256:209,Deployability,release,release-notes,209,"Hi, thanks for the reports! Okay, the problem with the `RooRealSumPdf` hinted me that this new optimization was part of the problem (look for ""binned likelihood fit optimization"").; https://root.cern/doc/v628/release-notes.html. This optimization was used inside ATLAS for a long time to great success (speedups), so I was enabling it by default. However, it seems to be problematic here, maybe it doesn't work with the RooBarlowBeestonLL. You should for now disable it when the demo is compiled with ROOT 6.28. So the line with `MakeModelAndMeasurementFast` in `histfact_demo.cpp` would become:; ```C++; #if ROOT_VERSION_CODE < ROOT_VERSION(6,28,00); auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas);; #else; // Disable the binned fit optimization that was enabled by default in ROOT 6.28.; // This optimization skips the normalization of the RooRealSumPdf, because; // the unnormalized bin contents already represent the yields that can be; // used by the RooNLLVar to sum the Poisson terms. However, this optimization; // doesn't work for this demo, maybe because it's not compatible with the; // RooBarlowBeestonLL. See also https://root.cern/doc/v628/release-notes.html.; HistoToWorkspaceFactoryFast::Configuration cfg;; cfg.binnedFitOptimization = false;; auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas, cfg);; #endif; ```. With this, the results I get with 6.28 are already more comparable to 6.24. Here the results of `fit-noshapes`:; ## ROOT 6.28. ```txt; FVAL = -1581.9159109118475; Edm = 0.000441898404860980383; Nfcn = 187; Lumi	 = 0.937281	 +/- 0.041571	(limited); Nmu	 = 68079	 +/- 3149.09	(limited); RawRDst	 = 0.0394995	 +/- 0.00466377	(limited); alpha_BFD1	 = -1.56966	 +/- 0.268056	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 0.000441626; Fit ran with status 0; Stat error on R(D*) is 0.004650; EDM at end was 0.000442; RooArgList:: =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527829256
https://github.com/root-project/root/issues/12729#issuecomment-1527829256:1174,Deployability,release,release-notes,1174,"ion"").; https://root.cern/doc/v628/release-notes.html. This optimization was used inside ATLAS for a long time to great success (speedups), so I was enabling it by default. However, it seems to be problematic here, maybe it doesn't work with the RooBarlowBeestonLL. You should for now disable it when the demo is compiled with ROOT 6.28. So the line with `MakeModelAndMeasurementFast` in `histfact_demo.cpp` would become:; ```C++; #if ROOT_VERSION_CODE < ROOT_VERSION(6,28,00); auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas);; #else; // Disable the binned fit optimization that was enabled by default in ROOT 6.28.; // This optimization skips the normalization of the RooRealSumPdf, because; // the unnormalized bin contents already represent the yields that can be; // used by the RooNLLVar to sum the Poisson terms. However, this optimization; // doesn't work for this demo, maybe because it's not compatible with the; // RooBarlowBeestonLL. See also https://root.cern/doc/v628/release-notes.html.; HistoToWorkspaceFactoryFast::Configuration cfg;; cfg.binnedFitOptimization = false;; auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas, cfg);; #endif; ```. With this, the results I get with 6.28 are already more comparable to 6.24. Here the results of `fit-noshapes`:; ## ROOT 6.28. ```txt; FVAL = -1581.9159109118475; Edm = 0.000441898404860980383; Nfcn = 187; Lumi	 = 0.937281	 +/- 0.041571	(limited); Nmu	 = 68079	 +/- 3149.09	(limited); RawRDst	 = 0.0394995	 +/- 0.00466377	(limited); alpha_BFD1	 = -1.56966	 +/- 0.268056	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 0.000441626; Fit ran with status 0; Stat error on R(D*) is 0.004650; EDM at end was 0.000442; RooArgList:: = (Lumi,Nmu,RawRDst,alpha_BFD1); CURRENT NUISANCE PARAMETERS:; 0: Lumi			 = 0.937281 +/- 0.0414063; 1: Nmu			 = 68079 +/- 3136.33; 3: alpha_BFD1			 = -1.56966 +/- 0.267557; `",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527829256
https://github.com/root-project/root/issues/12729#issuecomment-1527829256:95,Performance,optimiz,optimization,95,"Hi, thanks for the reports! Okay, the problem with the `RooRealSumPdf` hinted me that this new optimization was part of the problem (look for ""binned likelihood fit optimization"").; https://root.cern/doc/v628/release-notes.html. This optimization was used inside ATLAS for a long time to great success (speedups), so I was enabling it by default. However, it seems to be problematic here, maybe it doesn't work with the RooBarlowBeestonLL. You should for now disable it when the demo is compiled with ROOT 6.28. So the line with `MakeModelAndMeasurementFast` in `histfact_demo.cpp` would become:; ```C++; #if ROOT_VERSION_CODE < ROOT_VERSION(6,28,00); auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas);; #else; // Disable the binned fit optimization that was enabled by default in ROOT 6.28.; // This optimization skips the normalization of the RooRealSumPdf, because; // the unnormalized bin contents already represent the yields that can be; // used by the RooNLLVar to sum the Poisson terms. However, this optimization; // doesn't work for this demo, maybe because it's not compatible with the; // RooBarlowBeestonLL. See also https://root.cern/doc/v628/release-notes.html.; HistoToWorkspaceFactoryFast::Configuration cfg;; cfg.binnedFitOptimization = false;; auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas, cfg);; #endif; ```. With this, the results I get with 6.28 are already more comparable to 6.24. Here the results of `fit-noshapes`:; ## ROOT 6.28. ```txt; FVAL = -1581.9159109118475; Edm = 0.000441898404860980383; Nfcn = 187; Lumi	 = 0.937281	 +/- 0.041571	(limited); Nmu	 = 68079	 +/- 3149.09	(limited); RawRDst	 = 0.0394995	 +/- 0.00466377	(limited); alpha_BFD1	 = -1.56966	 +/- 0.268056	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 0.000441626; Fit ran with status 0; Stat error on R(D*) is 0.004650; EDM at end was 0.000442; RooArgList:: =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527829256
https://github.com/root-project/root/issues/12729#issuecomment-1527829256:165,Performance,optimiz,optimization,165,"Hi, thanks for the reports! Okay, the problem with the `RooRealSumPdf` hinted me that this new optimization was part of the problem (look for ""binned likelihood fit optimization"").; https://root.cern/doc/v628/release-notes.html. This optimization was used inside ATLAS for a long time to great success (speedups), so I was enabling it by default. However, it seems to be problematic here, maybe it doesn't work with the RooBarlowBeestonLL. You should for now disable it when the demo is compiled with ROOT 6.28. So the line with `MakeModelAndMeasurementFast` in `histfact_demo.cpp` would become:; ```C++; #if ROOT_VERSION_CODE < ROOT_VERSION(6,28,00); auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas);; #else; // Disable the binned fit optimization that was enabled by default in ROOT 6.28.; // This optimization skips the normalization of the RooRealSumPdf, because; // the unnormalized bin contents already represent the yields that can be; // used by the RooNLLVar to sum the Poisson terms. However, this optimization; // doesn't work for this demo, maybe because it's not compatible with the; // RooBarlowBeestonLL. See also https://root.cern/doc/v628/release-notes.html.; HistoToWorkspaceFactoryFast::Configuration cfg;; cfg.binnedFitOptimization = false;; auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas, cfg);; #endif; ```. With this, the results I get with 6.28 are already more comparable to 6.24. Here the results of `fit-noshapes`:; ## ROOT 6.28. ```txt; FVAL = -1581.9159109118475; Edm = 0.000441898404860980383; Nfcn = 187; Lumi	 = 0.937281	 +/- 0.041571	(limited); Nmu	 = 68079	 +/- 3149.09	(limited); RawRDst	 = 0.0394995	 +/- 0.00466377	(limited); alpha_BFD1	 = -1.56966	 +/- 0.268056	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 0.000441626; Fit ran with status 0; Stat error on R(D*) is 0.004650; EDM at end was 0.000442; RooArgList:: =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527829256
https://github.com/root-project/root/issues/12729#issuecomment-1527829256:234,Performance,optimiz,optimization,234,"Hi, thanks for the reports! Okay, the problem with the `RooRealSumPdf` hinted me that this new optimization was part of the problem (look for ""binned likelihood fit optimization"").; https://root.cern/doc/v628/release-notes.html. This optimization was used inside ATLAS for a long time to great success (speedups), so I was enabling it by default. However, it seems to be problematic here, maybe it doesn't work with the RooBarlowBeestonLL. You should for now disable it when the demo is compiled with ROOT 6.28. So the line with `MakeModelAndMeasurementFast` in `histfact_demo.cpp` would become:; ```C++; #if ROOT_VERSION_CODE < ROOT_VERSION(6,28,00); auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas);; #else; // Disable the binned fit optimization that was enabled by default in ROOT 6.28.; // This optimization skips the normalization of the RooRealSumPdf, because; // the unnormalized bin contents already represent the yields that can be; // used by the RooNLLVar to sum the Poisson terms. However, this optimization; // doesn't work for this demo, maybe because it's not compatible with the; // RooBarlowBeestonLL. See also https://root.cern/doc/v628/release-notes.html.; HistoToWorkspaceFactoryFast::Configuration cfg;; cfg.binnedFitOptimization = false;; auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas, cfg);; #endif; ```. With this, the results I get with 6.28 are already more comparable to 6.24. Here the results of `fit-noshapes`:; ## ROOT 6.28. ```txt; FVAL = -1581.9159109118475; Edm = 0.000441898404860980383; Nfcn = 187; Lumi	 = 0.937281	 +/- 0.041571	(limited); Nmu	 = 68079	 +/- 3149.09	(limited); RawRDst	 = 0.0394995	 +/- 0.00466377	(limited); alpha_BFD1	 = -1.56966	 +/- 0.268056	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 0.000441626; Fit ran with status 0; Stat error on R(D*) is 0.004650; EDM at end was 0.000442; RooArgList:: =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527829256
https://github.com/root-project/root/issues/12729#issuecomment-1527829256:754,Performance,optimiz,optimization,754,"Hi, thanks for the reports! Okay, the problem with the `RooRealSumPdf` hinted me that this new optimization was part of the problem (look for ""binned likelihood fit optimization"").; https://root.cern/doc/v628/release-notes.html. This optimization was used inside ATLAS for a long time to great success (speedups), so I was enabling it by default. However, it seems to be problematic here, maybe it doesn't work with the RooBarlowBeestonLL. You should for now disable it when the demo is compiled with ROOT 6.28. So the line with `MakeModelAndMeasurementFast` in `histfact_demo.cpp` would become:; ```C++; #if ROOT_VERSION_CODE < ROOT_VERSION(6,28,00); auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas);; #else; // Disable the binned fit optimization that was enabled by default in ROOT 6.28.; // This optimization skips the normalization of the RooRealSumPdf, because; // the unnormalized bin contents already represent the yields that can be; // used by the RooNLLVar to sum the Poisson terms. However, this optimization; // doesn't work for this demo, maybe because it's not compatible with the; // RooBarlowBeestonLL. See also https://root.cern/doc/v628/release-notes.html.; HistoToWorkspaceFactoryFast::Configuration cfg;; cfg.binnedFitOptimization = false;; auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas, cfg);; #endif; ```. With this, the results I get with 6.28 are already more comparable to 6.24. Here the results of `fit-noshapes`:; ## ROOT 6.28. ```txt; FVAL = -1581.9159109118475; Edm = 0.000441898404860980383; Nfcn = 187; Lumi	 = 0.937281	 +/- 0.041571	(limited); Nmu	 = 68079	 +/- 3149.09	(limited); RawRDst	 = 0.0394995	 +/- 0.00466377	(limited); alpha_BFD1	 = -1.56966	 +/- 0.268056	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 0.000441626; Fit ran with status 0; Stat error on R(D*) is 0.004650; EDM at end was 0.000442; RooArgList:: =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527829256
https://github.com/root-project/root/issues/12729#issuecomment-1527829256:818,Performance,optimiz,optimization,818,"Hi, thanks for the reports! Okay, the problem with the `RooRealSumPdf` hinted me that this new optimization was part of the problem (look for ""binned likelihood fit optimization"").; https://root.cern/doc/v628/release-notes.html. This optimization was used inside ATLAS for a long time to great success (speedups), so I was enabling it by default. However, it seems to be problematic here, maybe it doesn't work with the RooBarlowBeestonLL. You should for now disable it when the demo is compiled with ROOT 6.28. So the line with `MakeModelAndMeasurementFast` in `histfact_demo.cpp` would become:; ```C++; #if ROOT_VERSION_CODE < ROOT_VERSION(6,28,00); auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas);; #else; // Disable the binned fit optimization that was enabled by default in ROOT 6.28.; // This optimization skips the normalization of the RooRealSumPdf, because; // the unnormalized bin contents already represent the yields that can be; // used by the RooNLLVar to sum the Poisson terms. However, this optimization; // doesn't work for this demo, maybe because it's not compatible with the; // RooBarlowBeestonLL. See also https://root.cern/doc/v628/release-notes.html.; HistoToWorkspaceFactoryFast::Configuration cfg;; cfg.binnedFitOptimization = false;; auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas, cfg);; #endif; ```. With this, the results I get with 6.28 are already more comparable to 6.24. Here the results of `fit-noshapes`:; ## ROOT 6.28. ```txt; FVAL = -1581.9159109118475; Edm = 0.000441898404860980383; Nfcn = 187; Lumi	 = 0.937281	 +/- 0.041571	(limited); Nmu	 = 68079	 +/- 3149.09	(limited); RawRDst	 = 0.0394995	 +/- 0.00466377	(limited); alpha_BFD1	 = -1.56966	 +/- 0.268056	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 0.000441626; Fit ran with status 0; Stat error on R(D*) is 0.004650; EDM at end was 0.000442; RooArgList:: =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527829256
https://github.com/root-project/root/issues/12729#issuecomment-1527829256:1026,Performance,optimiz,optimization,1026,"ted me that this new optimization was part of the problem (look for ""binned likelihood fit optimization"").; https://root.cern/doc/v628/release-notes.html. This optimization was used inside ATLAS for a long time to great success (speedups), so I was enabling it by default. However, it seems to be problematic here, maybe it doesn't work with the RooBarlowBeestonLL. You should for now disable it when the demo is compiled with ROOT 6.28. So the line with `MakeModelAndMeasurementFast` in `histfact_demo.cpp` would become:; ```C++; #if ROOT_VERSION_CODE < ROOT_VERSION(6,28,00); auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas);; #else; // Disable the binned fit optimization that was enabled by default in ROOT 6.28.; // This optimization skips the normalization of the RooRealSumPdf, because; // the unnormalized bin contents already represent the yields that can be; // used by the RooNLLVar to sum the Poisson terms. However, this optimization; // doesn't work for this demo, maybe because it's not compatible with the; // RooBarlowBeestonLL. See also https://root.cern/doc/v628/release-notes.html.; HistoToWorkspaceFactoryFast::Configuration cfg;; cfg.binnedFitOptimization = false;; auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas, cfg);; #endif; ```. With this, the results I get with 6.28 are already more comparable to 6.24. Here the results of `fit-noshapes`:; ## ROOT 6.28. ```txt; FVAL = -1581.9159109118475; Edm = 0.000441898404860980383; Nfcn = 187; Lumi	 = 0.937281	 +/- 0.041571	(limited); Nmu	 = 68079	 +/- 3149.09	(limited); RawRDst	 = 0.0394995	 +/- 0.00466377	(limited); alpha_BFD1	 = -1.56966	 +/- 0.268056	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 0.000441626; Fit ran with status 0; Stat error on R(D*) is 0.004650; EDM at end was 0.000442; RooArgList:: = (Lumi,Nmu,RawRDst,alpha_BFD1); CURRENT NUISANCE PARAMETERS:; 0: Lumi			 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527829256
https://github.com/root-project/root/issues/12729#issuecomment-1527829256:3324,Usability,learn,learn,3324,"eady more comparable to 6.24. Here the results of `fit-noshapes`:; ## ROOT 6.28. ```txt; FVAL = -1581.9159109118475; Edm = 0.000441898404860980383; Nfcn = 187; Lumi	 = 0.937281	 +/- 0.041571	(limited); Nmu	 = 68079	 +/- 3149.09	(limited); RawRDst	 = 0.0394995	 +/- 0.00466377	(limited); alpha_BFD1	 = -1.56966	 +/- 0.268056	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 0.000441626; Fit ran with status 0; Stat error on R(D*) is 0.004650; EDM at end was 0.000442; RooArgList:: = (Lumi,Nmu,RawRDst,alpha_BFD1); CURRENT NUISANCE PARAMETERS:; 0: Lumi			 = 0.937281 +/- 0.0414063; 1: Nmu			 = 68079 +/- 3136.33; 3: alpha_BFD1			 = -1.56966 +/- 0.267557; ```. ## ROOT 6.24; ```txt; FVAL = -1581.92046482683691; Edm = 1.80973200685341769e-07; Nfcn = 258; Lumi	 = 0.936911	 +/- 0.041654	(limited); Nmu	 = 63811.4	 +/- 402.673	(limited); RawRDst	 = 0.0394923	 +/- 0.00466481	(limited); alpha_BFD1	 = -1.56652	 +/- 0.266527	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 1.8221e-07; Fit ran with status 0; Stat error on R(D*) is 0.004658; EDM at end was 0.000000; RooArgList:: = (Lumi,Nmu,RawRDst,alpha_BFD1); CURRENT NUISANCE PARAMETERS:; 0: Lumi			 = 0.936911 +/- 0.0416284; 1: Nmu			 = 63811.4 +/- 401.335; 3: alpha_BFD1			 = -1.56652 +/- 0.264945; ```. There are still some problems. The produced plots don't look correct, and the `Nmu` parameter has an error that is way off. This is a problem I already see with 6.26, and it is probably related to the reorganization of the HistFactory model RooFit representation:; https://github.com/root-project/root/pull/8167. Indeed, it could be related to the new `RooBinWidthFunction`. I can only continue the investigation next week on Wednesday, if you learn something new in the meantime @yipengsun and @CoffeeIntoScience please let me know!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527829256
https://github.com/root-project/root/issues/12742#issuecomment-1529137927:155,Usability,simpl,simple,155,"Apparently, this is due to a flaw in the implementation of `RColumn::AppendV()` (whose only current user seems to be `RField<std::string>`). The following simple excerpt reproduces the problem:; ```c++; auto model = RNTupleModel::Create();; auto str = model->MakeField<std::string>(""str"");. RNTupleWriteOptions options;; options.SetApproxUnzippedPageSize(16);; {; auto ntuple = RNTupleWriter::Recreate(std::move(model), ""ntuple"", ""/tmp/out.ntuple"", options);; *str = ""01234567890123456789012"";; ntuple->Fill();; *str = ""012"";; ntuple->Fill();; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12742#issuecomment-1529137927
https://github.com/root-project/root/issues/12744#issuecomment-1549824735:290,Usability,guid,guide,290,"Thank you very much! I'm sure there must be a way to do that. However, I think this must be a rather rare demand, so this should be some second-order feature...; But it may also be that it is already possible through command line/environment arguments - maybe someone who knows CMake could guide how to do that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12744#issuecomment-1549824735
https://github.com/root-project/root/issues/12747#issuecomment-1532508987:96,Usability,intuit,intuitive,96,"Okay, putting the ""right"" `gcc` into `$PATH` works, though I have to say this is *very* counter-intuitive...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12747#issuecomment-1532508987
https://github.com/root-project/root/issues/12755#issuecomment-1534658132:1917,Availability,error,error,1917,"ble> m_vIntDataSD[NUMBER_OF_COLORS];; 	std::vector<double> m_vPkRatio;; 	std::vector<int> m_vEvtErr;; 	std::vector<double> m_vEvRate;; 	std::vector<double> m_vGEV;; 	std::vector<int> m_vChEnbMask;. 	bool m_bAllChannelsEnabled;; ```. Here, NUMBER_OF_COLORS = 5. The generated _dict file in root 5 show, at one point (note the vector declaration), . ```; {; for (Int_t R__l = 0; R__l < 5; R__l++) {; vector<double> &R__stl = m_vIntData[R__l];; R__stl.clear();; int R__i, R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (R__i = 0; R__i < R__n; R__i++) {; double R__t;; R__b >> R__t;; R__stl.push_back(R__t);; }; }; }; ```. This seems to work well. But in root 6 it produces (note the [5] after vector<double>). ```; for (Int_t R__l = 0; R__l < 5; R__l++) {; vector<double>[5] &R__stl = m_vIntData[R__l];; R__stl.clear();; int R__i, R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (R__i = 0; R__i < R__n; R__i++) {; double R__t;; R__b >> R__t;; R__stl.push_back(R__t);; }; }; }. ```. this produces the compilation error:. ```; g++ -O -Wall -fPIC -pthread -std=c++14 -m64 -I/usr/include/root -I/home/vmecomp/Projects/Cytogate/CytCommon -I../../Include -I. -I/usr/include -I/home/vmecomp/Projects/Cytogate/Bus -I/home/vmecomp/Projects/Cytogate/Include -I/home/vmecomp/Projects/Cytogate/CytCommon -I/usr/include/root -c -o CytStatInfo_dict.o CytStatInfo_dict.C; CytStatInfo_dict.C: In member function ‘virtual void CytStatInfo::Streamer(TBuffer&)’:; CytStatInfo_dict.C:202:25: error: expected identifier before numeric constant; vector<double>[5] &R__stl = m_vIntData[R__l];; ^; CytStatInfo_dict.C:202:25: error: expected ‘]’ before numeric constant; vector<double>[5] &R__stl = m_vIntData[R__l];; ^; ]; CytStatInfo_dict.C:202:24: warning: structured bindings only available with -std=c++17 or -std=gnu++17; vector<double>[5] &R__stl = m_vIntData[R__l];; ```. It is possible that root is expecting better coding than my app shows, so if I'm doing something wrong please let me know. I include below the ta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12755#issuecomment-1534658132
https://github.com/root-project/root/issues/12755#issuecomment-1534658132:2377,Availability,error,error,2377,"ated _dict file in root 5 show, at one point (note the vector declaration), . ```; {; for (Int_t R__l = 0; R__l < 5; R__l++) {; vector<double> &R__stl = m_vIntData[R__l];; R__stl.clear();; int R__i, R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (R__i = 0; R__i < R__n; R__i++) {; double R__t;; R__b >> R__t;; R__stl.push_back(R__t);; }; }; }; ```. This seems to work well. But in root 6 it produces (note the [5] after vector<double>). ```; for (Int_t R__l = 0; R__l < 5; R__l++) {; vector<double>[5] &R__stl = m_vIntData[R__l];; R__stl.clear();; int R__i, R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (R__i = 0; R__i < R__n; R__i++) {; double R__t;; R__b >> R__t;; R__stl.push_back(R__t);; }; }; }. ```. this produces the compilation error:. ```; g++ -O -Wall -fPIC -pthread -std=c++14 -m64 -I/usr/include/root -I/home/vmecomp/Projects/Cytogate/CytCommon -I../../Include -I. -I/usr/include -I/home/vmecomp/Projects/Cytogate/Bus -I/home/vmecomp/Projects/Cytogate/Include -I/home/vmecomp/Projects/Cytogate/CytCommon -I/usr/include/root -c -o CytStatInfo_dict.o CytStatInfo_dict.C; CytStatInfo_dict.C: In member function ‘virtual void CytStatInfo::Streamer(TBuffer&)’:; CytStatInfo_dict.C:202:25: error: expected identifier before numeric constant; vector<double>[5] &R__stl = m_vIntData[R__l];; ^; CytStatInfo_dict.C:202:25: error: expected ‘]’ before numeric constant; vector<double>[5] &R__stl = m_vIntData[R__l];; ^; ]; CytStatInfo_dict.C:202:24: warning: structured bindings only available with -std=c++17 or -std=gnu++17; vector<double>[5] &R__stl = m_vIntData[R__l];; ```. It is possible that root is expecting better coding than my app shows, so if I'm doing something wrong please let me know. I include below the tar gzips with the little project in both versions, with results after compilation. Thanks,. Emanuel. [test_v5.tar.gz](https://github.com/root-project/root/files/11390988/test_v5.tar.gz); [test_v6.tar.gz](https://github.com/root-project/root/files/11390989/test_v6.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12755#issuecomment-1534658132
https://github.com/root-project/root/issues/12755#issuecomment-1534658132:2506,Availability,error,error,2506,"ated _dict file in root 5 show, at one point (note the vector declaration), . ```; {; for (Int_t R__l = 0; R__l < 5; R__l++) {; vector<double> &R__stl = m_vIntData[R__l];; R__stl.clear();; int R__i, R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (R__i = 0; R__i < R__n; R__i++) {; double R__t;; R__b >> R__t;; R__stl.push_back(R__t);; }; }; }; ```. This seems to work well. But in root 6 it produces (note the [5] after vector<double>). ```; for (Int_t R__l = 0; R__l < 5; R__l++) {; vector<double>[5] &R__stl = m_vIntData[R__l];; R__stl.clear();; int R__i, R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (R__i = 0; R__i < R__n; R__i++) {; double R__t;; R__b >> R__t;; R__stl.push_back(R__t);; }; }; }. ```. this produces the compilation error:. ```; g++ -O -Wall -fPIC -pthread -std=c++14 -m64 -I/usr/include/root -I/home/vmecomp/Projects/Cytogate/CytCommon -I../../Include -I. -I/usr/include -I/home/vmecomp/Projects/Cytogate/Bus -I/home/vmecomp/Projects/Cytogate/Include -I/home/vmecomp/Projects/Cytogate/CytCommon -I/usr/include/root -c -o CytStatInfo_dict.o CytStatInfo_dict.C; CytStatInfo_dict.C: In member function ‘virtual void CytStatInfo::Streamer(TBuffer&)’:; CytStatInfo_dict.C:202:25: error: expected identifier before numeric constant; vector<double>[5] &R__stl = m_vIntData[R__l];; ^; CytStatInfo_dict.C:202:25: error: expected ‘]’ before numeric constant; vector<double>[5] &R__stl = m_vIntData[R__l];; ^; ]; CytStatInfo_dict.C:202:24: warning: structured bindings only available with -std=c++17 or -std=gnu++17; vector<double>[5] &R__stl = m_vIntData[R__l];; ```. It is possible that root is expecting better coding than my app shows, so if I'm doing something wrong please let me know. I include below the tar gzips with the little project in both versions, with results after compilation. Thanks,. Emanuel. [test_v5.tar.gz](https://github.com/root-project/root/files/11390988/test_v5.tar.gz); [test_v6.tar.gz](https://github.com/root-project/root/files/11390989/test_v6.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12755#issuecomment-1534658132
https://github.com/root-project/root/issues/12755#issuecomment-1534658132:2665,Availability,avail,available,2665,"ated _dict file in root 5 show, at one point (note the vector declaration), . ```; {; for (Int_t R__l = 0; R__l < 5; R__l++) {; vector<double> &R__stl = m_vIntData[R__l];; R__stl.clear();; int R__i, R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (R__i = 0; R__i < R__n; R__i++) {; double R__t;; R__b >> R__t;; R__stl.push_back(R__t);; }; }; }; ```. This seems to work well. But in root 6 it produces (note the [5] after vector<double>). ```; for (Int_t R__l = 0; R__l < 5; R__l++) {; vector<double>[5] &R__stl = m_vIntData[R__l];; R__stl.clear();; int R__i, R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (R__i = 0; R__i < R__n; R__i++) {; double R__t;; R__b >> R__t;; R__stl.push_back(R__t);; }; }; }. ```. this produces the compilation error:. ```; g++ -O -Wall -fPIC -pthread -std=c++14 -m64 -I/usr/include/root -I/home/vmecomp/Projects/Cytogate/CytCommon -I../../Include -I. -I/usr/include -I/home/vmecomp/Projects/Cytogate/Bus -I/home/vmecomp/Projects/Cytogate/Include -I/home/vmecomp/Projects/Cytogate/CytCommon -I/usr/include/root -c -o CytStatInfo_dict.o CytStatInfo_dict.C; CytStatInfo_dict.C: In member function ‘virtual void CytStatInfo::Streamer(TBuffer&)’:; CytStatInfo_dict.C:202:25: error: expected identifier before numeric constant; vector<double>[5] &R__stl = m_vIntData[R__l];; ^; CytStatInfo_dict.C:202:25: error: expected ‘]’ before numeric constant; vector<double>[5] &R__stl = m_vIntData[R__l];; ^; ]; CytStatInfo_dict.C:202:24: warning: structured bindings only available with -std=c++17 or -std=gnu++17; vector<double>[5] &R__stl = m_vIntData[R__l];; ```. It is possible that root is expecting better coding than my app shows, so if I'm doing something wrong please let me know. I include below the tar gzips with the little project in both versions, with results after compilation. Thanks,. Emanuel. [test_v5.tar.gz](https://github.com/root-project/root/files/11390988/test_v5.tar.gz); [test_v6.tar.gz](https://github.com/root-project/root/files/11390989/test_v6.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12755#issuecomment-1534658132
https://github.com/root-project/root/issues/12755#issuecomment-1534658132:1354,Usability,clear,clear,1354,"he app is not able to go forward. . As a summary of the problem, it shows up on the lines of m_vIntData and m_vIntDatSD, below:; ```; class CytStatInfo : public TObject {; private:; 	int m_iMachineSize;; 	int m_bMachineSizeSet;; 	double m_dMotorPos;; 	int m_iFIndex;; 	std::vector<int> m_vChNum;; 	std::vector<int> m_vNoEv;; 	std::vector<long long> m_vTsFirst;; 	std::vector<double> m_vVel;; 	std::vector<double> m_vOpPow;; 	std::vector<double> m_vPulseMag;; 	std::vector<double> m_vIntData[NUMBER_OF_COLORS];; 	std::vector<double> m_vIntDataSD[NUMBER_OF_COLORS];; 	std::vector<double> m_vPkRatio;; 	std::vector<int> m_vEvtErr;; 	std::vector<double> m_vEvRate;; 	std::vector<double> m_vGEV;; 	std::vector<int> m_vChEnbMask;. 	bool m_bAllChannelsEnabled;; ```. Here, NUMBER_OF_COLORS = 5. The generated _dict file in root 5 show, at one point (note the vector declaration), . ```; {; for (Int_t R__l = 0; R__l < 5; R__l++) {; vector<double> &R__stl = m_vIntData[R__l];; R__stl.clear();; int R__i, R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (R__i = 0; R__i < R__n; R__i++) {; double R__t;; R__b >> R__t;; R__stl.push_back(R__t);; }; }; }; ```. This seems to work well. But in root 6 it produces (note the [5] after vector<double>). ```; for (Int_t R__l = 0; R__l < 5; R__l++) {; vector<double>[5] &R__stl = m_vIntData[R__l];; R__stl.clear();; int R__i, R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (R__i = 0; R__i < R__n; R__i++) {; double R__t;; R__b >> R__t;; R__stl.push_back(R__t);; }; }; }. ```. this produces the compilation error:. ```; g++ -O -Wall -fPIC -pthread -std=c++14 -m64 -I/usr/include/root -I/home/vmecomp/Projects/Cytogate/CytCommon -I../../Include -I. -I/usr/include -I/home/vmecomp/Projects/Cytogate/Bus -I/home/vmecomp/Projects/Cytogate/Include -I/home/vmecomp/Projects/Cytogate/CytCommon -I/usr/include/root -c -o CytStatInfo_dict.o CytStatInfo_dict.C; CytStatInfo_dict.C: In member function ‘virtual void CytStatInfo::Streamer(TBuffer&)’:; CytStatInfo_dict.C:202:25: er",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12755#issuecomment-1534658132
https://github.com/root-project/root/issues/12755#issuecomment-1534658132:1715,Usability,clear,clear,1715," 	std::vector<double> m_vVel;; 	std::vector<double> m_vOpPow;; 	std::vector<double> m_vPulseMag;; 	std::vector<double> m_vIntData[NUMBER_OF_COLORS];; 	std::vector<double> m_vIntDataSD[NUMBER_OF_COLORS];; 	std::vector<double> m_vPkRatio;; 	std::vector<int> m_vEvtErr;; 	std::vector<double> m_vEvRate;; 	std::vector<double> m_vGEV;; 	std::vector<int> m_vChEnbMask;. 	bool m_bAllChannelsEnabled;; ```. Here, NUMBER_OF_COLORS = 5. The generated _dict file in root 5 show, at one point (note the vector declaration), . ```; {; for (Int_t R__l = 0; R__l < 5; R__l++) {; vector<double> &R__stl = m_vIntData[R__l];; R__stl.clear();; int R__i, R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (R__i = 0; R__i < R__n; R__i++) {; double R__t;; R__b >> R__t;; R__stl.push_back(R__t);; }; }; }; ```. This seems to work well. But in root 6 it produces (note the [5] after vector<double>). ```; for (Int_t R__l = 0; R__l < 5; R__l++) {; vector<double>[5] &R__stl = m_vIntData[R__l];; R__stl.clear();; int R__i, R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (R__i = 0; R__i < R__n; R__i++) {; double R__t;; R__b >> R__t;; R__stl.push_back(R__t);; }; }; }. ```. this produces the compilation error:. ```; g++ -O -Wall -fPIC -pthread -std=c++14 -m64 -I/usr/include/root -I/home/vmecomp/Projects/Cytogate/CytCommon -I../../Include -I. -I/usr/include -I/home/vmecomp/Projects/Cytogate/Bus -I/home/vmecomp/Projects/Cytogate/Include -I/home/vmecomp/Projects/Cytogate/CytCommon -I/usr/include/root -c -o CytStatInfo_dict.o CytStatInfo_dict.C; CytStatInfo_dict.C: In member function ‘virtual void CytStatInfo::Streamer(TBuffer&)’:; CytStatInfo_dict.C:202:25: error: expected identifier before numeric constant; vector<double>[5] &R__stl = m_vIntData[R__l];; ^; CytStatInfo_dict.C:202:25: error: expected ‘]’ before numeric constant; vector<double>[5] &R__stl = m_vIntData[R__l];; ^; ]; CytStatInfo_dict.C:202:24: warning: structured bindings only available with -std=c++17 or -std=gnu++17; vector<double>[5] &R__stl = m_vI",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12755#issuecomment-1534658132
https://github.com/root-project/root/issues/12762#issuecomment-1535382726:520,Usability,clear,clear,520,The failing part is:; ```; /Users/ktf/src/sw/osx_arm64/AliEn-Runtime/v2-19-le-local1/include/ApMon.h:59:9: note: expanding this definition of '_POSIX_VERSION'; #define _POSIX_VERSION 200101L; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:79:9: note: other definition of '_POSIX_VERSION'; #define _POSIX_VERSION 200112L; ^; ```; One of the two might be coming (indirectly) through a precompiled module (associated with a dictionary). It is not clear why `ApMon.h` does not include `unistd.h` in the first place.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12762#issuecomment-1535382726
https://github.com/root-project/root/issues/12762#issuecomment-1535844840:12,Usability,clear,clear,12,"> It is not clear why `ApMon.h` does not include `unistd.h` in the first place. It actually does, but only later in the the compilation unit. I think this is some weird SunOS heritage (sigh). I am trying to see if I can simply get rid of that part.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12762#issuecomment-1535844840
https://github.com/root-project/root/issues/12762#issuecomment-1535844840:220,Usability,simpl,simply,220,"> It is not clear why `ApMon.h` does not include `unistd.h` in the first place. It actually does, but only later in the the compilation unit. I think this is some weird SunOS heritage (sigh). I am trying to see if I can simply get rid of that part.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12762#issuecomment-1535844840
https://github.com/root-project/root/issues/12770#issuecomment-1926372761:38,Usability,clear,clear,38,"Dear @jan-busa , @lmoneta : it is not clear to me from the conversation if this is still an issue. If not, can this be closed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12770#issuecomment-1926372761
https://github.com/root-project/root/issues/12783#issuecomment-1556797954:137,Deployability,release,release,137,"Thank you very much! Great that is works now!. The fix also needs to be backported to the 6.26 branch, since the problem is also in that release cycle since 6.26.02. I would appreciate if at some point there would be another 6.26 patch release. In RooFit, the small bug fixes were already piling up:; https://github.com/root-project/root/issues/11534. And especially with this issue fixed, a new release could be worthwhile. We know that this bug broke some ATLAS RooFit workspaces already, so this fix has a clear benefit. I'll ask ATLAS whether it helps to have a patch release for 6.26 or if they moved on to 6.28 anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12783#issuecomment-1556797954
https://github.com/root-project/root/issues/12783#issuecomment-1556797954:230,Deployability,patch,patch,230,"Thank you very much! Great that is works now!. The fix also needs to be backported to the 6.26 branch, since the problem is also in that release cycle since 6.26.02. I would appreciate if at some point there would be another 6.26 patch release. In RooFit, the small bug fixes were already piling up:; https://github.com/root-project/root/issues/11534. And especially with this issue fixed, a new release could be worthwhile. We know that this bug broke some ATLAS RooFit workspaces already, so this fix has a clear benefit. I'll ask ATLAS whether it helps to have a patch release for 6.26 or if they moved on to 6.28 anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12783#issuecomment-1556797954
https://github.com/root-project/root/issues/12783#issuecomment-1556797954:236,Deployability,release,release,236,"Thank you very much! Great that is works now!. The fix also needs to be backported to the 6.26 branch, since the problem is also in that release cycle since 6.26.02. I would appreciate if at some point there would be another 6.26 patch release. In RooFit, the small bug fixes were already piling up:; https://github.com/root-project/root/issues/11534. And especially with this issue fixed, a new release could be worthwhile. We know that this bug broke some ATLAS RooFit workspaces already, so this fix has a clear benefit. I'll ask ATLAS whether it helps to have a patch release for 6.26 or if they moved on to 6.28 anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12783#issuecomment-1556797954
https://github.com/root-project/root/issues/12783#issuecomment-1556797954:396,Deployability,release,release,396,"Thank you very much! Great that is works now!. The fix also needs to be backported to the 6.26 branch, since the problem is also in that release cycle since 6.26.02. I would appreciate if at some point there would be another 6.26 patch release. In RooFit, the small bug fixes were already piling up:; https://github.com/root-project/root/issues/11534. And especially with this issue fixed, a new release could be worthwhile. We know that this bug broke some ATLAS RooFit workspaces already, so this fix has a clear benefit. I'll ask ATLAS whether it helps to have a patch release for 6.26 or if they moved on to 6.28 anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12783#issuecomment-1556797954
https://github.com/root-project/root/issues/12783#issuecomment-1556797954:566,Deployability,patch,patch,566,"Thank you very much! Great that is works now!. The fix also needs to be backported to the 6.26 branch, since the problem is also in that release cycle since 6.26.02. I would appreciate if at some point there would be another 6.26 patch release. In RooFit, the small bug fixes were already piling up:; https://github.com/root-project/root/issues/11534. And especially with this issue fixed, a new release could be worthwhile. We know that this bug broke some ATLAS RooFit workspaces already, so this fix has a clear benefit. I'll ask ATLAS whether it helps to have a patch release for 6.26 or if they moved on to 6.28 anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12783#issuecomment-1556797954
https://github.com/root-project/root/issues/12783#issuecomment-1556797954:572,Deployability,release,release,572,"Thank you very much! Great that is works now!. The fix also needs to be backported to the 6.26 branch, since the problem is also in that release cycle since 6.26.02. I would appreciate if at some point there would be another 6.26 patch release. In RooFit, the small bug fixes were already piling up:; https://github.com/root-project/root/issues/11534. And especially with this issue fixed, a new release could be worthwhile. We know that this bug broke some ATLAS RooFit workspaces already, so this fix has a clear benefit. I'll ask ATLAS whether it helps to have a patch release for 6.26 or if they moved on to 6.28 anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12783#issuecomment-1556797954
https://github.com/root-project/root/issues/12783#issuecomment-1556797954:509,Usability,clear,clear,509,"Thank you very much! Great that is works now!. The fix also needs to be backported to the 6.26 branch, since the problem is also in that release cycle since 6.26.02. I would appreciate if at some point there would be another 6.26 patch release. In RooFit, the small bug fixes were already piling up:; https://github.com/root-project/root/issues/11534. And especially with this issue fixed, a new release could be worthwhile. We know that this bug broke some ATLAS RooFit workspaces already, so this fix has a clear benefit. I'll ask ATLAS whether it helps to have a patch release for 6.26 or if they moved on to 6.28 anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12783#issuecomment-1556797954
https://github.com/root-project/root/issues/12787#issuecomment-1585584886:214,Testability,test,tested,214,"@hahnjo Hi, I finally found some time to get this building, the branch now seems to somewhat work. Few things:; - it seems not to break the linux build; - seems to work for now, in whatever simple scenarios I have tested it till now; - the TThread tests crap out saying the _REENTRANT macro is not defined (I think it should be by -pthread which is enabled), probably needs some attention by an expert.; - there is an issue with library unload order vs the thread local dtor calling. Not a dealbreaker but the FreeBSD __cxa_thread_call_dtors is a bit verbose and prints warnings to stderr about that. Also here there is quite some room for experts to look at since there already are mitigations to similar issues in the code. (__cxa_thread_call_dtors: dtr 0x82b2c78f0 from unloaded dso, skipping); - actually a lot more tests fail - what is the general state of the test results on the master branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12787#issuecomment-1585584886
https://github.com/root-project/root/issues/12787#issuecomment-1585584886:248,Testability,test,tests,248,"@hahnjo Hi, I finally found some time to get this building, the branch now seems to somewhat work. Few things:; - it seems not to break the linux build; - seems to work for now, in whatever simple scenarios I have tested it till now; - the TThread tests crap out saying the _REENTRANT macro is not defined (I think it should be by -pthread which is enabled), probably needs some attention by an expert.; - there is an issue with library unload order vs the thread local dtor calling. Not a dealbreaker but the FreeBSD __cxa_thread_call_dtors is a bit verbose and prints warnings to stderr about that. Also here there is quite some room for experts to look at since there already are mitigations to similar issues in the code. (__cxa_thread_call_dtors: dtr 0x82b2c78f0 from unloaded dso, skipping); - actually a lot more tests fail - what is the general state of the test results on the master branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12787#issuecomment-1585584886
https://github.com/root-project/root/issues/12787#issuecomment-1585584886:820,Testability,test,tests,820,"@hahnjo Hi, I finally found some time to get this building, the branch now seems to somewhat work. Few things:; - it seems not to break the linux build; - seems to work for now, in whatever simple scenarios I have tested it till now; - the TThread tests crap out saying the _REENTRANT macro is not defined (I think it should be by -pthread which is enabled), probably needs some attention by an expert.; - there is an issue with library unload order vs the thread local dtor calling. Not a dealbreaker but the FreeBSD __cxa_thread_call_dtors is a bit verbose and prints warnings to stderr about that. Also here there is quite some room for experts to look at since there already are mitigations to similar issues in the code. (__cxa_thread_call_dtors: dtr 0x82b2c78f0 from unloaded dso, skipping); - actually a lot more tests fail - what is the general state of the test results on the master branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12787#issuecomment-1585584886
https://github.com/root-project/root/issues/12787#issuecomment-1585584886:866,Testability,test,test,866,"@hahnjo Hi, I finally found some time to get this building, the branch now seems to somewhat work. Few things:; - it seems not to break the linux build; - seems to work for now, in whatever simple scenarios I have tested it till now; - the TThread tests crap out saying the _REENTRANT macro is not defined (I think it should be by -pthread which is enabled), probably needs some attention by an expert.; - there is an issue with library unload order vs the thread local dtor calling. Not a dealbreaker but the FreeBSD __cxa_thread_call_dtors is a bit verbose and prints warnings to stderr about that. Also here there is quite some room for experts to look at since there already are mitigations to similar issues in the code. (__cxa_thread_call_dtors: dtr 0x82b2c78f0 from unloaded dso, skipping); - actually a lot more tests fail - what is the general state of the test results on the master branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12787#issuecomment-1585584886
https://github.com/root-project/root/issues/12787#issuecomment-1585584886:190,Usability,simpl,simple,190,"@hahnjo Hi, I finally found some time to get this building, the branch now seems to somewhat work. Few things:; - it seems not to break the linux build; - seems to work for now, in whatever simple scenarios I have tested it till now; - the TThread tests crap out saying the _REENTRANT macro is not defined (I think it should be by -pthread which is enabled), probably needs some attention by an expert.; - there is an issue with library unload order vs the thread local dtor calling. Not a dealbreaker but the FreeBSD __cxa_thread_call_dtors is a bit verbose and prints warnings to stderr about that. Also here there is quite some room for experts to look at since there already are mitigations to similar issues in the code. (__cxa_thread_call_dtors: dtr 0x82b2c78f0 from unloaded dso, skipping); - actually a lot more tests fail - what is the general state of the test results on the master branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12787#issuecomment-1585584886
https://github.com/root-project/root/issues/12840#issuecomment-1570855626:379,Availability,error,error,379,"> However, ROOT accepts the code without complaint.; > That actually is the issue. In your original post, you mention that the behaviour you expect to see is that both parameters should be usable. Implementing this would mean openly violating C++ standard (even further than CINT already did at the time of ROOT 5.34). On the other hand, a proper fix would be raising a compiler error. I am unsure whether providing such a fix for CINT is what we want, cling already works properly and it's just a matter of updating the ROOT version. I will leave to @Axel-Naumann the final say on this. In any case, isn't it possible for you to declare functions on your application side that do not have a trailing comma?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840#issuecomment-1570855626
https://github.com/root-project/root/issues/12840#issuecomment-1570855626:189,Usability,usab,usable,189,"> However, ROOT accepts the code without complaint.; > That actually is the issue. In your original post, you mention that the behaviour you expect to see is that both parameters should be usable. Implementing this would mean openly violating C++ standard (even further than CINT already did at the time of ROOT 5.34). On the other hand, a proper fix would be raising a compiler error. I am unsure whether providing such a fix for CINT is what we want, cling already works properly and it's just a matter of updating the ROOT version. I will leave to @Axel-Naumann the final say on this. In any case, isn't it possible for you to declare functions on your application side that do not have a trailing comma?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840#issuecomment-1570855626
https://github.com/root-project/root/issues/12851#issuecomment-1558888571:230,Availability,avail,available,230,"The code inlining mechanism uses the doxygen command [`\include`](https://www.doxygen.nl/manual/commands.html#cmdinclude). This command does not allow to specify the type of code to be inlined (C++ or python) the only two options available are `doc` and `lineno`. I guess the ""code"" is considered as C/C++ that's why the highlighting is not correct for that python example. I'll try to find a solution. The simplest would have been an option `.py` like for the `\code` doxygen command (see help). I tried but it does not work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12851#issuecomment-1558888571
https://github.com/root-project/root/issues/12851#issuecomment-1558888571:407,Usability,simpl,simplest,407,"The code inlining mechanism uses the doxygen command [`\include`](https://www.doxygen.nl/manual/commands.html#cmdinclude). This command does not allow to specify the type of code to be inlined (C++ or python) the only two options available are `doc` and `lineno`. I guess the ""code"" is considered as C/C++ that's why the highlighting is not correct for that python example. I'll try to find a solution. The simplest would have been an option `.py` like for the `\code` doxygen command (see help). I tried but it does not work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12851#issuecomment-1558888571
https://github.com/root-project/root/issues/12940#issuecomment-1796837979:223,Usability,clear,clear,223,"Hi @bendavid, with this PR we are officially not supporting to build ROOT with these minuit omp or mpi build options anymore:; * https://github.com/root-project/root/pull/12970. I'll close this issue here, because not it's clear that RooFit can't be used with Minuit2 multithreading. You are right that it's not unreasonable to expect that Minuit2 multithreading can be enabled/disabled at runtime, but this is another issue. Given the limited developer time we have, I think we need a better motivation than ""we realized it would be nice to have"" to implement this. If you have any usecase for Minuit 2 multithreading in ROOT that is covered by these flags, then please go ahead and open a new issue whenever :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940#issuecomment-1796837979
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:7539,Deployability,install,install,7539,"rc/TBufferFile.cxx:3580; #29 0x00007ffff76f1b94 in TBufferFile::ReadClassBuffer (this=0x7fffffffd9d0, cl=0x555558490b70, pointer=<optimized out>, onFileClass=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3499; #30 0x00007ffff778a22e in TClass::Streamer (onfile_class=0x0, b=..., obj=0x55555855a0c0, this=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #31 TKey::ReadObjectAny (this=0x5555569f77a0, expectedClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TKey.cxx:1108; #32 0x00007ffff774aa1b in TDirectoryFile::GetObjectChecked (this=0x555556a15ce0, namecycle=<optimized out>, expectedClass=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/io/io/src/TDirectoryFile.cxx:1111; #33 0x00005555555551f6 in TDirectory::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectory.h:207; #34 TDirectoryFile::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectoryFile.h:84; #35 repro () at repro.C:10; ```. So the crash is here (https://github.com/root-project/root/blob/master/io/io/src/TBufferFile.cxx#L245):; ```c++; if (nwh == 255) {; *this >> nbig;; obj->resize(nbig,'\0');; ReadFastArray((char*)obj->data(),nbig);; }; ```; I have put some debug printouts. When it crashes, `nbig` is `-1`, and resize() expects and unsigned int. The -1 becomes a very large unsigned number that exceeds the maximum allowed length of a `std::string`. To me that looks more like a problem with IO than with HistFactory (the memory layout of the `HistFactory::Measurement` classes hasn't changed from 6.26 to 6.28. Is that something that makes sense to you, @pcanal? What does this `nbig` stand for, and in which circumstances can this be `-1`?. Maybe in the best ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:7738,Deployability,install,install,7738,"fffffd9d0, cl=0x555558490b70, pointer=<optimized out>, onFileClass=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3499; #30 0x00007ffff778a22e in TClass::Streamer (onfile_class=0x0, b=..., obj=0x55555855a0c0, this=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #31 TKey::ReadObjectAny (this=0x5555569f77a0, expectedClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TKey.cxx:1108; #32 0x00007ffff774aa1b in TDirectoryFile::GetObjectChecked (this=0x555556a15ce0, namecycle=<optimized out>, expectedClass=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/io/io/src/TDirectoryFile.cxx:1111; #33 0x00005555555551f6 in TDirectory::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectory.h:207; #34 TDirectoryFile::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectoryFile.h:84; #35 repro () at repro.C:10; ```. So the crash is here (https://github.com/root-project/root/blob/master/io/io/src/TBufferFile.cxx#L245):; ```c++; if (nwh == 255) {; *this >> nbig;; obj->resize(nbig,'\0');; ReadFastArray((char*)obj->data(),nbig);; }; ```; I have put some debug printouts. When it crashes, `nbig` is `-1`, and resize() expects and unsigned int. The -1 becomes a very large unsigned number that exceeds the maximum allowed length of a `std::string`. To me that looks more like a problem with IO than with HistFactory (the memory layout of the `HistFactory::Measurement` classes hasn't changed from 6.26 to 6.28. Is that something that makes sense to you, @pcanal? What does this `nbig` stand for, and in which circumstances can this be `-1`?. Maybe in the best case, the fix would just be adding a simple `if(nbig >= 0)` before the call to `resize()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:5040,Modifiability,config,config,5040," 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740: 0x55555862ab20,; compinfo=compinfo@entry=0x55555862ab08, first=first@entry=0, last=last@entry=1, narr=2, eoffset=0, arrayMode=3); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #22 0x00007ffff77f92ac in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555556a3aaa0, loopconfig=<optimized out>,; config=0x55555862aaf0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1883; #23 0x00007ffff76e978c in TStreamerInfoActions::TConfiguredAction::operator() (loopconf=0x55555862a9e0, end_collection=0x555556a3aaa0,; start_collection=0x555556a3a850, buffer=..., this=0x55555862a9b0) at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:131; #24 TBufferFile::ApplySequence (this=0x7fffffffd9d0, sequence=..., start_collection=0x555556a3a850, end_collection=0x555556a3aaa0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3646; #25 0x00007ffff781f65e in TStreamerInfoActions::ReadSTLMemberWiseSameClass (buf=..., addr=<optimized out>, conf=conf@entry=0x555558626dd0,; vers=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1155; #26 0x00007ffff781f896 in TStreamerInfoActions::ReadSTL<&TStreamerInfoActions::ReadSTLMemberWiseSameClass, &TStreamerInfoActions::ReadSTLObjectWiseFastArray>;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:800,Performance,optimiz,optimized,800,"Hi, thanks for reporting this!. It is indeed a bug that you can't read the 6.26 workspace in 6.28. The other way around is expected, with RooFit you can't read back a RooWorkspace with any ROOT version that is older that the version it was created with. When I run the reproducer in the debugger, I get this stack trace:; ```; Program received signal SIGABRT, Aborted.; 0x00007ffff4a9f26c in ?? () from /usr/lib/libc.so.6; (gdb) bt; #0 0x00007ffff4a9f26c in ?? () from /usr/lib/libc.so.6; #1 0x00007ffff4a4fa08 in raise () from /usr/lib/libc.so.6; #2 0x00007ffff4a38538 in abort () from /usr/lib/libc.so.6; #3 0x00007ffff4c9ca6f in __gnu_cxx::__verbose_terminate_handler () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #4 0x00007ffff4cb011c in __cxxabiv1::__terminate (handler=<optimized out>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00007ffff4cb0189 in std::terminate () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00007ffff4cb03ed in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:1052,Performance,optimiz,optimized,1052,"ound is expected, with RooFit you can't read back a RooWorkspace with any ROOT version that is older that the version it was created with. When I run the reproducer in the debugger, I get this stack trace:; ```; Program received signal SIGABRT, Aborted.; 0x00007ffff4a9f26c in ?? () from /usr/lib/libc.so.6; (gdb) bt; #0 0x00007ffff4a9f26c in ?? () from /usr/lib/libc.so.6; #1 0x00007ffff4a4fa08 in raise () from /usr/lib/libc.so.6; #2 0x00007ffff4a38538 in abort () from /usr/lib/libc.so.6; #3 0x00007ffff4c9ca6f in __gnu_cxx::__verbose_terminate_handler () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #4 0x00007ffff4cb011c in __cxxabiv1::__terminate (handler=<optimized out>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00007ffff4cb0189 in std::terminate () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00007ffff4cb03ed in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>);",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:1557,Performance,optimiz,optimized,1557,"so.6; #2 0x00007ffff4a38538 in abort () from /usr/lib/libc.so.6; #3 0x00007ffff4c9ca6f in __gnu_cxx::__verbose_terminate_handler () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #4 0x00007ffff4cb011c in __cxxabiv1::__terminate (handler=<optimized out>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00007ffff4cb0189 in std::terminate () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00007ffff4cb03ed in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:1580,Performance,optimiz,optimized,1580,"so.6; #2 0x00007ffff4a38538 in abort () from /usr/lib/libc.so.6; #3 0x00007ffff4c9ca6f in __gnu_cxx::__verbose_terminate_handler () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #4 0x00007ffff4cb011c in __cxxabiv1::__terminate (handler=<optimized out>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00007ffff4cb0189 in std::terminate () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00007ffff4cb03ed in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:1602,Performance,optimiz,optimized,1602,"so.6; #2 0x00007ffff4a38538 in abort () from /usr/lib/libc.so.6; #3 0x00007ffff4c9ca6f in __gnu_cxx::__verbose_terminate_handler () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #4 0x00007ffff4cb011c in __cxxabiv1::__terminate (handler=<optimized out>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00007ffff4cb0189 in std::terminate () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00007ffff4cb03ed in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:1624,Performance,optimiz,optimized,1624,"so.6; #2 0x00007ffff4a38538 in abort () from /usr/lib/libc.so.6; #3 0x00007ffff4c9ca6f in __gnu_cxx::__verbose_terminate_handler () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #4 0x00007ffff4cb011c in __cxxabiv1::__terminate (handler=<optimized out>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00007ffff4cb0189 in std::terminate () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00007ffff4cb03ed in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:1797,Performance,optimiz,optimized,1797,"zed out>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00007ffff4cb0189 in std::terminate () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00007ffff4cb03ed in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:1819,Performance,optimiz,optimized,1819,"zed out>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00007ffff4cb0189 in std::terminate () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00007ffff4cb03ed in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:1842,Performance,optimiz,optimized,1842,"zed out>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00007ffff4cb0189 in std::terminate () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00007ffff4cb03ed in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:1866,Performance,optimiz,optimized,1866,"zed out>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00007ffff4cb0189 in std::terminate () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00007ffff4cb03ed in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:1888,Performance,optimiz,optimized,1888,"zed out>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00007ffff4cb0189 in std::terminate () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00007ffff4cb03ed in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:2056,Performance,optimiz,optimized,2056,"w (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:2077,Performance,optimiz,optimized,2077,"w (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:2099,Performance,optimiz,optimized,2099,"w (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:2267,Performance,optimiz,optimized,2267,"07ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:2288,Performance,optimiz,optimized,2288,"07ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:2310,Performance,optimiz,optimized,2310,"07ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:2605,Performance,optimiz,optimized,2605,"e/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<opti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:2777,Performance,optimiz,optimized,2777,"ed out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollection",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:2815,Performance,optimiz,optimized,2815,"ed out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollection",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:2841,Performance,optimiz,optimized,2841,"ed out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.h:1489; #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize (__c=<optimized out>, __n=<optimized out>, this=<optimized out>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollection",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:3313,Performance,optimiz,optimized,3313,"ut>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:3338,Performance,optimiz,optimized,3338,"ut>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:3358,Performance,optimiz,optimized,3358,"ut>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:3380,Performance,optimiz,optimized,3380,"ut>); at /usr/include/c++/13.1.1/bits/basic_string.tcc:401; #12 TBufferFile::ReadStdString (this=0x7fffffffd9d0, obj=0x7fffa8bd2d68) at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:3410,Performance,optimiz,optimized,3410," at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:247; #13 0x00007ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimiz",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:3556,Performance,optimiz,optimized,3556,"07ffff76eb1f1 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555555cc34b0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuff",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:3585,Performance,optimiz,optimized,3585,"paces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:3605,Performance,optimiz,optimized,3605,"paces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:3630,Performance,optimiz,optimized,3630,"paces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:3650,Performance,optimiz,optimized,3650,"paces/master/root/src/root/core/meta/inc/TClass.h:610; #14 TBufferFile::ReadFastArray (this=0x7fffffffd9d0, start=<optimized out>, cl=0x555555cc34b0, n=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1609; #15 0x00007ffff7931e28 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555558509890, b=..., arr=..., compinfo=0x5555585140d0,; first=first@entry=0, last=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:4110,Performance,optimiz,optimized,4110,"t=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740: 0x55555862ab20,; compinfo=compinfo@entry=0x55555862ab08, first=first@entry=0, last=last@entry=1, narr=2, eoffset=0, arrayMode=3); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #22 0x00007ffff77f92ac in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555556a3aaa0, loopconfig=<optimized out>,; config=0x55555862aaf0) at /home/rembserj/spaces/master/root/src/root/io/io/src",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:4135,Performance,optimiz,optimized,4135,"t=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740: 0x55555862ab20,; compinfo=compinfo@entry=0x55555862ab08, first=first@entry=0, last=last@entry=1, narr=2, eoffset=0, arrayMode=3); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #22 0x00007ffff77f92ac in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555556a3aaa0, loopconfig=<optimized out>,; config=0x55555862aaf0) at /home/rembserj/spaces/master/root/src/root/io/io/src",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:4155,Performance,optimiz,optimized,4155,"t=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740: 0x55555862ab20,; compinfo=compinfo@entry=0x55555862ab08, first=first@entry=0, last=last@entry=1, narr=2, eoffset=0, arrayMode=3); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #22 0x00007ffff77f92ac in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555556a3aaa0, loopconfig=<optimized out>,; config=0x55555862aaf0) at /home/rembserj/spaces/master/root/src/root/io/io/src",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:4177,Performance,optimiz,optimized,4177,"t=4, narr=16777216, eoffset=0, arrayMode=1); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1297; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740: 0x55555862ab20,; compinfo=compinfo@entry=0x55555862ab08, first=first@entry=0, last=last@entry=1, narr=2, eoffset=0, arrayMode=3); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #22 0x00007ffff77f92ac in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555556a3aaa0, loopconfig=<optimized out>,; config=0x55555862aaf0) at /home/rembserj/spaces/master/root/src/root/io/io/src",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:4207,Performance,optimiz,optimized,4207,"7; #16 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740: 0x55555862ab20,; compinfo=compinfo@entry=0x55555862ab08, first=first@entry=0, last=last@entry=1, narr=2, eoffset=0, arrayMode=3); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #22 0x00007ffff77f92ac in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555556a3aaa0, loopconfig=<optimized out>,; config=0x55555862aaf0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1883; #23 0x00007ffff76e978c in TStreamerInfoActions::TConfiguredAction::operator() (loopconf=0x55555862a9e",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:4353,Performance,optimiz,optimized,4353,"<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740: 0x55555862ab20,; compinfo=compinfo@entry=0x55555862ab08, first=first@entry=0, last=last@entry=1, narr=2, eoffset=0, arrayMode=3); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #22 0x00007ffff77f92ac in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555556a3aaa0, loopconfig=<optimized out>,; config=0x55555862aaf0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1883; #23 0x00007ffff76e978c in TStreamerInfoActions::TConfiguredAction::operator() (loopconf=0x55555862a9e0, end_collection=0x555556a3aaa0,; start_collection=0x555556a3a850, buffer=..., this=0x",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:4382,Performance,optimiz,optimized,4382,"oot/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740: 0x55555862ab20,; compinfo=compinfo@entry=0x55555862ab08, first=first@entry=0, last=last@entry=1, narr=2, eoffset=0, arrayMode=3); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #22 0x00007ffff77f92ac in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555556a3aaa0, loopconfig=<optimized out>,; config=0x55555862aaf0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1883; #23 0x00007ffff76e978c in TStreamerInfoActions::TConfiguredAction::operator() (loopconf=0x55555862a9e0, end_collection=0x555556a3aaa0,; start_collection=0x555556a3a850, buffer=..., this=0x55555862a9b0) at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:131; #24 TBufferFile::ApplyS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:4402,Performance,optimiz,optimized,4402,"oot/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740: 0x55555862ab20,; compinfo=compinfo@entry=0x55555862ab08, first=first@entry=0, last=last@entry=1, narr=2, eoffset=0, arrayMode=3); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #22 0x00007ffff77f92ac in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555556a3aaa0, loopconfig=<optimized out>,; config=0x55555862aaf0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1883; #23 0x00007ffff76e978c in TStreamerInfoActions::TConfiguredAction::operator() (loopconf=0x55555862a9e0, end_collection=0x555556a3aaa0,; start_collection=0x555556a3a850, buffer=..., this=0x55555862a9b0) at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:131; #24 TBufferFile::ApplyS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:4427,Performance,optimiz,optimized,4427,"oot/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740: 0x55555862ab20,; compinfo=compinfo@entry=0x55555862ab08, first=first@entry=0, last=last@entry=1, narr=2, eoffset=0, arrayMode=3); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #22 0x00007ffff77f92ac in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555556a3aaa0, loopconfig=<optimized out>,; config=0x55555862aaf0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1883; #23 0x00007ffff76e978c in TStreamerInfoActions::TConfiguredAction::operator() (loopconf=0x55555862a9e0, end_collection=0x555556a3aaa0,; start_collection=0x555556a3a850, buffer=..., this=0x55555862a9b0) at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:131; #24 TBufferFile::ApplyS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:4447,Performance,optimiz,optimized,4447,"oot/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #17 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #18 0x00007ffff7931b46 in TStreamerInfo::ReadBuffer<TVirtualCollectionProxy> (this=0x555556c6f630, b=..., arr=..., compinfo=0x55555864f9a0,; first=first@entry=0, last=16, narr=2, eoffset=0, arrayMode=1) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #19 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740: 0x55555862ab20,; compinfo=compinfo@entry=0x55555862ab08, first=first@entry=0, last=last@entry=1, narr=2, eoffset=0, arrayMode=3); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #22 0x00007ffff77f92ac in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555556a3aaa0, loopconfig=<optimized out>,; config=0x55555862aaf0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1883; #23 0x00007ffff76e978c in TStreamerInfoActions::TConfiguredAction::operator() (loopconf=0x55555862a9e0, end_collection=0x555556a3aaa0,; start_collection=0x555556a3a850, buffer=..., this=0x55555862a9b0) at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:131; #24 TBufferFile::ApplyS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:4975,Performance,optimiz,optimized,4975," 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740: 0x55555862ab20,; compinfo=compinfo@entry=0x55555862ab08, first=first@entry=0, last=last@entry=1, narr=2, eoffset=0, arrayMode=3); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #22 0x00007ffff77f92ac in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555556a3aaa0, loopconfig=<optimized out>,; config=0x55555862aaf0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1883; #23 0x00007ffff76e978c in TStreamerInfoActions::TConfiguredAction::operator() (loopconf=0x55555862a9e0, end_collection=0x555556a3aaa0,; start_collection=0x555556a3a850, buffer=..., this=0x55555862a9b0) at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:131; #24 TBufferFile::ApplySequence (this=0x7fffffffd9d0, sequence=..., start_collection=0x555556a3a850, end_collection=0x555556a3aaa0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3646; #25 0x00007ffff781f65e in TStreamerInfoActions::ReadSTLMemberWiseSameClass (buf=..., addr=<optimized out>, conf=conf@entry=0x555558626dd0,; vers=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1155; #26 0x00007ffff781f896 in TStreamerInfoActions::ReadSTL<&TStreamerInfoActions::ReadSTLMemberWiseSameClass, &TStreamerInfoActions::ReadSTLObjectWiseFastArray>;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:5023,Performance,optimiz,optimized,5023," 0x00007ffff787d2bd in TStreamerInfo::ReadBufferSTL (v7=<optimized out>, eoffset=<optimized out>, nc=<optimized out>, cont=<optimized out>, b=...,; this=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1741; #20 TStreamerInfo::ReadBufferSTL (this=<optimized out>, b=..., cont=<optimized out>, nc=<optimized out>, eoffset=<optimized out>, v7=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1737; #21 0x00007ffff793f598 in TStreamerInfo::ReadBuffer<char**> (this=0x555558602630, b=..., arr=@0x7fffffffd740: 0x55555862ab20,; compinfo=compinfo@entry=0x55555862ab08, first=first@entry=0, last=last@entry=1, narr=2, eoffset=0, arrayMode=3); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #22 0x00007ffff77f92ac in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555556a3aaa0, loopconfig=<optimized out>,; config=0x55555862aaf0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1883; #23 0x00007ffff76e978c in TStreamerInfoActions::TConfiguredAction::operator() (loopconf=0x55555862a9e0, end_collection=0x555556a3aaa0,; start_collection=0x555556a3a850, buffer=..., this=0x55555862a9b0) at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:131; #24 TBufferFile::ApplySequence (this=0x7fffffffd9d0, sequence=..., start_collection=0x555556a3a850, end_collection=0x555556a3aaa0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3646; #25 0x00007ffff781f65e in TStreamerInfoActions::ReadSTLMemberWiseSameClass (buf=..., addr=<optimized out>, conf=conf@entry=0x555558626dd0,; vers=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1155; #26 0x00007ffff781f896 in TStreamerInfoActions::ReadSTL<&TStreamerInfoActions::ReadSTLMemberWiseSameClass, &TStreamerInfoActions::ReadSTLObjectWiseFastArray>;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:5737,Performance,optimiz,optimized,5737,"serj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #22 0x00007ffff77f92ac in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555556a3aaa0, loopconfig=<optimized out>,; config=0x55555862aaf0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1883; #23 0x00007ffff76e978c in TStreamerInfoActions::TConfiguredAction::operator() (loopconf=0x55555862a9e0, end_collection=0x555556a3aaa0,; start_collection=0x555556a3a850, buffer=..., this=0x55555862a9b0) at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:131; #24 TBufferFile::ApplySequence (this=0x7fffffffd9d0, sequence=..., start_collection=0x555556a3a850, end_collection=0x555556a3aaa0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3646; #25 0x00007ffff781f65e in TStreamerInfoActions::ReadSTLMemberWiseSameClass (buf=..., addr=<optimized out>, conf=conf@entry=0x555558626dd0,; vers=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1155; #26 0x00007ffff781f896 in TStreamerInfoActions::ReadSTL<&TStreamerInfoActions::ReadSTLMemberWiseSameClass, &TStreamerInfoActions::ReadSTLObjectWiseFastArray>; (buf=..., addr=0x55555855a0c0, conf=0x555558626dd0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1405; #27 0x00007ffff76e9c05 in TStreamerInfoActions::TConfiguredAction::operator() (object=0x55555855a0c0, buffer=..., this=0x55555812a1b0); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #28 TBufferFile::ApplySequence (this=0x7fffffffd9d0, sequence=..., obj=0x55555855a0c0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3580; #29 0x00007ffff76f1b94 in TBufferFile::ReadClassBuffer (this=0x7fffffffd9d0, cl=0x555558490b70, pointer=<optimized out>, onFileClass=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3499;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:5792,Performance,optimiz,optimized,5792,"serj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1274; #22 0x00007ffff77f92ac in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555556a3aaa0, loopconfig=<optimized out>,; config=0x55555862aaf0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1883; #23 0x00007ffff76e978c in TStreamerInfoActions::TConfiguredAction::operator() (loopconf=0x55555862a9e0, end_collection=0x555556a3aaa0,; start_collection=0x555556a3a850, buffer=..., this=0x55555862a9b0) at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:131; #24 TBufferFile::ApplySequence (this=0x7fffffffd9d0, sequence=..., start_collection=0x555556a3a850, end_collection=0x555556a3aaa0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3646; #25 0x00007ffff781f65e in TStreamerInfoActions::ReadSTLMemberWiseSameClass (buf=..., addr=<optimized out>, conf=conf@entry=0x555558626dd0,; vers=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1155; #26 0x00007ffff781f896 in TStreamerInfoActions::ReadSTL<&TStreamerInfoActions::ReadSTLMemberWiseSameClass, &TStreamerInfoActions::ReadSTLObjectWiseFastArray>; (buf=..., addr=0x55555855a0c0, conf=0x555558626dd0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1405; #27 0x00007ffff76e9c05 in TStreamerInfoActions::TConfiguredAction::operator() (object=0x55555855a0c0, buffer=..., this=0x55555812a1b0); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #28 TBufferFile::ApplySequence (this=0x7fffffffd9d0, sequence=..., obj=0x55555855a0c0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3580; #29 0x00007ffff76f1b94 in TBufferFile::ReadClassBuffer (this=0x7fffffffd9d0, cl=0x555558490b70, pointer=<optimized out>, onFileClass=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3499;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:6684,Performance,optimiz,optimized,6684,"foActions::ReadSTLMemberWiseSameClass (buf=..., addr=<optimized out>, conf=conf@entry=0x555558626dd0,; vers=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1155; #26 0x00007ffff781f896 in TStreamerInfoActions::ReadSTL<&TStreamerInfoActions::ReadSTLMemberWiseSameClass, &TStreamerInfoActions::ReadSTLObjectWiseFastArray>; (buf=..., addr=0x55555855a0c0, conf=0x555558626dd0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1405; #27 0x00007ffff76e9c05 in TStreamerInfoActions::TConfiguredAction::operator() (object=0x55555855a0c0, buffer=..., this=0x55555812a1b0); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #28 TBufferFile::ApplySequence (this=0x7fffffffd9d0, sequence=..., obj=0x55555855a0c0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3580; #29 0x00007ffff76f1b94 in TBufferFile::ReadClassBuffer (this=0x7fffffffd9d0, cl=0x555558490b70, pointer=<optimized out>, onFileClass=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3499; #30 0x00007ffff778a22e in TClass::Streamer (onfile_class=0x0, b=..., obj=0x55555855a0c0, this=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #31 TKey::ReadObjectAny (this=0x5555569f77a0, expectedClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TKey.cxx:1108; #32 0x00007ffff774aa1b in TDirectoryFile::GetObjectChecked (this=0x555556a15ce0, namecycle=<optimized out>, expectedClass=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/io/io/src/TDirectoryFile.cxx:1111; #33 0x00005555555551f6 in TDirectory::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectory.h:207; #34 TDirectoryFile::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:6713,Performance,optimiz,optimized,6713,"foActions::ReadSTLMemberWiseSameClass (buf=..., addr=<optimized out>, conf=conf@entry=0x555558626dd0,; vers=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1155; #26 0x00007ffff781f896 in TStreamerInfoActions::ReadSTL<&TStreamerInfoActions::ReadSTLMemberWiseSameClass, &TStreamerInfoActions::ReadSTLObjectWiseFastArray>; (buf=..., addr=0x55555855a0c0, conf=0x555558626dd0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1405; #27 0x00007ffff76e9c05 in TStreamerInfoActions::TConfiguredAction::operator() (object=0x55555855a0c0, buffer=..., this=0x55555812a1b0); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #28 TBufferFile::ApplySequence (this=0x7fffffffd9d0, sequence=..., obj=0x55555855a0c0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3580; #29 0x00007ffff76f1b94 in TBufferFile::ReadClassBuffer (this=0x7fffffffd9d0, cl=0x555558490b70, pointer=<optimized out>, onFileClass=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3499; #30 0x00007ffff778a22e in TClass::Streamer (onfile_class=0x0, b=..., obj=0x55555855a0c0, this=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #31 TKey::ReadObjectAny (this=0x5555569f77a0, expectedClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TKey.cxx:1108; #32 0x00007ffff774aa1b in TDirectoryFile::GetObjectChecked (this=0x555556a15ce0, namecycle=<optimized out>, expectedClass=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/io/io/src/TDirectoryFile.cxx:1111; #33 0x00005555555551f6 in TDirectory::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectory.h:207; #34 TDirectoryFile::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:7054,Performance,optimiz,optimized,7054,"=..., addr=0x55555855a0c0, conf=0x555558626dd0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1405; #27 0x00007ffff76e9c05 in TStreamerInfoActions::TConfiguredAction::operator() (object=0x55555855a0c0, buffer=..., this=0x55555812a1b0); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #28 TBufferFile::ApplySequence (this=0x7fffffffd9d0, sequence=..., obj=0x55555855a0c0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3580; #29 0x00007ffff76f1b94 in TBufferFile::ReadClassBuffer (this=0x7fffffffd9d0, cl=0x555558490b70, pointer=<optimized out>, onFileClass=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3499; #30 0x00007ffff778a22e in TClass::Streamer (onfile_class=0x0, b=..., obj=0x55555855a0c0, this=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #31 TKey::ReadObjectAny (this=0x5555569f77a0, expectedClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TKey.cxx:1108; #32 0x00007ffff774aa1b in TDirectoryFile::GetObjectChecked (this=0x555556a15ce0, namecycle=<optimized out>, expectedClass=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/io/io/src/TDirectoryFile.cxx:1111; #33 0x00005555555551f6 in TDirectory::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectory.h:207; #34 TDirectoryFile::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectoryFile.h:84; #35 repro () at repro.C:10; ```. So the crash is here (https://github.com/root-project/root/blob/master/io/io/src/TBufferFile.cxx#L245):; ```c++; if (nwh == 255) {; *this >> nbig;; obj->resize(nbig,'\0');; ReadFastArray((char*)obj->data(),nbig);; }; ```; I have put some debug pr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:7233,Performance,optimiz,optimized,7233,"TConfiguredAction::operator() (object=0x55555855a0c0, buffer=..., this=0x55555812a1b0); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #28 TBufferFile::ApplySequence (this=0x7fffffffd9d0, sequence=..., obj=0x55555855a0c0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3580; #29 0x00007ffff76f1b94 in TBufferFile::ReadClassBuffer (this=0x7fffffffd9d0, cl=0x555558490b70, pointer=<optimized out>, onFileClass=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3499; #30 0x00007ffff778a22e in TClass::Streamer (onfile_class=0x0, b=..., obj=0x55555855a0c0, this=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #31 TKey::ReadObjectAny (this=0x5555569f77a0, expectedClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TKey.cxx:1108; #32 0x00007ffff774aa1b in TDirectoryFile::GetObjectChecked (this=0x555556a15ce0, namecycle=<optimized out>, expectedClass=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/io/io/src/TDirectoryFile.cxx:1111; #33 0x00005555555551f6 in TDirectory::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectory.h:207; #34 TDirectoryFile::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectoryFile.h:84; #35 repro () at repro.C:10; ```. So the crash is here (https://github.com/root-project/root/blob/master/io/io/src/TBufferFile.cxx#L245):; ```c++; if (nwh == 255) {; *this >> nbig;; obj->resize(nbig,'\0');; ReadFastArray((char*)obj->data(),nbig);; }; ```; I have put some debug printouts. When it crashes, `nbig` is `-1`, and resize() expects and unsigned int. The -1 becomes a very large unsigned number that exceeds the maximum allowed length of a `std::string",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:7472,Performance,optimiz,optimized,7472,"(this=0x7fffffffd9d0, sequence=..., obj=0x55555855a0c0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3580; #29 0x00007ffff76f1b94 in TBufferFile::ReadClassBuffer (this=0x7fffffffd9d0, cl=0x555558490b70, pointer=<optimized out>, onFileClass=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3499; #30 0x00007ffff778a22e in TClass::Streamer (onfile_class=0x0, b=..., obj=0x55555855a0c0, this=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #31 TKey::ReadObjectAny (this=0x5555569f77a0, expectedClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TKey.cxx:1108; #32 0x00007ffff774aa1b in TDirectoryFile::GetObjectChecked (this=0x555556a15ce0, namecycle=<optimized out>, expectedClass=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/io/io/src/TDirectoryFile.cxx:1111; #33 0x00005555555551f6 in TDirectory::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectory.h:207; #34 TDirectoryFile::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectoryFile.h:84; #35 repro () at repro.C:10; ```. So the crash is here (https://github.com/root-project/root/blob/master/io/io/src/TBufferFile.cxx#L245):; ```c++; if (nwh == 255) {; *this >> nbig;; obj->resize(nbig,'\0');; ReadFastArray((char*)obj->data(),nbig);; }; ```; I have put some debug printouts. When it crashes, `nbig` is `-1`, and resize() expects and unsigned int. The -1 becomes a very large unsigned number that exceeds the maximum allowed length of a `std::string`. To me that looks more like a problem with IO than with HistFactory (the memory layout of the `HistFactory::Measurement` classes hasn't changed from 6.26 to 6.28. Is that something that makes sense to ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:7671,Performance,optimiz,optimized,7671,"fffffd9d0, cl=0x555558490b70, pointer=<optimized out>, onFileClass=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3499; #30 0x00007ffff778a22e in TClass::Streamer (onfile_class=0x0, b=..., obj=0x55555855a0c0, this=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #31 TKey::ReadObjectAny (this=0x5555569f77a0, expectedClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TKey.cxx:1108; #32 0x00007ffff774aa1b in TDirectoryFile::GetObjectChecked (this=0x555556a15ce0, namecycle=<optimized out>, expectedClass=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/io/io/src/TDirectoryFile.cxx:1111; #33 0x00005555555551f6 in TDirectory::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectory.h:207; #34 TDirectoryFile::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectoryFile.h:84; #35 repro () at repro.C:10; ```. So the crash is here (https://github.com/root-project/root/blob/master/io/io/src/TBufferFile.cxx#L245):; ```c++; if (nwh == 255) {; *this >> nbig;; obj->resize(nbig,'\0');; ReadFastArray((char*)obj->data(),nbig);; }; ```; I have put some debug printouts. When it crashes, `nbig` is `-1`, and resize() expects and unsigned int. The -1 becomes a very large unsigned number that exceeds the maximum allowed length of a `std::string`. To me that looks more like a problem with IO than with HistFactory (the memory layout of the `HistFactory::Measurement` classes hasn't changed from 6.26 to 6.28. Is that something that makes sense to you, @pcanal? What does this `nbig` stand for, and in which circumstances can this be `-1`?. Maybe in the best case, the fix would just be adding a simple `if(nbig >= 0)` before the call to `resize()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:573,Safety,abort,abort,573,"Hi, thanks for reporting this!. It is indeed a bug that you can't read the 6.26 workspace in 6.28. The other way around is expected, with RooFit you can't read back a RooWorkspace with any ROOT version that is older that the version it was created with. When I run the reproducer in the debugger, I get this stack trace:; ```; Program received signal SIGABRT, Aborted.; 0x00007ffff4a9f26c in ?? () from /usr/lib/libc.so.6; (gdb) bt; #0 0x00007ffff4a9f26c in ?? () from /usr/lib/libc.so.6; #1 0x00007ffff4a4fa08 in raise () from /usr/lib/libc.so.6; #2 0x00007ffff4a38538 in abort () from /usr/lib/libc.so.6; #3 0x00007ffff4c9ca6f in __gnu_cxx::__verbose_terminate_handler () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #4 0x00007ffff4cb011c in __cxxabiv1::__terminate (handler=<optimized out>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00007ffff4cb0189 in std::terminate () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00007ffff4cb03ed in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/issues/12967#issuecomment-1581261520:8592,Usability,simpl,simple,8592,"fffffd9d0, cl=0x555558490b70, pointer=<optimized out>, onFileClass=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3499; #30 0x00007ffff778a22e in TClass::Streamer (onfile_class=0x0, b=..., obj=0x55555855a0c0, this=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #31 TKey::ReadObjectAny (this=0x5555569f77a0, expectedClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TKey.cxx:1108; #32 0x00007ffff774aa1b in TDirectoryFile::GetObjectChecked (this=0x555556a15ce0, namecycle=<optimized out>, expectedClass=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/io/io/src/TDirectoryFile.cxx:1111; #33 0x00005555555551f6 in TDirectory::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectory.h:207; #34 TDirectoryFile::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectoryFile.h:84; #35 repro () at repro.C:10; ```. So the crash is here (https://github.com/root-project/root/blob/master/io/io/src/TBufferFile.cxx#L245):; ```c++; if (nwh == 255) {; *this >> nbig;; obj->resize(nbig,'\0');; ReadFastArray((char*)obj->data(),nbig);; }; ```; I have put some debug printouts. When it crashes, `nbig` is `-1`, and resize() expects and unsigned int. The -1 becomes a very large unsigned number that exceeds the maximum allowed length of a `std::string`. To me that looks more like a problem with IO than with HistFactory (the memory layout of the `HistFactory::Measurement` classes hasn't changed from 6.26 to 6.28. Is that something that makes sense to you, @pcanal? What does this `nbig` stand for, and in which circumstances can this be `-1`?. Maybe in the best case, the fix would just be adding a simple `if(nbig >= 0)` before the call to `resize()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520
https://github.com/root-project/root/pull/12981#issuecomment-1585597579:73,Availability,robust,robust,73,Closing the PR after some discussion. The added benefit of having a more robust usage of namespaces and clearer definition of the classes being used in the headers is not worth w.r.t. having to rebase larger PRs on top of these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12981#issuecomment-1585597579
https://github.com/root-project/root/pull/12981#issuecomment-1585597579:104,Usability,clear,clearer,104,Closing the PR after some discussion. The added benefit of having a more robust usage of namespaces and clearer definition of the classes being used in the headers is not worth w.r.t. having to rebase larger PRs on top of these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12981#issuecomment-1585597579
https://github.com/root-project/root/issues/13000#issuecomment-1615245128:241,Performance,load,load,241,"> > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member?; > ; > Yes! Very likely. That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1615245128
https://github.com/root-project/root/issues/13000#issuecomment-1615245128:191,Usability,simpl,simply,191,"> > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member?; > ; > Yes! Very likely. That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1615245128
https://github.com/root-project/root/issues/13000#issuecomment-1615514852:701,Availability,reliab,reliable,701,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member?; > > ; > > ; > > Yes! Very likely.; > ; > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1615514852
https://github.com/root-project/root/issues/13000#issuecomment-1615514852:260,Performance,load,load,260,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member?; > > ; > > ; > > Yes! Very likely.; > ; > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1615514852
https://github.com/root-project/root/issues/13000#issuecomment-1615514852:680,Performance,load,loads,680,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member?; > > ; > > ; > > Yes! Very likely.; > ; > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1615514852
https://github.com/root-project/root/issues/13000#issuecomment-1615514852:754,Performance,load,loads,754,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member?; > > ; > > ; > > Yes! Very likely.; > ; > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1615514852
https://github.com/root-project/root/issues/13000#issuecomment-1615514852:210,Usability,simpl,simply,210,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member?; > > ; > > ; > > Yes! Very likely.; > ; > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1615514852
https://github.com/root-project/root/issues/13000#issuecomment-1628343236:34,Testability,test,tests,34,"Ok, let me know if you have other tests which you would like me to do. One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1628343236
https://github.com/root-project/root/issues/13000#issuecomment-1628343236:261,Usability,simpl,simply,261,"Ok, let me know if you have other tests which you would like me to do. One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1628343236
https://github.com/root-project/root/issues/13000#issuecomment-1629035353:466,Availability,ping,ping,466,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353
https://github.com/root-project/root/issues/13000#issuecomment-1629035353:1139,Energy Efficiency,allocate,allocate,1139,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353
https://github.com/root-project/root/issues/13000#issuecomment-1629035353:1161,Energy Efficiency,allocate,allocate,1161,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353
https://github.com/root-project/root/issues/13000#issuecomment-1629035353:1303,Integrability,depend,depending,1303,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353
https://github.com/root-project/root/issues/13000#issuecomment-1629035353:881,Performance,load,loads,881,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353
https://github.com/root-project/root/issues/13000#issuecomment-1629035353:1359,Performance,optimiz,optimize,1359,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353
https://github.com/root-project/root/issues/13000#issuecomment-1629035353:1264,Safety,avoid,avoid,1264,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353
https://github.com/root-project/root/issues/13000#issuecomment-1629035353:1187,Security,access,access,1187,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353
https://github.com/root-project/root/issues/13000#issuecomment-1629035353:1341,Security,access,access,1341,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353
https://github.com/root-project/root/issues/13000#issuecomment-1629035353:36,Testability,test,tests,36,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353
https://github.com/root-project/root/issues/13000#issuecomment-1629035353:98,Usability,learn,learn,98,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353
https://github.com/root-project/root/issues/13000#issuecomment-1629035353:664,Usability,simpl,simply,664,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353
https://github.com/root-project/root/issues/13000#issuecomment-1629035353:1335,Usability,clear,clear,1335,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353
https://github.com/root-project/root/issues/13000#issuecomment-1630736477:6,Usability,clear,clear,6,"to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1630736477
https://github.com/root-project/root/issues/13000#issuecomment-1630908477:122,Availability,ping,ping,122,"> > > Is that with or without opening the file? My expectation is that root.exe -l -b -q will take a lot less rss.; > > > ping.; > ; > With the file. I meant to ping on the stats without a file. > to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB. Can you share the new profile?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1630908477
https://github.com/root-project/root/issues/13000#issuecomment-1630908477:161,Availability,ping,ping,161,"> > > Is that with or without opening the file? My expectation is that root.exe -l -b -q will take a lot less rss.; > > > ping.; > ; > With the file. I meant to ping on the stats without a file. > to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB. Can you share the new profile?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1630908477
https://github.com/root-project/root/issues/13000#issuecomment-1630908477:203,Usability,clear,clear,203,"> > > Is that with or without opening the file? My expectation is that root.exe -l -b -q will take a lot less rss.; > > > ping.; > ; > With the file. I meant to ping on the stats without a file. > to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB. Can you share the new profile?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1630908477
https://github.com/root-project/root/issues/13000#issuecomment-1715921216:659,Energy Efficiency,allocate,allocated,659,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome.; - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test.; - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc.; - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1715921216
https://github.com/root-project/root/issues/13000#issuecomment-1715921216:1092,Safety,avoid,avoid,1092,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome.; - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test.; - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc.; - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1715921216
https://github.com/root-project/root/issues/13000#issuecomment-1715921216:597,Security,access,accessed,597,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome.; - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test.; - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc.; - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1715921216
https://github.com/root-project/root/issues/13000#issuecomment-1715921216:84,Testability,test,tests,84,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome.; - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test.; - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc.; - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1715921216
https://github.com/root-project/root/issues/13000#issuecomment-1715921216:1630,Testability,test,test,1630,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome.; - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test.; - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc.; - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1715921216
https://github.com/root-project/root/issues/13000#issuecomment-1715921216:351,Usability,feedback,feedback,351,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome.; - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test.; - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc.; - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1715921216
https://github.com/root-project/root/issues/13000#issuecomment-1716088321:222,Energy Efficiency,allocate,allocate,222,"> ; > Comments?. This looks awesome!. > A few caveats:; > ; > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right?. > ; > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > ; > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > ; > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1716088321
https://github.com/root-project/root/issues/13000#issuecomment-1716088321:274,Energy Efficiency,allocate,allocate,274,"> ; > Comments?. This looks awesome!. > A few caveats:; > ; > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right?. > ; > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > ; > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > ; > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1716088321
https://github.com/root-project/root/issues/13000#issuecomment-1716088321:368,Energy Efficiency,allocate,allocated,368,"> ; > Comments?. This looks awesome!. > A few caveats:; > ; > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right?. > ; > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > ; > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > ; > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1716088321
https://github.com/root-project/root/issues/13000#issuecomment-1716088321:672,Testability,test,test,672,"> ; > Comments?. This looks awesome!. > A few caveats:; > ; > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right?. > ; > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > ; > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > ; > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1716088321
https://github.com/root-project/root/issues/13000#issuecomment-1716088321:713,Usability,simpl,simple,713,"> ; > Comments?. This looks awesome!. > A few caveats:; > ; > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right?. > ; > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > ; > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > ; > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1716088321
https://github.com/root-project/root/issues/13000#issuecomment-1717037288:95,Energy Efficiency,allocate,allocate,95,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right?. No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase?. > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me?. > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1717037288
https://github.com/root-project/root/issues/13000#issuecomment-1717037288:147,Energy Efficiency,allocate,allocate,147,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right?. No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase?. > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me?. > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1717037288
https://github.com/root-project/root/issues/13000#issuecomment-1717037288:239,Energy Efficiency,allocate,allocated,239,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right?. No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase?. > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me?. > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1717037288
https://github.com/root-project/root/issues/13000#issuecomment-1717037288:533,Testability,log,logarithmic,533,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right?. No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase?. > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me?. > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1717037288
https://github.com/root-project/root/issues/13000#issuecomment-1717037288:644,Usability,simpl,simple,644,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right?. No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase?. > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me?. > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1717037288
https://github.com/root-project/root/issues/13000#issuecomment-2304636324:88,Performance,load,loads,88,"It's not an issue for adoption. The underlying issue is still there, though. ROOT still loads a bunch of unneeded PCM when simply opening a file, it's just the cost is half what it was before and the reproducer is the same as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-2304636324
https://github.com/root-project/root/issues/13000#issuecomment-2304636324:123,Usability,simpl,simply,123,"It's not an issue for adoption. The underlying issue is still there, though. ROOT still loads a bunch of unneeded PCM when simply opening a file, it's just the cost is half what it was before and the reproducer is the same as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-2304636324
https://github.com/root-project/root/issues/13001#issuecomment-1591318680:36,Availability,error,error,36,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:; ```cpp; #include <ranges>; using namespace std;; #include <range/v3/views.hpp>; ```; but I see 2 errors in this example:; - using std::ranges and ranges at the same time (not really an error, but a bit silly); - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:; ```cpp; #include <ranges>; #include <range/v3/views.hpp>; using namespace std;; ```; still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001#issuecomment-1591318680
https://github.com/root-project/root/issues/13001#issuecomment-1591318680:218,Availability,error,errors,218,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:; ```cpp; #include <ranges>; using namespace std;; #include <range/v3/views.hpp>; ```; but I see 2 errors in this example:; - using std::ranges and ranges at the same time (not really an error, but a bit silly); - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:; ```cpp; #include <ranges>; #include <range/v3/views.hpp>; using namespace std;; ```; still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001#issuecomment-1591318680
https://github.com/root-project/root/issues/13001#issuecomment-1591318680:306,Availability,error,error,306,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:; ```cpp; #include <ranges>; using namespace std;; #include <range/v3/views.hpp>; ```; but I see 2 errors in this example:; - using std::ranges and ranges at the same time (not really an error, but a bit silly); - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:; ```cpp; #include <ranges>; #include <range/v3/views.hpp>; using namespace std;; ```; still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001#issuecomment-1591318680
https://github.com/root-project/root/issues/13001#issuecomment-1591318680:449,Availability,error,error,449,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:; ```cpp; #include <ranges>; using namespace std;; #include <range/v3/views.hpp>; ```; but I see 2 errors in this example:; - using std::ranges and ranges at the same time (not really an error, but a bit silly); - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:; ```cpp; #include <ranges>; #include <range/v3/views.hpp>; using namespace std;; ```; still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001#issuecomment-1591318680
https://github.com/root-project/root/issues/13001#issuecomment-1591318680:75,Usability,simpl,simple,75,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:; ```cpp; #include <ranges>; using namespace std;; #include <range/v3/views.hpp>; ```; but I see 2 errors in this example:; - using std::ranges and ranges at the same time (not really an error, but a bit silly); - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:; ```cpp; #include <ranges>; #include <range/v3/views.hpp>; using namespace std;; ```; still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001#issuecomment-1591318680
https://github.com/root-project/root/issues/13005#issuecomment-1591002768:17,Usability,simpl,simply,17,"if you need 1e-9 simply change it when you call Integral, that is what ""defined by eps"" means. You defined it, either by using the default value 1e-6 or by specifying this parameter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005#issuecomment-1591002768
https://github.com/root-project/root/issues/13018#issuecomment-1592003325:28,Performance,latency,latency,28,"One potential reason - huge latency for simple request of 4 bytes. Just submitting simple request:; ```; time curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-4,100-104"" --output -; ```. Gives me: `1.423 sec` total time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592003325
https://github.com/root-project/root/issues/13018#issuecomment-1592003325:40,Usability,simpl,simple,40,"One potential reason - huge latency for simple request of 4 bytes. Just submitting simple request:; ```; time curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-4,100-104"" --output -; ```. Gives me: `1.423 sec` total time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592003325
https://github.com/root-project/root/issues/13018#issuecomment-1592003325:83,Usability,simpl,simple,83,"One potential reason - huge latency for simple request of 4 bytes. Just submitting simple request:; ```; time curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-4,100-104"" --output -; ```. Gives me: `1.423 sec` total time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592003325
https://github.com/root-project/root/issues/13018#issuecomment-1592493876:497,Availability,error,errors,497,"I have more strange effect. I do not compile davix and therefore after opening the file with:; `TFile::Open(""https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root"");` ; I getting instance of `TWebFile`. And if enable `gDebug=1`, one clearly sees ~1.5s per each http request. Moreover, when I try to perform `TTree::Draw()` from the `TBrowser` (web and normal one), `TWebFile` submits multirange request, but not able to parse result of it. Producing several errors - it fully crashes, including my console. Seems to be, it is another issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592493876
https://github.com/root-project/root/issues/13018#issuecomment-1592493876:338,Performance,perform,perform,338,"I have more strange effect. I do not compile davix and therefore after opening the file with:; `TFile::Open(""https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root"");` ; I getting instance of `TWebFile`. And if enable `gDebug=1`, one clearly sees ~1.5s per each http request. Moreover, when I try to perform `TTree::Draw()` from the `TBrowser` (web and normal one), `TWebFile` submits multirange request, but not able to parse result of it. Producing several errors - it fully crashes, including my console. Seems to be, it is another issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592493876
https://github.com/root-project/root/issues/13018#issuecomment-1592493876:272,Usability,clear,clearly,272,"I have more strange effect. I do not compile davix and therefore after opening the file with:; `TFile::Open(""https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root"");` ; I getting instance of `TWebFile`. And if enable `gDebug=1`, one clearly sees ~1.5s per each http request. Moreover, when I try to perform `TTree::Draw()` from the `TBrowser` (web and normal one), `TWebFile` submits multirange request, but not able to parse result of it. Producing several errors - it fully crashes, including my console. Seems to be, it is another issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592493876
https://github.com/root-project/root/issues/13018#issuecomment-1592696000:259,Performance,latency,latency,259,"Now I start understanding problem with cernbox http server.; It returns wrong http response header on multi-range request.; Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - ; which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:; ```; curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 ; HTTP/1.1 206 Partial Content; Date: Thu, 15 Jun 2023 09:16:57 GMT; Server: Apache/2.4.41 (Ubuntu); X-Frame-Options: SAMEORIGIN; Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT; ETag: ""6521f-4e0ab42683e40""; Accept-Ranges: bytes; Content-Length: 177; Cache-Control: max-age=1800; Expires: Thu, 15 Jun 2023 09:46:57 GMT; Content-Security-Policy: frame-ancestors 'self';; Strict-Transport-Security: max-age=15768000; Access-Control-Allow-Origin: *; Access-Control-Allow-Headers: range; Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges; Access-Control-Allow-Methods: HEAD,GET; Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7; Content-range: bytes 0-15/414239. root�mdR; --61c842e35204a0c7; Content-range: bytes 1000-1015/414239. 1ZGqP��; --61c842e35204a0c7--; ```. And here is result from cernbox:; ```; curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 ; HTTP/1.1 206 Partial Content; Access-Control-Allow-Origin: *; Content-Disposition: attachment; filename=""test_ntuples_200123.root""; Content-Length: 389; Content-Range: ; Content-Security-Policy: default-src 'none';; Content-Type: application/octet-stream; Date: Thu, 15 Jun 2023 09:15:48 GMT; Etag: ""329762575417868288:9d274a18""; Last-Modified: Wed, 24 May 2023 12:22:19 +0000; Oc-Etag: ""329762575417868288:9d274a18""; Oc-Fileid: eoshome-t!103034857; Server: nginx/1.20.1; Strict-Tran",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592696000
https://github.com/root-project/root/issues/13018#issuecomment-1592696000:2961,Performance,latency,latency,2961,"gth,content-type,accept-ranges; Access-Control-Allow-Methods: HEAD,GET; Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7; Content-range: bytes 0-15/414239. root�mdR; --61c842e35204a0c7; Content-range: bytes 1000-1015/414239. 1ZGqP��; --61c842e35204a0c7--; ```. And here is result from cernbox:; ```; curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 ; HTTP/1.1 206 Partial Content; Access-Control-Allow-Origin: *; Content-Disposition: attachment; filename=""test_ntuples_200123.root""; Content-Length: 389; Content-Range: ; Content-Security-Policy: default-src 'none';; Content-Type: application/octet-stream; Date: Thu, 15 Jun 2023 09:15:48 GMT; Etag: ""329762575417868288:9d274a18""; Last-Modified: Wed, 24 May 2023 12:22:19 +0000; Oc-Etag: ""329762575417868288:9d274a18""; Oc-Fileid: eoshome-t!103034857; Server: nginx/1.20.1; Strict-Transport-Security: max-age=63072000; Vary: Origin; X-Content-Type-Options: nosniff; X-Download-Options: noopen; X-Frame-Options: SAMEORIGIN; X-Permitted-Cross-Domain-Policies: none; X-Robots-Tag: none; X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb; Content-Range: bytes 0-15/4667337; Content-Type: application/octet-stream. root��dG7�; --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb; Content-Range: bytes 1000-1015/4667337; Content-Type: application/octet-stream. .�J.�f6��M�����m; --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--; ```. That is wrong?; First of all content type must be: ""Content-Type: multipart/something""; In the same line one should have boundary like ""boundary=61c842e35204a0c7""; Such line is not present in cernbox response.; Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592696000
https://github.com/root-project/root/issues/13018#issuecomment-1592696000:2836,Usability,clear,clearly,2836,"gth,content-type,accept-ranges; Access-Control-Allow-Methods: HEAD,GET; Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7; Content-range: bytes 0-15/414239. root�mdR; --61c842e35204a0c7; Content-range: bytes 1000-1015/414239. 1ZGqP��; --61c842e35204a0c7--; ```. And here is result from cernbox:; ```; curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 ; HTTP/1.1 206 Partial Content; Access-Control-Allow-Origin: *; Content-Disposition: attachment; filename=""test_ntuples_200123.root""; Content-Length: 389; Content-Range: ; Content-Security-Policy: default-src 'none';; Content-Type: application/octet-stream; Date: Thu, 15 Jun 2023 09:15:48 GMT; Etag: ""329762575417868288:9d274a18""; Last-Modified: Wed, 24 May 2023 12:22:19 +0000; Oc-Etag: ""329762575417868288:9d274a18""; Oc-Fileid: eoshome-t!103034857; Server: nginx/1.20.1; Strict-Transport-Security: max-age=63072000; Vary: Origin; X-Content-Type-Options: nosniff; X-Download-Options: noopen; X-Frame-Options: SAMEORIGIN; X-Permitted-Cross-Domain-Policies: none; X-Robots-Tag: none; X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb; Content-Range: bytes 0-15/4667337; Content-Type: application/octet-stream. root��dG7�; --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb; Content-Range: bytes 1000-1015/4667337; Content-Type: application/octet-stream. .�J.�f6��M�����m; --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--; ```. That is wrong?; First of all content type must be: ""Content-Type: multipart/something""; In the same line one should have boundary like ""boundary=61c842e35204a0c7""; Such line is not present in cernbox response.; Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592696000
https://github.com/root-project/root/issues/13042#issuecomment-1595270233:401,Availability,error,error,401,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a ; ```; #if __cplusplus >= 202002L; ```. inside those code block if they are enabled due to this mismatched compilation version and report the error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042#issuecomment-1595270233
https://github.com/root-project/root/issues/13042#issuecomment-1595270233:102,Safety,avoid,avoid,102,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a ; ```; #if __cplusplus >= 202002L; ```. inside those code block if they are enabled due to this mismatched compilation version and report the error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042#issuecomment-1595270233
https://github.com/root-project/root/issues/13042#issuecomment-1595270233:156,Usability,clear,clear,156,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a ; ```; #if __cplusplus >= 202002L; ```. inside those code block if they are enabled due to this mismatched compilation version and report the error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042#issuecomment-1595270233
https://github.com/root-project/root/issues/13042#issuecomment-1595284979:351,Testability,test,tested,351,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:; * If the code snippet works in (your) C++20 (expected behavior); * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:; ```; #include <span>; #include ""ROOT/RRangeCast.hxx""; ```; (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042#issuecomment-1595284979
https://github.com/root-project/root/issues/13042#issuecomment-1595284979:381,Testability,test,testable,381,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:; * If the code snippet works in (your) C++20 (expected behavior); * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:; ```; #include <span>; #include ""ROOT/RRangeCast.hxx""; ```; (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042#issuecomment-1595284979
https://github.com/root-project/root/issues/13042#issuecomment-1595284979:506,Testability,test,test,506,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:; * If the code snippet works in (your) C++20 (expected behavior); * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:; ```; #include <span>; #include ""ROOT/RRangeCast.hxx""; ```; (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042#issuecomment-1595284979
https://github.com/root-project/root/issues/13042#issuecomment-1595284979:397,Usability,simpl,simple,397,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:; * If the code snippet works in (your) C++20 (expected behavior); * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:; ```; #include <span>; #include ""ROOT/RRangeCast.hxx""; ```; (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042#issuecomment-1595284979
https://github.com/root-project/root/issues/13075#issuecomment-1891586098:206,Integrability,wrap,wrapper,206,"Dear @couet thank you very much. Is this something that could be implemented soon in ROOT. If it's a simple change to add the copy CTOR to the API it would avoid us in CMSSW to have to create a custom-made wrapper for TH2Poly.; Many thanks in advance, Pedro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075#issuecomment-1891586098
https://github.com/root-project/root/issues/13075#issuecomment-1891586098:156,Safety,avoid,avoid,156,"Dear @couet thank you very much. Is this something that could be implemented soon in ROOT. If it's a simple change to add the copy CTOR to the API it would avoid us in CMSSW to have to create a custom-made wrapper for TH2Poly.; Many thanks in advance, Pedro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075#issuecomment-1891586098
https://github.com/root-project/root/issues/13075#issuecomment-1891586098:101,Usability,simpl,simple,101,"Dear @couet thank you very much. Is this something that could be implemented soon in ROOT. If it's a simple change to add the copy CTOR to the API it would avoid us in CMSSW to have to create a custom-made wrapper for TH2Poly.; Many thanks in advance, Pedro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075#issuecomment-1891586098
https://github.com/root-project/root/issues/13075#issuecomment-1926390637:31,Usability,clear,clear,31,"Thanks @pfs . @couet it is not clear to me whether this copy constructor has been implemented or not from the conversation, but it should be pretty straightforward. Can you take care, or, if already done, close the issue directly? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075#issuecomment-1926390637
https://github.com/root-project/root/issues/13088#issuecomment-1605303317:900,Usability,simpl,simple,900,"Hi @bernhardmgruber , thank you for reporting this!. I understand the problem, we need to make sure we give a meaningful name to the RNTuple. Regarding your specific example above, I have a doubt about the design. Since the input is a `TChain` with no name, there is no evident unique name to give to the imported RNTuple. If the `TChain` had a name then that would be the correct name to assign. But in this case, we could:. 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain.; 2. Check that all trees of the chain have the same name (the first one), and assign that. If this is not the case, fallback to assigning the first name anyway ?; 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. Thoughts? Also inviting @pcanal and @jblomer to comment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088#issuecomment-1605303317
https://github.com/root-project/root/issues/13088#issuecomment-1606956482:900,Usability,simpl,simple,900,"> If the `TChain` had a name then that would be the correct name to assign. Yes.; (I didn't know `TChain`'s could have a name. I thought they were conceptually just concatenations of trees). > 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. That sounds too deliberate to me. > 2. Check that all trees of the chain have the same name (the first one), and assign that. I think this would be the only sensible solution. But I don't kow how big `TChain`s can get and whether such a check would become expensive at some point. > If this is not the case, fallback to assigning the first name anyway ?. Again, I think this is too deliberate. > 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. That is the the status quo, as observed by me. The name picked is `ROOT::Experimental::RNTuple`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088#issuecomment-1606956482
https://github.com/root-project/root/issues/13088#issuecomment-1612018808:269,Usability,user experience,user experience,269,"For completeness, `RNTupleImporter` already allows to supply a tree name:; ```c++; auto imp = ROOT::Experimental::RNTupleImporter::Create(&chain, ""B2HHH~zstd~10x.ntuple"");; imp->SetNTupleName(“DecayTree”);; imp->Import();; ```; My issue is just about an improvement of user experience.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088#issuecomment-1612018808
https://github.com/root-project/root/issues/13091#issuecomment-1614327543:187,Availability,error,errors,187,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`.; So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091#issuecomment-1614327543
https://github.com/root-project/root/issues/13091#issuecomment-1614327543:56,Integrability,interface,interfaces,56,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`.; So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091#issuecomment-1614327543
https://github.com/root-project/root/issues/13091#issuecomment-1614327543:283,Integrability,interface,interfaces,283,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`.; So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091#issuecomment-1614327543
https://github.com/root-project/root/issues/13091#issuecomment-1614327543:151,Usability,simpl,simply,151,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`.; So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091#issuecomment-1614327543
https://github.com/root-project/root/issues/13130#issuecomment-1926398466:119,Energy Efficiency,allocate,allocates,119,"@vepadulano , not clear from the conversation to me, but is the comment above about the suppression file and how cling allocates addressing your original issue? If yes,could you close this item?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130#issuecomment-1926398466
https://github.com/root-project/root/issues/13130#issuecomment-1926398466:18,Usability,clear,clear,18,"@vepadulano , not clear from the conversation to me, but is the comment above about the suppression file and how cling allocates addressing your original issue? If yes,could you close this item?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130#issuecomment-1926398466
https://github.com/root-project/root/pull/13134#issuecomment-1637626198:602,Availability,error,error,602,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`.; 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change; 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? ; 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1637626198
https://github.com/root-project/root/pull/13134#issuecomment-1637626198:847,Availability,error,error,847,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`.; 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change; 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? ; 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1637626198
https://github.com/root-project/root/pull/13134#issuecomment-1637626198:69,Integrability,depend,depend,69,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`.; 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change; 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? ; 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1637626198
https://github.com/root-project/root/pull/13134#issuecomment-1637626198:895,Integrability,depend,dependency,895,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`.; 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change; 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? ; 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1637626198
https://github.com/root-project/root/pull/13134#issuecomment-1637626198:370,Modifiability,inherit,inheriting,370,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`.; 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change; 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? ; 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1637626198
https://github.com/root-project/root/pull/13134#issuecomment-1637626198:364,Safety,avoid,avoid,364,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`.; 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change; 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? ; 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1637626198
https://github.com/root-project/root/pull/13134#issuecomment-1637626198:756,Usability,clear,clear,756,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`.; 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change; 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? ; 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1637626198
https://github.com/root-project/root/pull/13134#issuecomment-1638477128:395,Usability,simpl,simpler,395,">> Is it so?. > Yes, as written in the manual. . I still do not see reason why dictionary is necessary here. ; It is really question for @pcanal. ; Is there special handling of `std::unique_ptr<T>` for the types derived from `TObject`? ; In dictionary for transient members? ; And how one gets such information for the class which does not appears in header files?. As I mention - there is much simpler workaround with plain pointer.; But once I implement it - one immediately forgets about the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1638477128
https://github.com/root-project/root/pull/13146#issuecomment-1620049875:140,Testability,test,test,140,It's not clear to me what the actually issue with Jenkins is. It looks like a fluke in one of the jenkins components. Could you restart the test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146#issuecomment-1620049875
https://github.com/root-project/root/pull/13146#issuecomment-1620049875:9,Usability,clear,clear,9,It's not clear to me what the actually issue with Jenkins is. It looks like a fluke in one of the jenkins components. Could you restart the test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146#issuecomment-1620049875
https://github.com/root-project/root/pull/13160#issuecomment-1619057225:1377,Availability,error,error,1377,"> I think it should live in InternalTreeUtils?. I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases?. I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it.; 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1619057225
https://github.com/root-project/root/pull/13160#issuecomment-1619057225:144,Integrability,depend,depend,144,"> I think it should live in InternalTreeUtils?. I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases?. I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it.; 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1619057225
https://github.com/root-project/root/pull/13160#issuecomment-1619057225:458,Safety,safe,safety,458,"> I think it should live in InternalTreeUtils?. I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases?. I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it.; 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1619057225
https://github.com/root-project/root/pull/13160#issuecomment-1619057225:398,Testability,test,test,398,"> I think it should live in InternalTreeUtils?. I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases?. I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it.; 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1619057225
https://github.com/root-project/root/pull/13160#issuecomment-1619057225:528,Testability,log,logic,528,"> I think it should live in InternalTreeUtils?. I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases?. I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it.; 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1619057225
https://github.com/root-project/root/pull/13160#issuecomment-1619057225:940,Testability,log,logic,940,"> I think it should live in InternalTreeUtils?. I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases?. I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it.; 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1619057225
https://github.com/root-project/root/pull/13160#issuecomment-1619057225:593,Usability,intuit,intuitively,593,"> I think it should live in InternalTreeUtils?. I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases?. I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it.; 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1619057225
https://github.com/root-project/root/pull/13165#issuecomment-1621661045:42,Deployability,patch,patch,42,"I think this is a clear sign we want this patch. ![image](https://github.com/root-project/root/assets/15638895/dc7f1386-c921-4796-8a92-172026517ba8). One could say that returning a string that ends with ""\n"" would be slightly more annoying for post-processing, but I really don't think that counterargument has enough weight",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13165#issuecomment-1621661045
https://github.com/root-project/root/pull/13165#issuecomment-1621661045:18,Usability,clear,clear,18,"I think this is a clear sign we want this patch. ![image](https://github.com/root-project/root/assets/15638895/dc7f1386-c921-4796-8a92-172026517ba8). One could say that returning a string that ends with ""\n"" would be slightly more annoying for post-processing, but I really don't think that counterargument has enough weight",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13165#issuecomment-1621661045
https://github.com/root-project/root/pull/13181#issuecomment-1621492471:567,Availability,error,error,567,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem; > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`.; > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > ; > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181#issuecomment-1621492471
https://github.com/root-project/root/pull/13181#issuecomment-1621492471:683,Deployability,patch,patch,683,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem; > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`.; > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > ; > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181#issuecomment-1621492471
https://github.com/root-project/root/pull/13181#issuecomment-1621492471:285,Testability,assert,assertions,285,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem; > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`.; > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > ; > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181#issuecomment-1621492471
https://github.com/root-project/root/pull/13181#issuecomment-1621492471:352,Testability,assert,assert,352,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem; > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`.; > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > ; > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181#issuecomment-1621492471
https://github.com/root-project/root/pull/13181#issuecomment-1621492471:385,Testability,assert,assertion,385,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem; > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`.; > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > ; > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181#issuecomment-1621492471
https://github.com/root-project/root/pull/13181#issuecomment-1621492471:38,Usability,clear,clearing,38,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem; > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`.; > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > ; > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181#issuecomment-1621492471
https://github.com/root-project/root/issues/13182#issuecomment-1643431150:211,Usability,guid,guidelines,211,"> > @jalopezg-git Yes, can you open a PR?; > ; > @ferdymercury as you are the original author of #13217, do you want to take care of the backport?. I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182#issuecomment-1643431150
https://github.com/root-project/root/issues/13182#issuecomment-1643640639:514,Deployability,patch,patches,514,"> > > @jalopezg-git Yes, can you open a PR?; > > ; > > ; > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport?; > ; > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that?. Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to; ```bash; $ git fetch origin v6-28-00-patches:v6-28-00-patches; $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches; $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here; $ git push ferdymercury TDirectoryFile-ls-v6.28; ```; , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182#issuecomment-1643640639
https://github.com/root-project/root/issues/13182#issuecomment-1643640639:531,Deployability,patch,patches,531,"> > > @jalopezg-git Yes, can you open a PR?; > > ; > > ; > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport?; > ; > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that?. Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to; ```bash; $ git fetch origin v6-28-00-patches:v6-28-00-patches; $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches; $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here; $ git push ferdymercury TDirectoryFile-ls-v6.28; ```; , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182#issuecomment-1643640639
https://github.com/root-project/root/issues/13182#issuecomment-1643640639:591,Deployability,patch,patches,591,"> > > @jalopezg-git Yes, can you open a PR?; > > ; > > ; > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport?; > ; > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that?. Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to; ```bash; $ git fetch origin v6-28-00-patches:v6-28-00-patches; $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches; $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here; $ git push ferdymercury TDirectoryFile-ls-v6.28; ```; , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182#issuecomment-1643640639
https://github.com/root-project/root/issues/13182#issuecomment-1643640639:810,Deployability,patch,patches,810,"> > > @jalopezg-git Yes, can you open a PR?; > > ; > > ; > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport?; > ; > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that?. Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to; ```bash; $ git fetch origin v6-28-00-patches:v6-28-00-patches; $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches; $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here; $ git push ferdymercury TDirectoryFile-ls-v6.28; ```; , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182#issuecomment-1643640639
https://github.com/root-project/root/issues/13182#issuecomment-1643640639:229,Usability,guid,guidelines,229,"> > > @jalopezg-git Yes, can you open a PR?; > > ; > > ; > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport?; > ; > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that?. Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to; ```bash; $ git fetch origin v6-28-00-patches:v6-28-00-patches; $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches; $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here; $ git push ferdymercury TDirectoryFile-ls-v6.28; ```; , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182#issuecomment-1643640639
https://github.com/root-project/root/issues/13182#issuecomment-1643640639:457,Usability,simpl,simplest,457,"> > > @jalopezg-git Yes, can you open a PR?; > > ; > > ; > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport?; > ; > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that?. Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to; ```bash; $ git fetch origin v6-28-00-patches:v6-28-00-patches; $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches; $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here; $ git push ferdymercury TDirectoryFile-ls-v6.28; ```; , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182#issuecomment-1643640639
https://github.com/root-project/root/issues/13185#issuecomment-1621628860:1185,Availability,error,errors,1185,"bjects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:; https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python; # Simplified version of the HistFactory JSON IO tutorial:; # https://root.cern/doc/master/rf515__hfJSON_8py.html; # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf; model_channel1 = {; ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],; ""samples"": [; {; ""data"": {""contents"": [20, 10]},; ""modifiers"": [; {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},; {""name"": ""mu"", ""type"": ""normfactor""},; ],; ""name"": ""signal"",; },; {; ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},; ""modifiers"": [; {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},; {""name"": ""mcstat"", ""type"": ""staterror""},; ],; ""name"": ""background1"",; },; {; ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},; ""modifiers"": [; {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},; {""name"": ""mcstat"", ""type"": ""staterror""},; ],; ""name"": ""background2"",; },; ],; ""type"": ""histfactory_dist"",; }. # Python dictionary specifying the binned dataset; observed_channel1 = {; ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],; ""contents"": [122, 112],; ""type"": ""binned"",; }. # Creating an empty workspace; ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works!; ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such; # that no string literals are necessary to specify everything ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185#issuecomment-1621628860
https://github.com/root-project/root/issues/13185#issuecomment-1621628860:1402,Availability,error,errors,1402,"__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python; # Simplified version of the HistFactory JSON IO tutorial:; # https://root.cern/doc/master/rf515__hfJSON_8py.html; # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf; model_channel1 = {; ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],; ""samples"": [; {; ""data"": {""contents"": [20, 10]},; ""modifiers"": [; {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},; {""name"": ""mu"", ""type"": ""normfactor""},; ],; ""name"": ""signal"",; },; {; ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},; ""modifiers"": [; {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},; {""name"": ""mcstat"", ""type"": ""staterror""},; ],; ""name"": ""background1"",; },; {; ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},; ""modifiers"": [; {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},; {""name"": ""mcstat"", ""type"": ""staterror""},; ],; ""name"": ""background2"",; },; ],; ""type"": ""histfactory_dist"",; }. # Python dictionary specifying the binned dataset; observed_channel1 = {; ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],; ""contents"": [122, 112],; ""type"": ""binned"",; }. # Creating an empty workspace; ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works!; ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such; # that no string literals are necessary to specify everything necessary for the; # likelihood analysis (note this doesn't work yet):; #; # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full; # HS3 JSON:;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185#issuecomment-1621628860
https://github.com/root-project/root/issues/13185#issuecomment-1621628860:557,Usability,simpl,simplified,557,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:; https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python; # Simplified version of the HistFactory JSON IO tutorial:; # https://root.cern/doc/master/rf515__hfJSON_8py.html; # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf; model_channel1 = {; ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],; ""samples"": [; {; ""data"": {""contents"": [20, 10]},; ""modifiers"": [; {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},; {""name"": ""mu"", ""type"": ""normfactor""},; ],; ""name"": ""signal"",; },; {; ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},; ""modifiers"": [; {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},; {""name"": ""mcstat"", ""type"": ""staterror""},; ],; ""name"": ""background1"",; },; {; ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},; ""modifiers"": [; {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},; {""name"": ""mcstat"", ""type"": ""staterror""},; ],; ""name"": ""background2"",; },; ],; ""type"": ""histfactory_dist"",; }. # Python dictionary specifying the binned dataset; observed_channel1 = {; ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],; ""contents"": [122, 112],; ""type"": ""binned"",; }. # Creating an empty workspace; ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works!; ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185#issuecomment-1621628860
https://github.com/root-project/root/pull/13205#issuecomment-1673054332:79,Usability,learn,learnt,79,"Hi @jalopezg-git et al :). Thank you for your comments and suggestions, I have learnt new things in this PR. In the last commits I implemented the changes suggested by @vepadulano. Note that I have added a new file with the two lines that print the contents of the TTree using a RDF. The topics that would remain open are:; * Extension of README, as stated [here](https://github.com/root-project/root/pull/13205#discussion_r1259443075). I am sorry but that is beyond my knowledge. Please feel free to complement the README of this tutorial or the ROOT documentation.; * The dot at the end of the branch name is not documented, but it is discussed in some forum threads. I would suggest to add the comment from P. Canal [here](https://github.com/root-project/root/pull/13205#discussion_r1265655686) for sake of clarity. Thank you for your time. Best,; Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205#issuecomment-1673054332
https://github.com/root-project/root/pull/13219#issuecomment-1630954373:114,Usability,clear,clear,114,"> > > @Nowakus: if this change is merged, you will most likely need to slightly adjust your code. Just to make it clear that there is absolutely no problem with adjusting my code to your changes for the time being. ; (as long as I am able to make it still work that is 😄)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13219#issuecomment-1630954373
https://github.com/root-project/root/issues/13280#issuecomment-1644053557:403,Availability,error,error,403,"Hi @VanyaBelyaev, thanks for posting about this!. As explained in [this PR](https://github.com/root-project/root/pull/11909/files) and later also dicussed in [this forum post](https://root-forum.cern.ch/t/retreiving-the-calculation-strategy-of-a-roonll/55715/2), saving test statistics objects to ROOT files like `RooNLLVar` is now prohibited since ROOT 6.28. It only technically seemed to work without error, but in fact the read-back RooNLLVars are corrupted and give wrong results when you read them back even for simple Gaussian cases, as I showed in the description of the linked PR. This and other reasons lead us to the decision to disallow the IO of `RooNLLVar` and other test statistics classes. From your warnings and error messages, it seems like you're trying to do IO of the RooNLLVar. Is there a way you can avoid this in your workflow? As I said it's not allowed anymore and in older ROOT versions it was not reliable. What people usually do is to save the pdf and the datasets in a RooWorkspace, and maybe a `ModelConfig` to simplify the NLL creation when reading back the data and pdf. Is that not an option for your?. Certainly I was not expecting that the removal of this accidental and buggy IO feature would cause some friction with some users, so I'm happy to help you finding an alternative and better solution!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13280#issuecomment-1644053557
https://github.com/root-project/root/issues/13280#issuecomment-1644053557:728,Availability,error,error,728,"Hi @VanyaBelyaev, thanks for posting about this!. As explained in [this PR](https://github.com/root-project/root/pull/11909/files) and later also dicussed in [this forum post](https://root-forum.cern.ch/t/retreiving-the-calculation-strategy-of-a-roonll/55715/2), saving test statistics objects to ROOT files like `RooNLLVar` is now prohibited since ROOT 6.28. It only technically seemed to work without error, but in fact the read-back RooNLLVars are corrupted and give wrong results when you read them back even for simple Gaussian cases, as I showed in the description of the linked PR. This and other reasons lead us to the decision to disallow the IO of `RooNLLVar` and other test statistics classes. From your warnings and error messages, it seems like you're trying to do IO of the RooNLLVar. Is there a way you can avoid this in your workflow? As I said it's not allowed anymore and in older ROOT versions it was not reliable. What people usually do is to save the pdf and the datasets in a RooWorkspace, and maybe a `ModelConfig` to simplify the NLL creation when reading back the data and pdf. Is that not an option for your?. Certainly I was not expecting that the removal of this accidental and buggy IO feature would cause some friction with some users, so I'm happy to help you finding an alternative and better solution!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13280#issuecomment-1644053557
https://github.com/root-project/root/issues/13280#issuecomment-1644053557:924,Availability,reliab,reliable,924,"Hi @VanyaBelyaev, thanks for posting about this!. As explained in [this PR](https://github.com/root-project/root/pull/11909/files) and later also dicussed in [this forum post](https://root-forum.cern.ch/t/retreiving-the-calculation-strategy-of-a-roonll/55715/2), saving test statistics objects to ROOT files like `RooNLLVar` is now prohibited since ROOT 6.28. It only technically seemed to work without error, but in fact the read-back RooNLLVars are corrupted and give wrong results when you read them back even for simple Gaussian cases, as I showed in the description of the linked PR. This and other reasons lead us to the decision to disallow the IO of `RooNLLVar` and other test statistics classes. From your warnings and error messages, it seems like you're trying to do IO of the RooNLLVar. Is there a way you can avoid this in your workflow? As I said it's not allowed anymore and in older ROOT versions it was not reliable. What people usually do is to save the pdf and the datasets in a RooWorkspace, and maybe a `ModelConfig` to simplify the NLL creation when reading back the data and pdf. Is that not an option for your?. Certainly I was not expecting that the removal of this accidental and buggy IO feature would cause some friction with some users, so I'm happy to help you finding an alternative and better solution!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13280#issuecomment-1644053557
https://github.com/root-project/root/issues/13280#issuecomment-1644053557:734,Integrability,message,messages,734,"Hi @VanyaBelyaev, thanks for posting about this!. As explained in [this PR](https://github.com/root-project/root/pull/11909/files) and later also dicussed in [this forum post](https://root-forum.cern.ch/t/retreiving-the-calculation-strategy-of-a-roonll/55715/2), saving test statistics objects to ROOT files like `RooNLLVar` is now prohibited since ROOT 6.28. It only technically seemed to work without error, but in fact the read-back RooNLLVars are corrupted and give wrong results when you read them back even for simple Gaussian cases, as I showed in the description of the linked PR. This and other reasons lead us to the decision to disallow the IO of `RooNLLVar` and other test statistics classes. From your warnings and error messages, it seems like you're trying to do IO of the RooNLLVar. Is there a way you can avoid this in your workflow? As I said it's not allowed anymore and in older ROOT versions it was not reliable. What people usually do is to save the pdf and the datasets in a RooWorkspace, and maybe a `ModelConfig` to simplify the NLL creation when reading back the data and pdf. Is that not an option for your?. Certainly I was not expecting that the removal of this accidental and buggy IO feature would cause some friction with some users, so I'm happy to help you finding an alternative and better solution!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13280#issuecomment-1644053557
https://github.com/root-project/root/issues/13280#issuecomment-1644053557:822,Safety,avoid,avoid,822,"Hi @VanyaBelyaev, thanks for posting about this!. As explained in [this PR](https://github.com/root-project/root/pull/11909/files) and later also dicussed in [this forum post](https://root-forum.cern.ch/t/retreiving-the-calculation-strategy-of-a-roonll/55715/2), saving test statistics objects to ROOT files like `RooNLLVar` is now prohibited since ROOT 6.28. It only technically seemed to work without error, but in fact the read-back RooNLLVars are corrupted and give wrong results when you read them back even for simple Gaussian cases, as I showed in the description of the linked PR. This and other reasons lead us to the decision to disallow the IO of `RooNLLVar` and other test statistics classes. From your warnings and error messages, it seems like you're trying to do IO of the RooNLLVar. Is there a way you can avoid this in your workflow? As I said it's not allowed anymore and in older ROOT versions it was not reliable. What people usually do is to save the pdf and the datasets in a RooWorkspace, and maybe a `ModelConfig` to simplify the NLL creation when reading back the data and pdf. Is that not an option for your?. Certainly I was not expecting that the removal of this accidental and buggy IO feature would cause some friction with some users, so I'm happy to help you finding an alternative and better solution!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13280#issuecomment-1644053557
https://github.com/root-project/root/issues/13280#issuecomment-1644053557:270,Testability,test,test,270,"Hi @VanyaBelyaev, thanks for posting about this!. As explained in [this PR](https://github.com/root-project/root/pull/11909/files) and later also dicussed in [this forum post](https://root-forum.cern.ch/t/retreiving-the-calculation-strategy-of-a-roonll/55715/2), saving test statistics objects to ROOT files like `RooNLLVar` is now prohibited since ROOT 6.28. It only technically seemed to work without error, but in fact the read-back RooNLLVars are corrupted and give wrong results when you read them back even for simple Gaussian cases, as I showed in the description of the linked PR. This and other reasons lead us to the decision to disallow the IO of `RooNLLVar` and other test statistics classes. From your warnings and error messages, it seems like you're trying to do IO of the RooNLLVar. Is there a way you can avoid this in your workflow? As I said it's not allowed anymore and in older ROOT versions it was not reliable. What people usually do is to save the pdf and the datasets in a RooWorkspace, and maybe a `ModelConfig` to simplify the NLL creation when reading back the data and pdf. Is that not an option for your?. Certainly I was not expecting that the removal of this accidental and buggy IO feature would cause some friction with some users, so I'm happy to help you finding an alternative and better solution!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13280#issuecomment-1644053557
https://github.com/root-project/root/issues/13280#issuecomment-1644053557:680,Testability,test,test,680,"Hi @VanyaBelyaev, thanks for posting about this!. As explained in [this PR](https://github.com/root-project/root/pull/11909/files) and later also dicussed in [this forum post](https://root-forum.cern.ch/t/retreiving-the-calculation-strategy-of-a-roonll/55715/2), saving test statistics objects to ROOT files like `RooNLLVar` is now prohibited since ROOT 6.28. It only technically seemed to work without error, but in fact the read-back RooNLLVars are corrupted and give wrong results when you read them back even for simple Gaussian cases, as I showed in the description of the linked PR. This and other reasons lead us to the decision to disallow the IO of `RooNLLVar` and other test statistics classes. From your warnings and error messages, it seems like you're trying to do IO of the RooNLLVar. Is there a way you can avoid this in your workflow? As I said it's not allowed anymore and in older ROOT versions it was not reliable. What people usually do is to save the pdf and the datasets in a RooWorkspace, and maybe a `ModelConfig` to simplify the NLL creation when reading back the data and pdf. Is that not an option for your?. Certainly I was not expecting that the removal of this accidental and buggy IO feature would cause some friction with some users, so I'm happy to help you finding an alternative and better solution!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13280#issuecomment-1644053557
https://github.com/root-project/root/issues/13280#issuecomment-1644053557:517,Usability,simpl,simple,517,"Hi @VanyaBelyaev, thanks for posting about this!. As explained in [this PR](https://github.com/root-project/root/pull/11909/files) and later also dicussed in [this forum post](https://root-forum.cern.ch/t/retreiving-the-calculation-strategy-of-a-roonll/55715/2), saving test statistics objects to ROOT files like `RooNLLVar` is now prohibited since ROOT 6.28. It only technically seemed to work without error, but in fact the read-back RooNLLVars are corrupted and give wrong results when you read them back even for simple Gaussian cases, as I showed in the description of the linked PR. This and other reasons lead us to the decision to disallow the IO of `RooNLLVar` and other test statistics classes. From your warnings and error messages, it seems like you're trying to do IO of the RooNLLVar. Is there a way you can avoid this in your workflow? As I said it's not allowed anymore and in older ROOT versions it was not reliable. What people usually do is to save the pdf and the datasets in a RooWorkspace, and maybe a `ModelConfig` to simplify the NLL creation when reading back the data and pdf. Is that not an option for your?. Certainly I was not expecting that the removal of this accidental and buggy IO feature would cause some friction with some users, so I'm happy to help you finding an alternative and better solution!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13280#issuecomment-1644053557
https://github.com/root-project/root/issues/13280#issuecomment-1644053557:1041,Usability,simpl,simplify,1041,"Hi @VanyaBelyaev, thanks for posting about this!. As explained in [this PR](https://github.com/root-project/root/pull/11909/files) and later also dicussed in [this forum post](https://root-forum.cern.ch/t/retreiving-the-calculation-strategy-of-a-roonll/55715/2), saving test statistics objects to ROOT files like `RooNLLVar` is now prohibited since ROOT 6.28. It only technically seemed to work without error, but in fact the read-back RooNLLVars are corrupted and give wrong results when you read them back even for simple Gaussian cases, as I showed in the description of the linked PR. This and other reasons lead us to the decision to disallow the IO of `RooNLLVar` and other test statistics classes. From your warnings and error messages, it seems like you're trying to do IO of the RooNLLVar. Is there a way you can avoid this in your workflow? As I said it's not allowed anymore and in older ROOT versions it was not reliable. What people usually do is to save the pdf and the datasets in a RooWorkspace, and maybe a `ModelConfig` to simplify the NLL creation when reading back the data and pdf. Is that not an option for your?. Certainly I was not expecting that the removal of this accidental and buggy IO feature would cause some friction with some users, so I'm happy to help you finding an alternative and better solution!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13280#issuecomment-1644053557
https://github.com/root-project/root/pull/13284#issuecomment-1642563861:608,Usability,simpl,simple,608,"> Well, what I'm doing here i prevent the following example: The class `TVector3` has a method `Orthogonal()` returning a `TVector3`, which as a method `Orthogonal()`, and so on. It's maybe not optimal, but it's a good compromise between not browsing any `TMethodBrowsable` and having infinite recursion. That being said, feel free to propose a better solution (it's @pcanal code anyway wink). At the end of the day, IIUC, what we need is to be able to (even partially) browse methods to be able to draw something... Yes, I see. However, while the case `Orthogonal()->Orthogonal()` is seldomly useful, other simple cases like `Orthogonal()->Px()` might be useful. . So I do actually wonder why the infinite recursion is an issue — I'm with @pcanal 's comment from #13233 here, i.e. since the recursion is real, and given that the populating is already done lazily (i.e. triggered by the user clicking), it does not break anything technically (unless I missed something). . In other words: Is JIRA issue [#9260](https://sft.its.cern.ch/jira/browse/ROOT-9260) actually a bug? In my opinion, this would be intended behaviour (if I click on a method which returns something not really useful from the mathematical / physics point of view, ROOT has no way to know and gives me exactly what I asked for :wink: ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13284#issuecomment-1642563861
https://github.com/root-project/root/pull/13299#issuecomment-1723612261:228,Testability,test,tests,228,"> Thank you for the addition @ferdymercury ! I believe this is better than `std::tuple_cat` as it doesn't need the input arguments to be `tuples` and it already returns the formatted string. Can I ask you to provide a couple of tests for the new feature?. Thanks! I just wrote a couple of tests, but I am not very familiar with the GTest infrastructure, I usually use CTest. So I will need some guidance from you ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13299#issuecomment-1723612261
https://github.com/root-project/root/pull/13299#issuecomment-1723612261:289,Testability,test,tests,289,"> Thank you for the addition @ferdymercury ! I believe this is better than `std::tuple_cat` as it doesn't need the input arguments to be `tuples` and it already returns the formatted string. Can I ask you to provide a couple of tests for the new feature?. Thanks! I just wrote a couple of tests, but I am not very familiar with the GTest infrastructure, I usually use CTest. So I will need some guidance from you ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13299#issuecomment-1723612261
https://github.com/root-project/root/pull/13299#issuecomment-1723612261:395,Usability,guid,guidance,395,"> Thank you for the addition @ferdymercury ! I believe this is better than `std::tuple_cat` as it doesn't need the input arguments to be `tuples` and it already returns the formatted string. Can I ask you to provide a couple of tests for the new feature?. Thanks! I just wrote a couple of tests, but I am not very familiar with the GTest infrastructure, I usually use CTest. So I will need some guidance from you ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13299#issuecomment-1723612261
https://github.com/root-project/root/issues/13314#issuecomment-2046122952:160,Usability,clear,clear,160,"That's a nice demo, @dpiparo, and how it's commonly done. Or you can just copy the collection, if it's not too expensive. As for the actual issue: it should be clear that reader views should not be sortable. We can't make this explicitly clear with `const` because ROOT and it's users are not very consistent with that keyword, as @Axel-Naumann said. So there is no solution here - ROOT and C++ just allow you to shoot yourself in the foot :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314#issuecomment-2046122952
https://github.com/root-project/root/issues/13314#issuecomment-2046122952:238,Usability,clear,clear,238,"That's a nice demo, @dpiparo, and how it's commonly done. Or you can just copy the collection, if it's not too expensive. As for the actual issue: it should be clear that reader views should not be sortable. We can't make this explicitly clear with `const` because ROOT and it's users are not very consistent with that keyword, as @Axel-Naumann said. So there is no solution here - ROOT and C++ just allow you to shoot yourself in the foot :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314#issuecomment-2046122952
https://github.com/root-project/root/pull/13317#issuecomment-1651710380:876,Performance,perform,performing,876,"My two cents about the naming; * `GenerateValueFor` doesn't work since the value is not being generated for the other instance, but for this one (AFAIU).; * `GenerateValueBy` sounds fine in principle since the `GenerateValue` call is called *by* the other instance. I have to admit that I personally do not get this immediately and I have to stop half a second to think about the meaning of the function name.; * `GenerateValueOn` also doesn't work because the value is being generated by the other instance, not on.; * `GenerateValueFrom` personally has a similar meaning to `GenerateValueBy` and is easier to get intuitively.; * The `GenerateValueFrom` naming works for `Generate` but not for `Append`. I.e. I don't like `AppendFrom` since that sounds like we are appending some value *from* the other instance *into* this one; * To me it looks like all these functions are performing a call of the same function name on another instance. Thus, personally I would go with a naming like `CallGenerateValueOn`, `CallAppendOn`, `CallReadOn` etc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13317#issuecomment-1651710380
https://github.com/root-project/root/pull/13317#issuecomment-1651710380:615,Usability,intuit,intuitively,615,"My two cents about the naming; * `GenerateValueFor` doesn't work since the value is not being generated for the other instance, but for this one (AFAIU).; * `GenerateValueBy` sounds fine in principle since the `GenerateValue` call is called *by* the other instance. I have to admit that I personally do not get this immediately and I have to stop half a second to think about the meaning of the function name.; * `GenerateValueOn` also doesn't work because the value is being generated by the other instance, not on.; * `GenerateValueFrom` personally has a similar meaning to `GenerateValueBy` and is easier to get intuitively.; * The `GenerateValueFrom` naming works for `Generate` but not for `Append`. I.e. I don't like `AppendFrom` since that sounds like we are appending some value *from* the other instance *into* this one; * To me it looks like all these functions are performing a call of the same function name on another instance. Thus, personally I would go with a naming like `CallGenerateValueOn`, `CallAppendOn`, `CallReadOn` etc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13317#issuecomment-1651710380
https://github.com/root-project/root/issues/13325#issuecomment-1651741707:14,Usability,simpl,simply,14,"@moneta maybe simply `shape.push_back(1);` instead of `shape.insert(shape.end() + 1 + idx, 1);` would do it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325#issuecomment-1651741707
https://github.com/root-project/root/pull/13331#issuecomment-1655666693:166,Usability,clear,clear,166,"> Very nice! Initially, I thought that `includeSubFields` means that a matching fields counts with the size of its subtree. Perhaps the true meaning can be made more clear with `searchInSubfields`. Ah, good point! Yes, that sounds like a better name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13331#issuecomment-1655666693
https://github.com/root-project/root/pull/13341#issuecomment-1862225290:62,Safety,avoid,avoid,62,Thanks for all the feedback. A more comprehensive solution to avoid spurious lookups triggered by TClass::GetClass will be proposed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341#issuecomment-1862225290
https://github.com/root-project/root/pull/13341#issuecomment-1862225290:19,Usability,feedback,feedback,19,Thanks for all the feedback. A more comprehensive solution to avoid spurious lookups triggered by TClass::GetClass will be proposed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341#issuecomment-1862225290
https://github.com/root-project/root/issues/13352#issuecomment-1657939361:78,Usability,simpl,simply,78,"Well, I don't think it's a GUI issue at all, but more a design issue. Why not simply organize your histograms in directories (`TDirectory`)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352#issuecomment-1657939361
https://github.com/root-project/root/issues/13352#issuecomment-1661250419:329,Usability,simpl,simple,329,"I should have been more specific mentioning TH1D maybe. ; - The x axis usually has time information. ; - Bin content are be filled with these Re/Im/Ph/Mag. I would like to get an outgoing object without such directory structure because this would spread many histograms inside my root file structure and I want to keep my object simple. Using such structure would make the retrieval from TFile a way more complex than just reading a TKey. Combining Re/Im would not help quickly visualizing. From TBrowser, I can usually open my class structure and find ´fName´ or string entries inside but this time I would like to find TH1. I think TTree is providing such feature as vector are usually represented as TH1.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352#issuecomment-1661250419
https://github.com/root-project/root/pull/13394#issuecomment-1665533318:279,Deployability,patch,patch,279,"> Awesome, @AniqJaved - thanks a lot for all your work!; > ; > * Could you please reduce the number of commits to something like 5 max? I'm happy to. show you how to rewrite the commit history.; > ; > * `.github/workflows/root-ci-config/__pycache__/build_utils.cpython-39.pyc`, `patch.txt`, and `.github/workflows/root-ci-config/test_file.py` won't be needed in the repo, please don't add them.; > ; > * `.github/workflows/test-coverage.yml` needs only one platform iiuc? Why does it have e.g. `build-macos`?; > ; > ; > I will have a closer look at the code after we chat tomorrow :-). Thank you for your help along the way @Axel-Naumann 💯 🙌,; I have made the proposed changes relating to the files, but I am not sure how to decrease the number of commits, would love to have your guidance on that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13394#issuecomment-1665533318
https://github.com/root-project/root/pull/13394#issuecomment-1665533318:82,Energy Efficiency,reduce,reduce,82,"> Awesome, @AniqJaved - thanks a lot for all your work!; > ; > * Could you please reduce the number of commits to something like 5 max? I'm happy to. show you how to rewrite the commit history.; > ; > * `.github/workflows/root-ci-config/__pycache__/build_utils.cpython-39.pyc`, `patch.txt`, and `.github/workflows/root-ci-config/test_file.py` won't be needed in the repo, please don't add them.; > ; > * `.github/workflows/test-coverage.yml` needs only one platform iiuc? Why does it have e.g. `build-macos`?; > ; > ; > I will have a closer look at the code after we chat tomorrow :-). Thank you for your help along the way @Axel-Naumann 💯 🙌,; I have made the proposed changes relating to the files, but I am not sure how to decrease the number of commits, would love to have your guidance on that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13394#issuecomment-1665533318
https://github.com/root-project/root/pull/13394#issuecomment-1665533318:166,Modifiability,rewrite,rewrite,166,"> Awesome, @AniqJaved - thanks a lot for all your work!; > ; > * Could you please reduce the number of commits to something like 5 max? I'm happy to. show you how to rewrite the commit history.; > ; > * `.github/workflows/root-ci-config/__pycache__/build_utils.cpython-39.pyc`, `patch.txt`, and `.github/workflows/root-ci-config/test_file.py` won't be needed in the repo, please don't add them.; > ; > * `.github/workflows/test-coverage.yml` needs only one platform iiuc? Why does it have e.g. `build-macos`?; > ; > ; > I will have a closer look at the code after we chat tomorrow :-). Thank you for your help along the way @Axel-Naumann 💯 🙌,; I have made the proposed changes relating to the files, but I am not sure how to decrease the number of commits, would love to have your guidance on that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13394#issuecomment-1665533318
https://github.com/root-project/root/pull/13394#issuecomment-1665533318:230,Modifiability,config,config,230,"> Awesome, @AniqJaved - thanks a lot for all your work!; > ; > * Could you please reduce the number of commits to something like 5 max? I'm happy to. show you how to rewrite the commit history.; > ; > * `.github/workflows/root-ci-config/__pycache__/build_utils.cpython-39.pyc`, `patch.txt`, and `.github/workflows/root-ci-config/test_file.py` won't be needed in the repo, please don't add them.; > ; > * `.github/workflows/test-coverage.yml` needs only one platform iiuc? Why does it have e.g. `build-macos`?; > ; > ; > I will have a closer look at the code after we chat tomorrow :-). Thank you for your help along the way @Axel-Naumann 💯 🙌,; I have made the proposed changes relating to the files, but I am not sure how to decrease the number of commits, would love to have your guidance on that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13394#issuecomment-1665533318
https://github.com/root-project/root/pull/13394#issuecomment-1665533318:322,Modifiability,config,config,322,"> Awesome, @AniqJaved - thanks a lot for all your work!; > ; > * Could you please reduce the number of commits to something like 5 max? I'm happy to. show you how to rewrite the commit history.; > ; > * `.github/workflows/root-ci-config/__pycache__/build_utils.cpython-39.pyc`, `patch.txt`, and `.github/workflows/root-ci-config/test_file.py` won't be needed in the repo, please don't add them.; > ; > * `.github/workflows/test-coverage.yml` needs only one platform iiuc? Why does it have e.g. `build-macos`?; > ; > ; > I will have a closer look at the code after we chat tomorrow :-). Thank you for your help along the way @Axel-Naumann 💯 🙌,; I have made the proposed changes relating to the files, but I am not sure how to decrease the number of commits, would love to have your guidance on that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13394#issuecomment-1665533318
https://github.com/root-project/root/pull/13394#issuecomment-1665533318:423,Testability,test,test-coverage,423,"> Awesome, @AniqJaved - thanks a lot for all your work!; > ; > * Could you please reduce the number of commits to something like 5 max? I'm happy to. show you how to rewrite the commit history.; > ; > * `.github/workflows/root-ci-config/__pycache__/build_utils.cpython-39.pyc`, `patch.txt`, and `.github/workflows/root-ci-config/test_file.py` won't be needed in the repo, please don't add them.; > ; > * `.github/workflows/test-coverage.yml` needs only one platform iiuc? Why does it have e.g. `build-macos`?; > ; > ; > I will have a closer look at the code after we chat tomorrow :-). Thank you for your help along the way @Axel-Naumann 💯 🙌,; I have made the proposed changes relating to the files, but I am not sure how to decrease the number of commits, would love to have your guidance on that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13394#issuecomment-1665533318
https://github.com/root-project/root/pull/13394#issuecomment-1665533318:781,Usability,guid,guidance,781,"> Awesome, @AniqJaved - thanks a lot for all your work!; > ; > * Could you please reduce the number of commits to something like 5 max? I'm happy to. show you how to rewrite the commit history.; > ; > * `.github/workflows/root-ci-config/__pycache__/build_utils.cpython-39.pyc`, `patch.txt`, and `.github/workflows/root-ci-config/test_file.py` won't be needed in the repo, please don't add them.; > ; > * `.github/workflows/test-coverage.yml` needs only one platform iiuc? Why does it have e.g. `build-macos`?; > ; > ; > I will have a closer look at the code after we chat tomorrow :-). Thank you for your help along the way @Axel-Naumann 💯 🙌,; I have made the proposed changes relating to the files, but I am not sure how to decrease the number of commits, would love to have your guidance on that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13394#issuecomment-1665533318
https://github.com/root-project/root/pull/13414#issuecomment-1672056213:341,Availability,error,error-reference,341,## [Codecov](https://app.codecov.io/gh/root-project/root/pull/13414?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) Report; > :exclamation: No coverage uploaded for pull request base (`master@0d1f204`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#section-missing-base-commit).; > The diff coverage is `n/a`. > :exclamation: Current head 15e8116 differs from pull request most recent head e2c1183. Consider uploading reports for the commit e2c1183 to get more accurate results. ```diff; @@ Coverage Diff @@; ## master #13414 +/- ##; ==========================================; Coverage ? 23.83% ; ==========================================; Files ? 8507 ; Lines ? 1719518 ; Branches ? 717767 ; ==========================================; Hits ? 409914 ; Misses ? 1083067 ; Partials ? 226537 ; ```. | Flag | Coverage Δ | |; |---|---|---|; | unittests | `23.83% <0.00%> (?)` | |. Flags with carried forward coverage won't be shown. [Click here](https://docs.codecov.io/docs/carryforward-flags?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#carryforward-flags-in-the-pull-request-comment) to find out more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13414#issuecomment-1672056213
https://github.com/root-project/root/pull/13414#issuecomment-1672056213:289,Usability,learn,learn,289,## [Codecov](https://app.codecov.io/gh/root-project/root/pull/13414?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) Report; > :exclamation: No coverage uploaded for pull request base (`master@0d1f204`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#section-missing-base-commit).; > The diff coverage is `n/a`. > :exclamation: Current head 15e8116 differs from pull request most recent head e2c1183. Consider uploading reports for the commit e2c1183 to get more accurate results. ```diff; @@ Coverage Diff @@; ## master #13414 +/- ##; ==========================================; Coverage ? 23.83% ; ==========================================; Files ? 8507 ; Lines ? 1719518 ; Branches ? 717767 ; ==========================================; Hits ? 409914 ; Misses ? 1083067 ; Partials ? 226537 ; ```. | Flag | Coverage Δ | |; |---|---|---|; | unittests | `23.83% <0.00%> (?)` | |. Flags with carried forward coverage won't be shown. [Click here](https://docs.codecov.io/docs/carryforward-flags?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#carryforward-flags-in-the-pull-request-comment) to find out more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13414#issuecomment-1672056213
https://github.com/root-project/root/issues/13418#issuecomment-1679169141:604,Availability,error,error,604,"Hi Olivier,. I had a similar situation with a Fermilab server and requested computing support to install missing libraries. I do not have a CERN account so can't open a ticket for lxplus9, but it makes sense to install the libraries there to make the machine usable with ROOT. Andrei. ________________________________________; From: Olivier Couet ***@***.***>; Sent: Tuesday, August 15, 2023 9:27 AM; To: root-project/root; Cc: Andrei Gaponenko; Author; Subject: Re: [root-project/root] clip edit in GL viewer is still broken (Issue #13418). Gl does not seem properly installed there:. $ glxgears; libGL error: No matching fbConfigs or visuals found; libGL error: failed to load driver: swrast; Error: glXCreateContext failed. —; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_root-2Dproject_root_issues_13418-23issuecomment-2D1679025586&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=ejeOXHRM6NnnTa4TA470cGD4wj63fFxBITffmOQ02lc&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_AAXVCGSO4HWIKORE7ZRV24LXVOBONANCNFSM6AAAAAA3I665NU&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=Qa0IvEvjeyrinJUtkFkmyfcNPybfsSDQQI7cpx17nBw&e=>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13418#issuecomment-1679169141
https://github.com/root-project/root/issues/13418#issuecomment-1679169141:657,Availability,error,error,657,"Hi Olivier,. I had a similar situation with a Fermilab server and requested computing support to install missing libraries. I do not have a CERN account so can't open a ticket for lxplus9, but it makes sense to install the libraries there to make the machine usable with ROOT. Andrei. ________________________________________; From: Olivier Couet ***@***.***>; Sent: Tuesday, August 15, 2023 9:27 AM; To: root-project/root; Cc: Andrei Gaponenko; Author; Subject: Re: [root-project/root] clip edit in GL viewer is still broken (Issue #13418). Gl does not seem properly installed there:. $ glxgears; libGL error: No matching fbConfigs or visuals found; libGL error: failed to load driver: swrast; Error: glXCreateContext failed. —; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_root-2Dproject_root_issues_13418-23issuecomment-2D1679025586&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=ejeOXHRM6NnnTa4TA470cGD4wj63fFxBITffmOQ02lc&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_AAXVCGSO4HWIKORE7ZRV24LXVOBONANCNFSM6AAAAAA3I665NU&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=Qa0IvEvjeyrinJUtkFkmyfcNPybfsSDQQI7cpx17nBw&e=>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13418#issuecomment-1679169141
https://github.com/root-project/root/issues/13418#issuecomment-1679169141:97,Deployability,install,install,97,"Hi Olivier,. I had a similar situation with a Fermilab server and requested computing support to install missing libraries. I do not have a CERN account so can't open a ticket for lxplus9, but it makes sense to install the libraries there to make the machine usable with ROOT. Andrei. ________________________________________; From: Olivier Couet ***@***.***>; Sent: Tuesday, August 15, 2023 9:27 AM; To: root-project/root; Cc: Andrei Gaponenko; Author; Subject: Re: [root-project/root] clip edit in GL viewer is still broken (Issue #13418). Gl does not seem properly installed there:. $ glxgears; libGL error: No matching fbConfigs or visuals found; libGL error: failed to load driver: swrast; Error: glXCreateContext failed. —; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_root-2Dproject_root_issues_13418-23issuecomment-2D1679025586&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=ejeOXHRM6NnnTa4TA470cGD4wj63fFxBITffmOQ02lc&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_AAXVCGSO4HWIKORE7ZRV24LXVOBONANCNFSM6AAAAAA3I665NU&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=Qa0IvEvjeyrinJUtkFkmyfcNPybfsSDQQI7cpx17nBw&e=>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13418#issuecomment-1679169141
https://github.com/root-project/root/issues/13418#issuecomment-1679169141:211,Deployability,install,install,211,"Hi Olivier,. I had a similar situation with a Fermilab server and requested computing support to install missing libraries. I do not have a CERN account so can't open a ticket for lxplus9, but it makes sense to install the libraries there to make the machine usable with ROOT. Andrei. ________________________________________; From: Olivier Couet ***@***.***>; Sent: Tuesday, August 15, 2023 9:27 AM; To: root-project/root; Cc: Andrei Gaponenko; Author; Subject: Re: [root-project/root] clip edit in GL viewer is still broken (Issue #13418). Gl does not seem properly installed there:. $ glxgears; libGL error: No matching fbConfigs or visuals found; libGL error: failed to load driver: swrast; Error: glXCreateContext failed. —; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_root-2Dproject_root_issues_13418-23issuecomment-2D1679025586&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=ejeOXHRM6NnnTa4TA470cGD4wj63fFxBITffmOQ02lc&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_AAXVCGSO4HWIKORE7ZRV24LXVOBONANCNFSM6AAAAAA3I665NU&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=Qa0IvEvjeyrinJUtkFkmyfcNPybfsSDQQI7cpx17nBw&e=>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13418#issuecomment-1679169141
https://github.com/root-project/root/issues/13418#issuecomment-1679169141:568,Deployability,install,installed,568,"Hi Olivier,. I had a similar situation with a Fermilab server and requested computing support to install missing libraries. I do not have a CERN account so can't open a ticket for lxplus9, but it makes sense to install the libraries there to make the machine usable with ROOT. Andrei. ________________________________________; From: Olivier Couet ***@***.***>; Sent: Tuesday, August 15, 2023 9:27 AM; To: root-project/root; Cc: Andrei Gaponenko; Author; Subject: Re: [root-project/root] clip edit in GL viewer is still broken (Issue #13418). Gl does not seem properly installed there:. $ glxgears; libGL error: No matching fbConfigs or visuals found; libGL error: failed to load driver: swrast; Error: glXCreateContext failed. —; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_root-2Dproject_root_issues_13418-23issuecomment-2D1679025586&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=ejeOXHRM6NnnTa4TA470cGD4wj63fFxBITffmOQ02lc&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_AAXVCGSO4HWIKORE7ZRV24LXVOBONANCNFSM6AAAAAA3I665NU&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=Qa0IvEvjeyrinJUtkFkmyfcNPybfsSDQQI7cpx17nBw&e=>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13418#issuecomment-1679169141
https://github.com/root-project/root/issues/13418#issuecomment-1679169141:674,Performance,load,load,674,"Hi Olivier,. I had a similar situation with a Fermilab server and requested computing support to install missing libraries. I do not have a CERN account so can't open a ticket for lxplus9, but it makes sense to install the libraries there to make the machine usable with ROOT. Andrei. ________________________________________; From: Olivier Couet ***@***.***>; Sent: Tuesday, August 15, 2023 9:27 AM; To: root-project/root; Cc: Andrei Gaponenko; Author; Subject: Re: [root-project/root] clip edit in GL viewer is still broken (Issue #13418). Gl does not seem properly installed there:. $ glxgears; libGL error: No matching fbConfigs or visuals found; libGL error: failed to load driver: swrast; Error: glXCreateContext failed. —; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_root-2Dproject_root_issues_13418-23issuecomment-2D1679025586&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=ejeOXHRM6NnnTa4TA470cGD4wj63fFxBITffmOQ02lc&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_AAXVCGSO4HWIKORE7ZRV24LXVOBONANCNFSM6AAAAAA3I665NU&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=Qa0IvEvjeyrinJUtkFkmyfcNPybfsSDQQI7cpx17nBw&e=>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13418#issuecomment-1679169141
https://github.com/root-project/root/issues/13418#issuecomment-1679169141:259,Usability,usab,usable,259,"Hi Olivier,. I had a similar situation with a Fermilab server and requested computing support to install missing libraries. I do not have a CERN account so can't open a ticket for lxplus9, but it makes sense to install the libraries there to make the machine usable with ROOT. Andrei. ________________________________________; From: Olivier Couet ***@***.***>; Sent: Tuesday, August 15, 2023 9:27 AM; To: root-project/root; Cc: Andrei Gaponenko; Author; Subject: Re: [root-project/root] clip edit in GL viewer is still broken (Issue #13418). Gl does not seem properly installed there:. $ glxgears; libGL error: No matching fbConfigs or visuals found; libGL error: failed to load driver: swrast; Error: glXCreateContext failed. —; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_root-2Dproject_root_issues_13418-23issuecomment-2D1679025586&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=ejeOXHRM6NnnTa4TA470cGD4wj63fFxBITffmOQ02lc&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_AAXVCGSO4HWIKORE7ZRV24LXVOBONANCNFSM6AAAAAA3I665NU&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=Qa0IvEvjeyrinJUtkFkmyfcNPybfsSDQQI7cpx17nBw&e=>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13418#issuecomment-1679169141
https://github.com/root-project/root/pull/13430#issuecomment-1678240847:341,Availability,error,error-reference,341,## [Codecov](https://app.codecov.io/gh/root-project/root/pull/13430?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) Report; > :exclamation: No coverage uploaded for pull request base (`master@6276954`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#section-missing-base-commit).; > The diff coverage is `n/a`. > :exclamation: Current head 85ba098 differs from pull request most recent head 6c6f6da. Consider uploading reports for the commit 6c6f6da to get more accurate results. ```diff; @@ Coverage Diff @@; ## master #13430 +/- ##; ==========================================; Coverage ? 23.80% ; ==========================================; Files ? 8507 ; Lines ? 1719515 ; Branches ? 717824 ; ==========================================; Hits ? 409380 ; Misses ? 1083984 ; Partials ? 226151 ; ```. | Flag | Coverage Δ | |; |---|---|---|; | unittests | `23.80% <0.00%> (?)` | |. Flags with carried forward coverage won't be shown. [Click here](https://docs.codecov.io/docs/carryforward-flags?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#carryforward-flags-in-the-pull-request-comment) to find out more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13430#issuecomment-1678240847
https://github.com/root-project/root/pull/13430#issuecomment-1678240847:289,Usability,learn,learn,289,## [Codecov](https://app.codecov.io/gh/root-project/root/pull/13430?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) Report; > :exclamation: No coverage uploaded for pull request base (`master@6276954`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#section-missing-base-commit).; > The diff coverage is `n/a`. > :exclamation: Current head 85ba098 differs from pull request most recent head 6c6f6da. Consider uploading reports for the commit 6c6f6da to get more accurate results. ```diff; @@ Coverage Diff @@; ## master #13430 +/- ##; ==========================================; Coverage ? 23.80% ; ==========================================; Files ? 8507 ; Lines ? 1719515 ; Branches ? 717824 ; ==========================================; Hits ? 409380 ; Misses ? 1083984 ; Partials ? 226151 ; ```. | Flag | Coverage Δ | |; |---|---|---|; | unittests | `23.80% <0.00%> (?)` | |. Flags with carried forward coverage won't be shown. [Click here](https://docs.codecov.io/docs/carryforward-flags?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#carryforward-flags-in-the-pull-request-comment) to find out more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13430#issuecomment-1678240847
https://github.com/root-project/root/pull/13466#issuecomment-1681134447:341,Availability,error,error-reference,341,## [Codecov](https://app.codecov.io/gh/root-project/root/pull/13466?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) Report; > :exclamation: No coverage uploaded for pull request base (`master@4f0450b`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#section-missing-base-commit).; > The diff coverage is `n/a`. ```diff; @@ Coverage Diff @@; ## master #13466 +/- ##; ==========================================; Coverage ? 23.84% ; ==========================================; Files ? 8508 ; Lines ? 1719789 ; Branches ? 717998 ; ==========================================; Hits ? 410002 ; Misses ? 1083133 ; Partials ? 226654 ; ```. | [Flag](https://app.codecov.io/gh/root-project/root/pull/13466/flags?src=pr&el=flags&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) | Coverage Δ | |; |---|---|---|; | [unittests](https://app.codecov.io/gh/root-project/root/pull/13466/flags?src=pr&el=flag&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) | `23.84% <0.00%> (?)` | |. Flags with carried forward coverage won't be shown. [Click here](https://docs.codecov.io/docs/carryforward-flags?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#carryforward-flags-in-the-pull-request-comment) to find out more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466#issuecomment-1681134447
https://github.com/root-project/root/pull/13466#issuecomment-1681134447:289,Usability,learn,learn,289,## [Codecov](https://app.codecov.io/gh/root-project/root/pull/13466?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) Report; > :exclamation: No coverage uploaded for pull request base (`master@4f0450b`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#section-missing-base-commit).; > The diff coverage is `n/a`. ```diff; @@ Coverage Diff @@; ## master #13466 +/- ##; ==========================================; Coverage ? 23.84% ; ==========================================; Files ? 8508 ; Lines ? 1719789 ; Branches ? 717998 ; ==========================================; Hits ? 410002 ; Misses ? 1083133 ; Partials ? 226654 ; ```. | [Flag](https://app.codecov.io/gh/root-project/root/pull/13466/flags?src=pr&el=flags&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) | Coverage Δ | |; |---|---|---|; | [unittests](https://app.codecov.io/gh/root-project/root/pull/13466/flags?src=pr&el=flag&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) | `23.84% <0.00%> (?)` | |. Flags with carried forward coverage won't be shown. [Click here](https://docs.codecov.io/docs/carryforward-flags?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#carryforward-flags-in-the-pull-request-comment) to find out more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13466#issuecomment-1681134447
https://github.com/root-project/root/pull/13478#issuecomment-1685023865:341,Availability,error,error-reference,341,## [Codecov](https://app.codecov.io/gh/root-project/root/pull/13478?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) Report; > :exclamation: No coverage uploaded for pull request base (`master@ebe4f59`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#section-missing-base-commit).; > The diff coverage is `n/a`. ```diff; @@ Coverage Diff @@; ## master #13478 +/- ##; ==========================================; Coverage ? 23.80% ; ==========================================; Files ? 8508 ; Lines ? 1719800 ; Branches ? 718008 ; ==========================================; Hits ? 409426 ; Misses ? 1083951 ; Partials ? 226423 ; ```. | [Flag](https://app.codecov.io/gh/root-project/root/pull/13478/flags?src=pr&el=flags&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) | Coverage Δ | |; |---|---|---|; | [unittests](https://app.codecov.io/gh/root-project/root/pull/13478/flags?src=pr&el=flag&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) | `23.80% <0.00%> (?)` | |. Flags with carried forward coverage won't be shown. [Click here](https://docs.codecov.io/docs/carryforward-flags?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#carryforward-flags-in-the-pull-request-comment) to find out more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478#issuecomment-1685023865
https://github.com/root-project/root/pull/13478#issuecomment-1685023865:289,Usability,learn,learn,289,## [Codecov](https://app.codecov.io/gh/root-project/root/pull/13478?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) Report; > :exclamation: No coverage uploaded for pull request base (`master@ebe4f59`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#section-missing-base-commit).; > The diff coverage is `n/a`. ```diff; @@ Coverage Diff @@; ## master #13478 +/- ##; ==========================================; Coverage ? 23.80% ; ==========================================; Files ? 8508 ; Lines ? 1719800 ; Branches ? 718008 ; ==========================================; Hits ? 409426 ; Misses ? 1083951 ; Partials ? 226423 ; ```. | [Flag](https://app.codecov.io/gh/root-project/root/pull/13478/flags?src=pr&el=flags&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) | Coverage Δ | |; |---|---|---|; | [unittests](https://app.codecov.io/gh/root-project/root/pull/13478/flags?src=pr&el=flag&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project) | `23.80% <0.00%> (?)` | |. Flags with carried forward coverage won't be shown. [Click here](https://docs.codecov.io/docs/carryforward-flags?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=root-project#carryforward-flags-in-the-pull-request-comment) to find out more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13478#issuecomment-1685023865
https://github.com/root-project/root/issues/13503#issuecomment-1697016701:14,Usability,simpl,simple,14,There is very simple fix to make `TNetXNGFile::Close()` reentrant.; See PR: https://github.com/root-project/root/pull/13559,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503#issuecomment-1697016701
https://github.com/root-project/root/pull/13506#issuecomment-1689807535:48,Usability,simpl,simple,48,Here is macro which reproduces the problem with simple histogram/latex drawing. [dupl.cxx.txt](https://github.com/root-project/root/files/12418698/dupl.cxx.txt). Important that canvas should be stored/restored from I/O.; Only in such case `ROOT::Detail::HasBeenDeleted` fails,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506#issuecomment-1689807535
https://github.com/root-project/root/issues/13511#issuecomment-1696533640:189,Usability,undo,undo,189,I noticed that the code you upload contains:; ```; gROOT->Reset();; ```; This call is only valid when used in an unnamed macro. In all other scenario it has the potential of being harmful (undo/reset too many things). Please try again after removing those lines.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511#issuecomment-1696533640
https://github.com/root-project/root/issues/13536#issuecomment-1693395998:2148,Availability,reliab,reliably,2148,"s as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536#issuecomment-1693395998
https://github.com/root-project/root/issues/13536#issuecomment-1693395998:4,Energy Efficiency,green,greenc-FNAL,4,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/ta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536#issuecomment-1693395998
https://github.com/root-project/root/issues/13536#issuecomment-1693395998:3596,Energy Efficiency,adapt,adapt,3596,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536#issuecomment-1693395998
https://github.com/root-project/root/issues/13536#issuecomment-1693395998:398,Integrability,depend,depend,398,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/ta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536#issuecomment-1693395998
https://github.com/root-project/root/issues/13536#issuecomment-1693395998:1031,Integrability,depend,dependencies,1031,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/ta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536#issuecomment-1693395998
https://github.com/root-project/root/issues/13536#issuecomment-1693395998:1475,Integrability,depend,dependencies,1475,"next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536#issuecomment-1693395998
https://github.com/root-project/root/issues/13536#issuecomment-1693395998:1782,Integrability,protocol,protocols,1782,"there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536#issuecomment-1693395998
https://github.com/root-project/root/issues/13536#issuecomment-1693395998:3153,Integrability,interface,interface,3153,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536#issuecomment-1693395998
https://github.com/root-project/root/issues/13536#issuecomment-1693395998:3324,Integrability,depend,dependencies,3324,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536#issuecomment-1693395998
https://github.com/root-project/root/issues/13536#issuecomment-1693395998:3596,Modifiability,adapt,adapt,3596,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536#issuecomment-1693395998
https://github.com/root-project/root/issues/13536#issuecomment-1693395998:3690,Usability,clear,clear,3690,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536#issuecomment-1693395998
https://github.com/root-project/root/pull/13546#issuecomment-1707966075:159,Integrability,message,message,159,"> I am not sure that we should increment the number of fNRuns and log as if everything went fine if an exception was thrown during the event loop. a different message might be warranted. Indeed this could be a good idea, to further clarify that the RDF is not usable anymore and should just be thrown away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546#issuecomment-1707966075
https://github.com/root-project/root/pull/13546#issuecomment-1707966075:66,Testability,log,log,66,"> I am not sure that we should increment the number of fNRuns and log as if everything went fine if an exception was thrown during the event loop. a different message might be warranted. Indeed this could be a good idea, to further clarify that the RDF is not usable anymore and should just be thrown away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546#issuecomment-1707966075
https://github.com/root-project/root/pull/13546#issuecomment-1707966075:260,Usability,usab,usable,260,"> I am not sure that we should increment the number of fNRuns and log as if everything went fine if an exception was thrown during the event loop. a different message might be warranted. Indeed this could be a good idea, to further clarify that the RDF is not usable anymore and should just be thrown away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546#issuecomment-1707966075
https://github.com/root-project/root/pull/13546#issuecomment-1707994347:204,Usability,usab,usable,204,"> Not exactly the same. Sorry, I meant it's the same in the context that I mentioned: the computation graph is left in a state that at least I do not completely understand and I cannot guarantee is fully usable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546#issuecomment-1707994347
https://github.com/root-project/root/pull/13571#issuecomment-1705212121:7,Deployability,update,updated,7,I have updated the root-spi repo for the old (Jenkins) CI to learn about this new module and know that it should be built everywhere.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571#issuecomment-1705212121
https://github.com/root-project/root/pull/13571#issuecomment-1705212121:61,Usability,learn,learn,61,I have updated the root-spi repo for the old (Jenkins) CI to learn about this new module and know that it should be built everywhere.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571#issuecomment-1705212121
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:833,Testability,test,tests,833,"Build failed on ROOT-ubuntu2004/python3.; Running on root-ubuntu-2004-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/console).; ### Warnings:; - [2023-08-31T18:23:40.513Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2023-08-31T18:29:46.289Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:990,Testability,test,testReport,990,"Build failed on ROOT-ubuntu2004/python3.; Running on root-ubuntu-2004-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/console).; ### Warnings:; - [2023-08-31T18:23:40.513Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2023-08-31T18:29:46.289Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:1215,Testability,test,testReport,1215,"/job/root-pullrequests-build/183764/console).; ### Warnings:; - [2023-08-31T18:23:40.513Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2023-08-31T18:29:46.289Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/te",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:1440,Testability,test,testReport,1440,"5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2023-08-31T18:29:46.289Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/project",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:1692,Testability,test,testReport,1692, type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Classification/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Regression/); -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:1962,Testability,test,testReport,1962,enkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Classification/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Regression/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Multiclass](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Multiclass/); - [projectroot.roottest.root.roofitstats.roottest_root_roofitstats_RooD,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:2199,Testability,test,testReport,2199,es.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Classification/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Regression/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Multiclass](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Multiclass/); - [projectroot.roottest.root.roofitstats.roottest_root_roofitstats_RooDataSet_ASCII_out](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.root/roofitstats/roottest_root_roofitstats_RooDataSet_ASCII_out/). And 14 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:2295,Testability,test,test,2295,es.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Classification/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Regression/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Multiclass](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Multiclass/); - [projectroot.roottest.root.roofitstats.roottest_root_roofitstats_RooDataSet_ASCII_out](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.root/roofitstats/roottest_root_roofitstats_RooDataSet_ASCII_out/). And 14 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:2408,Testability,test,testReport,2408,es.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Classification/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Regression/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Multiclass](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Multiclass/); - [projectroot.roottest.root.roofitstats.roottest_root_roofitstats_RooDataSet_ASCII_out](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.root/roofitstats/roottest_root_roofitstats_RooDataSet_ASCII_out/). And 14 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:2442,Testability,test,test,2442,es.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Classification/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Regression/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Multiclass](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Multiclass/); - [projectroot.roottest.root.roofitstats.roottest_root_roofitstats_RooDataSet_ASCII_out](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.root/roofitstats/roottest_root_roofitstats_RooDataSet_ASCII_out/). And 14 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:2503,Testability,test,test,2503,es.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Classification/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Regression/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Multiclass](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Multiclass/); - [projectroot.roottest.root.roofitstats.roottest_root_roofitstats_RooDataSet_ASCII_out](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.root/roofitstats/roottest_root_roofitstats_RooDataSet_ASCII_out/). And 14 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:2612,Testability,test,testReport,2612,es.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Classification/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Regression/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Multiclass](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Multiclass/); - [projectroot.roottest.root.roofitstats.roottest_root_roofitstats_RooDataSet_ASCII_out](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.root/roofitstats/roottest_root_roofitstats_RooDataSet_ASCII_out/). And 14 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:2646,Testability,test,test,2646,es.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Classification/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Regression/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Multiclass](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Multiclass/); - [projectroot.roottest.root.roofitstats.roottest_root_roofitstats_RooDataSet_ASCII_out](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.root/roofitstats/roottest_root_roofitstats_RooDataSet_ASCII_out/). And 14 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:2703,Testability,test,test,2703,es.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Classification/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Regression/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Multiclass](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Multiclass/); - [projectroot.roottest.root.roofitstats.roottest_root_roofitstats_RooDataSet_ASCII_out](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.root/roofitstats/roottest_root_roofitstats_RooDataSet_ASCII_out/). And 14 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:2812,Testability,test,testReport,2812,es.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Classification/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Regression/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Multiclass](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Multiclass/); - [projectroot.roottest.root.roofitstats.roottest_root_roofitstats_RooDataSet_ASCII_out](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.root/roofitstats/roottest_root_roofitstats_RooDataSet_ASCII_out/). And 14 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:2846,Testability,test,test,2846,es.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Classification/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Regression/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Multiclass](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Multiclass/); - [projectroot.roottest.root.roofitstats.roottest_root_roofitstats_RooDataSet_ASCII_out](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.root/roofitstats/roottest_root_roofitstats_RooDataSet_ASCII_out/). And 14 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:3046,Testability,test,testReport,3046,es.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Classification/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Regression/); - [projectroot.tmva.pymva.test.PyMVA_Keras_Multiclass](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.tmva.pymva/test/PyMVA_Keras_Multiclass/); - [projectroot.roottest.root.roofitstats.roottest_root_roofitstats_RooDataSet_ASCII_out](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.root/roofitstats/roottest_root_roofitstats_RooDataSet_ASCII_out/). And 14 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:378,Usability,clear,clearing,378,"Build failed on ROOT-ubuntu2004/python3.; Running on root-ubuntu-2004-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/console).; ### Warnings:; - [2023-08-31T18:23:40.513Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2023-08-31T18:29:46.289Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13577#issuecomment-1701582600:657,Usability,clear,clearing,657,"Build failed on ROOT-ubuntu2004/python3.; Running on root-ubuntu-2004-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/console).; ### Warnings:; - [2023-08-31T18:23:40.513Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2023-08-31T18:29:46.289Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600
https://github.com/root-project/root/pull/13596#issuecomment-1705308623:55,Usability,simpl,simply,55,This PR needs to have its history rewritten - possible simply squashing all commits.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13596#issuecomment-1705308623
https://github.com/root-project/root/pull/13606#issuecomment-2104829522:154,Deployability,release,release,154,"Glad if this helped someone.; However, I don't understand how users are supposed to learn about this feature (without googling).; There is nothing in the release notes on that. ; https://root.cern/doc/v630/release-notes.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606#issuecomment-2104829522
https://github.com/root-project/root/pull/13606#issuecomment-2104829522:206,Deployability,release,release-notes,206,"Glad if this helped someone.; However, I don't understand how users are supposed to learn about this feature (without googling).; There is nothing in the release notes on that. ; https://root.cern/doc/v630/release-notes.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606#issuecomment-2104829522
https://github.com/root-project/root/pull/13606#issuecomment-2104829522:84,Usability,learn,learn,84,"Glad if this helped someone.; However, I don't understand how users are supposed to learn about this feature (without googling).; There is nothing in the release notes on that. ; https://root.cern/doc/v630/release-notes.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606#issuecomment-2104829522
https://github.com/root-project/root/pull/13620#issuecomment-1713698917:85,Deployability,update,update,85,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that?. Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620#issuecomment-1713698917
https://github.com/root-project/root/pull/13620#issuecomment-1713698917:338,Deployability,update,update,338,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that?. Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620#issuecomment-1713698917
https://github.com/root-project/root/pull/13620#issuecomment-1713698917:374,Usability,simpl,simply,374,"> > and- in its current implementation - a working ROOT build as part of the version update. > Why is/was that?. Ouch that's wrong, that was true in the past, before I had replaced the ROOT script writing out the version number with a Python script. But the motivation for this PR is still there: instead of running a magic build step to update the version files we can now simply edit the header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620#issuecomment-1713698917
https://github.com/root-project/root/pull/13641#issuecomment-1719035285:155,Deployability,patch,patches,155,"Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1719035285
https://github.com/root-project/root/pull/13641#issuecomment-1719035285:177,Usability,simpl,simplifies,177,"Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1719035285
https://github.com/root-project/root/pull/13641#issuecomment-1719042201:157,Deployability,patch,patches,157,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green?. Yes, and from a quick look it seems ~all builds are failing with; ```; Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed.; ```; which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1719042201
https://github.com/root-project/root/pull/13641#issuecomment-1719042201:767,Energy Efficiency,green,green,767,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green?. Yes, and from a quick look it seems ~all builds are failing with; ```; Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed.; ```; which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1719042201
https://github.com/root-project/root/pull/13641#issuecomment-1719042201:746,Testability,test,tests,746,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green?. Yes, and from a quick look it seems ~all builds are failing with; ```; Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed.; ```; which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1719042201
https://github.com/root-project/root/pull/13641#issuecomment-1719042201:179,Usability,simpl,simplifies,179,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green?. Yes, and from a quick look it seems ~all builds are failing with; ```; Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed.; ```; which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1719042201
https://github.com/root-project/root/pull/13641#issuecomment-1723409634:308,Energy Efficiency,allocate,allocate,308,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1723409634
https://github.com/root-project/root/pull/13641#issuecomment-1723409634:442,Energy Efficiency,allocate,allocated,442,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1723409634
https://github.com/root-project/root/pull/13641#issuecomment-1723409634:472,Energy Efficiency,allocate,allocated,472,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1723409634
https://github.com/root-project/root/pull/13641#issuecomment-1723409634:687,Testability,test,test,687,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1723409634
https://github.com/root-project/root/pull/13641#issuecomment-1723409634:658,Usability,simpl,simple,658,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1723409634
https://github.com/root-project/root/issues/13656#issuecomment-1722875388:107,Availability,error,error,107,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):; ```; error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' ; ""filter expression returns a type that is not convertible to bool""; ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,; Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656#issuecomment-1722875388
https://github.com/root-project/root/issues/13656#issuecomment-1722875388:274,Availability,error,error,274,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):; ```; error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' ; ""filter expression returns a type that is not convertible to bool""; ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,; Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656#issuecomment-1722875388
https://github.com/root-project/root/issues/13656#issuecomment-1722875388:292,Usability,clear,clear,292,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):; ```; error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' ; ""filter expression returns a type that is not convertible to bool""; ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,; Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656#issuecomment-1722875388
https://github.com/root-project/root/pull/13688#issuecomment-1728406175:42,Usability,simpl,simply,42,It is already in mathmore. The license is simply not FOSS (read it carefully if you care).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688#issuecomment-1728406175
https://github.com/root-project/root/pull/13688#issuecomment-1728435744:44,Usability,simpl,simply,44,"> It is already in mathmore. The license is simply not FOSS (read it carefully if you care). Where? The header and source ""seems"" to be saying GPL.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688#issuecomment-1728435744
https://github.com/root-project/root/issues/13707#issuecomment-1734979113:103,Usability,simpl,simplify,103,"About drawing with two axes. . Web graphics supports drawing of axes on both sides.; Therefore one can simplify drawing just doing:; ```; graph->Draw(""APL"");; graphPerCore->Draw(""PLX+Y+"");; ```. No need for extra transparent pads, no need for axis drawing emulation.; I attach macro and produced output. Also see `graph->GetXaxis()->SetNdivisions(nodes.size());` - as many divisions are required. [scaling_new.C.txt](https://github.com/root-project/root/files/12724374/scaling_new.C.txt); [scaling_new.pdf](https://github.com/root-project/root/files/12724375/scaling_new.pdf)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707#issuecomment-1734979113
https://github.com/root-project/root/issues/13708#issuecomment-1733934184:28,Usability,simpl,simple,28,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```; {; auto *c = new TCanvas(""c4"", """", 720, 1024);; c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);; c->cd(1);; f->Draw();; gPad->Update();. c->cd(2);; gPad->Update();; f->DrawIntegral();; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708#issuecomment-1733934184
https://github.com/root-project/root/issues/13708#issuecomment-1734508407:251,Usability,simpl,simple,251,It would be good to have some warning here or extension of the initial use case.; I am mainly running compiled root in these days.. Is there any specific reasons why it is only meant to be used in interactive in the first place while the fix looks so simple ?. @couet,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708#issuecomment-1734508407
https://github.com/root-project/root/issues/13708#issuecomment-1734857976:373,Usability,simpl,simpler,373,[The way it is implemented](https://root.cern.ch/doc/master/TF1_8cxx_source.html#l01408) makes it mandatory to have an active pad with the TF1 drawn in it. That's why you need to add these `gPad->Update()` if you really want to use this function (see my first example). My second reply does exactly the same thing as DrawIntegral without the `GetSelectedPad()`. That's the simpler/better way when you run compiled ROOT like you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708#issuecomment-1734857976
https://github.com/root-project/root/pull/13720#issuecomment-1735428320:97,Testability,test,tests,97,"This is an interesting situation. The build on mac12arm/cxx20 did not fail, it's ""unstable"". All tests pass but there are warnings triggered by TBB. The version is simply too old (2019). On Mac13, cxx17 or cxx20, TBB does not even build. A PR is coming to propose a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13720#issuecomment-1735428320
https://github.com/root-project/root/pull/13720#issuecomment-1735428320:164,Usability,simpl,simply,164,"This is an interesting situation. The build on mac12arm/cxx20 did not fail, it's ""unstable"". All tests pass but there are warnings triggered by TBB. The version is simply too old (2019). On Mac13, cxx17 or cxx20, TBB does not even build. A PR is coming to propose a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13720#issuecomment-1735428320
https://github.com/root-project/root/pull/13724#issuecomment-1736762182:315,Deployability,configurat,configuration,315,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it?. Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724#issuecomment-1736762182
https://github.com/root-project/root/pull/13724#issuecomment-1736762182:315,Modifiability,config,configuration,315,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it?. Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724#issuecomment-1736762182
https://github.com/root-project/root/pull/13724#issuecomment-1736762182:299,Usability,simpl,simplifying,299,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it?. Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724#issuecomment-1736762182
https://github.com/root-project/root/pull/13748#issuecomment-1816424024:150,Integrability,interface,interface,150,"Hi! Since I didn't get feedback yet, I decided to just merge the refactor to check the consistency without the try-catch hack. If you need the public interface after all, fee free to open a new PR about that once this one is merged :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748#issuecomment-1816424024
https://github.com/root-project/root/pull/13748#issuecomment-1816424024:65,Modifiability,refactor,refactor,65,"Hi! Since I didn't get feedback yet, I decided to just merge the refactor to check the consistency without the try-catch hack. If you need the public interface after all, fee free to open a new PR about that once this one is merged :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748#issuecomment-1816424024
https://github.com/root-project/root/pull/13748#issuecomment-1816424024:23,Usability,feedback,feedback,23,"Hi! Since I didn't get feedback yet, I decided to just merge the refactor to check the consistency without the try-catch hack. If you need the public interface after all, fee free to open a new PR about that once this one is merged :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748#issuecomment-1816424024
https://github.com/root-project/root/pull/13752#issuecomment-1838159186:171,Availability,error,error,171,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752#issuecomment-1838159186
https://github.com/root-project/root/pull/13752#issuecomment-1838159186:262,Usability,clear,clear,262,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752#issuecomment-1838159186
https://github.com/root-project/root/pull/13777#issuecomment-1743507531:50,Availability,failure,failure,50,"Thanks for the review @dpiparo!. So far, the only failure is the one on ubuntu 2204 that was also seen before this PR:; https://github.com/root-project/root/pull/13775#issuecomment-1743080607. If there are no regressions in the CI output with respect to the other PR I linked, I will merge this PR and then follow up with more backports tomorrow based on the feedback from the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13777#issuecomment-1743507531
https://github.com/root-project/root/pull/13777#issuecomment-1743507531:359,Usability,feedback,feedback,359,"Thanks for the review @dpiparo!. So far, the only failure is the one on ubuntu 2204 that was also seen before this PR:; https://github.com/root-project/root/pull/13775#issuecomment-1743080607. If there are no regressions in the CI output with respect to the other PR I linked, I will merge this PR and then follow up with more backports tomorrow based on the feedback from the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13777#issuecomment-1743507531
https://github.com/root-project/root/pull/13779#issuecomment-1806758875:566,Safety,safe,safely,566,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name); 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779#issuecomment-1806758875
https://github.com/root-project/root/pull/13779#issuecomment-1806758875:439,Testability,log,logical,439,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name); 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779#issuecomment-1806758875
https://github.com/root-project/root/pull/13779#issuecomment-1806758875:185,Usability,clear,clear,185,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name); 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779#issuecomment-1806758875
https://github.com/root-project/root/pull/13779#issuecomment-1820886920:1640,Deployability,update,update,1640,"> I also have a general comment,; > ; > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342; > ; > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:; > ; > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name); > ; > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?. This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779#issuecomment-1820886920
https://github.com/root-project/root/pull/13779#issuecomment-1820886920:585,Safety,safe,safely,585,"> I also have a general comment,; > ; > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342; > ; > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:; > ; > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name); > ; > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?. This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779#issuecomment-1820886920
https://github.com/root-project/root/pull/13779#issuecomment-1820886920:452,Testability,log,logical,452,"> I also have a general comment,; > ; > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342; > ; > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:; > ; > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name); > ; > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?. This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779#issuecomment-1820886920
https://github.com/root-project/root/pull/13779#issuecomment-1820886920:198,Usability,clear,clear,198,"> I also have a general comment,; > ; > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342; > ; > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:; > ; > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name); > ; > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?. This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779#issuecomment-1820886920
https://github.com/root-project/root/pull/13779#issuecomment-1822922214:88,Availability,down,down,88,">simplify frame layout. seems like one step in the right direction in terms of trimming down number of ""speed bumps"" in reading things!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779#issuecomment-1822922214
https://github.com/root-project/root/pull/13779#issuecomment-1822922214:1,Usability,simpl,simplify,1,">simplify frame layout. seems like one step in the right direction in terms of trimming down number of ""speed bumps"" in reading things!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779#issuecomment-1822922214
https://github.com/root-project/root/pull/13787#issuecomment-1744852013:261,Availability,failure,failures,261,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED; =============================== warnings summary ===============================; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations; return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead.; from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html; ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787#issuecomment-1744852013
https://github.com/root-project/root/pull/13787#issuecomment-1744852013:200,Deployability,patch,patch,200,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED; =============================== warnings summary ===============================; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations; return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead.; from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html; ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787#issuecomment-1744852013
https://github.com/root-project/root/pull/13787#issuecomment-1744852013:1159,Deployability,release,release,1159,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED; =============================== warnings summary ===============================; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations; return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead.; from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html; ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787#issuecomment-1744852013
https://github.com/root-project/root/pull/13787#issuecomment-1744852013:1446,Deployability,release,release,1446,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED; =============================== warnings summary ===============================; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations; return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead.; from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html; ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787#issuecomment-1744852013
https://github.com/root-project/root/pull/13787#issuecomment-1744852013:998,Safety,safe,safe,998,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED; =============================== warnings summary ===============================; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations; return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead.; from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html; ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787#issuecomment-1744852013
https://github.com/root-project/root/pull/13787#issuecomment-1744852013:114,Testability,test,test,114,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED; =============================== warnings summary ===============================; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations; return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead.; from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html; ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787#issuecomment-1744852013
https://github.com/root-project/root/pull/13787#issuecomment-1744852013:241,Testability,test,test,241,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED; =============================== warnings summary ===============================; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations; return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead.; from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html; ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787#issuecomment-1744852013
https://github.com/root-project/root/pull/13787#issuecomment-1744852013:1682,Testability,test,test,1682,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED; =============================== warnings summary ===============================; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations; return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead.; from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html; ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787#issuecomment-1744852013
https://github.com/root-project/root/pull/13787#issuecomment-1744852013:1123,Usability,guid,guidance,1123,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED; =============================== warnings summary ===============================; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations; return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead.; from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html; ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787#issuecomment-1744852013
https://github.com/root-project/root/issues/13798#issuecomment-1745696812:25,Availability,failure,failure,25,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798#issuecomment-1745696812
https://github.com/root-project/root/issues/13798#issuecomment-1745696812:86,Deployability,install,installation,86,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798#issuecomment-1745696812
https://github.com/root-project/root/issues/13798#issuecomment-1745696812:207,Modifiability,config,config,207,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798#issuecomment-1745696812
https://github.com/root-project/root/issues/13798#issuecomment-1745696812:132,Usability,simpl,simpler,132,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798#issuecomment-1745696812
https://github.com/root-project/root/issues/13798#issuecomment-1746991396:101,Usability,usab,usability,101,"Hello. I think this issue is quite relevant, not only for distributed execution, but also for PyROOT usability in general. This is why I proposed these changes, in case they turn out to seem useful https://github.com/root-project/root/pull/13803",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798#issuecomment-1746991396
https://github.com/root-project/root/pull/13808#issuecomment-1750234087:44,Usability,simpl,simply,44,I am checking what's going on. I might have simply screwed up the backport.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1750234087
https://github.com/root-project/root/pull/13808#issuecomment-1893308958:41,Availability,failure,failures,41,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1893308958
https://github.com/root-project/root/pull/13808#issuecomment-1893308958:508,Deployability,integrat,integrating,508,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1893308958
https://github.com/root-project/root/pull/13808#issuecomment-1893308958:608,Deployability,release,releases,608,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1893308958
https://github.com/root-project/root/pull/13808#issuecomment-1893308958:1059,Energy Efficiency,reduce,reduces,1059,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1893308958
https://github.com/root-project/root/pull/13808#issuecomment-1893308958:508,Integrability,integrat,integrating,508,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1893308958
https://github.com/root-project/root/pull/13808#issuecomment-1893308958:535,Integrability,synchroniz,synchronized,535,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1893308958
https://github.com/root-project/root/pull/13808#issuecomment-1893308958:227,Security,access,access,227,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1893308958
https://github.com/root-project/root/pull/13808#issuecomment-1893308958:36,Testability,test,test,36,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1893308958
https://github.com/root-project/root/pull/13808#issuecomment-1893308958:1028,Usability,simpl,simple,1028,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1893308958
https://github.com/root-project/root/issues/13815#issuecomment-1757758714:185,Availability,recover,recovery,185,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1757758714
https://github.com/root-project/root/issues/13815#issuecomment-1757758714:185,Safety,recover,recovery,185,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1757758714
https://github.com/root-project/root/issues/13815#issuecomment-1757758714:95,Usability,simpl,simplified,95,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1757758714
https://github.com/root-project/root/issues/13815#issuecomment-1768325139:699,Availability,error,errors,699,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1768325139
https://github.com/root-project/root/issues/13815#issuecomment-1768325139:416,Deployability,upgrade,upgrade,416,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1768325139
https://github.com/root-project/root/issues/13815#issuecomment-1768325139:576,Performance,load,loads,576,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1768325139
https://github.com/root-project/root/issues/13815#issuecomment-1768325139:671,Performance,load,loaded,671,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1768325139
https://github.com/root-project/root/issues/13815#issuecomment-1768325139:305,Testability,test,test,305,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1768325139
https://github.com/root-project/root/issues/13815#issuecomment-1768325139:463,Testability,test,test,463,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1768325139
https://github.com/root-project/root/issues/13815#issuecomment-1768325139:507,Testability,test,tests,507,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1768325139
https://github.com/root-project/root/issues/13815#issuecomment-1768325139:216,Usability,clear,clearly,216,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1768325139
https://github.com/root-project/root/issues/13815#issuecomment-1768955888:81,Usability,clear,clearly,81,"> IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem. I would agree if it was not the fact that this is being triggered by a benign and wildely used class ... i.e. `std::pair` ... . Consequently, it my opinion we are almost guaranteed to have this problem appear almost immediately in the wild (i.e. code and code flow that worked before will now fail)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1768955888
https://github.com/root-project/root/issues/13834#issuecomment-1756960653:335,Usability,clear,clear,335,"> Yes, but on that web page, there is no module for MacOS14 yet. That might be the cause of the problem because when I build it from sources on my MacOS 14 machine I have no problem with TBrowser. The version for macOS14 should come soon. Meanwhile, you can try to build from the sources if you want. I'm sorry if I didn't make myself clear. I also build it from sources on my MacOS 14 machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13834#issuecomment-1756960653
https://github.com/root-project/root/pull/13840#issuecomment-1760218445:76,Modifiability,variab,variable,76,"> I wonder, whether all the new TList should be moved to an in-class member variable initializer (See [C++ Core Guidelines C.48](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-in-class-initializer))?. Yes, this is a fair point. Feel free to open another PR with that further simplification.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13840#issuecomment-1760218445
https://github.com/root-project/root/pull/13840#issuecomment-1760218445:292,Usability,simpl,simplification,292,"> I wonder, whether all the new TList should be moved to an in-class member variable initializer (See [C++ Core Guidelines C.48](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-in-class-initializer))?. Yes, this is a fair point. Feel free to open another PR with that further simplification.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13840#issuecomment-1760218445
https://github.com/root-project/root/pull/13840#issuecomment-1760285333:80,Modifiability,variab,variable,80,"> > I wonder, whether all the `new TList` should be moved to an in-class member variable initializer (See [C++ Core Guidelines C.48](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-in-class-initializer))?; > ; > Yes, this is a fair point. Feel free to open another PR with that further simplification. Hi @pcanal,. I started to look into this. And; ```cpp; #ifdef R__LESS_INCLUDES; class TList;; #else; #include ""TList.h""; #endif; ```; in `TTask.h` would need to be changed to a plain `#include ""TList.h""`. That sounds like it contradicts the `R__LESS_INCLUDES` movement?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13840#issuecomment-1760285333
https://github.com/root-project/root/pull/13840#issuecomment-1760285333:302,Usability,simpl,simplification,302,"> > I wonder, whether all the `new TList` should be moved to an in-class member variable initializer (See [C++ Core Guidelines C.48](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-in-class-initializer))?; > ; > Yes, this is a fair point. Feel free to open another PR with that further simplification. Hi @pcanal,. I started to look into this. And; ```cpp; #ifdef R__LESS_INCLUDES; class TList;; #else; #include ""TList.h""; #endif; ```; in `TTask.h` would need to be changed to a plain `#include ""TList.h""`. That sounds like it contradicts the `R__LESS_INCLUDES` movement?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13840#issuecomment-1760285333
https://github.com/root-project/root/issues/13846#issuecomment-1760263815:818,Usability,simpl,simpler,818,"Dear @mmaneyro ,. Thank you for your report. I take it that `Event.NParticles` is a sub-branch of the `Event` branch. What you describe is not really surprising, as `Redefine` is meant to substitute the values of the full column of the RDataFrame (column==branch). The difference in behaviour between non-jitted and jitted code is more surprising though. As a fast workaround, you could be more explicit about the columns you want to save in your output TTree by adding the list of column names to the `Snapshot` call. ```cpp; auto snap = df2.Snapshot(""LHEF"", ""out_snapshot.root"", {""Event.NParticles""});; ```. In order for me to better reproduce your problem though, I believe I would also need some instructions on how to generate the dictionaries for the classes in your file. Meanwhile, I can try to come up with a simpler reproducer, but having also your scenario would help. Cheers,; Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13846#issuecomment-1760263815
https://github.com/root-project/root/issues/13846#issuecomment-1760467268:398,Availability,error,error,398,"Dear Vincenzo,. I have already managed to work with the redefined trees I need, just with a number of workarounds. The tree files in this case are generated from Les Houches event files using the ExRootLHEFConverter from ExRootAnalysis. As such the branches are custom classes, which can be found in the ExRootAnalysis source files. I can't actually snapshot individual columns without gettting an error as there are TClonesArray column headers which specify the structure of the branches. The obvious fix would be to snapshot the column plus the header, but then that also gives me an error. I understand that Redefine is ideally used for columns, however I need to be able to apply different redefinitions to different leaves within a branch. Do RDataFrames just not support rewriting leaves/nested columns? The columns seem to actually be doing what I'd like before snapshotting. It seems like there's not a simple solution where I get to benefit from using RDataFrame and keep the tree structure untouched. I need to be able to add rows of data to each entry within a leaf (I'm actually concatenating multiple trees), and TTrees don't allow this as far as I can see. I guess I could define a new TTree by hand, setup the branches and fill new arrays from my original trees with the redefinitions I need,(just by iterating over every entry and data value). But then I'm still changing my TTree stucture, as with snapshot. Maybe next time I'll just start by rewriting ExRootLHEFConverter to take the data from two .lhe files, or just stick to TTrees, but to be fair this project has been my first attempt at using ROOT/C++. You code you learn!. What I am trying to do may be a bit of a niche use case, but I hope some of what I wrote is useful to you. Regards, ; Marina",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13846#issuecomment-1760467268
https://github.com/root-project/root/issues/13846#issuecomment-1760467268:586,Availability,error,error,586,"Dear Vincenzo,. I have already managed to work with the redefined trees I need, just with a number of workarounds. The tree files in this case are generated from Les Houches event files using the ExRootLHEFConverter from ExRootAnalysis. As such the branches are custom classes, which can be found in the ExRootAnalysis source files. I can't actually snapshot individual columns without gettting an error as there are TClonesArray column headers which specify the structure of the branches. The obvious fix would be to snapshot the column plus the header, but then that also gives me an error. I understand that Redefine is ideally used for columns, however I need to be able to apply different redefinitions to different leaves within a branch. Do RDataFrames just not support rewriting leaves/nested columns? The columns seem to actually be doing what I'd like before snapshotting. It seems like there's not a simple solution where I get to benefit from using RDataFrame and keep the tree structure untouched. I need to be able to add rows of data to each entry within a leaf (I'm actually concatenating multiple trees), and TTrees don't allow this as far as I can see. I guess I could define a new TTree by hand, setup the branches and fill new arrays from my original trees with the redefinitions I need,(just by iterating over every entry and data value). But then I'm still changing my TTree stucture, as with snapshot. Maybe next time I'll just start by rewriting ExRootLHEFConverter to take the data from two .lhe files, or just stick to TTrees, but to be fair this project has been my first attempt at using ROOT/C++. You code you learn!. What I am trying to do may be a bit of a niche use case, but I hope some of what I wrote is useful to you. Regards, ; Marina",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13846#issuecomment-1760467268
https://github.com/root-project/root/issues/13846#issuecomment-1760467268:911,Usability,simpl,simple,911,"Dear Vincenzo,. I have already managed to work with the redefined trees I need, just with a number of workarounds. The tree files in this case are generated from Les Houches event files using the ExRootLHEFConverter from ExRootAnalysis. As such the branches are custom classes, which can be found in the ExRootAnalysis source files. I can't actually snapshot individual columns without gettting an error as there are TClonesArray column headers which specify the structure of the branches. The obvious fix would be to snapshot the column plus the header, but then that also gives me an error. I understand that Redefine is ideally used for columns, however I need to be able to apply different redefinitions to different leaves within a branch. Do RDataFrames just not support rewriting leaves/nested columns? The columns seem to actually be doing what I'd like before snapshotting. It seems like there's not a simple solution where I get to benefit from using RDataFrame and keep the tree structure untouched. I need to be able to add rows of data to each entry within a leaf (I'm actually concatenating multiple trees), and TTrees don't allow this as far as I can see. I guess I could define a new TTree by hand, setup the branches and fill new arrays from my original trees with the redefinitions I need,(just by iterating over every entry and data value). But then I'm still changing my TTree stucture, as with snapshot. Maybe next time I'll just start by rewriting ExRootLHEFConverter to take the data from two .lhe files, or just stick to TTrees, but to be fair this project has been my first attempt at using ROOT/C++. You code you learn!. What I am trying to do may be a bit of a niche use case, but I hope some of what I wrote is useful to you. Regards, ; Marina",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13846#issuecomment-1760467268
https://github.com/root-project/root/issues/13846#issuecomment-1760467268:1639,Usability,learn,learn,1639,"Dear Vincenzo,. I have already managed to work with the redefined trees I need, just with a number of workarounds. The tree files in this case are generated from Les Houches event files using the ExRootLHEFConverter from ExRootAnalysis. As such the branches are custom classes, which can be found in the ExRootAnalysis source files. I can't actually snapshot individual columns without gettting an error as there are TClonesArray column headers which specify the structure of the branches. The obvious fix would be to snapshot the column plus the header, but then that also gives me an error. I understand that Redefine is ideally used for columns, however I need to be able to apply different redefinitions to different leaves within a branch. Do RDataFrames just not support rewriting leaves/nested columns? The columns seem to actually be doing what I'd like before snapshotting. It seems like there's not a simple solution where I get to benefit from using RDataFrame and keep the tree structure untouched. I need to be able to add rows of data to each entry within a leaf (I'm actually concatenating multiple trees), and TTrees don't allow this as far as I can see. I guess I could define a new TTree by hand, setup the branches and fill new arrays from my original trees with the redefinitions I need,(just by iterating over every entry and data value). But then I'm still changing my TTree stucture, as with snapshot. Maybe next time I'll just start by rewriting ExRootLHEFConverter to take the data from two .lhe files, or just stick to TTrees, but to be fair this project has been my first attempt at using ROOT/C++. You code you learn!. What I am trying to do may be a bit of a niche use case, but I hope some of what I wrote is useful to you. Regards, ; Marina",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13846#issuecomment-1760467268
https://github.com/root-project/root/issues/13852#issuecomment-1777016344:757,Safety,avoid,avoid,757,"If you try fitting the obtained slice (slice 21), you will see that in both Minuit and Minuit2 the fit did not work. ; Just run this simple code: ; ```; auto f = TFile::Open(""histo.root"", ""READ"");; auto hist = f->Get<TH2>(""dxyres_vs_eta"");. auto h20 = hist->ProjectionY(""h20"",20,20);; auto h21 = hist->ProjectionY(""h21"",21,21);; auto c1 = new TCanvas();; c1->Divide(1,2);; c1->cd(1);; h20->Fit(""gaus"");; c1->cd(2);; // second fit fails ; h21->Fit(""gaus"");; ```. If you run only the second fit, it works because some default steps sizes are used at the beginning. ; You will get better slice fits if using option `L` when fitting the slices:; ```; hist->FitSlicesY(nullptr, 10, 21, 0, ""LR"");; ```; and defining a restricted range for the fitted functions to avoid fitting the outlier events. Close the issue since it is not a bug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13852#issuecomment-1777016344
https://github.com/root-project/root/issues/13852#issuecomment-1777016344:133,Usability,simpl,simple,133,"If you try fitting the obtained slice (slice 21), you will see that in both Minuit and Minuit2 the fit did not work. ; Just run this simple code: ; ```; auto f = TFile::Open(""histo.root"", ""READ"");; auto hist = f->Get<TH2>(""dxyres_vs_eta"");. auto h20 = hist->ProjectionY(""h20"",20,20);; auto h21 = hist->ProjectionY(""h21"",21,21);; auto c1 = new TCanvas();; c1->Divide(1,2);; c1->cd(1);; h20->Fit(""gaus"");; c1->cd(2);; // second fit fails ; h21->Fit(""gaus"");; ```. If you run only the second fit, it works because some default steps sizes are used at the beginning. ; You will get better slice fits if using option `L` when fitting the slices:; ```; hist->FitSlicesY(nullptr, 10, 21, 0, ""LR"");; ```; and defining a restricted range for the fitted functions to avoid fitting the outlier events. Close the issue since it is not a bug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13852#issuecomment-1777016344
https://github.com/root-project/root/issues/13875#issuecomment-1991844247:110,Usability,clear,clear,110,"Closing because the usecase is gone, and the features is probably impossible to implement in cppyy. Without a clear usecase, we should not go into this rabbit hole.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13875#issuecomment-1991844247
https://github.com/root-project/root/issues/13917#issuecomment-1778121890:53,Usability,clear,clear,53,Fair enough. We need to make that the distinction is clear.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13917#issuecomment-1778121890
https://github.com/root-project/root/issues/13927#issuecomment-1780888955:187,Usability,simpl,simple,187,Looks like the problem is present since the beginning. ; Already initial commit https://github.com/root-project/root/commit/852600061bcacd9b255d44f6312c96b6b1e00a2d has it. I can provide simple fix which makes it properly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13927#issuecomment-1780888955
https://github.com/root-project/root/pull/14017#issuecomment-1821818413:179,Performance,multi-thread,multi-threaded,179,"We are still discussing the names. The current proposal is:; ```; using TFilePtr = std::unique_ptr<TFile>;. /// Open a file with `name` for reading.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForRead(std::string_view name, const Options_t &opts = Options_t());. /// Open an existing file with `name` for reading and writing. If a file with; /// that name does not exist, an invalid RFilePtr will be returned.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForUpdate(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. Fail (return an invalid; /// `RFilePtr`) if a file with this name already exists.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Create(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Recreate(std::string_view name, const Options_t &opts = Options_t());; ```. In the meantime, you should indeed start getting familiar with the testing infrastructure. See io/io/test for some examples.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1821818413
https://github.com/root-project/root/pull/14017#issuecomment-1821818413:486,Performance,multi-thread,multi-threaded,486,"We are still discussing the names. The current proposal is:; ```; using TFilePtr = std::unique_ptr<TFile>;. /// Open a file with `name` for reading.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForRead(std::string_view name, const Options_t &opts = Options_t());. /// Open an existing file with `name` for reading and writing. If a file with; /// that name does not exist, an invalid RFilePtr will be returned.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForUpdate(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. Fail (return an invalid; /// `RFilePtr`) if a file with this name already exists.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Create(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Recreate(std::string_view name, const Options_t &opts = Options_t());; ```. In the meantime, you should indeed start getting familiar with the testing infrastructure. See io/io/test for some examples.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1821818413
https://github.com/root-project/root/pull/14017#issuecomment-1821818413:783,Performance,multi-thread,multi-threaded,783,"We are still discussing the names. The current proposal is:; ```; using TFilePtr = std::unique_ptr<TFile>;. /// Open a file with `name` for reading.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForRead(std::string_view name, const Options_t &opts = Options_t());. /// Open an existing file with `name` for reading and writing. If a file with; /// that name does not exist, an invalid RFilePtr will be returned.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForUpdate(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. Fail (return an invalid; /// `RFilePtr`) if a file with this name already exists.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Create(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Recreate(std::string_view name, const Options_t &opts = Options_t());; ```. In the meantime, you should indeed start getting familiar with the testing infrastructure. See io/io/test for some examples.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1821818413
https://github.com/root-project/root/pull/14017#issuecomment-1821818413:1100,Performance,multi-thread,multi-threaded,1100,"We are still discussing the names. The current proposal is:; ```; using TFilePtr = std::unique_ptr<TFile>;. /// Open a file with `name` for reading.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForRead(std::string_view name, const Options_t &opts = Options_t());. /// Open an existing file with `name` for reading and writing. If a file with; /// that name does not exist, an invalid RFilePtr will be returned.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForUpdate(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. Fail (return an invalid; /// `RFilePtr`) if a file with this name already exists.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Create(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Recreate(std::string_view name, const Options_t &opts = Options_t());; ```. In the meantime, you should indeed start getting familiar with the testing infrastructure. See io/io/test for some examples.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1821818413
https://github.com/root-project/root/pull/14017#issuecomment-1821818413:194,Security,access,accesses,194,"We are still discussing the names. The current proposal is:; ```; using TFilePtr = std::unique_ptr<TFile>;. /// Open a file with `name` for reading.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForRead(std::string_view name, const Options_t &opts = Options_t());. /// Open an existing file with `name` for reading and writing. If a file with; /// that name does not exist, an invalid RFilePtr will be returned.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForUpdate(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. Fail (return an invalid; /// `RFilePtr`) if a file with this name already exists.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Create(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Recreate(std::string_view name, const Options_t &opts = Options_t());; ```. In the meantime, you should indeed start getting familiar with the testing infrastructure. See io/io/test for some examples.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1821818413
https://github.com/root-project/root/pull/14017#issuecomment-1821818413:501,Security,access,accesses,501,"We are still discussing the names. The current proposal is:; ```; using TFilePtr = std::unique_ptr<TFile>;. /// Open a file with `name` for reading.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForRead(std::string_view name, const Options_t &opts = Options_t());. /// Open an existing file with `name` for reading and writing. If a file with; /// that name does not exist, an invalid RFilePtr will be returned.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForUpdate(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. Fail (return an invalid; /// `RFilePtr`) if a file with this name already exists.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Create(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Recreate(std::string_view name, const Options_t &opts = Options_t());; ```. In the meantime, you should indeed start getting familiar with the testing infrastructure. See io/io/test for some examples.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1821818413
https://github.com/root-project/root/pull/14017#issuecomment-1821818413:798,Security,access,accesses,798,"We are still discussing the names. The current proposal is:; ```; using TFilePtr = std::unique_ptr<TFile>;. /// Open a file with `name` for reading.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForRead(std::string_view name, const Options_t &opts = Options_t());. /// Open an existing file with `name` for reading and writing. If a file with; /// that name does not exist, an invalid RFilePtr will be returned.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForUpdate(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. Fail (return an invalid; /// `RFilePtr`) if a file with this name already exists.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Create(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Recreate(std::string_view name, const Options_t &opts = Options_t());; ```. In the meantime, you should indeed start getting familiar with the testing infrastructure. See io/io/test for some examples.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1821818413
https://github.com/root-project/root/pull/14017#issuecomment-1821818413:1115,Security,access,accesses,1115,"We are still discussing the names. The current proposal is:; ```; using TFilePtr = std::unique_ptr<TFile>;. /// Open a file with `name` for reading.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForRead(std::string_view name, const Options_t &opts = Options_t());. /// Open an existing file with `name` for reading and writing. If a file with; /// that name does not exist, an invalid RFilePtr will be returned.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForUpdate(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. Fail (return an invalid; /// `RFilePtr`) if a file with this name already exists.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Create(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Recreate(std::string_view name, const Options_t &opts = Options_t());; ```. In the meantime, you should indeed start getting familiar with the testing infrastructure. See io/io/test for some examples.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1821818413
https://github.com/root-project/root/pull/14017#issuecomment-1821818413:1299,Testability,test,testing,1299,"We are still discussing the names. The current proposal is:; ```; using TFilePtr = std::unique_ptr<TFile>;. /// Open a file with `name` for reading.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForRead(std::string_view name, const Options_t &opts = Options_t());. /// Open an existing file with `name` for reading and writing. If a file with; /// that name does not exist, an invalid RFilePtr will be returned.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForUpdate(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. Fail (return an invalid; /// `RFilePtr`) if a file with this name already exists.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Create(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Recreate(std::string_view name, const Options_t &opts = Options_t());; ```. In the meantime, you should indeed start getting familiar with the testing infrastructure. See io/io/test for some examples.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1821818413
https://github.com/root-project/root/pull/14017#issuecomment-1821818413:1333,Testability,test,test,1333,"We are still discussing the names. The current proposal is:; ```; using TFilePtr = std::unique_ptr<TFile>;. /// Open a file with `name` for reading.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForRead(std::string_view name, const Options_t &opts = Options_t());. /// Open an existing file with `name` for reading and writing. If a file with; /// that name does not exist, an invalid RFilePtr will be returned.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForUpdate(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. Fail (return an invalid; /// `RFilePtr`) if a file with this name already exists.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Create(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Recreate(std::string_view name, const Options_t &opts = Options_t());; ```. In the meantime, you should indeed start getting familiar with the testing infrastructure. See io/io/test for some examples.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1821818413
https://github.com/root-project/root/pull/14017#issuecomment-1821818413:1044,Usability,simpl,simply,1044,"We are still discussing the names. The current proposal is:; ```; using TFilePtr = std::unique_ptr<TFile>;. /// Open a file with `name` for reading.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForRead(std::string_view name, const Options_t &opts = Options_t());. /// Open an existing file with `name` for reading and writing. If a file with; /// that name does not exist, an invalid RFilePtr will be returned.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForUpdate(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. Fail (return an invalid; /// `RFilePtr`) if a file with this name already exists.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Create(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Recreate(std::string_view name, const Options_t &opts = Options_t());; ```. In the meantime, you should indeed start getting familiar with the testing infrastructure. See io/io/test for some examples.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1821818413
https://github.com/root-project/root/pull/14034#issuecomment-1803962285:10,Testability,test,tested,10,"@pcanal I tested with RDataFrame `Snapshot` and a hand-written usage of `TBufferMerger`, writing a quite simple tree. Any ideas what else to test, do we have a more complex benchmark / a production use case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1803962285
https://github.com/root-project/root/pull/14034#issuecomment-1803962285:141,Testability,test,test,141,"@pcanal I tested with RDataFrame `Snapshot` and a hand-written usage of `TBufferMerger`, writing a quite simple tree. Any ideas what else to test, do we have a more complex benchmark / a production use case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1803962285
https://github.com/root-project/root/pull/14034#issuecomment-1803962285:173,Testability,benchmark,benchmark,173,"@pcanal I tested with RDataFrame `Snapshot` and a hand-written usage of `TBufferMerger`, writing a quite simple tree. Any ideas what else to test, do we have a more complex benchmark / a production use case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1803962285
https://github.com/root-project/root/pull/14034#issuecomment-1803962285:105,Usability,simpl,simple,105,"@pcanal I tested with RDataFrame `Snapshot` and a hand-written usage of `TBufferMerger`, writing a quite simple tree. Any ideas what else to test, do we have a more complex benchmark / a production use case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1803962285
https://github.com/root-project/root/pull/14034#issuecomment-1808248792:2388,Availability,down,down,2388,"392068. ttreeTBufferMerger 20000000 16; User time (seconds): 404.52; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:30.24; Maximum resident set size (kbytes): 3631212. ttreeTBufferMerger 20000000 16; User time (seconds): 407.27; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:29.89; Maximum resident set size (kbytes): 2579396. ttreeTBufferMerger 20000000 128; User time (seconds): 6726.12; Elapsed (wall clock) time (h:mm:ss or m:ss): 2:11.26; Maximum resident set size (kbytes): 90232780. ttreeTBufferMerger 20000000 128; User time (seconds): 4558.00; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:50.53; Maximum resident set size (kbytes): 34501092. ttreeTBufferMerger 20000000 128; User time (seconds): 4089.10; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:40.39; Maximum resident set size (kbytes): 19870924. ntpl-perf01:/data/hddext4/jonas/20231113; ttreeTBufferMerger 20000000 16; User time (seconds): 406.02; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:59.20; Maximum resident set size (kbytes): 3479780. ttreeTBufferMerger 20000000 16; User time (seconds): 405.00; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:00.22; Maximum resident set size (kbytes): 4285016. ttreeTBufferMerger 20000000 16; User time (seconds): 406.67; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:00.26; Maximum resident set size (kbytes): 2565488. ttreeTBufferMerger 20000000 128; User time (seconds): 6967.42; Elapsed (wall clock) time (h:mm:ss or m:ss): 4:35.79; Maximum resident set size (kbytes): 89252804. ttreeTBufferMerger 20000000 128; User time (seconds): 4209.07; Elapsed (wall clock) time (h:mm:ss or m:ss): 4:37.90; Maximum resident set size (kbytes): 39543736. ttreeTBufferMerger 20000000 128; User time (seconds): 3700.49; Elapsed (wall clock) time (h:mm:ss or m:ss): 4:34.74; Maximum resident set size (kbytes): 20422848; ```; </details>. My conclusion would be that memory goes down everywhere (as expected) and, especially for higher thread counts and faster storage, we even gain performance",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1808248792
https://github.com/root-project/root/pull/14034#issuecomment-1808248792:254,Performance,queue,queue,254,"Some measurements from `ntpl-perf01`; `ttreeTBufferMerger` is a simple program that writes 20000000 entries (2 branches) with each thread. The first timing is with `master`, then the first commit from this PR, and finally the second commit (removing the queue):; <details>; <summary>full data</summary>. ```; ntpl-perf01:/data/ssdext4/jonas/20231113; ttreeTBufferMerger 20000000 16; User time (seconds): 406.16; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:30.30; Maximum resident set size (kbytes): 3392068. ttreeTBufferMerger 20000000 16; User time (seconds): 404.52; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:30.24; Maximum resident set size (kbytes): 3631212. ttreeTBufferMerger 20000000 16; User time (seconds): 407.27; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:29.89; Maximum resident set size (kbytes): 2579396. ttreeTBufferMerger 20000000 128; User time (seconds): 6726.12; Elapsed (wall clock) time (h:mm:ss or m:ss): 2:11.26; Maximum resident set size (kbytes): 90232780. ttreeTBufferMerger 20000000 128; User time (seconds): 4558.00; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:50.53; Maximum resident set size (kbytes): 34501092. ttreeTBufferMerger 20000000 128; User time (seconds): 4089.10; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:40.39; Maximum resident set size (kbytes): 19870924. ntpl-perf01:/data/hddext4/jonas/20231113; ttreeTBufferMerger 20000000 16; User time (seconds): 406.02; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:59.20; Maximum resident set size (kbytes): 3479780. ttreeTBufferMerger 20000000 16; User time (seconds): 405.00; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:00.22; Maximum resident set size (kbytes): 4285016. ttreeTBufferMerger 20000000 16; User time (seconds): 406.67; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:00.26; Maximum resident set size (kbytes): 2565488. ttreeTBufferMerger 20000000 128; User time (seconds): 6967.42; Elapsed (wall clock) time (h:mm:ss or m:ss): 4:35.79; Maximum resident set size (kbytes): 892528",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1808248792
https://github.com/root-project/root/pull/14034#issuecomment-1808248792:2492,Performance,perform,performance,2492,"392068. ttreeTBufferMerger 20000000 16; User time (seconds): 404.52; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:30.24; Maximum resident set size (kbytes): 3631212. ttreeTBufferMerger 20000000 16; User time (seconds): 407.27; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:29.89; Maximum resident set size (kbytes): 2579396. ttreeTBufferMerger 20000000 128; User time (seconds): 6726.12; Elapsed (wall clock) time (h:mm:ss or m:ss): 2:11.26; Maximum resident set size (kbytes): 90232780. ttreeTBufferMerger 20000000 128; User time (seconds): 4558.00; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:50.53; Maximum resident set size (kbytes): 34501092. ttreeTBufferMerger 20000000 128; User time (seconds): 4089.10; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:40.39; Maximum resident set size (kbytes): 19870924. ntpl-perf01:/data/hddext4/jonas/20231113; ttreeTBufferMerger 20000000 16; User time (seconds): 406.02; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:59.20; Maximum resident set size (kbytes): 3479780. ttreeTBufferMerger 20000000 16; User time (seconds): 405.00; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:00.22; Maximum resident set size (kbytes): 4285016. ttreeTBufferMerger 20000000 16; User time (seconds): 406.67; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:00.26; Maximum resident set size (kbytes): 2565488. ttreeTBufferMerger 20000000 128; User time (seconds): 6967.42; Elapsed (wall clock) time (h:mm:ss or m:ss): 4:35.79; Maximum resident set size (kbytes): 89252804. ttreeTBufferMerger 20000000 128; User time (seconds): 4209.07; Elapsed (wall clock) time (h:mm:ss or m:ss): 4:37.90; Maximum resident set size (kbytes): 39543736. ttreeTBufferMerger 20000000 128; User time (seconds): 3700.49; Elapsed (wall clock) time (h:mm:ss or m:ss): 4:34.74; Maximum resident set size (kbytes): 20422848; ```; </details>. My conclusion would be that memory goes down everywhere (as expected) and, especially for higher thread counts and faster storage, we even gain performance",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1808248792
https://github.com/root-project/root/pull/14034#issuecomment-1808248792:64,Usability,simpl,simple,64,"Some measurements from `ntpl-perf01`; `ttreeTBufferMerger` is a simple program that writes 20000000 entries (2 branches) with each thread. The first timing is with `master`, then the first commit from this PR, and finally the second commit (removing the queue):; <details>; <summary>full data</summary>. ```; ntpl-perf01:/data/ssdext4/jonas/20231113; ttreeTBufferMerger 20000000 16; User time (seconds): 406.16; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:30.30; Maximum resident set size (kbytes): 3392068. ttreeTBufferMerger 20000000 16; User time (seconds): 404.52; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:30.24; Maximum resident set size (kbytes): 3631212. ttreeTBufferMerger 20000000 16; User time (seconds): 407.27; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:29.89; Maximum resident set size (kbytes): 2579396. ttreeTBufferMerger 20000000 128; User time (seconds): 6726.12; Elapsed (wall clock) time (h:mm:ss or m:ss): 2:11.26; Maximum resident set size (kbytes): 90232780. ttreeTBufferMerger 20000000 128; User time (seconds): 4558.00; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:50.53; Maximum resident set size (kbytes): 34501092. ttreeTBufferMerger 20000000 128; User time (seconds): 4089.10; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:40.39; Maximum resident set size (kbytes): 19870924. ntpl-perf01:/data/hddext4/jonas/20231113; ttreeTBufferMerger 20000000 16; User time (seconds): 406.02; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:59.20; Maximum resident set size (kbytes): 3479780. ttreeTBufferMerger 20000000 16; User time (seconds): 405.00; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:00.22; Maximum resident set size (kbytes): 4285016. ttreeTBufferMerger 20000000 16; User time (seconds): 406.67; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:00.26; Maximum resident set size (kbytes): 2565488. ttreeTBufferMerger 20000000 128; User time (seconds): 6967.42; Elapsed (wall clock) time (h:mm:ss or m:ss): 4:35.79; Maximum resident set size (kbytes): 892528",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1808248792
https://github.com/root-project/root/pull/14034#issuecomment-1821703597:27,Energy Efficiency,efficient,efficient,27,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1821703597
https://github.com/root-project/root/pull/14034#issuecomment-1821703597:108,Integrability,synchroniz,synchronization,108,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1821703597
https://github.com/root-project/root/pull/14034#issuecomment-1821703597:171,Performance,queue,queue,171,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1821703597
https://github.com/root-project/root/pull/14034#issuecomment-1821703597:78,Testability,test,test,78,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1821703597
https://github.com/root-project/root/pull/14034#issuecomment-1821703597:71,Usability,simpl,simple,71,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1821703597
https://github.com/root-project/root/pull/14034#issuecomment-1823482567:29,Energy Efficiency,efficient,efficient,29,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1823482567
https://github.com/root-project/root/pull/14034#issuecomment-1823482567:110,Integrability,synchroniz,synchronization,110,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1823482567
https://github.com/root-project/root/pull/14034#issuecomment-1823482567:473,Integrability,synchroniz,synchronization,473,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1823482567
https://github.com/root-project/root/pull/14034#issuecomment-1823482567:173,Performance,queue,queue,173,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1823482567
https://github.com/root-project/root/pull/14034#issuecomment-1823482567:670,Performance,perform,performance,670,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1823482567
https://github.com/root-project/root/pull/14034#issuecomment-1823482567:80,Testability,test,test,80,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1823482567
https://github.com/root-project/root/pull/14034#issuecomment-1823482567:277,Testability,benchmark,benchmark,277,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1823482567
https://github.com/root-project/root/pull/14034#issuecomment-1823482567:73,Usability,simpl,simple,73,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1823482567
https://github.com/root-project/root/issues/14051#issuecomment-1813149328:125,Deployability,install,installed,125,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right?. In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051#issuecomment-1813149328
https://github.com/root-project/root/issues/14051#issuecomment-1813149328:690,Deployability,install,install,690,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right?. In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051#issuecomment-1813149328
https://github.com/root-project/root/issues/14051#issuecomment-1813149328:850,Integrability,depend,dependency,850,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right?. In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051#issuecomment-1813149328
https://github.com/root-project/root/issues/14051#issuecomment-1813149328:39,Usability,user experience,user experience,39,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right?. In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051#issuecomment-1813149328
https://github.com/root-project/root/issues/14055#issuecomment-1818478493:814,Modifiability,variab,variables,814,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)?. As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-1818478493
https://github.com/root-project/root/issues/14055#issuecomment-1818478493:314,Security,sanitiz,sanitized,314,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)?. As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-1818478493
https://github.com/root-project/root/issues/14055#issuecomment-1818478493:392,Security,sanitiz,sanitizers,392,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)?. As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-1818478493
https://github.com/root-project/root/issues/14055#issuecomment-1818478493:47,Testability,test,test,47,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)?. As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-1818478493
https://github.com/root-project/root/issues/14055#issuecomment-1818478493:153,Testability,test,test,153,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)?. As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-1818478493
https://github.com/root-project/root/issues/14055#issuecomment-1818478493:532,Testability,test,test,532,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)?. As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-1818478493
https://github.com/root-project/root/issues/14055#issuecomment-1818478493:1167,Usability,clear,clear,1167,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)?. As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-1818478493
https://github.com/root-project/root/issues/14055#issuecomment-1818495744:30,Usability,clear,clear,30,"> This latter is what needs a clear reproducer to dig out the problem. I agree. This is actually what I was meaning by making an hello-world program **that does not use ROOT**, compile it linking to ROOT and with sanitiser on, and see if the same leak report is given. I would expect so and, if not, then there is something I definitely do not get in our application. 🙈",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-1818495744
https://github.com/root-project/root/issues/14055#issuecomment-2370819124:17,Deployability,update,updates,17,"@AxelKrypton any updates on this? Looking over the past discussion, we are aware of the (intentional) memory leaks in `libCling` (even though we fixed one case in https://github.com/root-project/root/pull/16150 that was a mistake; the fix will appear in 6.34). I still have trouble understanding how just linking to ROOT and not using it should introduce a memory leak in the application... Lacking more feedback, I would propose to close this issue for the moment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2370819124
https://github.com/root-project/root/issues/14055#issuecomment-2370819124:404,Usability,feedback,feedback,404,"@AxelKrypton any updates on this? Looking over the past discussion, we are aware of the (intentional) memory leaks in `libCling` (even though we fixed one case in https://github.com/root-project/root/pull/16150 that was a mistake; the fix will appear in 6.34). I still have trouble understanding how just linking to ROOT and not using it should introduce a memory leak in the application... Lacking more feedback, I would propose to close this issue for the moment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2370819124
https://github.com/root-project/root/issues/14055#issuecomment-2371254649:72,Testability,test,test,72,"> Do you mean that the sanitiser report when running the following unit test; > ; > ```c++; > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest; > ; > TEST(){ std::cout << ""Hello world\n""; }; > ```; > ; > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2371254649
https://github.com/root-project/root/issues/14055#issuecomment-2371254649:108,Testability,test,test,108,"> Do you mean that the sanitiser report when running the following unit test; > ; > ```c++; > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest; > ; > TEST(){ std::cout << ""Hello world\n""; }; > ```; > ; > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2371254649
https://github.com/root-project/root/issues/14055#issuecomment-2371254649:347,Usability,simpl,simple,347,"> Do you mean that the sanitiser report when running the following unit test; > ; > ```c++; > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest; > ; > TEST(){ std::cout << ""Hello world\n""; }; > ```; > ; > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2371254649
https://github.com/root-project/root/issues/14055#issuecomment-2371268142:29,Usability,simpl,simple,29,"> I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of TemplateIdAnnotation are fixed by https://github.com/root-project/root/pull/16150. Thanks. I guess what I get from the sanitiser is what you suppress. This clarifies further the situation. > I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it... Fair enough. I will try to find some spare hours for this. In the best case scenario ROOT `6.34` does not show the problem and I can leave here a comment and close the issue... 🤞",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2371268142
https://github.com/root-project/root/issues/14055#issuecomment-2379654469:758,Availability,failure,failure,758,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2379654469
https://github.com/root-project/root/issues/14055#issuecomment-2379654469:1031,Availability,error,errors,1031,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2379654469
https://github.com/root-project/root/issues/14055#issuecomment-2379654469:861,Safety,safe,safely,861,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2379654469
https://github.com/root-project/root/issues/14055#issuecomment-2379654469:992,Safety,avoid,avoid,992,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2379654469
https://github.com/root-project/root/issues/14055#issuecomment-2379654469:608,Testability,test,tests,608,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2379654469
https://github.com/root-project/root/issues/14055#issuecomment-2379654469:520,Usability,simpl,simply,520,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2379654469
https://github.com/root-project/root/issues/14055#issuecomment-2379654469:1089,Usability,feedback,feedback,1089,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2379654469
https://github.com/root-project/root/issues/14055#issuecomment-2382239702:793,Availability,failure,failure,793,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking!. > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2382239702
https://github.com/root-project/root/issues/14055#issuecomment-2382239702:1066,Availability,error,errors,1066,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking!. > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2382239702
https://github.com/root-project/root/issues/14055#issuecomment-2382239702:1729,Deployability,upgrade,upgraded,1729,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking!. > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2382239702
https://github.com/root-project/root/issues/14055#issuecomment-2382239702:896,Safety,safe,safely,896,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking!. > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2382239702
https://github.com/root-project/root/issues/14055#issuecomment-2382239702:1027,Safety,avoid,avoid,1027,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking!. > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2382239702
https://github.com/root-project/root/issues/14055#issuecomment-2382239702:643,Testability,test,tests,643,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking!. > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2382239702
https://github.com/root-project/root/issues/14055#issuecomment-2382239702:1374,Testability,log,log,1374,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking!. > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2382239702
https://github.com/root-project/root/issues/14055#issuecomment-2382239702:555,Usability,simpl,simply,555,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking!. > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2382239702
https://github.com/root-project/root/issues/14055#issuecomment-2382239702:1217,Usability,feedback,feedback,1217,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking!. > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2382239702
https://github.com/root-project/root/pull/14071#issuecomment-1816447278:226,Deployability,release,release,226,"At some point we want people to migrate to the new iterators, becuase as Stephan showed in the past, they are also faster. As far as feedback goes, there is quite a long time to receive it. Now, we have about 1 year until the release of ROOT 6.32 where pro users will see the warnings in `master`, and then another year the warning would be in the released ROOT 6.32. The warning explicitly states that the legacy iterators will be removed in 6.34. So if this deprecation is really a problem, people will complain and we can ""un-deprecate"" if needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14071#issuecomment-1816447278
https://github.com/root-project/root/pull/14071#issuecomment-1816447278:348,Deployability,release,released,348,"At some point we want people to migrate to the new iterators, becuase as Stephan showed in the past, they are also faster. As far as feedback goes, there is quite a long time to receive it. Now, we have about 1 year until the release of ROOT 6.32 where pro users will see the warnings in `master`, and then another year the warning would be in the released ROOT 6.32. The warning explicitly states that the legacy iterators will be removed in 6.34. So if this deprecation is really a problem, people will complain and we can ""un-deprecate"" if needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14071#issuecomment-1816447278
https://github.com/root-project/root/pull/14071#issuecomment-1816447278:133,Usability,feedback,feedback,133,"At some point we want people to migrate to the new iterators, becuase as Stephan showed in the past, they are also faster. As far as feedback goes, there is quite a long time to receive it. Now, we have about 1 year until the release of ROOT 6.32 where pro users will see the warnings in `master`, and then another year the warning would be in the released ROOT 6.32. The warning explicitly states that the legacy iterators will be removed in 6.34. So if this deprecation is really a problem, people will complain and we can ""un-deprecate"" if needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14071#issuecomment-1816447278
https://github.com/root-project/root/pull/14074#issuecomment-1818475645:465,Deployability,configurat,configuration,465,"Thanks for the review!. > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074#issuecomment-1818475645
https://github.com/root-project/root/pull/14074#issuecomment-1818475645:53,Integrability,depend,dependent,53,"Thanks for the review!. > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074#issuecomment-1818475645
https://github.com/root-project/root/pull/14074#issuecomment-1818475645:465,Modifiability,config,configuration,465,"Thanks for the review!. > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074#issuecomment-1818475645
https://github.com/root-project/root/pull/14074#issuecomment-1818475645:409,Testability,test,test,409,"Thanks for the review!. > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074#issuecomment-1818475645
https://github.com/root-project/root/pull/14074#issuecomment-1818475645:460,Testability,test,test,460,"Thanks for the review!. > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074#issuecomment-1818475645
https://github.com/root-project/root/pull/14074#issuecomment-1818475645:186,Usability,simpl,simplicity,186,"Thanks for the review!. > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074#issuecomment-1818475645
https://github.com/root-project/root/pull/14074#issuecomment-1818475645:514,Usability,simpl,simplifying,514,"Thanks for the review!. > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074#issuecomment-1818475645
https://github.com/root-project/root/pull/14098#issuecomment-1887156068:240,Usability,feedback,feedback,240,"Hi @vepadulano, thanks for your comments! I hope my recent commit, that will be squashed before merging, is addressing your concerns. Unfortunately, the new CI is red because I merged a PR that broke incremental builds :( But we should get feedback from Jenkins if this PR still works with my newest change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098#issuecomment-1887156068
https://github.com/root-project/root/issues/14113#issuecomment-1891757919:19,Usability,feedback,feedback,19,"OK, thanks for the feedback",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113#issuecomment-1891757919
https://github.com/root-project/root/pull/14135#issuecomment-1830160591:17,Integrability,interface,interface,17,"I agree that the interface is somewhat dangerous but the docs clearly mention its limitations. However, dangerous or not, this is currently broken and should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135#issuecomment-1830160591
https://github.com/root-project/root/pull/14135#issuecomment-1830160591:62,Usability,clear,clearly,62,"I agree that the interface is somewhat dangerous but the docs clearly mention its limitations. However, dangerous or not, this is currently broken and should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135#issuecomment-1830160591
https://github.com/root-project/root/issues/14138#issuecomment-1832630669:81,Performance,load,load,81,"@MrCarroll do not worry. These things happen, especially when one is under heavy load at work. Never hesitate to report issues as you encounter them, feedback is very important for us!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138#issuecomment-1832630669
https://github.com/root-project/root/issues/14138#issuecomment-1832630669:150,Usability,feedback,feedback,150,"@MrCarroll do not worry. These things happen, especially when one is under heavy load at work. Never hesitate to report issues as you encounter them, feedback is very important for us!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138#issuecomment-1832630669
https://github.com/root-project/root/issues/14153#issuecomment-1833962747:62,Usability,simpl,simply,62,"Well, I do not think it is a graphics issue. Nothing is drawn simply because the number of entries is 0:; ```; root [0] auto h2 = new TH2I(""h2"", ""h2"", 10, 0, 1, 2, 0, 2);; root [1] h2->AddBinContent(16,5); root [2] h2->GetEntries(); (double) 0.0000000; ```; May be @lmoneta may know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14153#issuecomment-1833962747
https://github.com/root-project/root/issues/14163#issuecomment-1837223379:102,Integrability,depend,dependencies,102,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163#issuecomment-1837223379
https://github.com/root-project/root/issues/14163#issuecomment-1837223379:414,Usability,clear,clear,414,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163#issuecomment-1837223379
https://github.com/root-project/root/pull/14165#issuecomment-1904662806:9,Availability,down,down,9,I boiled down the failures to a simple extension of the issue that I already reported:; https://github.com/vgvassilev/clad/issues/681#issuecomment-1904660655,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165#issuecomment-1904662806
https://github.com/root-project/root/pull/14165#issuecomment-1904662806:18,Availability,failure,failures,18,I boiled down the failures to a simple extension of the issue that I already reported:; https://github.com/vgvassilev/clad/issues/681#issuecomment-1904660655,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165#issuecomment-1904662806
https://github.com/root-project/root/pull/14165#issuecomment-1904662806:32,Usability,simpl,simple,32,I boiled down the failures to a simple extension of the issue that I already reported:; https://github.com/vgvassilev/clad/issues/681#issuecomment-1904660655,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14165#issuecomment-1904662806
https://github.com/root-project/root/issues/14173#issuecomment-1852074907:292,Usability,feedback,feedback,292,"Unfortunately I am not being paid by CERN, and I am quite overloaded. I have to dedicate my effort to work on the projects I am being paid for. Of course, I can just live with the classes as they are written. I just thought it would be good to dedicate a bit of my time to give you just some feedback/ideas so that you understand how to improve my own user experience. Of course, I understand that my user experience might be different to that of the average user experience, and the ROOT priorities are others. But it is not me who must push for CERN reputation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173#issuecomment-1852074907
https://github.com/root-project/root/issues/14173#issuecomment-1852074907:352,Usability,user experience,user experience,352,"Unfortunately I am not being paid by CERN, and I am quite overloaded. I have to dedicate my effort to work on the projects I am being paid for. Of course, I can just live with the classes as they are written. I just thought it would be good to dedicate a bit of my time to give you just some feedback/ideas so that you understand how to improve my own user experience. Of course, I understand that my user experience might be different to that of the average user experience, and the ROOT priorities are others. But it is not me who must push for CERN reputation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173#issuecomment-1852074907
https://github.com/root-project/root/issues/14173#issuecomment-1852074907:401,Usability,user experience,user experience,401,"Unfortunately I am not being paid by CERN, and I am quite overloaded. I have to dedicate my effort to work on the projects I am being paid for. Of course, I can just live with the classes as they are written. I just thought it would be good to dedicate a bit of my time to give you just some feedback/ideas so that you understand how to improve my own user experience. Of course, I understand that my user experience might be different to that of the average user experience, and the ROOT priorities are others. But it is not me who must push for CERN reputation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173#issuecomment-1852074907
https://github.com/root-project/root/issues/14173#issuecomment-1852074907:459,Usability,user experience,user experience,459,"Unfortunately I am not being paid by CERN, and I am quite overloaded. I have to dedicate my effort to work on the projects I am being paid for. Of course, I can just live with the classes as they are written. I just thought it would be good to dedicate a bit of my time to give you just some feedback/ideas so that you understand how to improve my own user experience. Of course, I understand that my user experience might be different to that of the average user experience, and the ROOT priorities are others. But it is not me who must push for CERN reputation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173#issuecomment-1852074907
https://github.com/root-project/root/issues/14188#issuecomment-1844965943:742,Deployability,install,installed,742,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it?. The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:; - https://github.com/acts-project/algebra-plugins/; - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1844965943
https://github.com/root-project/root/issues/14188#issuecomment-1844965943:949,Deployability,configurat,configuration,949,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it?. The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:; - https://github.com/acts-project/algebra-plugins/; - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1844965943
https://github.com/root-project/root/issues/14188#issuecomment-1844965943:949,Modifiability,config,configuration,949,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it?. The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:; - https://github.com/acts-project/algebra-plugins/; - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1844965943
https://github.com/root-project/root/issues/14188#issuecomment-1844965943:1528,Modifiability,plugin,plugins,1528,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it?. The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:; - https://github.com/acts-project/algebra-plugins/; - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1844965943
https://github.com/root-project/root/issues/14188#issuecomment-1844965943:1580,Modifiability,plugin,plugins,1580,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it?. The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:; - https://github.com/acts-project/algebra-plugins/; - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1844965943
https://github.com/root-project/root/issues/14188#issuecomment-1844965943:662,Usability,simpl,simple,662,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it?. The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:; - https://github.com/acts-project/algebra-plugins/; - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1844965943
https://github.com/root-project/root/issues/14188#issuecomment-1845002083:1416,Deployability,configurat,configuration,1416,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1845002083
https://github.com/root-project/root/issues/14188#issuecomment-1845002083:113,Integrability,depend,dependency,113,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1845002083
https://github.com/root-project/root/issues/14188#issuecomment-1845002083:179,Integrability,depend,depending,179,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1845002083
https://github.com/root-project/root/issues/14188#issuecomment-1845002083:548,Integrability,depend,dependency,548,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1845002083
https://github.com/root-project/root/issues/14188#issuecomment-1845002083:931,Integrability,depend,depends,931,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1845002083
https://github.com/root-project/root/issues/14188#issuecomment-1845002083:1326,Integrability,depend,depends,1326,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1845002083
https://github.com/root-project/root/issues/14188#issuecomment-1845002083:1545,Integrability,depend,depend,1545,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1845002083
https://github.com/root-project/root/issues/14188#issuecomment-1845002083:1600,Integrability,depend,dependencies,1600,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1845002083
https://github.com/root-project/root/issues/14188#issuecomment-1845002083:1416,Modifiability,config,configuration,1416,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1845002083
https://github.com/root-project/root/issues/14188#issuecomment-1845002083:430,Usability,simpl,simple,430,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1845002083
https://github.com/root-project/root/issues/14207#issuecomment-1851824221:430,Deployability,patch,patch,430,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207#issuecomment-1851824221
https://github.com/root-project/root/issues/14207#issuecomment-1851824221:53,Modifiability,config,configured,53,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207#issuecomment-1851824221
https://github.com/root-project/root/issues/14207#issuecomment-1851824221:395,Modifiability,config,config,395,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207#issuecomment-1851824221
https://github.com/root-project/root/issues/14207#issuecomment-1851824221:423,Usability,simpl,simply,423,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207#issuecomment-1851824221
https://github.com/root-project/root/issues/14207#issuecomment-1851925257:449,Deployability,patch,patch,449,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207#issuecomment-1851925257
https://github.com/root-project/root/issues/14207#issuecomment-1851925257:55,Modifiability,config,configured,55,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207#issuecomment-1851925257
https://github.com/root-project/root/issues/14207#issuecomment-1851925257:414,Modifiability,config,config,414,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207#issuecomment-1851925257
https://github.com/root-project/root/issues/14207#issuecomment-1851925257:442,Usability,simpl,simply,442,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207#issuecomment-1851925257
https://github.com/root-project/root/issues/14209#issuecomment-2342696358:11,Deployability,upgrade,upgrade,11,"During the upgrade to LLVM 18, we enabled JITLink for AArch64 on Linux, because we had to (there were problems with RuntimeDyld that we could not solve). In order to switch x86 as well, we need a solution for `CLING_DEBUG` and `CLING_PROFILE`. It's not clear to me how this works with JITLink, does it have an equivalent interface to `registerJITEventListener`? Maybe @lhames can comment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209#issuecomment-2342696358
https://github.com/root-project/root/issues/14209#issuecomment-2342696358:321,Integrability,interface,interface,321,"During the upgrade to LLVM 18, we enabled JITLink for AArch64 on Linux, because we had to (there were problems with RuntimeDyld that we could not solve). In order to switch x86 as well, we need a solution for `CLING_DEBUG` and `CLING_PROFILE`. It's not clear to me how this works with JITLink, does it have an equivalent interface to `registerJITEventListener`? Maybe @lhames can comment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209#issuecomment-2342696358
https://github.com/root-project/root/issues/14209#issuecomment-2342696358:253,Usability,clear,clear,253,"During the upgrade to LLVM 18, we enabled JITLink for AArch64 on Linux, because we had to (there were problems with RuntimeDyld that we could not solve). In order to switch x86 as well, we need a solution for `CLING_DEBUG` and `CLING_PROFILE`. It's not clear to me how this works with JITLink, does it have an equivalent interface to `registerJITEventListener`? Maybe @lhames can comment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209#issuecomment-2342696358
https://github.com/root-project/root/issues/14215#issuecomment-1851592415:7,Usability,clear,clear,7,"> t is clear that that inner track isn't iterating anywhere nearly as much as it should be. What is the actual difference? How much is expected vs how much is gotten? Is it for the exact same file? What code is your colleague using? Did you consider using RDataFrame?. In the code shown above, the only relevant number are `AutreeData.GetEntries()` and the set of `AutreeData.tracknumber`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215#issuecomment-1851592415
https://github.com/root-project/root/issues/14225#issuecomment-1857543387:38,Usability,simpl,simple,38,"Hi, I managed to prepare a relatively simple code that reproduces the issue:. ```c++; void crash() {; RooStats::HistFactory::Measurement meas(""mwe"",""mwe"");; meas.SetOutputFilePrefix(""./"");; meas.SetPOI(""signalStrength"");; meas.SetLumi(1);; meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");; chan1.SetData("""","""");; RooStats::HistFactory::Sample sample1(""sample1"");; sample1.SetHistoName(""emu_OS_1b_Ma"");; sample1.SetHistoPath("""");; sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");; sample1.SetNormalizeByTheory(false);; sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);; sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);; sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");; sample2.SetHistoName(""emu_OS_1b_Mb"");; sample2.SetHistoPath("""");; sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");; sample2.SetNormalizeByTheory(false);; sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);; sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);; sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);; sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);; chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");; chan2.SetData("""","""");; RooStats::HistFactory::Sample sample3(""sample3"");; sample3.SetHistoName(""emu_OS_2b_Mc"");; sample3.SetHistoPath("""");; sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");; sample3.SetNormalizeByTheory(false);; sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);; sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);; sample3.AddOverallSys(""Dummy"",1,1);; chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");; meas.AddConstantParam(""minusONE"");; meas.AddChannel(chan1);; meas.AddChannel(chan2);; meas.CollectHistograms();; RooStats::HistFactory::MakeModelAndMeasurementFast(meas);; }; ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably no",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225#issuecomment-1857543387
https://github.com/root-project/root/issues/14225#issuecomment-1857543387:2007,Usability,simpl,simplest,2007,"as.SetLumi(1);; meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");; chan1.SetData("""","""");; RooStats::HistFactory::Sample sample1(""sample1"");; sample1.SetHistoName(""emu_OS_1b_Ma"");; sample1.SetHistoPath("""");; sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");; sample1.SetNormalizeByTheory(false);; sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);; sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);; sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");; sample2.SetHistoName(""emu_OS_1b_Mb"");; sample2.SetHistoPath("""");; sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");; sample2.SetNormalizeByTheory(false);; sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);; sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);; sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);; sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);; chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");; chan2.SetData("""","""");; RooStats::HistFactory::Sample sample3(""sample3"");; sample3.SetHistoName(""emu_OS_2b_Mc"");; sample3.SetHistoPath("""");; sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");; sample3.SetNormalizeByTheory(false);; sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);; sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);; sample3.AddOverallSys(""Dummy"",1,1);; chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");; meas.AddConstantParam(""minusONE"");; meas.AddChannel(chan1);; meas.AddChannel(chan2);; meas.CollectHistograms();; RooStats::HistFactory::MakeModelAndMeasurementFast(meas);; }; ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably not the simplest example, but it is realistic (the histograms and the setup come from an actual measurement). Note that using only the first channel does _not_ lead to a crash. I hope this helps, let me know if I can do more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225#issuecomment-1857543387
https://github.com/root-project/root/issues/14225#issuecomment-1858155447:306,Availability,error,error,306,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel???. Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225#issuecomment-1858155447
https://github.com/root-project/root/issues/14225#issuecomment-1858155447:55,Deployability,release,releases,55,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel???. Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225#issuecomment-1858155447
https://github.com/root-project/root/issues/14225#issuecomment-1858155447:312,Integrability,message,message,312,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel???. Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225#issuecomment-1858155447
https://github.com/root-project/root/issues/14225#issuecomment-1858155447:343,Modifiability,variab,variable,343,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel???. Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225#issuecomment-1858155447
https://github.com/root-project/root/issues/14225#issuecomment-1858155447:470,Modifiability,variab,variable,470,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel???. Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225#issuecomment-1858155447
https://github.com/root-project/root/issues/14225#issuecomment-1858155447:436,Usability,simpl,simple,436,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel???. Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225#issuecomment-1858155447
https://github.com/root-project/root/issues/14247#issuecomment-1898343006:183,Usability,clear,clear,183,"Even if I remove all icons from build directory - it does not crash for me.; Seems to be warning about missing icon is not direct cause of the segfault,. From the backtrace it is not clear at which moment ROOT crashes.; Can you try to run in the debugger?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247#issuecomment-1898343006
https://github.com/root-project/root/pull/14251#issuecomment-1860177688:52,Deployability,patch,patch,52,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251#issuecomment-1860177688
https://github.com/root-project/root/pull/14251#issuecomment-1860177688:149,Deployability,patch,patching,149,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251#issuecomment-1860177688
https://github.com/root-project/root/pull/14251#issuecomment-1860177688:207,Safety,risk,risk,207,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251#issuecomment-1860177688
https://github.com/root-project/root/pull/14251#issuecomment-1860177688:308,Usability,simpl,simply,308,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251#issuecomment-1860177688
https://github.com/root-project/root/pull/14267#issuecomment-1864281326:553,Availability,fault,faults-running-the-new-llvm-modulepassmanager-with-default-pipeline,553,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?. I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1864281326
https://github.com/root-project/root/pull/14267#issuecomment-1864281326:612,Deployability,pipeline,pipeline,612,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?. I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1864281326
https://github.com/root-project/root/pull/14267#issuecomment-1864281326:197,Energy Efficiency,efficient,efficient,197,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?. I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1864281326
https://github.com/root-project/root/pull/14267#issuecomment-1864281326:751,Performance,perform,perform,751,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?. I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1864281326
https://github.com/root-project/root/pull/14267#issuecomment-1864281326:670,Testability,test,tests,670,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?. I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1864281326
https://github.com/root-project/root/pull/14267#issuecomment-1864281326:796,Usability,clear,cleared,796,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?. I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1864281326
https://github.com/root-project/root/pull/14267#issuecomment-1864281326:832,Usability,clear,clear,832,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?. I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1864281326
https://github.com/root-project/root/pull/14268#issuecomment-1863121010:86,Availability,failure,failures,86,"@pcanal, do you have any intuition about what could have gone wrong that causes these failures in the `execCheckClusterRange` test because of different file sizes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863121010
https://github.com/root-project/root/pull/14268#issuecomment-1863121010:126,Testability,test,test,126,"@pcanal, do you have any intuition about what could have gone wrong that causes these failures in the `execCheckClusterRange` test because of different file sizes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863121010
https://github.com/root-project/root/pull/14268#issuecomment-1863121010:25,Usability,intuit,intuition,25,"@pcanal, do you have any intuition about what could have gone wrong that causes these failures in the `execCheckClusterRange` test because of different file sizes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863121010
https://github.com/root-project/root/pull/14268#issuecomment-1863174237:79,Availability,failure,failures,79,> do you have any intuition about what could have gone wrong that causes these failures in the execCheckClusterRange test because of different file sizes?. Not yet. It could be that some leaf type changed or a `StreamerInfo` changed (for that reverting just the `LinkDef` should be sufficient).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863174237
https://github.com/root-project/root/pull/14268#issuecomment-1863174237:117,Testability,test,test,117,> do you have any intuition about what could have gone wrong that causes these failures in the execCheckClusterRange test because of different file sizes?. Not yet. It could be that some leaf type changed or a `StreamerInfo` changed (for that reverting just the `LinkDef` should be sufficient).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863174237
https://github.com/root-project/root/pull/14268#issuecomment-1863174237:18,Usability,intuit,intuition,18,> do you have any intuition about what could have gone wrong that causes these failures in the execCheckClusterRange test because of different file sizes?. Not yet. It could be that some leaf type changed or a `StreamerInfo` changed (for that reverting just the `LinkDef` should be sufficient).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863174237
https://github.com/root-project/root/pull/14268#issuecomment-1863638811:81,Availability,failure,failures,81,> > do you have any intuition about what could have gone wrong that causes these failures in the execCheckClusterRange test because of different file sizes?; > ; > Not yet. It could be that some leaf type changed or a `StreamerInfo` changed (for that reverting just the `LinkDef` should be sufficient). That could be it! I have removed the changes from the LinkDef files from this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863638811
https://github.com/root-project/root/pull/14268#issuecomment-1863638811:119,Testability,test,test,119,> > do you have any intuition about what could have gone wrong that causes these failures in the execCheckClusterRange test because of different file sizes?; > ; > Not yet. It could be that some leaf type changed or a `StreamerInfo` changed (for that reverting just the `LinkDef` should be sufficient). That could be it! I have removed the changes from the LinkDef files from this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863638811
https://github.com/root-project/root/pull/14268#issuecomment-1863638811:20,Usability,intuit,intuition,20,> > do you have any intuition about what could have gone wrong that causes these failures in the execCheckClusterRange test because of different file sizes?; > ; > Not yet. It could be that some leaf type changed or a `StreamerInfo` changed (for that reverting just the `LinkDef` should be sufficient). That could be it! I have removed the changes from the LinkDef files from this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863638811
https://github.com/root-project/root/issues/14272#issuecomment-1862392926:356,Usability,simpl,simply,356,"Notice that to trigger the issue is enough to have an header `bar.h`:. ```; #ifndef _STRUCT_TIMESPEC; #define _STRUCT_TIMESPEC 1. /* POSIX.1b structure for a time value. This is like a `struct timeval' but; * has nanoseconds instead of microseconds. */; struct timespec; {; int tv_sec; /* Seconds. */; int tv_nsec; /* Nanoseconds. */; };. #endif; ```. and simply include it with `#include ""bar.h""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272#issuecomment-1862392926
https://github.com/root-project/root/pull/14293#issuecomment-1866699281:128,Deployability,upgrade,upgrade,128,"> Can you propose these changes upstream in https://github.com/wlav/cppyy and backport the commit here. That would enable us to upgrade to the upstream version easier. Okay, so I created a pull request https://github.com/wlav/cppyy/pull/207 as you suggested. But I am not sure how to backport the commit here. Would you be able to guide me how to do it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14293#issuecomment-1866699281
https://github.com/root-project/root/pull/14293#issuecomment-1866699281:331,Usability,guid,guide,331,"> Can you propose these changes upstream in https://github.com/wlav/cppyy and backport the commit here. That would enable us to upgrade to the upstream version easier. Okay, so I created a pull request https://github.com/wlav/cppyy/pull/207 as you suggested. But I am not sure how to backport the commit here. Would you be able to guide me how to do it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14293#issuecomment-1866699281
https://github.com/root-project/root/pull/14293#issuecomment-1866800936:130,Deployability,upgrade,upgrade,130,"> > Can you propose these changes upstream in https://github.com/wlav/cppyy and backport the commit here. That would enable us to upgrade to the upstream version easier.; > ; > Okay, so I created a pull request [wlav/cppyy#207](https://github.com/wlav/cppyy/pull/207) as you suggested. But I am not sure how to backport the commit here. Would you be able to guide me how to do it?. Once you get a review upstream then we can merge the same commit here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14293#issuecomment-1866800936
https://github.com/root-project/root/pull/14293#issuecomment-1866800936:358,Usability,guid,guide,358,"> > Can you propose these changes upstream in https://github.com/wlav/cppyy and backport the commit here. That would enable us to upgrade to the upstream version easier.; > ; > Okay, so I created a pull request [wlav/cppyy#207](https://github.com/wlav/cppyy/pull/207) as you suggested. But I am not sure how to backport the commit here. Would you be able to guide me how to do it?. Once you get a review upstream then we can merge the same commit here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14293#issuecomment-1866800936
https://github.com/root-project/root/issues/14329#issuecomment-1886862091:342,Usability,clear,clear,342,"Hi @jpherdi, thanks for the report! I suggest the following changes to the tutorials:; https://github.com/root-project/root/pull/14332. Would this address this issue?. Also, note that the RooFit RDF helpers are not feature complete yet:; https://github.com/root-project/root/issues/7223. I didn't continue working on this, because it was not clear to me which features would actually get used by the users. If it's missing something that you need, for example the treatment of weight columns, please comment on the other issue I linked so we can give it higher priority.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14329#issuecomment-1886862091
https://github.com/root-project/root/issues/14337#issuecomment-2046073774:128,Availability,error,error,128,"You are night, we need to make sure that ROOT compiles if there is already ROOT on the system, or at least that you get a clear error. There is already an open issue about this, so I'll close this issue as duplicate:; https://github.com/root-project/root/issues/13101",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14337#issuecomment-2046073774
https://github.com/root-project/root/issues/14337#issuecomment-2046073774:122,Usability,clear,clear,122,"You are night, we need to make sure that ROOT compiles if there is already ROOT on the system, or at least that you get a clear error. There is already an open issue about this, so I'll close this issue as duplicate:; https://github.com/root-project/root/issues/13101",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14337#issuecomment-2046073774
https://github.com/root-project/root/pull/14395#issuecomment-1902123987:57,Usability,simpl,simply,57,"I agree with @couet , the better alternative would be to simply remove the option from cmake and always bundle libafterimage",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14395#issuecomment-1902123987
https://github.com/root-project/root/pull/14395#issuecomment-1924170430:268,Deployability,release,released,268,"> I thought deprecation in 6.30 and removal 6.32, but whatever you think is best. I see more clearly what you were trying to do now. In that case I will have to say I don't agree. We cannot deprecate a feature and backport the deprecation of the feature to an already released branch. What we can do is to deprecate the build option for 6.32 and then remove it in 6.34 :+1: Sorry for my confusion :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14395#issuecomment-1924170430
https://github.com/root-project/root/pull/14395#issuecomment-1924170430:93,Usability,clear,clearly,93,"> I thought deprecation in 6.30 and removal 6.32, but whatever you think is best. I see more clearly what you were trying to do now. In that case I will have to say I don't agree. We cannot deprecate a feature and backport the deprecation of the feature to an already released branch. What we can do is to deprecate the build option for 6.32 and then remove it in 6.34 :+1: Sorry for my confusion :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14395#issuecomment-1924170430
https://github.com/root-project/root/pull/14395#issuecomment-1924196571:276,Deployability,release,released,276,"> > I thought deprecation in 6.30 and removal 6.32, but whatever you think is best; > ; > I see more clearly what you were trying to do now. In that case I will have to say I don't agree. We cannot deprecate a feature and backport the deprecation of the feature to an already released branch. What we can do is to deprecate the build option for 6.32 and then remove it in 6.34 👍 Sorry for my confusion :). Your plan sounds good to me, too. I was just thinking of backporting the deprecation because this option is broken from the very beginning. So just for speeding up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14395#issuecomment-1924196571
https://github.com/root-project/root/pull/14395#issuecomment-1924196571:101,Usability,clear,clearly,101,"> > I thought deprecation in 6.30 and removal 6.32, but whatever you think is best; > ; > I see more clearly what you were trying to do now. In that case I will have to say I don't agree. We cannot deprecate a feature and backport the deprecation of the feature to an already released branch. What we can do is to deprecate the build option for 6.32 and then remove it in 6.34 👍 Sorry for my confusion :). Your plan sounds good to me, too. I was just thinking of backporting the deprecation because this option is broken from the very beginning. So just for speeding up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14395#issuecomment-1924196571
https://github.com/root-project/root/pull/14403#issuecomment-1912119472:247,Integrability,interface,interface,247,"> Maybe we can just make RPageSource::UnsealPage a public method?. In principle yes, I guess for now it's ok to keep it private as it's not clear (to me at least) which use cases in the open this method would cater to. So we can avoid exposing an interface that we might want to take back/change at a later stage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14403#issuecomment-1912119472
https://github.com/root-project/root/pull/14403#issuecomment-1912119472:229,Safety,avoid,avoid,229,"> Maybe we can just make RPageSource::UnsealPage a public method?. In principle yes, I guess for now it's ok to keep it private as it's not clear (to me at least) which use cases in the open this method would cater to. So we can avoid exposing an interface that we might want to take back/change at a later stage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14403#issuecomment-1912119472
https://github.com/root-project/root/pull/14403#issuecomment-1912119472:140,Usability,clear,clear,140,"> Maybe we can just make RPageSource::UnsealPage a public method?. In principle yes, I guess for now it's ok to keep it private as it's not clear (to me at least) which use cases in the open this method would cater to. So we can avoid exposing an interface that we might want to take back/change at a later stage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14403#issuecomment-1912119472
https://github.com/root-project/root/pull/14410#issuecomment-1916621891:140,Integrability,message,messages,140,"> Now that I see this issue (https://its.cern.ch/jira/projects/ROOT/issues/ROOT-8915) can we perhaps also provide a template for the commit messages, and close the issue?. Yes, this seems like a nice addition. The points raised by Philippe in the comments are still valid, we can either only provide it as an opt-in template that people themselves have to add locally as a commit template, or we have to enforce it somehow in the CI. I'm not sure the latter is desirable as it would turn the guidelines into rules. I don't know if this would be possible, but what could be nice is a 'commit format checker' in the CI that doesn't immediately turn red if it doesn't succeed but rather points the contributor to the guidelines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14410#issuecomment-1916621891
https://github.com/root-project/root/pull/14410#issuecomment-1916621891:492,Usability,guid,guidelines,492,"> Now that I see this issue (https://its.cern.ch/jira/projects/ROOT/issues/ROOT-8915) can we perhaps also provide a template for the commit messages, and close the issue?. Yes, this seems like a nice addition. The points raised by Philippe in the comments are still valid, we can either only provide it as an opt-in template that people themselves have to add locally as a commit template, or we have to enforce it somehow in the CI. I'm not sure the latter is desirable as it would turn the guidelines into rules. I don't know if this would be possible, but what could be nice is a 'commit format checker' in the CI that doesn't immediately turn red if it doesn't succeed but rather points the contributor to the guidelines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14410#issuecomment-1916621891
https://github.com/root-project/root/pull/14410#issuecomment-1916621891:714,Usability,guid,guidelines,714,"> Now that I see this issue (https://its.cern.ch/jira/projects/ROOT/issues/ROOT-8915) can we perhaps also provide a template for the commit messages, and close the issue?. Yes, this seems like a nice addition. The points raised by Philippe in the comments are still valid, we can either only provide it as an opt-in template that people themselves have to add locally as a commit template, or we have to enforce it somehow in the CI. I'm not sure the latter is desirable as it would turn the guidelines into rules. I don't know if this would be possible, but what could be nice is a 'commit format checker' in the CI that doesn't immediately turn red if it doesn't succeed but rather points the contributor to the guidelines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14410#issuecomment-1916621891
https://github.com/root-project/root/pull/14420#issuecomment-1910617703:169,Energy Efficiency,allocate,allocated,169,"Hi @dpiparo and @lmoneta, I included an additional gtest suite. I also modified to documentation so that it's clear that whenever b is rectangular, additional memory is allocated to compute a^(-1).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14420#issuecomment-1910617703
https://github.com/root-project/root/pull/14420#issuecomment-1910617703:110,Usability,clear,clear,110,"Hi @dpiparo and @lmoneta, I included an additional gtest suite. I also modified to documentation so that it's clear that whenever b is rectangular, additional memory is allocated to compute a^(-1).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14420#issuecomment-1910617703
https://github.com/root-project/root/issues/14425#issuecomment-1935515180:35,Deployability,patch,patch,35,"This is dealt with in cppyy with a patch to TCling at https://github.com/wlav/cppyy-backend/blob/25caf988cef1f2f76705c07b7262f076e8ed0e01/cling/src/core/metacling/src/TClingCallFunc.cxx#L468-L485 . Applying this patch as-is is not possible as it does not work on all platforms and is not generic enough (doesn't take into account the case of a templated move constructor). More in general, it is not yet clear to me that we want to force the implicit move in these cases. Python does not have the equivalent concepts of smart pointers, move semantics etc., so the line is quite blurry here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14425#issuecomment-1935515180
https://github.com/root-project/root/issues/14425#issuecomment-1935515180:212,Deployability,patch,patch,212,"This is dealt with in cppyy with a patch to TCling at https://github.com/wlav/cppyy-backend/blob/25caf988cef1f2f76705c07b7262f076e8ed0e01/cling/src/core/metacling/src/TClingCallFunc.cxx#L468-L485 . Applying this patch as-is is not possible as it does not work on all platforms and is not generic enough (doesn't take into account the case of a templated move constructor). More in general, it is not yet clear to me that we want to force the implicit move in these cases. Python does not have the equivalent concepts of smart pointers, move semantics etc., so the line is quite blurry here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14425#issuecomment-1935515180
https://github.com/root-project/root/issues/14425#issuecomment-1935515180:404,Usability,clear,clear,404,"This is dealt with in cppyy with a patch to TCling at https://github.com/wlav/cppyy-backend/blob/25caf988cef1f2f76705c07b7262f076e8ed0e01/cling/src/core/metacling/src/TClingCallFunc.cxx#L468-L485 . Applying this patch as-is is not possible as it does not work on all platforms and is not generic enough (doesn't take into account the case of a templated move constructor). More in general, it is not yet clear to me that we want to force the implicit move in these cases. Python does not have the equivalent concepts of smart pointers, move semantics etc., so the line is quite blurry here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14425#issuecomment-1935515180
https://github.com/root-project/root/pull/14426#issuecomment-1917903939:289,Availability,error,error,289,"So indeed this other test does not work; ```python; import ROOT. ROOT.gInterpreter.Declare(r'''; struct A{; int mA{42};; A() {}; A(const A&) = delete;; template<typename T = int>; A(A &&) {}; };; int foo(A a = A{}) { return a.mA; }; '''). print(ROOT.foo()); ```; ```; input_line_36:18:45: error: call to deleted constructor of 'A'; new (ret) (int) (((int (&)(A))foo)(*(A*)args[0]));; ^~~~~~~~~~~~; input_line_35:5:5: note: 'A' has been explicitly marked deleted here; A(const A&) = delete;; ^; ```. Also, it seems to me that indeed in the case of a templated move constructor, the AST generated by clang simply does not report it in the class definition data, see [this example](https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAMzwBtMA7AQwFtMQByARg9KtQYEAysib0QXACx8BBAKoBnTAAUAHpwAMvAFYTStJg1DIApACYAQuYukl9ZATwDKjdAGFUtAK4sGIAMykrgAyeAyYAHI%2BAEaYxCAA7KQADqgKhE4MHt6%2BASlpGQKh4VEssfFJdpgOmUIETMQE2T5%2BgVU1AnUNBMWRMXGJtvWNzbltwz1hfWUDCQCUtqhexMjsHAoExF4OANQAgiYJVhp7O2c7YQQ7LAdHkmaHACIm/sen53sQczuHVgnPJ3O%2BwgaAYG325gAbN8Xo8dlh6ARMC83kCkSxkgYkS83AQAJ7JRisTA7AAqP38cMuL2wJkBHwgpyhUJhRyedNuz1eHMuO34qEZOyYFLhtz%2Bj1ZFh2xEwBGWDCFADobiifv8ORwFrROABWXh%2BDhaUioThuazWHYKJYrEnmfw8UgETSahYAaxAZh1%2Bk4kn1zuNnF4ChAGkdzoWcFgSDQGLocXIlBjyTj8WQBiMXEhGiYCiUjT4dCRxGDEGi/uiYQaeM4DorzGIeIA8tFtNUndxeDG2IJGwxaNXDbwsNEvMA3GJaMGO6QsCxDMBxIOZ3gZTUAG6YKdGzCqapeJE13iXTDape0PDRYhVjxYf2bPAsQ8LKgGYAKABqeEwAHdG4SDQ6/CCCIYjsFIMiCIoKjqEuuhcPo84oOalj6BewaQAsqDJI4AhTrwqAbsQxB4Fg6FfLYJ5tpkLgMO4ngtBIZhBLRvSlOUICQvk6Q4Vk9G5FwTGpNxmSsf08Sce0PFdCMfF%2BAJFH2FJEyiTM4lDN0oxyUxGzdCp7HQosyyrBIWq6n6S4mhwOyqAAHJCAC0kKSDsabzjsmaKhonk7BAOZ5jxCjfBAuCECQPxmPacy8O2WhzG6HpeqevqkAaRqWUGIZhoOEYwIgIBLAQyT7gmIKoLG9DEBExKcLZDlOTswDIMg7n%2BIqZi8Jg%2BBEMR6B6EBwiiOI4H9VBaj%2BnBpDfleyRPt6HB6il/qWY2%2B5FVcqBUNZdmOc5rlGO5kKed5vm5nEAVBR45VxOFkXReG8VcIqCTPTqZhmAAnP4OrPe9NmZpxSXmWlga2JlMWaqQkZ5TmBAlUmKZVWwNXbfVe3AAdR0aD5flnZkgUdV1JAkX1sggUN0gjUoY2wXoknURAriaSAkihiEUxsQMX1cYUvE5H4LPczxemc16dOdBMTMC2LDDSZMJRiQEosS7JzOhjpjTC/EX0LJsm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14426#issuecomment-1917903939
https://github.com/root-project/root/pull/14426#issuecomment-1917903939:21,Testability,test,test,21,"So indeed this other test does not work; ```python; import ROOT. ROOT.gInterpreter.Declare(r'''; struct A{; int mA{42};; A() {}; A(const A&) = delete;; template<typename T = int>; A(A &&) {}; };; int foo(A a = A{}) { return a.mA; }; '''). print(ROOT.foo()); ```; ```; input_line_36:18:45: error: call to deleted constructor of 'A'; new (ret) (int) (((int (&)(A))foo)(*(A*)args[0]));; ^~~~~~~~~~~~; input_line_35:5:5: note: 'A' has been explicitly marked deleted here; A(const A&) = delete;; ^; ```. Also, it seems to me that indeed in the case of a templated move constructor, the AST generated by clang simply does not report it in the class definition data, see [this example](https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAMzwBtMA7AQwFtMQByARg9KtQYEAysib0QXACx8BBAKoBnTAAUAHpwAMvAFYTStJg1DIApACYAQuYukl9ZATwDKjdAGFUtAK4sGIAMykrgAyeAyYAHI%2BAEaYxCAA7KQADqgKhE4MHt6%2BASlpGQKh4VEssfFJdpgOmUIETMQE2T5%2BgVU1AnUNBMWRMXGJtvWNzbltwz1hfWUDCQCUtqhexMjsHAoExF4OANQAgiYJVhp7O2c7YQQ7LAdHkmaHACIm/sen53sQczuHVgnPJ3O%2BwgaAYG325gAbN8Xo8dlh6ARMC83kCkSxkgYkS83AQAJ7JRisTA7AAqP38cMuL2wJkBHwgpyhUJhRyedNuz1eHMuO34qEZOyYFLhtz%2Bj1ZFh2xEwBGWDCFADobiifv8ORwFrROABWXh%2BDhaUioThuazWHYKJYrEnmfw8UgETSahYAaxAZh1%2Bk4kn1zuNnF4ChAGkdzoWcFgSDQGLocXIlBjyTj8WQBiMXEhGiYCiUjT4dCRxGDEGi/uiYQaeM4DorzGIeIA8tFtNUndxeDG2IJGwxaNXDbwsNEvMA3GJaMGO6QsCxDMBxIOZ3gZTUAG6YKdGzCqapeJE13iXTDape0PDRYhVjxYf2bPAsQ8LKgGYAKABqeEwAHdG4SDQ6/CCCIYjsFIMiCIoKjqEuuhcPo84oOalj6BewaQAsqDJI4AhTrwqAbsQxB4Fg6FfLYJ5tpkLgMO4ngtBIZhBLRvSlOUICQvk6Q4Vk9G5FwTGpNxmSsf08Sce0PFdCMfF%2BAJFH2FJEyiTM4lDN0oxyUxGzdCp7HQosyyrBIWq6n6S4mhwOyqAAHJCAC0kKSDsabzjsmaKhonk7BAOZ5jxCjfBAuCECQPxmPacy8O2WhzG6HpeqevqkAaRqWUGIZhoOEYwIgIBLAQyT7gmIKoLG9DEBExKcLZDlOTswDIMg7n%2BIqZi8Jg%2BBEMR6B6EBwiiOI4H9VBaj%2BnBpDfleyRPt6HB6il/qWY2%2B5FVcqBUNZdmOc5rlGO5kKed5vm5nEAVBR45VxOFkXReG8VcIqCTPTqZhmAAnP4OrPe9NmZpxSXmWlga2JlMWaqQkZ5TmBAlUmKZVWwNXbfVe3AAdR0aD5flnZkgUdV1JAkX1sggUN0gjUoY2wXoknURAriaSAkihiEUxsQMX1cYUvE5H4LPczxemc16dOdBMTMC2LDDSZMJRiQEosS7JzOhjpjTC/EX0LJsm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14426#issuecomment-1917903939
https://github.com/root-project/root/pull/14426#issuecomment-1917903939:604,Usability,simpl,simply,604,"So indeed this other test does not work; ```python; import ROOT. ROOT.gInterpreter.Declare(r'''; struct A{; int mA{42};; A() {}; A(const A&) = delete;; template<typename T = int>; A(A &&) {}; };; int foo(A a = A{}) { return a.mA; }; '''). print(ROOT.foo()); ```; ```; input_line_36:18:45: error: call to deleted constructor of 'A'; new (ret) (int) (((int (&)(A))foo)(*(A*)args[0]));; ^~~~~~~~~~~~; input_line_35:5:5: note: 'A' has been explicitly marked deleted here; A(const A&) = delete;; ^; ```. Also, it seems to me that indeed in the case of a templated move constructor, the AST generated by clang simply does not report it in the class definition data, see [this example](https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAMzwBtMA7AQwFtMQByARg9KtQYEAysib0QXACx8BBAKoBnTAAUAHpwAMvAFYTStJg1DIApACYAQuYukl9ZATwDKjdAGFUtAK4sGIAMykrgAyeAyYAHI%2BAEaYxCAA7KQADqgKhE4MHt6%2BASlpGQKh4VEssfFJdpgOmUIETMQE2T5%2BgVU1AnUNBMWRMXGJtvWNzbltwz1hfWUDCQCUtqhexMjsHAoExF4OANQAgiYJVhp7O2c7YQQ7LAdHkmaHACIm/sen53sQczuHVgnPJ3O%2BwgaAYG325gAbN8Xo8dlh6ARMC83kCkSxkgYkS83AQAJ7JRisTA7AAqP38cMuL2wJkBHwgpyhUJhRyedNuz1eHMuO34qEZOyYFLhtz%2Bj1ZFh2xEwBGWDCFADobiifv8ORwFrROABWXh%2BDhaUioThuazWHYKJYrEnmfw8UgETSahYAaxAZh1%2Bk4kn1zuNnF4ChAGkdzoWcFgSDQGLocXIlBjyTj8WQBiMXEhGiYCiUjT4dCRxGDEGi/uiYQaeM4DorzGIeIA8tFtNUndxeDG2IJGwxaNXDbwsNEvMA3GJaMGO6QsCxDMBxIOZ3gZTUAG6YKdGzCqapeJE13iXTDape0PDRYhVjxYf2bPAsQ8LKgGYAKABqeEwAHdG4SDQ6/CCCIYjsFIMiCIoKjqEuuhcPo84oOalj6BewaQAsqDJI4AhTrwqAbsQxB4Fg6FfLYJ5tpkLgMO4ngtBIZhBLRvSlOUICQvk6Q4Vk9G5FwTGpNxmSsf08Sce0PFdCMfF%2BAJFH2FJEyiTM4lDN0oxyUxGzdCp7HQosyyrBIWq6n6S4mhwOyqAAHJCAC0kKSDsabzjsmaKhonk7BAOZ5jxCjfBAuCECQPxmPacy8O2WhzG6HpeqevqkAaRqWUGIZhoOEYwIgIBLAQyT7gmIKoLG9DEBExKcLZDlOTswDIMg7n%2BIqZi8Jg%2BBEMR6B6EBwiiOI4H9VBaj%2BnBpDfleyRPt6HB6il/qWY2%2B5FVcqBUNZdmOc5rlGO5kKed5vm5nEAVBR45VxOFkXReG8VcIqCTPTqZhmAAnP4OrPe9NmZpxSXmWlga2JlMWaqQkZ5TmBAlUmKZVWwNXbfVe3AAdR0aD5flnZkgUdV1JAkX1sggUN0gjUoY2wXoknURAriaSAkihiEUxsQMX1cYUvE5H4LPczxemc16dOdBMTMC2LDDSZMJRiQEosS7JzOhjpjTC/EX0LJsm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14426#issuecomment-1917903939
https://github.com/root-project/root/pull/14426#issuecomment-1918556597:2960,Availability,avail,available,2960,"nZkgUdV1JAkX1sggUN0gjUoY2wXoknURAriaSAkihiEUxsQMX1cYUvE5H4LPczxemc16dOdBMTMC2LDDSZMJRiQEosS7JzOhjpjTC/EX0LJsmCYMTGimfNQP4Zwezgp%2BP7XbVO0uem6MeV5WMnf5eNBSF3U3fBOyXcmFVe1FWWxfFkg2W1b2SM9GhOW9GhcDZc3JalpscBlobg3Fc3tYtFkgxnCyEekziSEAA%3D). There, by commenting the template declaration of the move constructor, one can see the corresponding AST definition data being filled, i.e. from; > ; > ```; > | | |-MoveConstructor; > ```; > ; > to; > ; > ```; > | | |-MoveConstructor exists non_trivial user_declared; > ```; > ; > I am surely not expert enough in this area, but I noticed that when the constructor is templated the corresponding `CXXConstructorDecl` is nested inside a `FunctionTemplateDecl`, so that may be ""hiding"" it somehow?. I suppose that with a template move constructor is not the ""canonical form"" of a move constructor (or whatever the right standardese is). I was hoping that it's reported once the template is instantiated, but that doesn't seem the case either. In any case, what you really want to ask Clang is ""can you copy-construct this thing"" and ""can you move-construct this thing"". That logic is implemented in `EvaluateBooleanTypeTrait` of `SemaExprCXX.cpp` and is indeed a bit hairy because it actually has to run through all the machinery of template instantiation and overload resolution. You can invoke that machinery via `Sema::BuildTypeTrait` with `Kind = clang::TT_IsConstructible`. Alternatively, you can try using the `__is_constructible` builtin in the generated wrapper code, but I'm not sure how that would work because it's not available in the preprocessor... Final remark: A better heuristic could be to check for [`defaultedCopyConstructorIsDeleted()`](https://clang.llvm.org/doxygen/classclang_1_1CXXRecordDecl.html#a6cd5ebd1006eab239a19413c2886dab3) and then just try the `std::move`. I think that heuristic still has false-negatives and false-positives, but I think it gets the one case right where the explicit intent is to `delete` the copy constructor...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14426#issuecomment-1918556597
https://github.com/root-project/root/pull/14426#issuecomment-1918556597:2892,Integrability,wrap,wrapper,2892,"nZkgUdV1JAkX1sggUN0gjUoY2wXoknURAriaSAkihiEUxsQMX1cYUvE5H4LPczxemc16dOdBMTMC2LDDSZMJRiQEosS7JzOhjpjTC/EX0LJsmCYMTGimfNQP4Zwezgp%2BP7XbVO0uem6MeV5WMnf5eNBSF3U3fBOyXcmFVe1FWWxfFkg2W1b2SM9GhOW9GhcDZc3JalpscBlobg3Fc3tYtFkgxnCyEekziSEAA%3D). There, by commenting the template declaration of the move constructor, one can see the corresponding AST definition data being filled, i.e. from; > ; > ```; > | | |-MoveConstructor; > ```; > ; > to; > ; > ```; > | | |-MoveConstructor exists non_trivial user_declared; > ```; > ; > I am surely not expert enough in this area, but I noticed that when the constructor is templated the corresponding `CXXConstructorDecl` is nested inside a `FunctionTemplateDecl`, so that may be ""hiding"" it somehow?. I suppose that with a template move constructor is not the ""canonical form"" of a move constructor (or whatever the right standardese is). I was hoping that it's reported once the template is instantiated, but that doesn't seem the case either. In any case, what you really want to ask Clang is ""can you copy-construct this thing"" and ""can you move-construct this thing"". That logic is implemented in `EvaluateBooleanTypeTrait` of `SemaExprCXX.cpp` and is indeed a bit hairy because it actually has to run through all the machinery of template instantiation and overload resolution. You can invoke that machinery via `Sema::BuildTypeTrait` with `Kind = clang::TT_IsConstructible`. Alternatively, you can try using the `__is_constructible` builtin in the generated wrapper code, but I'm not sure how that would work because it's not available in the preprocessor... Final remark: A better heuristic could be to check for [`defaultedCopyConstructorIsDeleted()`](https://clang.llvm.org/doxygen/classclang_1_1CXXRecordDecl.html#a6cd5ebd1006eab239a19413c2886dab3) and then just try the `std::move`. I think that heuristic still has false-negatives and false-positives, but I think it gets the one case right where the explicit intent is to `delete` the copy constructor...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14426#issuecomment-1918556597
https://github.com/root-project/root/pull/14426#issuecomment-1918556597:2505,Testability,log,logic,2505,"nZkgUdV1JAkX1sggUN0gjUoY2wXoknURAriaSAkihiEUxsQMX1cYUvE5H4LPczxemc16dOdBMTMC2LDDSZMJRiQEosS7JzOhjpjTC/EX0LJsmCYMTGimfNQP4Zwezgp%2BP7XbVO0uem6MeV5WMnf5eNBSF3U3fBOyXcmFVe1FWWxfFkg2W1b2SM9GhOW9GhcDZc3JalpscBlobg3Fc3tYtFkgxnCyEekziSEAA%3D). There, by commenting the template declaration of the move constructor, one can see the corresponding AST definition data being filled, i.e. from; > ; > ```; > | | |-MoveConstructor; > ```; > ; > to; > ; > ```; > | | |-MoveConstructor exists non_trivial user_declared; > ```; > ; > I am surely not expert enough in this area, but I noticed that when the constructor is templated the corresponding `CXXConstructorDecl` is nested inside a `FunctionTemplateDecl`, so that may be ""hiding"" it somehow?. I suppose that with a template move constructor is not the ""canonical form"" of a move constructor (or whatever the right standardese is). I was hoping that it's reported once the template is instantiated, but that doesn't seem the case either. In any case, what you really want to ask Clang is ""can you copy-construct this thing"" and ""can you move-construct this thing"". That logic is implemented in `EvaluateBooleanTypeTrait` of `SemaExprCXX.cpp` and is indeed a bit hairy because it actually has to run through all the machinery of template instantiation and overload resolution. You can invoke that machinery via `Sema::BuildTypeTrait` with `Kind = clang::TT_IsConstructible`. Alternatively, you can try using the `__is_constructible` builtin in the generated wrapper code, but I'm not sure how that would work because it's not available in the preprocessor... Final remark: A better heuristic could be to check for [`defaultedCopyConstructorIsDeleted()`](https://clang.llvm.org/doxygen/classclang_1_1CXXRecordDecl.html#a6cd5ebd1006eab239a19413c2886dab3) and then just try the `std::move`. I think that heuristic still has false-negatives and false-positives, but I think it gets the one case right where the explicit intent is to `delete` the copy constructor...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14426#issuecomment-1918556597
https://github.com/root-project/root/pull/14426#issuecomment-1918556597:107,Usability,simpl,simply,107,"> Also, it seems to me that indeed in the case of a templated move constructor, the AST generated by clang simply does not report it in the class definition data, see [this example](https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAMzwBtMA7AQwFtMQByARg9KtQYEAysib0QXACx8BBAKoBnTAAUAHpwAMvAFYTStJg1DIApACYAQuYukl9ZATwDKjdAGFUtAK4sGIAMykrgAyeAyYAHI%2BAEaYxCAA7KQADqgKhE4MHt6%2BASlpGQKh4VEssfFJdpgOmUIETMQE2T5%2BgVU1AnUNBMWRMXGJtvWNzbltwz1hfWUDCQCUtqhexMjsHAoExF4OANQAgiYJVhp7O2c7YQQ7LAdHkmaHACIm/sen53sQczuHVgnPJ3O%2BwgaAYG325gAbN8Xo8dlh6ARMC83kCkSxkgYkS83AQAJ7JRisTA7AAqP38cMuL2wJkBHwgpyhUJhRyedNuz1eHMuO34qEZOyYFLhtz%2Bj1ZFh2xEwBGWDCFADobiifv8ORwFrROABWXh%2BDhaUioThuazWHYKJYrEnmfw8UgETSahYAaxAZh1%2Bk4kn1zuNnF4ChAGkdzoWcFgSDQGLocXIlBjyTj8WQBiMXEhGiYCiUjT4dCRxGDEGi/uiYQaeM4DorzGIeIA8tFtNUndxeDG2IJGwxaNXDbwsNEvMA3GJaMGO6QsCxDMBxIOZ3gZTUAG6YKdGzCqapeJE13iXTDape0PDRYhVjxYf2bPAsQ8LKgGYAKABqeEwAHdG4SDQ6/CCCIYjsFIMiCIoKjqEuuhcPo84oOalj6BewaQAsqDJI4AhTrwqAbsQxB4Fg6FfLYJ5tpkLgMO4ngtBIZhBLRvSlOUICQvk6Q4Vk9G5FwTGpNxmSsf08Sce0PFdCMfF%2BAJFH2FJEyiTM4lDN0oxyUxGzdCp7HQosyyrBIWq6n6S4mhwOyqAAHJCAC0kKSDsabzjsmaKhonk7BAOZ5jxCjfBAuCECQPxmPacy8O2WhzG6HpeqevqkAaRqWUGIZhoOEYwIgIBLAQyT7gmIKoLG9DEBExKcLZDlOTswDIMg7n%2BIqZi8Jg%2BBEMR6B6EBwiiOI4H9VBaj%2BnBpDfleyRPt6HB6il/qWY2%2B5FVcqBUNZdmOc5rlGO5kKed5vm5nEAVBR45VxOFkXReG8VcIqCTPTqZhmAAnP4OrPe9NmZpxSXmWlga2JlMWaqQkZ5TmBAlUmKZVWwNXbfVe3AAdR0aD5flnZkgUdV1JAkX1sggUN0gjUoY2wXoknURAriaSAkihiEUxsQMX1cYUvE5H4LPczxemc16dOdBMTMC2LDDSZMJRiQEosS7JzOhjpjTC/EX0LJsmCYMTGimfNQP4Zwezgp%2BP7XbVO0uem6MeV5WMnf5eNBSF3U3fBOyXcmFVe1FWWxfFkg2W1b2SM9GhOW9GhcDZc3JalpscBlobg3Fc3tYtFkgxnCyEekziSEAA%3D). There, by commenting the template declaration of the move constructor, one can see the corresponding AST definition data being filled, i.e. from; > ; > ```; > | | |-MoveConstructor; > ```; > ; > to; > ; > ```; > | | |-MoveConstructor exists non_trivial user_declared; > ```; > ; > I am surely not expert enough in this area, but I noticed that when the constructor is t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14426#issuecomment-1918556597
https://github.com/root-project/root/issues/14433#issuecomment-1910477019:155,Availability,fault,faulty,155,"After more investigation, it is less clear to me how the valgrind report and the `AddDataset` function are related. Still, the logic of the function seems faulty any way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14433#issuecomment-1910477019
https://github.com/root-project/root/issues/14433#issuecomment-1910477019:127,Testability,log,logic,127,"After more investigation, it is less clear to me how the valgrind report and the `AddDataset` function are related. Still, the logic of the function seems faulty any way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14433#issuecomment-1910477019
https://github.com/root-project/root/issues/14433#issuecomment-1910477019:37,Usability,clear,clear,37,"After more investigation, it is less clear to me how the valgrind report and the `AddDataset` function are related. Still, the logic of the function seems faulty any way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14433#issuecomment-1910477019
https://github.com/root-project/root/issues/14439#issuecomment-1924166327:24,Usability,guid,guidelines,24,"> Are there some common guidelines for the future on this? Like 'only do changes in 6.30 branch', or 'only do changes in master and then backport'?. I don't think we have a guideline yet for this very specific case. I think in practice, for the majority of cases we try to merge changes in master and then backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1924166327
https://github.com/root-project/root/issues/14439#issuecomment-1924166327:173,Usability,guid,guideline,173,"> Are there some common guidelines for the future on this? Like 'only do changes in 6.30 branch', or 'only do changes in master and then backport'?. I don't think we have a guideline yet for this very specific case. I think in practice, for the majority of cases we try to merge changes in master and then backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1924166327
https://github.com/root-project/root/issues/14439#issuecomment-1944051025:690,Deployability,release,released,690,"> > Are there some common guidelines for the future on this? Like 'only do changes in 6.30 branch', or 'only do changes in master and then backport'?; > ; > I don't think we have a guideline yet for this very specific case. I think in practice, for the majority of cases we try to merge changes in master and then backport. Let's imagine an example. I fix an issue for 6.32, and it is automatically collected and added to the 6.32 Release Notes. Furthermore i add a custom message to 6.32relnotes in the e.g. roofit section. I then backport the fix to 6.30. However, this time, the custom message in relnotes will not be automatically added to the 6.30 Release Notes because it was already released. So, after backporting the fix from master to 630, should one:. a) Create a new PR for the 630_ReleaseNotes file, but on the master branch and then after merging, backport it to 6.30 branch; or; b) Create a new PR for the 630_ReleaseNotes file and forget about the master branch, which will stay with an outdated version of 630-relnotes, which is however not very critical since the RelnotesWebpage for 6.30 is built from the 630 branch and not from master?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1944051025
https://github.com/root-project/root/issues/14439#issuecomment-1944051025:473,Integrability,message,message,473,"> > Are there some common guidelines for the future on this? Like 'only do changes in 6.30 branch', or 'only do changes in master and then backport'?; > ; > I don't think we have a guideline yet for this very specific case. I think in practice, for the majority of cases we try to merge changes in master and then backport. Let's imagine an example. I fix an issue for 6.32, and it is automatically collected and added to the 6.32 Release Notes. Furthermore i add a custom message to 6.32relnotes in the e.g. roofit section. I then backport the fix to 6.30. However, this time, the custom message in relnotes will not be automatically added to the 6.30 Release Notes because it was already released. So, after backporting the fix from master to 630, should one:. a) Create a new PR for the 630_ReleaseNotes file, but on the master branch and then after merging, backport it to 6.30 branch; or; b) Create a new PR for the 630_ReleaseNotes file and forget about the master branch, which will stay with an outdated version of 630-relnotes, which is however not very critical since the RelnotesWebpage for 6.30 is built from the 630 branch and not from master?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1944051025
https://github.com/root-project/root/issues/14439#issuecomment-1944051025:589,Integrability,message,message,589,"> > Are there some common guidelines for the future on this? Like 'only do changes in 6.30 branch', or 'only do changes in master and then backport'?; > ; > I don't think we have a guideline yet for this very specific case. I think in practice, for the majority of cases we try to merge changes in master and then backport. Let's imagine an example. I fix an issue for 6.32, and it is automatically collected and added to the 6.32 Release Notes. Furthermore i add a custom message to 6.32relnotes in the e.g. roofit section. I then backport the fix to 6.30. However, this time, the custom message in relnotes will not be automatically added to the 6.30 Release Notes because it was already released. So, after backporting the fix from master to 630, should one:. a) Create a new PR for the 630_ReleaseNotes file, but on the master branch and then after merging, backport it to 6.30 branch; or; b) Create a new PR for the 630_ReleaseNotes file and forget about the master branch, which will stay with an outdated version of 630-relnotes, which is however not very critical since the RelnotesWebpage for 6.30 is built from the 630 branch and not from master?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1944051025
https://github.com/root-project/root/issues/14439#issuecomment-1944051025:26,Usability,guid,guidelines,26,"> > Are there some common guidelines for the future on this? Like 'only do changes in 6.30 branch', or 'only do changes in master and then backport'?; > ; > I don't think we have a guideline yet for this very specific case. I think in practice, for the majority of cases we try to merge changes in master and then backport. Let's imagine an example. I fix an issue for 6.32, and it is automatically collected and added to the 6.32 Release Notes. Furthermore i add a custom message to 6.32relnotes in the e.g. roofit section. I then backport the fix to 6.30. However, this time, the custom message in relnotes will not be automatically added to the 6.30 Release Notes because it was already released. So, after backporting the fix from master to 630, should one:. a) Create a new PR for the 630_ReleaseNotes file, but on the master branch and then after merging, backport it to 6.30 branch; or; b) Create a new PR for the 630_ReleaseNotes file and forget about the master branch, which will stay with an outdated version of 630-relnotes, which is however not very critical since the RelnotesWebpage for 6.30 is built from the 630 branch and not from master?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1944051025
https://github.com/root-project/root/issues/14439#issuecomment-1944051025:181,Usability,guid,guideline,181,"> > Are there some common guidelines for the future on this? Like 'only do changes in 6.30 branch', or 'only do changes in master and then backport'?; > ; > I don't think we have a guideline yet for this very specific case. I think in practice, for the majority of cases we try to merge changes in master and then backport. Let's imagine an example. I fix an issue for 6.32, and it is automatically collected and added to the 6.32 Release Notes. Furthermore i add a custom message to 6.32relnotes in the e.g. roofit section. I then backport the fix to 6.30. However, this time, the custom message in relnotes will not be automatically added to the 6.30 Release Notes because it was already released. So, after backporting the fix from master to 630, should one:. a) Create a new PR for the 630_ReleaseNotes file, but on the master branch and then after merging, backport it to 6.30 branch; or; b) Create a new PR for the 630_ReleaseNotes file and forget about the master branch, which will stay with an outdated version of 630-relnotes, which is however not very critical since the RelnotesWebpage for 6.30 is built from the 630 branch and not from master?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1944051025
https://github.com/root-project/root/issues/14439#issuecomment-1947883057:88,Deployability,release,released,88,"> > it will not be automatically added to the 6.30 Release Notes because it was already released; > ; > This might not be specific enough. The release notes for the already released version of v6.30 (let's say v6.30.04) are frozen by definition. However the fix should be properly pickup by the release procedure for the next version, i.e. v6.30.06. (of course this require adding the proper tag to the issue). What am I missing?. Thanks for the message.; True, but I did not express myself well (edited now above message). I am not speaking only about the automatic fixed issues collection protocol. I am speaking about manual additions to the release notes where a more in-depth message is written. In that case, there is the ambiguity of where this should be added, in the 63006relnotes of master and then backport to 630patches, or rather directly in 630patches. Right now, we have a bit of everything. If you use 'meld' to compare them, you will see the issue more clearly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1947883057
https://github.com/root-project/root/issues/14439#issuecomment-1947883057:143,Deployability,release,release,143,"> > it will not be automatically added to the 6.30 Release Notes because it was already released; > ; > This might not be specific enough. The release notes for the already released version of v6.30 (let's say v6.30.04) are frozen by definition. However the fix should be properly pickup by the release procedure for the next version, i.e. v6.30.06. (of course this require adding the proper tag to the issue). What am I missing?. Thanks for the message.; True, but I did not express myself well (edited now above message). I am not speaking only about the automatic fixed issues collection protocol. I am speaking about manual additions to the release notes where a more in-depth message is written. In that case, there is the ambiguity of where this should be added, in the 63006relnotes of master and then backport to 630patches, or rather directly in 630patches. Right now, we have a bit of everything. If you use 'meld' to compare them, you will see the issue more clearly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1947883057
https://github.com/root-project/root/issues/14439#issuecomment-1947883057:173,Deployability,release,released,173,"> > it will not be automatically added to the 6.30 Release Notes because it was already released; > ; > This might not be specific enough. The release notes for the already released version of v6.30 (let's say v6.30.04) are frozen by definition. However the fix should be properly pickup by the release procedure for the next version, i.e. v6.30.06. (of course this require adding the proper tag to the issue). What am I missing?. Thanks for the message.; True, but I did not express myself well (edited now above message). I am not speaking only about the automatic fixed issues collection protocol. I am speaking about manual additions to the release notes where a more in-depth message is written. In that case, there is the ambiguity of where this should be added, in the 63006relnotes of master and then backport to 630patches, or rather directly in 630patches. Right now, we have a bit of everything. If you use 'meld' to compare them, you will see the issue more clearly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1947883057
https://github.com/root-project/root/issues/14439#issuecomment-1947883057:295,Deployability,release,release,295,"> > it will not be automatically added to the 6.30 Release Notes because it was already released; > ; > This might not be specific enough. The release notes for the already released version of v6.30 (let's say v6.30.04) are frozen by definition. However the fix should be properly pickup by the release procedure for the next version, i.e. v6.30.06. (of course this require adding the proper tag to the issue). What am I missing?. Thanks for the message.; True, but I did not express myself well (edited now above message). I am not speaking only about the automatic fixed issues collection protocol. I am speaking about manual additions to the release notes where a more in-depth message is written. In that case, there is the ambiguity of where this should be added, in the 63006relnotes of master and then backport to 630patches, or rather directly in 630patches. Right now, we have a bit of everything. If you use 'meld' to compare them, you will see the issue more clearly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1947883057
https://github.com/root-project/root/issues/14439#issuecomment-1947883057:645,Deployability,release,release,645,"> > it will not be automatically added to the 6.30 Release Notes because it was already released; > ; > This might not be specific enough. The release notes for the already released version of v6.30 (let's say v6.30.04) are frozen by definition. However the fix should be properly pickup by the release procedure for the next version, i.e. v6.30.06. (of course this require adding the proper tag to the issue). What am I missing?. Thanks for the message.; True, but I did not express myself well (edited now above message). I am not speaking only about the automatic fixed issues collection protocol. I am speaking about manual additions to the release notes where a more in-depth message is written. In that case, there is the ambiguity of where this should be added, in the 63006relnotes of master and then backport to 630patches, or rather directly in 630patches. Right now, we have a bit of everything. If you use 'meld' to compare them, you will see the issue more clearly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1947883057
https://github.com/root-project/root/issues/14439#issuecomment-1947883057:446,Integrability,message,message,446,"> > it will not be automatically added to the 6.30 Release Notes because it was already released; > ; > This might not be specific enough. The release notes for the already released version of v6.30 (let's say v6.30.04) are frozen by definition. However the fix should be properly pickup by the release procedure for the next version, i.e. v6.30.06. (of course this require adding the proper tag to the issue). What am I missing?. Thanks for the message.; True, but I did not express myself well (edited now above message). I am not speaking only about the automatic fixed issues collection protocol. I am speaking about manual additions to the release notes where a more in-depth message is written. In that case, there is the ambiguity of where this should be added, in the 63006relnotes of master and then backport to 630patches, or rather directly in 630patches. Right now, we have a bit of everything. If you use 'meld' to compare them, you will see the issue more clearly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1947883057
https://github.com/root-project/root/issues/14439#issuecomment-1947883057:514,Integrability,message,message,514,"> > it will not be automatically added to the 6.30 Release Notes because it was already released; > ; > This might not be specific enough. The release notes for the already released version of v6.30 (let's say v6.30.04) are frozen by definition. However the fix should be properly pickup by the release procedure for the next version, i.e. v6.30.06. (of course this require adding the proper tag to the issue). What am I missing?. Thanks for the message.; True, but I did not express myself well (edited now above message). I am not speaking only about the automatic fixed issues collection protocol. I am speaking about manual additions to the release notes where a more in-depth message is written. In that case, there is the ambiguity of where this should be added, in the 63006relnotes of master and then backport to 630patches, or rather directly in 630patches. Right now, we have a bit of everything. If you use 'meld' to compare them, you will see the issue more clearly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1947883057
https://github.com/root-project/root/issues/14439#issuecomment-1947883057:591,Integrability,protocol,protocol,591,"> > it will not be automatically added to the 6.30 Release Notes because it was already released; > ; > This might not be specific enough. The release notes for the already released version of v6.30 (let's say v6.30.04) are frozen by definition. However the fix should be properly pickup by the release procedure for the next version, i.e. v6.30.06. (of course this require adding the proper tag to the issue). What am I missing?. Thanks for the message.; True, but I did not express myself well (edited now above message). I am not speaking only about the automatic fixed issues collection protocol. I am speaking about manual additions to the release notes where a more in-depth message is written. In that case, there is the ambiguity of where this should be added, in the 63006relnotes of master and then backport to 630patches, or rather directly in 630patches. Right now, we have a bit of everything. If you use 'meld' to compare them, you will see the issue more clearly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1947883057
https://github.com/root-project/root/issues/14439#issuecomment-1947883057:681,Integrability,message,message,681,"> > it will not be automatically added to the 6.30 Release Notes because it was already released; > ; > This might not be specific enough. The release notes for the already released version of v6.30 (let's say v6.30.04) are frozen by definition. However the fix should be properly pickup by the release procedure for the next version, i.e. v6.30.06. (of course this require adding the proper tag to the issue). What am I missing?. Thanks for the message.; True, but I did not express myself well (edited now above message). I am not speaking only about the automatic fixed issues collection protocol. I am speaking about manual additions to the release notes where a more in-depth message is written. In that case, there is the ambiguity of where this should be added, in the 63006relnotes of master and then backport to 630patches, or rather directly in 630patches. Right now, we have a bit of everything. If you use 'meld' to compare them, you will see the issue more clearly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1947883057
https://github.com/root-project/root/issues/14439#issuecomment-1947883057:970,Usability,clear,clearly,970,"> > it will not be automatically added to the 6.30 Release Notes because it was already released; > ; > This might not be specific enough. The release notes for the already released version of v6.30 (let's say v6.30.04) are frozen by definition. However the fix should be properly pickup by the release procedure for the next version, i.e. v6.30.06. (of course this require adding the proper tag to the issue). What am I missing?. Thanks for the message.; True, but I did not express myself well (edited now above message). I am not speaking only about the automatic fixed issues collection protocol. I am speaking about manual additions to the release notes where a more in-depth message is written. In that case, there is the ambiguity of where this should be added, in the 63006relnotes of master and then backport to 630patches, or rather directly in 630patches. Right now, we have a bit of everything. If you use 'meld' to compare them, you will see the issue more clearly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-1947883057
https://github.com/root-project/root/pull/14468#issuecomment-1916371964:114,Availability,error,error,114,"Alright, I think I understand what's going on (even though it's not fully clear to me why the story changes to an error in C++20): `REntry::GetPtr<T>` instantiates `RField<T>::TypeName()` to check the type name and despite the `if constexpr (std::is_void_v<T>)` check, it seems the compiler does ""something"" with `RField<void>`. In this PR, as mentioned above, the base class destructor changes to `virtual ~RFieldBase() = default;` in the header so the compiler sees it and apparently tries to instantiate also `GenerateValue`. There are a couple of solutions: First we can move `~RFieldBase()` back into the source file:; ```diff; diff --git a/tree/ntuple/v7/inc/ROOT/RField.hxx b/tree/ntuple/v7/inc/ROOT/RField.hxx; index deb9d5f4a3..cd0b5dd89e 100644; --- a/tree/ntuple/v7/inc/ROOT/RField.hxx; +++ b/tree/ntuple/v7/inc/ROOT/RField.hxx; @@ -570,7 +570,7 @@ public:; RFieldBase(RFieldBase&&) = default;; RFieldBase& operator =(const RFieldBase&) = delete;; RFieldBase& operator =(RFieldBase&&) = default;; - virtual ~RFieldBase() = default;; + virtual ~RFieldBase();; ; /// Copies the field and its sub fields using a possibly new name and a new, unconnected set of columns; std::unique_ptr<RFieldBase> Clone(std::string_view newName) const;; diff --git a/tree/ntuple/v7/src/RField.cxx b/tree/ntuple/v7/src/RField.cxx; index ef04fec76c..41d4962ac5 100644; --- a/tree/ntuple/v7/src/RField.cxx; +++ b/tree/ntuple/v7/src/RField.cxx; @@ -410,6 +410,10 @@ ROOT::Experimental::RFieldBase::RFieldBase(std::string_view name, std::string_vi; {; }; ; +ROOT::Experimental::RFieldBase::~RFieldBase(); +{; +}; +; std::string ROOT::Experimental::RFieldBase::GetQualifiedFieldName() const; {; std::string result = GetFieldName();; ```. Alternatively it helps to switch the `if constexpr` around to avoid the compiler instantiate the `RField<void>`:; ```diff; diff --git a/tree/ntuple/v7/inc/ROOT/REntry.hxx b/tree/ntuple/v7/inc/ROOT/REntry.hxx; index 1f3ec47095..b7b70b24cb 100644; --- a/tree/ntuple/v7/inc/ROOT/RE",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14468#issuecomment-1916371964
https://github.com/root-project/root/pull/14468#issuecomment-1916371964:1785,Safety,avoid,avoid,1785,"ee/ntuple/v7/inc/ROOT/RField.hxx; @@ -570,7 +570,7 @@ public:; RFieldBase(RFieldBase&&) = default;; RFieldBase& operator =(const RFieldBase&) = delete;; RFieldBase& operator =(RFieldBase&&) = default;; - virtual ~RFieldBase() = default;; + virtual ~RFieldBase();; ; /// Copies the field and its sub fields using a possibly new name and a new, unconnected set of columns; std::unique_ptr<RFieldBase> Clone(std::string_view newName) const;; diff --git a/tree/ntuple/v7/src/RField.cxx b/tree/ntuple/v7/src/RField.cxx; index ef04fec76c..41d4962ac5 100644; --- a/tree/ntuple/v7/src/RField.cxx; +++ b/tree/ntuple/v7/src/RField.cxx; @@ -410,6 +410,10 @@ ROOT::Experimental::RFieldBase::RFieldBase(std::string_view name, std::string_vi; {; }; ; +ROOT::Experimental::RFieldBase::~RFieldBase(); +{; +}; +; std::string ROOT::Experimental::RFieldBase::GetQualifiedFieldName() const; {; std::string result = GetFieldName();; ```. Alternatively it helps to switch the `if constexpr` around to avoid the compiler instantiate the `RField<void>`:; ```diff; diff --git a/tree/ntuple/v7/inc/ROOT/REntry.hxx b/tree/ntuple/v7/inc/ROOT/REntry.hxx; index 1f3ec47095..b7b70b24cb 100644; --- a/tree/ntuple/v7/inc/ROOT/REntry.hxx; +++ b/tree/ntuple/v7/inc/ROOT/REntry.hxx; @@ -124,12 +124,11 @@ public:; if (v.GetField().GetFieldName() != fieldName); continue;; ; - if constexpr (std::is_void_v<T>); - return v.GetPtr<void>();; -; - if (v.GetField().GetTypeName() != RField<T>::TypeName()) {; - throw RException(R__FAIL(""type mismatch for field "" + std::string(fieldName) + "": "" +; - v.GetField().GetTypeName() + "" vs. "" + RField<T>::TypeName()));; + if constexpr (!std::is_void_v<T>) {; + if (v.GetField().GetTypeName() != RField<T>::TypeName()) {; + throw RException(R__FAIL(""type mismatch for field "" + std::string(fieldName) + "": "" +; + v.GetField().GetTypeName() + "" vs. "" + RField<T>::TypeName()));; + }; }; return std::static_pointer_cast<T>(v.GetPtr<void>());; }; ```. Finally we can either disable `CreateValue` in th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14468#issuecomment-1916371964
https://github.com/root-project/root/pull/14468#issuecomment-1916371964:74,Usability,clear,clear,74,"Alright, I think I understand what's going on (even though it's not fully clear to me why the story changes to an error in C++20): `REntry::GetPtr<T>` instantiates `RField<T>::TypeName()` to check the type name and despite the `if constexpr (std::is_void_v<T>)` check, it seems the compiler does ""something"" with `RField<void>`. In this PR, as mentioned above, the base class destructor changes to `virtual ~RFieldBase() = default;` in the header so the compiler sees it and apparently tries to instantiate also `GenerateValue`. There are a couple of solutions: First we can move `~RFieldBase()` back into the source file:; ```diff; diff --git a/tree/ntuple/v7/inc/ROOT/RField.hxx b/tree/ntuple/v7/inc/ROOT/RField.hxx; index deb9d5f4a3..cd0b5dd89e 100644; --- a/tree/ntuple/v7/inc/ROOT/RField.hxx; +++ b/tree/ntuple/v7/inc/ROOT/RField.hxx; @@ -570,7 +570,7 @@ public:; RFieldBase(RFieldBase&&) = default;; RFieldBase& operator =(const RFieldBase&) = delete;; RFieldBase& operator =(RFieldBase&&) = default;; - virtual ~RFieldBase() = default;; + virtual ~RFieldBase();; ; /// Copies the field and its sub fields using a possibly new name and a new, unconnected set of columns; std::unique_ptr<RFieldBase> Clone(std::string_view newName) const;; diff --git a/tree/ntuple/v7/src/RField.cxx b/tree/ntuple/v7/src/RField.cxx; index ef04fec76c..41d4962ac5 100644; --- a/tree/ntuple/v7/src/RField.cxx; +++ b/tree/ntuple/v7/src/RField.cxx; @@ -410,6 +410,10 @@ ROOT::Experimental::RFieldBase::RFieldBase(std::string_view name, std::string_vi; {; }; ; +ROOT::Experimental::RFieldBase::~RFieldBase(); +{; +}; +; std::string ROOT::Experimental::RFieldBase::GetQualifiedFieldName() const; {; std::string result = GetFieldName();; ```. Alternatively it helps to switch the `if constexpr` around to avoid the compiler instantiate the `RField<void>`:; ```diff; diff --git a/tree/ntuple/v7/inc/ROOT/REntry.hxx b/tree/ntuple/v7/inc/ROOT/REntry.hxx; index 1f3ec47095..b7b70b24cb 100644; --- a/tree/ntuple/v7/inc/ROOT/RE",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14468#issuecomment-1916371964
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:160,Availability,failure,failures,160,"Thank you all for your input! It is clear that the changes in this PR do not improve the situation by any means. Interestingly, this PR has triggered three new failures for exactly these two tutorials. I don't see how the failures on Windows can be related to the changes of this PR, but they are slightly more informative than usual and they were never seen before in the CI. For the failure on Mac ARM, we are hitting https://github.com/root-project/cling/issues/370 which I wasn't even aware of 😄 . Yet another reason not to merge these changes 🙂 . ### Windows 64 bit. https://github.com/root-project/root/actions/runs/7693740131/job/20963073314?pr=14472. ```; Test #951: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.06 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __cdecl ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: (typedValue->size() % fItemSize) == 0 violated at line 1986 of `C:\ROOT-CI\src\tree\ntuple\v7\src\RField.cxx'; aborting; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Exit code 0xc0000374; ```. ```; 1258/2174 Test #960: tutorial-v7-concurrentfill.cxx ............................................................***Failed 6.42 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Fail",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:222,Availability,failure,failures,222,"Thank you all for your input! It is clear that the changes in this PR do not improve the situation by any means. Interestingly, this PR has triggered three new failures for exactly these two tutorials. I don't see how the failures on Windows can be related to the changes of this PR, but they are slightly more informative than usual and they were never seen before in the CI. For the failure on Mac ARM, we are hitting https://github.com/root-project/cling/issues/370 which I wasn't even aware of 😄 . Yet another reason not to merge these changes 🙂 . ### Windows 64 bit. https://github.com/root-project/root/actions/runs/7693740131/job/20963073314?pr=14472. ```; Test #951: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.06 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __cdecl ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: (typedValue->size() % fItemSize) == 0 violated at line 1986 of `C:\ROOT-CI\src\tree\ntuple\v7\src\RField.cxx'; aborting; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Exit code 0xc0000374; ```. ```; 1258/2174 Test #960: tutorial-v7-concurrentfill.cxx ............................................................***Failed 6.42 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Fail",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:385,Availability,failure,failure,385,"Thank you all for your input! It is clear that the changes in this PR do not improve the situation by any means. Interestingly, this PR has triggered three new failures for exactly these two tutorials. I don't see how the failures on Windows can be related to the changes of this PR, but they are slightly more informative than usual and they were never seen before in the CI. For the failure on Mac ARM, we are hitting https://github.com/root-project/cling/issues/370 which I wasn't even aware of 😄 . Yet another reason not to merge these changes 🙂 . ### Windows 64 bit. https://github.com/root-project/root/actions/runs/7693740131/job/20963073314?pr=14472. ```; Test #951: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.06 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __cdecl ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: (typedValue->size() % fItemSize) == 0 violated at line 1986 of `C:\ROOT-CI\src\tree\ntuple\v7\src\RField.cxx'; aborting; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Exit code 0xc0000374; ```. ```; 1258/2174 Test #960: tutorial-v7-concurrentfill.cxx ............................................................***Failed 6.42 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Fail",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:1426,Availability,error,error,1426,".com/root-project/cling/issues/370 which I wasn't even aware of 😄 . Yet another reason not to merge these changes 🙂 . ### Windows 64 bit. https://github.com/root-project/root/actions/runs/7693740131/job/20963073314?pr=14472. ```; Test #951: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.06 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __cdecl ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: (typedValue->size() % fItemSize) == 0 violated at line 1986 of `C:\ROOT-CI\src\tree\ntuple\v7\src\RField.cxx'; aborting; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Exit code 0xc0000374; ```. ```; 1258/2174 Test #960: tutorial-v7-concurrentfill.cxx ............................................................***Failed 6.42 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:1735,Availability,error,error,1735,".........................***Failed 2.06 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __cdecl ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: (typedValue->size() % fItemSize) == 0 violated at line 1986 of `C:\ROOT-CI\src\tree\ntuple\v7\src\RField.cxx'; aborting; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Exit code 0xc0000374; ```. ```; 1258/2174 Test #960: tutorial-v7-concurrentfill.cxx ............................................................***Failed 6.42 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:2529,Availability,error,error,2529,"...............................................***Failed 6.42 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Mac 14 ARM. https://github.com/root-project/root/actions/runs/7693740131/job/20963072938?pr=14472. ```; 1373/2419 Test #1052: tutorial-v7-ntuple-ntpl007_mtFill .................................................................***Failed 1.32 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```. ```; 1384/2419 Test #1067: tutorial-v7-concurrentfill.cxx .....................................................",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:2834,Availability,error,error,2834,"7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Mac 14 ARM. https://github.com/root-project/root/actions/runs/7693740131/job/20963072938?pr=14472. ```; 1373/2419 Test #1052: tutorial-v7-ntuple-ntpl007_mtFill .................................................................***Failed 1.32 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```. ```; 1384/2419 Test #1067: tutorial-v7-concurrentfill.cxx ....................................................................***Failed 1.76 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:3404,Availability,error,error,3404,"=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Mac 14 ARM. https://github.com/root-project/root/actions/runs/7693740131/job/20963072938?pr=14472. ```; 1373/2419 Test #1052: tutorial-v7-ntuple-ntpl007_mtFill .................................................................***Failed 1.32 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```. ```; 1384/2419 Test #1067: tutorial-v7-concurrentfill.cxx ....................................................................***Failed 1.76 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:3851,Availability,error,error,3851,"=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Mac 14 ARM. https://github.com/root-project/root/actions/runs/7693740131/job/20963072938?pr=14472. ```; 1373/2419 Test #1052: tutorial-v7-ntuple-ntpl007_mtFill .................................................................***Failed 1.32 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```. ```; 1384/2419 Test #1067: tutorial-v7-concurrentfill.cxx ....................................................................***Failed 1.76 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:1415,Integrability,message,message,1415,".com/root-project/cling/issues/370 which I wasn't even aware of 😄 . Yet another reason not to merge these changes 🙂 . ### Windows 64 bit. https://github.com/root-project/root/actions/runs/7693740131/job/20963073314?pr=14472. ```; Test #951: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.06 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __cdecl ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: (typedValue->size() % fItemSize) == 0 violated at line 1986 of `C:\ROOT-CI\src\tree\ntuple\v7\src\RField.cxx'; aborting; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Exit code 0xc0000374; ```. ```; 1258/2174 Test #960: tutorial-v7-concurrentfill.cxx ............................................................***Failed 6.42 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:1724,Integrability,message,message,1724,".........................***Failed 2.06 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __cdecl ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: (typedValue->size() % fItemSize) == 0 violated at line 1986 of `C:\ROOT-CI\src\tree\ntuple\v7\src\RField.cxx'; aborting; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Exit code 0xc0000374; ```. ```; 1258/2174 Test #960: tutorial-v7-concurrentfill.cxx ............................................................***Failed 6.42 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:2518,Integrability,message,message,2518,"...............................................***Failed 6.42 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Mac 14 ARM. https://github.com/root-project/root/actions/runs/7693740131/job/20963072938?pr=14472. ```; 1373/2419 Test #1052: tutorial-v7-ntuple-ntpl007_mtFill .................................................................***Failed 1.32 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```. ```; 1384/2419 Test #1067: tutorial-v7-concurrentfill.cxx .....................................................",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:2823,Integrability,message,message,2823,"7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Mac 14 ARM. https://github.com/root-project/root/actions/runs/7693740131/job/20963072938?pr=14472. ```; 1373/2419 Test #1052: tutorial-v7-ntuple-ntpl007_mtFill .................................................................***Failed 1.32 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```. ```; 1384/2419 Test #1067: tutorial-v7-concurrentfill.cxx ....................................................................***Failed 1.76 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:3300,Integrability,interface,interface,3300,"=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Mac 14 ARM. https://github.com/root-project/root/actions/runs/7693740131/job/20963072938?pr=14472. ```; 1373/2419 Test #1052: tutorial-v7-ntuple-ntpl007_mtFill .................................................................***Failed 1.32 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```. ```; 1384/2419 Test #1067: tutorial-v7-concurrentfill.cxx ....................................................................***Failed 1.76 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:3393,Integrability,message,message,3393,"=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Mac 14 ARM. https://github.com/root-project/root/actions/runs/7693740131/job/20963072938?pr=14472. ```; 1373/2419 Test #1052: tutorial-v7-ntuple-ntpl007_mtFill .................................................................***Failed 1.32 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```. ```; 1384/2419 Test #1067: tutorial-v7-concurrentfill.cxx ....................................................................***Failed 1.76 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:3747,Integrability,interface,interface,3747,"=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Mac 14 ARM. https://github.com/root-project/root/actions/runs/7693740131/job/20963072938?pr=14472. ```; 1373/2419 Test #1052: tutorial-v7-ntuple-ntpl007_mtFill .................................................................***Failed 1.32 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```. ```; 1384/2419 Test #1067: tutorial-v7-concurrentfill.cxx ....................................................................***Failed 1.76 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:3840,Integrability,message,message,3840,"=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Mac 14 ARM. https://github.com/root-project/root/actions/runs/7693740131/job/20963072938?pr=14472. ```; 1373/2419 Test #1052: tutorial-v7-ntuple-ntpl007_mtFill .................................................................***Failed 1.32 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```. ```; 1384/2419 Test #1067: tutorial-v7-concurrentfill.cxx ....................................................................***Failed 1.76 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:1503,Performance,concurren,concurrentfill,1503,"are of 😄 . Yet another reason not to merge these changes 🙂 . ### Windows 64 bit. https://github.com/root-project/root/actions/runs/7693740131/job/20963073314?pr=14472. ```; Test #951: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.06 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __cdecl ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: (typedValue->size() % fItemSize) == 0 violated at line 1986 of `C:\ROOT-CI\src\tree\ntuple\v7\src\RField.cxx'; aborting; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Exit code 0xc0000374; ```. ```; 1258/2174 Test #960: tutorial-v7-concurrentfill.cxx ............................................................***Failed 6.42 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:1643,Performance,concurren,concurrentfill,1643,"740131/job/20963073314?pr=14472. ```; Test #951: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.06 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __cdecl ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: (typedValue->size() % fItemSize) == 0 violated at line 1986 of `C:\ROOT-CI\src\tree\ntuple\v7\src\RField.cxx'; aborting; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Exit code 0xc0000374; ```. ```; 1258/2174 Test #960: tutorial-v7-concurrentfill.cxx ............................................................***Failed 6.42 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx .....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:2602,Performance,concurren,concurrentfill,2602,"d 6.42 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Mac 14 ARM. https://github.com/root-project/root/actions/runs/7693740131/job/20963072938?pr=14472. ```; 1373/2419 Test #1052: tutorial-v7-ntuple-ntpl007_mtFill .................................................................***Failed 1.32 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```. ```; 1384/2419 Test #1067: tutorial-v7-concurrentfill.cxx ....................................................................***Failed 1.76 sec; ; Processing /Users/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:2742,Performance,concurren,concurrentfill,2742,"essage):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Mac 14 ARM. https://github.com/root-project/root/actions/runs/7693740131/job/20963072938?pr=14472. ```; 1373/2419 Test #1052: tutorial-v7-ntuple-ntpl007_mtFill .................................................................***Failed 1.32 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```. ```; 1384/2419 Test #1067: tutorial-v7-concurrentfill.cxx ....................................................................***Failed 1.76 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:3463,Performance,concurren,concurrentfill,3463,"=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Mac 14 ARM. https://github.com/root-project/root/actions/runs/7693740131/job/20963072938?pr=14472. ```; 1373/2419 Test #1052: tutorial-v7-ntuple-ntpl007_mtFill .................................................................***Failed 1.32 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```. ```; 1384/2419 Test #1067: tutorial-v7-concurrentfill.cxx ....................................................................***Failed 1.76 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:3624,Performance,concurren,concurrentfill,3624,"=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Mac 14 ARM. https://github.com/root-project/root/actions/runs/7693740131/job/20963072938?pr=14472. ```; 1373/2419 Test #1052: tutorial-v7-ntuple-ntpl007_mtFill .................................................................***Failed 1.32 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```. ```; 1384/2419 Test #1067: tutorial-v7-concurrentfill.cxx ....................................................................***Failed 1.76 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:1347,Safety,abort,aborting,1347," CI. For the failure on Mac ARM, we are hitting https://github.com/root-project/cling/issues/370 which I wasn't even aware of 😄 . Yet another reason not to merge these changes 🙂 . ### Windows 64 bit. https://github.com/root-project/root/actions/runs/7693740131/job/20963073314?pr=14472. ```; Test #951: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.06 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __cdecl ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: (typedValue->size() % fItemSize) == 0 violated at line 1986 of `C:\ROOT-CI\src\tree\ntuple\v7\src\RField.cxx'; aborting; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Exit code 0xc0000374; ```. ```; 1258/2174 Test #960: tutorial-v7-concurrentfill.cxx ............................................................***Failed 6.42 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14472#issuecomment-1915527940:36,Usability,clear,clear,36,"Thank you all for your input! It is clear that the changes in this PR do not improve the situation by any means. Interestingly, this PR has triggered three new failures for exactly these two tutorials. I don't see how the failures on Windows can be related to the changes of this PR, but they are slightly more informative than usual and they were never seen before in the CI. For the failure on Mac ARM, we are hitting https://github.com/root-project/cling/issues/370 which I wasn't even aware of 😄 . Yet another reason not to merge these changes 🙂 . ### Windows 64 bit. https://github.com/root-project/root/actions/runs/7693740131/job/20963073314?pr=14472. ```; Test #951: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.06 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __cdecl ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: (typedValue->size() % fItemSize) == 0 violated at line 1986 of `C:\ROOT-CI\src\tree\ntuple\v7\src\RField.cxx'; aborting; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Exit code 0xc0000374; ```. ```; 1258/2174 Test #960: tutorial-v7-concurrentfill.cxx ............................................................***Failed 6.42 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Fail",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940
https://github.com/root-project/root/pull/14474#issuecomment-1923285964:5,Testability,test,test,5,"> No test was broken in the incrementals: perhaps we can give it a try in the nightlies?. I was hoping getting some feedback from @krasznaa before merging, but I guess we can merge and we'll see afterwards",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14474#issuecomment-1923285964
https://github.com/root-project/root/pull/14474#issuecomment-1923285964:116,Usability,feedback,feedback,116,"> No test was broken in the incrementals: perhaps we can give it a try in the nightlies?. I was hoping getting some feedback from @krasznaa before merging, but I guess we can merge and we'll see afterwards",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14474#issuecomment-1923285964
https://github.com/root-project/root/issues/14479#issuecomment-1916915766:656,Availability,error,errors,656,"Hello both of you!; Thank you so much for the quick reply!; I went through my text again and didn't notice it repeated itself...! Sorry for that!. Considering the suggestion from @dpiparo , I have checked all the dependencies. Some I had to install, but now they are all in the system. I have tried to go through the cmake again and got the same problems. You suggest me to try from scratch again. I can do this simply by deleting the folders I have created for the installation and redo the process in the page ""build from source""?. I have tried the workaround suggested by @ferdymercury ! Firstly I have tried the snap version and nothing happened. Same errors. Now I have downloaded the pre-compiled version and I can use it, open canvases and browsers with no problem. I will run some macros to compare with the outputs I had previously and check if everything is according to what I had. Eventhough it is already working, I am willing to try and build it from source if that can help you somehow figuring out some kind of challanges you would like to improve in further versions! Please let me know if I can be of any use!. Thank you very much once again! It is always amazing to receive this kind of comprehensible support :))))",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14479#issuecomment-1916915766
https://github.com/root-project/root/issues/14479#issuecomment-1916915766:675,Availability,down,downloaded,675,"Hello both of you!; Thank you so much for the quick reply!; I went through my text again and didn't notice it repeated itself...! Sorry for that!. Considering the suggestion from @dpiparo , I have checked all the dependencies. Some I had to install, but now they are all in the system. I have tried to go through the cmake again and got the same problems. You suggest me to try from scratch again. I can do this simply by deleting the folders I have created for the installation and redo the process in the page ""build from source""?. I have tried the workaround suggested by @ferdymercury ! Firstly I have tried the snap version and nothing happened. Same errors. Now I have downloaded the pre-compiled version and I can use it, open canvases and browsers with no problem. I will run some macros to compare with the outputs I had previously and check if everything is according to what I had. Eventhough it is already working, I am willing to try and build it from source if that can help you somehow figuring out some kind of challanges you would like to improve in further versions! Please let me know if I can be of any use!. Thank you very much once again! It is always amazing to receive this kind of comprehensible support :))))",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14479#issuecomment-1916915766
https://github.com/root-project/root/issues/14479#issuecomment-1916915766:241,Deployability,install,install,241,"Hello both of you!; Thank you so much for the quick reply!; I went through my text again and didn't notice it repeated itself...! Sorry for that!. Considering the suggestion from @dpiparo , I have checked all the dependencies. Some I had to install, but now they are all in the system. I have tried to go through the cmake again and got the same problems. You suggest me to try from scratch again. I can do this simply by deleting the folders I have created for the installation and redo the process in the page ""build from source""?. I have tried the workaround suggested by @ferdymercury ! Firstly I have tried the snap version and nothing happened. Same errors. Now I have downloaded the pre-compiled version and I can use it, open canvases and browsers with no problem. I will run some macros to compare with the outputs I had previously and check if everything is according to what I had. Eventhough it is already working, I am willing to try and build it from source if that can help you somehow figuring out some kind of challanges you would like to improve in further versions! Please let me know if I can be of any use!. Thank you very much once again! It is always amazing to receive this kind of comprehensible support :))))",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14479#issuecomment-1916915766
https://github.com/root-project/root/issues/14479#issuecomment-1916915766:466,Deployability,install,installation,466,"Hello both of you!; Thank you so much for the quick reply!; I went through my text again and didn't notice it repeated itself...! Sorry for that!. Considering the suggestion from @dpiparo , I have checked all the dependencies. Some I had to install, but now they are all in the system. I have tried to go through the cmake again and got the same problems. You suggest me to try from scratch again. I can do this simply by deleting the folders I have created for the installation and redo the process in the page ""build from source""?. I have tried the workaround suggested by @ferdymercury ! Firstly I have tried the snap version and nothing happened. Same errors. Now I have downloaded the pre-compiled version and I can use it, open canvases and browsers with no problem. I will run some macros to compare with the outputs I had previously and check if everything is according to what I had. Eventhough it is already working, I am willing to try and build it from source if that can help you somehow figuring out some kind of challanges you would like to improve in further versions! Please let me know if I can be of any use!. Thank you very much once again! It is always amazing to receive this kind of comprehensible support :))))",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14479#issuecomment-1916915766
https://github.com/root-project/root/issues/14479#issuecomment-1916915766:213,Integrability,depend,dependencies,213,"Hello both of you!; Thank you so much for the quick reply!; I went through my text again and didn't notice it repeated itself...! Sorry for that!. Considering the suggestion from @dpiparo , I have checked all the dependencies. Some I had to install, but now they are all in the system. I have tried to go through the cmake again and got the same problems. You suggest me to try from scratch again. I can do this simply by deleting the folders I have created for the installation and redo the process in the page ""build from source""?. I have tried the workaround suggested by @ferdymercury ! Firstly I have tried the snap version and nothing happened. Same errors. Now I have downloaded the pre-compiled version and I can use it, open canvases and browsers with no problem. I will run some macros to compare with the outputs I had previously and check if everything is according to what I had. Eventhough it is already working, I am willing to try and build it from source if that can help you somehow figuring out some kind of challanges you would like to improve in further versions! Please let me know if I can be of any use!. Thank you very much once again! It is always amazing to receive this kind of comprehensible support :))))",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14479#issuecomment-1916915766
https://github.com/root-project/root/issues/14479#issuecomment-1916915766:412,Usability,simpl,simply,412,"Hello both of you!; Thank you so much for the quick reply!; I went through my text again and didn't notice it repeated itself...! Sorry for that!. Considering the suggestion from @dpiparo , I have checked all the dependencies. Some I had to install, but now they are all in the system. I have tried to go through the cmake again and got the same problems. You suggest me to try from scratch again. I can do this simply by deleting the folders I have created for the installation and redo the process in the page ""build from source""?. I have tried the workaround suggested by @ferdymercury ! Firstly I have tried the snap version and nothing happened. Same errors. Now I have downloaded the pre-compiled version and I can use it, open canvases and browsers with no problem. I will run some macros to compare with the outputs I had previously and check if everything is according to what I had. Eventhough it is already working, I am willing to try and build it from source if that can help you somehow figuring out some kind of challanges you would like to improve in further versions! Please let me know if I can be of any use!. Thank you very much once again! It is always amazing to receive this kind of comprehensible support :))))",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14479#issuecomment-1916915766
https://github.com/root-project/root/issues/14491#issuecomment-1917587621:193,Usability,simpl,simpleread,193,[conversionWithChecksum.tgz](https://github.com/root-project/root/files/14102267/conversionWithChecksum.tgz). contains the full example:. ```; root.exe -b -l -q writedata.C+; root.exe -b -l -q simpleread.C+ ; ```; ```; ***********************************; * Row * Instance * seg_split *; ***********************************; Error in <TBufferFile::CheckByteCount>: object of class vector<CSCSegment> read too few bytes: 4 instead of 24; * 0 * 0 * 0 *; ***********************************; Error in <TBufferFile::CheckByteCount>: object of class vector<MatchedCSCSegment> read too few bytes: 12 instead of 24; ***********************************; * Row * Instance * seg_unspl *; ***********************************; Error in <TBufferFile::CheckByteCount>: object of class vector<MatchedCSCSegment> read too few bytes: 12 instead of 24; Error in <TBufferFile::CheckByteCount>: object of class vector<MatchedCSCSegment> read too few bytes: 12 instead of 24; * 0 * 0 * 1 *; ***********************************. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14491#issuecomment-1917587621
https://github.com/root-project/root/pull/14495#issuecomment-1972366916:563,Availability,error,error,563,Build failed on mac12arm/cxx20.; Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/197157/console).; ### Errors:; - [2024-03-01T02:45:13.661Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriterDecl.cpp.o ; - [2024-03-01T02:45:13.661Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp:2440:3: error: use of undeclared identifier 'DeclSpecializationsAbbrev' ; - [2024-03-01T02:45:14.375Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriter.cpp.o ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3898:29: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3914:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3922:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3993:29: error: use of undeclared identifier 'DeclSpecializationsAbbrev',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1972366916
https://github.com/root-project/root/pull/14495#issuecomment-1972366916:944,Availability,error,error,944,Build failed on mac12arm/cxx20.; Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/197157/console).; ### Errors:; - [2024-03-01T02:45:13.661Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriterDecl.cpp.o ; - [2024-03-01T02:45:13.661Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp:2440:3: error: use of undeclared identifier 'DeclSpecializationsAbbrev' ; - [2024-03-01T02:45:14.375Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriter.cpp.o ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3898:29: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3914:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3922:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3993:29: error: use of undeclared identifier 'DeclSpecializationsAbbrev',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1972366916
https://github.com/root-project/root/pull/14495#issuecomment-1972366916:1199,Availability,error,error,1199,Build failed on mac12arm/cxx20.; Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/197157/console).; ### Errors:; - [2024-03-01T02:45:13.661Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriterDecl.cpp.o ; - [2024-03-01T02:45:13.661Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp:2440:3: error: use of undeclared identifier 'DeclSpecializationsAbbrev' ; - [2024-03-01T02:45:14.375Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriter.cpp.o ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3898:29: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3914:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3922:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3993:29: error: use of undeclared identifier 'DeclSpecializationsAbbrev',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1972366916
https://github.com/root-project/root/pull/14495#issuecomment-1972366916:1454,Availability,error,error,1454,Build failed on mac12arm/cxx20.; Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/197157/console).; ### Errors:; - [2024-03-01T02:45:13.661Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriterDecl.cpp.o ; - [2024-03-01T02:45:13.661Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp:2440:3: error: use of undeclared identifier 'DeclSpecializationsAbbrev' ; - [2024-03-01T02:45:14.375Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriter.cpp.o ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3898:29: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3914:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3922:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3993:29: error: use of undeclared identifier 'DeclSpecializationsAbbrev',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1972366916
https://github.com/root-project/root/pull/14495#issuecomment-1972366916:1709,Availability,error,error,1709,Build failed on mac12arm/cxx20.; Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/197157/console).; ### Errors:; - [2024-03-01T02:45:13.661Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriterDecl.cpp.o ; - [2024-03-01T02:45:13.661Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp:2440:3: error: use of undeclared identifier 'DeclSpecializationsAbbrev' ; - [2024-03-01T02:45:14.375Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriter.cpp.o ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3898:29: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3914:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3922:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3993:29: error: use of undeclared identifier 'DeclSpecializationsAbbrev',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1972366916
https://github.com/root-project/root/pull/14495#issuecomment-1972366916:1014,Usability,simpl,simply,1014,Build failed on mac12arm/cxx20.; Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/197157/console).; ### Errors:; - [2024-03-01T02:45:13.661Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriterDecl.cpp.o ; - [2024-03-01T02:45:13.661Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp:2440:3: error: use of undeclared identifier 'DeclSpecializationsAbbrev' ; - [2024-03-01T02:45:14.375Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriter.cpp.o ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3898:29: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3914:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3922:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3993:29: error: use of undeclared identifier 'DeclSpecializationsAbbrev',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1972366916
https://github.com/root-project/root/pull/14495#issuecomment-1972366916:1269,Usability,simpl,simply,1269,Build failed on mac12arm/cxx20.; Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/197157/console).; ### Errors:; - [2024-03-01T02:45:13.661Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriterDecl.cpp.o ; - [2024-03-01T02:45:13.661Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp:2440:3: error: use of undeclared identifier 'DeclSpecializationsAbbrev' ; - [2024-03-01T02:45:14.375Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriter.cpp.o ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3898:29: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3914:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3922:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3993:29: error: use of undeclared identifier 'DeclSpecializationsAbbrev',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1972366916
https://github.com/root-project/root/pull/14495#issuecomment-1972366916:1524,Usability,simpl,simply,1524,Build failed on mac12arm/cxx20.; Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/197157/console).; ### Errors:; - [2024-03-01T02:45:13.661Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriterDecl.cpp.o ; - [2024-03-01T02:45:13.661Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp:2440:3: error: use of undeclared identifier 'DeclSpecializationsAbbrev' ; - [2024-03-01T02:45:14.375Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriter.cpp.o ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3898:29: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3914:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3922:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3993:29: error: use of undeclared identifier 'DeclSpecializationsAbbrev',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1972366916
https://github.com/root-project/root/pull/14507#issuecomment-2007655575:250,Deployability,patch,patches,250,"> I strongly believe we should have a similar approach as with our LLVM fork. We need to have some ""source of truth"" that is a certain cppyy/CPyCPPyy tag from upstream and then a clear way to reach the status of our fork from there, i.e. a series of patches that can be applied without conflicts. This PR goes in that direction but doesn't implement it fully as the sync script refers to a repository outside of our organisation. Ideally we would have separate repositories (one for cppyy and one for CPyCppyy) that we can refer to. Thanks for raising this point. The situation will be improved in the next weeks, I'll try to get as many patches merged to upstream as possible. Then, based on how many differences are left, we can decide if we want to go with one (or multiple) separate repositories, or we stay with the patch files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14507#issuecomment-2007655575
https://github.com/root-project/root/pull/14507#issuecomment-2007655575:638,Deployability,patch,patches,638,"> I strongly believe we should have a similar approach as with our LLVM fork. We need to have some ""source of truth"" that is a certain cppyy/CPyCPPyy tag from upstream and then a clear way to reach the status of our fork from there, i.e. a series of patches that can be applied without conflicts. This PR goes in that direction but doesn't implement it fully as the sync script refers to a repository outside of our organisation. Ideally we would have separate repositories (one for cppyy and one for CPyCppyy) that we can refer to. Thanks for raising this point. The situation will be improved in the next weeks, I'll try to get as many patches merged to upstream as possible. Then, based on how many differences are left, we can decide if we want to go with one (or multiple) separate repositories, or we stay with the patch files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14507#issuecomment-2007655575
https://github.com/root-project/root/pull/14507#issuecomment-2007655575:821,Deployability,patch,patch,821,"> I strongly believe we should have a similar approach as with our LLVM fork. We need to have some ""source of truth"" that is a certain cppyy/CPyCPPyy tag from upstream and then a clear way to reach the status of our fork from there, i.e. a series of patches that can be applied without conflicts. This PR goes in that direction but doesn't implement it fully as the sync script refers to a repository outside of our organisation. Ideally we would have separate repositories (one for cppyy and one for CPyCppyy) that we can refer to. Thanks for raising this point. The situation will be improved in the next weeks, I'll try to get as many patches merged to upstream as possible. Then, based on how many differences are left, we can decide if we want to go with one (or multiple) separate repositories, or we stay with the patch files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14507#issuecomment-2007655575
https://github.com/root-project/root/pull/14507#issuecomment-2007655575:179,Usability,clear,clear,179,"> I strongly believe we should have a similar approach as with our LLVM fork. We need to have some ""source of truth"" that is a certain cppyy/CPyCPPyy tag from upstream and then a clear way to reach the status of our fork from there, i.e. a series of patches that can be applied without conflicts. This PR goes in that direction but doesn't implement it fully as the sync script refers to a repository outside of our organisation. Ideally we would have separate repositories (one for cppyy and one for CPyCppyy) that we can refer to. Thanks for raising this point. The situation will be improved in the next weeks, I'll try to get as many patches merged to upstream as possible. Then, based on how many differences are left, we can decide if we want to go with one (or multiple) separate repositories, or we stay with the patch files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14507#issuecomment-2007655575
https://github.com/root-project/root/pull/14523#issuecomment-1923740442:312,Availability,error,errors,312,"So @jblomer naively asked ""what about ZLIB"", and it turns out to be equally wrong... I also added a test that at least catches the compression side of things. For the decompression, it's a bit harder because it's not clear how to check if the library read more bytes than it should have (without it running into errors because of decompression errors).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1923740442
https://github.com/root-project/root/pull/14523#issuecomment-1923740442:344,Availability,error,errors,344,"So @jblomer naively asked ""what about ZLIB"", and it turns out to be equally wrong... I also added a test that at least catches the compression side of things. For the decompression, it's a bit harder because it's not clear how to check if the library read more bytes than it should have (without it running into errors because of decompression errors).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1923740442
https://github.com/root-project/root/pull/14523#issuecomment-1923740442:100,Testability,test,test,100,"So @jblomer naively asked ""what about ZLIB"", and it turns out to be equally wrong... I also added a test that at least catches the compression side of things. For the decompression, it's a bit harder because it's not clear how to check if the library read more bytes than it should have (without it running into errors because of decompression errors).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1923740442
https://github.com/root-project/root/pull/14523#issuecomment-1923740442:217,Usability,clear,clear,217,"So @jblomer naively asked ""what about ZLIB"", and it turns out to be equally wrong... I also added a test that at least catches the compression side of things. For the decompression, it's a bit harder because it's not clear how to check if the library read more bytes than it should have (without it running into errors because of decompression errors).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1923740442
https://github.com/root-project/root/pull/14523#issuecomment-1932803605:253,Deployability,configurat,configuration,253,"> To reiterate on why we ""only"" need to fix gzip and lzma: The other compression algorithms already do this,. Indeed. The diffs was made less obvious because:; ZLIB decompression is already doing the right thing.; ZLIB and LZMA use a struct to pass the configuration rather than function argument so the code pattern is slight different.; ; > it seems that all existing code paths in TKey.cxx, TBufferXML.cxx, TMessage.cxx, and TBasket.cxx allocate a buffer that is slightly larger, so it's probably not an as critical problem . Right, the allocations is done:; ```; Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap; ```; and used via; ```; char *bufcur = &fBuffer[fKeylen];; ```; so the only extra is `9*nbuffers + 28` which reduces the risk of writing the end since the size is larger than `fObjlen + kHeaderSize` but that leaves 2 additional question:; * why are those added?; * why doesn't RNTuple need it?. 01bb6965557fcc63d5d2e535b89f57e025922731 hints that the compression engine were seen as writing past the end ... it is plausible since the prior delta was ``9*nbuffers + 8` with `nbuffers==0` is common case. (in hindsight, this commit was not investigated long enough and needed a test). The `9*nbuffers` is meant to be for the keys and is now inaccurate (most algorithms have a 9 bytes header but for lz4 we have seemingly 73. This part is missing from the `RNTuple` usage. The consequences is that on data set that is not compressible `TTree` might use a bit more space (header + barely compressed size) vs `RNTuple` (uncompressed size which might be less than header + barely compressed size). This of course assume that the compression algorithm strictly respect the limit given (it would be a serious security risk if not). The `8` is commented as ""8 bytes in case object is placed in a deleted gap"" (the 20 was seemingly added to work-around the bug fixed here) ~and is not clear to me (the 'delete gap' is ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1932803605
https://github.com/root-project/root/pull/14523#issuecomment-1932803605:440,Energy Efficiency,allocate,allocate,440,"> To reiterate on why we ""only"" need to fix gzip and lzma: The other compression algorithms already do this,. Indeed. The diffs was made less obvious because:; ZLIB decompression is already doing the right thing.; ZLIB and LZMA use a struct to pass the configuration rather than function argument so the code pattern is slight different.; ; > it seems that all existing code paths in TKey.cxx, TBufferXML.cxx, TMessage.cxx, and TBasket.cxx allocate a buffer that is slightly larger, so it's probably not an as critical problem . Right, the allocations is done:; ```; Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap; ```; and used via; ```; char *bufcur = &fBuffer[fKeylen];; ```; so the only extra is `9*nbuffers + 28` which reduces the risk of writing the end since the size is larger than `fObjlen + kHeaderSize` but that leaves 2 additional question:; * why are those added?; * why doesn't RNTuple need it?. 01bb6965557fcc63d5d2e535b89f57e025922731 hints that the compression engine were seen as writing past the end ... it is plausible since the prior delta was ``9*nbuffers + 8` with `nbuffers==0` is common case. (in hindsight, this commit was not investigated long enough and needed a test). The `9*nbuffers` is meant to be for the keys and is now inaccurate (most algorithms have a 9 bytes header but for lz4 we have seemingly 73. This part is missing from the `RNTuple` usage. The consequences is that on data set that is not compressible `TTree` might use a bit more space (header + barely compressed size) vs `RNTuple` (uncompressed size which might be less than header + barely compressed size). This of course assume that the compression algorithm strictly respect the limit given (it would be a serious security risk if not). The `8` is commented as ""8 bytes in case object is placed in a deleted gap"" (the 20 was seemingly added to work-around the bug fixed here) ~and is not clear to me (the 'delete gap' is ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1932803605
https://github.com/root-project/root/pull/14523#issuecomment-1932803605:802,Energy Efficiency,reduce,reduces,802,"> To reiterate on why we ""only"" need to fix gzip and lzma: The other compression algorithms already do this,. Indeed. The diffs was made less obvious because:; ZLIB decompression is already doing the right thing.; ZLIB and LZMA use a struct to pass the configuration rather than function argument so the code pattern is slight different.; ; > it seems that all existing code paths in TKey.cxx, TBufferXML.cxx, TMessage.cxx, and TBasket.cxx allocate a buffer that is slightly larger, so it's probably not an as critical problem . Right, the allocations is done:; ```; Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap; ```; and used via; ```; char *bufcur = &fBuffer[fKeylen];; ```; so the only extra is `9*nbuffers + 28` which reduces the risk of writing the end since the size is larger than `fObjlen + kHeaderSize` but that leaves 2 additional question:; * why are those added?; * why doesn't RNTuple need it?. 01bb6965557fcc63d5d2e535b89f57e025922731 hints that the compression engine were seen as writing past the end ... it is plausible since the prior delta was ``9*nbuffers + 8` with `nbuffers==0` is common case. (in hindsight, this commit was not investigated long enough and needed a test). The `9*nbuffers` is meant to be for the keys and is now inaccurate (most algorithms have a 9 bytes header but for lz4 we have seemingly 73. This part is missing from the `RNTuple` usage. The consequences is that on data set that is not compressible `TTree` might use a bit more space (header + barely compressed size) vs `RNTuple` (uncompressed size which might be less than header + barely compressed size). This of course assume that the compression algorithm strictly respect the limit given (it would be a serious security risk if not). The `8` is commented as ""8 bytes in case object is placed in a deleted gap"" (the 20 was seemingly added to work-around the bug fixed here) ~and is not clear to me (the 'delete gap' is ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1932803605
https://github.com/root-project/root/pull/14523#issuecomment-1932803605:253,Modifiability,config,configuration,253,"> To reiterate on why we ""only"" need to fix gzip and lzma: The other compression algorithms already do this,. Indeed. The diffs was made less obvious because:; ZLIB decompression is already doing the right thing.; ZLIB and LZMA use a struct to pass the configuration rather than function argument so the code pattern is slight different.; ; > it seems that all existing code paths in TKey.cxx, TBufferXML.cxx, TMessage.cxx, and TBasket.cxx allocate a buffer that is slightly larger, so it's probably not an as critical problem . Right, the allocations is done:; ```; Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap; ```; and used via; ```; char *bufcur = &fBuffer[fKeylen];; ```; so the only extra is `9*nbuffers + 28` which reduces the risk of writing the end since the size is larger than `fObjlen + kHeaderSize` but that leaves 2 additional question:; * why are those added?; * why doesn't RNTuple need it?. 01bb6965557fcc63d5d2e535b89f57e025922731 hints that the compression engine were seen as writing past the end ... it is plausible since the prior delta was ``9*nbuffers + 8` with `nbuffers==0` is common case. (in hindsight, this commit was not investigated long enough and needed a test). The `9*nbuffers` is meant to be for the keys and is now inaccurate (most algorithms have a 9 bytes header but for lz4 we have seemingly 73. This part is missing from the `RNTuple` usage. The consequences is that on data set that is not compressible `TTree` might use a bit more space (header + barely compressed size) vs `RNTuple` (uncompressed size which might be less than header + barely compressed size). This of course assume that the compression algorithm strictly respect the limit given (it would be a serious security risk if not). The `8` is commented as ""8 bytes in case object is placed in a deleted gap"" (the 20 was seemingly added to work-around the bug fixed here) ~and is not clear to me (the 'delete gap' is ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1932803605
https://github.com/root-project/root/pull/14523#issuecomment-1932803605:814,Safety,risk,risk,814,"> To reiterate on why we ""only"" need to fix gzip and lzma: The other compression algorithms already do this,. Indeed. The diffs was made less obvious because:; ZLIB decompression is already doing the right thing.; ZLIB and LZMA use a struct to pass the configuration rather than function argument so the code pattern is slight different.; ; > it seems that all existing code paths in TKey.cxx, TBufferXML.cxx, TMessage.cxx, and TBasket.cxx allocate a buffer that is slightly larger, so it's probably not an as critical problem . Right, the allocations is done:; ```; Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap; ```; and used via; ```; char *bufcur = &fBuffer[fKeylen];; ```; so the only extra is `9*nbuffers + 28` which reduces the risk of writing the end since the size is larger than `fObjlen + kHeaderSize` but that leaves 2 additional question:; * why are those added?; * why doesn't RNTuple need it?. 01bb6965557fcc63d5d2e535b89f57e025922731 hints that the compression engine were seen as writing past the end ... it is plausible since the prior delta was ``9*nbuffers + 8` with `nbuffers==0` is common case. (in hindsight, this commit was not investigated long enough and needed a test). The `9*nbuffers` is meant to be for the keys and is now inaccurate (most algorithms have a 9 bytes header but for lz4 we have seemingly 73. This part is missing from the `RNTuple` usage. The consequences is that on data set that is not compressible `TTree` might use a bit more space (header + barely compressed size) vs `RNTuple` (uncompressed size which might be less than header + barely compressed size). This of course assume that the compression algorithm strictly respect the limit given (it would be a serious security risk if not). The `8` is commented as ""8 bytes in case object is placed in a deleted gap"" (the 20 was seemingly added to work-around the bug fixed here) ~and is not clear to me (the 'delete gap' is ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1932803605
https://github.com/root-project/root/pull/14523#issuecomment-1932803605:1803,Safety,risk,risk,1803,"other compression algorithms already do this,. Indeed. The diffs was made less obvious because:; ZLIB decompression is already doing the right thing.; ZLIB and LZMA use a struct to pass the configuration rather than function argument so the code pattern is slight different.; ; > it seems that all existing code paths in TKey.cxx, TBufferXML.cxx, TMessage.cxx, and TBasket.cxx allocate a buffer that is slightly larger, so it's probably not an as critical problem . Right, the allocations is done:; ```; Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap; ```; and used via; ```; char *bufcur = &fBuffer[fKeylen];; ```; so the only extra is `9*nbuffers + 28` which reduces the risk of writing the end since the size is larger than `fObjlen + kHeaderSize` but that leaves 2 additional question:; * why are those added?; * why doesn't RNTuple need it?. 01bb6965557fcc63d5d2e535b89f57e025922731 hints that the compression engine were seen as writing past the end ... it is plausible since the prior delta was ``9*nbuffers + 8` with `nbuffers==0` is common case. (in hindsight, this commit was not investigated long enough and needed a test). The `9*nbuffers` is meant to be for the keys and is now inaccurate (most algorithms have a 9 bytes header but for lz4 we have seemingly 73. This part is missing from the `RNTuple` usage. The consequences is that on data set that is not compressible `TTree` might use a bit more space (header + barely compressed size) vs `RNTuple` (uncompressed size which might be less than header + barely compressed size). This of course assume that the compression algorithm strictly respect the limit given (it would be a serious security risk if not). The `8` is commented as ""8 bytes in case object is placed in a deleted gap"" (the 20 was seemingly added to work-around the bug fixed here) ~and is not clear to me (the 'delete gap' is most likely talking about a space 'freed' inside a ROOT file.~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1932803605
https://github.com/root-project/root/pull/14523#issuecomment-1932803605:1794,Security,secur,security,1794,"other compression algorithms already do this,. Indeed. The diffs was made less obvious because:; ZLIB decompression is already doing the right thing.; ZLIB and LZMA use a struct to pass the configuration rather than function argument so the code pattern is slight different.; ; > it seems that all existing code paths in TKey.cxx, TBufferXML.cxx, TMessage.cxx, and TBasket.cxx allocate a buffer that is slightly larger, so it's probably not an as critical problem . Right, the allocations is done:; ```; Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap; ```; and used via; ```; char *bufcur = &fBuffer[fKeylen];; ```; so the only extra is `9*nbuffers + 28` which reduces the risk of writing the end since the size is larger than `fObjlen + kHeaderSize` but that leaves 2 additional question:; * why are those added?; * why doesn't RNTuple need it?. 01bb6965557fcc63d5d2e535b89f57e025922731 hints that the compression engine were seen as writing past the end ... it is plausible since the prior delta was ``9*nbuffers + 8` with `nbuffers==0` is common case. (in hindsight, this commit was not investigated long enough and needed a test). The `9*nbuffers` is meant to be for the keys and is now inaccurate (most algorithms have a 9 bytes header but for lz4 we have seemingly 73. This part is missing from the `RNTuple` usage. The consequences is that on data set that is not compressible `TTree` might use a bit more space (header + barely compressed size) vs `RNTuple` (uncompressed size which might be less than header + barely compressed size). This of course assume that the compression algorithm strictly respect the limit given (it would be a serious security risk if not). The `8` is commented as ""8 bytes in case object is placed in a deleted gap"" (the 20 was seemingly added to work-around the bug fixed here) ~and is not clear to me (the 'delete gap' is most likely talking about a space 'freed' inside a ROOT file.~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1932803605
https://github.com/root-project/root/pull/14523#issuecomment-1932803605:1269,Testability,test,test,1269,"other compression algorithms already do this,. Indeed. The diffs was made less obvious because:; ZLIB decompression is already doing the right thing.; ZLIB and LZMA use a struct to pass the configuration rather than function argument so the code pattern is slight different.; ; > it seems that all existing code paths in TKey.cxx, TBufferXML.cxx, TMessage.cxx, and TBasket.cxx allocate a buffer that is slightly larger, so it's probably not an as critical problem . Right, the allocations is done:; ```; Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap; ```; and used via; ```; char *bufcur = &fBuffer[fKeylen];; ```; so the only extra is `9*nbuffers + 28` which reduces the risk of writing the end since the size is larger than `fObjlen + kHeaderSize` but that leaves 2 additional question:; * why are those added?; * why doesn't RNTuple need it?. 01bb6965557fcc63d5d2e535b89f57e025922731 hints that the compression engine were seen as writing past the end ... it is plausible since the prior delta was ``9*nbuffers + 8` with `nbuffers==0` is common case. (in hindsight, this commit was not investigated long enough and needed a test). The `9*nbuffers` is meant to be for the keys and is now inaccurate (most algorithms have a 9 bytes header but for lz4 we have seemingly 73. This part is missing from the `RNTuple` usage. The consequences is that on data set that is not compressible `TTree` might use a bit more space (header + barely compressed size) vs `RNTuple` (uncompressed size which might be less than header + barely compressed size). This of course assume that the compression algorithm strictly respect the limit given (it would be a serious security risk if not). The `8` is commented as ""8 bytes in case object is placed in a deleted gap"" (the 20 was seemingly added to work-around the bug fixed here) ~and is not clear to me (the 'delete gap' is most likely talking about a space 'freed' inside a ROOT file.~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1932803605
https://github.com/root-project/root/pull/14523#issuecomment-1932803605:1968,Usability,clear,clear,1968,"other compression algorithms already do this,. Indeed. The diffs was made less obvious because:; ZLIB decompression is already doing the right thing.; ZLIB and LZMA use a struct to pass the configuration rather than function argument so the code pattern is slight different.; ; > it seems that all existing code paths in TKey.cxx, TBufferXML.cxx, TMessage.cxx, and TBasket.cxx allocate a buffer that is slightly larger, so it's probably not an as critical problem . Right, the allocations is done:; ```; Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap; ```; and used via; ```; char *bufcur = &fBuffer[fKeylen];; ```; so the only extra is `9*nbuffers + 28` which reduces the risk of writing the end since the size is larger than `fObjlen + kHeaderSize` but that leaves 2 additional question:; * why are those added?; * why doesn't RNTuple need it?. 01bb6965557fcc63d5d2e535b89f57e025922731 hints that the compression engine were seen as writing past the end ... it is plausible since the prior delta was ``9*nbuffers + 8` with `nbuffers==0` is common case. (in hindsight, this commit was not investigated long enough and needed a test). The `9*nbuffers` is meant to be for the keys and is now inaccurate (most algorithms have a 9 bytes header but for lz4 we have seemingly 73. This part is missing from the `RNTuple` usage. The consequences is that on data set that is not compressible `TTree` might use a bit more space (header + barely compressed size) vs `RNTuple` (uncompressed size which might be less than header + barely compressed size). This of course assume that the compression algorithm strictly respect the limit given (it would be a serious security risk if not). The `8` is commented as ""8 bytes in case object is placed in a deleted gap"" (the 20 was seemingly added to work-around the bug fixed here) ~and is not clear to me (the 'delete gap' is most likely talking about a space 'freed' inside a ROOT file.~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1932803605
https://github.com/root-project/root/issues/14546#issuecomment-1941397971:77,Usability,simpl,simple,77,"Indeed this has nothing to do with TRatioplot. It can be reproduced with the simple following macro:. ```; void lineonaxis(){; auto c1 = new TCanvas(""c1"", ""c1"",10,53,700,525);; gPad->DrawFrame(-5,-1.25,5,1.25);; TLine *line = new TLine(-5,-0.5,5,-0.5);; line->SetLineStyle(2);; line->Draw();; }; ```; Which, on my Mac, gives:; <img width=""648"" alt=""Screenshot 2024-02-13 at 13 21 33"" src=""https://github.com/root-project/root/assets/4697738/26ecd350-74f0-4529-b84b-decc8c210490"">; It is a precision issue. It might be that on an other machine it will not give the same result.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14546#issuecomment-1941397971
https://github.com/root-project/root/issues/14546#issuecomment-1943627143:21,Usability,simpl,simplified,21,"The problem has been simplified to:; ```; {; double x = 6.25;; double y = 1.5625000232831;; double y1 = -y;; double y2 = y;; double yv = -0.5;. auto c1 = new TCanvas(""c1"", ""c1"", 0, 0, 700, 525);; c1->Range(-x, y1, x, y2);. TLine *line = new TLine();; line->DrawLine(-x, yv, x, yv) ->SetLineColor(kRed);. double r = 1./(y2-y1);; line->DrawLineNDC(0., r*(yv-y1),; 1., r*(yv-y1))->SetLineColor(kBlue);. }; ```; DrawlLine paint a red horizontal line at `yv = 0.5`. DrawLineNDC does the same in NDC coordinates. The 2 lines should overlap but they don't (by 1 pixel). Note that the values defined at the beginning of the macro are those that make the problem. As soon as you change, for instance, `y` the lines will overlap. Same if you change interactively the canvas size.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14546#issuecomment-1943627143
https://github.com/root-project/root/issues/14546#issuecomment-1943905642:73,Usability,simpl,simple,73,"The same problem shows with web canvas (@linev ?) for instance with this simple macro:; ```; void lineonaxis(){; auto c1 = new TCanvas(""c1"", ""c1"", 0, 0, 700, 525);; c1->SetGridy();; TH1F *f = gPad->DrawFrame(-5, -1.25, 5, 1.25);; f->GetYaxis()->SetNdivisions(10);; f->GetXaxis()->SetNdivisions(0);. auto line = new TLine();; line->SetLineColor(kRed);; line->DrawLine(-5, -1., 5 , -1.);; line->DrawLine(-5, -0.5, 5 , -0.5);; line->DrawLine(-5, 0., 5 , 0.);; line->DrawLine(-5, 0.5, 5 , 0.5);; line->DrawLine(-5, 1., 5 , 1.);; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14546#issuecomment-1943905642
https://github.com/root-project/root/issues/14546#issuecomment-1944053421:505,Usability,simpl,simple,505,"Yes, I see same problem in JSROOT. It is because we are using different coordinates inside frame for axes/grids/histogram drawings and for `TLine` which is drawn in the pad coordinates. Main problem here that left/top coordinates of the frame are rounded integer values. ; And then axis position calculated relative to this rounded values.; In this example vertical coordinate of the frame should be `52.5`, but rounded to `52` or `53`.; Drawing will be perfect when canvas vertical size is 500. I see no simple solution here. ; To fix problem we have to change fX1, fY1, fX2, fY2 members of the TPad every time canvas width or height is changing. More easy solution is to provide extra draw option for `TLine` (and similar classes) where coordinates calculated using frame functions. Then it automatically will be adjusted to the rounded position of the frame",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14546#issuecomment-1944053421
https://github.com/root-project/root/issues/14551#issuecomment-1948896479:770,Deployability,update,update,770,"One option is to move it to a users guide chapter.; Other option, copying relevant comment here by @guitargeek:. ```; This is still relevant. I have discussed with Lorenzo what we would have to do to close this issue:. The new users guide is the doxygen reference. The entry point to Minuit 2 is here:; https://root.cern.ch/doc/master/Minuit2Page.html. This doxygen page links to the old Minuit 2 users guide:; https://root.cern.ch/root/htmldoc/guides/minuit2/Minuit2.html. What needs to be done here is to move the old Minuit 2 guide (the source is somewhere in the ROOT repo) to the doxygen directly, and updating it by removing any information that is nowadays irrelevant (like how to build Minuit 2 with Autotools). The reason why we think that this is a meaningful update is that in Doxygen, it would generate automatically the useful links to the functions that are explained.; ```. Source is here: https://github.com/root-project/root/tree/master/documentation/minuit2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14551#issuecomment-1948896479
https://github.com/root-project/root/issues/14551#issuecomment-1948896479:36,Usability,guid,guide,36,"One option is to move it to a users guide chapter.; Other option, copying relevant comment here by @guitargeek:. ```; This is still relevant. I have discussed with Lorenzo what we would have to do to close this issue:. The new users guide is the doxygen reference. The entry point to Minuit 2 is here:; https://root.cern.ch/doc/master/Minuit2Page.html. This doxygen page links to the old Minuit 2 users guide:; https://root.cern.ch/root/htmldoc/guides/minuit2/Minuit2.html. What needs to be done here is to move the old Minuit 2 guide (the source is somewhere in the ROOT repo) to the doxygen directly, and updating it by removing any information that is nowadays irrelevant (like how to build Minuit 2 with Autotools). The reason why we think that this is a meaningful update is that in Doxygen, it would generate automatically the useful links to the functions that are explained.; ```. Source is here: https://github.com/root-project/root/tree/master/documentation/minuit2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14551#issuecomment-1948896479
https://github.com/root-project/root/issues/14551#issuecomment-1948896479:233,Usability,guid,guide,233,"One option is to move it to a users guide chapter.; Other option, copying relevant comment here by @guitargeek:. ```; This is still relevant. I have discussed with Lorenzo what we would have to do to close this issue:. The new users guide is the doxygen reference. The entry point to Minuit 2 is here:; https://root.cern.ch/doc/master/Minuit2Page.html. This doxygen page links to the old Minuit 2 users guide:; https://root.cern.ch/root/htmldoc/guides/minuit2/Minuit2.html. What needs to be done here is to move the old Minuit 2 guide (the source is somewhere in the ROOT repo) to the doxygen directly, and updating it by removing any information that is nowadays irrelevant (like how to build Minuit 2 with Autotools). The reason why we think that this is a meaningful update is that in Doxygen, it would generate automatically the useful links to the functions that are explained.; ```. Source is here: https://github.com/root-project/root/tree/master/documentation/minuit2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14551#issuecomment-1948896479
https://github.com/root-project/root/issues/14551#issuecomment-1948896479:403,Usability,guid,guide,403,"One option is to move it to a users guide chapter.; Other option, copying relevant comment here by @guitargeek:. ```; This is still relevant. I have discussed with Lorenzo what we would have to do to close this issue:. The new users guide is the doxygen reference. The entry point to Minuit 2 is here:; https://root.cern.ch/doc/master/Minuit2Page.html. This doxygen page links to the old Minuit 2 users guide:; https://root.cern.ch/root/htmldoc/guides/minuit2/Minuit2.html. What needs to be done here is to move the old Minuit 2 guide (the source is somewhere in the ROOT repo) to the doxygen directly, and updating it by removing any information that is nowadays irrelevant (like how to build Minuit 2 with Autotools). The reason why we think that this is a meaningful update is that in Doxygen, it would generate automatically the useful links to the functions that are explained.; ```. Source is here: https://github.com/root-project/root/tree/master/documentation/minuit2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14551#issuecomment-1948896479
https://github.com/root-project/root/issues/14551#issuecomment-1948896479:445,Usability,guid,guides,445,"One option is to move it to a users guide chapter.; Other option, copying relevant comment here by @guitargeek:. ```; This is still relevant. I have discussed with Lorenzo what we would have to do to close this issue:. The new users guide is the doxygen reference. The entry point to Minuit 2 is here:; https://root.cern.ch/doc/master/Minuit2Page.html. This doxygen page links to the old Minuit 2 users guide:; https://root.cern.ch/root/htmldoc/guides/minuit2/Minuit2.html. What needs to be done here is to move the old Minuit 2 guide (the source is somewhere in the ROOT repo) to the doxygen directly, and updating it by removing any information that is nowadays irrelevant (like how to build Minuit 2 with Autotools). The reason why we think that this is a meaningful update is that in Doxygen, it would generate automatically the useful links to the functions that are explained.; ```. Source is here: https://github.com/root-project/root/tree/master/documentation/minuit2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14551#issuecomment-1948896479
https://github.com/root-project/root/issues/14551#issuecomment-1948896479:529,Usability,guid,guide,529,"One option is to move it to a users guide chapter.; Other option, copying relevant comment here by @guitargeek:. ```; This is still relevant. I have discussed with Lorenzo what we would have to do to close this issue:. The new users guide is the doxygen reference. The entry point to Minuit 2 is here:; https://root.cern.ch/doc/master/Minuit2Page.html. This doxygen page links to the old Minuit 2 users guide:; https://root.cern.ch/root/htmldoc/guides/minuit2/Minuit2.html. What needs to be done here is to move the old Minuit 2 guide (the source is somewhere in the ROOT repo) to the doxygen directly, and updating it by removing any information that is nowadays irrelevant (like how to build Minuit 2 with Autotools). The reason why we think that this is a meaningful update is that in Doxygen, it would generate automatically the useful links to the functions that are explained.; ```. Source is here: https://github.com/root-project/root/tree/master/documentation/minuit2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14551#issuecomment-1948896479
https://github.com/root-project/root/issues/14552#issuecomment-1943897509:20,Usability,clear,clear,20,"In principle, it is clear what needs to happen, but I would like some input from @pcanal how throwing exceptions in these older parts of ROOT can best be handled (for the newer parts we use `ROOT::Experimental::RException`, but we cannot use this here).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14552#issuecomment-1943897509
https://github.com/root-project/root/issues/14552#issuecomment-1952072544:22,Usability,clear,clear,22,"> In principle, it is clear what needs to happen, but I would like some input from @pcanal how throwing exceptions in these older parts of ROOT can best be handled (for the newer parts we use `ROOT::Experimental::RException`, but we cannot use this here). I think ""Fatal"" is the recommended way, see https://github.com/root-project/root/pull/14627#discussion_r1492987421. I just proposed a PR with that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14552#issuecomment-1952072544
https://github.com/root-project/root/issues/14558#issuecomment-2022610545:154,Availability,down,down,154,"> As a logical extension, the same happens for any additional branch that later files have, for example:. Thanks for the example. I simplified it further down to:. ```; #include ""TTree.h""; #include ""TFileMerger.h""; #include ""TFile.h""; #include ""TFileMergeInfo.h"". void printBranches(TTree *const tree) {; printf(""PrintBranches:\n"");; for (auto *branch : TRangeDynCast<TBranch>(tree->GetListOfBranches())) {; printf("" %s\n"", branch->GetName());; }; }. void ROOT_4716() {; TTree atree(""tree"", ""title"");; int value;; atree.Branch(""a"", &value);; printBranches(&atree);. TTree abtree(""tree"", ""title"");; abtree.Branch(""a"", &value);; abtree.Branch(""b"", &value);; value = 42;; abtree.Fill();; printBranches(&abtree);. TTree dummy;; TList treelist;; treelist.Add(&atree);; treelist.Add(&abtree);; std::unique_ptr<TFile> file(TFile::Open(""c.root"", ""RECREATE""));; TFileMergeInfo info(file.get());; dummy.Merge(&treelist, &info);; printBranches(&dummy);. treelist.Clear();; treelist.Add(&abtree);; std::unique_ptr<TFile> file2(TFile::Open(""d.root"", ""RECREATE""));; TFileMergeInfo info2(file2.get());; atree.Merge(&treelist, &info2);; printBranches(&atree);; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14558#issuecomment-2022610545
https://github.com/root-project/root/issues/14558#issuecomment-2022610545:7,Testability,log,logical,7,"> As a logical extension, the same happens for any additional branch that later files have, for example:. Thanks for the example. I simplified it further down to:. ```; #include ""TTree.h""; #include ""TFileMerger.h""; #include ""TFile.h""; #include ""TFileMergeInfo.h"". void printBranches(TTree *const tree) {; printf(""PrintBranches:\n"");; for (auto *branch : TRangeDynCast<TBranch>(tree->GetListOfBranches())) {; printf("" %s\n"", branch->GetName());; }; }. void ROOT_4716() {; TTree atree(""tree"", ""title"");; int value;; atree.Branch(""a"", &value);; printBranches(&atree);. TTree abtree(""tree"", ""title"");; abtree.Branch(""a"", &value);; abtree.Branch(""b"", &value);; value = 42;; abtree.Fill();; printBranches(&abtree);. TTree dummy;; TList treelist;; treelist.Add(&atree);; treelist.Add(&abtree);; std::unique_ptr<TFile> file(TFile::Open(""c.root"", ""RECREATE""));; TFileMergeInfo info(file.get());; dummy.Merge(&treelist, &info);; printBranches(&dummy);. treelist.Clear();; treelist.Add(&abtree);; std::unique_ptr<TFile> file2(TFile::Open(""d.root"", ""RECREATE""));; TFileMergeInfo info2(file2.get());; atree.Merge(&treelist, &info2);; printBranches(&atree);; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14558#issuecomment-2022610545
https://github.com/root-project/root/issues/14558#issuecomment-2022610545:132,Usability,simpl,simplified,132,"> As a logical extension, the same happens for any additional branch that later files have, for example:. Thanks for the example. I simplified it further down to:. ```; #include ""TTree.h""; #include ""TFileMerger.h""; #include ""TFile.h""; #include ""TFileMergeInfo.h"". void printBranches(TTree *const tree) {; printf(""PrintBranches:\n"");; for (auto *branch : TRangeDynCast<TBranch>(tree->GetListOfBranches())) {; printf("" %s\n"", branch->GetName());; }; }. void ROOT_4716() {; TTree atree(""tree"", ""title"");; int value;; atree.Branch(""a"", &value);; printBranches(&atree);. TTree abtree(""tree"", ""title"");; abtree.Branch(""a"", &value);; abtree.Branch(""b"", &value);; value = 42;; abtree.Fill();; printBranches(&abtree);. TTree dummy;; TList treelist;; treelist.Add(&atree);; treelist.Add(&abtree);; std::unique_ptr<TFile> file(TFile::Open(""c.root"", ""RECREATE""));; TFileMergeInfo info(file.get());; dummy.Merge(&treelist, &info);; printBranches(&dummy);. treelist.Clear();; treelist.Add(&abtree);; std::unique_ptr<TFile> file2(TFile::Open(""d.root"", ""RECREATE""));; TFileMergeInfo info2(file2.get());; atree.Merge(&treelist, &info2);; printBranches(&atree);; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14558#issuecomment-2022610545
https://github.com/root-project/root/issues/14575#issuecomment-1940996892:71,Performance,perform,performed,71,"Hi,. I started to take a look to this issue: the boundary check is not performed by the `TH1` methods that access a bin, e.g., `TH1C h(""h"","""",10,0,10); h.AddBinContent(12312312); ` and it can lead to undefined behavior (there is a piece of memory spoiled by this action). After reading the methods of TH1S, TH1I, TH1F, TH1D that access a bin content I can say:; * Each histogram class derives from the corresponding TArray class, e.g., TH1F derives from TArrayF; * Internally, the access to the bin is done _a la C_, straight to the element of the array , e.g. `fArray[nbin]` ; * The boundary check is already implemented for the methods `TArray::operator()[]` . A potential solution would be to use `TArray::operator()[]`, which actually check the boundary of the array. Another solution could be a simple `if` to check of the boundary without using the `TArray` features. . It is likely that this methods `SetBin*`, `AddBin*` may be called quite often, and such boundary check could have a great impact in performance. Is there experience of such case? @lmoneta , may I ask for your advice on this issue?. Best,; Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14575#issuecomment-1940996892
https://github.com/root-project/root/issues/14575#issuecomment-1940996892:1008,Performance,perform,performance,1008,"Hi,. I started to take a look to this issue: the boundary check is not performed by the `TH1` methods that access a bin, e.g., `TH1C h(""h"","""",10,0,10); h.AddBinContent(12312312); ` and it can lead to undefined behavior (there is a piece of memory spoiled by this action). After reading the methods of TH1S, TH1I, TH1F, TH1D that access a bin content I can say:; * Each histogram class derives from the corresponding TArray class, e.g., TH1F derives from TArrayF; * Internally, the access to the bin is done _a la C_, straight to the element of the array , e.g. `fArray[nbin]` ; * The boundary check is already implemented for the methods `TArray::operator()[]` . A potential solution would be to use `TArray::operator()[]`, which actually check the boundary of the array. Another solution could be a simple `if` to check of the boundary without using the `TArray` features. . It is likely that this methods `SetBin*`, `AddBin*` may be called quite often, and such boundary check could have a great impact in performance. Is there experience of such case? @lmoneta , may I ask for your advice on this issue?. Best,; Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14575#issuecomment-1940996892
https://github.com/root-project/root/issues/14575#issuecomment-1940996892:107,Security,access,access,107,"Hi,. I started to take a look to this issue: the boundary check is not performed by the `TH1` methods that access a bin, e.g., `TH1C h(""h"","""",10,0,10); h.AddBinContent(12312312); ` and it can lead to undefined behavior (there is a piece of memory spoiled by this action). After reading the methods of TH1S, TH1I, TH1F, TH1D that access a bin content I can say:; * Each histogram class derives from the corresponding TArray class, e.g., TH1F derives from TArrayF; * Internally, the access to the bin is done _a la C_, straight to the element of the array , e.g. `fArray[nbin]` ; * The boundary check is already implemented for the methods `TArray::operator()[]` . A potential solution would be to use `TArray::operator()[]`, which actually check the boundary of the array. Another solution could be a simple `if` to check of the boundary without using the `TArray` features. . It is likely that this methods `SetBin*`, `AddBin*` may be called quite often, and such boundary check could have a great impact in performance. Is there experience of such case? @lmoneta , may I ask for your advice on this issue?. Best,; Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14575#issuecomment-1940996892
https://github.com/root-project/root/issues/14575#issuecomment-1940996892:329,Security,access,access,329,"Hi,. I started to take a look to this issue: the boundary check is not performed by the `TH1` methods that access a bin, e.g., `TH1C h(""h"","""",10,0,10); h.AddBinContent(12312312); ` and it can lead to undefined behavior (there is a piece of memory spoiled by this action). After reading the methods of TH1S, TH1I, TH1F, TH1D that access a bin content I can say:; * Each histogram class derives from the corresponding TArray class, e.g., TH1F derives from TArrayF; * Internally, the access to the bin is done _a la C_, straight to the element of the array , e.g. `fArray[nbin]` ; * The boundary check is already implemented for the methods `TArray::operator()[]` . A potential solution would be to use `TArray::operator()[]`, which actually check the boundary of the array. Another solution could be a simple `if` to check of the boundary without using the `TArray` features. . It is likely that this methods `SetBin*`, `AddBin*` may be called quite often, and such boundary check could have a great impact in performance. Is there experience of such case? @lmoneta , may I ask for your advice on this issue?. Best,; Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14575#issuecomment-1940996892
https://github.com/root-project/root/issues/14575#issuecomment-1940996892:481,Security,access,access,481,"Hi,. I started to take a look to this issue: the boundary check is not performed by the `TH1` methods that access a bin, e.g., `TH1C h(""h"","""",10,0,10); h.AddBinContent(12312312); ` and it can lead to undefined behavior (there is a piece of memory spoiled by this action). After reading the methods of TH1S, TH1I, TH1F, TH1D that access a bin content I can say:; * Each histogram class derives from the corresponding TArray class, e.g., TH1F derives from TArrayF; * Internally, the access to the bin is done _a la C_, straight to the element of the array , e.g. `fArray[nbin]` ; * The boundary check is already implemented for the methods `TArray::operator()[]` . A potential solution would be to use `TArray::operator()[]`, which actually check the boundary of the array. Another solution could be a simple `if` to check of the boundary without using the `TArray` features. . It is likely that this methods `SetBin*`, `AddBin*` may be called quite often, and such boundary check could have a great impact in performance. Is there experience of such case? @lmoneta , may I ask for your advice on this issue?. Best,; Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14575#issuecomment-1940996892
https://github.com/root-project/root/issues/14575#issuecomment-1940996892:800,Usability,simpl,simple,800,"Hi,. I started to take a look to this issue: the boundary check is not performed by the `TH1` methods that access a bin, e.g., `TH1C h(""h"","""",10,0,10); h.AddBinContent(12312312); ` and it can lead to undefined behavior (there is a piece of memory spoiled by this action). After reading the methods of TH1S, TH1I, TH1F, TH1D that access a bin content I can say:; * Each histogram class derives from the corresponding TArray class, e.g., TH1F derives from TArrayF; * Internally, the access to the bin is done _a la C_, straight to the element of the array , e.g. `fArray[nbin]` ; * The boundary check is already implemented for the methods `TArray::operator()[]` . A potential solution would be to use `TArray::operator()[]`, which actually check the boundary of the array. Another solution could be a simple `if` to check of the boundary without using the `TArray` features. . It is likely that this methods `SetBin*`, `AddBin*` may be called quite often, and such boundary check could have a great impact in performance. Is there experience of such case? @lmoneta , may I ask for your advice on this issue?. Best,; Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14575#issuecomment-1940996892
https://github.com/root-project/root/issues/14584#issuecomment-1943874457:861,Deployability,update,updates,861,"From a user point of view, the text in the ROOT manual now seems sufficiently clear:. - Behaviour for non-TTree objects [1]:. ""By default, existing objects are not replaced when writing new objects with the same name. Instead, a new namecycle is created, denoted by ;2, ;3, etc. When retrieving the object from the file, ROOT will automatically pick the highest namecycle. Some objects, such as histograms, automatically register themselves with the current TDirectory (e.g. the last TFile opened): these objects will appear as OBJ entries, without a namecycle. See also → [Object ownership](https://root.cern/manual/object_ownership). For the particular case of TTree, cycles only store metadata, see [Baskets, clusters and the tree header](https://root.cern/manual/trees/#baskets-clusters-and-the-tree-header)."". - Behaviour for TTree objects [2]:. ""Multiple updates of these headers can often be found in files (treename;1, treename;2 etc, called cycles, see → [Opening and inspecting a ROOT file](https://root.cern/manual/root_files/#opening-and-inspecting-a-root-file)). Only the last one (also accessible as treename) knows about all written baskets."". [1] https://root.cern/manual/root_files/#opening-and-inspecting-a-root-file; [2] https://root.cern/manual/trees/#baskets-clusters-and-the-tree-header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14584#issuecomment-1943874457
https://github.com/root-project/root/issues/14584#issuecomment-1943874457:1100,Security,access,accessible,1100,"From a user point of view, the text in the ROOT manual now seems sufficiently clear:. - Behaviour for non-TTree objects [1]:. ""By default, existing objects are not replaced when writing new objects with the same name. Instead, a new namecycle is created, denoted by ;2, ;3, etc. When retrieving the object from the file, ROOT will automatically pick the highest namecycle. Some objects, such as histograms, automatically register themselves with the current TDirectory (e.g. the last TFile opened): these objects will appear as OBJ entries, without a namecycle. See also → [Object ownership](https://root.cern/manual/object_ownership). For the particular case of TTree, cycles only store metadata, see [Baskets, clusters and the tree header](https://root.cern/manual/trees/#baskets-clusters-and-the-tree-header)."". - Behaviour for TTree objects [2]:. ""Multiple updates of these headers can often be found in files (treename;1, treename;2 etc, called cycles, see → [Opening and inspecting a ROOT file](https://root.cern/manual/root_files/#opening-and-inspecting-a-root-file)). Only the last one (also accessible as treename) knows about all written baskets."". [1] https://root.cern/manual/root_files/#opening-and-inspecting-a-root-file; [2] https://root.cern/manual/trees/#baskets-clusters-and-the-tree-header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14584#issuecomment-1943874457
https://github.com/root-project/root/issues/14584#issuecomment-1943874457:78,Usability,clear,clear,78,"From a user point of view, the text in the ROOT manual now seems sufficiently clear:. - Behaviour for non-TTree objects [1]:. ""By default, existing objects are not replaced when writing new objects with the same name. Instead, a new namecycle is created, denoted by ;2, ;3, etc. When retrieving the object from the file, ROOT will automatically pick the highest namecycle. Some objects, such as histograms, automatically register themselves with the current TDirectory (e.g. the last TFile opened): these objects will appear as OBJ entries, without a namecycle. See also → [Object ownership](https://root.cern/manual/object_ownership). For the particular case of TTree, cycles only store metadata, see [Baskets, clusters and the tree header](https://root.cern/manual/trees/#baskets-clusters-and-the-tree-header)."". - Behaviour for TTree objects [2]:. ""Multiple updates of these headers can often be found in files (treename;1, treename;2 etc, called cycles, see → [Opening and inspecting a ROOT file](https://root.cern/manual/root_files/#opening-and-inspecting-a-root-file)). Only the last one (also accessible as treename) knows about all written baskets."". [1] https://root.cern/manual/root_files/#opening-and-inspecting-a-root-file; [2] https://root.cern/manual/trees/#baskets-clusters-and-the-tree-header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14584#issuecomment-1943874457
https://github.com/root-project/root/pull/14614#issuecomment-1931846997:221,Security,access,access-from-command-shell,221,@vepadulano . All information is in the description of the PR.; THttpServer implements different kind of http requests.; Most of them described here:. https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html#data-access-from-command-shell. This PR adds one more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14614#issuecomment-1931846997
https://github.com/root-project/root/pull/14614#issuecomment-1931846997:182,Usability,guid,guides,182,@vepadulano . All information is in the description of the PR.; THttpServer implements different kind of http requests.; Most of them described here:. https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html#data-access-from-command-shell. This PR adds one more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14614#issuecomment-1931846997
https://github.com/root-project/root/pull/14671#issuecomment-1957093709:242,Usability,clear,clear,242,"Right, so this means this PR is adding a new method that allows to address the cases such as the one reported by the linked issue, but it's not a drop-in replacement, the user needs to actively know that the new method exists and use it. All clear now, thanks for the explanation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14671#issuecomment-1957093709
https://github.com/root-project/root/pull/14684#issuecomment-1944897019:64,Usability,simpl,simplifying,64,Please note that this is a double edge sword. On one hand it is simplifying the tutorials in a way that works well.; On the other hand it removes any demonstration (or did we keep at least one?) of how to use `R__LOAD_LIBRARY` that is necessary in case the library is (intentionally) not on the `LD_LIBRARY_PATH`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14684#issuecomment-1944897019
https://github.com/root-project/root/pull/14690#issuecomment-1943375342:95,Usability,clear,clear,95,"Ah, one more thing before merging: could you perhaps squash your two commits? Unless there's a clear motivation to keep them separate, but it appears to be both are related to schema compliance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690#issuecomment-1943375342
https://github.com/root-project/root/pull/14714#issuecomment-1952406831:307,Usability,user experience,user experience,307,"Thanks @vepadulano for the comment. I agree with your proposal. I went for an approach with addition of new options because I found `SetCompression{Algorithm,Level}` and assumed that it's desirable to have that level of flexibility. But I think since `SetCompressionSettings` takes care of both, the better user experience is to have single option with better documentation. Hence, I'll revert the changes from b5200e148be517112143fcb5e6d489dbc2d86dd4 and improve documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14714#issuecomment-1952406831
https://github.com/root-project/root/pull/14731#issuecomment-1948143634:105,Performance,perform,performance-critical,105,"Thank you! I made the modification. Still not clear to me, why it is necessary. But this is not a (very) performance-critical path, so it's fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731#issuecomment-1948143634
https://github.com/root-project/root/pull/14731#issuecomment-1948143634:46,Usability,clear,clear,46,"Thank you! I made the modification. Still not clear to me, why it is necessary. But this is not a (very) performance-critical path, so it's fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731#issuecomment-1948143634
https://github.com/root-project/root/pull/14750#issuecomment-1953657976:5,Usability,simpl,simply,5,Also simply running `rline.cxx` macro in the docker also works.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14750#issuecomment-1953657976
https://github.com/root-project/root/issues/14766#issuecomment-2046793610:147,Usability,clear,clear,147,"I think the problem is just the name. ""Ptr"" makes people think of a normal non owning pointer. If it would be called ""RResult"", it would be pretty clear to me who owns the payload!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766#issuecomment-2046793610
https://github.com/root-project/root/issues/14793#issuecomment-1983530703:20,Testability,test,tests,20,"@iarspider Did your tests indicate that this is a regression introduced by that commit specifically, or that this issue was simply not there yet at the time of that commit and it could be any commit since then?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14793#issuecomment-1983530703
https://github.com/root-project/root/issues/14793#issuecomment-1983530703:124,Usability,simpl,simply,124,"@iarspider Did your tests indicate that this is a regression introduced by that commit specifically, or that this issue was simply not there yet at the time of that commit and it could be any commit since then?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14793#issuecomment-1983530703
https://github.com/root-project/root/pull/14807#issuecomment-1965316725:743,Integrability,synchroniz,synchronization,743,"In CMSSW; - we use `oneapi::tbb::global_control` to set the process' maximum number of threads usable by TBB; - we create a top-level `oneapi::tbb::task_arena` (with the same number of threads), and all data processing is run within one `task_arena::execute()` call; - every call to ROOT I/O is isolated with `oneapi::tbb::this_task_arena::isolate()` call. By adding (or using) a global task arena to ROOT, does this mean, if multiple `TFile`s are writing concurrently, can their tasks be intermingled? Our guess is that ROOT's global task arena would trump the use of `this_task_arena::isolate()`, and allow such intermingling, but we don't really know. We are concerned that by sharing one task arena for unrelated activities it would cause synchronization of those activities because of task stealing. (assuming the explicit arena would trump the `this_task_arena::isolate()` call)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14807#issuecomment-1965316725
https://github.com/root-project/root/pull/14807#issuecomment-1965316725:456,Performance,concurren,concurrently,456,"In CMSSW; - we use `oneapi::tbb::global_control` to set the process' maximum number of threads usable by TBB; - we create a top-level `oneapi::tbb::task_arena` (with the same number of threads), and all data processing is run within one `task_arena::execute()` call; - every call to ROOT I/O is isolated with `oneapi::tbb::this_task_arena::isolate()` call. By adding (or using) a global task arena to ROOT, does this mean, if multiple `TFile`s are writing concurrently, can their tasks be intermingled? Our guess is that ROOT's global task arena would trump the use of `this_task_arena::isolate()`, and allow such intermingling, but we don't really know. We are concerned that by sharing one task arena for unrelated activities it would cause synchronization of those activities because of task stealing. (assuming the explicit arena would trump the `this_task_arena::isolate()` call)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14807#issuecomment-1965316725
https://github.com/root-project/root/pull/14807#issuecomment-1965316725:95,Usability,usab,usable,95,"In CMSSW; - we use `oneapi::tbb::global_control` to set the process' maximum number of threads usable by TBB; - we create a top-level `oneapi::tbb::task_arena` (with the same number of threads), and all data processing is run within one `task_arena::execute()` call; - every call to ROOT I/O is isolated with `oneapi::tbb::this_task_arena::isolate()` call. By adding (or using) a global task arena to ROOT, does this mean, if multiple `TFile`s are writing concurrently, can their tasks be intermingled? Our guess is that ROOT's global task arena would trump the use of `this_task_arena::isolate()`, and allow such intermingling, but we don't really know. We are concerned that by sharing one task arena for unrelated activities it would cause synchronization of those activities because of task stealing. (assuming the explicit arena would trump the `this_task_arena::isolate()` call)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14807#issuecomment-1965316725
https://github.com/root-project/root/pull/14807#issuecomment-1965963868:1039,Energy Efficiency,schedul,scheduling,1039,"@makortel . > In CMSSW; > ; > * we use `oneapi::tbb::global_control` to set the process' maximum number of threads usable by TBB; > ; > * we create a top-level `oneapi::tbb::task_arena` (with the same number of threads), and all data processing is run within one `task_arena::execute()` call; > ; > * every call to ROOT I/O is isolated with `oneapi::tbb::this_task_arena::isolate()` call; > ; > ; > By adding (or using) a global task arena to ROOT, does this mean, if multiple `TFile`s are writing concurrently, can their tasks be intermingled?. Yes, but I think that's already the case right now because we (incorrectly) use the surrounding task arena for everything. That said, `TTaskGroup` and the wrapped TBB's `task_group` prioritize tasks belonging to that group in their `Wait()` / `wait()` functionality. > Our guess is that ROOT's global task arena would trump the use of `this_task_arena::isolate()`, and allow such intermingling, but we don't really know. Possible that ROOT's task arena ""wins"", I don't know enough about TBB's scheduling internals; I see that you opened an issue to investigate what this means. > We are concerned that by sharing one task arena for unrelated activities it would cause synchronization of those activities because of task stealing. (assuming the explicit arena would trump the `this_task_arena::isolate()` call). As argued above, it's not worse than before except that this fixes the bug that ROOT must only use the resources that it was allowed by the user.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14807#issuecomment-1965963868
https://github.com/root-project/root/pull/14807#issuecomment-1965963868:701,Integrability,wrap,wrapped,701,"@makortel . > In CMSSW; > ; > * we use `oneapi::tbb::global_control` to set the process' maximum number of threads usable by TBB; > ; > * we create a top-level `oneapi::tbb::task_arena` (with the same number of threads), and all data processing is run within one `task_arena::execute()` call; > ; > * every call to ROOT I/O is isolated with `oneapi::tbb::this_task_arena::isolate()` call; > ; > ; > By adding (or using) a global task arena to ROOT, does this mean, if multiple `TFile`s are writing concurrently, can their tasks be intermingled?. Yes, but I think that's already the case right now because we (incorrectly) use the surrounding task arena for everything. That said, `TTaskGroup` and the wrapped TBB's `task_group` prioritize tasks belonging to that group in their `Wait()` / `wait()` functionality. > Our guess is that ROOT's global task arena would trump the use of `this_task_arena::isolate()`, and allow such intermingling, but we don't really know. Possible that ROOT's task arena ""wins"", I don't know enough about TBB's scheduling internals; I see that you opened an issue to investigate what this means. > We are concerned that by sharing one task arena for unrelated activities it would cause synchronization of those activities because of task stealing. (assuming the explicit arena would trump the `this_task_arena::isolate()` call). As argued above, it's not worse than before except that this fixes the bug that ROOT must only use the resources that it was allowed by the user.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14807#issuecomment-1965963868
https://github.com/root-project/root/pull/14807#issuecomment-1965963868:1214,Integrability,synchroniz,synchronization,1214,"@makortel . > In CMSSW; > ; > * we use `oneapi::tbb::global_control` to set the process' maximum number of threads usable by TBB; > ; > * we create a top-level `oneapi::tbb::task_arena` (with the same number of threads), and all data processing is run within one `task_arena::execute()` call; > ; > * every call to ROOT I/O is isolated with `oneapi::tbb::this_task_arena::isolate()` call; > ; > ; > By adding (or using) a global task arena to ROOT, does this mean, if multiple `TFile`s are writing concurrently, can their tasks be intermingled?. Yes, but I think that's already the case right now because we (incorrectly) use the surrounding task arena for everything. That said, `TTaskGroup` and the wrapped TBB's `task_group` prioritize tasks belonging to that group in their `Wait()` / `wait()` functionality. > Our guess is that ROOT's global task arena would trump the use of `this_task_arena::isolate()`, and allow such intermingling, but we don't really know. Possible that ROOT's task arena ""wins"", I don't know enough about TBB's scheduling internals; I see that you opened an issue to investigate what this means. > We are concerned that by sharing one task arena for unrelated activities it would cause synchronization of those activities because of task stealing. (assuming the explicit arena would trump the `this_task_arena::isolate()` call). As argued above, it's not worse than before except that this fixes the bug that ROOT must only use the resources that it was allowed by the user.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14807#issuecomment-1965963868
https://github.com/root-project/root/pull/14807#issuecomment-1965963868:498,Performance,concurren,concurrently,498,"@makortel . > In CMSSW; > ; > * we use `oneapi::tbb::global_control` to set the process' maximum number of threads usable by TBB; > ; > * we create a top-level `oneapi::tbb::task_arena` (with the same number of threads), and all data processing is run within one `task_arena::execute()` call; > ; > * every call to ROOT I/O is isolated with `oneapi::tbb::this_task_arena::isolate()` call; > ; > ; > By adding (or using) a global task arena to ROOT, does this mean, if multiple `TFile`s are writing concurrently, can their tasks be intermingled?. Yes, but I think that's already the case right now because we (incorrectly) use the surrounding task arena for everything. That said, `TTaskGroup` and the wrapped TBB's `task_group` prioritize tasks belonging to that group in their `Wait()` / `wait()` functionality. > Our guess is that ROOT's global task arena would trump the use of `this_task_arena::isolate()`, and allow such intermingling, but we don't really know. Possible that ROOT's task arena ""wins"", I don't know enough about TBB's scheduling internals; I see that you opened an issue to investigate what this means. > We are concerned that by sharing one task arena for unrelated activities it would cause synchronization of those activities because of task stealing. (assuming the explicit arena would trump the `this_task_arena::isolate()` call). As argued above, it's not worse than before except that this fixes the bug that ROOT must only use the resources that it was allowed by the user.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14807#issuecomment-1965963868
https://github.com/root-project/root/pull/14807#issuecomment-1965963868:115,Usability,usab,usable,115,"@makortel . > In CMSSW; > ; > * we use `oneapi::tbb::global_control` to set the process' maximum number of threads usable by TBB; > ; > * we create a top-level `oneapi::tbb::task_arena` (with the same number of threads), and all data processing is run within one `task_arena::execute()` call; > ; > * every call to ROOT I/O is isolated with `oneapi::tbb::this_task_arena::isolate()` call; > ; > ; > By adding (or using) a global task arena to ROOT, does this mean, if multiple `TFile`s are writing concurrently, can their tasks be intermingled?. Yes, but I think that's already the case right now because we (incorrectly) use the surrounding task arena for everything. That said, `TTaskGroup` and the wrapped TBB's `task_group` prioritize tasks belonging to that group in their `Wait()` / `wait()` functionality. > Our guess is that ROOT's global task arena would trump the use of `this_task_arena::isolate()`, and allow such intermingling, but we don't really know. Possible that ROOT's task arena ""wins"", I don't know enough about TBB's scheduling internals; I see that you opened an issue to investigate what this means. > We are concerned that by sharing one task arena for unrelated activities it would cause synchronization of those activities because of task stealing. (assuming the explicit arena would trump the `this_task_arena::isolate()` call). As argued above, it's not worse than before except that this fixes the bug that ROOT must only use the resources that it was allowed by the user.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14807#issuecomment-1965963868
https://github.com/root-project/root/pull/14813#issuecomment-2038169206:398,Availability,failure,failure,398,"Thanks for these changes. I apologise for coming back to them so late. ; I would like to hear also what @pcanal has to say about the mechanics of the code, however the change seems a net improvement with respect to the current situation. I would like to start pointing out a few aspects of the PR which could be improved before merging (if consensus in the review is reached):; - There is one test failure, on all platforms but windows: do you need help to figure out why the test is failing?; - The number of commits seem to high, can they be squashed together into fewer commits (one commit) with clear commit messages?; - There is no test for the functionality: can one or more tests be added in roottest? If you need some examples, we can dig them out for you (in the `root/meta/` directory one should have plenty of examples)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14813#issuecomment-2038169206
https://github.com/root-project/root/pull/14813#issuecomment-2038169206:612,Integrability,message,messages,612,"Thanks for these changes. I apologise for coming back to them so late. ; I would like to hear also what @pcanal has to say about the mechanics of the code, however the change seems a net improvement with respect to the current situation. I would like to start pointing out a few aspects of the PR which could be improved before merging (if consensus in the review is reached):; - There is one test failure, on all platforms but windows: do you need help to figure out why the test is failing?; - The number of commits seem to high, can they be squashed together into fewer commits (one commit) with clear commit messages?; - There is no test for the functionality: can one or more tests be added in roottest? If you need some examples, we can dig them out for you (in the `root/meta/` directory one should have plenty of examples)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14813#issuecomment-2038169206
https://github.com/root-project/root/pull/14813#issuecomment-2038169206:393,Testability,test,test,393,"Thanks for these changes. I apologise for coming back to them so late. ; I would like to hear also what @pcanal has to say about the mechanics of the code, however the change seems a net improvement with respect to the current situation. I would like to start pointing out a few aspects of the PR which could be improved before merging (if consensus in the review is reached):; - There is one test failure, on all platforms but windows: do you need help to figure out why the test is failing?; - The number of commits seem to high, can they be squashed together into fewer commits (one commit) with clear commit messages?; - There is no test for the functionality: can one or more tests be added in roottest? If you need some examples, we can dig them out for you (in the `root/meta/` directory one should have plenty of examples)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14813#issuecomment-2038169206
https://github.com/root-project/root/pull/14813#issuecomment-2038169206:476,Testability,test,test,476,"Thanks for these changes. I apologise for coming back to them so late. ; I would like to hear also what @pcanal has to say about the mechanics of the code, however the change seems a net improvement with respect to the current situation. I would like to start pointing out a few aspects of the PR which could be improved before merging (if consensus in the review is reached):; - There is one test failure, on all platforms but windows: do you need help to figure out why the test is failing?; - The number of commits seem to high, can they be squashed together into fewer commits (one commit) with clear commit messages?; - There is no test for the functionality: can one or more tests be added in roottest? If you need some examples, we can dig them out for you (in the `root/meta/` directory one should have plenty of examples)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14813#issuecomment-2038169206
https://github.com/root-project/root/pull/14813#issuecomment-2038169206:637,Testability,test,test,637,"Thanks for these changes. I apologise for coming back to them so late. ; I would like to hear also what @pcanal has to say about the mechanics of the code, however the change seems a net improvement with respect to the current situation. I would like to start pointing out a few aspects of the PR which could be improved before merging (if consensus in the review is reached):; - There is one test failure, on all platforms but windows: do you need help to figure out why the test is failing?; - The number of commits seem to high, can they be squashed together into fewer commits (one commit) with clear commit messages?; - There is no test for the functionality: can one or more tests be added in roottest? If you need some examples, we can dig them out for you (in the `root/meta/` directory one should have plenty of examples)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14813#issuecomment-2038169206
https://github.com/root-project/root/pull/14813#issuecomment-2038169206:681,Testability,test,tests,681,"Thanks for these changes. I apologise for coming back to them so late. ; I would like to hear also what @pcanal has to say about the mechanics of the code, however the change seems a net improvement with respect to the current situation. I would like to start pointing out a few aspects of the PR which could be improved before merging (if consensus in the review is reached):; - There is one test failure, on all platforms but windows: do you need help to figure out why the test is failing?; - The number of commits seem to high, can they be squashed together into fewer commits (one commit) with clear commit messages?; - There is no test for the functionality: can one or more tests be added in roottest? If you need some examples, we can dig them out for you (in the `root/meta/` directory one should have plenty of examples)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14813#issuecomment-2038169206
https://github.com/root-project/root/pull/14813#issuecomment-2038169206:599,Usability,clear,clear,599,"Thanks for these changes. I apologise for coming back to them so late. ; I would like to hear also what @pcanal has to say about the mechanics of the code, however the change seems a net improvement with respect to the current situation. I would like to start pointing out a few aspects of the PR which could be improved before merging (if consensus in the review is reached):; - There is one test failure, on all platforms but windows: do you need help to figure out why the test is failing?; - The number of commits seem to high, can they be squashed together into fewer commits (one commit) with clear commit messages?; - There is no test for the functionality: can one or more tests be added in roottest? If you need some examples, we can dig them out for you (in the `root/meta/` directory one should have plenty of examples)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14813#issuecomment-2038169206
https://github.com/root-project/root/issues/14824#issuecomment-1964640642:48,Usability,feedback,feedback,48,@guitargeek @wlav awesome! Thanks for the quick feedback on this! :). I'll mark that item as done! :tada:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14824#issuecomment-1964640642
https://github.com/root-project/root/pull/14833#issuecomment-1965918042:107,Usability,simpl,simply,107,"And also, apologies for this, should we rename TCutInfo to RCutInfo before making it writeable? I think we simply forgot to rename that ancillary class when TDataFrame was renamed into RDataFrame...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14833#issuecomment-1965918042
https://github.com/root-project/root/pull/14833#issuecomment-1966233201:109,Usability,simpl,simply,109,"> And also, apologies for this, should we rename TCutInfo to RCutInfo before making it writeable? I think we simply forgot to rename that ancillary class when TDataFrame was renamed into RDataFrame... This class has been in the public namespace for years, so I don't think we can do that. What we can do is we can make an `RCutInfo` class, then alias `using TCutInfo = RCutInfo;`. How does that sound?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14833#issuecomment-1966233201
https://github.com/root-project/root/issues/14855#issuecomment-1970972594:6,Usability,clear,clear,6,It is clear ownership problem. @ferdymercury - you can try to fix it if you want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14855#issuecomment-1970972594
https://github.com/root-project/root/issues/14855#issuecomment-1974795728:6,Usability,clear,clear,6,Is it clear what `ratioplot1->Close()` is supposed to mean?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14855#issuecomment-1974795728
https://github.com/root-project/root/issues/14855#issuecomment-1976051222:226,Availability,fault,fault,226,> Is it clear what ratioplot1->Close() is supposed to mean?. It is just method which is called when canvas closed in interactive mode.; I put it here to demonstrate problem. ; Calling canvas destructor will cause the same seg fault. I tried to fix the problem in #14861 but facing much more problems. ; `RecursiveRemove` is not a solution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14855#issuecomment-1976051222
https://github.com/root-project/root/issues/14855#issuecomment-1976051222:8,Usability,clear,clear,8,> Is it clear what ratioplot1->Close() is supposed to mean?. It is just method which is called when canvas closed in interactive mode.; I put it here to demonstrate problem. ; Calling canvas destructor will cause the same seg fault. I tried to fix the problem in #14861 but facing much more problems. ; `RecursiveRemove` is not a solution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14855#issuecomment-1976051222
https://github.com/root-project/root/pull/14856#issuecomment-1971063315:55,Integrability,interface,interfaces,55,"At the time, it was not clear how to introduce the new interfaces for the expression of parallelism within ROOT. This is also why the effort started from within the `Experimental` namespace. As correctly underlined above, the class is not really used nor needed, and it's good that these changes were proposed: thanks for that!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14856#issuecomment-1971063315
https://github.com/root-project/root/pull/14856#issuecomment-1971063315:24,Usability,clear,clear,24,"At the time, it was not clear how to introduce the new interfaces for the expression of parallelism within ROOT. This is also why the effort started from within the `Experimental` namespace. As correctly underlined above, the class is not really used nor needed, and it's good that these changes were proposed: thanks for that!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14856#issuecomment-1971063315
https://github.com/root-project/root/pull/14865#issuecomment-1973061065:10,Availability,error,errors,10,"Since the errors are true and valid, shouldn't we keep them? Or make them more clear as in `you are trying to access a system-protected file"" or something similar?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14865#issuecomment-1973061065
https://github.com/root-project/root/pull/14865#issuecomment-1973061065:110,Security,access,access,110,"Since the errors are true and valid, shouldn't we keep them? Or make them more clear as in `you are trying to access a system-protected file"" or something similar?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14865#issuecomment-1973061065
https://github.com/root-project/root/pull/14865#issuecomment-1973061065:79,Usability,clear,clear,79,"Since the errors are true and valid, shouldn't we keep them? Or make them more clear as in `you are trying to access a system-protected file"" or something similar?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14865#issuecomment-1973061065
https://github.com/root-project/root/pull/14865#issuecomment-1973063708:12,Availability,error,errors,12,"> Since the errors are true and valid, shouldn't we keep them? Or make them more clear as in `you are trying to access a system-protected file"" or something similar?. The user complains about the error message, then I'm not sure changing the text of the message will help in this case. And the error is `ENOENT`, meaning the file doesn't exists, which is not necessarily true, so telling this is a system protected file is not even reflecting the reality on all OSes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14865#issuecomment-1973063708
https://github.com/root-project/root/pull/14865#issuecomment-1973063708:196,Availability,error,error,196,"> Since the errors are true and valid, shouldn't we keep them? Or make them more clear as in `you are trying to access a system-protected file"" or something similar?. The user complains about the error message, then I'm not sure changing the text of the message will help in this case. And the error is `ENOENT`, meaning the file doesn't exists, which is not necessarily true, so telling this is a system protected file is not even reflecting the reality on all OSes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14865#issuecomment-1973063708
https://github.com/root-project/root/pull/14865#issuecomment-1973063708:294,Availability,error,error,294,"> Since the errors are true and valid, shouldn't we keep them? Or make them more clear as in `you are trying to access a system-protected file"" or something similar?. The user complains about the error message, then I'm not sure changing the text of the message will help in this case. And the error is `ENOENT`, meaning the file doesn't exists, which is not necessarily true, so telling this is a system protected file is not even reflecting the reality on all OSes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14865#issuecomment-1973063708
https://github.com/root-project/root/pull/14865#issuecomment-1973063708:202,Integrability,message,message,202,"> Since the errors are true and valid, shouldn't we keep them? Or make them more clear as in `you are trying to access a system-protected file"" or something similar?. The user complains about the error message, then I'm not sure changing the text of the message will help in this case. And the error is `ENOENT`, meaning the file doesn't exists, which is not necessarily true, so telling this is a system protected file is not even reflecting the reality on all OSes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14865#issuecomment-1973063708
https://github.com/root-project/root/pull/14865#issuecomment-1973063708:254,Integrability,message,message,254,"> Since the errors are true and valid, shouldn't we keep them? Or make them more clear as in `you are trying to access a system-protected file"" or something similar?. The user complains about the error message, then I'm not sure changing the text of the message will help in this case. And the error is `ENOENT`, meaning the file doesn't exists, which is not necessarily true, so telling this is a system protected file is not even reflecting the reality on all OSes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14865#issuecomment-1973063708
https://github.com/root-project/root/pull/14865#issuecomment-1973063708:112,Security,access,access,112,"> Since the errors are true and valid, shouldn't we keep them? Or make them more clear as in `you are trying to access a system-protected file"" or something similar?. The user complains about the error message, then I'm not sure changing the text of the message will help in this case. And the error is `ENOENT`, meaning the file doesn't exists, which is not necessarily true, so telling this is a system protected file is not even reflecting the reality on all OSes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14865#issuecomment-1973063708
https://github.com/root-project/root/pull/14865#issuecomment-1973063708:81,Usability,clear,clear,81,"> Since the errors are true and valid, shouldn't we keep them? Or make them more clear as in `you are trying to access a system-protected file"" or something similar?. The user complains about the error message, then I'm not sure changing the text of the message will help in this case. And the error is `ENOENT`, meaning the file doesn't exists, which is not necessarily true, so telling this is a system protected file is not even reflecting the reality on all OSes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14865#issuecomment-1973063708
https://github.com/root-project/root/pull/14887#issuecomment-1980364814:173,Availability,down,down,173,> We should really have a test for this... I absolutely agree! @scott-snyder how involved is the failing test in the ATLAS framework? If it's not too complicated to boil it down to a simple reproducer it would be really helpful here. Otherwise I can try to sketch one myself and then you can tell us how closely it represents your original case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14887#issuecomment-1980364814
https://github.com/root-project/root/pull/14887#issuecomment-1980364814:26,Testability,test,test,26,> We should really have a test for this... I absolutely agree! @scott-snyder how involved is the failing test in the ATLAS framework? If it's not too complicated to boil it down to a simple reproducer it would be really helpful here. Otherwise I can try to sketch one myself and then you can tell us how closely it represents your original case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14887#issuecomment-1980364814
https://github.com/root-project/root/pull/14887#issuecomment-1980364814:105,Testability,test,test,105,> We should really have a test for this... I absolutely agree! @scott-snyder how involved is the failing test in the ATLAS framework? If it's not too complicated to boil it down to a simple reproducer it would be really helpful here. Otherwise I can try to sketch one myself and then you can tell us how closely it represents your original case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14887#issuecomment-1980364814
https://github.com/root-project/root/pull/14887#issuecomment-1980364814:183,Usability,simpl,simple,183,> We should really have a test for this... I absolutely agree! @scott-snyder how involved is the failing test in the ATLAS framework? If it's not too complicated to boil it down to a simple reproducer it would be really helpful here. Otherwise I can try to sketch one myself and then you can tell us how closely it represents your original case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14887#issuecomment-1980364814
https://github.com/root-project/root/issues/14889#issuecomment-1981051931:140,Usability,simpl,simply,140,"Thanks for the proposal backed up by a concrete potential solution. I like the idea of having something automated that in case of problems, simply does nothing. One thing that changes though is the squashing. ; This is something to discuss. In your opinion, @vgvassilev , what do we loose by automatically squashing commits intended for backports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14889#issuecomment-1981051931
https://github.com/root-project/root/issues/14889#issuecomment-1983480977:36,Usability,simpl,simply,36,"I think the squashing of commits is simply a change with respect to what is being done today, it's not negative or a regression per se. I even could see an advantage in having one backport per commit. A good item to be discussed in the team I guess, but this action could be really help us.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14889#issuecomment-1983480977
https://github.com/root-project/root/pull/14908#issuecomment-1985811465:57,Usability,simpl,simpler,57,"@linev I could check how to do that, but isn't there any simpler solution?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14908#issuecomment-1985811465
https://github.com/root-project/root/pull/14908#issuecomment-1985836713:30,Usability,simpl,simpler,30,"@bellenot . > isn't there any simpler solution. I have no idea. While it is not real standard, each linux/mac flawor has own way to provide function to read `/dev/random` or ; `/dev/urandom`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14908#issuecomment-1985836713
https://github.com/root-project/root/issues/14949#issuecomment-1999929430:297,Usability,clear,clear,297,"ok, I have figured it out, it's because of; >0x01 	64 	Index64 	Mother columns of (nested) collections, counting is relative to the cluster; 0x02 	32 	Index32 	Mother columns of (nested) collections, counting is relative to the cluster. specifically, ""counting is relative to the cluster"" was not clear to me. But what it means is, if you have 2 pages of `Index64` for a column in this cluster, after ""de-split encoding"" you will get these two arrays:. ```julia; first page: [30, 4, 18, 14, 5, 8, 10, 7, 8, 18, ..., 22, 1, 16, 14, 14, 12, 4, 7, 15, 24]; first page after cumsum: [..., 81317, 81318, 81334, 81348, 81362, 81374, 81378, 81385, 81400, 81424]. second page: [81428, 13, 9, 7, 5, 20, 21, 4, 8, 6, ..., 128487, 128505, 128513, 128527, 128543, 128549, 128557, 128564, 128575, 128584]; ``` . you can see that the second page doesn't start with 4, instead, it starts with a huge number `81428`. I guess it means index pages are to be interpreted individually within the cluster.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14949#issuecomment-1999929430
https://github.com/root-project/root/issues/14958#issuecomment-1996872551:501,Deployability,install,install,501,"Hello Sergey,, Danillo. Thank you for your suggestions (that we took into consideration ), feedback and prompt response. There is a new suggestion on how to solve this issue. Please check:. <https://its.cern.ch/jira/browse/SPI-2532>; its.cern.ch<https://its.cern.ch/jira/browse/SPI-2532>; [X]<https://its.cern.ch/jira/browse/SPI-2532>. We will keep you informed.; Best regards,; Ilias. On 14 Mar 2024, at 09:32, Sergey Linev ***@***.***> wrote:. @cogevito<https://github.com/cogevito>. Can you try to install libbsd-dev on your node?. —; Reply to this email directly, view it on GitHub<https://github.com/root-project/root/issues/14958#issuecomment-1996852848>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ADMB4TR5V47G7UK252MEENDYYFODFAVCNFSM6AAAAABEUNYYK6VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTSOJWHA2TEOBUHA>.; You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14958#issuecomment-1996872551
https://github.com/root-project/root/issues/14958#issuecomment-1996872551:91,Usability,feedback,feedback,91,"Hello Sergey,, Danillo. Thank you for your suggestions (that we took into consideration ), feedback and prompt response. There is a new suggestion on how to solve this issue. Please check:. <https://its.cern.ch/jira/browse/SPI-2532>; its.cern.ch<https://its.cern.ch/jira/browse/SPI-2532>; [X]<https://its.cern.ch/jira/browse/SPI-2532>. We will keep you informed.; Best regards,; Ilias. On 14 Mar 2024, at 09:32, Sergey Linev ***@***.***> wrote:. @cogevito<https://github.com/cogevito>. Can you try to install libbsd-dev on your node?. —; Reply to this email directly, view it on GitHub<https://github.com/root-project/root/issues/14958#issuecomment-1996852848>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ADMB4TR5V47G7UK252MEENDYYFODFAVCNFSM6AAAAABEUNYYK6VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTSOJWHA2TEOBUHA>.; You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14958#issuecomment-1996872551
https://github.com/root-project/root/pull/14967#issuecomment-2013036145:166,Modifiability,variab,variables,166,"@vepadulano @pcanal I just noticed that all the 31 bit ugly stuff was due to an outdated documentation. It's no longer the case, minor and major have now independent variables both 64-bits. So this simplifies things significantly.; See https://github.com/root-project/root/commit/19b0ca55fe1643eb07c9bca362b64a4d2111674f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14967#issuecomment-2013036145
https://github.com/root-project/root/pull/14967#issuecomment-2013036145:198,Usability,simpl,simplifies,198,"@vepadulano @pcanal I just noticed that all the 31 bit ugly stuff was due to an outdated documentation. It's no longer the case, minor and major have now independent variables both 64-bits. So this simplifies things significantly.; See https://github.com/root-project/root/commit/19b0ca55fe1643eb07c9bca362b64a4d2111674f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14967#issuecomment-2013036145
https://github.com/root-project/root/pull/14967#issuecomment-2046265770:24,Availability,failure,failures,24,"> I believe the current failures are related to the roottest branch not being up-to-date with the latest master. Close but not quite. What is happening in the reverse. Once the CI test are started they pin the `ROOT master` commit that will be use to test. If one simply ""re-run"" the tests they will (this is intentional) use that same commit. To take in consideration new commits in the new CI build we need to do either of these 3 actions:; * Rebase the master onto the new PR branch.; * Add a new commit to the PR branch.; * Close and re-open the PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14967#issuecomment-2046265770
https://github.com/root-project/root/pull/14967#issuecomment-2046265770:180,Testability,test,test,180,"> I believe the current failures are related to the roottest branch not being up-to-date with the latest master. Close but not quite. What is happening in the reverse. Once the CI test are started they pin the `ROOT master` commit that will be use to test. If one simply ""re-run"" the tests they will (this is intentional) use that same commit. To take in consideration new commits in the new CI build we need to do either of these 3 actions:; * Rebase the master onto the new PR branch.; * Add a new commit to the PR branch.; * Close and re-open the PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14967#issuecomment-2046265770
https://github.com/root-project/root/pull/14967#issuecomment-2046265770:251,Testability,test,test,251,"> I believe the current failures are related to the roottest branch not being up-to-date with the latest master. Close but not quite. What is happening in the reverse. Once the CI test are started they pin the `ROOT master` commit that will be use to test. If one simply ""re-run"" the tests they will (this is intentional) use that same commit. To take in consideration new commits in the new CI build we need to do either of these 3 actions:; * Rebase the master onto the new PR branch.; * Add a new commit to the PR branch.; * Close and re-open the PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14967#issuecomment-2046265770
https://github.com/root-project/root/pull/14967#issuecomment-2046265770:284,Testability,test,tests,284,"> I believe the current failures are related to the roottest branch not being up-to-date with the latest master. Close but not quite. What is happening in the reverse. Once the CI test are started they pin the `ROOT master` commit that will be use to test. If one simply ""re-run"" the tests they will (this is intentional) use that same commit. To take in consideration new commits in the new CI build we need to do either of these 3 actions:; * Rebase the master onto the new PR branch.; * Add a new commit to the PR branch.; * Close and re-open the PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14967#issuecomment-2046265770
https://github.com/root-project/root/pull/14967#issuecomment-2046265770:264,Usability,simpl,simply,264,"> I believe the current failures are related to the roottest branch not being up-to-date with the latest master. Close but not quite. What is happening in the reverse. Once the CI test are started they pin the `ROOT master` commit that will be use to test. If one simply ""re-run"" the tests they will (this is intentional) use that same commit. To take in consideration new commits in the new CI build we need to do either of these 3 actions:; * Rebase the master onto the new PR branch.; * Add a new commit to the PR branch.; * Close and re-open the PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14967#issuecomment-2046265770
https://github.com/root-project/root/issues/14972#issuecomment-1998169426:23,Usability,simpl,simple,23,"Should be something as simple as:. ```; git clone our/llvm/fork; git clone cling; git checkout cling-latest; cmake -DLLVM_ENABLE_PROJECTS=clang -DCMAKE_BUILD_TYPE=Debug -DLLVM_TARGETS_TO_BUILD=""host;nvptx"" -DLLVM_EXTERNAL_PROJECTS=""cling"" -DLLVM_EXTERNAL_CLING_SOURCE_DIR=/path/to/where/we/cloned/cling ../llvm; make check-cling; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14972#issuecomment-1998169426
https://github.com/root-project/root/pull/14974#issuecomment-2010691407:51,Usability,clear,clearly,51,Just rebased to see the situation on the macs more clearly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14974#issuecomment-2010691407
https://github.com/root-project/root/issues/14981#issuecomment-2006250778:9,Deployability,update,update,9,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things.; ```; my_data = rvec; ```; Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas; ```; my_data = numpy.asarray(rvec); ```; Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example; ```; process = psutil.Process(). ROOT.gInterpreter.Declare(""""""; auto create_rvec(unsigned int n) {; //return std::array<unsigned int, 3>({n, n, n});; return ROOT::RVec<unsigned int>({n, n, n});; }; """"""); df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""); rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():; return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(); print(mem0). for v2 in rvecs:; n = v2; mem2 = get_mem_usage(); print(mem2); ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981#issuecomment-2006250778
https://github.com/root-project/root/issues/14981#issuecomment-2006250778:271,Integrability,depend,depends,271,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things.; ```; my_data = rvec; ```; Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas; ```; my_data = numpy.asarray(rvec); ```; Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example; ```; process = psutil.Process(). ROOT.gInterpreter.Declare(""""""; auto create_rvec(unsigned int n) {; //return std::array<unsigned int, 3>({n, n, n});; return ROOT::RVec<unsigned int>({n, n, n});; }; """"""); df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""); rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():; return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(); print(mem0). for v2 in rvecs:; n = v2; mem2 = get_mem_usage(); print(mem2); ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981#issuecomment-2006250778
https://github.com/root-project/root/issues/14981#issuecomment-2006250778:46,Usability,clear,clear,46,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things.; ```; my_data = rvec; ```; Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas; ```; my_data = numpy.asarray(rvec); ```; Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example; ```; process = psutil.Process(). ROOT.gInterpreter.Declare(""""""; auto create_rvec(unsigned int n) {; //return std::array<unsigned int, 3>({n, n, n});; return ROOT::RVec<unsigned int>({n, n, n});; }; """"""); df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""); rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():; return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(); print(mem0). for v2 in rvecs:; n = v2; mem2 = get_mem_usage(); print(mem2); ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981#issuecomment-2006250778
https://github.com/root-project/root/issues/14981#issuecomment-2006250778:970,Usability,clear,clearly,970,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things.; ```; my_data = rvec; ```; Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas; ```; my_data = numpy.asarray(rvec); ```; Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example; ```; process = psutil.Process(). ROOT.gInterpreter.Declare(""""""; auto create_rvec(unsigned int n) {; //return std::array<unsigned int, 3>({n, n, n});; return ROOT::RVec<unsigned int>({n, n, n});; }; """"""); df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""); rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():; return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(); print(mem0). for v2 in rvecs:; n = v2; mem2 = get_mem_usage(); print(mem2); ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981#issuecomment-2006250778
https://github.com/root-project/root/issues/14981#issuecomment-2006250778:993,Usability,simpl,simplified,993,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things.; ```; my_data = rvec; ```; Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas; ```; my_data = numpy.asarray(rvec); ```; Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example; ```; process = psutil.Process(). ROOT.gInterpreter.Declare(""""""; auto create_rvec(unsigned int n) {; //return std::array<unsigned int, 3>({n, n, n});; return ROOT::RVec<unsigned int>({n, n, n});; }; """"""); df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""); rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():; return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(); print(mem0). for v2 in rvecs:; n = v2; mem2 = get_mem_usage(); print(mem2); ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14981#issuecomment-2006250778
https://github.com/root-project/root/issues/14987#issuecomment-2001914193:93,Integrability,depend,dependencies,93,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987#issuecomment-2001914193
https://github.com/root-project/root/issues/14987#issuecomment-2001914193:383,Performance,cache,caches,383,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987#issuecomment-2001914193
https://github.com/root-project/root/issues/14987#issuecomment-2001914193:401,Testability,test,tests,401,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987#issuecomment-2001914193
https://github.com/root-project/root/issues/14987#issuecomment-2001914193:166,Usability,feedback,feedback,166,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987#issuecomment-2001914193
https://github.com/root-project/root/issues/14987#issuecomment-2001954686:95,Integrability,depend,dependencies,95,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987#issuecomment-2001954686
https://github.com/root-project/root/issues/14987#issuecomment-2001954686:385,Performance,cache,caches,385,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987#issuecomment-2001954686
https://github.com/root-project/root/issues/14987#issuecomment-2001954686:403,Testability,test,tests,403,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987#issuecomment-2001954686
https://github.com/root-project/root/issues/14987#issuecomment-2001954686:168,Usability,feedback,feedback,168,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14987#issuecomment-2001954686
https://github.com/root-project/root/pull/14993#issuecomment-2002334241:6,Usability,simpl,simplification,6,"Great simplification, which matches well the PROOF=OFF by default in master: thanks. This is not very important, but could users rely on some other sort of parallelism, e.g. T{Thread/Process}Executor?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14993#issuecomment-2002334241
https://github.com/root-project/root/pull/15006#issuecomment-2010652089:156,Testability,test,tests,156,"Thanks a lot @pcanal for this improvement: experiments will appreciate. Given that we still run, with somewhat lower frequency than others, 6.26 builds and tests, would a simple test for 6.26 be of help in roottest?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15006#issuecomment-2010652089
https://github.com/root-project/root/pull/15006#issuecomment-2010652089:178,Testability,test,test,178,"Thanks a lot @pcanal for this improvement: experiments will appreciate. Given that we still run, with somewhat lower frequency than others, 6.26 builds and tests, would a simple test for 6.26 be of help in roottest?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15006#issuecomment-2010652089
https://github.com/root-project/root/pull/15006#issuecomment-2010652089:171,Usability,simpl,simple,171,"Thanks a lot @pcanal for this improvement: experiments will appreciate. Given that we still run, with somewhat lower frequency than others, 6.26 builds and tests, would a simple test for 6.26 be of help in roottest?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15006#issuecomment-2010652089
https://github.com/root-project/root/pull/15031#issuecomment-2018028002:594,Availability,alive,alive,594,"> One general point regarding the overall design. I wonder if the `RVecDS` data source can be made to have a map/vector of `RVec`s as data member instead of `void *` . Thanks for the review! I have changed the `RVecDS` to take a map to `RVecs`, and not pointers to it. > and those RVecs should be views on the numpy arrays. This would make the design intent clearer and possibly remove the need for a custom deleter that calls into a Python function. This is not possible right now, because RVecs are not true ""views on the numpy arrays"" in the sense that their existence keeps the numpy array alive. This is only hacked into the Python side by adding an `__adopted__` member to the RVec python proxy:; https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py#L135. As soon as the RVec gets passed to the C++ side we are losing this reference. So we can't work around a custom deleter in the `RVecDS`. Well, there would be a way, which is to implement a similar mechanism of implementing a deleter that calls to the Python side in RVec itself! But maybe that's not for this PR :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15031#issuecomment-2018028002
https://github.com/root-project/root/pull/15031#issuecomment-2018028002:358,Usability,clear,clearer,358,"> One general point regarding the overall design. I wonder if the `RVecDS` data source can be made to have a map/vector of `RVec`s as data member instead of `void *` . Thanks for the review! I have changed the `RVecDS` to take a map to `RVecs`, and not pointers to it. > and those RVecs should be views on the numpy arrays. This would make the design intent clearer and possibly remove the need for a custom deleter that calls into a Python function. This is not possible right now, because RVecs are not true ""views on the numpy arrays"" in the sense that their existence keeps the numpy array alive. This is only hacked into the Python side by adding an `__adopted__` member to the RVec python proxy:; https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py#L135. As soon as the RVec gets passed to the C++ side we are losing this reference. So we can't work around a custom deleter in the `RVecDS`. Well, there would be a way, which is to implement a similar mechanism of implementing a deleter that calls to the Python side in RVec itself! But maybe that's not for this PR :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15031#issuecomment-2018028002
https://github.com/root-project/root/issues/15035#issuecomment-2015329409:254,Availability,error,error,254,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035#issuecomment-2015329409
https://github.com/root-project/root/issues/15035#issuecomment-2015329409:115,Integrability,inject,injecting,115,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035#issuecomment-2015329409
https://github.com/root-project/root/issues/15035#issuecomment-2015329409:115,Security,inject,injecting,115,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035#issuecomment-2015329409
https://github.com/root-project/root/issues/15035#issuecomment-2015329409:281,Usability,clear,clear,281,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15035#issuecomment-2015329409
https://github.com/root-project/root/pull/15056#issuecomment-2042007736:87,Usability,simpl,simple,87,"Thanks! An idea: the KHelpAbout in the browsers, it might be helpful to replace with a simple TGLabel containing gHelpAbout in a Tgtab e.g. or tgwindow",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15056#issuecomment-2042007736
https://github.com/root-project/root/issues/15062#issuecomment-2022342966:1793,Availability,error,error,1793,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon?. Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:; https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint?. > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2022342966
https://github.com/root-project/root/issues/15062#issuecomment-2022342966:119,Deployability,upgrade,upgraded,119,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon?. Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:; https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint?. > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2022342966
https://github.com/root-project/root/issues/15062#issuecomment-2022342966:491,Deployability,patch,patches,491,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon?. Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:; https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint?. > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2022342966
https://github.com/root-project/root/issues/15062#issuecomment-2022342966:661,Deployability,patch,patches,661,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon?. Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:; https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint?. > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2022342966
https://github.com/root-project/root/issues/15062#issuecomment-2022342966:753,Deployability,patch,patches,753,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon?. Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:; https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint?. > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2022342966
https://github.com/root-project/root/issues/15062#issuecomment-2022342966:1059,Deployability,patch,patch,1059,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon?. Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:; https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint?. > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2022342966
https://github.com/root-project/root/issues/15062#issuecomment-2022342966:1698,Energy Efficiency,efficient,efficient,1698,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon?. Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:; https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint?. > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2022342966
https://github.com/root-project/root/issues/15062#issuecomment-2022342966:317,Integrability,synchroniz,synchronize,317,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon?. Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:; https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint?. > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2022342966
https://github.com/root-project/root/issues/15062#issuecomment-2022342966:1487,Integrability,interface,interfaces,1487,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon?. Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:; https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint?. > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2022342966
https://github.com/root-project/root/issues/15062#issuecomment-2022342966:1571,Integrability,interface,interface,1571,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon?. Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:; https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint?. > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2022342966
https://github.com/root-project/root/issues/15062#issuecomment-2022342966:1738,Integrability,interface,interfaces,1738,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon?. Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:; https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint?. > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2022342966
https://github.com/root-project/root/issues/15062#issuecomment-2022342966:1799,Integrability,message,messages,1799,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon?. Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:; https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint?. > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2022342966
https://github.com/root-project/root/issues/15062#issuecomment-2022342966:1546,Usability,simpl,simplify,1546,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon?. Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:; https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint?. > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2022342966
https://github.com/root-project/root/issues/15062#issuecomment-2022342966:1649,Usability,simpl,simplify,1649,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon?. Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:; https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint?. > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2022342966
https://github.com/root-project/root/issues/15085#issuecomment-2025083053:145,Deployability,upgrade,upgrade,145,"Hi @VanyaBelyaev!. Can you use C++17? That would simplify the code with `if constexpr`, and also work in the ROOT nightlies thanks to our [cppyy upgrade](https://github.com/root-project/root/pull/14507) last week:. ```c++; // the same with functions; template <unsigned int K,unsigned int N>; auto fun_2 (A<N>&) {; if constexpr(K < N) return ""ququ"";; else return K;; ```. If this is not a solution for you and you absolutely need to support the reproducer above, please also open this issue also in [cppyy upstream](https://github.com/wlav/cppyy) since its also present there. > If I am not mistaken sometime ago the situations was just an opposite - standalone template functions were OK, but template methods were not OK... but now I am not 100% sure... What do you mean by ""sometime ago""? I checked with ROOT 6.30, and the situation is the same as with ROOT master, meaning the cppyy upgrade didn't cause any regression in this regard. Anyway, I can't encourage you enough to move to C++17, implementing the patterns that you implement there is a nightmare without `if constexpr` :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085#issuecomment-2025083053
https://github.com/root-project/root/issues/15085#issuecomment-2025083053:887,Deployability,upgrade,upgrade,887,"Hi @VanyaBelyaev!. Can you use C++17? That would simplify the code with `if constexpr`, and also work in the ROOT nightlies thanks to our [cppyy upgrade](https://github.com/root-project/root/pull/14507) last week:. ```c++; // the same with functions; template <unsigned int K,unsigned int N>; auto fun_2 (A<N>&) {; if constexpr(K < N) return ""ququ"";; else return K;; ```. If this is not a solution for you and you absolutely need to support the reproducer above, please also open this issue also in [cppyy upstream](https://github.com/wlav/cppyy) since its also present there. > If I am not mistaken sometime ago the situations was just an opposite - standalone template functions were OK, but template methods were not OK... but now I am not 100% sure... What do you mean by ""sometime ago""? I checked with ROOT 6.30, and the situation is the same as with ROOT master, meaning the cppyy upgrade didn't cause any regression in this regard. Anyway, I can't encourage you enough to move to C++17, implementing the patterns that you implement there is a nightmare without `if constexpr` :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085#issuecomment-2025083053
https://github.com/root-project/root/issues/15085#issuecomment-2025083053:49,Usability,simpl,simplify,49,"Hi @VanyaBelyaev!. Can you use C++17? That would simplify the code with `if constexpr`, and also work in the ROOT nightlies thanks to our [cppyy upgrade](https://github.com/root-project/root/pull/14507) last week:. ```c++; // the same with functions; template <unsigned int K,unsigned int N>; auto fun_2 (A<N>&) {; if constexpr(K < N) return ""ququ"";; else return K;; ```. If this is not a solution for you and you absolutely need to support the reproducer above, please also open this issue also in [cppyy upstream](https://github.com/wlav/cppyy) since its also present there. > If I am not mistaken sometime ago the situations was just an opposite - standalone template functions were OK, but template methods were not OK... but now I am not 100% sure... What do you mean by ""sometime ago""? I checked with ROOT 6.30, and the situation is the same as with ROOT master, meaning the cppyy upgrade didn't cause any regression in this regard. Anyway, I can't encourage you enough to move to C++17, implementing the patterns that you implement there is a nightmare without `if constexpr` :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085#issuecomment-2025083053
https://github.com/root-project/root/issues/15085#issuecomment-2029462023:403,Availability,error,error,403,"dear @guitargeek . It seems that my project has one more problem with new cppyy.; While I am trying to prepare ""easy"" reproducer, I need to ask you some advice/recipe.; The issue is with ""python""-RooAbsPdf. I need to have a RooAbdPdf class with the major; method implemented in python. Previously I have such solution, but with new cppyy; I've got two problems - first, and the drawing phase, there are error messages ; that servers are not redirected. ButI have ""correct"" fit results and the plot. ; And, the main problem is that at the end of the script the program stalls -; likely in ROOT finalization. ; It is not easy to make short, simple & easy reproducer, but I'll try to do it asap.; But, might be it is a known issue? ; What is the ""correct/recommended"" way for implementation of such ""hybrid"" pythonic RooAbdPdf?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085#issuecomment-2029462023
https://github.com/root-project/root/issues/15085#issuecomment-2029462023:409,Integrability,message,messages,409,"dear @guitargeek . It seems that my project has one more problem with new cppyy.; While I am trying to prepare ""easy"" reproducer, I need to ask you some advice/recipe.; The issue is with ""python""-RooAbsPdf. I need to have a RooAbdPdf class with the major; method implemented in python. Previously I have such solution, but with new cppyy; I've got two problems - first, and the drawing phase, there are error messages ; that servers are not redirected. ButI have ""correct"" fit results and the plot. ; And, the main problem is that at the end of the script the program stalls -; likely in ROOT finalization. ; It is not easy to make short, simple & easy reproducer, but I'll try to do it asap.; But, might be it is a known issue? ; What is the ""correct/recommended"" way for implementation of such ""hybrid"" pythonic RooAbdPdf?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085#issuecomment-2029462023
https://github.com/root-project/root/issues/15085#issuecomment-2029462023:639,Usability,simpl,simple,639,"dear @guitargeek . It seems that my project has one more problem with new cppyy.; While I am trying to prepare ""easy"" reproducer, I need to ask you some advice/recipe.; The issue is with ""python""-RooAbsPdf. I need to have a RooAbdPdf class with the major; method implemented in python. Previously I have such solution, but with new cppyy; I've got two problems - first, and the drawing phase, there are error messages ; that servers are not redirected. ButI have ""correct"" fit results and the plot. ; And, the main problem is that at the end of the script the program stalls -; likely in ROOT finalization. ; It is not easy to make short, simple & easy reproducer, but I'll try to do it asap.; But, might be it is a known issue? ; What is the ""correct/recommended"" way for implementation of such ""hybrid"" pythonic RooAbdPdf?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085#issuecomment-2029462023
https://github.com/root-project/root/issues/15085#issuecomment-2036734953:64,Testability,test,test,64,"Dear @guitargeek . ... and I have one more problem with another test no my project. It also hangs.. ; Unforunately it i not so simple to isolate,(that's why I am not reporting this problem; since I have no simple reproducer) but since it also involves C++ virtual functions ; reimplemented in python, migth be the unnderlying reason is the same..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085#issuecomment-2036734953
https://github.com/root-project/root/issues/15085#issuecomment-2036734953:127,Usability,simpl,simple,127,"Dear @guitargeek . ... and I have one more problem with another test no my project. It also hangs.. ; Unforunately it i not so simple to isolate,(that's why I am not reporting this problem; since I have no simple reproducer) but since it also involves C++ virtual functions ; reimplemented in python, migth be the unnderlying reason is the same..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085#issuecomment-2036734953
https://github.com/root-project/root/issues/15085#issuecomment-2036734953:206,Usability,simpl,simple,206,"Dear @guitargeek . ... and I have one more problem with another test no my project. It also hangs.. ; Unforunately it i not so simple to isolate,(that's why I am not reporting this problem; since I have no simple reproducer) but since it also involves C++ virtual functions ; reimplemented in python, migth be the unnderlying reason is the same..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15085#issuecomment-2036734953
https://github.com/root-project/root/pull/15106#issuecomment-2032409208:38,Availability,failure,failure,38,I restarted the jobs to make sure the failure on Windows was a glitch. A test timedout for a reason which was not clear to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15106#issuecomment-2032409208
https://github.com/root-project/root/pull/15106#issuecomment-2032409208:73,Testability,test,test,73,I restarted the jobs to make sure the failure on Windows was a glitch. A test timedout for a reason which was not clear to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15106#issuecomment-2032409208
https://github.com/root-project/root/pull/15106#issuecomment-2032409208:114,Usability,clear,clear,114,I restarted the jobs to make sure the failure on Windows was a glitch. A test timedout for a reason which was not clear to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15106#issuecomment-2032409208
https://github.com/root-project/root/pull/15116#issuecomment-2242991029:425,Security,hash,hashing,425,"While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116#issuecomment-2242991029
https://github.com/root-project/root/pull/15116#issuecomment-2242991029:365,Usability,simpl,simplify,365,"While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116#issuecomment-2242991029
https://github.com/root-project/root/pull/15116#issuecomment-2285578132:659,Integrability,interface,interface,659,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116#issuecomment-2285578132
https://github.com/root-project/root/pull/15116#issuecomment-2285578132:823,Integrability,interface,interface,823,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116#issuecomment-2285578132
https://github.com/root-project/root/pull/15116#issuecomment-2285578132:892,Integrability,interface,interface,892,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116#issuecomment-2285578132
https://github.com/root-project/root/pull/15116#issuecomment-2285578132:427,Security,hash,hashing,427,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116#issuecomment-2285578132
https://github.com/root-project/root/pull/15116#issuecomment-2285578132:367,Usability,simpl,simplify,367,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116#issuecomment-2285578132
https://github.com/root-project/root/pull/15116#issuecomment-2285578132:878,Usability,simpl,simple,878,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15116#issuecomment-2285578132
https://github.com/root-project/root/pull/15149#issuecomment-2039583205:227,Modifiability,variab,variables,227,"> I don't agree with these changes for two reasons:; > ; > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834).; > ; > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149#issuecomment-2039583205
https://github.com/root-project/root/pull/15149#issuecomment-2039583205:438,Safety,detect,detection,438,"> I don't agree with these changes for two reasons:; > ; > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834).; > ; > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149#issuecomment-2039583205
https://github.com/root-project/root/pull/15149#issuecomment-2039583205:617,Usability,clear,clearly,617,"> I don't agree with these changes for two reasons:; > ; > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834).; > ; > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149#issuecomment-2039583205
https://github.com/root-project/root/pull/15149#issuecomment-2039816688:227,Modifiability,variab,variables,227,"> I don't agree with these changes for two reasons:; > ; > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834).; > ; > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though!. I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149#issuecomment-2039816688
https://github.com/root-project/root/pull/15149#issuecomment-2039816688:438,Safety,detect,detection,438,"> I don't agree with these changes for two reasons:; > ; > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834).; > ; > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though!. I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149#issuecomment-2039816688
https://github.com/root-project/root/pull/15149#issuecomment-2039816688:1261,Testability,log,logic,1261,"> I don't agree with these changes for two reasons:; > ; > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834).; > ; > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though!. I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149#issuecomment-2039816688
https://github.com/root-project/root/pull/15149#issuecomment-2039816688:617,Usability,clear,clearly,617,"> I don't agree with these changes for two reasons:; > ; > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834).; > ; > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though!. I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149#issuecomment-2039816688
https://github.com/root-project/root/pull/15149#issuecomment-2039816688:1246,Usability,simpl,simplifies,1246,"> I don't agree with these changes for two reasons:; > ; > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834).; > ; > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though!. I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15149#issuecomment-2039816688
https://github.com/root-project/root/issues/15161#issuecomment-2057616934:276,Integrability,protocol,protocol,276,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:; ```; import cppyy. cppyy.cppdef(""""""\; struct MyStruct {};; MyStruct* fff = nullptr;; """"""). def is_sequence(obj):; try:; obj[0]; return True; except TypeError as e:; print(e); return False. print(is_sequence(cppyy.gbl.fff)); ```; which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057616934
https://github.com/root-project/root/issues/15161#issuecomment-2057616934:698,Integrability,protocol,protocol,698,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:; ```; import cppyy. cppyy.cppdef(""""""\; struct MyStruct {};; MyStruct* fff = nullptr;; """"""). def is_sequence(obj):; try:; obj[0]; return True; except TypeError as e:; print(e); return False. print(is_sequence(cppyy.gbl.fff)); ```; which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057616934
https://github.com/root-project/root/issues/15161#issuecomment-2057616934:1280,Modifiability,extend,extended,1280,"und containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:; ```; import cppyy. cppyy.cppdef(""""""\; struct MyStruct {};; MyStruct* fff = nullptr;; """"""). def is_sequence(obj):; try:; obj[0]; return True; except TypeError as e:; print(e); return False. print(is_sequence(cppyy.gbl.fff)); ```; which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I know that that's not how `PySequence_Check` is supposed to work here, but as already explained, it's not the thing that gives the correct answer in all cases anyhow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057616934
https://github.com/root-project/root/issues/15161#issuecomment-2057616934:1907,Performance,perform,performed,1907,"und containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:; ```; import cppyy. cppyy.cppdef(""""""\; struct MyStruct {};; MyStruct* fff = nullptr;; """"""). def is_sequence(obj):; try:; obj[0]; return True; except TypeError as e:; print(e); return False. print(is_sequence(cppyy.gbl.fff)); ```; which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I know that that's not how `PySequence_Check` is supposed to work here, but as already explained, it's not the thing that gives the correct answer in all cases anyhow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057616934
https://github.com/root-project/root/issues/15161#issuecomment-2057616934:391,Security,access,access,391,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:; ```; import cppyy. cppyy.cppdef(""""""\; struct MyStruct {};; MyStruct* fff = nullptr;; """"""). def is_sequence(obj):; try:; obj[0]; return True; except TypeError as e:; print(e); return False. print(is_sequence(cppyy.gbl.fff)); ```; which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057616934
https://github.com/root-project/root/issues/15161#issuecomment-2057616934:1473,Usability,simpl,simply,1473,"und containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:; ```; import cppyy. cppyy.cppdef(""""""\; struct MyStruct {};; MyStruct* fff = nullptr;; """"""). def is_sequence(obj):; try:; obj[0]; return True; except TypeError as e:; print(e); return False. print(is_sequence(cppyy.gbl.fff)); ```; which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I know that that's not how `PySequence_Check` is supposed to work here, but as already explained, it's not the thing that gives the correct answer in all cases anyhow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057616934
https://github.com/root-project/root/issues/15161#issuecomment-2057955720:1142,Availability,avail,available,1142,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right?. Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```; int; PySequence_Check(PyObject *s); { ; if (PyDict_Check(s)); return 0; ; return Py_TYPE(s)->tp_as_sequence &&; Py_TYPE(s)->tp_as_sequence->sq_item != NULL;; }; ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057955720
https://github.com/root-project/root/issues/15161#issuecomment-2057955720:465,Integrability,depend,depending,465,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right?. Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```; int; PySequence_Check(PyObject *s); { ; if (PyDict_Check(s)); return 0; ; return Py_TYPE(s)->tp_as_sequence &&; Py_TYPE(s)->tp_as_sequence->sq_item != NULL;; }; ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057955720
https://github.com/root-project/root/issues/15161#issuecomment-2057955720:290,Usability,simpl,simply,290,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right?. Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```; int; PySequence_Check(PyObject *s); { ; if (PyDict_Check(s)); return 0; ; return Py_TYPE(s)->tp_as_sequence &&; Py_TYPE(s)->tp_as_sequence->sq_item != NULL;; }; ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057955720
https://github.com/root-project/root/issues/15161#issuecomment-2057955720:1284,Usability,clear,clear,1284,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right?. Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```; int; PySequence_Check(PyObject *s); { ; if (PyDict_Check(s)); return 0; ; return Py_TYPE(s)->tp_as_sequence &&; Py_TYPE(s)->tp_as_sequence->sq_item != NULL;; }; ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057955720
https://github.com/root-project/root/issues/15161#issuecomment-2058191558:1350,Security,expose,expose,1350,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```; import cppyy; import cppyy.types. cppyy.cppdef(""""""\; struct MyStruct1 {};; struct MyStruct2 {; int operator[](int) { return 42; }; };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {; if (CPyCppyy::Instance_Check(obj)) {; PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");; PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");; bool ret = gi1 && gi1 != gi2;; Py_XDECREF(gi2);; Py_XDECREF(gi1);; return ret;; }; return false;; }; """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)); print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)); ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2058191558
https://github.com/root-project/root/issues/15161#issuecomment-2058191558:346,Usability,simpl,simpler,346,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```; import cppyy; import cppyy.types. cppyy.cppdef(""""""\; struct MyStruct1 {};; struct MyStruct2 {; int operator[](int) { return 42; }; };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {; if (CPyCppyy::Instance_Check(obj)) {; PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");; PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");; bool ret = gi1 && gi1 != gi2;; Py_XDECREF(gi2);; Py_XDECREF(gi1);; return ret;; }; return false;; }; """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)); print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)); ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2058191558
https://github.com/root-project/root/issues/15161#issuecomment-2058191558:1168,Usability,simpl,simpler,1168,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```; import cppyy; import cppyy.types. cppyy.cppdef(""""""\; struct MyStruct1 {};; struct MyStruct2 {; int operator[](int) { return 42; }; };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {; if (CPyCppyy::Instance_Check(obj)) {; PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");; PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");; bool ret = gi1 && gi1 != gi2;; Py_XDECREF(gi2);; Py_XDECREF(gi1);; return ret;; }; return false;; }; """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)); print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)); ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2058191558
https://github.com/root-project/root/issues/15161#issuecomment-2058191558:1199,Usability,simpl,simplified,1199,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```; import cppyy; import cppyy.types. cppyy.cppdef(""""""\; struct MyStruct1 {};; struct MyStruct2 {; int operator[](int) { return 42; }; };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {; if (CPyCppyy::Instance_Check(obj)) {; PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");; PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");; bool ret = gi1 && gi1 != gi2;; Py_XDECREF(gi2);; Py_XDECREF(gi1);; return ret;; }; return false;; }; """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)); print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)); ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2058191558
https://github.com/root-project/root/pull/15173#issuecomment-2044568142:179,Usability,clear,clearly,179,"Thanks for the review!. The only tutorial for that feature silently gives wrong results: IMO this is a bugfix, not a new feature. Also considering that there are people who would clearly benefit from this being in 6.32 (analysis grand challenge).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15173#issuecomment-2044568142
https://github.com/root-project/root/issues/15211#issuecomment-2050660691:521,Deployability,install,installed,521,"> My two cents is we should disable the tests . Do you mean short term while we fix the issue or do you mean just ignore the issue?. In this case, unless the tutorial (!) are showing something that the user are very unlikely to do, I think we need to go further and make sure that this same crash/problem won't happen to the user. . > (and stop using Jenkins for PR builds). I agree ... except that they seems to be probing an area of the phase space we are not testing elsewhere. Note: if the issue is as simple as ""the installed version of some dependent product is too old so there is no point in fixing the problem"", we still need to fix the `CMake` configuration to fail when asked to use those older version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2050660691
https://github.com/root-project/root/issues/15211#issuecomment-2050660691:654,Deployability,configurat,configuration,654,"> My two cents is we should disable the tests . Do you mean short term while we fix the issue or do you mean just ignore the issue?. In this case, unless the tutorial (!) are showing something that the user are very unlikely to do, I think we need to go further and make sure that this same crash/problem won't happen to the user. . > (and stop using Jenkins for PR builds). I agree ... except that they seems to be probing an area of the phase space we are not testing elsewhere. Note: if the issue is as simple as ""the installed version of some dependent product is too old so there is no point in fixing the problem"", we still need to fix the `CMake` configuration to fail when asked to use those older version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2050660691
https://github.com/root-project/root/issues/15211#issuecomment-2050660691:547,Integrability,depend,dependent,547,"> My two cents is we should disable the tests . Do you mean short term while we fix the issue or do you mean just ignore the issue?. In this case, unless the tutorial (!) are showing something that the user are very unlikely to do, I think we need to go further and make sure that this same crash/problem won't happen to the user. . > (and stop using Jenkins for PR builds). I agree ... except that they seems to be probing an area of the phase space we are not testing elsewhere. Note: if the issue is as simple as ""the installed version of some dependent product is too old so there is no point in fixing the problem"", we still need to fix the `CMake` configuration to fail when asked to use those older version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2050660691
https://github.com/root-project/root/issues/15211#issuecomment-2050660691:654,Modifiability,config,configuration,654,"> My two cents is we should disable the tests . Do you mean short term while we fix the issue or do you mean just ignore the issue?. In this case, unless the tutorial (!) are showing something that the user are very unlikely to do, I think we need to go further and make sure that this same crash/problem won't happen to the user. . > (and stop using Jenkins for PR builds). I agree ... except that they seems to be probing an area of the phase space we are not testing elsewhere. Note: if the issue is as simple as ""the installed version of some dependent product is too old so there is no point in fixing the problem"", we still need to fix the `CMake` configuration to fail when asked to use those older version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2050660691
https://github.com/root-project/root/issues/15211#issuecomment-2050660691:40,Testability,test,tests,40,"> My two cents is we should disable the tests . Do you mean short term while we fix the issue or do you mean just ignore the issue?. In this case, unless the tutorial (!) are showing something that the user are very unlikely to do, I think we need to go further and make sure that this same crash/problem won't happen to the user. . > (and stop using Jenkins for PR builds). I agree ... except that they seems to be probing an area of the phase space we are not testing elsewhere. Note: if the issue is as simple as ""the installed version of some dependent product is too old so there is no point in fixing the problem"", we still need to fix the `CMake` configuration to fail when asked to use those older version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2050660691
https://github.com/root-project/root/issues/15211#issuecomment-2050660691:462,Testability,test,testing,462,"> My two cents is we should disable the tests . Do you mean short term while we fix the issue or do you mean just ignore the issue?. In this case, unless the tutorial (!) are showing something that the user are very unlikely to do, I think we need to go further and make sure that this same crash/problem won't happen to the user. . > (and stop using Jenkins for PR builds). I agree ... except that they seems to be probing an area of the phase space we are not testing elsewhere. Note: if the issue is as simple as ""the installed version of some dependent product is too old so there is no point in fixing the problem"", we still need to fix the `CMake` configuration to fail when asked to use those older version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2050660691
https://github.com/root-project/root/issues/15211#issuecomment-2050660691:506,Usability,simpl,simple,506,"> My two cents is we should disable the tests . Do you mean short term while we fix the issue or do you mean just ignore the issue?. In this case, unless the tutorial (!) are showing something that the user are very unlikely to do, I think we need to go further and make sure that this same crash/problem won't happen to the user. . > (and stop using Jenkins for PR builds). I agree ... except that they seems to be probing an area of the phase space we are not testing elsewhere. Note: if the issue is as simple as ""the installed version of some dependent product is too old so there is no point in fixing the problem"", we still need to fix the `CMake` configuration to fail when asked to use those older version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2050660691
https://github.com/root-project/root/issues/15212#issuecomment-2052136735:368,Deployability,configurat,configuration,368,"> If the developer wants to also run Python-based unittests, yes. I don't see any issue with that. Humm .. I thought a bare `ctest` would run it, so it is the opposite, one would know to add a `-E ` to ignore them. > No, they are not. Well they ""appear"" to be because of the test. The jenkins node was configured however it was (and the user could have the exact same configuration) and a run of `ctest` fails and ""clearly"" states that those are requirements :). From my limited view point it seems that we have:; * python support is enabled ; * some optional component is not installed (and I am assuming that the related features are disabled and the actual tests related to those features are not run); * a test still complains that those optional component are not installed. To make an analogy: this sound like we would have the situations:; * `X11` support is enabled.; * The `OpenGL` libraries (`MesaGL`) is not installed and support for `OpenGL` is disabled, no test tries to run `OpenGL` code); * Still ctest fails noting that `MesaGL` is in the list of 'requirements'. How does my analogy fails/differs from the `xgboost` case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2052136735
https://github.com/root-project/root/issues/15212#issuecomment-2052136735:577,Deployability,install,installed,577,"> If the developer wants to also run Python-based unittests, yes. I don't see any issue with that. Humm .. I thought a bare `ctest` would run it, so it is the opposite, one would know to add a `-E ` to ignore them. > No, they are not. Well they ""appear"" to be because of the test. The jenkins node was configured however it was (and the user could have the exact same configuration) and a run of `ctest` fails and ""clearly"" states that those are requirements :). From my limited view point it seems that we have:; * python support is enabled ; * some optional component is not installed (and I am assuming that the related features are disabled and the actual tests related to those features are not run); * a test still complains that those optional component are not installed. To make an analogy: this sound like we would have the situations:; * `X11` support is enabled.; * The `OpenGL` libraries (`MesaGL`) is not installed and support for `OpenGL` is disabled, no test tries to run `OpenGL` code); * Still ctest fails noting that `MesaGL` is in the list of 'requirements'. How does my analogy fails/differs from the `xgboost` case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2052136735
https://github.com/root-project/root/issues/15212#issuecomment-2052136735:769,Deployability,install,installed,769,"> If the developer wants to also run Python-based unittests, yes. I don't see any issue with that. Humm .. I thought a bare `ctest` would run it, so it is the opposite, one would know to add a `-E ` to ignore them. > No, they are not. Well they ""appear"" to be because of the test. The jenkins node was configured however it was (and the user could have the exact same configuration) and a run of `ctest` fails and ""clearly"" states that those are requirements :). From my limited view point it seems that we have:; * python support is enabled ; * some optional component is not installed (and I am assuming that the related features are disabled and the actual tests related to those features are not run); * a test still complains that those optional component are not installed. To make an analogy: this sound like we would have the situations:; * `X11` support is enabled.; * The `OpenGL` libraries (`MesaGL`) is not installed and support for `OpenGL` is disabled, no test tries to run `OpenGL` code); * Still ctest fails noting that `MesaGL` is in the list of 'requirements'. How does my analogy fails/differs from the `xgboost` case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2052136735
https://github.com/root-project/root/issues/15212#issuecomment-2052136735:919,Deployability,install,installed,919,"> If the developer wants to also run Python-based unittests, yes. I don't see any issue with that. Humm .. I thought a bare `ctest` would run it, so it is the opposite, one would know to add a `-E ` to ignore them. > No, they are not. Well they ""appear"" to be because of the test. The jenkins node was configured however it was (and the user could have the exact same configuration) and a run of `ctest` fails and ""clearly"" states that those are requirements :). From my limited view point it seems that we have:; * python support is enabled ; * some optional component is not installed (and I am assuming that the related features are disabled and the actual tests related to those features are not run); * a test still complains that those optional component are not installed. To make an analogy: this sound like we would have the situations:; * `X11` support is enabled.; * The `OpenGL` libraries (`MesaGL`) is not installed and support for `OpenGL` is disabled, no test tries to run `OpenGL` code); * Still ctest fails noting that `MesaGL` is in the list of 'requirements'. How does my analogy fails/differs from the `xgboost` case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2052136735
https://github.com/root-project/root/issues/15212#issuecomment-2052136735:302,Modifiability,config,configured,302,"> If the developer wants to also run Python-based unittests, yes. I don't see any issue with that. Humm .. I thought a bare `ctest` would run it, so it is the opposite, one would know to add a `-E ` to ignore them. > No, they are not. Well they ""appear"" to be because of the test. The jenkins node was configured however it was (and the user could have the exact same configuration) and a run of `ctest` fails and ""clearly"" states that those are requirements :). From my limited view point it seems that we have:; * python support is enabled ; * some optional component is not installed (and I am assuming that the related features are disabled and the actual tests related to those features are not run); * a test still complains that those optional component are not installed. To make an analogy: this sound like we would have the situations:; * `X11` support is enabled.; * The `OpenGL` libraries (`MesaGL`) is not installed and support for `OpenGL` is disabled, no test tries to run `OpenGL` code); * Still ctest fails noting that `MesaGL` is in the list of 'requirements'. How does my analogy fails/differs from the `xgboost` case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2052136735
https://github.com/root-project/root/issues/15212#issuecomment-2052136735:368,Modifiability,config,configuration,368,"> If the developer wants to also run Python-based unittests, yes. I don't see any issue with that. Humm .. I thought a bare `ctest` would run it, so it is the opposite, one would know to add a `-E ` to ignore them. > No, they are not. Well they ""appear"" to be because of the test. The jenkins node was configured however it was (and the user could have the exact same configuration) and a run of `ctest` fails and ""clearly"" states that those are requirements :). From my limited view point it seems that we have:; * python support is enabled ; * some optional component is not installed (and I am assuming that the related features are disabled and the actual tests related to those features are not run); * a test still complains that those optional component are not installed. To make an analogy: this sound like we would have the situations:; * `X11` support is enabled.; * The `OpenGL` libraries (`MesaGL`) is not installed and support for `OpenGL` is disabled, no test tries to run `OpenGL` code); * Still ctest fails noting that `MesaGL` is in the list of 'requirements'. How does my analogy fails/differs from the `xgboost` case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2052136735
https://github.com/root-project/root/issues/15212#issuecomment-2052136735:275,Testability,test,test,275,"> If the developer wants to also run Python-based unittests, yes. I don't see any issue with that. Humm .. I thought a bare `ctest` would run it, so it is the opposite, one would know to add a `-E ` to ignore them. > No, they are not. Well they ""appear"" to be because of the test. The jenkins node was configured however it was (and the user could have the exact same configuration) and a run of `ctest` fails and ""clearly"" states that those are requirements :). From my limited view point it seems that we have:; * python support is enabled ; * some optional component is not installed (and I am assuming that the related features are disabled and the actual tests related to those features are not run); * a test still complains that those optional component are not installed. To make an analogy: this sound like we would have the situations:; * `X11` support is enabled.; * The `OpenGL` libraries (`MesaGL`) is not installed and support for `OpenGL` is disabled, no test tries to run `OpenGL` code); * Still ctest fails noting that `MesaGL` is in the list of 'requirements'. How does my analogy fails/differs from the `xgboost` case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2052136735
https://github.com/root-project/root/issues/15212#issuecomment-2052136735:660,Testability,test,tests,660,"> If the developer wants to also run Python-based unittests, yes. I don't see any issue with that. Humm .. I thought a bare `ctest` would run it, so it is the opposite, one would know to add a `-E ` to ignore them. > No, they are not. Well they ""appear"" to be because of the test. The jenkins node was configured however it was (and the user could have the exact same configuration) and a run of `ctest` fails and ""clearly"" states that those are requirements :). From my limited view point it seems that we have:; * python support is enabled ; * some optional component is not installed (and I am assuming that the related features are disabled and the actual tests related to those features are not run); * a test still complains that those optional component are not installed. To make an analogy: this sound like we would have the situations:; * `X11` support is enabled.; * The `OpenGL` libraries (`MesaGL`) is not installed and support for `OpenGL` is disabled, no test tries to run `OpenGL` code); * Still ctest fails noting that `MesaGL` is in the list of 'requirements'. How does my analogy fails/differs from the `xgboost` case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2052136735
https://github.com/root-project/root/issues/15212#issuecomment-2052136735:710,Testability,test,test,710,"> If the developer wants to also run Python-based unittests, yes. I don't see any issue with that. Humm .. I thought a bare `ctest` would run it, so it is the opposite, one would know to add a `-E ` to ignore them. > No, they are not. Well they ""appear"" to be because of the test. The jenkins node was configured however it was (and the user could have the exact same configuration) and a run of `ctest` fails and ""clearly"" states that those are requirements :). From my limited view point it seems that we have:; * python support is enabled ; * some optional component is not installed (and I am assuming that the related features are disabled and the actual tests related to those features are not run); * a test still complains that those optional component are not installed. To make an analogy: this sound like we would have the situations:; * `X11` support is enabled.; * The `OpenGL` libraries (`MesaGL`) is not installed and support for `OpenGL` is disabled, no test tries to run `OpenGL` code); * Still ctest fails noting that `MesaGL` is in the list of 'requirements'. How does my analogy fails/differs from the `xgboost` case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2052136735
https://github.com/root-project/root/issues/15212#issuecomment-2052136735:970,Testability,test,test,970,"> If the developer wants to also run Python-based unittests, yes. I don't see any issue with that. Humm .. I thought a bare `ctest` would run it, so it is the opposite, one would know to add a `-E ` to ignore them. > No, they are not. Well they ""appear"" to be because of the test. The jenkins node was configured however it was (and the user could have the exact same configuration) and a run of `ctest` fails and ""clearly"" states that those are requirements :). From my limited view point it seems that we have:; * python support is enabled ; * some optional component is not installed (and I am assuming that the related features are disabled and the actual tests related to those features are not run); * a test still complains that those optional component are not installed. To make an analogy: this sound like we would have the situations:; * `X11` support is enabled.; * The `OpenGL` libraries (`MesaGL`) is not installed and support for `OpenGL` is disabled, no test tries to run `OpenGL` code); * Still ctest fails noting that `MesaGL` is in the list of 'requirements'. How does my analogy fails/differs from the `xgboost` case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2052136735
https://github.com/root-project/root/issues/15212#issuecomment-2052136735:415,Usability,clear,clearly,415,"> If the developer wants to also run Python-based unittests, yes. I don't see any issue with that. Humm .. I thought a bare `ctest` would run it, so it is the opposite, one would know to add a `-E ` to ignore them. > No, they are not. Well they ""appear"" to be because of the test. The jenkins node was configured however it was (and the user could have the exact same configuration) and a run of `ctest` fails and ""clearly"" states that those are requirements :). From my limited view point it seems that we have:; * python support is enabled ; * some optional component is not installed (and I am assuming that the related features are disabled and the actual tests related to those features are not run); * a test still complains that those optional component are not installed. To make an analogy: this sound like we would have the situations:; * `X11` support is enabled.; * The `OpenGL` libraries (`MesaGL`) is not installed and support for `OpenGL` is disabled, no test tries to run `OpenGL` code); * Still ctest fails noting that `MesaGL` is in the list of 'requirements'. How does my analogy fails/differs from the `xgboost` case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2052136735
https://github.com/root-project/root/pull/15227#issuecomment-2053932864:39,Usability,simpl,simple-function-working-with-,39,Following https://root-forum.cern.ch/t/simple-function-working-with-6-28-04-but-not-with-6-30-04/58975,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15227#issuecomment-2053932864
https://github.com/root-project/root/pull/15237#issuecomment-2056871254:44,Testability,test,test,44,Can you just add the two commits fixing the test? I have #15236 adding already xgboost and scikit-learn,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15237#issuecomment-2056871254
https://github.com/root-project/root/pull/15237#issuecomment-2056871254:98,Usability,learn,learn,98,Can you just add the two commits fixing the test? I have #15236 adding already xgboost and scikit-learn,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15237#issuecomment-2056871254
https://github.com/root-project/root/pull/15242#issuecomment-2058569594:303,Usability,simpl,simple,303,"Just to confirm: compilation successful for me with the suggested edits to provide the libbsd root dir, which then also links the library. I do hardcode the filename in my suggestion, which I'm not sure will always work, but perhaps we don't need to perfect this if it solves the issue for CentOS 7 + a simple custom build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15242#issuecomment-2058569594
https://github.com/root-project/root/pull/15246#issuecomment-2059405769:207,Usability,clear,clearer,207,"> Is the intention perhaps that for all other `TFile` subclasses than `TDavixFiles` and `TNetXNGFiles` (and `TFile`) itself the `RRawFileTFile` is used?. Yes, that's what I want to say. I will think about a clearer formulation... (or maybe you have a proposal?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15246#issuecomment-2059405769
https://github.com/root-project/root/pull/15246#issuecomment-2068873320:122,Integrability,message,message,122,"@makortel apparently the technical term that I was looking for is ""dynamic type"". I reworded the documentation and commit message accordingly, can you have another look if it's clear(er) now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15246#issuecomment-2068873320
https://github.com/root-project/root/pull/15246#issuecomment-2068873320:177,Usability,clear,clear,177,"@makortel apparently the technical term that I was looking for is ""dynamic type"". I reworded the documentation and commit message accordingly, can you have another look if it's clear(er) now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15246#issuecomment-2068873320
https://github.com/root-project/root/pull/15246#issuecomment-2069794311:42,Integrability,message,message,42,"> I reworded the documentation and commit message accordingly, can you have another look if it's clear(er) now?. To me the description in ""Ownership Model"" section is now clear. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15246#issuecomment-2069794311
https://github.com/root-project/root/pull/15246#issuecomment-2069794311:97,Usability,clear,clear,97,"> I reworded the documentation and commit message accordingly, can you have another look if it's clear(er) now?. To me the description in ""Ownership Model"" section is now clear. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15246#issuecomment-2069794311
https://github.com/root-project/root/pull/15246#issuecomment-2069794311:171,Usability,clear,clear,171,"> I reworded the documentation and commit message accordingly, can you have another look if it's clear(er) now?. To me the description in ""Ownership Model"" section is now clear. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15246#issuecomment-2069794311
https://github.com/root-project/root/pull/15306#issuecomment-2069022427:106,Integrability,depend,dependencies,106,From the test results I learned that we already have a mechanism in ROOT to mark Python non-optional test dependencies:; https://github.com/root-project/root/commit/2917c6e7153c426507227d9fdba1937fca7535aa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15306#issuecomment-2069022427
https://github.com/root-project/root/pull/15306#issuecomment-2069022427:9,Testability,test,test,9,From the test results I learned that we already have a mechanism in ROOT to mark Python non-optional test dependencies:; https://github.com/root-project/root/commit/2917c6e7153c426507227d9fdba1937fca7535aa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15306#issuecomment-2069022427
https://github.com/root-project/root/pull/15306#issuecomment-2069022427:101,Testability,test,test,101,From the test results I learned that we already have a mechanism in ROOT to mark Python non-optional test dependencies:; https://github.com/root-project/root/commit/2917c6e7153c426507227d9fdba1937fca7535aa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15306#issuecomment-2069022427
https://github.com/root-project/root/pull/15306#issuecomment-2069022427:24,Usability,learn,learned,24,From the test results I learned that we already have a mechanism in ROOT to mark Python non-optional test dependencies:; https://github.com/root-project/root/commit/2917c6e7153c426507227d9fdba1937fca7535aa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15306#issuecomment-2069022427
https://github.com/root-project/root/issues/15318#issuecomment-2152689664:296,Deployability,install,installed,296,"that will be a challenge. We see this after we package ROOT in an RPM. I can try to setup something but not on lxplus and it will take time. . Meanwhile, could you tell me if there is a way to force ROOT to look for the modulemap.module in a given place ? ; Why would ROOT not find the modulemap installed in an item of `ROOT_INCLUDE_PATH` ? . I can reproduce the issue on a local setup by simply deleting the `module.modulemap`. So it is really just ROOT not finding the module.modulemap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15318#issuecomment-2152689664
https://github.com/root-project/root/issues/15318#issuecomment-2152689664:390,Usability,simpl,simply,390,"that will be a challenge. We see this after we package ROOT in an RPM. I can try to setup something but not on lxplus and it will take time. . Meanwhile, could you tell me if there is a way to force ROOT to look for the modulemap.module in a given place ? ; Why would ROOT not find the modulemap installed in an item of `ROOT_INCLUDE_PATH` ? . I can reproduce the issue on a local setup by simply deleting the `module.modulemap`. So it is really just ROOT not finding the module.modulemap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15318#issuecomment-2152689664
https://github.com/root-project/root/issues/15336#issuecomment-2159926070:40,Usability,feedback,feedback,40,You're very welcome! And thanks for the feedback!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15336#issuecomment-2159926070
https://github.com/root-project/root/pull/15355#issuecomment-2082181170:197,Integrability,depend,dependencies,197,"@pcanal right, that seems a possible way forward. That said, it absolutely requires our own `FindGTest.cmake` while I personally think we should rather move towards standard ways of detecting ROOT dependencies (cf the saga around XRootD). For that reason, I would prefer to *not* make the setup more complicated in this PR than it already is - I argue that removing the dead compatibility code is simply acknowledging the fact that we silently depend on GTest 1.10 already.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15355#issuecomment-2082181170
https://github.com/root-project/root/pull/15355#issuecomment-2082181170:444,Integrability,depend,depend,444,"@pcanal right, that seems a possible way forward. That said, it absolutely requires our own `FindGTest.cmake` while I personally think we should rather move towards standard ways of detecting ROOT dependencies (cf the saga around XRootD). For that reason, I would prefer to *not* make the setup more complicated in this PR than it already is - I argue that removing the dead compatibility code is simply acknowledging the fact that we silently depend on GTest 1.10 already.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15355#issuecomment-2082181170
https://github.com/root-project/root/pull/15355#issuecomment-2082181170:182,Safety,detect,detecting,182,"@pcanal right, that seems a possible way forward. That said, it absolutely requires our own `FindGTest.cmake` while I personally think we should rather move towards standard ways of detecting ROOT dependencies (cf the saga around XRootD). For that reason, I would prefer to *not* make the setup more complicated in this PR than it already is - I argue that removing the dead compatibility code is simply acknowledging the fact that we silently depend on GTest 1.10 already.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15355#issuecomment-2082181170
https://github.com/root-project/root/pull/15355#issuecomment-2082181170:397,Usability,simpl,simply,397,"@pcanal right, that seems a possible way forward. That said, it absolutely requires our own `FindGTest.cmake` while I personally think we should rather move towards standard ways of detecting ROOT dependencies (cf the saga around XRootD). For that reason, I would prefer to *not* make the setup more complicated in this PR than it already is - I argue that removing the dead compatibility code is simply acknowledging the fact that we silently depend on GTest 1.10 already.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15355#issuecomment-2082181170
https://github.com/root-project/root/pull/15368#issuecomment-2083610710:15,Testability,test,test,15,I also think a test would be good. @vgvassilev in which subdirectory would you put the simple macro which was crashing in https://github.com/root-project/roottest/tree/master/cling ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15368#issuecomment-2083610710
https://github.com/root-project/root/pull/15368#issuecomment-2083610710:87,Usability,simpl,simple,87,I also think a test would be good. @vgvassilev in which subdirectory would you put the simple macro which was crashing in https://github.com/root-project/roottest/tree/master/cling ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15368#issuecomment-2083610710
https://github.com/root-project/root/pull/15376#issuecomment-2099245931:36,Availability,failure,failure,36,"All green now, besides an unrelated failure that @egpbos should learn about",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15376#issuecomment-2099245931
https://github.com/root-project/root/pull/15376#issuecomment-2099245931:4,Energy Efficiency,green,green,4,"All green now, besides an unrelated failure that @egpbos should learn about",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15376#issuecomment-2099245931
https://github.com/root-project/root/pull/15376#issuecomment-2099245931:64,Usability,learn,learn,64,"All green now, besides an unrelated failure that @egpbos should learn about",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15376#issuecomment-2099245931
https://github.com/root-project/root/pull/15377#issuecomment-2084946546:200,Security,hash,hash,200,"Is mangling supposed to address those characters too? Maybe there is something simple which could be done for names of objects in ROOT, for example keeping only letters and numbers and postponing the hash of the name? In the end we need this for autogenerated code, but maybe I am wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15377#issuecomment-2084946546
https://github.com/root-project/root/pull/15377#issuecomment-2084946546:79,Usability,simpl,simple,79,"Is mangling supposed to address those characters too? Maybe there is something simple which could be done for names of objects in ROOT, for example keeping only letters and numbers and postponing the hash of the name? In the end we need this for autogenerated code, but maybe I am wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15377#issuecomment-2084946546
https://github.com/root-project/root/pull/15386#issuecomment-2088090746:25,Testability,test,testing,25,It could be as simple as testing the full function with a new unit here https://github.com/root-project/root/blob/master/core/clingutils/test/TClingUtilsTests.cxx,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15386#issuecomment-2088090746
https://github.com/root-project/root/pull/15386#issuecomment-2088090746:137,Testability,test,test,137,It could be as simple as testing the full function with a new unit here https://github.com/root-project/root/blob/master/core/clingutils/test/TClingUtilsTests.cxx,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15386#issuecomment-2088090746
https://github.com/root-project/root/pull/15386#issuecomment-2088090746:15,Usability,simpl,simple,15,It could be as simple as testing the full function with a new unit here https://github.com/root-project/root/blob/master/core/clingutils/test/TClingUtilsTests.cxx,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15386#issuecomment-2088090746
https://github.com/root-project/root/pull/15398#issuecomment-2089926061:33,Usability,simpl,simplify,33,"cc: @devajithvs, that might also simplify your migration efforts a little..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15398#issuecomment-2089926061
https://github.com/root-project/root/pull/15404#issuecomment-2092457591:713,Deployability,install,installing,713,"There is no change for the user, but for packaging it makes things easier. See also https://github.com/root-project/root/pull/15402. Actually this is still a draft PR,I first wanted to see if all platforms are happy with the C++ changes. The next step is to move the `JupyROOT` submodule to `ROOT.JupyROOT`. Also this will have no effect on the user, because the user never imports this module themselves: it is implicitly imported by `ROOT` in a notebook environment. The overall goal of these PRs is to have a single python module (`ROOT`) instead of the current 4 (ROOT, JsMVA, JupyROOT, and DistRDF). For packagers, and for Root as a Python package in general, that would make things clearer and easier: from installing root, you get the module `ROOT`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15404#issuecomment-2092457591
https://github.com/root-project/root/pull/15404#issuecomment-2092457591:688,Usability,clear,clearer,688,"There is no change for the user, but for packaging it makes things easier. See also https://github.com/root-project/root/pull/15402. Actually this is still a draft PR,I first wanted to see if all platforms are happy with the C++ changes. The next step is to move the `JupyROOT` submodule to `ROOT.JupyROOT`. Also this will have no effect on the user, because the user never imports this module themselves: it is implicitly imported by `ROOT` in a notebook environment. The overall goal of these PRs is to have a single python module (`ROOT`) instead of the current 4 (ROOT, JsMVA, JupyROOT, and DistRDF). For packagers, and for Root as a Python package in general, that would make things clearer and easier: from installing root, you get the module `ROOT`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15404#issuecomment-2092457591
https://github.com/root-project/root/pull/15411#issuecomment-2093332127:31,Usability,simpl,simple,31,@linev Please check. This is a simple backport with change in digits rendering in RenderCore.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15411#issuecomment-2093332127
https://github.com/root-project/root/pull/15438#issuecomment-2099260382:16,Usability,learn,learning,16,Interesting for learning what would happen.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15438#issuecomment-2099260382
https://github.com/root-project/root/pull/15469#issuecomment-2147872231:68,Usability,intuit,intuition,68,"Maybe we uncovered a problem with the TString move constructor? Any intuition, @pcanal?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2147872231
https://github.com/root-project/root/pull/15469#issuecomment-2150303383:431,Deployability,update,updated,431,"So this problem has been known for 5 years :( https://github.com/root-project/root/pull/4320 but we manage to indeed lose track of it. That PR used the following more concise pattern:; ```; TView() {} // NOLINT: not allowed to use = default because of TObject::kIsOnHeap detection, see ROOT-10300; ```; where both the `NOLINT` is indeed useful to avoid spurious tool recommendation and the wording was clear but should probably be updated (`ROOT-10300` is a ticket number in the JIRA instance which is now read-only). It would be good to add some wording in the `TObject` documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2150303383
https://github.com/root-project/root/pull/15469#issuecomment-2150303383:271,Safety,detect,detection,271,"So this problem has been known for 5 years :( https://github.com/root-project/root/pull/4320 but we manage to indeed lose track of it. That PR used the following more concise pattern:; ```; TView() {} // NOLINT: not allowed to use = default because of TObject::kIsOnHeap detection, see ROOT-10300; ```; where both the `NOLINT` is indeed useful to avoid spurious tool recommendation and the wording was clear but should probably be updated (`ROOT-10300` is a ticket number in the JIRA instance which is now read-only). It would be good to add some wording in the `TObject` documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2150303383
https://github.com/root-project/root/pull/15469#issuecomment-2150303383:347,Safety,avoid,avoid,347,"So this problem has been known for 5 years :( https://github.com/root-project/root/pull/4320 but we manage to indeed lose track of it. That PR used the following more concise pattern:; ```; TView() {} // NOLINT: not allowed to use = default because of TObject::kIsOnHeap detection, see ROOT-10300; ```; where both the `NOLINT` is indeed useful to avoid spurious tool recommendation and the wording was clear but should probably be updated (`ROOT-10300` is a ticket number in the JIRA instance which is now read-only). It would be good to add some wording in the `TObject` documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2150303383
https://github.com/root-project/root/pull/15469#issuecomment-2150303383:402,Usability,clear,clear,402,"So this problem has been known for 5 years :( https://github.com/root-project/root/pull/4320 but we manage to indeed lose track of it. That PR used the following more concise pattern:; ```; TView() {} // NOLINT: not allowed to use = default because of TObject::kIsOnHeap detection, see ROOT-10300; ```; where both the `NOLINT` is indeed useful to avoid spurious tool recommendation and the wording was clear but should probably be updated (`ROOT-10300` is a ticket number in the JIRA instance which is now read-only). It would be good to add some wording in the `TObject` documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2150303383
https://github.com/root-project/root/pull/15469#issuecomment-2151703325:644,Modifiability,maintainab,maintainable,644,"> For the `TObject` documentation I would add something along the line of:; > ; > ```; > Classes derived from `TObject` can not use the `= default` syntax for their constructor as some compilers implement optimizations that prevents the `TObject::kIsOnHeap` detection mechanism from working properly.; > ```. Can we move this into another PR? (I would suggest you opening it), because it's still not clear whether the main target of the current PR is actually desired or not. And TBH, I don't have the resources to perform a proper benchmark, nor do I have good other arguments why the proposed style is better (for example more readable, more maintainable, etc).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2151703325
https://github.com/root-project/root/pull/15469#issuecomment-2151703325:205,Performance,optimiz,optimizations,205,"> For the `TObject` documentation I would add something along the line of:; > ; > ```; > Classes derived from `TObject` can not use the `= default` syntax for their constructor as some compilers implement optimizations that prevents the `TObject::kIsOnHeap` detection mechanism from working properly.; > ```. Can we move this into another PR? (I would suggest you opening it), because it's still not clear whether the main target of the current PR is actually desired or not. And TBH, I don't have the resources to perform a proper benchmark, nor do I have good other arguments why the proposed style is better (for example more readable, more maintainable, etc).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2151703325
https://github.com/root-project/root/pull/15469#issuecomment-2151703325:515,Performance,perform,perform,515,"> For the `TObject` documentation I would add something along the line of:; > ; > ```; > Classes derived from `TObject` can not use the `= default` syntax for their constructor as some compilers implement optimizations that prevents the `TObject::kIsOnHeap` detection mechanism from working properly.; > ```. Can we move this into another PR? (I would suggest you opening it), because it's still not clear whether the main target of the current PR is actually desired or not. And TBH, I don't have the resources to perform a proper benchmark, nor do I have good other arguments why the proposed style is better (for example more readable, more maintainable, etc).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2151703325
https://github.com/root-project/root/pull/15469#issuecomment-2151703325:258,Safety,detect,detection,258,"> For the `TObject` documentation I would add something along the line of:; > ; > ```; > Classes derived from `TObject` can not use the `= default` syntax for their constructor as some compilers implement optimizations that prevents the `TObject::kIsOnHeap` detection mechanism from working properly.; > ```. Can we move this into another PR? (I would suggest you opening it), because it's still not clear whether the main target of the current PR is actually desired or not. And TBH, I don't have the resources to perform a proper benchmark, nor do I have good other arguments why the proposed style is better (for example more readable, more maintainable, etc).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2151703325
https://github.com/root-project/root/pull/15469#issuecomment-2151703325:532,Testability,benchmark,benchmark,532,"> For the `TObject` documentation I would add something along the line of:; > ; > ```; > Classes derived from `TObject` can not use the `= default` syntax for their constructor as some compilers implement optimizations that prevents the `TObject::kIsOnHeap` detection mechanism from working properly.; > ```. Can we move this into another PR? (I would suggest you opening it), because it's still not clear whether the main target of the current PR is actually desired or not. And TBH, I don't have the resources to perform a proper benchmark, nor do I have good other arguments why the proposed style is better (for example more readable, more maintainable, etc).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2151703325
https://github.com/root-project/root/pull/15469#issuecomment-2151703325:400,Usability,clear,clear,400,"> For the `TObject` documentation I would add something along the line of:; > ; > ```; > Classes derived from `TObject` can not use the `= default` syntax for their constructor as some compilers implement optimizations that prevents the `TObject::kIsOnHeap` detection mechanism from working properly.; > ```. Can we move this into another PR? (I would suggest you opening it), because it's still not clear whether the main target of the current PR is actually desired or not. And TBH, I don't have the resources to perform a proper benchmark, nor do I have good other arguments why the proposed style is better (for example more readable, more maintainable, etc).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2151703325
https://github.com/root-project/root/issues/15473#issuecomment-2258724184:39,Usability,simpl,simple,39,"@silverweed could you please propose a simple pr checking for the mold version? I know it's perhaps a niche use case, but also restoring an optimal user experience for it seems rather cheap...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15473#issuecomment-2258724184
https://github.com/root-project/root/issues/15473#issuecomment-2258724184:148,Usability,user experience,user experience,148,"@silverweed could you please propose a simple pr checking for the mold version? I know it's perhaps a niche use case, but also restoring an optimal user experience for it seems rather cheap...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15473#issuecomment-2258724184
https://github.com/root-project/root/issues/15474#issuecomment-2120092013:42,Usability,simpl,simple,42,"Thanks. I do not understand. I proposed a simple reproducer that illustrates a bad user experience, very bad, that makes the system unusable. What is the strategy to fix this bug?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474#issuecomment-2120092013
https://github.com/root-project/root/issues/15474#issuecomment-2120092013:83,Usability,user experience,user experience,83,"Thanks. I do not understand. I proposed a simple reproducer that illustrates a bad user experience, very bad, that makes the system unusable. What is the strategy to fix this bug?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15474#issuecomment-2120092013
https://github.com/root-project/root/pull/15501#issuecomment-2120812575:21,Energy Efficiency,reduce,reduce,21,"> I suspect we could reduce the code of the landau pullback quite a lot. I'm not sure there is still room for much improvement: I have already simplified a lot in my initial PR. Maybe we can merge it, and if you and @vaithak feel like simplifying the pullbacks manually, you can do so in a follow-up PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15501#issuecomment-2120812575
https://github.com/root-project/root/pull/15501#issuecomment-2120812575:143,Usability,simpl,simplified,143,"> I suspect we could reduce the code of the landau pullback quite a lot. I'm not sure there is still room for much improvement: I have already simplified a lot in my initial PR. Maybe we can merge it, and if you and @vaithak feel like simplifying the pullbacks manually, you can do so in a follow-up PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15501#issuecomment-2120812575
https://github.com/root-project/root/pull/15501#issuecomment-2120812575:235,Usability,simpl,simplifying,235,"> I suspect we could reduce the code of the landau pullback quite a lot. I'm not sure there is still room for much improvement: I have already simplified a lot in my initial PR. Maybe we can merge it, and if you and @vaithak feel like simplifying the pullbacks manually, you can do so in a follow-up PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15501#issuecomment-2120812575
https://github.com/root-project/root/pull/15508#issuecomment-2112196842:83,Availability,error,errors,83,"@bellenot, the zlib problem is fixed now also on Windows, but there are sill build errors related to something else:; ```; (compiling source file '../BUILTIN_CFITSIO/eval_y.c'); ; C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO\cfortran.h(280,1): error C1189: #error: ""cfortran.h: Can't find your environment among: - GNU gcc (g77) on Linux. - MIPS cc and f77 2.0. (e.g. Silicon Graphics, DECstations, ...) - IBM AIX XL C and FORTRAN Compiler/6000 Version 01.01.0000.0000 - VAX VMS CC 3.1 and FORTRAN 5.4. - Alpha VMS DEC C 1.3 and DEC FORTRAN 6.0. - Alpha OSF DEC C and DEC Fortran for OSF/1 AXP Version 1.2 - Apollo DomainOS 10.2 (sys5.3) with f77 10.7 and cc 6.7. - CRAY - NEC SX-4 SUPER-UX - CONVEX - Sun - PowerStation Fortran with Visual C++ - HP9000s300/s700/s800 Latest test with: HP-UX A.08.07 A 9000/730 - LynxOS: cc or gcc with f2c. - VAXUltrix: vcc,cc or gcc with f2c. gcc or cc with f77. - f77 with vcc works; but missing link magic for f77 I/O. - NO fort. None of gcc, cc or vcc generate required names. - f2c/g77: Use #define f2cFortran, or cc -Df2cFortran - gfortran: Use #define gFortran, or cc -DgFortran (also necessary for g77 with -fno-f2c option) - NAG f90: Use #define NAGf90Fortran, or cc -DNAGf90Fortran - Absoft UNIX F77: Use #define AbsoftUNIXFortran or cc -DAbsoftUNIXFortran - Absoft Pro Fortran: Use #define AbsoftProFortran - Portland Group Fortran: Use #define pgiFortran - Intel Fortran: Use #define INTEL_COMPILER"" [C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO-build\cfitsio.vcxproj] [C:\ROOT-CI\build\builtins\cfitsio\BUILTIN_CFITSIO.vcxproj]; (compiling source file '../BUILTIN_CFITSIO/f77_wrap1.c'); ```; This PR has been much less trivial than I thought :laughing: . Maybe we can just avoid doing this check, as suggested in the source itself:; https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/cfortran.h#L254",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508#issuecomment-2112196842
https://github.com/root-project/root/pull/15508#issuecomment-2112196842:251,Availability,error,error,251,"@bellenot, the zlib problem is fixed now also on Windows, but there are sill build errors related to something else:; ```; (compiling source file '../BUILTIN_CFITSIO/eval_y.c'); ; C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO\cfortran.h(280,1): error C1189: #error: ""cfortran.h: Can't find your environment among: - GNU gcc (g77) on Linux. - MIPS cc and f77 2.0. (e.g. Silicon Graphics, DECstations, ...) - IBM AIX XL C and FORTRAN Compiler/6000 Version 01.01.0000.0000 - VAX VMS CC 3.1 and FORTRAN 5.4. - Alpha VMS DEC C 1.3 and DEC FORTRAN 6.0. - Alpha OSF DEC C and DEC Fortran for OSF/1 AXP Version 1.2 - Apollo DomainOS 10.2 (sys5.3) with f77 10.7 and cc 6.7. - CRAY - NEC SX-4 SUPER-UX - CONVEX - Sun - PowerStation Fortran with Visual C++ - HP9000s300/s700/s800 Latest test with: HP-UX A.08.07 A 9000/730 - LynxOS: cc or gcc with f2c. - VAXUltrix: vcc,cc or gcc with f2c. gcc or cc with f77. - f77 with vcc works; but missing link magic for f77 I/O. - NO fort. None of gcc, cc or vcc generate required names. - f2c/g77: Use #define f2cFortran, or cc -Df2cFortran - gfortran: Use #define gFortran, or cc -DgFortran (also necessary for g77 with -fno-f2c option) - NAG f90: Use #define NAGf90Fortran, or cc -DNAGf90Fortran - Absoft UNIX F77: Use #define AbsoftUNIXFortran or cc -DAbsoftUNIXFortran - Absoft Pro Fortran: Use #define AbsoftProFortran - Portland Group Fortran: Use #define pgiFortran - Intel Fortran: Use #define INTEL_COMPILER"" [C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO-build\cfitsio.vcxproj] [C:\ROOT-CI\build\builtins\cfitsio\BUILTIN_CFITSIO.vcxproj]; (compiling source file '../BUILTIN_CFITSIO/f77_wrap1.c'); ```; This PR has been much less trivial than I thought :laughing: . Maybe we can just avoid doing this check, as suggested in the source itself:; https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/cfortran.h#L254",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508#issuecomment-2112196842
https://github.com/root-project/root/pull/15508#issuecomment-2112196842:265,Availability,error,error,265,"@bellenot, the zlib problem is fixed now also on Windows, but there are sill build errors related to something else:; ```; (compiling source file '../BUILTIN_CFITSIO/eval_y.c'); ; C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO\cfortran.h(280,1): error C1189: #error: ""cfortran.h: Can't find your environment among: - GNU gcc (g77) on Linux. - MIPS cc and f77 2.0. (e.g. Silicon Graphics, DECstations, ...) - IBM AIX XL C and FORTRAN Compiler/6000 Version 01.01.0000.0000 - VAX VMS CC 3.1 and FORTRAN 5.4. - Alpha VMS DEC C 1.3 and DEC FORTRAN 6.0. - Alpha OSF DEC C and DEC Fortran for OSF/1 AXP Version 1.2 - Apollo DomainOS 10.2 (sys5.3) with f77 10.7 and cc 6.7. - CRAY - NEC SX-4 SUPER-UX - CONVEX - Sun - PowerStation Fortran with Visual C++ - HP9000s300/s700/s800 Latest test with: HP-UX A.08.07 A 9000/730 - LynxOS: cc or gcc with f2c. - VAXUltrix: vcc,cc or gcc with f2c. gcc or cc with f77. - f77 with vcc works; but missing link magic for f77 I/O. - NO fort. None of gcc, cc or vcc generate required names. - f2c/g77: Use #define f2cFortran, or cc -Df2cFortran - gfortran: Use #define gFortran, or cc -DgFortran (also necessary for g77 with -fno-f2c option) - NAG f90: Use #define NAGf90Fortran, or cc -DNAGf90Fortran - Absoft UNIX F77: Use #define AbsoftUNIXFortran or cc -DAbsoftUNIXFortran - Absoft Pro Fortran: Use #define AbsoftProFortran - Portland Group Fortran: Use #define pgiFortran - Intel Fortran: Use #define INTEL_COMPILER"" [C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO-build\cfitsio.vcxproj] [C:\ROOT-CI\build\builtins\cfitsio\BUILTIN_CFITSIO.vcxproj]; (compiling source file '../BUILTIN_CFITSIO/f77_wrap1.c'); ```; This PR has been much less trivial than I thought :laughing: . Maybe we can just avoid doing this check, as suggested in the source itself:; https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/cfortran.h#L254",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508#issuecomment-2112196842
https://github.com/root-project/root/pull/15508#issuecomment-2112196842:1734,Safety,avoid,avoid,1734,"@bellenot, the zlib problem is fixed now also on Windows, but there are sill build errors related to something else:; ```; (compiling source file '../BUILTIN_CFITSIO/eval_y.c'); ; C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO\cfortran.h(280,1): error C1189: #error: ""cfortran.h: Can't find your environment among: - GNU gcc (g77) on Linux. - MIPS cc and f77 2.0. (e.g. Silicon Graphics, DECstations, ...) - IBM AIX XL C and FORTRAN Compiler/6000 Version 01.01.0000.0000 - VAX VMS CC 3.1 and FORTRAN 5.4. - Alpha VMS DEC C 1.3 and DEC FORTRAN 6.0. - Alpha OSF DEC C and DEC Fortran for OSF/1 AXP Version 1.2 - Apollo DomainOS 10.2 (sys5.3) with f77 10.7 and cc 6.7. - CRAY - NEC SX-4 SUPER-UX - CONVEX - Sun - PowerStation Fortran with Visual C++ - HP9000s300/s700/s800 Latest test with: HP-UX A.08.07 A 9000/730 - LynxOS: cc or gcc with f2c. - VAXUltrix: vcc,cc or gcc with f2c. gcc or cc with f77. - f77 with vcc works; but missing link magic for f77 I/O. - NO fort. None of gcc, cc or vcc generate required names. - f2c/g77: Use #define f2cFortran, or cc -Df2cFortran - gfortran: Use #define gFortran, or cc -DgFortran (also necessary for g77 with -fno-f2c option) - NAG f90: Use #define NAGf90Fortran, or cc -DNAGf90Fortran - Absoft UNIX F77: Use #define AbsoftUNIXFortran or cc -DAbsoftUNIXFortran - Absoft Pro Fortran: Use #define AbsoftProFortran - Portland Group Fortran: Use #define pgiFortran - Intel Fortran: Use #define INTEL_COMPILER"" [C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO-build\cfitsio.vcxproj] [C:\ROOT-CI\build\builtins\cfitsio\BUILTIN_CFITSIO.vcxproj]; (compiling source file '../BUILTIN_CFITSIO/f77_wrap1.c'); ```; This PR has been much less trivial than I thought :laughing: . Maybe we can just avoid doing this check, as suggested in the source itself:; https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/cfortran.h#L254",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508#issuecomment-2112196842
https://github.com/root-project/root/pull/15508#issuecomment-2112196842:782,Testability,test,test,782,"@bellenot, the zlib problem is fixed now also on Windows, but there are sill build errors related to something else:; ```; (compiling source file '../BUILTIN_CFITSIO/eval_y.c'); ; C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO\cfortran.h(280,1): error C1189: #error: ""cfortran.h: Can't find your environment among: - GNU gcc (g77) on Linux. - MIPS cc and f77 2.0. (e.g. Silicon Graphics, DECstations, ...) - IBM AIX XL C and FORTRAN Compiler/6000 Version 01.01.0000.0000 - VAX VMS CC 3.1 and FORTRAN 5.4. - Alpha VMS DEC C 1.3 and DEC FORTRAN 6.0. - Alpha OSF DEC C and DEC Fortran for OSF/1 AXP Version 1.2 - Apollo DomainOS 10.2 (sys5.3) with f77 10.7 and cc 6.7. - CRAY - NEC SX-4 SUPER-UX - CONVEX - Sun - PowerStation Fortran with Visual C++ - HP9000s300/s700/s800 Latest test with: HP-UX A.08.07 A 9000/730 - LynxOS: cc or gcc with f2c. - VAXUltrix: vcc,cc or gcc with f2c. gcc or cc with f77. - f77 with vcc works; but missing link magic for f77 I/O. - NO fort. None of gcc, cc or vcc generate required names. - f2c/g77: Use #define f2cFortran, or cc -Df2cFortran - gfortran: Use #define gFortran, or cc -DgFortran (also necessary for g77 with -fno-f2c option) - NAG f90: Use #define NAGf90Fortran, or cc -DNAGf90Fortran - Absoft UNIX F77: Use #define AbsoftUNIXFortran or cc -DAbsoftUNIXFortran - Absoft Pro Fortran: Use #define AbsoftProFortran - Portland Group Fortran: Use #define pgiFortran - Intel Fortran: Use #define INTEL_COMPILER"" [C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO-build\cfitsio.vcxproj] [C:\ROOT-CI\build\builtins\cfitsio\BUILTIN_CFITSIO.vcxproj]; (compiling source file '../BUILTIN_CFITSIO/f77_wrap1.c'); ```; This PR has been much less trivial than I thought :laughing: . Maybe we can just avoid doing this check, as suggested in the source itself:; https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/cfortran.h#L254",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508#issuecomment-2112196842
https://github.com/root-project/root/pull/15508#issuecomment-2112196842:695,Usability,UX,UX,695,"@bellenot, the zlib problem is fixed now also on Windows, but there are sill build errors related to something else:; ```; (compiling source file '../BUILTIN_CFITSIO/eval_y.c'); ; C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO\cfortran.h(280,1): error C1189: #error: ""cfortran.h: Can't find your environment among: - GNU gcc (g77) on Linux. - MIPS cc and f77 2.0. (e.g. Silicon Graphics, DECstations, ...) - IBM AIX XL C and FORTRAN Compiler/6000 Version 01.01.0000.0000 - VAX VMS CC 3.1 and FORTRAN 5.4. - Alpha VMS DEC C 1.3 and DEC FORTRAN 6.0. - Alpha OSF DEC C and DEC Fortran for OSF/1 AXP Version 1.2 - Apollo DomainOS 10.2 (sys5.3) with f77 10.7 and cc 6.7. - CRAY - NEC SX-4 SUPER-UX - CONVEX - Sun - PowerStation Fortran with Visual C++ - HP9000s300/s700/s800 Latest test with: HP-UX A.08.07 A 9000/730 - LynxOS: cc or gcc with f2c. - VAXUltrix: vcc,cc or gcc with f2c. gcc or cc with f77. - f77 with vcc works; but missing link magic for f77 I/O. - NO fort. None of gcc, cc or vcc generate required names. - f2c/g77: Use #define f2cFortran, or cc -Df2cFortran - gfortran: Use #define gFortran, or cc -DgFortran (also necessary for g77 with -fno-f2c option) - NAG f90: Use #define NAGf90Fortran, or cc -DNAGf90Fortran - Absoft UNIX F77: Use #define AbsoftUNIXFortran or cc -DAbsoftUNIXFortran - Absoft Pro Fortran: Use #define AbsoftProFortran - Portland Group Fortran: Use #define pgiFortran - Intel Fortran: Use #define INTEL_COMPILER"" [C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO-build\cfitsio.vcxproj] [C:\ROOT-CI\build\builtins\cfitsio\BUILTIN_CFITSIO.vcxproj]; (compiling source file '../BUILTIN_CFITSIO/f77_wrap1.c'); ```; This PR has been much less trivial than I thought :laughing: . Maybe we can just avoid doing this check, as suggested in the source itself:; https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/cfortran.h#L254",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508#issuecomment-2112196842
https://github.com/root-project/root/pull/15508#issuecomment-2112196842:796,Usability,UX,UX,796,"@bellenot, the zlib problem is fixed now also on Windows, but there are sill build errors related to something else:; ```; (compiling source file '../BUILTIN_CFITSIO/eval_y.c'); ; C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO\cfortran.h(280,1): error C1189: #error: ""cfortran.h: Can't find your environment among: - GNU gcc (g77) on Linux. - MIPS cc and f77 2.0. (e.g. Silicon Graphics, DECstations, ...) - IBM AIX XL C and FORTRAN Compiler/6000 Version 01.01.0000.0000 - VAX VMS CC 3.1 and FORTRAN 5.4. - Alpha VMS DEC C 1.3 and DEC FORTRAN 6.0. - Alpha OSF DEC C and DEC Fortran for OSF/1 AXP Version 1.2 - Apollo DomainOS 10.2 (sys5.3) with f77 10.7 and cc 6.7. - CRAY - NEC SX-4 SUPER-UX - CONVEX - Sun - PowerStation Fortran with Visual C++ - HP9000s300/s700/s800 Latest test with: HP-UX A.08.07 A 9000/730 - LynxOS: cc or gcc with f2c. - VAXUltrix: vcc,cc or gcc with f2c. gcc or cc with f77. - f77 with vcc works; but missing link magic for f77 I/O. - NO fort. None of gcc, cc or vcc generate required names. - f2c/g77: Use #define f2cFortran, or cc -Df2cFortran - gfortran: Use #define gFortran, or cc -DgFortran (also necessary for g77 with -fno-f2c option) - NAG f90: Use #define NAGf90Fortran, or cc -DNAGf90Fortran - Absoft UNIX F77: Use #define AbsoftUNIXFortran or cc -DAbsoftUNIXFortran - Absoft Pro Fortran: Use #define AbsoftProFortran - Portland Group Fortran: Use #define pgiFortran - Intel Fortran: Use #define INTEL_COMPILER"" [C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO-build\cfitsio.vcxproj] [C:\ROOT-CI\build\builtins\cfitsio\BUILTIN_CFITSIO.vcxproj]; (compiling source file '../BUILTIN_CFITSIO/f77_wrap1.c'); ```; This PR has been much less trivial than I thought :laughing: . Maybe we can just avoid doing this check, as suggested in the source itself:; https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/cfortran.h#L254",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15508#issuecomment-2112196842
https://github.com/root-project/root/pull/15513#issuecomment-2111282912:133,Usability,guid,guide,133,"Thank you for the initiative!. You're also replacing `__MAKECINT__` with `__MAKECLING__`, but I'm not sure we should do this. In the guide, it reads that the `__MAKECINT__` macro is deprecated:; documentation/users-guide/Cling.md. Maybe @pcanal can confirm, but from that paragraph I understand that the replacement for `__MAKECING__` in `__ROOTCLING__`, and not `__MAKECLING__`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15513#issuecomment-2111282912
https://github.com/root-project/root/pull/15513#issuecomment-2111282912:215,Usability,guid,guide,215,"Thank you for the initiative!. You're also replacing `__MAKECINT__` with `__MAKECLING__`, but I'm not sure we should do this. In the guide, it reads that the `__MAKECINT__` macro is deprecated:; documentation/users-guide/Cling.md. Maybe @pcanal can confirm, but from that paragraph I understand that the replacement for `__MAKECING__` in `__ROOTCLING__`, and not `__MAKECLING__`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15513#issuecomment-2111282912
https://github.com/root-project/root/issues/15534#issuecomment-2133063596:105,Modifiability,inherit,inheritance,105,"> Could it be related to empty base class optimization, or in this case the lack thereof due to multiple inheritance? But in this case, why is the padding missing for `std::variant<X>`, with `struct X {int i; bool b;};`?. So it turns out this is due to EBCO, or rather its non-happening: The reason is that both `std::variant` and `std::optional` inherit from `__sfinae_ctor_base` and `__sfinae_assign_base` and EBCO is not allowed to optimize two empty types at the same offset. That's why the inner type has to have at least one byte of padding, which increases to 4 bytes offset due to alignment. A simplified example is; ```c++; class Empty {};; class Inner : private Empty {; int i;; };; class Outer1 {; Inner i;; };; class Outer2 : private Empty {; Inner i;; };. static_assert(sizeof(Outer1) == 4);; static_assert(sizeof(Outer2) == 8);; ```; (https://godbolt.org/z/6dGdTK6ha) where `Outer2` mimics the case of `std::variant<std::optional<...>>`. Naturally, `struct X` on the other hand does not inherit from the same empty base classes and doesn't need the padding. The problem for RNTuple code is that this can happen for other STL (value) containers as well; we should probably check `std::pair`, `std::tuple` and maybe also maps (not familiar with the implementation). `std::vector`s should be fine because we only need to locate the pointer. (Edit: after further investigation, it appears that this problem is specific to the combination of `std::variant` and `std::optional` that are the only ones using the `__sfinae_*` base classes). ~(FWIW I will also report this to the libc++ developers; they can't do much about it without breaking the ABI, but at least I want to make them aware of this inefficiency in the implementation.)~ (edit: does a `std::variant<std::optional<...>>` actually make much sense?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534#issuecomment-2133063596
https://github.com/root-project/root/issues/15534#issuecomment-2133063596:347,Modifiability,inherit,inherit,347,"> Could it be related to empty base class optimization, or in this case the lack thereof due to multiple inheritance? But in this case, why is the padding missing for `std::variant<X>`, with `struct X {int i; bool b;};`?. So it turns out this is due to EBCO, or rather its non-happening: The reason is that both `std::variant` and `std::optional` inherit from `__sfinae_ctor_base` and `__sfinae_assign_base` and EBCO is not allowed to optimize two empty types at the same offset. That's why the inner type has to have at least one byte of padding, which increases to 4 bytes offset due to alignment. A simplified example is; ```c++; class Empty {};; class Inner : private Empty {; int i;; };; class Outer1 {; Inner i;; };; class Outer2 : private Empty {; Inner i;; };. static_assert(sizeof(Outer1) == 4);; static_assert(sizeof(Outer2) == 8);; ```; (https://godbolt.org/z/6dGdTK6ha) where `Outer2` mimics the case of `std::variant<std::optional<...>>`. Naturally, `struct X` on the other hand does not inherit from the same empty base classes and doesn't need the padding. The problem for RNTuple code is that this can happen for other STL (value) containers as well; we should probably check `std::pair`, `std::tuple` and maybe also maps (not familiar with the implementation). `std::vector`s should be fine because we only need to locate the pointer. (Edit: after further investigation, it appears that this problem is specific to the combination of `std::variant` and `std::optional` that are the only ones using the `__sfinae_*` base classes). ~(FWIW I will also report this to the libc++ developers; they can't do much about it without breaking the ABI, but at least I want to make them aware of this inefficiency in the implementation.)~ (edit: does a `std::variant<std::optional<...>>` actually make much sense?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534#issuecomment-2133063596
https://github.com/root-project/root/issues/15534#issuecomment-2133063596:1001,Modifiability,inherit,inherit,1001,"> Could it be related to empty base class optimization, or in this case the lack thereof due to multiple inheritance? But in this case, why is the padding missing for `std::variant<X>`, with `struct X {int i; bool b;};`?. So it turns out this is due to EBCO, or rather its non-happening: The reason is that both `std::variant` and `std::optional` inherit from `__sfinae_ctor_base` and `__sfinae_assign_base` and EBCO is not allowed to optimize two empty types at the same offset. That's why the inner type has to have at least one byte of padding, which increases to 4 bytes offset due to alignment. A simplified example is; ```c++; class Empty {};; class Inner : private Empty {; int i;; };; class Outer1 {; Inner i;; };; class Outer2 : private Empty {; Inner i;; };. static_assert(sizeof(Outer1) == 4);; static_assert(sizeof(Outer2) == 8);; ```; (https://godbolt.org/z/6dGdTK6ha) where `Outer2` mimics the case of `std::variant<std::optional<...>>`. Naturally, `struct X` on the other hand does not inherit from the same empty base classes and doesn't need the padding. The problem for RNTuple code is that this can happen for other STL (value) containers as well; we should probably check `std::pair`, `std::tuple` and maybe also maps (not familiar with the implementation). `std::vector`s should be fine because we only need to locate the pointer. (Edit: after further investigation, it appears that this problem is specific to the combination of `std::variant` and `std::optional` that are the only ones using the `__sfinae_*` base classes). ~(FWIW I will also report this to the libc++ developers; they can't do much about it without breaking the ABI, but at least I want to make them aware of this inefficiency in the implementation.)~ (edit: does a `std::variant<std::optional<...>>` actually make much sense?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534#issuecomment-2133063596
https://github.com/root-project/root/issues/15534#issuecomment-2133063596:42,Performance,optimiz,optimization,42,"> Could it be related to empty base class optimization, or in this case the lack thereof due to multiple inheritance? But in this case, why is the padding missing for `std::variant<X>`, with `struct X {int i; bool b;};`?. So it turns out this is due to EBCO, or rather its non-happening: The reason is that both `std::variant` and `std::optional` inherit from `__sfinae_ctor_base` and `__sfinae_assign_base` and EBCO is not allowed to optimize two empty types at the same offset. That's why the inner type has to have at least one byte of padding, which increases to 4 bytes offset due to alignment. A simplified example is; ```c++; class Empty {};; class Inner : private Empty {; int i;; };; class Outer1 {; Inner i;; };; class Outer2 : private Empty {; Inner i;; };. static_assert(sizeof(Outer1) == 4);; static_assert(sizeof(Outer2) == 8);; ```; (https://godbolt.org/z/6dGdTK6ha) where `Outer2` mimics the case of `std::variant<std::optional<...>>`. Naturally, `struct X` on the other hand does not inherit from the same empty base classes and doesn't need the padding. The problem for RNTuple code is that this can happen for other STL (value) containers as well; we should probably check `std::pair`, `std::tuple` and maybe also maps (not familiar with the implementation). `std::vector`s should be fine because we only need to locate the pointer. (Edit: after further investigation, it appears that this problem is specific to the combination of `std::variant` and `std::optional` that are the only ones using the `__sfinae_*` base classes). ~(FWIW I will also report this to the libc++ developers; they can't do much about it without breaking the ABI, but at least I want to make them aware of this inefficiency in the implementation.)~ (edit: does a `std::variant<std::optional<...>>` actually make much sense?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534#issuecomment-2133063596
https://github.com/root-project/root/issues/15534#issuecomment-2133063596:435,Performance,optimiz,optimize,435,"> Could it be related to empty base class optimization, or in this case the lack thereof due to multiple inheritance? But in this case, why is the padding missing for `std::variant<X>`, with `struct X {int i; bool b;};`?. So it turns out this is due to EBCO, or rather its non-happening: The reason is that both `std::variant` and `std::optional` inherit from `__sfinae_ctor_base` and `__sfinae_assign_base` and EBCO is not allowed to optimize two empty types at the same offset. That's why the inner type has to have at least one byte of padding, which increases to 4 bytes offset due to alignment. A simplified example is; ```c++; class Empty {};; class Inner : private Empty {; int i;; };; class Outer1 {; Inner i;; };; class Outer2 : private Empty {; Inner i;; };. static_assert(sizeof(Outer1) == 4);; static_assert(sizeof(Outer2) == 8);; ```; (https://godbolt.org/z/6dGdTK6ha) where `Outer2` mimics the case of `std::variant<std::optional<...>>`. Naturally, `struct X` on the other hand does not inherit from the same empty base classes and doesn't need the padding. The problem for RNTuple code is that this can happen for other STL (value) containers as well; we should probably check `std::pair`, `std::tuple` and maybe also maps (not familiar with the implementation). `std::vector`s should be fine because we only need to locate the pointer. (Edit: after further investigation, it appears that this problem is specific to the combination of `std::variant` and `std::optional` that are the only ones using the `__sfinae_*` base classes). ~(FWIW I will also report this to the libc++ developers; they can't do much about it without breaking the ABI, but at least I want to make them aware of this inefficiency in the implementation.)~ (edit: does a `std::variant<std::optional<...>>` actually make much sense?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534#issuecomment-2133063596
https://github.com/root-project/root/issues/15534#issuecomment-2133063596:602,Usability,simpl,simplified,602,"> Could it be related to empty base class optimization, or in this case the lack thereof due to multiple inheritance? But in this case, why is the padding missing for `std::variant<X>`, with `struct X {int i; bool b;};`?. So it turns out this is due to EBCO, or rather its non-happening: The reason is that both `std::variant` and `std::optional` inherit from `__sfinae_ctor_base` and `__sfinae_assign_base` and EBCO is not allowed to optimize two empty types at the same offset. That's why the inner type has to have at least one byte of padding, which increases to 4 bytes offset due to alignment. A simplified example is; ```c++; class Empty {};; class Inner : private Empty {; int i;; };; class Outer1 {; Inner i;; };; class Outer2 : private Empty {; Inner i;; };. static_assert(sizeof(Outer1) == 4);; static_assert(sizeof(Outer2) == 8);; ```; (https://godbolt.org/z/6dGdTK6ha) where `Outer2` mimics the case of `std::variant<std::optional<...>>`. Naturally, `struct X` on the other hand does not inherit from the same empty base classes and doesn't need the padding. The problem for RNTuple code is that this can happen for other STL (value) containers as well; we should probably check `std::pair`, `std::tuple` and maybe also maps (not familiar with the implementation). `std::vector`s should be fine because we only need to locate the pointer. (Edit: after further investigation, it appears that this problem is specific to the combination of `std::variant` and `std::optional` that are the only ones using the `__sfinae_*` base classes). ~(FWIW I will also report this to the libc++ developers; they can't do much about it without breaking the ABI, but at least I want to make them aware of this inefficiency in the implementation.)~ (edit: does a `std::variant<std::optional<...>>` actually make much sense?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15534#issuecomment-2133063596
https://github.com/root-project/root/pull/15563#issuecomment-2119129084:67,Usability,simpl,simpler,67,Doesn't https://github.com/root-project/cling/issues/430 require a simpler fix by adding libSerialization to the list of linked libraries?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563#issuecomment-2119129084
https://github.com/root-project/root/pull/15563#issuecomment-2121573684:95,Usability,simpl,simpler,95,"> Doesn't [root-project/cling#430](https://github.com/root-project/cling/issues/430) require a simpler fix by adding libSerialization to the list of linked libraries?. That wouldn't be sufficient at least for linking to a shared library LLVM.so. When LLVM is built this way (`-DLLVM_BUILD_LLVM_DYLIB=ON`, which is what LLVM recommends over `BUILD_SHARED_LIBS=ON` these days, the many lib*.so of LLVM are all gone and everything is in a single `LLVM.so` file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563#issuecomment-2121573684
https://github.com/root-project/root/pull/15563#issuecomment-2125981292:428,Availability,down,down,428,"> Please think twice about your use-case before building as a shared library. You can get cling as a shared library through the [CppInterOp](https://github.com/compiler-research/CppInterOp) project. Is CppInterOp the future of Cling (that is, will it eventually obsolete it?). I remember reading about some effort integrating Cling or some clang-repl into the LLVM project itself, which would be simplest for users/distributors down the line. As for my use-case, I tried expounding on the rationale here: https://github.com/root-project/root/pull/15563#issuecomment-2125969791",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563#issuecomment-2125981292
https://github.com/root-project/root/pull/15563#issuecomment-2125981292:314,Deployability,integrat,integrating,314,"> Please think twice about your use-case before building as a shared library. You can get cling as a shared library through the [CppInterOp](https://github.com/compiler-research/CppInterOp) project. Is CppInterOp the future of Cling (that is, will it eventually obsolete it?). I remember reading about some effort integrating Cling or some clang-repl into the LLVM project itself, which would be simplest for users/distributors down the line. As for my use-case, I tried expounding on the rationale here: https://github.com/root-project/root/pull/15563#issuecomment-2125969791",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563#issuecomment-2125981292
https://github.com/root-project/root/pull/15563#issuecomment-2125981292:314,Integrability,integrat,integrating,314,"> Please think twice about your use-case before building as a shared library. You can get cling as a shared library through the [CppInterOp](https://github.com/compiler-research/CppInterOp) project. Is CppInterOp the future of Cling (that is, will it eventually obsolete it?). I remember reading about some effort integrating Cling or some clang-repl into the LLVM project itself, which would be simplest for users/distributors down the line. As for my use-case, I tried expounding on the rationale here: https://github.com/root-project/root/pull/15563#issuecomment-2125969791",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563#issuecomment-2125981292
https://github.com/root-project/root/pull/15563#issuecomment-2125981292:396,Usability,simpl,simplest,396,"> Please think twice about your use-case before building as a shared library. You can get cling as a shared library through the [CppInterOp](https://github.com/compiler-research/CppInterOp) project. Is CppInterOp the future of Cling (that is, will it eventually obsolete it?). I remember reading about some effort integrating Cling or some clang-repl into the LLVM project itself, which would be simplest for users/distributors down the line. As for my use-case, I tried expounding on the rationale here: https://github.com/root-project/root/pull/15563#issuecomment-2125969791",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15563#issuecomment-2125981292
https://github.com/root-project/root/issues/15579#issuecomment-2161409421:581,Safety,avoid,avoid,581,"The PR speeds up by factors (5x-7x) the simple reproducer of the issue we now have thanks to @sawenzel : ; ```.cpp; // Inspired by Alice production code, extracted from the surrounding context; #include ""TF1.h"". void Foo(int N) {; double am = 90;; double awidth = 1;; for (int i = 0; i < N; ++i) {; static TF1 rbw(""rbw"", ""pow([1],2)*pow([0],2)/(pow(x*x-[0]*[0],2)+pow(x*x*[1]/[0],2))"", -10, 10);; rbw.SetRange(am - 5 * awidth, am + 5 * awidth);; rbw.SetParameter(0, am);; rbw.SetParameter(1, awidth);; am = rbw.GetRandom();; if (am <-100000000) std::cout << am << std::endl; // to avoid compiler optimisations; }; }. int main(); {; Foo(1000);; return 0;; }; ```; The code is faster because the fast code path is taken in the PluginHandler because the right type is used in the GSLIntegratorPlugin (unsigned long, via the size_t typedef), and not just a compatible one (unsigned int).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579#issuecomment-2161409421
https://github.com/root-project/root/issues/15579#issuecomment-2161409421:40,Usability,simpl,simple,40,"The PR speeds up by factors (5x-7x) the simple reproducer of the issue we now have thanks to @sawenzel : ; ```.cpp; // Inspired by Alice production code, extracted from the surrounding context; #include ""TF1.h"". void Foo(int N) {; double am = 90;; double awidth = 1;; for (int i = 0; i < N; ++i) {; static TF1 rbw(""rbw"", ""pow([1],2)*pow([0],2)/(pow(x*x-[0]*[0],2)+pow(x*x*[1]/[0],2))"", -10, 10);; rbw.SetRange(am - 5 * awidth, am + 5 * awidth);; rbw.SetParameter(0, am);; rbw.SetParameter(1, awidth);; am = rbw.GetRandom();; if (am <-100000000) std::cout << am << std::endl; // to avoid compiler optimisations; }; }. int main(); {; Foo(1000);; return 0;; }; ```; The code is faster because the fast code path is taken in the PluginHandler because the right type is used in the GSLIntegratorPlugin (unsigned long, via the size_t typedef), and not just a compatible one (unsigned int).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15579#issuecomment-2161409421
https://github.com/root-project/root/issues/15585#issuecomment-2123267444:74,Deployability,patch,patches,74,"Dear @guitargeek ,; thanks a lot for your fast feedback! Indeed, v6-32-00-patches builds fine.; I'm building root as part of the ALICE software stack with custom build options. Using pre-packaged versions will not work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585#issuecomment-2123267444
https://github.com/root-project/root/issues/15585#issuecomment-2123267444:47,Usability,feedback,feedback,47,"Dear @guitargeek ,; thanks a lot for your fast feedback! Indeed, v6-32-00-patches builds fine.; I'm building root as part of the ALICE software stack with custom build options. Using pre-packaged versions will not work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15585#issuecomment-2123267444
https://github.com/root-project/root/pull/15630#issuecomment-2128825206:93,Usability,clear,clearly,93,Excellent notes. Do we want to include brief mentions of the PoW items which were addressed (clearly w/o linking to the PoW),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15630#issuecomment-2128825206
https://github.com/root-project/root/pull/15630#issuecomment-2129035749:95,Usability,clear,clearly,95,> Excellent notes. Do we want to include brief mentions of the PoW items which were addressed (clearly w/o linking to the PoW). We should mention the zero-copy bulk read option,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15630#issuecomment-2129035749
https://github.com/root-project/root/pull/15641#issuecomment-2352201431:175,Availability,avail,available,175,"> > Could you provide an example of how this can happen? AFAIU, it is not possible to read an entry from a branch of type say std::vector where some entries of the vector are available and some not (how would that even make sense?).; > ; > It is happening when combining 2 columns from 2 distincts collection:; > ; > ```; > tree->Draw(""vec_1.px + Alt$(vec_2.delta_px, 0)"");; > ```; > ; > where `vec_1.size()` happens to be different from `vec_2.sizeI()` but we still want to plot the data for all element of `vec_1`; > ; > A completely related recent post on the forum: https://root-forum.cern.ch/t/dealing-with-columns-of-different-lengths-in-rdf/61642/2. This use case is fairly simple with RDataFrame and has been supported for a very long time, also it is really unrelated to this PR. Here is an example of how to deal with such cases:. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <ROOT/RVec.hxx>; #include <TFile.h>; #include <TTree.h>. struct Dataset; {; constexpr static auto filename{""myfile.root""};; constexpr static auto treename{""mytree""};; Dataset(); {; TFile f{filename, ""recreate""};; TTree t{treename, treename};. std::vector<float> vec1{1.1f, 2.2f, 3.3f, 4.4f, 5.5f};; std::vector<float> vec2{6.6f, 7.7f};. t.Branch(""vec1"", &vec1);; t.Branch(""vec2"", &vec2);; t.Fill();; t.Write();; }. ~Dataset(); {; std::remove(filename);; }; };. int main(); {; Dataset dataset;; ROOT::RDataFrame df{dataset.treename, dataset.filename};; auto display = df.Define(""vec3"", [](const ROOT::RVecF &vec1, const ROOT::RVecF &vec2); { return vec1 + ROOT::VecOps::Take(vec2, vec1.size(), 10.f); }, {""vec1"", ""vec2""}); .Display<ROOT::RVecF, ROOT::RVecF, ROOT::RVecF>({""vec1"", ""vec2"", ""vec3""});; display->Print();; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2352201431
https://github.com/root-project/root/pull/15641#issuecomment-2352201431:681,Usability,simpl,simple,681,"> > Could you provide an example of how this can happen? AFAIU, it is not possible to read an entry from a branch of type say std::vector where some entries of the vector are available and some not (how would that even make sense?).; > ; > It is happening when combining 2 columns from 2 distincts collection:; > ; > ```; > tree->Draw(""vec_1.px + Alt$(vec_2.delta_px, 0)"");; > ```; > ; > where `vec_1.size()` happens to be different from `vec_2.sizeI()` but we still want to plot the data for all element of `vec_1`; > ; > A completely related recent post on the forum: https://root-forum.cern.ch/t/dealing-with-columns-of-different-lengths-in-rdf/61642/2. This use case is fairly simple with RDataFrame and has been supported for a very long time, also it is really unrelated to this PR. Here is an example of how to deal with such cases:. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <ROOT/RVec.hxx>; #include <TFile.h>; #include <TTree.h>. struct Dataset; {; constexpr static auto filename{""myfile.root""};; constexpr static auto treename{""mytree""};; Dataset(); {; TFile f{filename, ""recreate""};; TTree t{treename, treename};. std::vector<float> vec1{1.1f, 2.2f, 3.3f, 4.4f, 5.5f};; std::vector<float> vec2{6.6f, 7.7f};. t.Branch(""vec1"", &vec1);; t.Branch(""vec2"", &vec2);; t.Fill();; t.Write();; }. ~Dataset(); {; std::remove(filename);; }; };. int main(); {; Dataset dataset;; ROOT::RDataFrame df{dataset.treename, dataset.filename};; auto display = df.Define(""vec3"", [](const ROOT::RVecF &vec1, const ROOT::RVecF &vec2); { return vec1 + ROOT::VecOps::Take(vec2, vec1.size(), 10.f); }, {""vec1"", ""vec2""}); .Display<ROOT::RVecF, ROOT::RVecF, ROOT::RVecF>({""vec1"", ""vec2"", ""vec3""});; display->Print();; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2352201431
https://github.com/root-project/root/pull/15641#issuecomment-2353530365:26,Usability,simpl,simple,26,"> This use case is fairly simple with RDataFrame and has been supported for a very long time, also it is really unrelated to this PR. Here is an example of how to deal with such cases: .... Not easy to read/parse but fair enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2353530365
https://github.com/root-project/root/pull/15641#issuecomment-2354009946:82,Usability,clear,clearly,82,"> Not easy to read/parse but fair enough. I gave a fully compiled C++ reproducer, clearly the syntax can get as simple as. ```cpp; df.Define(""vec3"", ""vec1 + Take(vec2, vec1.size(), 99)"").Display({""vec3""});; ```. Getting quite close to TTree::Draw's compactness. Although, for the sake of completeness, let me state that it is personally not my preferred way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2354009946
https://github.com/root-project/root/pull/15641#issuecomment-2354009946:112,Usability,simpl,simple,112,"> Not easy to read/parse but fair enough. I gave a fully compiled C++ reproducer, clearly the syntax can get as simple as. ```cpp; df.Define(""vec3"", ""vec1 + Take(vec2, vec1.size(), 99)"").Display({""vec3""});; ```. Getting quite close to TTree::Draw's compactness. Although, for the sake of completeness, let me state that it is personally not my preferred way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2354009946
https://github.com/root-project/root/issues/15688#issuecomment-2142184689:46,Usability,simpl,simple,46,"Ok, I tried to reproduce the situation with a simple C++ example:; ```c++; #include <iostream>; #include <string>; #include <memory>. struct A {; virtual std::string func() { return ""A""; }; };. struct B : public A {; std::string func() { return ""B""; }; std::string func(int) { return ""B""; }; };. struct C : public A {; std::string func(int=0) { return ""C""; }; };. int main() {. std::unique_ptr<A> a = std::make_unique<A>();; std::unique_ptr<A> b = std::make_unique<B>();; std::unique_ptr<A> c = std::make_unique<C>();. std::cout << a->func() << std::endl;; std::cout << b->func() << std::endl;; std::cout << c->func() << std::endl;; }; ```; Output:; ```txt; A; B; A; ```; Interesting. So if you have a method with default parameters, and the signature with the implicit defaults seems to override a base class method, it actually doesn't. So this is a bug in TProfile2D that needs to be fixed:. * https://github.com/root-project/root/pull/15693",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15688#issuecomment-2142184689
https://github.com/root-project/root/issues/15723#issuecomment-2145555699:248,Usability,simpl,simply,248,"No, you misunderstood the problem! I am not complaining because of the missing splash screen. This is only the symptom with an easily to reproduce command. The problem is, that any graphics (histograms, plots etc. at the end of a long rot analysis simply do not show up when you forgot to issue the xhost + (using snap and wayland). And this is really annoying.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15723#issuecomment-2145555699
https://github.com/root-project/root/issues/15723#issuecomment-2146597941:886,Usability,feedback,feedback,886,"Hi @wofr06 ,; Thanks for reporting this and for mentioning the `xhost` workaround.; As said above, version 6.32.00 provide as an opt-in a novel version of the graphics and GUIs, based on web browsers for the rendering. While the `TBrowser` visualisation is to be considered basically production-level, the new web-based graphics still misses some functionality - however, it is quite advanced and could be indeed a solution for you. ; In order to activate it you can:; - start ROOT with the `root --web` command; - invoke programmatically `gROOT->SetWebDisplay()` at the startup of your program; - add the line `Canvas.Name: TWebCanvas` to the `.rootrc` file (which can be in your home directory, a bit like `.bashrc` or similar); ROOT also has a new `TBrowser`, as mentioned above, `ROOT::RBrowser` which is web based. In case you are interested to try, we are very interested in your feedback!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15723#issuecomment-2146597941
https://github.com/root-project/root/pull/15733#issuecomment-2194299016:14,Availability,down,downgrade,14,"This PR is a 'downgrade' is code simplicity that should not be necessary. However the underlying fix is not ready (and won't until August), so we could temporarily merge this if need be.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15733#issuecomment-2194299016
https://github.com/root-project/root/pull/15733#issuecomment-2194299016:33,Usability,simpl,simplicity,33,"This PR is a 'downgrade' is code simplicity that should not be necessary. However the underlying fix is not ready (and won't until August), so we could temporarily merge this if need be.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15733#issuecomment-2194299016
https://github.com/root-project/root/issues/15740#issuecomment-2149906358:268,Usability,guid,guide,268,"Stacks with negative content generally don't function well. They are built by stacking bricks (1D histograms) or bins (1D histograms) on top of each other. If there's a negative brick in the middle, what should we do? This might need more explanation in the reference guide or even a protection to forbid histograms with negative minimum.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15740#issuecomment-2149906358
https://github.com/root-project/root/pull/15758#issuecomment-2149433058:405,Usability,simpl,simply,405,> Just a comment. The fact we still have to use naked new and things like Clone to make the graphics work looks really bad in tutorials. Main problem is ownership of histograms. They are destroyed by `DF` handle at the end and cannot be used for graphics.; The only chance to draw them - is to clone them. And `new TLegend` required while it referencing same histograms again. ; `TLegend::DrawClone()` is simply wrong - while it will clone all referenced objects and loos reference to original histograms. . I see no other chance to correctly create `THStack` and `TLegend` in such situation.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15758#issuecomment-2149433058
https://github.com/root-project/root/issues/15763#issuecomment-2322862007:147,Testability,test,test,147,"Hi @will-cern, thanks for the report!. I'm a bit surprised by this, because `setData()` on the new likelihoods should already work. I have added a test to also cover this now: https://github.com/root-project/root/pull/16353. But maybe there is a corner case where it doesn't work? Does it have to do something with the global observables in data? For these we have already great test coverage by the way:; https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testGlobalObservables.cxx#L371. I know that data resetting is a bit fragile with the *old* NLL (`EvalBackend(""legacy"")`). Maybe you're doing some workarounds that make it work in that case, but this work around is not applicable to the new NLL where a simple `setData()` call should suffice?. Anyway, please let me know how I can reproduce the issue if it's really there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15763#issuecomment-2322862007
https://github.com/root-project/root/issues/15763#issuecomment-2322862007:379,Testability,test,test,379,"Hi @will-cern, thanks for the report!. I'm a bit surprised by this, because `setData()` on the new likelihoods should already work. I have added a test to also cover this now: https://github.com/root-project/root/pull/16353. But maybe there is a corner case where it doesn't work? Does it have to do something with the global observables in data? For these we have already great test coverage by the way:; https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testGlobalObservables.cxx#L371. I know that data resetting is a bit fragile with the *old* NLL (`EvalBackend(""legacy"")`). Maybe you're doing some workarounds that make it work in that case, but this work around is not applicable to the new NLL where a simple `setData()` call should suffice?. Anyway, please let me know how I can reproduce the issue if it's really there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15763#issuecomment-2322862007
https://github.com/root-project/root/issues/15763#issuecomment-2322862007:473,Testability,test,test,473,"Hi @will-cern, thanks for the report!. I'm a bit surprised by this, because `setData()` on the new likelihoods should already work. I have added a test to also cover this now: https://github.com/root-project/root/pull/16353. But maybe there is a corner case where it doesn't work? Does it have to do something with the global observables in data? For these we have already great test coverage by the way:; https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testGlobalObservables.cxx#L371. I know that data resetting is a bit fragile with the *old* NLL (`EvalBackend(""legacy"")`). Maybe you're doing some workarounds that make it work in that case, but this work around is not applicable to the new NLL where a simple `setData()` call should suffice?. Anyway, please let me know how I can reproduce the issue if it's really there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15763#issuecomment-2322862007
https://github.com/root-project/root/issues/15763#issuecomment-2322862007:478,Testability,test,testGlobalObservables,478,"Hi @will-cern, thanks for the report!. I'm a bit surprised by this, because `setData()` on the new likelihoods should already work. I have added a test to also cover this now: https://github.com/root-project/root/pull/16353. But maybe there is a corner case where it doesn't work? Does it have to do something with the global observables in data? For these we have already great test coverage by the way:; https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testGlobalObservables.cxx#L371. I know that data resetting is a bit fragile with the *old* NLL (`EvalBackend(""legacy"")`). Maybe you're doing some workarounds that make it work in that case, but this work around is not applicable to the new NLL where a simple `setData()` call should suffice?. Anyway, please let me know how I can reproduce the issue if it's really there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15763#issuecomment-2322862007
https://github.com/root-project/root/issues/15763#issuecomment-2322862007:730,Usability,simpl,simple,730,"Hi @will-cern, thanks for the report!. I'm a bit surprised by this, because `setData()` on the new likelihoods should already work. I have added a test to also cover this now: https://github.com/root-project/root/pull/16353. But maybe there is a corner case where it doesn't work? Does it have to do something with the global observables in data? For these we have already great test coverage by the way:; https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testGlobalObservables.cxx#L371. I know that data resetting is a bit fragile with the *old* NLL (`EvalBackend(""legacy"")`). Maybe you're doing some workarounds that make it work in that case, but this work around is not applicable to the new NLL where a simple `setData()` call should suffice?. Anyway, please let me know how I can reproduce the issue if it's really there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15763#issuecomment-2322862007
https://github.com/root-project/root/issues/15778#issuecomment-2154277257:254,Usability,clear,clearly,254,"Hi, thanks for this proposal. PGO has been investigated in detail by some HEP experiments, e.g. CMS https://indico.cern.ch/event/1106990/contributions/4991214/ . There was no symbol coming from ROOT which was really sticking out.; At the moment don' see clearly how a general purpose framework such as ROOT could benefit from PGO, given the variety of workflows that use ROOT - from HLT to Reco, to Simulation and analysis - and all in different experiments, with very different software stacks. Do you have something in particular in mind? Can you invest some time in the topic to prove your point? It would be interesting for us to comment on concrete measurements.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15778#issuecomment-2154277257
https://github.com/root-project/root/issues/15778#issuecomment-2154412824:610,Performance,perform,performance,610,"> PGO has been investigated in detail by some HEP experiments, e.g. CMS https://indico.cern.ch/event/1106990/contributions/4991214/ . There was no symbol coming from ROOT which was really sticking out. Thanks a lot for sharing the results!. > At the moment don' see clearly how a general purpose framework such as ROOT could benefit from PGO, given the variety of workflows that use ROOT - from HLT to Reco, to Simulation and analysis - and all in different experiments, with very different software stacks. I agree that various workloads can benefit from PGO differently. What we can do is try to measure PGO performance improvements in multiple scenarios (like all the scenarios you mentioned above), and post the results somewhere (e.g. here). If the performance improvement is measurable for some scenarios - put this information into the project's documentation. In this case, users will be aware about additional ways to optimize Root. > Do you have something in particular in mind? Can you invest some time in the topic to prove your point? It would be interesting for us to comment on concrete measurements. Actually, I don't have in mind any specific workload since I don't have enough experience with Root (at least yet). Later maybe I will be able to spend some time on an experiment with PGO and Root. However, my TODO list for such experiments is a bit [huge](https://github.com/zamazan4ik/awesome-pgo/blob/main/are_we_pgo_yet.md) so I cannot promise any results soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15778#issuecomment-2154412824
https://github.com/root-project/root/issues/15778#issuecomment-2154412824:754,Performance,perform,performance,754,"> PGO has been investigated in detail by some HEP experiments, e.g. CMS https://indico.cern.ch/event/1106990/contributions/4991214/ . There was no symbol coming from ROOT which was really sticking out. Thanks a lot for sharing the results!. > At the moment don' see clearly how a general purpose framework such as ROOT could benefit from PGO, given the variety of workflows that use ROOT - from HLT to Reco, to Simulation and analysis - and all in different experiments, with very different software stacks. I agree that various workloads can benefit from PGO differently. What we can do is try to measure PGO performance improvements in multiple scenarios (like all the scenarios you mentioned above), and post the results somewhere (e.g. here). If the performance improvement is measurable for some scenarios - put this information into the project's documentation. In this case, users will be aware about additional ways to optimize Root. > Do you have something in particular in mind? Can you invest some time in the topic to prove your point? It would be interesting for us to comment on concrete measurements. Actually, I don't have in mind any specific workload since I don't have enough experience with Root (at least yet). Later maybe I will be able to spend some time on an experiment with PGO and Root. However, my TODO list for such experiments is a bit [huge](https://github.com/zamazan4ik/awesome-pgo/blob/main/are_we_pgo_yet.md) so I cannot promise any results soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15778#issuecomment-2154412824
https://github.com/root-project/root/issues/15778#issuecomment-2154412824:927,Performance,optimiz,optimize,927,"> PGO has been investigated in detail by some HEP experiments, e.g. CMS https://indico.cern.ch/event/1106990/contributions/4991214/ . There was no symbol coming from ROOT which was really sticking out. Thanks a lot for sharing the results!. > At the moment don' see clearly how a general purpose framework such as ROOT could benefit from PGO, given the variety of workflows that use ROOT - from HLT to Reco, to Simulation and analysis - and all in different experiments, with very different software stacks. I agree that various workloads can benefit from PGO differently. What we can do is try to measure PGO performance improvements in multiple scenarios (like all the scenarios you mentioned above), and post the results somewhere (e.g. here). If the performance improvement is measurable for some scenarios - put this information into the project's documentation. In this case, users will be aware about additional ways to optimize Root. > Do you have something in particular in mind? Can you invest some time in the topic to prove your point? It would be interesting for us to comment on concrete measurements. Actually, I don't have in mind any specific workload since I don't have enough experience with Root (at least yet). Later maybe I will be able to spend some time on an experiment with PGO and Root. However, my TODO list for such experiments is a bit [huge](https://github.com/zamazan4ik/awesome-pgo/blob/main/are_we_pgo_yet.md) so I cannot promise any results soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15778#issuecomment-2154412824
https://github.com/root-project/root/issues/15778#issuecomment-2154412824:266,Usability,clear,clearly,266,"> PGO has been investigated in detail by some HEP experiments, e.g. CMS https://indico.cern.ch/event/1106990/contributions/4991214/ . There was no symbol coming from ROOT which was really sticking out. Thanks a lot for sharing the results!. > At the moment don' see clearly how a general purpose framework such as ROOT could benefit from PGO, given the variety of workflows that use ROOT - from HLT to Reco, to Simulation and analysis - and all in different experiments, with very different software stacks. I agree that various workloads can benefit from PGO differently. What we can do is try to measure PGO performance improvements in multiple scenarios (like all the scenarios you mentioned above), and post the results somewhere (e.g. here). If the performance improvement is measurable for some scenarios - put this information into the project's documentation. In this case, users will be aware about additional ways to optimize Root. > Do you have something in particular in mind? Can you invest some time in the topic to prove your point? It would be interesting for us to comment on concrete measurements. Actually, I don't have in mind any specific workload since I don't have enough experience with Root (at least yet). Later maybe I will be able to spend some time on an experiment with PGO and Root. However, my TODO list for such experiments is a bit [huge](https://github.com/zamazan4ik/awesome-pgo/blob/main/are_we_pgo_yet.md) so I cannot promise any results soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15778#issuecomment-2154412824
https://github.com/root-project/root/issues/15778#issuecomment-2154460609:321,Usability,clear,clear,321,"Why not just leave the issue open? If anyone from the community finds the issue interesting - they can start working on it. However, I kindly propose enabling the ""Discussion"" functionality for the repository and then moving the issue to the ""Discussions"" under the ""Ideas"" built-in label. Having the issue closed is not clear for newcomers since they at first look at open issues to start work at, not closed issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15778#issuecomment-2154460609
https://github.com/root-project/root/pull/15787#issuecomment-2154673614:17,Usability,simpl,simply,17,"> How?. Sorry, I simply meant `std::byte b{};`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15787#issuecomment-2154673614
https://github.com/root-project/root/pull/15787#issuecomment-2154679564:11,Usability,simpl,simply,11,"> Sorry, I simply meant `std::byte b{};`. Oh, right, stupid me...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15787#issuecomment-2154679564
https://github.com/root-project/root/pull/15812#issuecomment-2161600927:1375,Performance,perform,performance,1375," in `ui5/eve7/` folder, one or two fonts as examples in tutorials and provide recipe where other fonts can be found?. Yes, we could do that. Font textures and metrics files are generated from TTF via https://github.com/osschar/sdf_atlas. It's a small tool, easy to build on linux -- so we could provide instructions for this and also a catalog/web-site with a bunch of pre-generated fonts. > 3. If I understand correct, `REveText` rendering will be only supported with RenderCore? That about three.js? Beside fonts support it is easy to implement text rendering there. Yes, I know ... they have a monster implementation(s) of fonts. Seeing that I went looking for something super simple and still good looking :). Now, this is a bit unfortunate ... but I don't think I have the bandwidth to keep Three fully supported. Also, the low-level, renderer- and shader-level support we are getting from RenderCore (in particular, for picking & rendering of instanced objects and the upcoming spline-based line rendering) is making it possible to support features and performance optimizations that I do not think would be doable in Three with the time budget we all have and the level of changes we can do in core Three (zero, unless we can hack over it locally). > 4. Is it possible to support other font formats - like TTF or OTF? ROOT already includes such fonts, is it an option?. This would be nice, sdf_atlas could be incorporated into root (it requires minimal GL support which we already have) -- and one could then generate the missing SDF fonts during the startup of a demo/application. License is free to use in whatever way, just keep the copyright notice. But it only supports TTF, not OTF. Perhaps we should look for another library ... or at least a new TTF/OTF parser -- I don't know much about low-level font things so this maybe already exists in root?. I understand this is not all perfect -- but at this point our priority is to get something usable in for the existing REve applications.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2161600927
https://github.com/root-project/root/pull/15812#issuecomment-2161600927:1387,Performance,optimiz,optimizations,1387," in `ui5/eve7/` folder, one or two fonts as examples in tutorials and provide recipe where other fonts can be found?. Yes, we could do that. Font textures and metrics files are generated from TTF via https://github.com/osschar/sdf_atlas. It's a small tool, easy to build on linux -- so we could provide instructions for this and also a catalog/web-site with a bunch of pre-generated fonts. > 3. If I understand correct, `REveText` rendering will be only supported with RenderCore? That about three.js? Beside fonts support it is easy to implement text rendering there. Yes, I know ... they have a monster implementation(s) of fonts. Seeing that I went looking for something super simple and still good looking :). Now, this is a bit unfortunate ... but I don't think I have the bandwidth to keep Three fully supported. Also, the low-level, renderer- and shader-level support we are getting from RenderCore (in particular, for picking & rendering of instanced objects and the upcoming spline-based line rendering) is making it possible to support features and performance optimizations that I do not think would be doable in Three with the time budget we all have and the level of changes we can do in core Three (zero, unless we can hack over it locally). > 4. Is it possible to support other font formats - like TTF or OTF? ROOT already includes such fonts, is it an option?. This would be nice, sdf_atlas could be incorporated into root (it requires minimal GL support which we already have) -- and one could then generate the missing SDF fonts during the startup of a demo/application. License is free to use in whatever way, just keep the copyright notice. But it only supports TTF, not OTF. Perhaps we should look for another library ... or at least a new TTF/OTF parser -- I don't know much about low-level font things so this maybe already exists in root?. I understand this is not all perfect -- but at this point our priority is to get something usable in for the existing REve applications.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2161600927
https://github.com/root-project/root/pull/15812#issuecomment-2161600927:996,Usability,simpl,simple,996,"Sergey, all good questions, thank you :). > 1. Do we need to include all these fonts into ROOT repository? Font files are big and used only via random generator in tutorial. No, we can remove most of them, rebase and force-push to the branch. > 2. How to deal with other fonts? Maybe one can include one default font in `ui5/eve7/` folder, one or two fonts as examples in tutorials and provide recipe where other fonts can be found?. Yes, we could do that. Font textures and metrics files are generated from TTF via https://github.com/osschar/sdf_atlas. It's a small tool, easy to build on linux -- so we could provide instructions for this and also a catalog/web-site with a bunch of pre-generated fonts. > 3. If I understand correct, `REveText` rendering will be only supported with RenderCore? That about three.js? Beside fonts support it is easy to implement text rendering there. Yes, I know ... they have a monster implementation(s) of fonts. Seeing that I went looking for something super simple and still good looking :). Now, this is a bit unfortunate ... but I don't think I have the bandwidth to keep Three fully supported. Also, the low-level, renderer- and shader-level support we are getting from RenderCore (in particular, for picking & rendering of instanced objects and the upcoming spline-based line rendering) is making it possible to support features and performance optimizations that I do not think would be doable in Three with the time budget we all have and the level of changes we can do in core Three (zero, unless we can hack over it locally). > 4. Is it possible to support other font formats - like TTF or OTF? ROOT already includes such fonts, is it an option?. This would be nice, sdf_atlas could be incorporated into root (it requires minimal GL support which we already have) -- and one could then generate the missing SDF fonts during the startup of a demo/application. License is free to use in whatever way, just keep the copyright notice. But it only supports TTF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2161600927
https://github.com/root-project/root/pull/15812#issuecomment-2161600927:2271,Usability,usab,usable,2271," in `ui5/eve7/` folder, one or two fonts as examples in tutorials and provide recipe where other fonts can be found?. Yes, we could do that. Font textures and metrics files are generated from TTF via https://github.com/osschar/sdf_atlas. It's a small tool, easy to build on linux -- so we could provide instructions for this and also a catalog/web-site with a bunch of pre-generated fonts. > 3. If I understand correct, `REveText` rendering will be only supported with RenderCore? That about three.js? Beside fonts support it is easy to implement text rendering there. Yes, I know ... they have a monster implementation(s) of fonts. Seeing that I went looking for something super simple and still good looking :). Now, this is a bit unfortunate ... but I don't think I have the bandwidth to keep Three fully supported. Also, the low-level, renderer- and shader-level support we are getting from RenderCore (in particular, for picking & rendering of instanced objects and the upcoming spline-based line rendering) is making it possible to support features and performance optimizations that I do not think would be doable in Three with the time budget we all have and the level of changes we can do in core Three (zero, unless we can hack over it locally). > 4. Is it possible to support other font formats - like TTF or OTF? ROOT already includes such fonts, is it an option?. This would be nice, sdf_atlas could be incorporated into root (it requires minimal GL support which we already have) -- and one could then generate the missing SDF fonts during the startup of a demo/application. License is free to use in whatever way, just keep the copyright notice. But it only supports TTF, not OTF. Perhaps we should look for another library ... or at least a new TTF/OTF parser -- I don't know much about low-level font things so this maybe already exists in root?. I understand this is not all perfect -- but at this point our priority is to get something usable in for the existing REve applications.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2161600927
https://github.com/root-project/root/pull/15812#issuecomment-2162185672:117,Energy Efficiency,reduce,reduce,117,> but at this point our priority is to get something usable in for the existing REve applications. Then I propose to reduce number of fonts - one or two for now. And think how one can allow to use external fonts - in this PR or may be later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2162185672
https://github.com/root-project/root/pull/15812#issuecomment-2162185672:53,Usability,usab,usable,53,> but at this point our priority is to get something usable in for the existing REve applications. Then I propose to reduce number of fonts - one or two for now. And think how one can allow to use external fonts - in this PR or may be later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2162185672
https://github.com/root-project/root/pull/15812#issuecomment-2172410620:378,Availability,avail,available,378,"> There is only one thing I couldn't figure out -- how to link against libpng ... so I just added -lpng into cmake file for graf3d/gl/. Please help me figure out how to do this correctly. Not so simple. Sometime ROOT uses system-wide `libpng`, sometime - builtin version included in `ASImage`.; And they can conflict with each other. Major problem - builtin with ASImage is not available from outside. You have to ensure that your code not linked with `ASImage`. And provide in your CMakeLists.txt file construct like; ```; find_Package(PNG); # handle include directories; ```; Because you may need to use custom include directories. See [here](https://github.com/root-project/root/blob/master/cmake/modules/SearchInstalledSoftware.cmake#L403-L410)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2172410620
https://github.com/root-project/root/pull/15812#issuecomment-2172410620:195,Usability,simpl,simple,195,"> There is only one thing I couldn't figure out -- how to link against libpng ... so I just added -lpng into cmake file for graf3d/gl/. Please help me figure out how to do this correctly. Not so simple. Sometime ROOT uses system-wide `libpng`, sometime - builtin version included in `ASImage`.; And they can conflict with each other. Major problem - builtin with ASImage is not available from outside. You have to ensure that your code not linked with `ASImage`. And provide in your CMakeLists.txt file construct like; ```; find_Package(PNG); # handle include directories; ```; Because you may need to use custom include directories. See [here](https://github.com/root-project/root/blob/master/cmake/modules/SearchInstalledSoftware.cmake#L403-L410)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2172410620
https://github.com/root-project/root/pull/15812#issuecomment-2176441216:1185,Integrability,depend,dependency,1185,"Hmmh, but then I'd need to stream path information with every REveText object, now only the font name is streamed. It is indeed a reasonable thing to check if the font files exist before object's json is sent over to the client --- but creating a font during the streaming traversal would be pushing it a bit. Is it possible to register custom prefixes and callbacks from REveManager (via RWebWindow) so they can be handled when requests come in? Like: http://server/sdf-fonts/. I went through the code a bit (but clearly do not have the full picture) ... one way would be to add THttpServer::fActiveLocations, where instead of replacement string one provides a lambda [](TString& prefix, TString& reminder, THttpRequest& req, THttpServer &srv) so one can then do appropriate lookup in the callback, potentially generating the font, and then calling srv->SendFile() (or sending back the default font, if the desired one can not be found/generated). I think this functionality could be useful for other cases in REve, where semi-static data needs to be provided. The font-generation code in REveText invokes TGL generator through the interpreter now, via gROOT->ProcessLine(), to avoid dependency of REve on RGL. Is this OK to do from a request handler thread or should cross-thread request to the main thread be made (and request told to try again in N seconds)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2176441216
https://github.com/root-project/root/pull/15812#issuecomment-2176441216:1179,Safety,avoid,avoid,1179,"Hmmh, but then I'd need to stream path information with every REveText object, now only the font name is streamed. It is indeed a reasonable thing to check if the font files exist before object's json is sent over to the client --- but creating a font during the streaming traversal would be pushing it a bit. Is it possible to register custom prefixes and callbacks from REveManager (via RWebWindow) so they can be handled when requests come in? Like: http://server/sdf-fonts/. I went through the code a bit (but clearly do not have the full picture) ... one way would be to add THttpServer::fActiveLocations, where instead of replacement string one provides a lambda [](TString& prefix, TString& reminder, THttpRequest& req, THttpServer &srv) so one can then do appropriate lookup in the callback, potentially generating the font, and then calling srv->SendFile() (or sending back the default font, if the desired one can not be found/generated). I think this functionality could be useful for other cases in REve, where semi-static data needs to be provided. The font-generation code in REveText invokes TGL generator through the interpreter now, via gROOT->ProcessLine(), to avoid dependency of REve on RGL. Is this OK to do from a request handler thread or should cross-thread request to the main thread be made (and request told to try again in N seconds)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2176441216
https://github.com/root-project/root/pull/15812#issuecomment-2176441216:514,Usability,clear,clearly,514,"Hmmh, but then I'd need to stream path information with every REveText object, now only the font name is streamed. It is indeed a reasonable thing to check if the font files exist before object's json is sent over to the client --- but creating a font during the streaming traversal would be pushing it a bit. Is it possible to register custom prefixes and callbacks from REveManager (via RWebWindow) so they can be handled when requests come in? Like: http://server/sdf-fonts/. I went through the code a bit (but clearly do not have the full picture) ... one way would be to add THttpServer::fActiveLocations, where instead of replacement string one provides a lambda [](TString& prefix, TString& reminder, THttpRequest& req, THttpServer &srv) so one can then do appropriate lookup in the callback, potentially generating the font, and then calling srv->SendFile() (or sending back the default font, if the desired one can not be found/generated). I think this functionality could be useful for other cases in REve, where semi-static data needs to be provided. The font-generation code in REveText invokes TGL generator through the interpreter now, via gROOT->ProcessLine(), to avoid dependency of REve on RGL. Is this OK to do from a request handler thread or should cross-thread request to the main thread be made (and request told to try again in N seconds)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2176441216
https://github.com/root-project/root/pull/15812#issuecomment-2177936944:216,Security,access,access,216,"> Hmmh, so you don't want to give me an active directory? :). For the moment there is no direct support of such feature with `RWebWindow`.; But can be provided - if really necessary. In my mind, solution with direct access of font files via `currentdir/` path is much clear.; And does not require any extra threads locking. You always can implement active directory - but does it necessary with fonts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2177936944
https://github.com/root-project/root/pull/15812#issuecomment-2177936944:268,Usability,clear,clear,268,"> Hmmh, so you don't want to give me an active directory? :). For the moment there is no direct support of such feature with `RWebWindow`.; But can be provided - if really necessary. In my mind, solution with direct access of font files via `currentdir/` path is much clear.; And does not require any extra threads locking. You always can implement active directory - but does it necessary with fonts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2177936944
https://github.com/root-project/root/pull/15812#issuecomment-2252647669:23,Integrability,depend,depends,23,"Ok, if `libGL` already depends from `libAfterImage` - then it is fine. You may add simple gtest-based code directly for `libGL` - then it will be automatically tested on all platforms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2252647669
https://github.com/root-project/root/pull/15812#issuecomment-2252647669:160,Testability,test,tested,160,"Ok, if `libGL` already depends from `libAfterImage` - then it is fine. You may add simple gtest-based code directly for `libGL` - then it will be automatically tested on all platforms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2252647669
https://github.com/root-project/root/pull/15812#issuecomment-2252647669:83,Usability,simpl,simple,83,"Ok, if `libGL` already depends from `libAfterImage` - then it is fine. You may add simple gtest-based code directly for `libGL` - then it will be automatically tested on all platforms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2252647669
https://github.com/root-project/root/pull/15812#issuecomment-2255129356:19,Usability,guid,guidance,19,Thank you for your guidance Sergey! I'm glad this got done right :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2255129356
https://github.com/root-project/root/pull/15816#issuecomment-2161410185:581,Safety,avoid,avoid,581,"The PR speeds up by factors (5x-7x) the simple reproducer of the issue we now have thanks to @sawenzel : ; ```.cpp; // Inspired by Alice production code, extracted from the surrounding context; #include ""TF1.h"". void Foo(int N) {; double am = 90;; double awidth = 1;; for (int i = 0; i < N; ++i) {; static TF1 rbw(""rbw"", ""pow([1],2)*pow([0],2)/(pow(x*x-[0]*[0],2)+pow(x*x*[1]/[0],2))"", -10, 10);; rbw.SetRange(am - 5 * awidth, am + 5 * awidth);; rbw.SetParameter(0, am);; rbw.SetParameter(1, awidth);; am = rbw.GetRandom();; if (am <-100000000) std::cout << am << std::endl; // to avoid compiler optimisations; }; }. int main(); {; Foo(1000);; return 0;; }; ```; The code is faster because the fast code path is taken in the PluginHandler because the right type is used in the GSLIntegratorPlugin (unsigned long, via the size_t typedef), and not just a compatible one (unsigned int).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15816#issuecomment-2161410185
https://github.com/root-project/root/pull/15816#issuecomment-2161410185:40,Usability,simpl,simple,40,"The PR speeds up by factors (5x-7x) the simple reproducer of the issue we now have thanks to @sawenzel : ; ```.cpp; // Inspired by Alice production code, extracted from the surrounding context; #include ""TF1.h"". void Foo(int N) {; double am = 90;; double awidth = 1;; for (int i = 0; i < N; ++i) {; static TF1 rbw(""rbw"", ""pow([1],2)*pow([0],2)/(pow(x*x-[0]*[0],2)+pow(x*x*[1]/[0],2))"", -10, 10);; rbw.SetRange(am - 5 * awidth, am + 5 * awidth);; rbw.SetParameter(0, am);; rbw.SetParameter(1, awidth);; am = rbw.GetRandom();; if (am <-100000000) std::cout << am << std::endl; // to avoid compiler optimisations; }; }. int main(); {; Foo(1000);; return 0;; }; ```; The code is faster because the fast code path is taken in the PluginHandler because the right type is used in the GSLIntegratorPlugin (unsigned long, via the size_t typedef), and not just a compatible one (unsigned int).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15816#issuecomment-2161410185
https://github.com/root-project/root/pull/15822#issuecomment-2162805726:541,Usability,clear,clear,541,"> Yes. But this is *wonderful*! This is a fantastic approach imho! Can I just throw in another suggestion then. Since we are introducing these new API methods from scratch and they do not belong already to any of the base classes of `TVirtualPad`, maybe we can take the opportunity to give them some more meaningful name. For example, `Add` could be `RegisterDrawable` or `AdoptDrawable` or just `Register`/`Adopt`. I would be in this sense very much in favour of having `Adopt(std::shared_ptr<TObject> obj)` so that the memory ownership is clear. This would for example enable any use case where the drawable object is not registered with the list of global cleanups. In the same spirit, I don't see (yet) the need for `AddFirst` and `Remove`. What are the user-side reasons for these?; In the current changes:; * `AddFirst` is defined in the class but never used anywhere else, so it should be removed.; * `Remove` is used only for internal purposes and could be made a private method.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15822#issuecomment-2162805726
https://github.com/root-project/root/pull/15822#issuecomment-2162904388:53,Safety,safe,safe,53,> And again let me ask for providing a modern memory safe API with proper memory management in place by default. This need redesign of pad list of primitives. Finally we just need other pad classes. This PR is not change of `TPad` memory management but simple extension of existing API. I had in mind `df027` tutorial which now looks like:. ```; new TCanvas(); // assign gPad - unreliable; ...; histo->Draw(); ```. I want to avoid gPad - for that I need to write now:; ```; auto c1 = new TCanvas();; ...; if (c1->GetListOfPrimitives()) {; c1->GetListOfPrimitives()->Add(histo);; c1->Modified();; }; ```. This is main pattern for 90% of graphical tutorials which I want to be looking:; ```; auto c1 = new TCanvas();; ...; c1->Add(histo);; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15822#issuecomment-2162904388
https://github.com/root-project/root/pull/15822#issuecomment-2162904388:425,Safety,avoid,avoid,425,> And again let me ask for providing a modern memory safe API with proper memory management in place by default. This need redesign of pad list of primitives. Finally we just need other pad classes. This PR is not change of `TPad` memory management but simple extension of existing API. I had in mind `df027` tutorial which now looks like:. ```; new TCanvas(); // assign gPad - unreliable; ...; histo->Draw(); ```. I want to avoid gPad - for that I need to write now:; ```; auto c1 = new TCanvas();; ...; if (c1->GetListOfPrimitives()) {; c1->GetListOfPrimitives()->Add(histo);; c1->Modified();; }; ```. This is main pattern for 90% of graphical tutorials which I want to be looking:; ```; auto c1 = new TCanvas();; ...; c1->Add(histo);; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15822#issuecomment-2162904388
https://github.com/root-project/root/pull/15822#issuecomment-2162904388:253,Usability,simpl,simple,253,> And again let me ask for providing a modern memory safe API with proper memory management in place by default. This need redesign of pad list of primitives. Finally we just need other pad classes. This PR is not change of `TPad` memory management but simple extension of existing API. I had in mind `df027` tutorial which now looks like:. ```; new TCanvas(); // assign gPad - unreliable; ...; histo->Draw(); ```. I want to avoid gPad - for that I need to write now:; ```; auto c1 = new TCanvas();; ...; if (c1->GetListOfPrimitives()) {; c1->GetListOfPrimitives()->Add(histo);; c1->Modified();; }; ```. This is main pattern for 90% of graphical tutorials which I want to be looking:; ```; auto c1 = new TCanvas();; ...; c1->Add(histo);; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15822#issuecomment-2162904388
https://github.com/root-project/root/pull/15871#issuecomment-2188647929:207,Availability,error,error,207,"This broke the tests:; ```; 729: Processing /home/jhahnfel/ROOT/src/tutorials/graphs/scatter.C...; 729: In file included from input_line_10:1:; 729: /home/jhahnfel/ROOT/src/tutorials/graphs/scatter.C:39:43: error: use of undeclared identifier 'scat'; 729: TPaletteAxis *palette = (TPaletteAxis*)scat->GetGraph()->GetListOfFunctions()->FindObject(""palette"");; 729: ^; ```. Tutorials are executed as part of the CI and therefore should *never* be merged with `[skip-ci]`! The simple fix is in https://github.com/root-project/root/pull/15923.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15871#issuecomment-2188647929
https://github.com/root-project/root/pull/15871#issuecomment-2188647929:15,Testability,test,tests,15,"This broke the tests:; ```; 729: Processing /home/jhahnfel/ROOT/src/tutorials/graphs/scatter.C...; 729: In file included from input_line_10:1:; 729: /home/jhahnfel/ROOT/src/tutorials/graphs/scatter.C:39:43: error: use of undeclared identifier 'scat'; 729: TPaletteAxis *palette = (TPaletteAxis*)scat->GetGraph()->GetListOfFunctions()->FindObject(""palette"");; 729: ^; ```. Tutorials are executed as part of the CI and therefore should *never* be merged with `[skip-ci]`! The simple fix is in https://github.com/root-project/root/pull/15923.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15871#issuecomment-2188647929
https://github.com/root-project/root/pull/15871#issuecomment-2188647929:474,Usability,simpl,simple,474,"This broke the tests:; ```; 729: Processing /home/jhahnfel/ROOT/src/tutorials/graphs/scatter.C...; 729: In file included from input_line_10:1:; 729: /home/jhahnfel/ROOT/src/tutorials/graphs/scatter.C:39:43: error: use of undeclared identifier 'scat'; 729: TPaletteAxis *palette = (TPaletteAxis*)scat->GetGraph()->GetListOfFunctions()->FindObject(""palette"");; 729: ^; ```. Tutorials are executed as part of the CI and therefore should *never* be merged with `[skip-ci]`! The simple fix is in https://github.com/root-project/root/pull/15923.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15871#issuecomment-2188647929
https://github.com/root-project/root/pull/15891#issuecomment-2180639835:704,Availability,error,error,704,"> e.g. LHC experiments, of this change in case something behaves differently in that context. This move is necessary for the Python environments but there is a clear limitation in its current form, that is it breaks the usage of TPython from C++:. ```; root.exe -l -b -q -x -e 'TPython::Exec(""print(\""1 + 1 =\"", 1+1)"")'. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.so, 0x0009): symbol not found in flat namespace '_PyBool_Type'; Error in <AutoloadLibraryMU>: Failed to load library /Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.socling JIT session error: Failed to materialize symbols: { (main, { __ZN7TPython4ExecEPKc }) }; ```. This is not surprising, we are purposely removing the linking against libPython so TPython cannot find the symbols. From within a Python interpreter, libpython is automatically injected and linked at the global scope, but that doesn't happen when a symbol from libpython is needed from an executable outside of Python itself. Bottom line, we will need to investigate how to properly manage both the requirements of Python packaging systems and embedding libpython in other cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15891#issuecomment-2180639835
https://github.com/root-project/root/pull/15891#issuecomment-2180639835:963,Integrability,inject,injected,963,"> e.g. LHC experiments, of this change in case something behaves differently in that context. This move is necessary for the Python environments but there is a clear limitation in its current form, that is it breaks the usage of TPython from C++:. ```; root.exe -l -b -q -x -e 'TPython::Exec(""print(\""1 + 1 =\"", 1+1)"")'. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.so, 0x0009): symbol not found in flat namespace '_PyBool_Type'; Error in <AutoloadLibraryMU>: Failed to load library /Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.socling JIT session error: Failed to materialize symbols: { (main, { __ZN7TPython4ExecEPKc }) }; ```. This is not surprising, we are purposely removing the linking against libPython so TPython cannot find the symbols. From within a Python interpreter, libpython is automatically injected and linked at the global scope, but that doesn't happen when a symbol from libpython is needed from an executable outside of Python itself. Bottom line, we will need to investigate how to properly manage both the requirements of Python packaging systems and embedding libpython in other cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15891#issuecomment-2180639835
https://github.com/root-project/root/pull/15891#issuecomment-2180639835:351,Performance,load,loadLibrary,351,"> e.g. LHC experiments, of this change in case something behaves differently in that context. This move is necessary for the Python environments but there is a clear limitation in its current form, that is it breaks the usage of TPython from C++:. ```; root.exe -l -b -q -x -e 'TPython::Exec(""print(\""1 + 1 =\"", 1+1)"")'. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.so, 0x0009): symbol not found in flat namespace '_PyBool_Type'; Error in <AutoloadLibraryMU>: Failed to load library /Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.socling JIT session error: Failed to materialize symbols: { (main, { __ZN7TPython4ExecEPKc }) }; ```. This is not surprising, we are purposely removing the linking against libPython so TPython cannot find the symbols. From within a Python interpreter, libpython is automatically injected and linked at the global scope, but that doesn't happen when a symbol from libpython is needed from an executable outside of Python itself. Bottom line, we will need to investigate how to properly manage both the requirements of Python packaging systems and embedding libpython in other cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15891#issuecomment-2180639835
https://github.com/root-project/root/pull/15891#issuecomment-2180639835:574,Performance,load,load,574,"> e.g. LHC experiments, of this change in case something behaves differently in that context. This move is necessary for the Python environments but there is a clear limitation in its current form, that is it breaks the usage of TPython from C++:. ```; root.exe -l -b -q -x -e 'TPython::Exec(""print(\""1 + 1 =\"", 1+1)"")'. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.so, 0x0009): symbol not found in flat namespace '_PyBool_Type'; Error in <AutoloadLibraryMU>: Failed to load library /Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.socling JIT session error: Failed to materialize symbols: { (main, { __ZN7TPython4ExecEPKc }) }; ```. This is not surprising, we are purposely removing the linking against libPython so TPython cannot find the symbols. From within a Python interpreter, libpython is automatically injected and linked at the global scope, but that doesn't happen when a symbol from libpython is needed from an executable outside of Python itself. Bottom line, we will need to investigate how to properly manage both the requirements of Python packaging systems and embedding libpython in other cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15891#issuecomment-2180639835
https://github.com/root-project/root/pull/15891#issuecomment-2180639835:963,Security,inject,injected,963,"> e.g. LHC experiments, of this change in case something behaves differently in that context. This move is necessary for the Python environments but there is a clear limitation in its current form, that is it breaks the usage of TPython from C++:. ```; root.exe -l -b -q -x -e 'TPython::Exec(""print(\""1 + 1 =\"", 1+1)"")'. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.so, 0x0009): symbol not found in flat namespace '_PyBool_Type'; Error in <AutoloadLibraryMU>: Failed to load library /Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.socling JIT session error: Failed to materialize symbols: { (main, { __ZN7TPython4ExecEPKc }) }; ```. This is not surprising, we are purposely removing the linking against libPython so TPython cannot find the symbols. From within a Python interpreter, libpython is automatically injected and linked at the global scope, but that doesn't happen when a symbol from libpython is needed from an executable outside of Python itself. Bottom line, we will need to investigate how to properly manage both the requirements of Python packaging systems and embedding libpython in other cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15891#issuecomment-2180639835
https://github.com/root-project/root/pull/15891#issuecomment-2180639835:160,Usability,clear,clear,160,"> e.g. LHC experiments, of this change in case something behaves differently in that context. This move is necessary for the Python environments but there is a clear limitation in its current form, that is it breaks the usage of TPython from C++:. ```; root.exe -l -b -q -x -e 'TPython::Exec(""print(\""1 + 1 =\"", 1+1)"")'. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.so, 0x0009): symbol not found in flat namespace '_PyBool_Type'; Error in <AutoloadLibraryMU>: Failed to load library /Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.socling JIT session error: Failed to materialize symbols: { (main, { __ZN7TPython4ExecEPKc }) }; ```. This is not surprising, we are purposely removing the linking against libPython so TPython cannot find the symbols. From within a Python interpreter, libpython is automatically injected and linked at the global scope, but that doesn't happen when a symbol from libpython is needed from an executable outside of Python itself. Bottom line, we will need to investigate how to properly manage both the requirements of Python packaging systems and embedding libpython in other cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15891#issuecomment-2180639835
https://github.com/root-project/root/pull/15893#issuecomment-2180723430:157,Usability,simpl,simple,157,"When I naively set `SetLowBottomMargin(gStyle->GetPadBottomMargin())` and `SetUpTopMargin(gStyle->GetPadTopMargin())` they end up being different than for a simple histogram, i.e. axis labels that should fit disappear. The below example also has `SetSeparationMargin(0)` but that does not change the outer margins. ![image](https://github.com/root-project/root/assets/12029880/e0917420-0de3-4723-8ab8-531a4c6ee48f). That is jsroot plot though, on the ""normal"" one the font size for the ratio plot is bigger and even more disappears at the bottom. :(. ![image](https://github.com/root-project/root/assets/12029880/47b9ecd1-b1d5-415a-be88-d99a03a97624). The left/right margins where easy to change and the most annoying ones visually imo, so that is what I did.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15893#issuecomment-2180723430
https://github.com/root-project/root/issues/15896#issuecomment-2213690136:184,Security,certificate,certificate,184,@bellenot : The new executables are signed. ; ![image](https://github.com/root-project/root/assets/73365079/89bf755e-dfd3-4bcd-a70f-e58d6d23b5d4); But they still present an issue. The certificate used to sign was not issued by a trusted root authority. ; ![image](https://github.com/root-project/root/assets/73365079/e101fbfa-4bad-473d-b197-e274431d1147); Code signing certificates must be provided by a Windows approved certificate authority. [They have them listed here](https://learn.microsoft.com/en-us/windows-hardware/drivers/dashboard/code-signing-cert-manage#get-or-renew-a-code-signing-certificate).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15896#issuecomment-2213690136
https://github.com/root-project/root/issues/15896#issuecomment-2213690136:369,Security,certificate,certificates,369,@bellenot : The new executables are signed. ; ![image](https://github.com/root-project/root/assets/73365079/89bf755e-dfd3-4bcd-a70f-e58d6d23b5d4); But they still present an issue. The certificate used to sign was not issued by a trusted root authority. ; ![image](https://github.com/root-project/root/assets/73365079/e101fbfa-4bad-473d-b197-e274431d1147); Code signing certificates must be provided by a Windows approved certificate authority. [They have them listed here](https://learn.microsoft.com/en-us/windows-hardware/drivers/dashboard/code-signing-cert-manage#get-or-renew-a-code-signing-certificate).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15896#issuecomment-2213690136
https://github.com/root-project/root/issues/15896#issuecomment-2213690136:421,Security,certificate,certificate,421,@bellenot : The new executables are signed. ; ![image](https://github.com/root-project/root/assets/73365079/89bf755e-dfd3-4bcd-a70f-e58d6d23b5d4); But they still present an issue. The certificate used to sign was not issued by a trusted root authority. ; ![image](https://github.com/root-project/root/assets/73365079/e101fbfa-4bad-473d-b197-e274431d1147); Code signing certificates must be provided by a Windows approved certificate authority. [They have them listed here](https://learn.microsoft.com/en-us/windows-hardware/drivers/dashboard/code-signing-cert-manage#get-or-renew-a-code-signing-certificate).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15896#issuecomment-2213690136
https://github.com/root-project/root/issues/15896#issuecomment-2213690136:595,Security,certificate,certificate,595,@bellenot : The new executables are signed. ; ![image](https://github.com/root-project/root/assets/73365079/89bf755e-dfd3-4bcd-a70f-e58d6d23b5d4); But they still present an issue. The certificate used to sign was not issued by a trusted root authority. ; ![image](https://github.com/root-project/root/assets/73365079/e101fbfa-4bad-473d-b197-e274431d1147); Code signing certificates must be provided by a Windows approved certificate authority. [They have them listed here](https://learn.microsoft.com/en-us/windows-hardware/drivers/dashboard/code-signing-cert-manage#get-or-renew-a-code-signing-certificate).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15896#issuecomment-2213690136
https://github.com/root-project/root/issues/15896#issuecomment-2213690136:481,Usability,learn,learn,481,@bellenot : The new executables are signed. ; ![image](https://github.com/root-project/root/assets/73365079/89bf755e-dfd3-4bcd-a70f-e58d6d23b5d4); But they still present an issue. The certificate used to sign was not issued by a trusted root authority. ; ![image](https://github.com/root-project/root/assets/73365079/e101fbfa-4bad-473d-b197-e274431d1147); Code signing certificates must be provided by a Windows approved certificate authority. [They have them listed here](https://learn.microsoft.com/en-us/windows-hardware/drivers/dashboard/code-signing-cert-manage#get-or-renew-a-code-signing-certificate).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15896#issuecomment-2213690136
https://github.com/root-project/root/issues/15896#issuecomment-2213801755:33,Security,certificate,certificate,33,"OK, thanks for the feedback. The certificate used to sign the binaries is the official CERN one. I'll check with IT but I doubt they will purchase any Windows approved certificate... Isn't the CERN certificate good enough for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15896#issuecomment-2213801755
https://github.com/root-project/root/issues/15896#issuecomment-2213801755:168,Security,certificate,certificate,168,"OK, thanks for the feedback. The certificate used to sign the binaries is the official CERN one. I'll check with IT but I doubt they will purchase any Windows approved certificate... Isn't the CERN certificate good enough for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15896#issuecomment-2213801755
https://github.com/root-project/root/issues/15896#issuecomment-2213801755:198,Security,certificate,certificate,198,"OK, thanks for the feedback. The certificate used to sign the binaries is the official CERN one. I'll check with IT but I doubt they will purchase any Windows approved certificate... Isn't the CERN certificate good enough for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15896#issuecomment-2213801755
https://github.com/root-project/root/issues/15896#issuecomment-2213801755:19,Usability,feedback,feedback,19,"OK, thanks for the feedback. The certificate used to sign the binaries is the official CERN one. I'll check with IT but I doubt they will purchase any Windows approved certificate... Isn't the CERN certificate good enough for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15896#issuecomment-2213801755
https://github.com/root-project/root/pull/15897#issuecomment-2182075929:80,Testability,test,test,80,comparing contains was more complex. I went to the simplest way for this simple test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15897#issuecomment-2182075929
https://github.com/root-project/root/pull/15897#issuecomment-2182075929:51,Usability,simpl,simplest,51,comparing contains was more complex. I went to the simplest way for this simple test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15897#issuecomment-2182075929
https://github.com/root-project/root/pull/15897#issuecomment-2182075929:73,Usability,simpl,simple,73,comparing contains was more complex. I went to the simplest way for this simple test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15897#issuecomment-2182075929
https://github.com/root-project/root/issues/15906#issuecomment-2185817262:330,Availability,fault,fault,330,Yes. Issue is clarified. - I can see the classlist on the browser at home and in the office.; - I cannot see it at the pit .... but this all hints to a funny browser setup there. I have to investigate. Thanks a lot to all for the clarification and please take my apologies for ; creating noise about an issue which was clearly my fault!. Thanks a lot!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15906#issuecomment-2185817262
https://github.com/root-project/root/issues/15906#issuecomment-2185817262:319,Usability,clear,clearly,319,Yes. Issue is clarified. - I can see the classlist on the browser at home and in the office.; - I cannot see it at the pit .... but this all hints to a funny browser setup there. I have to investigate. Thanks a lot to all for the clarification and please take my apologies for ; creating noise about an issue which was clearly my fault!. Thanks a lot!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/15906#issuecomment-2185817262
https://github.com/root-project/root/pull/15930#issuecomment-2205465973:1067,Availability,fault,fault,1067,"> But how do you solve the modules.idx creation, can you link to a patch?. The build is actually cross-compiling as requested in the `conda-forge.yml` file (e.g. [here](https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/conda-forge.yml#L4)). Then the conda forge CI is able to automatically detect that an executable e.g. `rootcling_stage1` that is being invoked during the build was built for a different target platform than the build one. In such cases, it runs that executable via `qemu` (which in turn is enabled by `binfmt_misc`). There's some hint of it in the CI files such as https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/.azure-pipelines/azure-pipelines-linux.yml#L90-L96 (these are generated automatically by conda-forge). This does not explain alone the fact that there is also a patch to disable `hsimple.root` generation in the conda forge ROOT feedstock. At some point in the past that was generating some other problem at build time (unclear whether that was only fault of ROOT or also a bug in qemu itself, see [this bug report](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=999421)), so that patch was added. IMHO clearly the better approach is to have less patches and walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205465973
https://github.com/root-project/root/pull/15930#issuecomment-2205465973:67,Deployability,patch,patch,67,"> But how do you solve the modules.idx creation, can you link to a patch?. The build is actually cross-compiling as requested in the `conda-forge.yml` file (e.g. [here](https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/conda-forge.yml#L4)). Then the conda forge CI is able to automatically detect that an executable e.g. `rootcling_stage1` that is being invoked during the build was built for a different target platform than the build one. In such cases, it runs that executable via `qemu` (which in turn is enabled by `binfmt_misc`). There's some hint of it in the CI files such as https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/.azure-pipelines/azure-pipelines-linux.yml#L90-L96 (these are generated automatically by conda-forge). This does not explain alone the fact that there is also a patch to disable `hsimple.root` generation in the conda forge ROOT feedstock. At some point in the past that was generating some other problem at build time (unclear whether that was only fault of ROOT or also a bug in qemu itself, see [this bug report](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=999421)), so that patch was added. IMHO clearly the better approach is to have less patches and walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205465973
https://github.com/root-project/root/pull/15930#issuecomment-2205465973:725,Deployability,pipeline,pipelines,725,"> But how do you solve the modules.idx creation, can you link to a patch?. The build is actually cross-compiling as requested in the `conda-forge.yml` file (e.g. [here](https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/conda-forge.yml#L4)). Then the conda forge CI is able to automatically detect that an executable e.g. `rootcling_stage1` that is being invoked during the build was built for a different target platform than the build one. In such cases, it runs that executable via `qemu` (which in turn is enabled by `binfmt_misc`). There's some hint of it in the CI files such as https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/.azure-pipelines/azure-pipelines-linux.yml#L90-L96 (these are generated automatically by conda-forge). This does not explain alone the fact that there is also a patch to disable `hsimple.root` generation in the conda forge ROOT feedstock. At some point in the past that was generating some other problem at build time (unclear whether that was only fault of ROOT or also a bug in qemu itself, see [this bug report](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=999421)), so that patch was added. IMHO clearly the better approach is to have less patches and walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205465973
https://github.com/root-project/root/pull/15930#issuecomment-2205465973:741,Deployability,pipeline,pipelines-linux,741,"> But how do you solve the modules.idx creation, can you link to a patch?. The build is actually cross-compiling as requested in the `conda-forge.yml` file (e.g. [here](https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/conda-forge.yml#L4)). Then the conda forge CI is able to automatically detect that an executable e.g. `rootcling_stage1` that is being invoked during the build was built for a different target platform than the build one. In such cases, it runs that executable via `qemu` (which in turn is enabled by `binfmt_misc`). There's some hint of it in the CI files such as https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/.azure-pipelines/azure-pipelines-linux.yml#L90-L96 (these are generated automatically by conda-forge). This does not explain alone the fact that there is also a patch to disable `hsimple.root` generation in the conda forge ROOT feedstock. At some point in the past that was generating some other problem at build time (unclear whether that was only fault of ROOT or also a bug in qemu itself, see [this bug report](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=999421)), so that patch was added. IMHO clearly the better approach is to have less patches and walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205465973
https://github.com/root-project/root/pull/15930#issuecomment-2205465973:879,Deployability,patch,patch,879,"> But how do you solve the modules.idx creation, can you link to a patch?. The build is actually cross-compiling as requested in the `conda-forge.yml` file (e.g. [here](https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/conda-forge.yml#L4)). Then the conda forge CI is able to automatically detect that an executable e.g. `rootcling_stage1` that is being invoked during the build was built for a different target platform than the build one. In such cases, it runs that executable via `qemu` (which in turn is enabled by `binfmt_misc`). There's some hint of it in the CI files such as https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/.azure-pipelines/azure-pipelines-linux.yml#L90-L96 (these are generated automatically by conda-forge). This does not explain alone the fact that there is also a patch to disable `hsimple.root` generation in the conda forge ROOT feedstock. At some point in the past that was generating some other problem at build time (unclear whether that was only fault of ROOT or also a bug in qemu itself, see [this bug report](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=999421)), so that patch was added. IMHO clearly the better approach is to have less patches and walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205465973
https://github.com/root-project/root/pull/15930#issuecomment-2205465973:1201,Deployability,patch,patch,1201,"> But how do you solve the modules.idx creation, can you link to a patch?. The build is actually cross-compiling as requested in the `conda-forge.yml` file (e.g. [here](https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/conda-forge.yml#L4)). Then the conda forge CI is able to automatically detect that an executable e.g. `rootcling_stage1` that is being invoked during the build was built for a different target platform than the build one. In such cases, it runs that executable via `qemu` (which in turn is enabled by `binfmt_misc`). There's some hint of it in the CI files such as https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/.azure-pipelines/azure-pipelines-linux.yml#L90-L96 (these are generated automatically by conda-forge). This does not explain alone the fact that there is also a patch to disable `hsimple.root` generation in the conda forge ROOT feedstock. At some point in the past that was generating some other problem at build time (unclear whether that was only fault of ROOT or also a bug in qemu itself, see [this bug report](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=999421)), so that patch was added. IMHO clearly the better approach is to have less patches and walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205465973
https://github.com/root-project/root/pull/15930#issuecomment-2205465973:1267,Deployability,patch,patches,1267,"> But how do you solve the modules.idx creation, can you link to a patch?. The build is actually cross-compiling as requested in the `conda-forge.yml` file (e.g. [here](https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/conda-forge.yml#L4)). Then the conda forge CI is able to automatically detect that an executable e.g. `rootcling_stage1` that is being invoked during the build was built for a different target platform than the build one. In such cases, it runs that executable via `qemu` (which in turn is enabled by `binfmt_misc`). There's some hint of it in the CI files such as https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/.azure-pipelines/azure-pipelines-linux.yml#L90-L96 (these are generated automatically by conda-forge). This does not explain alone the fact that there is also a patch to disable `hsimple.root` generation in the conda forge ROOT feedstock. At some point in the past that was generating some other problem at build time (unclear whether that was only fault of ROOT or also a bug in qemu itself, see [this bug report](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=999421)), so that patch was added. IMHO clearly the better approach is to have less patches and walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205465973
https://github.com/root-project/root/pull/15930#issuecomment-2205465973:332,Safety,detect,detect,332,"> But how do you solve the modules.idx creation, can you link to a patch?. The build is actually cross-compiling as requested in the `conda-forge.yml` file (e.g. [here](https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/conda-forge.yml#L4)). Then the conda forge CI is able to automatically detect that an executable e.g. `rootcling_stage1` that is being invoked during the build was built for a different target platform than the build one. In such cases, it runs that executable via `qemu` (which in turn is enabled by `binfmt_misc`). There's some hint of it in the CI files such as https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/.azure-pipelines/azure-pipelines-linux.yml#L90-L96 (these are generated automatically by conda-forge). This does not explain alone the fact that there is also a patch to disable `hsimple.root` generation in the conda forge ROOT feedstock. At some point in the past that was generating some other problem at build time (unclear whether that was only fault of ROOT or also a bug in qemu itself, see [this bug report](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=999421)), so that patch was added. IMHO clearly the better approach is to have less patches and walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205465973
https://github.com/root-project/root/pull/15930#issuecomment-2205465973:1223,Usability,clear,clearly,1223,"> But how do you solve the modules.idx creation, can you link to a patch?. The build is actually cross-compiling as requested in the `conda-forge.yml` file (e.g. [here](https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/conda-forge.yml#L4)). Then the conda forge CI is able to automatically detect that an executable e.g. `rootcling_stage1` that is being invoked during the build was built for a different target platform than the build one. In such cases, it runs that executable via `qemu` (which in turn is enabled by `binfmt_misc`). There's some hint of it in the CI files such as https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/.azure-pipelines/azure-pipelines-linux.yml#L90-L96 (these are generated automatically by conda-forge). This does not explain alone the fact that there is also a patch to disable `hsimple.root` generation in the conda forge ROOT feedstock. At some point in the past that was generating some other problem at build time (unclear whether that was only fault of ROOT or also a bug in qemu itself, see [this bug report](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=999421)), so that patch was added. IMHO clearly the better approach is to have less patches and walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205465973
https://github.com/root-project/root/pull/15930#issuecomment-2205481182:51,Deployability,patch,patches,51,"> IMHO clearly the better approach is to have less patches. Sure, so can we just remove the patch from the conda forge and see what happens? It's still not clear to me why it is needed. > walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step. I agree, but I don't see the bigger picture here: how do you want to achieve this with all of `rootcling` for dictionary and module generation? Personally I don't see a value of starting at the easy leaves with no clear plan how to actually tackle the hard parts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205481182
https://github.com/root-project/root/pull/15930#issuecomment-2205481182:92,Deployability,patch,patch,92,"> IMHO clearly the better approach is to have less patches. Sure, so can we just remove the patch from the conda forge and see what happens? It's still not clear to me why it is needed. > walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step. I agree, but I don't see the bigger picture here: how do you want to achieve this with all of `rootcling` for dictionary and module generation? Personally I don't see a value of starting at the easy leaves with no clear plan how to actually tackle the hard parts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205481182
https://github.com/root-project/root/pull/15930#issuecomment-2205481182:7,Usability,clear,clearly,7,"> IMHO clearly the better approach is to have less patches. Sure, so can we just remove the patch from the conda forge and see what happens? It's still not clear to me why it is needed. > walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step. I agree, but I don't see the bigger picture here: how do you want to achieve this with all of `rootcling` for dictionary and module generation? Personally I don't see a value of starting at the easy leaves with no clear plan how to actually tackle the hard parts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205481182
https://github.com/root-project/root/pull/15930#issuecomment-2205481182:156,Usability,clear,clear,156,"> IMHO clearly the better approach is to have less patches. Sure, so can we just remove the patch from the conda forge and see what happens? It's still not clear to me why it is needed. > walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step. I agree, but I don't see the bigger picture here: how do you want to achieve this with all of `rootcling` for dictionary and module generation? Personally I don't see a value of starting at the easy leaves with no clear plan how to actually tackle the hard parts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205481182
https://github.com/root-project/root/pull/15930#issuecomment-2205481182:500,Usability,clear,clear,500,"> IMHO clearly the better approach is to have less patches. Sure, so can we just remove the patch from the conda forge and see what happens? It's still not clear to me why it is needed. > walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step. I agree, but I don't see the bigger picture here: how do you want to achieve this with all of `rootcling` for dictionary and module generation? Personally I don't see a value of starting at the easy leaves with no clear plan how to actually tackle the hard parts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205481182
https://github.com/root-project/root/pull/15930#issuecomment-2228672121:34,Availability,robust,robust,34,I agree we should wait for a more robust solution for cross-compilation of the whole project before removing this simple test. I will close this PR and if in the future we decide what to do we can resume from here 👍,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2228672121
https://github.com/root-project/root/pull/15930#issuecomment-2228672121:121,Testability,test,test,121,I agree we should wait for a more robust solution for cross-compilation of the whole project before removing this simple test. I will close this PR and if in the future we decide what to do we can resume from here 👍,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2228672121
https://github.com/root-project/root/pull/15930#issuecomment-2228672121:114,Usability,simpl,simple,114,I agree we should wait for a more robust solution for cross-compilation of the whole project before removing this simple test. I will close this PR and if in the future we decide what to do we can resume from here 👍,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2228672121
https://github.com/root-project/root/pull/15930#issuecomment-2228672121:197,Usability,resume,resume,197,I agree we should wait for a more robust solution for cross-compilation of the whole project before removing this simple test. I will close this PR and if in the future we decide what to do we can resume from here 👍,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2228672121
https://github.com/root-project/root/pull/15954#issuecomment-2210678615:315,Performance,optimiz,optimization,315,"> In `AddColumnsFromField` and `CollectColumns` we now produce both, the vector of `RColumnInfo` records and the `RCluster::ColumnSet_t`. To me it seems that the source of truth is the `RColumnInfo` vector, and it may be clearer to generate and `RCluster::ColumnSet_t` from the `RColumnInfo` vector. It was a small optimization to avoid looping over all columns twice and get all the data we need at once. I can separate the loops if you prefer, it should make little difference.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15954#issuecomment-2210678615
https://github.com/root-project/root/pull/15954#issuecomment-2210678615:331,Safety,avoid,avoid,331,"> In `AddColumnsFromField` and `CollectColumns` we now produce both, the vector of `RColumnInfo` records and the `RCluster::ColumnSet_t`. To me it seems that the source of truth is the `RColumnInfo` vector, and it may be clearer to generate and `RCluster::ColumnSet_t` from the `RColumnInfo` vector. It was a small optimization to avoid looping over all columns twice and get all the data we need at once. I can separate the loops if you prefer, it should make little difference.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15954#issuecomment-2210678615
https://github.com/root-project/root/pull/15954#issuecomment-2210678615:221,Usability,clear,clearer,221,"> In `AddColumnsFromField` and `CollectColumns` we now produce both, the vector of `RColumnInfo` records and the `RCluster::ColumnSet_t`. To me it seems that the source of truth is the `RColumnInfo` vector, and it may be clearer to generate and `RCluster::ColumnSet_t` from the `RColumnInfo` vector. It was a small optimization to avoid looping over all columns twice and get all the data we need at once. I can separate the loops if you prefer, it should make little difference.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/15954#issuecomment-2210678615
https://github.com/root-project/root/pull/16019#issuecomment-2388756085:40,Usability,clear,clear,40,"Closing, because at this point it's not clear to me whether the functionality should be in TPython or in CPyCppyy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16019#issuecomment-2388756085
https://github.com/root-project/root/pull/16022#issuecomment-2227805634:27,Usability,clear,clear,27,"Hm, I think it's not quite clear that we want to return a pair of ID and `RColumnRange`, especially given that the column range already contains the ID. Can we have only the `RColumnRange` as a value type?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16022#issuecomment-2227805634
https://github.com/root-project/root/pull/16039#issuecomment-2247304935:704,Availability,error,error,704,"I only did two minor changes to the existing commits, as discussed yesterday evening:; ```diff; diff --git a/tree/ntuple/v7/inc/ROOT/RField.hxx b/tree/ntuple/v7/inc/ROOT/RField.hxx; index 7c9ccebeaa..411ef5733c 100644; --- a/tree/ntuple/v7/inc/ROOT/RField.hxx; +++ b/tree/ntuple/v7/inc/ROOT/RField.hxx; @@ -2179,9 +2179,8 @@ public:; ; template <typename T>; class RIntegralField {; - // Cannot say static_assert(false) because not all compilers implement CWG2518 yet...; - static_assert(std::is_integral_v<T>, ""RIntegralField requires integral type"");; - static_assert(!std::is_integral_v<T>, ""unsupported integral type"");; + // Instantiating this base template definition should never happen and is an error!; + RIntegralField() = delete;; };; ; template <>; @@ -2573,6 +2572,8 @@ template <typename T>; class RField<T, typename std::enable_if<std::is_integral_v<T>>::type> final; : public RIntegralField<typename Internal::RIntegralTypeMap<T>::type> {; using MappedType = typename Internal::RIntegralTypeMap<T>::type;; + static_assert(sizeof(T) == sizeof(MappedType), ""invalid size of mapped type"");; + static_assert(std::is_signed_v<T> == std::is_signed_v<MappedType>, ""invalid signedness of mapped type"");; ; public:; RField(std::string_view name) : RIntegralField<MappedType>(name) {}; ```. Eventually, after implementing the changes, I decided to hold off moving some member functions to the templated `RField` specialization: It didn't work for the `Map[V]` functions because `RColumn::Map[V]` has to be called with the fixed width integer type after mapping. Instead the newly added last commit `reinterpret_cast`s the pointer since we can guarantee that the mapped type has identical storage layout. This solves the problem with `RNTupleView`s, discussed on Mattermost. I still plan to come back to possible deduplications and simplifications in a follow-up PR (now https://github.com/root-project/root/pull/16101).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16039#issuecomment-2247304935
https://github.com/root-project/root/pull/16039#issuecomment-2247304935:1837,Usability,simpl,simplifications,1837,"I only did two minor changes to the existing commits, as discussed yesterday evening:; ```diff; diff --git a/tree/ntuple/v7/inc/ROOT/RField.hxx b/tree/ntuple/v7/inc/ROOT/RField.hxx; index 7c9ccebeaa..411ef5733c 100644; --- a/tree/ntuple/v7/inc/ROOT/RField.hxx; +++ b/tree/ntuple/v7/inc/ROOT/RField.hxx; @@ -2179,9 +2179,8 @@ public:; ; template <typename T>; class RIntegralField {; - // Cannot say static_assert(false) because not all compilers implement CWG2518 yet...; - static_assert(std::is_integral_v<T>, ""RIntegralField requires integral type"");; - static_assert(!std::is_integral_v<T>, ""unsupported integral type"");; + // Instantiating this base template definition should never happen and is an error!; + RIntegralField() = delete;; };; ; template <>; @@ -2573,6 +2572,8 @@ template <typename T>; class RField<T, typename std::enable_if<std::is_integral_v<T>>::type> final; : public RIntegralField<typename Internal::RIntegralTypeMap<T>::type> {; using MappedType = typename Internal::RIntegralTypeMap<T>::type;; + static_assert(sizeof(T) == sizeof(MappedType), ""invalid size of mapped type"");; + static_assert(std::is_signed_v<T> == std::is_signed_v<MappedType>, ""invalid signedness of mapped type"");; ; public:; RField(std::string_view name) : RIntegralField<MappedType>(name) {}; ```. Eventually, after implementing the changes, I decided to hold off moving some member functions to the templated `RField` specialization: It didn't work for the `Map[V]` functions because `RColumn::Map[V]` has to be called with the fixed width integer type after mapping. Instead the newly added last commit `reinterpret_cast`s the pointer since we can guarantee that the mapped type has identical storage layout. This solves the problem with `RNTupleView`s, discussed on Mattermost. I still plan to come back to possible deduplications and simplifications in a follow-up PR (now https://github.com/root-project/root/pull/16101).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16039#issuecomment-2247304935
https://github.com/root-project/root/issues/16051#issuecomment-2256214014:111,Performance,load,loaded,111,"Many thanks Danilo and Olivier for picking this up so quickly! The issue appears only when `TColorBug.root` is loaded in a new ROOT session. Sorry for not being clear about this in my original post. If I first run `createTestFile();` from Olivier's macro to create the .root file and then close ROOT and start a new ROOT session that only runs `readTestFile();`, `TColor::GetFreeColorIndex();`returns the index of the already defined `myColor`. So the problem seems to be related to how custom colors that are not yet existing in the ROOT session are restored from a .root file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16051#issuecomment-2256214014
https://github.com/root-project/root/issues/16051#issuecomment-2256214014:161,Usability,clear,clear,161,"Many thanks Danilo and Olivier for picking this up so quickly! The issue appears only when `TColorBug.root` is loaded in a new ROOT session. Sorry for not being clear about this in my original post. If I first run `createTestFile();` from Olivier's macro to create the .root file and then close ROOT and start a new ROOT session that only runs `readTestFile();`, `TColor::GetFreeColorIndex();`returns the index of the already defined `myColor`. So the problem seems to be related to how custom colors that are not yet existing in the ROOT session are restored from a .root file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16051#issuecomment-2256214014
https://github.com/root-project/root/pull/16074#issuecomment-2242293382:534,Integrability,interface,interfaces,534,"> It is at the same level of usage and encouragement as TTree. . I sincerely hope not. TEntryList is definitely not usable in production contexts as it only scales well for a few entries for its purpose. For RDataFrame we had to move away from it exactly for this reason. . > And if I remember correctly we do not have yet a RNTuple replacement/equivalent). Indeed, and I hope we are not going to develop the same feature. IMHO, for the purpose of `TEntryList`, we have already `TTreeReader::SetEntryRange` and we should have similar interfaces (private/internal) for modern I/O systems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16074#issuecomment-2242293382
https://github.com/root-project/root/pull/16074#issuecomment-2242293382:116,Usability,usab,usable,116,"> It is at the same level of usage and encouragement as TTree. . I sincerely hope not. TEntryList is definitely not usable in production contexts as it only scales well for a few entries for its purpose. For RDataFrame we had to move away from it exactly for this reason. . > And if I remember correctly we do not have yet a RNTuple replacement/equivalent). Indeed, and I hope we are not going to develop the same feature. IMHO, for the purpose of `TEntryList`, we have already `TTreeReader::SetEntryRange` and we should have similar interfaces (private/internal) for modern I/O systems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16074#issuecomment-2242293382
https://github.com/root-project/root/pull/16074#issuecomment-2245984573:369,Usability,usab,usable,369,"> IMHO, for the purpose of TEntryList, we have already TTreeReader::SetEntryRange. `SetEntryRange` is small subset of the feature/use of `TEntryList`. The main intent of the `TEntryList` is to store the result of a selection (so a more or sparse list entry numbers) so that further analysis step can read only the already select entries. > TEntryList is definitely not usable in production contexts as it only scales well for a few entries for its purpose. I am not sure I understand 'why'. For `TTree::Draw`, this is not the case as far as I remember. Does `TEventList` scale better for the case you are talking about? (if that is the case we would need to NOT deprecated either of them). Side note: the main intent of `TEntryList` over `TEventList` is that `TEntryList` is supposed to scale better with chain with large number of files. > Indeed, and I hope we are not going to develop the same feature. Humm ... it does not have to be implemented in `RNTuple` and could be implemented in `RDataFrame`; but why don't we want to have the ability to 'store' the result of computational heavy selection to speed-up further analysis by reducing the number of entries needed to be used?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16074#issuecomment-2245984573
https://github.com/root-project/root/issues/16087#issuecomment-2244578228:226,Deployability,update,updated,226,Good catch! indeed the real one is DistancetoPtrimitve (small t). The ones with capital T in the index file are typos I guess. In particular in the old User guide. I guess we can leave it as this guide is obsolete now and not updated anymore. ; But we can also fix them for clarity. Those with capital T in the TGeo code are more suspect I guess @agheata should have a look.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16087#issuecomment-2244578228
https://github.com/root-project/root/issues/16087#issuecomment-2244578228:157,Usability,guid,guide,157,Good catch! indeed the real one is DistancetoPtrimitve (small t). The ones with capital T in the index file are typos I guess. In particular in the old User guide. I guess we can leave it as this guide is obsolete now and not updated anymore. ; But we can also fix them for clarity. Those with capital T in the TGeo code are more suspect I guess @agheata should have a look.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16087#issuecomment-2244578228
https://github.com/root-project/root/issues/16087#issuecomment-2244578228:196,Usability,guid,guide,196,Good catch! indeed the real one is DistancetoPtrimitve (small t). The ones with capital T in the index file are typos I guess. In particular in the old User guide. I guess we can leave it as this guide is obsolete now and not updated anymore. ; But we can also fix them for clarity. Those with capital T in the TGeo code are more suspect I guess @agheata should have a look.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16087#issuecomment-2244578228
https://github.com/root-project/root/pull/16090#issuecomment-2244826382:40,Usability,simpl,simplifying,40,"Good idea! I would even suggest further simplifying it, using this header-only parser: https://github.com/CLIUtils/CLI11",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2244826382
https://github.com/root-project/root/pull/16090#issuecomment-2244858400:245,Testability,log,logic,245,"@ferdymercury is that library already used in ROOT? Considering it's 10k loc, I'd not count it as ""simplifying"" unless we decided to use it in multiple places (ideally all our cpp executables).; Also, we must make sure that the argument parsing logic remains backward-compatible, which is not very clear to me if it would be the case with that lib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2244858400
https://github.com/root-project/root/pull/16090#issuecomment-2244858400:99,Usability,simpl,simplifying,99,"@ferdymercury is that library already used in ROOT? Considering it's 10k loc, I'd not count it as ""simplifying"" unless we decided to use it in multiple places (ideally all our cpp executables).; Also, we must make sure that the argument parsing logic remains backward-compatible, which is not very clear to me if it would be the case with that lib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2244858400
https://github.com/root-project/root/pull/16090#issuecomment-2244858400:298,Usability,clear,clear,298,"@ferdymercury is that library already used in ROOT? Considering it's 10k loc, I'd not count it as ""simplifying"" unless we decided to use it in multiple places (ideally all our cpp executables).; Also, we must make sure that the argument parsing logic remains backward-compatible, which is not very clear to me if it would be the case with that lib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2244858400
https://github.com/root-project/root/pull/16090#issuecomment-2244874004:471,Availability,mainten,maintenance,471,"> @ferdymercury is that library already used in ROOT?. I don't think it's used yet in ROOT, but @henryiii could confirm. . > Considering it's 10k loc, I'd not count it as ""simplifying"" unless we decided to use it in multiple places (ideally all our cpp executables). True. My experience is that there are many places doing CLI parsing over and over again within ROOT, so if we would replace everywhere, then we would remove more than 10k from ROOT's codebase, and reduce maintenance / bugs on ROOT's side, so it would be worth it. Or at least for new interfaces, see e.g. https://github.com/root-project/root/pull/14038. > Also, we must make sure that the argument parsing logic remains backward-compatible, which is not very clear to me if it would be the case with that lib. That lib has many customization options, so a derived parser class could probably do it, but yeah, it's hard to say for sure in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2244874004
https://github.com/root-project/root/pull/16090#issuecomment-2244874004:464,Energy Efficiency,reduce,reduce,464,"> @ferdymercury is that library already used in ROOT?. I don't think it's used yet in ROOT, but @henryiii could confirm. . > Considering it's 10k loc, I'd not count it as ""simplifying"" unless we decided to use it in multiple places (ideally all our cpp executables). True. My experience is that there are many places doing CLI parsing over and over again within ROOT, so if we would replace everywhere, then we would remove more than 10k from ROOT's codebase, and reduce maintenance / bugs on ROOT's side, so it would be worth it. Or at least for new interfaces, see e.g. https://github.com/root-project/root/pull/14038. > Also, we must make sure that the argument parsing logic remains backward-compatible, which is not very clear to me if it would be the case with that lib. That lib has many customization options, so a derived parser class could probably do it, but yeah, it's hard to say for sure in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2244874004
https://github.com/root-project/root/pull/16090#issuecomment-2244874004:551,Integrability,interface,interfaces,551,"> @ferdymercury is that library already used in ROOT?. I don't think it's used yet in ROOT, but @henryiii could confirm. . > Considering it's 10k loc, I'd not count it as ""simplifying"" unless we decided to use it in multiple places (ideally all our cpp executables). True. My experience is that there are many places doing CLI parsing over and over again within ROOT, so if we would replace everywhere, then we would remove more than 10k from ROOT's codebase, and reduce maintenance / bugs on ROOT's side, so it would be worth it. Or at least for new interfaces, see e.g. https://github.com/root-project/root/pull/14038. > Also, we must make sure that the argument parsing logic remains backward-compatible, which is not very clear to me if it would be the case with that lib. That lib has many customization options, so a derived parser class could probably do it, but yeah, it's hard to say for sure in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2244874004
https://github.com/root-project/root/pull/16090#issuecomment-2244874004:673,Testability,log,logic,673,"> @ferdymercury is that library already used in ROOT?. I don't think it's used yet in ROOT, but @henryiii could confirm. . > Considering it's 10k loc, I'd not count it as ""simplifying"" unless we decided to use it in multiple places (ideally all our cpp executables). True. My experience is that there are many places doing CLI parsing over and over again within ROOT, so if we would replace everywhere, then we would remove more than 10k from ROOT's codebase, and reduce maintenance / bugs on ROOT's side, so it would be worth it. Or at least for new interfaces, see e.g. https://github.com/root-project/root/pull/14038. > Also, we must make sure that the argument parsing logic remains backward-compatible, which is not very clear to me if it would be the case with that lib. That lib has many customization options, so a derived parser class could probably do it, but yeah, it's hard to say for sure in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2244874004
https://github.com/root-project/root/pull/16090#issuecomment-2244874004:172,Usability,simpl,simplifying,172,"> @ferdymercury is that library already used in ROOT?. I don't think it's used yet in ROOT, but @henryiii could confirm. . > Considering it's 10k loc, I'd not count it as ""simplifying"" unless we decided to use it in multiple places (ideally all our cpp executables). True. My experience is that there are many places doing CLI parsing over and over again within ROOT, so if we would replace everywhere, then we would remove more than 10k from ROOT's codebase, and reduce maintenance / bugs on ROOT's side, so it would be worth it. Or at least for new interfaces, see e.g. https://github.com/root-project/root/pull/14038. > Also, we must make sure that the argument parsing logic remains backward-compatible, which is not very clear to me if it would be the case with that lib. That lib has many customization options, so a derived parser class could probably do it, but yeah, it's hard to say for sure in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2244874004
https://github.com/root-project/root/pull/16090#issuecomment-2244874004:726,Usability,clear,clear,726,"> @ferdymercury is that library already used in ROOT?. I don't think it's used yet in ROOT, but @henryiii could confirm. . > Considering it's 10k loc, I'd not count it as ""simplifying"" unless we decided to use it in multiple places (ideally all our cpp executables). True. My experience is that there are many places doing CLI parsing over and over again within ROOT, so if we would replace everywhere, then we would remove more than 10k from ROOT's codebase, and reduce maintenance / bugs on ROOT's side, so it would be worth it. Or at least for new interfaces, see e.g. https://github.com/root-project/root/pull/14038. > Also, we must make sure that the argument parsing logic remains backward-compatible, which is not very clear to me if it would be the case with that lib. That lib has many customization options, so a derived parser class could probably do it, but yeah, it's hard to say for sure in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2244874004
https://github.com/root-project/root/pull/16090#issuecomment-2245114452:344,Testability,test,tested,344,"@ferdymercury thanks for the links. I fully agree with Axel's proposal of trying to make all ROOT binaries consistent in their argument parsing and make them POSIX (while keeping the legacy `-long` options valid but hidden). Having never used it, I don't have a strong opinion on the CLI11 library yet. On one hand it seems well maintained and tested on all platforms, which is great, and being header-only certainly makes it convenient to use. On the other hand it's quite big and I wonder if we need enough features from it as to justify its size. . In any case I think we should revive the topic and understand if there were any blockers to it or if it was simply not picked up by anyone in the past 3 years.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2245114452
https://github.com/root-project/root/pull/16090#issuecomment-2245114452:660,Usability,simpl,simply,660,"@ferdymercury thanks for the links. I fully agree with Axel's proposal of trying to make all ROOT binaries consistent in their argument parsing and make them POSIX (while keeping the legacy `-long` options valid but hidden). Having never used it, I don't have a strong opinion on the CLI11 library yet. On one hand it seems well maintained and tested on all platforms, which is great, and being header-only certainly makes it convenient to use. On the other hand it's quite big and I wonder if we need enough features from it as to justify its size. . In any case I think we should revive the topic and understand if there were any blockers to it or if it was simply not picked up by anyone in the past 3 years.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2245114452
https://github.com/root-project/root/pull/16094#issuecomment-2252273470:7,Deployability,update,updated,7,"I have updated the contents of the CERNBox link from the PR description with more memray graphs, it looks clear that the effect of this PR is to properly remove the artifacts generated during the distributed execution, there is no more TTreeCache leaking leftover after the analysis (see any file ending with `_patch` and compare it with the same file ending with `_master`). Now that the main source of memory usage is gone, I have noticed a much smaller contribute that still seems to make the memory increase in the flamegraphs. And it seems to have something to do with the increased number of files, at least on the surface. Let's take the following two files to compare:; * test_agc_9sample_1file_10task_patch.html; * test_agc_9sample_10file_10task_patch.html. They are running exactly the same script, with all 9 RDF samples. In the first case we have 1 file per sample, in the second case 10 files per sample. The memray flamegraph report a total of 253.5 MB used for the first case and 260.9 MB used for the first case (7.4 MB delta). There are two main parts of the graph: the one deriving from the `clone` of the Dask process, where the actual analysis code is run, and the one deriving from the `_start` function where most of the Python code around the analysis is (things like `import`ing packages or the Dask worker-scheduler communication). The difference between the two graphs in the `clone` part is of 0.6 MB, the difference between the two `_start` parts is 6.7 MB, so I focus on that from now on. This 6.7 MB difference is in turn split between a 0.1 MB difference deriving from `_PyObject_VectorcallTState` and 6.6 MB difference deriving from. Finally, the vast majority of these 6.6 MB comes from:; * The metrics gathered by profiling (i.e. memray itself); * Dask communication protocol. [Screencast from 2024-07-26 10-47-18.webm](https://github.com/user-attachments/assets/3a21ea3e-c130-42af-b50b-bb324b06eaaa). TL;DR: After this patch the leftover memory increase may be attri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16094#issuecomment-2252273470
https://github.com/root-project/root/pull/16094#issuecomment-2252273470:1954,Deployability,patch,patch,1954,"king leftover after the analysis (see any file ending with `_patch` and compare it with the same file ending with `_master`). Now that the main source of memory usage is gone, I have noticed a much smaller contribute that still seems to make the memory increase in the flamegraphs. And it seems to have something to do with the increased number of files, at least on the surface. Let's take the following two files to compare:; * test_agc_9sample_1file_10task_patch.html; * test_agc_9sample_10file_10task_patch.html. They are running exactly the same script, with all 9 RDF samples. In the first case we have 1 file per sample, in the second case 10 files per sample. The memray flamegraph report a total of 253.5 MB used for the first case and 260.9 MB used for the first case (7.4 MB delta). There are two main parts of the graph: the one deriving from the `clone` of the Dask process, where the actual analysis code is run, and the one deriving from the `_start` function where most of the Python code around the analysis is (things like `import`ing packages or the Dask worker-scheduler communication). The difference between the two graphs in the `clone` part is of 0.6 MB, the difference between the two `_start` parts is 6.7 MB, so I focus on that from now on. This 6.7 MB difference is in turn split between a 0.1 MB difference deriving from `_PyObject_VectorcallTState` and 6.6 MB difference deriving from. Finally, the vast majority of these 6.6 MB comes from:; * The metrics gathered by profiling (i.e. memray itself); * Dask communication protocol. [Screencast from 2024-07-26 10-47-18.webm](https://github.com/user-attachments/assets/3a21ea3e-c130-42af-b50b-bb324b06eaaa). TL;DR: After this patch the leftover memory increase may be attributed mostly to Dask or memray itself. To confirm this, I have executed the full AGC benchmark on the SWAN platform with 64 workers of the CERN condor pools for 10 times in a row. At the end of the 10th run all the workers have a total RSS of < 1GB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16094#issuecomment-2252273470
https://github.com/root-project/root/pull/16094#issuecomment-2252273470:1331,Energy Efficiency,schedul,scheduler,1331,"tributed execution, there is no more TTreeCache leaking leftover after the analysis (see any file ending with `_patch` and compare it with the same file ending with `_master`). Now that the main source of memory usage is gone, I have noticed a much smaller contribute that still seems to make the memory increase in the flamegraphs. And it seems to have something to do with the increased number of files, at least on the surface. Let's take the following two files to compare:; * test_agc_9sample_1file_10task_patch.html; * test_agc_9sample_10file_10task_patch.html. They are running exactly the same script, with all 9 RDF samples. In the first case we have 1 file per sample, in the second case 10 files per sample. The memray flamegraph report a total of 253.5 MB used for the first case and 260.9 MB used for the first case (7.4 MB delta). There are two main parts of the graph: the one deriving from the `clone` of the Dask process, where the actual analysis code is run, and the one deriving from the `_start` function where most of the Python code around the analysis is (things like `import`ing packages or the Dask worker-scheduler communication). The difference between the two graphs in the `clone` part is of 0.6 MB, the difference between the two `_start` parts is 6.7 MB, so I focus on that from now on. This 6.7 MB difference is in turn split between a 0.1 MB difference deriving from `_PyObject_VectorcallTState` and 6.6 MB difference deriving from. Finally, the vast majority of these 6.6 MB comes from:; * The metrics gathered by profiling (i.e. memray itself); * Dask communication protocol. [Screencast from 2024-07-26 10-47-18.webm](https://github.com/user-attachments/assets/3a21ea3e-c130-42af-b50b-bb324b06eaaa). TL;DR: After this patch the leftover memory increase may be attributed mostly to Dask or memray itself. To confirm this, I have executed the full AGC benchmark on the SWAN platform with 64 workers of the CERN condor pools for 10 times in a row. At the end of the 1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16094#issuecomment-2252273470
https://github.com/root-project/root/pull/16094#issuecomment-2252273470:1801,Integrability,protocol,protocol,1801,"king leftover after the analysis (see any file ending with `_patch` and compare it with the same file ending with `_master`). Now that the main source of memory usage is gone, I have noticed a much smaller contribute that still seems to make the memory increase in the flamegraphs. And it seems to have something to do with the increased number of files, at least on the surface. Let's take the following two files to compare:; * test_agc_9sample_1file_10task_patch.html; * test_agc_9sample_10file_10task_patch.html. They are running exactly the same script, with all 9 RDF samples. In the first case we have 1 file per sample, in the second case 10 files per sample. The memray flamegraph report a total of 253.5 MB used for the first case and 260.9 MB used for the first case (7.4 MB delta). There are two main parts of the graph: the one deriving from the `clone` of the Dask process, where the actual analysis code is run, and the one deriving from the `_start` function where most of the Python code around the analysis is (things like `import`ing packages or the Dask worker-scheduler communication). The difference between the two graphs in the `clone` part is of 0.6 MB, the difference between the two `_start` parts is 6.7 MB, so I focus on that from now on. This 6.7 MB difference is in turn split between a 0.1 MB difference deriving from `_PyObject_VectorcallTState` and 6.6 MB difference deriving from. Finally, the vast majority of these 6.6 MB comes from:; * The metrics gathered by profiling (i.e. memray itself); * Dask communication protocol. [Screencast from 2024-07-26 10-47-18.webm](https://github.com/user-attachments/assets/3a21ea3e-c130-42af-b50b-bb324b06eaaa). TL;DR: After this patch the leftover memory increase may be attributed mostly to Dask or memray itself. To confirm this, I have executed the full AGC benchmark on the SWAN platform with 64 workers of the CERN condor pools for 10 times in a row. At the end of the 10th run all the workers have a total RSS of < 1GB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16094#issuecomment-2252273470
https://github.com/root-project/root/pull/16094#issuecomment-2252273470:2086,Testability,benchmark,benchmark,2086,"king leftover after the analysis (see any file ending with `_patch` and compare it with the same file ending with `_master`). Now that the main source of memory usage is gone, I have noticed a much smaller contribute that still seems to make the memory increase in the flamegraphs. And it seems to have something to do with the increased number of files, at least on the surface. Let's take the following two files to compare:; * test_agc_9sample_1file_10task_patch.html; * test_agc_9sample_10file_10task_patch.html. They are running exactly the same script, with all 9 RDF samples. In the first case we have 1 file per sample, in the second case 10 files per sample. The memray flamegraph report a total of 253.5 MB used for the first case and 260.9 MB used for the first case (7.4 MB delta). There are two main parts of the graph: the one deriving from the `clone` of the Dask process, where the actual analysis code is run, and the one deriving from the `_start` function where most of the Python code around the analysis is (things like `import`ing packages or the Dask worker-scheduler communication). The difference between the two graphs in the `clone` part is of 0.6 MB, the difference between the two `_start` parts is 6.7 MB, so I focus on that from now on. This 6.7 MB difference is in turn split between a 0.1 MB difference deriving from `_PyObject_VectorcallTState` and 6.6 MB difference deriving from. Finally, the vast majority of these 6.6 MB comes from:; * The metrics gathered by profiling (i.e. memray itself); * Dask communication protocol. [Screencast from 2024-07-26 10-47-18.webm](https://github.com/user-attachments/assets/3a21ea3e-c130-42af-b50b-bb324b06eaaa). TL;DR: After this patch the leftover memory increase may be attributed mostly to Dask or memray itself. To confirm this, I have executed the full AGC benchmark on the SWAN platform with 64 workers of the CERN condor pools for 10 times in a row. At the end of the 10th run all the workers have a total RSS of < 1GB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16094#issuecomment-2252273470
https://github.com/root-project/root/pull/16094#issuecomment-2252273470:106,Usability,clear,clear,106,"I have updated the contents of the CERNBox link from the PR description with more memray graphs, it looks clear that the effect of this PR is to properly remove the artifacts generated during the distributed execution, there is no more TTreeCache leaking leftover after the analysis (see any file ending with `_patch` and compare it with the same file ending with `_master`). Now that the main source of memory usage is gone, I have noticed a much smaller contribute that still seems to make the memory increase in the flamegraphs. And it seems to have something to do with the increased number of files, at least on the surface. Let's take the following two files to compare:; * test_agc_9sample_1file_10task_patch.html; * test_agc_9sample_10file_10task_patch.html. They are running exactly the same script, with all 9 RDF samples. In the first case we have 1 file per sample, in the second case 10 files per sample. The memray flamegraph report a total of 253.5 MB used for the first case and 260.9 MB used for the first case (7.4 MB delta). There are two main parts of the graph: the one deriving from the `clone` of the Dask process, where the actual analysis code is run, and the one deriving from the `_start` function where most of the Python code around the analysis is (things like `import`ing packages or the Dask worker-scheduler communication). The difference between the two graphs in the `clone` part is of 0.6 MB, the difference between the two `_start` parts is 6.7 MB, so I focus on that from now on. This 6.7 MB difference is in turn split between a 0.1 MB difference deriving from `_PyObject_VectorcallTState` and 6.6 MB difference deriving from. Finally, the vast majority of these 6.6 MB comes from:; * The metrics gathered by profiling (i.e. memray itself); * Dask communication protocol. [Screencast from 2024-07-26 10-47-18.webm](https://github.com/user-attachments/assets/3a21ea3e-c130-42af-b50b-bb324b06eaaa). TL;DR: After this patch the leftover memory increase may be attri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16094#issuecomment-2252273470
https://github.com/root-project/root/pull/16129#issuecomment-2255350691:78,Energy Efficiency,battery,battery,78,"@linev I'm trying rebuilding from scratch now. I'm afraid I don't have enough battery, so I can't give feedback until some time after my current meeting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16129#issuecomment-2255350691
https://github.com/root-project/root/pull/16129#issuecomment-2255350691:103,Usability,feedback,feedback,103,"@linev I'm trying rebuilding from scratch now. I'm afraid I don't have enough battery, so I can't give feedback until some time after my current meeting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16129#issuecomment-2255350691
https://github.com/root-project/root/pull/16136#issuecomment-2257823786:208,Usability,simpl,simplest,208,"Maybe we anyway should enable reading into `signed char` from a `kChar` column, if only for automatic schema evolution. Users should be able to change a member from `char` to `signed char`, and it may be the simplest to enable this through the column representations rather than a field translation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16136#issuecomment-2257823786
https://github.com/root-project/root/pull/16175#issuecomment-2309556326:37,Usability,feedback,feedback,37,Trying to revive this PR: did we get feedback from ATLAS? @guitargeek,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16175#issuecomment-2309556326
https://github.com/root-project/root/pull/16176#issuecomment-2271543583:591,Modifiability,enhance,enhanced,591,"> So you mean extern template the new ExecImp?. Yes, this what I meant. > because you still have to instantiate the ""front-facing"" template . it is a trivial function, that we could even mark as 'force inline' to make it disappear. > Maybe, but I doubt that it actually achieves the goal of reducing compile time .... and neither [of the functions] seems particularly expensive to generate. . I started from the assumption that the existing code was there for a reason. Indeed if the functions are also simple/trivial, the extern template are not needed, however then the git log need to be enhanced to justify/explain that the existing optimization was in fact not needed (assuming this is the case :) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16176#issuecomment-2271543583
https://github.com/root-project/root/pull/16176#issuecomment-2271543583:637,Performance,optimiz,optimization,637,"> So you mean extern template the new ExecImp?. Yes, this what I meant. > because you still have to instantiate the ""front-facing"" template . it is a trivial function, that we could even mark as 'force inline' to make it disappear. > Maybe, but I doubt that it actually achieves the goal of reducing compile time .... and neither [of the functions] seems particularly expensive to generate. . I started from the assumption that the existing code was there for a reason. Indeed if the functions are also simple/trivial, the extern template are not needed, however then the git log need to be enhanced to justify/explain that the existing optimization was in fact not needed (assuming this is the case :) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16176#issuecomment-2271543583
https://github.com/root-project/root/pull/16176#issuecomment-2271543583:576,Testability,log,log,576,"> So you mean extern template the new ExecImp?. Yes, this what I meant. > because you still have to instantiate the ""front-facing"" template . it is a trivial function, that we could even mark as 'force inline' to make it disappear. > Maybe, but I doubt that it actually achieves the goal of reducing compile time .... and neither [of the functions] seems particularly expensive to generate. . I started from the assumption that the existing code was there for a reason. Indeed if the functions are also simple/trivial, the extern template are not needed, however then the git log need to be enhanced to justify/explain that the existing optimization was in fact not needed (assuming this is the case :) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16176#issuecomment-2271543583
https://github.com/root-project/root/pull/16176#issuecomment-2271543583:503,Usability,simpl,simple,503,"> So you mean extern template the new ExecImp?. Yes, this what I meant. > because you still have to instantiate the ""front-facing"" template . it is a trivial function, that we could even mark as 'force inline' to make it disappear. > Maybe, but I doubt that it actually achieves the goal of reducing compile time .... and neither [of the functions] seems particularly expensive to generate. . I started from the assumption that the existing code was there for a reason. Indeed if the functions are also simple/trivial, the extern template are not needed, however then the git log need to be enhanced to justify/explain that the existing optimization was in fact not needed (assuming this is the case :) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16176#issuecomment-2271543583
https://github.com/root-project/root/pull/16214#issuecomment-2295093885:138,Usability,simpl,simplify,138,"Is it possible to get the `QualType` for a template argument without parsing Clang's AST? If so, that would be much easier. I was able to simplify some of this code by implementing the template in the header, but an AST transformer is still needed to get the `QualType` and add it to the template specialization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16214#issuecomment-2295093885
https://github.com/root-project/root/issues/16244#issuecomment-2291348314:15,Usability,feedback,feedback,15,Thanks for the feedback @will-cern ! The expert is now in the loop.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16244#issuecomment-2291348314
https://github.com/root-project/root/pull/16271#issuecomment-2298682153:207,Usability,simpl,simply,207,@bellenot `build/win/cl.sh			build/win/f77.sh		build/win/ld.sh			build/win/makelib.sh		build/win/makeresource.sh` seems to have only been using in the `Makefile` and seem no longer used. Would we be able to simply removed them?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16271#issuecomment-2298682153
https://github.com/root-project/root/pull/16271#issuecomment-2298741171:203,Usability,simpl,simply,203,"> @bellenot `build/win/cl.sh build/win/f77.sh build/win/ld.sh build/win/makelib.sh build/win/makeresource.sh` seems to have only been using in the `Makefile` and seem no longer used. Would we be able to simply removed them?. Well, they can still be used by people using cygwin (if any...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16271#issuecomment-2298741171
https://github.com/root-project/root/pull/16274#issuecomment-2298776505:114,Safety,avoid,avoid,114,"Cool, thanks! I don't have a strong opinion on it either, but if it works this should be the simplest solution to avoid replacing `find_package` and we can close #8633.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16274#issuecomment-2298776505
https://github.com/root-project/root/pull/16274#issuecomment-2298776505:93,Usability,simpl,simplest,93,"Cool, thanks! I don't have a strong opinion on it either, but if it works this should be the simplest solution to avoid replacing `find_package` and we can close #8633.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16274#issuecomment-2298776505
https://github.com/root-project/root/issues/16298#issuecomment-2306614607:296,Testability,test,test,296,"This is the manifestation of a known problem with the `std::string_view` converters, that can be reproduced without RDataFrame:; ```Python; import ROOT; import cppyy. cppyy.cppdef(""""""; void foo(std::string_view input) { std::cout << input << std::endl; }; """"""). my_string = cppyy.gbl.std.string(""test""). cppyy.gbl.foo(my_string); ```; You'll see that the output in ROOT 6.32 is empty, meaning the `string_view` is not correctly initialized. This causes the RDF code to crash. This problem was already fixed in upstream cppyy, and we have a PR open to apply these fixes:; https://github.com/root-project/root/pull/16212. However, the fix is breaking some other tests, so we can't apply them yet. Thanks for the report though, because this makes it clearer how #16212 needs to be prioritized. In the meantime, the workaround is to convert your `std::strings` into Python strings, because the conversion to `std::string_view` works for them:; ```python; for col in cols:; print(col); print( tmprdf.GetColumnType(str(col) )); ```; This workaround is also backwards compatible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16298#issuecomment-2306614607
https://github.com/root-project/root/issues/16298#issuecomment-2306614607:660,Testability,test,tests,660,"This is the manifestation of a known problem with the `std::string_view` converters, that can be reproduced without RDataFrame:; ```Python; import ROOT; import cppyy. cppyy.cppdef(""""""; void foo(std::string_view input) { std::cout << input << std::endl; }; """"""). my_string = cppyy.gbl.std.string(""test""). cppyy.gbl.foo(my_string); ```; You'll see that the output in ROOT 6.32 is empty, meaning the `string_view` is not correctly initialized. This causes the RDF code to crash. This problem was already fixed in upstream cppyy, and we have a PR open to apply these fixes:; https://github.com/root-project/root/pull/16212. However, the fix is breaking some other tests, so we can't apply them yet. Thanks for the report though, because this makes it clearer how #16212 needs to be prioritized. In the meantime, the workaround is to convert your `std::strings` into Python strings, because the conversion to `std::string_view` works for them:; ```python; for col in cols:; print(col); print( tmprdf.GetColumnType(str(col) )); ```; This workaround is also backwards compatible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16298#issuecomment-2306614607
https://github.com/root-project/root/issues/16298#issuecomment-2306614607:747,Usability,clear,clearer,747,"This is the manifestation of a known problem with the `std::string_view` converters, that can be reproduced without RDataFrame:; ```Python; import ROOT; import cppyy. cppyy.cppdef(""""""; void foo(std::string_view input) { std::cout << input << std::endl; }; """"""). my_string = cppyy.gbl.std.string(""test""). cppyy.gbl.foo(my_string); ```; You'll see that the output in ROOT 6.32 is empty, meaning the `string_view` is not correctly initialized. This causes the RDF code to crash. This problem was already fixed in upstream cppyy, and we have a PR open to apply these fixes:; https://github.com/root-project/root/pull/16212. However, the fix is breaking some other tests, so we can't apply them yet. Thanks for the report though, because this makes it clearer how #16212 needs to be prioritized. In the meantime, the workaround is to convert your `std::strings` into Python strings, because the conversion to `std::string_view` works for them:; ```python; for col in cols:; print(col); print( tmprdf.GetColumnType(str(col) )); ```; This workaround is also backwards compatible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16298#issuecomment-2306614607
https://github.com/root-project/root/pull/16309#issuecomment-2317916267:473,Usability,clear,clear,473,"> * An important part of this PR is deciding the naming scheme for the new user-facing API. I see two main ways: being pedantic or being coherent. Pedantic would mean that the function for headers should be `IncludeHeaders`, the one for shared libraries probably should be `LoadSharedLibs` etc. Instead if we want to be coherent and also hint at the fact that this is a tool for distributed execution, we could decide to name everything `Distribute*` so that it is already clear in the name of the function that the code/header/file will be uploaded to the workers somehow. Personally, I would go for the `Distribute*` approach but we can discuss this next week in person. . > * I believe we need a section in the docs in `RDataFrame.cxx` describing these functions, with examples of usage. Ideally what I would like to see is something like a transition help guide, just to give an example; > ; > ```python; > # If you do this in your local RDataFrame script; > ROOT.gInterpreter.Declare(""my_code""); > df.Define(...); > ; > # Do this in distributed RDF; > ROOT.RDF.Distributed.DistributeCode(""my_code""); > df.Define(...); > ```. sure, I will do that next. . I implemented all your comments (but the leftover debug statements - on purpose, as there are a few things we still need to debug - see my comments in the roottest PR - especially multiple declarations).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16309#issuecomment-2317916267
https://github.com/root-project/root/pull/16309#issuecomment-2317916267:860,Usability,guid,guide,860,"> * An important part of this PR is deciding the naming scheme for the new user-facing API. I see two main ways: being pedantic or being coherent. Pedantic would mean that the function for headers should be `IncludeHeaders`, the one for shared libraries probably should be `LoadSharedLibs` etc. Instead if we want to be coherent and also hint at the fact that this is a tool for distributed execution, we could decide to name everything `Distribute*` so that it is already clear in the name of the function that the code/header/file will be uploaded to the workers somehow. Personally, I would go for the `Distribute*` approach but we can discuss this next week in person. . > * I believe we need a section in the docs in `RDataFrame.cxx` describing these functions, with examples of usage. Ideally what I would like to see is something like a transition help guide, just to give an example; > ; > ```python; > # If you do this in your local RDataFrame script; > ROOT.gInterpreter.Declare(""my_code""); > df.Define(...); > ; > # Do this in distributed RDF; > ROOT.RDF.Distributed.DistributeCode(""my_code""); > df.Define(...); > ```. sure, I will do that next. . I implemented all your comments (but the leftover debug statements - on purpose, as there are a few things we still need to debug - see my comments in the roottest PR - especially multiple declarations).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16309#issuecomment-2317916267
https://github.com/root-project/root/issues/16312#issuecomment-2320321003:80,Usability,simpl,simply,80,Do I understand correctly this affects only scoped enums within a vector? Can I simply fix it on my side by moving to `enum class Foo : int {}`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16312#issuecomment-2320321003
https://github.com/root-project/root/issues/16312#issuecomment-2333276845:94,Usability,simpl,simply,94,"For the record, as you might have seen in https://github.com/AliceO2Group/AliceO2/pull/13464, simply changing the types breaks reading back old files (i.e. two shorts are read in an int). Could you comment when do you expect to have a fix for this on your side which applies to 6.32.2 and if it will allow old code to still read new data (and viceversa new code / old data)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16312#issuecomment-2333276845
https://github.com/root-project/root/issues/16312#issuecomment-2334928339:416,Usability,clear,clear,416,"The following custom Streamer works around the issue:; ```; template <typename Flags>; inline void CalArray<Flags>::Streamer(TBuffer &R__b); {; // Stream an object of class CalArray<PadFlags>. if (R__b.IsReading()) {; UInt_t R__s, R__c;; Version_t R__v = R__b.ReadVersion(&R__s, &R__c);; if (R__v <= 3) {; {; UInt_t start, count;; Version_t vers = R__b.ReadVersion(&start, &count);. std::vector<int> R__stl;; R__stl.clear();; int R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (int R__i = 0; R__i < R__n; R__i++) {; Int_t readtemp;; R__b >> readtemp;; R__stl.push_back(readtemp);; }; R__b.CheckByteCount(start, count, ""stl collection of enums"");. mFlags.clear();; auto data = reinterpret_cast<unsigned short*>(R__stl.data());; constexpr size_t delta = sizeof(int)/sizeof(Flags);; for(int i = 0; i < R__n; ++i); mFlags.push_back(static_cast<PadFlags>( data[i] ));; }; int tmp;; R__b >> tmp;; mPadSubset = static_cast<PadSubset>(tmp);. R__b.CheckByteCount(R__s, R__c, CalArray::IsA());; } else {; R__b.ReadClassBuffer(CalArray<Flags>::Class(),this, R__v, R__s, R__c);; }; } else {; R__b.WriteClassBuffer(CalArray<Flags>::Class(),this);; }; }; ```; [Call to `ReadClassBuffer` was corrected to add missing parameters]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16312#issuecomment-2334928339
https://github.com/root-project/root/issues/16312#issuecomment-2334928339:656,Usability,clear,clear,656,"The following custom Streamer works around the issue:; ```; template <typename Flags>; inline void CalArray<Flags>::Streamer(TBuffer &R__b); {; // Stream an object of class CalArray<PadFlags>. if (R__b.IsReading()) {; UInt_t R__s, R__c;; Version_t R__v = R__b.ReadVersion(&R__s, &R__c);; if (R__v <= 3) {; {; UInt_t start, count;; Version_t vers = R__b.ReadVersion(&start, &count);. std::vector<int> R__stl;; R__stl.clear();; int R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (int R__i = 0; R__i < R__n; R__i++) {; Int_t readtemp;; R__b >> readtemp;; R__stl.push_back(readtemp);; }; R__b.CheckByteCount(start, count, ""stl collection of enums"");. mFlags.clear();; auto data = reinterpret_cast<unsigned short*>(R__stl.data());; constexpr size_t delta = sizeof(int)/sizeof(Flags);; for(int i = 0; i < R__n; ++i); mFlags.push_back(static_cast<PadFlags>( data[i] ));; }; int tmp;; R__b >> tmp;; mPadSubset = static_cast<PadSubset>(tmp);. R__b.CheckByteCount(R__s, R__c, CalArray::IsA());; } else {; R__b.ReadClassBuffer(CalArray<Flags>::Class(),this, R__v, R__s, R__c);; }; } else {; R__b.WriteClassBuffer(CalArray<Flags>::Class(),this);; }; }; ```; [Call to `ReadClassBuffer` was corrected to add missing parameters]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16312#issuecomment-2334928339
https://github.com/root-project/root/issues/16327#issuecomment-2320251654:252,Deployability,install,installing,252,"Pretty much the same motivation of having new headers in ROOTSYS/include/ROOT. The upshot is that the third party codebase will become clearer of that `TList.h` is a ROOT thing; and more importantly we will define away a class of problems we have when installing ROOT. Right now on some systems we install everything in `/usr/include`, which is not a good practice unless one is libc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16327#issuecomment-2320251654
https://github.com/root-project/root/issues/16327#issuecomment-2320251654:298,Deployability,install,install,298,"Pretty much the same motivation of having new headers in ROOTSYS/include/ROOT. The upshot is that the third party codebase will become clearer of that `TList.h` is a ROOT thing; and more importantly we will define away a class of problems we have when installing ROOT. Right now on some systems we install everything in `/usr/include`, which is not a good practice unless one is libc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16327#issuecomment-2320251654
https://github.com/root-project/root/issues/16327#issuecomment-2320251654:135,Usability,clear,clearer,135,"Pretty much the same motivation of having new headers in ROOTSYS/include/ROOT. The upshot is that the third party codebase will become clearer of that `TList.h` is a ROOT thing; and more importantly we will define away a class of problems we have when installing ROOT. Right now on some systems we install everything in `/usr/include`, which is not a good practice unless one is libc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16327#issuecomment-2320251654
https://github.com/root-project/root/issues/16327#issuecomment-2346961309:166,Integrability,depend,dependencies,166,Some time ago we adjust cmake files so that when building ROOT libraries we using headers from source directories and not headers from `$ROOTSYS/include`. This makes dependencies between ROOT components more clear. I just checked $ROOTSYS/include - there are 1476 files. And going this way we will double number of files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16327#issuecomment-2346961309
https://github.com/root-project/root/issues/16327#issuecomment-2346961309:208,Usability,clear,clear,208,Some time ago we adjust cmake files so that when building ROOT libraries we using headers from source directories and not headers from `$ROOTSYS/include`. This makes dependencies between ROOT components more clear. I just checked $ROOTSYS/include - there are 1476 files. And going this way we will double number of files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16327#issuecomment-2346961309
https://github.com/root-project/root/pull/16348#issuecomment-2328279111:47,Usability,simpl,simply,47,TSVG (old code) is like TPDF or TPostScript is simply producing an SVG file from what is displayed it does not create a new color.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16348#issuecomment-2328279111
https://github.com/root-project/root/pull/16351#issuecomment-2323919858:67,Usability,guid,guide,67,"I agree with Jonas it should stay ""Legacy"" as mentioned in the ref guide: https://root.cern/doc/v632/classTSpectrum.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16351#issuecomment-2323919858
https://github.com/root-project/root/pull/16363#issuecomment-2327424850:322,Security,access,access,322,It seems clear that the two name `RNTupleUnownedView` and `RNTupleOwnedView` are too ambiguous (no way to know who the subject of the '[un]owned' is (Is the the user or the system that owns (or not)). Furthermore I am confused by the question itself. A `view` is typically a 'small' object that does not own what it gives access to (e.g. `std::string_view` or its cousin `std::span`). So is `view` even the right term? Completely related can you remind me what information we are trying to pass to the user with the 2 distinct names (what do they need to do differently)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16363#issuecomment-2327424850
https://github.com/root-project/root/pull/16363#issuecomment-2327424850:9,Usability,clear,clear,9,It seems clear that the two name `RNTupleUnownedView` and `RNTupleOwnedView` are too ambiguous (no way to know who the subject of the '[un]owned' is (Is the the user or the system that owns (or not)). Furthermore I am confused by the question itself. A `view` is typically a 'small' object that does not own what it gives access to (e.g. `std::string_view` or its cousin `std::span`). So is `view` even the right term? Completely related can you remind me what information we are trying to pass to the user with the 2 distinct names (what do they need to do differently)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16363#issuecomment-2327424850
https://github.com/root-project/root/pull/16363#issuecomment-2337291204:226,Usability,clear,clearly,226,"Just an idea: would it improve the situation if we kept the one name `RNTupleView` with a template parameter that distinguishes between owning and non-owning, but we make that template parameter an enum so that the meaning is clearly spelled out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16363#issuecomment-2337291204
https://github.com/root-project/root/pull/16363#issuecomment-2337593312:228,Usability,clear,clearly,228,"> Just an idea: would it improve the situation if we kept the one name `RNTupleView` with a template parameter that distinguishes between owning and non-owning, but we make that template parameter an enum so that the meaning is clearly spelled out. I guess we should ask the experiments about this, since this change proposal came from them. ; Personally, I'm not sure how much this would help, given that we would just move the naming problem to the enum values rather than the classes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16363#issuecomment-2337593312
https://github.com/root-project/root/pull/16363#issuecomment-2337820694:230,Usability,clear,clearly,230,"> > Just an idea: would it improve the situation if we kept the one name `RNTupleView` with a template parameter that distinguishes between owning and non-owning, but we make that template parameter an enum so that the meaning is clearly spelled out.; > ; > I guess we should ask the experiments about this, since this change proposal came from them. Personally, I'm not sure how much this would help, given that we would just move the naming problem to the enum values rather than the classes. I agree that we should discuss it with the API reviewers. The advantage I see is that I find it easier to be verbose in the enum constant names (e.g., `kOwnedByCaller`, `kOwnedByROOT`) than in the class name. Especially, if the non-owning view is the default value. E.g. ```; auto v1 = reader->GetView<float>(...);; auto v2 = reader->GetView<float, EViewType::kOwnedByCaller>(...); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16363#issuecomment-2337820694
https://github.com/root-project/root/issues/16374#issuecomment-2330908221:161,Usability,simpl,simple,161,> 3. Move the `find_package(OpenSSL) from inside `builtins/xrootd/CMakeLists.txt`to it inclusion point in`SearchInstalledSoftware.cmake`. Sounds like a good and simple solution to me!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16374#issuecomment-2330908221
https://github.com/root-project/root/issues/16380#issuecomment-2335109569:540,Availability,redundant,redundant,540,"Hi, thanks for the question!. The standard way of do this in ROOT is to use [TParameter](https://root.cern.ch/doc/v612/classTParameter.html) or an `std::` container, as also discussed here:; https://root-forum.cern.ch/t/writing-simple-variable-in-root-files/11094/5. For example:; ```C++; void write() {. TParameter<int> x1{""x1"", 5};; std::vector<int> x2{4};. std::unique_ptr<TFile> file{TFile::Open(""myfile.root"", ""RECREATE"")};. file->WriteObject(&x1, ""x1"");; file->WriteObject(&x2, ""x2"");; }; ```; Therefore, having this functionality is redundant as therefore it was removed. If you still need to use `RooInt` in your framework for backwards compatibility, please just copy-paste its source code into your framework. It's very simple:; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/inc/RooInt.h; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/src/RooInt.cxx; You can even remove the sorting interface if you don't need it. Are these possible ways forward? I would be very reluctant to bring this class back, because RooFit is for statistical analysis. Using its classes to store metadata in a ROOT file is really not the idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16380#issuecomment-2335109569
https://github.com/root-project/root/issues/16380#issuecomment-2335109569:792,Deployability,patch,patches,792,"Hi, thanks for the question!. The standard way of do this in ROOT is to use [TParameter](https://root.cern.ch/doc/v612/classTParameter.html) or an `std::` container, as also discussed here:; https://root-forum.cern.ch/t/writing-simple-variable-in-root-files/11094/5. For example:; ```C++; void write() {. TParameter<int> x1{""x1"", 5};; std::vector<int> x2{4};. std::unique_ptr<TFile> file{TFile::Open(""myfile.root"", ""RECREATE"")};. file->WriteObject(&x1, ""x1"");; file->WriteObject(&x2, ""x2"");; }; ```; Therefore, having this functionality is redundant as therefore it was removed. If you still need to use `RooInt` in your framework for backwards compatibility, please just copy-paste its source code into your framework. It's very simple:; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/inc/RooInt.h; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/src/RooInt.cxx; You can even remove the sorting interface if you don't need it. Are these possible ways forward? I would be very reluctant to bring this class back, because RooFit is for statistical analysis. Using its classes to store metadata in a ROOT file is really not the idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16380#issuecomment-2335109569
https://github.com/root-project/root/issues/16380#issuecomment-2335109569:885,Deployability,patch,patches,885,"Hi, thanks for the question!. The standard way of do this in ROOT is to use [TParameter](https://root.cern.ch/doc/v612/classTParameter.html) or an `std::` container, as also discussed here:; https://root-forum.cern.ch/t/writing-simple-variable-in-root-files/11094/5. For example:; ```C++; void write() {. TParameter<int> x1{""x1"", 5};; std::vector<int> x2{4};. std::unique_ptr<TFile> file{TFile::Open(""myfile.root"", ""RECREATE"")};. file->WriteObject(&x1, ""x1"");; file->WriteObject(&x2, ""x2"");; }; ```; Therefore, having this functionality is redundant as therefore it was removed. If you still need to use `RooInt` in your framework for backwards compatibility, please just copy-paste its source code into your framework. It's very simple:; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/inc/RooInt.h; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/src/RooInt.cxx; You can even remove the sorting interface if you don't need it. Are these possible ways forward? I would be very reluctant to bring this class back, because RooFit is for statistical analysis. Using its classes to store metadata in a ROOT file is really not the idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16380#issuecomment-2335109569
https://github.com/root-project/root/issues/16380#issuecomment-2335109569:959,Integrability,interface,interface,959,"Hi, thanks for the question!. The standard way of do this in ROOT is to use [TParameter](https://root.cern.ch/doc/v612/classTParameter.html) or an `std::` container, as also discussed here:; https://root-forum.cern.ch/t/writing-simple-variable-in-root-files/11094/5. For example:; ```C++; void write() {. TParameter<int> x1{""x1"", 5};; std::vector<int> x2{4};. std::unique_ptr<TFile> file{TFile::Open(""myfile.root"", ""RECREATE"")};. file->WriteObject(&x1, ""x1"");; file->WriteObject(&x2, ""x2"");; }; ```; Therefore, having this functionality is redundant as therefore it was removed. If you still need to use `RooInt` in your framework for backwards compatibility, please just copy-paste its source code into your framework. It's very simple:; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/inc/RooInt.h; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/src/RooInt.cxx; You can even remove the sorting interface if you don't need it. Are these possible ways forward? I would be very reluctant to bring this class back, because RooFit is for statistical analysis. Using its classes to store metadata in a ROOT file is really not the idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16380#issuecomment-2335109569
https://github.com/root-project/root/issues/16380#issuecomment-2335109569:235,Modifiability,variab,variable-in-root-files,235,"Hi, thanks for the question!. The standard way of do this in ROOT is to use [TParameter](https://root.cern.ch/doc/v612/classTParameter.html) or an `std::` container, as also discussed here:; https://root-forum.cern.ch/t/writing-simple-variable-in-root-files/11094/5. For example:; ```C++; void write() {. TParameter<int> x1{""x1"", 5};; std::vector<int> x2{4};. std::unique_ptr<TFile> file{TFile::Open(""myfile.root"", ""RECREATE"")};. file->WriteObject(&x1, ""x1"");; file->WriteObject(&x2, ""x2"");; }; ```; Therefore, having this functionality is redundant as therefore it was removed. If you still need to use `RooInt` in your framework for backwards compatibility, please just copy-paste its source code into your framework. It's very simple:; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/inc/RooInt.h; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/src/RooInt.cxx; You can even remove the sorting interface if you don't need it. Are these possible ways forward? I would be very reluctant to bring this class back, because RooFit is for statistical analysis. Using its classes to store metadata in a ROOT file is really not the idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16380#issuecomment-2335109569
https://github.com/root-project/root/issues/16380#issuecomment-2335109569:540,Safety,redund,redundant,540,"Hi, thanks for the question!. The standard way of do this in ROOT is to use [TParameter](https://root.cern.ch/doc/v612/classTParameter.html) or an `std::` container, as also discussed here:; https://root-forum.cern.ch/t/writing-simple-variable-in-root-files/11094/5. For example:; ```C++; void write() {. TParameter<int> x1{""x1"", 5};; std::vector<int> x2{4};. std::unique_ptr<TFile> file{TFile::Open(""myfile.root"", ""RECREATE"")};. file->WriteObject(&x1, ""x1"");; file->WriteObject(&x2, ""x2"");; }; ```; Therefore, having this functionality is redundant as therefore it was removed. If you still need to use `RooInt` in your framework for backwards compatibility, please just copy-paste its source code into your framework. It's very simple:; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/inc/RooInt.h; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/src/RooInt.cxx; You can even remove the sorting interface if you don't need it. Are these possible ways forward? I would be very reluctant to bring this class back, because RooFit is for statistical analysis. Using its classes to store metadata in a ROOT file is really not the idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16380#issuecomment-2335109569
https://github.com/root-project/root/issues/16380#issuecomment-2335109569:228,Usability,simpl,simple-variable-in-root-files,228,"Hi, thanks for the question!. The standard way of do this in ROOT is to use [TParameter](https://root.cern.ch/doc/v612/classTParameter.html) or an `std::` container, as also discussed here:; https://root-forum.cern.ch/t/writing-simple-variable-in-root-files/11094/5. For example:; ```C++; void write() {. TParameter<int> x1{""x1"", 5};; std::vector<int> x2{4};. std::unique_ptr<TFile> file{TFile::Open(""myfile.root"", ""RECREATE"")};. file->WriteObject(&x1, ""x1"");; file->WriteObject(&x2, ""x2"");; }; ```; Therefore, having this functionality is redundant as therefore it was removed. If you still need to use `RooInt` in your framework for backwards compatibility, please just copy-paste its source code into your framework. It's very simple:; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/inc/RooInt.h; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/src/RooInt.cxx; You can even remove the sorting interface if you don't need it. Are these possible ways forward? I would be very reluctant to bring this class back, because RooFit is for statistical analysis. Using its classes to store metadata in a ROOT file is really not the idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16380#issuecomment-2335109569
https://github.com/root-project/root/issues/16380#issuecomment-2335109569:730,Usability,simpl,simple,730,"Hi, thanks for the question!. The standard way of do this in ROOT is to use [TParameter](https://root.cern.ch/doc/v612/classTParameter.html) or an `std::` container, as also discussed here:; https://root-forum.cern.ch/t/writing-simple-variable-in-root-files/11094/5. For example:; ```C++; void write() {. TParameter<int> x1{""x1"", 5};; std::vector<int> x2{4};. std::unique_ptr<TFile> file{TFile::Open(""myfile.root"", ""RECREATE"")};. file->WriteObject(&x1, ""x1"");; file->WriteObject(&x2, ""x2"");; }; ```; Therefore, having this functionality is redundant as therefore it was removed. If you still need to use `RooInt` in your framework for backwards compatibility, please just copy-paste its source code into your framework. It's very simple:; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/inc/RooInt.h; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/src/RooInt.cxx; You can even remove the sorting interface if you don't need it. Are these possible ways forward? I would be very reluctant to bring this class back, because RooFit is for statistical analysis. Using its classes to store metadata in a ROOT file is really not the idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16380#issuecomment-2335109569
https://github.com/root-project/root/issues/16380#issuecomment-2336431234:277,Deployability,update,update,277,"Thank you for the answer: I wish I had noticed `TParameter` years ago, since `RooInt` did the job but it was clearly not the semantically correct choice.; We'll give a chance to `TParameter` for the future, and try to surrogate `RooInt` (and `RooFloat`) in the new code.; I'll update and eventually close this issue when we see it works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16380#issuecomment-2336431234
https://github.com/root-project/root/issues/16380#issuecomment-2336431234:109,Usability,clear,clearly,109,"Thank you for the answer: I wish I had noticed `TParameter` years ago, since `RooInt` did the job but it was clearly not the semantically correct choice.; We'll give a chance to `TParameter` for the future, and try to surrogate `RooInt` (and `RooFloat`) in the new code.; I'll update and eventually close this issue when we see it works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16380#issuecomment-2336431234
https://github.com/root-project/root/pull/16385#issuecomment-2337861300:5,Availability,failure,failure,5,Test failure in `alma9-clang` unrelated:; ```txt; TEST FAILURES:; 470:gtest-tree-dataframe-test-dataframe-simple; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16385#issuecomment-2337861300
https://github.com/root-project/root/pull/16385#issuecomment-2337861300:91,Testability,test,test-dataframe-simple,91,Test failure in `alma9-clang` unrelated:; ```txt; TEST FAILURES:; 470:gtest-tree-dataframe-test-dataframe-simple; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16385#issuecomment-2337861300
https://github.com/root-project/root/pull/16385#issuecomment-2337861300:106,Usability,simpl,simple,106,Test failure in `alma9-clang` unrelated:; ```txt; TEST FAILURES:; 470:gtest-tree-dataframe-test-dataframe-simple; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16385#issuecomment-2337861300
https://github.com/root-project/root/pull/16390#issuecomment-2352913035:217,Usability,clear,clearly,217,> This column type stores floating point values on disk as integers with a user-defined precision (from 3 to 32 bits) and a user-defined value range. . This sounds very similar to Double32 ... We will need to explain clearly the differences and advantages ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16390#issuecomment-2352913035
https://github.com/root-project/root/issues/16405#issuecomment-2345639881:399,Availability,error,error,399,"Maybe to be clearer, I would expect the output to be:; ```; TypeError: none of the 2 overloaded methods succeeded. Full details:; void MyClass::MyMethod(const MyClass::MyObj& x, bool another) =>; TypeError: takes at least 2 arguments (1 given); void MyClass::MyMethod(const MyClass::MyObj& x = """") =>; RuntimeError: My exception; ```; I.e. the second method didn't fail because of a conversion type error, it failed because the method threw a runtime exception",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16405#issuecomment-2345639881
https://github.com/root-project/root/issues/16405#issuecomment-2345639881:12,Usability,clear,clearer,12,"Maybe to be clearer, I would expect the output to be:; ```; TypeError: none of the 2 overloaded methods succeeded. Full details:; void MyClass::MyMethod(const MyClass::MyObj& x, bool another) =>; TypeError: takes at least 2 arguments (1 given); void MyClass::MyMethod(const MyClass::MyObj& x = """") =>; RuntimeError: My exception; ```; I.e. the second method didn't fail because of a conversion type error, it failed because the method threw a runtime exception",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16405#issuecomment-2345639881
https://github.com/root-project/root/issues/16419#issuecomment-2377653005:9,Deployability,update,update,9,"We don't update existing ROOT releases. The fix will be in the next ROOT release, which is either 6.32.08 or 6.34.00. And thanks for the feedback! Good that you know about these options already.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16419#issuecomment-2377653005
https://github.com/root-project/root/issues/16419#issuecomment-2377653005:30,Deployability,release,releases,30,"We don't update existing ROOT releases. The fix will be in the next ROOT release, which is either 6.32.08 or 6.34.00. And thanks for the feedback! Good that you know about these options already.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16419#issuecomment-2377653005
https://github.com/root-project/root/issues/16419#issuecomment-2377653005:73,Deployability,release,release,73,"We don't update existing ROOT releases. The fix will be in the next ROOT release, which is either 6.32.08 or 6.34.00. And thanks for the feedback! Good that you know about these options already.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16419#issuecomment-2377653005
https://github.com/root-project/root/issues/16419#issuecomment-2377653005:137,Usability,feedback,feedback,137,"We don't update existing ROOT releases. The fix will be in the next ROOT release, which is either 6.32.08 or 6.34.00. And thanks for the feedback! Good that you know about these options already.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16419#issuecomment-2377653005
https://github.com/root-project/root/issues/16428#issuecomment-2350896986:211,Deployability,install,install,211,"Thanks. We have slightly different systems and configs; ```; System: Darwin-24.1.0; ROOT Platform: macosx; ROOT Architecture: macosxarm64; Processor: 8 core Apple M2 (arm64); Build type: Release; Install path: /install/; Compiler: AppleClang 16.0.0.16000026; C++ standard: 20; Compiler flags:; -- ; - C: -m64 -pipe -W -Wall -fsigned-char -fno-common -Qunused-arguments -pthread; - C (build type specific): -O3 -DNDEBUG; - C++: -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++; - C++ (build type specific): -O3 -DNDEBUG; -- Linker flags:; - Executable: -mmacosx-version-min=15.1; - Module: ; - Shared: ; ```. For the moment, I cannot yet reproduce the issue on our devel/build nodes. As you saw, I added in the loop our Apple and graphics expert in the loop. Do you manage to start a browser when starting root in batch mode, i.e. `root -b` (as a test, of course it's not overly useful for the user experience)?; I can propose a temporary workaround to unblock you: could you try to boot root enabling web graphics (still experimental): `root --web`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16428#issuecomment-2350896986
https://github.com/root-project/root/issues/16428#issuecomment-2350896986:47,Modifiability,config,configs,47,"Thanks. We have slightly different systems and configs; ```; System: Darwin-24.1.0; ROOT Platform: macosx; ROOT Architecture: macosxarm64; Processor: 8 core Apple M2 (arm64); Build type: Release; Install path: /install/; Compiler: AppleClang 16.0.0.16000026; C++ standard: 20; Compiler flags:; -- ; - C: -m64 -pipe -W -Wall -fsigned-char -fno-common -Qunused-arguments -pthread; - C (build type specific): -O3 -DNDEBUG; - C++: -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++; - C++ (build type specific): -O3 -DNDEBUG; -- Linker flags:; - Executable: -mmacosx-version-min=15.1; - Module: ; - Shared: ; ```. For the moment, I cannot yet reproduce the issue on our devel/build nodes. As you saw, I added in the loop our Apple and graphics expert in the loop. Do you manage to start a browser when starting root in batch mode, i.e. `root -b` (as a test, of course it's not overly useful for the user experience)?; I can propose a temporary workaround to unblock you: could you try to boot root enabling web graphics (still experimental): `root --web`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16428#issuecomment-2350896986
https://github.com/root-project/root/issues/16428#issuecomment-2350896986:1106,Testability,test,test,1106,"Thanks. We have slightly different systems and configs; ```; System: Darwin-24.1.0; ROOT Platform: macosx; ROOT Architecture: macosxarm64; Processor: 8 core Apple M2 (arm64); Build type: Release; Install path: /install/; Compiler: AppleClang 16.0.0.16000026; C++ standard: 20; Compiler flags:; -- ; - C: -m64 -pipe -W -Wall -fsigned-char -fno-common -Qunused-arguments -pthread; - C (build type specific): -O3 -DNDEBUG; - C++: -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++; - C++ (build type specific): -O3 -DNDEBUG; -- Linker flags:; - Executable: -mmacosx-version-min=15.1; - Module: ; - Shared: ; ```. For the moment, I cannot yet reproduce the issue on our devel/build nodes. As you saw, I added in the loop our Apple and graphics expert in the loop. Do you manage to start a browser when starting root in batch mode, i.e. `root -b` (as a test, of course it's not overly useful for the user experience)?; I can propose a temporary workaround to unblock you: could you try to boot root enabling web graphics (still experimental): `root --web`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16428#issuecomment-2350896986
https://github.com/root-project/root/issues/16428#issuecomment-2350896986:1153,Usability,user experience,user experience,1153,"Thanks. We have slightly different systems and configs; ```; System: Darwin-24.1.0; ROOT Platform: macosx; ROOT Architecture: macosxarm64; Processor: 8 core Apple M2 (arm64); Build type: Release; Install path: /install/; Compiler: AppleClang 16.0.0.16000026; C++ standard: 20; Compiler flags:; -- ; - C: -m64 -pipe -W -Wall -fsigned-char -fno-common -Qunused-arguments -pthread; - C (build type specific): -O3 -DNDEBUG; - C++: -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++; - C++ (build type specific): -O3 -DNDEBUG; -- Linker flags:; - Executable: -mmacosx-version-min=15.1; - Module: ; - Shared: ; ```. For the moment, I cannot yet reproduce the issue on our devel/build nodes. As you saw, I added in the loop our Apple and graphics expert in the loop. Do you manage to start a browser when starting root in batch mode, i.e. `root -b` (as a test, of course it's not overly useful for the user experience)?; I can propose a temporary workaround to unblock you: could you try to boot root enabling web graphics (still experimental): `root --web`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16428#issuecomment-2350896986
https://github.com/root-project/root/pull/16433#issuecomment-2354468531:162,Deployability,install,installers,162,"In general, I think this is a good change. Can you confirm that nothing we do in Windows is affected by this change? It is not clear to me what ""creating Windows installers automatically"" actually means.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16433#issuecomment-2354468531
https://github.com/root-project/root/pull/16433#issuecomment-2354468531:127,Usability,clear,clear,127,"In general, I think this is a good change. Can you confirm that nothing we do in Windows is affected by this change? It is not clear to me what ""creating Windows installers automatically"" actually means.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16433#issuecomment-2354468531
https://github.com/root-project/root/issues/16475#issuecomment-2365248206:483,Availability,fault,faulty,483,"The problem is that RDF tries to open the file to check that it's valid. The logic for the file opening is at https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/dataframe/src/RLoopManager.cxx#L1133 . In particular, because of the presence of the `?` token, the string is parsed as a glob. Now in many cases that would be harmless albeit a tiny overhead (it would just return the same file name to open), but in this particular case it triggers a faulty behaviour. The glob parsing attempts at traversing the remote xrootd directory (see [here](https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/tree/src/InternalTreeUtils.cxx#L471)), but since the permission is just for the single file with the token and not for the entire directory, it leads to the `user access restricted` error you post above. Now, I believe the most sane course of action would be to refine the logic that checks whether the input file name is a glob. I could simply add a check for the `xrd.wantprot` token, but probably we want to have a more authoritative list of all the tokens that should make the file name not be parsed as a glob. This probably includes not only xrootd tokens but also anything https-related. Or we could adopt a different strategy for glob detection altogether. Thoughts @dpiparo @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16475#issuecomment-2365248206
https://github.com/root-project/root/issues/16475#issuecomment-2365248206:851,Availability,error,error,851,"The problem is that RDF tries to open the file to check that it's valid. The logic for the file opening is at https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/dataframe/src/RLoopManager.cxx#L1133 . In particular, because of the presence of the `?` token, the string is parsed as a glob. Now in many cases that would be harmless albeit a tiny overhead (it would just return the same file name to open), but in this particular case it triggers a faulty behaviour. The glob parsing attempts at traversing the remote xrootd directory (see [here](https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/tree/src/InternalTreeUtils.cxx#L471)), but since the permission is just for the single file with the token and not for the entire directory, it leads to the `user access restricted` error you post above. Now, I believe the most sane course of action would be to refine the logic that checks whether the input file name is a glob. I could simply add a check for the `xrd.wantprot` token, but probably we want to have a more authoritative list of all the tokens that should make the file name not be parsed as a glob. This probably includes not only xrootd tokens but also anything https-related. Or we could adopt a different strategy for glob detection altogether. Thoughts @dpiparo @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16475#issuecomment-2365248206
https://github.com/root-project/root/issues/16475#issuecomment-2365248206:1312,Safety,detect,detection,1312,"The problem is that RDF tries to open the file to check that it's valid. The logic for the file opening is at https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/dataframe/src/RLoopManager.cxx#L1133 . In particular, because of the presence of the `?` token, the string is parsed as a glob. Now in many cases that would be harmless albeit a tiny overhead (it would just return the same file name to open), but in this particular case it triggers a faulty behaviour. The glob parsing attempts at traversing the remote xrootd directory (see [here](https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/tree/src/InternalTreeUtils.cxx#L471)), but since the permission is just for the single file with the token and not for the entire directory, it leads to the `user access restricted` error you post above. Now, I believe the most sane course of action would be to refine the logic that checks whether the input file name is a glob. I could simply add a check for the `xrd.wantprot` token, but probably we want to have a more authoritative list of all the tokens that should make the file name not be parsed as a glob. This probably includes not only xrootd tokens but also anything https-related. Or we could adopt a different strategy for glob detection altogether. Thoughts @dpiparo @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16475#issuecomment-2365248206
https://github.com/root-project/root/issues/16475#issuecomment-2365248206:832,Security,access,access,832,"The problem is that RDF tries to open the file to check that it's valid. The logic for the file opening is at https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/dataframe/src/RLoopManager.cxx#L1133 . In particular, because of the presence of the `?` token, the string is parsed as a glob. Now in many cases that would be harmless albeit a tiny overhead (it would just return the same file name to open), but in this particular case it triggers a faulty behaviour. The glob parsing attempts at traversing the remote xrootd directory (see [here](https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/tree/src/InternalTreeUtils.cxx#L471)), but since the permission is just for the single file with the token and not for the entire directory, it leads to the `user access restricted` error you post above. Now, I believe the most sane course of action would be to refine the logic that checks whether the input file name is a glob. I could simply add a check for the `xrd.wantprot` token, but probably we want to have a more authoritative list of all the tokens that should make the file name not be parsed as a glob. This probably includes not only xrootd tokens but also anything https-related. Or we could adopt a different strategy for glob detection altogether. Thoughts @dpiparo @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16475#issuecomment-2365248206
https://github.com/root-project/root/issues/16475#issuecomment-2365248206:77,Testability,log,logic,77,"The problem is that RDF tries to open the file to check that it's valid. The logic for the file opening is at https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/dataframe/src/RLoopManager.cxx#L1133 . In particular, because of the presence of the `?` token, the string is parsed as a glob. Now in many cases that would be harmless albeit a tiny overhead (it would just return the same file name to open), but in this particular case it triggers a faulty behaviour. The glob parsing attempts at traversing the remote xrootd directory (see [here](https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/tree/src/InternalTreeUtils.cxx#L471)), but since the permission is just for the single file with the token and not for the entire directory, it leads to the `user access restricted` error you post above. Now, I believe the most sane course of action would be to refine the logic that checks whether the input file name is a glob. I could simply add a check for the `xrd.wantprot` token, but probably we want to have a more authoritative list of all the tokens that should make the file name not be parsed as a glob. This probably includes not only xrootd tokens but also anything https-related. Or we could adopt a different strategy for glob detection altogether. Thoughts @dpiparo @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16475#issuecomment-2365248206
https://github.com/root-project/root/issues/16475#issuecomment-2365248206:942,Testability,log,logic,942,"The problem is that RDF tries to open the file to check that it's valid. The logic for the file opening is at https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/dataframe/src/RLoopManager.cxx#L1133 . In particular, because of the presence of the `?` token, the string is parsed as a glob. Now in many cases that would be harmless albeit a tiny overhead (it would just return the same file name to open), but in this particular case it triggers a faulty behaviour. The glob parsing attempts at traversing the remote xrootd directory (see [here](https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/tree/src/InternalTreeUtils.cxx#L471)), but since the permission is just for the single file with the token and not for the entire directory, it leads to the `user access restricted` error you post above. Now, I believe the most sane course of action would be to refine the logic that checks whether the input file name is a glob. I could simply add a check for the `xrd.wantprot` token, but probably we want to have a more authoritative list of all the tokens that should make the file name not be parsed as a glob. This probably includes not only xrootd tokens but also anything https-related. Or we could adopt a different strategy for glob detection altogether. Thoughts @dpiparo @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16475#issuecomment-2365248206
https://github.com/root-project/root/issues/16475#issuecomment-2365248206:1007,Usability,simpl,simply,1007,"The problem is that RDF tries to open the file to check that it's valid. The logic for the file opening is at https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/dataframe/src/RLoopManager.cxx#L1133 . In particular, because of the presence of the `?` token, the string is parsed as a glob. Now in many cases that would be harmless albeit a tiny overhead (it would just return the same file name to open), but in this particular case it triggers a faulty behaviour. The glob parsing attempts at traversing the remote xrootd directory (see [here](https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/tree/src/InternalTreeUtils.cxx#L471)), but since the permission is just for the single file with the token and not for the entire directory, it leads to the `user access restricted` error you post above. Now, I believe the most sane course of action would be to refine the logic that checks whether the input file name is a glob. I could simply add a check for the `xrd.wantprot` token, but probably we want to have a more authoritative list of all the tokens that should make the file name not be parsed as a glob. This probably includes not only xrootd tokens but also anything https-related. Or we could adopt a different strategy for glob detection altogether. Thoughts @dpiparo @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16475#issuecomment-2365248206
https://github.com/root-project/root/issues/16475#issuecomment-2366982360:152,Availability,error,error,152,"Ah that makes sense. Extending the defintion of strings to add metadata to paths (globbing, the `#` syntax in `TFile::Open`, ...) is always going to be error prone. > but probably we want to have a more authoritative list of all the tokens that should make the file name not be parsed as a glob. This feels like an impossible task to define. Maybe a simplier solution would be to not support `?` when globbing and only apply globbing to the text before the query string? Or maybe just have a dedicated method (or argument type) for creating a RDataFrame from a glob rather than relying on huristics?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16475#issuecomment-2366982360
https://github.com/root-project/root/issues/16475#issuecomment-2366982360:350,Usability,simpl,simplier,350,"Ah that makes sense. Extending the defintion of strings to add metadata to paths (globbing, the `#` syntax in `TFile::Open`, ...) is always going to be error prone. > but probably we want to have a more authoritative list of all the tokens that should make the file name not be parsed as a glob. This feels like an impossible task to define. Maybe a simplier solution would be to not support `?` when globbing and only apply globbing to the text before the query string? Or maybe just have a dedicated method (or argument type) for creating a RDataFrame from a glob rather than relying on huristics?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16475#issuecomment-2366982360
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:26185,Deployability,update,update,26185,"o-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.1.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Library/Developer/CommandLineTools/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. ```; </details>. Can you maybe post the output from your systems? Watch out for `/Library/Developer/CommandLineTools/usr/include/c++` - if that directory shows up, then Apple's update process sometimes results in inconsistent installations (which we would have to deal with on our side...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:26234,Deployability,install,installations,26234,"o-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.1.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Library/Developer/CommandLineTools/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. ```; </details>. Can you maybe post the output from your systems? Watch out for `/Library/Developer/CommandLineTools/usr/include/c++` - if that directory shows up, then Apple's update process sometimes results in inconsistent installations (which we would have to deal with on our side...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:1834,Integrability,contract,contract,1834,"t@macphsft18 ~ % ls -l /Library/Developer/CommandLineTools/SDKs/; total 0; lrwxr-xr-x 1 root wheel 14 19 Sep 13:58 MacOSX.sdk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 1 May 00:16 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 19 Sep 13:57 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 21 Aug 17:15 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 19 Sep 13:56 MacOSX15.sdk -> MacOSX15.0.sdk; sftnight@macphsft18 ~ % clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: x86_64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple x86_64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=all; -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=2 -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu penryn -tune-cpu generic -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorde",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:3478,Integrability,protocol,protocols,3478,"ternc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target x86_64-apple-darwin23.6.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /usr/local/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Library/Developer/CommandLineTools/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 """,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:5470,Integrability,contract,contract,5470,"Ks/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 409 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. sftnight@macphsft18 ~ % clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: x86_64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple x86_64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=all; -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=2 -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu penryn -tune-cpu generic -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-impl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:7093,Integrability,protocol,protocols,7093,"ternc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target x86_64-apple-darwin23.6.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Library/Developer/CommandLineTools/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<bu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:9931,Integrability,contract,contract,9931,"sdk; drwxr-xr-x 7 root wheel 224 8 Jun 2023 MacOSX12.3.sdk; lrwxr-xr-x 1 root wheel 14 8 Jun 2023 MacOSX12.sdk -> MacOSX12.3.sdk; drwxr-xr-x 7 root wheel 224 1 May 00:16 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 17 Sep 17:17 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 21 Aug 17:15 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 17 Sep 17:16 MacOSX15.sdk -> MacOSX15.0.sdk; sftnight@macphsft31 ~ % clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I/usr/local/include -internal-isystem /Library/Developer/CommandLine",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:11971,Integrability,protocol,protocols,11971,"ternc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.0.0; ignoring nonexistent directory ""/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Library/Developer/CommandLineTools/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework direct",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:13997,Integrability,contract,contract,13997,"sr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. sftnight@macphsft31 ~ % clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:16016,Integrability,protocol,protocols,16016,"ternc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.0.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Library/Developer/CommandLineTools/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<bui",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:18735,Integrability,contract,contract,18735," ls -l /Library/Developer/CommandLineTools/SDKs/; total 0; lrwxr-xr-x 1 root wheel 14 17 Sep 14:08 MacOSX.sdk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 17 Sep 14:10 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 17 Sep 14:07 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 17 Sep 14:09 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 17 Sep 14:07 MacOSX15.sdk -> MacOSX15.0.sdk; sftnight@macphsft34 ~ % clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.1.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I/usr/local/include -internal-isystem /Library/Developer/CommandLine",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:20775,Integrability,protocol,protocols,20775,"ternc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.1.0; ignoring nonexistent directory ""/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Library/Developer/CommandLineTools/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework direct",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:22801,Integrability,contract,contract,22801,"sr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. sftnight@macphsft34 ~ % clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.1.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:24820,Integrability,protocol,protocols,24820,"ternc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.1.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Library/Developer/CommandLineTools/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<bui",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:3211,Modifiability,extend,extended-block-signature,3211,"ar -fno-modulemap-allow-subdirectory-search -target-cpu penryn -tune-cpu generic -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target x86_64-apple-darwin23.6.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/Mac",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:6826,Modifiability,extend,extended-block-signature,6826,"hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu penryn -tune-cpu generic -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target x86_64-apple-darwin23.6.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/Mac",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:11704,Modifiability,extend,extended-block-signature,11704,"eature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.0.0; ignoring nonexistent directory ""/usr/local/include""; ignoring nonexistent dir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:15749,Modifiability,extend,extended-block-signature,15749,"ature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.0.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:20508,Modifiability,extend,extended-block-signature,20508,"eature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.1.0; ignoring nonexistent directory ""/usr/local/include""; ignoring nonexistent dir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:24553,Modifiability,extend,extended-block-signature,24553,"ature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.1.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:2014,Performance,tune,tune-cpu,2014,"x 7 root wheel 224 21 Aug 17:15 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 19 Sep 13:56 MacOSX15.sdk -> MacOSX15.0.sdk; sftnight@macphsft18 ~ % clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: x86_64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple x86_64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=all; -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=2 -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu penryn -tune-cpu generic -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:5650,Performance,tune,tune-cpu,5650,"<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. sftnight@macphsft18 ~ % clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: x86_64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple x86_64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=all; -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=2 -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu penryn -tune-cpu generic -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reser",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:3473,Security,hash,hash-protocols,3473,"ternc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target x86_64-apple-darwin23.6.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /usr/local/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Library/Developer/CommandLineTools/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 """,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:7088,Security,hash,hash-protocols,7088,"ternc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target x86_64-apple-darwin23.6.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Library/Developer/CommandLineTools/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<bu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:11966,Security,hash,hash-protocols,11966,"ternc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.0.0; ignoring nonexistent directory ""/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Library/Developer/CommandLineTools/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework direct",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:16011,Security,hash,hash-protocols,16011,"ternc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.0.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Library/Developer/CommandLineTools/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<bui",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:20770,Security,hash,hash-protocols,20770,"ternc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.1.0; ignoring nonexistent directory ""/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Library/Developer/CommandLineTools/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework direct",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:24815,Security,hash,hash-protocols,24815,"ternc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/sftnight -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.1.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Library/Developer/CommandLineTools/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<bui",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:10004,Testability,stub,stubs,10004,"sdk; drwxr-xr-x 7 root wheel 224 8 Jun 2023 MacOSX12.3.sdk; lrwxr-xr-x 1 root wheel 14 8 Jun 2023 MacOSX12.sdk -> MacOSX12.3.sdk; drwxr-xr-x 7 root wheel 224 1 May 00:16 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 17 Sep 17:17 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 21 Aug 17:15 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 17 Sep 17:16 MacOSX15.sdk -> MacOSX15.0.sdk; sftnight@macphsft31 ~ % clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I/usr/local/include -internal-isystem /Library/Developer/CommandLine",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:14070,Testability,stub,stubs,14070,"sr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. sftnight@macphsft31 ~ % clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:18808,Testability,stub,stubs,18808," ls -l /Library/Developer/CommandLineTools/SDKs/; total 0; lrwxr-xr-x 1 root wheel 14 17 Sep 14:08 MacOSX.sdk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 17 Sep 14:10 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 17 Sep 14:07 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 17 Sep 14:09 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 17 Sep 14:07 MacOSX15.sdk -> MacOSX15.0.sdk; sftnight@macphsft34 ~ % clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.1.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I/usr/local/include -internal-isystem /Library/Developer/CommandLine",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:22874,Testability,stub,stubs,22874,"sr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. sftnight@macphsft34 ~ % clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.1.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:1663,Usability,clear,clear-ast-before-backend,1663,"t@macphsft18 ~ % ls -l /Library/Developer/CommandLineTools/SDKs/; total 0; lrwxr-xr-x 1 root wheel 14 19 Sep 13:58 MacOSX.sdk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 1 May 00:16 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 19 Sep 13:57 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 21 Aug 17:15 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 19 Sep 13:56 MacOSX15.sdk -> MacOSX15.0.sdk; sftnight@macphsft18 ~ % clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: x86_64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple x86_64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=all; -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=2 -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu penryn -tune-cpu generic -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorde",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:5299,Usability,clear,clear-ast-before-backend,5299,"Ks/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 409 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. sftnight@macphsft18 ~ % clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: x86_64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple x86_64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=all; -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=2 -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu penryn -tune-cpu generic -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-impl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:9756,Usability,clear,clear-ast-before-backend,9756,"sdk; drwxr-xr-x 7 root wheel 224 8 Jun 2023 MacOSX12.3.sdk; lrwxr-xr-x 1 root wheel 14 8 Jun 2023 MacOSX12.sdk -> MacOSX12.3.sdk; drwxr-xr-x 7 root wheel 224 1 May 00:16 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 17 Sep 17:17 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 21 Aug 17:15 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 17 Sep 17:16 MacOSX15.sdk -> MacOSX15.0.sdk; sftnight@macphsft31 ~ % clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I/usr/local/include -internal-isystem /Library/Developer/CommandLine",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:13822,Usability,clear,clear-ast-before-backend,13822,"sr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. sftnight@macphsft31 ~ % clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:18560,Usability,clear,clear-ast-before-backend,18560," ls -l /Library/Developer/CommandLineTools/SDKs/; total 0; lrwxr-xr-x 1 root wheel 14 17 Sep 14:08 MacOSX.sdk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 17 Sep 14:10 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 17 Sep 14:07 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 17 Sep 14:09 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 17 Sep 14:07 MacOSX15.sdk -> MacOSX15.0.sdk; sftnight@macphsft34 ~ % clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.1.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I/usr/local/include -internal-isystem /Library/Developer/CommandLine",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2373214590:22626,Usability,clear,clear-ast-before-backend,22626,"sr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. sftnight@macphsft34 ~ % clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.1.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590
https://github.com/root-project/root/pull/16494#issuecomment-2374779123:1545,Integrability,contract,contract,1545,"dk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 Apr 30 18:16 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 Sep 16 20:47 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 Aug 21 11:15 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 Sep 16 20:47 MacOSX15.sdk -> MacOSX15.0.sdk. $ clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/stognini -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2374779123
https://github.com/root-project/root/pull/16494#issuecomment-2374779123:3886,Integrability,protocol,protocols,3886,"eloper/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/stognini -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.0.0; ignoring nonexistent directory ""/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include; /Applications/Xcode.app/Contents/Deve",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2374779123
https://github.com/root-project/root/pull/16494#issuecomment-2374779123:6320,Integrability,contract,contract,6320,"X.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. $ clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/stognini -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2374779123
https://github.com/root-project/root/pull/16494#issuecomment-2374779123:8468,Integrability,protocol,protocols,8468,"eTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/stognini -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.0.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Lib",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2374779123
https://github.com/root-project/root/pull/16494#issuecomment-2374779123:3619,Modifiability,extend,extended-block-signature,3619,"Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk -I/usr/local/include -internal-isystem /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/stognini -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.0.0; ignoring nonexistent directory ""/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/C",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2374779123
https://github.com/root-project/root/pull/16494#issuecomment-2374779123:8201,Modifiability,extend,extended-block-signature,8201,"overage-compilation-dir=/Users/stognini -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/stognini -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.0.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignori",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2374779123
https://github.com/root-project/root/pull/16494#issuecomment-2374779123:3881,Security,hash,hash-protocols,3881,"eloper/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/stognini -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.0.0; ignoring nonexistent directory ""/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include; /Applications/Xcode.app/Contents/Deve",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2374779123
https://github.com/root-project/root/pull/16494#issuecomment-2374779123:8463,Security,hash,hash-protocols,8463,"eTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/stognini -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -fcolor-diagnostics -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin24.0.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Lib",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2374779123
https://github.com/root-project/root/pull/16494#issuecomment-2374779123:1618,Testability,stub,stubs,1618,"dk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 Apr 30 18:16 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 Sep 16 20:47 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 Aug 21 11:15 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 Sep 16 20:47 MacOSX15.sdk -> MacOSX15.0.sdk. $ clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/stognini -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2374779123
https://github.com/root-project/root/pull/16494#issuecomment-2374779123:6393,Testability,stub,stubs,6393,"X.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. $ clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/stognini -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2374779123
https://github.com/root-project/root/pull/16494#issuecomment-2374779123:1370,Usability,clear,clear-ast-before-backend,1370,"dk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 Apr 30 18:16 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 Sep 16 20:47 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 Aug 21 11:15 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 Sep 16 20:47 MacOSX15.sdk -> MacOSX15.0.sdk. $ clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/stognini -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2374779123
https://github.com/root-project/root/pull/16494#issuecomment-2374779123:6145,Usability,clear,clear-ast-before-backend,6145,"X.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. $ clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/stognini -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2374779123
https://github.com/root-project/root/pull/16494#issuecomment-2375170248:57,Deployability,patch,patch,57,"And mine for the record -- confirmed to work without the patch with commit 58a96e2a8e; ```; + sw_vers; ProductName:		macOS; ProductVersion:		14.7; BuildVersion:		23H124. + clang --version; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; + ls -l /Library/Developer/CommandLineTools/SDKs/; total 0; lrwxr-xr-x 1 root wheel 14 Sep 18 14:57 MacOSX.sdk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 Jun 1 2023 MacOSX12.3.sdk; lrwxr-xr-x 1 root wheel 14 Jun 1 2023 MacOSX12.sdk -> MacOSX12.3.sdk; drwxr-xr-x 7 root wheel 224 Nov 12 2022 MacOSX13.1.sdk; drwxr-xr-x 7 root wheel 224 Sep 18 15:25 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 Sep 18 14:57 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 Sep 18 15:25 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 Sep 18 14:56 MacOSX15.sdk -> MacOSX15.0.sdk; + clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2375170248
https://github.com/root-project/root/pull/16494#issuecomment-2375170248:1793,Integrability,contract,contract,1793," 2022 MacOSX13.1.sdk; drwxr-xr-x 7 root wheel 224 Sep 18 15:25 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 Sep 18 14:57 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 Sep 18 15:25 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 Sep 18 14:56 MacOSX15.sdk -> MacOSX15.0.sdk; + clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/pcanal/root_working/builds/master.debug/src/tutorials/v7/ntuple -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Applications/Xcode.app",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2375170248
https://github.com/root-project/root/pull/16494#issuecomment-2375170248:4224,Integrability,protocol,protocols,4224,"externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/pcanal/root_working/builds/master.debug/src/tutorials/v7/ntuple -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin23.6.0; ignoring nonexistent directory ""/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include; /Applications/Xcode.app/Contents/Developer/Plat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2375170248
https://github.com/root-project/root/pull/16494#issuecomment-2375170248:6658,Integrability,contract,contract,6658,"X.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. + clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/pcanal/root_working/builds/master.debug/src/tutorials/v7/ntuple -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Library/Developer/Comm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2375170248
https://github.com/root-project/root/pull/16494#issuecomment-2375170248:8896,Integrability,protocol,protocols,8896,"externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/pcanal/root_working/builds/master.debug/src/tutorials/v7/ntuple -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin23.6.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frame",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2375170248
https://github.com/root-project/root/pull/16494#issuecomment-2375170248:3977,Modifiability,extend,extended-block-signature,3977,"ntents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/pcanal/root_working/builds/master.debug/src/tutorials/v7/ntuple -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin23.6.0; ignoring nonexistent directory ""/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/Library",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2375170248
https://github.com/root-project/root/pull/16494#issuecomment-2375170248:8649,Modifiability,extend,extended-block-signature,8649,"eTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/pcanal/root_working/builds/master.debug/src/tutorials/v7/ntuple -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin23.6.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/u",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2375170248
https://github.com/root-project/root/pull/16494#issuecomment-2375170248:4219,Security,hash,hash-protocols,4219,"externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/pcanal/root_working/builds/master.debug/src/tutorials/v7/ntuple -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin23.6.0; ignoring nonexistent directory ""/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include; /Applications/Xcode.app/Contents/Developer/Plat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2375170248
https://github.com/root-project/root/pull/16494#issuecomment-2375170248:8891,Security,hash,hash-protocols,8891,"externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/pcanal/root_working/builds/master.debug/src/tutorials/v7/ntuple -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin23.6.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frame",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2375170248
https://github.com/root-project/root/pull/16494#issuecomment-2375170248:1866,Testability,stub,stubs,1866," 2022 MacOSX13.1.sdk; drwxr-xr-x 7 root wheel 224 Sep 18 15:25 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 Sep 18 14:57 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 Sep 18 15:25 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 Sep 18 14:56 MacOSX15.sdk -> MacOSX15.0.sdk; + clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/pcanal/root_working/builds/master.debug/src/tutorials/v7/ntuple -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Applications/Xcode.app",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2375170248
https://github.com/root-project/root/pull/16494#issuecomment-2375170248:6731,Testability,stub,stubs,6731,"X.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. + clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/pcanal/root_working/builds/master.debug/src/tutorials/v7/ntuple -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Library/Developer/Comm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2375170248
https://github.com/root-project/root/pull/16494#issuecomment-2375170248:1618,Usability,clear,clear-ast-before-backend,1618," 2022 MacOSX13.1.sdk; drwxr-xr-x 7 root wheel 224 Sep 18 15:25 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 Sep 18 14:57 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 Sep 18 15:25 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 Sep 18 14:56 MacOSX15.sdk -> MacOSX15.0.sdk; + clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/pcanal/root_working/builds/master.debug/src/tutorials/v7/ntuple -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Applications/Xcode.app",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2375170248
https://github.com/root-project/root/pull/16494#issuecomment-2375170248:6483,Usability,clear,clear-ast-before-backend,6483,"X.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. + clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/pcanal/root_working/builds/master.debug/src/tutorials/v7/ntuple -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Library/Developer/Comm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2375170248
https://github.com/root-project/root/pull/16494#issuecomment-2377172429:210,Deployability,patch,patch,210,"So I reinstalled the command line tools (see for example https://root-forum.cern.ch/t/root-on-macos-15-xcode-16/61716/9).; and rebuild. With the rebuild worked with the master as-is (commit 55cd181c3d), so the patch is not needed on my machine at this time. The new environment info is:; ```; + sw_vers; ProductName:		macOS; ProductVersion:		14.7; BuildVersion:		23H124; + clang --version; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; + ls -l /Library/Developer/CommandLineTools/SDKs/; total 0; lrwxr-xr-x 1 root wheel 14 Sep 25 18:30 MacOSX.sdk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 Sep 25 18:33 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 Sep 25 18:29 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 Sep 25 18:31 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 Sep 25 18:29 MacOSX15.sdk -> MacOSX15.0.sdk; + clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-searc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377172429
https://github.com/root-project/root/pull/16494#issuecomment-2377172429:1813,Integrability,contract,contract,1813,"dk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 Sep 25 18:33 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 Sep 25 18:29 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 Sep 25 18:31 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 Sep 25 18:29 MacOSX15.sdk -> MacOSX15.0.sdk; + clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/pcanal/root_working/builds/master.module -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Applications/Xcode.app/Contents/Developer/Pla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377172429
https://github.com/root-project/root/pull/16494#issuecomment-2377172429:4198,Integrability,protocol,protocols,4198,"/usr/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/pcanal/root_working/builds/master.module -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin23.6.0; ignoring nonexistent directory ""/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include; /Applications/Xcode.app/Contents/Developer/Plat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377172429
https://github.com/root-project/root/pull/16494#issuecomment-2377172429:6632,Integrability,contract,contract,6632,"X.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. + clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/pcanal/root_working/builds/master.module -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377172429
https://github.com/root-project/root/pull/16494#issuecomment-2377172429:8824,Integrability,protocol,protocols,8824,"/usr/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/pcanal/root_working/builds/master.module -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin23.6.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frame",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377172429
https://github.com/root-project/root/pull/16494#issuecomment-2377172429:3951,Modifiability,extend,extended-block-signature,3951,"Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/pcanal/root_working/builds/master.module -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin23.6.0; ignoring nonexistent directory ""/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/Library/Frameworks""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377172429
https://github.com/root-project/root/pull/16494#issuecomment-2377172429:8577,Modifiability,extend,extended-block-signature,8577,"r/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/pcanal/root_working/builds/master.module -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin23.6.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377172429
https://github.com/root-project/root/pull/16494#issuecomment-2377172429:4193,Security,hash,hash-protocols,4193,"/usr/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/pcanal/root_working/builds/master.module -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin23.6.0; ignoring nonexistent directory ""/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include; /Applications/Xcode.app/Contents/Developer/Plat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377172429
https://github.com/root-project/root/pull/16494#issuecomment-2377172429:8819,Security,hash,hash-protocols,8819,"/usr/include -internal-externc-isystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Wno-reorder-init-list -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-final-dtor-non-final-class -Wno-extra-semi-stmt -Wno-misleading-indentation -Wno-quoted-include-in-framework-header -Wno-implicit-fallthrough -Wno-enum-enum-conversion -Wno-enum-float-conversion -Wno-elaborated-enum-base -Wno-reserved-identifier -Wno-gnu-folding-constant -fdeprecated-macro -fdebug-compilation-dir=/Users/pcanal/root_working/builds/master.module -ferror-limit 19 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fgnuc-version=4.2.1 -fno-cxx-modules -fcxx-exceptions -fexceptions -fmax-type-align=16 -fcommon -clang-vendor-feature=+disableNonDependentMemberExprInCurrentInstantiation -fno-odr-hash-protocols -clang-vendor-feature=+enableAggressiveVLAFolding -clang-vendor-feature=+revert09abecef7bbf -clang-vendor-feature=+thisNoAlignAttr -clang-vendor-feature=+thisNoNullAttr -clang-vendor-feature=+disableAtImportPrivateFrameworkInImplementationError -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o - -x c++ /dev/null; clang -cc1 version 16.0.0 (clang-1600.0.26.3) default target arm64-apple-darwin23.6.0; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include""; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/Library/Frameworks""; #include ""..."" search starts here:; #include <...> search starts here:; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frame",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377172429
https://github.com/root-project/root/pull/16494#issuecomment-2377172429:1886,Testability,stub,stubs,1886,"dk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 Sep 25 18:33 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 Sep 25 18:29 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 Sep 25 18:31 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 Sep 25 18:29 MacOSX15.sdk -> MacOSX15.0.sdk; + clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/pcanal/root_working/builds/master.module -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Applications/Xcode.app/Contents/Developer/Pla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377172429
https://github.com/root-project/root/pull/16494#issuecomment-2377172429:6705,Testability,stub,stubs,6705,"X.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. + clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/pcanal/root_working/builds/master.module -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377172429
https://github.com/root-project/root/pull/16494#issuecomment-2377172429:1638,Usability,clear,clear-ast-before-backend,1638,"dk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 Sep 25 18:33 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 Sep 25 18:29 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 Sep 25 18:31 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 Sep 25 18:29 MacOSX15.sdk -> MacOSX15.0.sdk; + clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/pcanal/root_working/builds/master.module -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Applications/Xcode.app/Contents/Developer/Pla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377172429
https://github.com/root-project/root/pull/16494#issuecomment-2377172429:6457,Usability,clear,clear-ast-before-backend,6457,"X.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. + clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/pcanal/root_working/builds/master.module -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377172429
https://github.com/root-project/root/issues/16496#issuecomment-2365047420:123,Usability,simpl,simply,123,"Dear @xkzl ,. Thanks for your report. As a first attempt at fixing it, could you try specifying the pragma for the enum as simply. ```; #pragma link C++ enum MyEnum;; ```. Note the removal of the `class` keyword.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16496#issuecomment-2365047420
https://github.com/root-project/root/issues/16496#issuecomment-2365069147:977,Deployability,configurat,configuration,977,"Dear @xkzl ,. Indeed, I can see the same thing with the following simple example ; ```cpp; // myheader.hxx; #ifndef myheader; #define myheader. enum class MyEnum; {; kFirst,; kSecond,; kThird; };. template <MyEnum T>; class MyClass; {; };. #endif ; ```. ```cpp; // LinkDef.h; #ifdef __CLING__; #pragma link C++ enum MyEnum;; #pragma link C++ class MyClass < MyEnum::kFirst> + ;; #pragma link C++ class MyClass < MyEnum::kSecond> + ;; #pragma link C++ class MyClass < MyEnum::kThird> + ;; #endif; ```. ```; $: rootcling -f myheaderdict.cxx myheader.hxx LinkDef.h -rmf myheader.rootmap; ```. ```; # myheader.rootmap; { decls }; template <MyEnum> class MyClass;. [ ]; # List of selected classes; class MyClass<(MyEnum)0>; class MyClass<(MyEnum)1>; class MyClass<(MyEnum)2>; class MyClass<MyEnum::kFirst>; class MyClass<MyEnum::kSecond>; class MyClass<MyEnum::kThird>; # List of selected enums and outer classes; enum MyEnum; ```. I am unsure whether we are missing some different configuration or spelling. @pcanal might be able to help here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16496#issuecomment-2365069147
https://github.com/root-project/root/issues/16496#issuecomment-2365069147:977,Modifiability,config,configuration,977,"Dear @xkzl ,. Indeed, I can see the same thing with the following simple example ; ```cpp; // myheader.hxx; #ifndef myheader; #define myheader. enum class MyEnum; {; kFirst,; kSecond,; kThird; };. template <MyEnum T>; class MyClass; {; };. #endif ; ```. ```cpp; // LinkDef.h; #ifdef __CLING__; #pragma link C++ enum MyEnum;; #pragma link C++ class MyClass < MyEnum::kFirst> + ;; #pragma link C++ class MyClass < MyEnum::kSecond> + ;; #pragma link C++ class MyClass < MyEnum::kThird> + ;; #endif; ```. ```; $: rootcling -f myheaderdict.cxx myheader.hxx LinkDef.h -rmf myheader.rootmap; ```. ```; # myheader.rootmap; { decls }; template <MyEnum> class MyClass;. [ ]; # List of selected classes; class MyClass<(MyEnum)0>; class MyClass<(MyEnum)1>; class MyClass<(MyEnum)2>; class MyClass<MyEnum::kFirst>; class MyClass<MyEnum::kSecond>; class MyClass<MyEnum::kThird>; # List of selected enums and outer classes; enum MyEnum; ```. I am unsure whether we are missing some different configuration or spelling. @pcanal might be able to help here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16496#issuecomment-2365069147
https://github.com/root-project/root/issues/16496#issuecomment-2365069147:66,Usability,simpl,simple,66,"Dear @xkzl ,. Indeed, I can see the same thing with the following simple example ; ```cpp; // myheader.hxx; #ifndef myheader; #define myheader. enum class MyEnum; {; kFirst,; kSecond,; kThird; };. template <MyEnum T>; class MyClass; {; };. #endif ; ```. ```cpp; // LinkDef.h; #ifdef __CLING__; #pragma link C++ enum MyEnum;; #pragma link C++ class MyClass < MyEnum::kFirst> + ;; #pragma link C++ class MyClass < MyEnum::kSecond> + ;; #pragma link C++ class MyClass < MyEnum::kThird> + ;; #endif; ```. ```; $: rootcling -f myheaderdict.cxx myheader.hxx LinkDef.h -rmf myheader.rootmap; ```. ```; # myheader.rootmap; { decls }; template <MyEnum> class MyClass;. [ ]; # List of selected classes; class MyClass<(MyEnum)0>; class MyClass<(MyEnum)1>; class MyClass<(MyEnum)2>; class MyClass<MyEnum::kFirst>; class MyClass<MyEnum::kSecond>; class MyClass<MyEnum::kThird>; # List of selected enums and outer classes; enum MyEnum; ```. I am unsure whether we are missing some different configuration or spelling. @pcanal might be able to help here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16496#issuecomment-2365069147
https://github.com/root-project/root/issues/16512#issuecomment-2390634640:59,Usability,simpl,simpler,59,I think instead of `#url[link]{label}` we might also use a simpler syntax like in markdown. something like `[label](link)`. No need for a special `#url` keyword. Then it will be enough to look for the string `](http` to know that there is a text with some link.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16512#issuecomment-2390634640
https://github.com/root-project/root/pull/16526#issuecomment-2375944990:158,Availability,failure,failure,158,"This is really good stuff. ARM nodes are appearing on WLCG and testing on that platform will automatically improve the sw stacks of LHC experiments. The test failure needs some thinking but it does not seem a complex issue. If I may suggest this, I would also make sure that a clear indicator of the platform appears in the label of the build (""ARM"", ""Aarch""...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16526#issuecomment-2375944990
https://github.com/root-project/root/pull/16526#issuecomment-2375944990:63,Testability,test,testing,63,"This is really good stuff. ARM nodes are appearing on WLCG and testing on that platform will automatically improve the sw stacks of LHC experiments. The test failure needs some thinking but it does not seem a complex issue. If I may suggest this, I would also make sure that a clear indicator of the platform appears in the label of the build (""ARM"", ""Aarch""...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16526#issuecomment-2375944990
https://github.com/root-project/root/pull/16526#issuecomment-2375944990:153,Testability,test,test,153,"This is really good stuff. ARM nodes are appearing on WLCG and testing on that platform will automatically improve the sw stacks of LHC experiments. The test failure needs some thinking but it does not seem a complex issue. If I may suggest this, I would also make sure that a clear indicator of the platform appears in the label of the build (""ARM"", ""Aarch""...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16526#issuecomment-2375944990
https://github.com/root-project/root/pull/16526#issuecomment-2375944990:277,Usability,clear,clear,277,"This is really good stuff. ARM nodes are appearing on WLCG and testing on that platform will automatically improve the sw stacks of LHC experiments. The test failure needs some thinking but it does not seem a complex issue. If I may suggest this, I would also make sure that a clear indicator of the platform appears in the label of the build (""ARM"", ""Aarch""...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16526#issuecomment-2375944990
https://github.com/root-project/root/pull/16536#issuecomment-2378502691:314,Usability,simpl,simplified,314,"Hi @Dr15Jones @makortel @siliataider, this PR aims to provide a tutorial how we (ROOT) envision frameworks could use the RNTuple API for writing. If you have some time, it would be great if you could check whether it makes sense and demonstrates the relevant use cases. The ""framework code"" is obviously very much simplified and the goal is not to code a full production framework, but I hope it's close enough to what the ""real"" experiment frameworks are doing. Thanks in advance!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16536#issuecomment-2378502691
https://github.com/root-project/root/issues/16553#issuecomment-2384870116:88,Integrability,depend,dependencies,88,"Thanks for the comment. At this point this issue seems to conflate two things: ; 1. The dependencies of python tests. This should have been addressed by #16555 ; 2. The missing symbols. If 1. is confirmed to be solved, I would say that at least this issue ought to be closed and one about missing symbols opened. However, even if an issue dedicated to the missing symbols is opened, it's not clear, at least to me, how the problem can be reproduced. So far we have no indication of it in our CI: can it be due to a somewhat imprecise formulation of the python dependencies in the `requirements.txt` file that affects your platform?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16553#issuecomment-2384870116
https://github.com/root-project/root/issues/16553#issuecomment-2384870116:560,Integrability,depend,dependencies,560,"Thanks for the comment. At this point this issue seems to conflate two things: ; 1. The dependencies of python tests. This should have been addressed by #16555 ; 2. The missing symbols. If 1. is confirmed to be solved, I would say that at least this issue ought to be closed and one about missing symbols opened. However, even if an issue dedicated to the missing symbols is opened, it's not clear, at least to me, how the problem can be reproduced. So far we have no indication of it in our CI: can it be due to a somewhat imprecise formulation of the python dependencies in the `requirements.txt` file that affects your platform?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16553#issuecomment-2384870116
https://github.com/root-project/root/issues/16553#issuecomment-2384870116:111,Testability,test,tests,111,"Thanks for the comment. At this point this issue seems to conflate two things: ; 1. The dependencies of python tests. This should have been addressed by #16555 ; 2. The missing symbols. If 1. is confirmed to be solved, I would say that at least this issue ought to be closed and one about missing symbols opened. However, even if an issue dedicated to the missing symbols is opened, it's not clear, at least to me, how the problem can be reproduced. So far we have no indication of it in our CI: can it be due to a somewhat imprecise formulation of the python dependencies in the `requirements.txt` file that affects your platform?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16553#issuecomment-2384870116
https://github.com/root-project/root/issues/16553#issuecomment-2384870116:392,Usability,clear,clear,392,"Thanks for the comment. At this point this issue seems to conflate two things: ; 1. The dependencies of python tests. This should have been addressed by #16555 ; 2. The missing symbols. If 1. is confirmed to be solved, I would say that at least this issue ought to be closed and one about missing symbols opened. However, even if an issue dedicated to the missing symbols is opened, it's not clear, at least to me, how the problem can be reproduced. So far we have no indication of it in our CI: can it be due to a somewhat imprecise formulation of the python dependencies in the `requirements.txt` file that affects your platform?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16553#issuecomment-2384870116
https://github.com/root-project/root/issues/16601#issuecomment-2393259545:535,Availability,error,error,535,"Small update to give further context, the following seemingly similar but subtly different snippet works also for ROOT 6.32. ```python; import ROOT. def main():; ROOT.gInterpreter.ProcessLine(""const auto myvec = TVectorT<float>();""); print(ROOT.myvec). if __name__ == ""__main__"":; raise SystemExit(main()); ```. And it is clear that in this case ProcessLine tries much harder than Declare to automatically load libraries that might be necessary to evaluate the line. Also, the reproducer from the issue description fails with the same error in ROOT latest master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16601#issuecomment-2393259545
https://github.com/root-project/root/issues/16601#issuecomment-2393259545:6,Deployability,update,update,6,"Small update to give further context, the following seemingly similar but subtly different snippet works also for ROOT 6.32. ```python; import ROOT. def main():; ROOT.gInterpreter.ProcessLine(""const auto myvec = TVectorT<float>();""); print(ROOT.myvec). if __name__ == ""__main__"":; raise SystemExit(main()); ```. And it is clear that in this case ProcessLine tries much harder than Declare to automatically load libraries that might be necessary to evaluate the line. Also, the reproducer from the issue description fails with the same error in ROOT latest master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16601#issuecomment-2393259545
https://github.com/root-project/root/issues/16601#issuecomment-2393259545:406,Performance,load,load,406,"Small update to give further context, the following seemingly similar but subtly different snippet works also for ROOT 6.32. ```python; import ROOT. def main():; ROOT.gInterpreter.ProcessLine(""const auto myvec = TVectorT<float>();""); print(ROOT.myvec). if __name__ == ""__main__"":; raise SystemExit(main()); ```. And it is clear that in this case ProcessLine tries much harder than Declare to automatically load libraries that might be necessary to evaluate the line. Also, the reproducer from the issue description fails with the same error in ROOT latest master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16601#issuecomment-2393259545
https://github.com/root-project/root/issues/16601#issuecomment-2393259545:322,Usability,clear,clear,322,"Small update to give further context, the following seemingly similar but subtly different snippet works also for ROOT 6.32. ```python; import ROOT. def main():; ROOT.gInterpreter.ProcessLine(""const auto myvec = TVectorT<float>();""); print(ROOT.myvec). if __name__ == ""__main__"":; raise SystemExit(main()); ```. And it is clear that in this case ProcessLine tries much harder than Declare to automatically load libraries that might be necessary to evaluate the line. Also, the reproducer from the issue description fails with the same error in ROOT latest master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16601#issuecomment-2393259545
https://github.com/root-project/root/issues/16612#issuecomment-2396463790:366,Availability,down,downstream,366,"That will be hard to respect, because that means unless we introduce a new `testsupport=OFF` configuration flag, gtest would always be a dependency of ROOT with `-fail-on-missing=ON` then. I don't see at the moment how I can respect all of these constraints:. 1. Keep configuration simple by not introducing new build flags; 2. Make `ROOT_ADD_GTEST` fully usable in downstream code even if ROOT was not built with unit tests; 3. Don't add `gtest` as an unavoidable build dependency of ROOT if you have `fail-on-missin=ON`; 4. Respect `fail-on-missing`. Which of these constraints should be relaxed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396463790
https://github.com/root-project/root/issues/16612#issuecomment-2396463790:93,Deployability,configurat,configuration,93,"That will be hard to respect, because that means unless we introduce a new `testsupport=OFF` configuration flag, gtest would always be a dependency of ROOT with `-fail-on-missing=ON` then. I don't see at the moment how I can respect all of these constraints:. 1. Keep configuration simple by not introducing new build flags; 2. Make `ROOT_ADD_GTEST` fully usable in downstream code even if ROOT was not built with unit tests; 3. Don't add `gtest` as an unavoidable build dependency of ROOT if you have `fail-on-missin=ON`; 4. Respect `fail-on-missing`. Which of these constraints should be relaxed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396463790
https://github.com/root-project/root/issues/16612#issuecomment-2396463790:268,Deployability,configurat,configuration,268,"That will be hard to respect, because that means unless we introduce a new `testsupport=OFF` configuration flag, gtest would always be a dependency of ROOT with `-fail-on-missing=ON` then. I don't see at the moment how I can respect all of these constraints:. 1. Keep configuration simple by not introducing new build flags; 2. Make `ROOT_ADD_GTEST` fully usable in downstream code even if ROOT was not built with unit tests; 3. Don't add `gtest` as an unavoidable build dependency of ROOT if you have `fail-on-missin=ON`; 4. Respect `fail-on-missing`. Which of these constraints should be relaxed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396463790
https://github.com/root-project/root/issues/16612#issuecomment-2396463790:137,Integrability,depend,dependency,137,"That will be hard to respect, because that means unless we introduce a new `testsupport=OFF` configuration flag, gtest would always be a dependency of ROOT with `-fail-on-missing=ON` then. I don't see at the moment how I can respect all of these constraints:. 1. Keep configuration simple by not introducing new build flags; 2. Make `ROOT_ADD_GTEST` fully usable in downstream code even if ROOT was not built with unit tests; 3. Don't add `gtest` as an unavoidable build dependency of ROOT if you have `fail-on-missin=ON`; 4. Respect `fail-on-missing`. Which of these constraints should be relaxed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396463790
https://github.com/root-project/root/issues/16612#issuecomment-2396463790:471,Integrability,depend,dependency,471,"That will be hard to respect, because that means unless we introduce a new `testsupport=OFF` configuration flag, gtest would always be a dependency of ROOT with `-fail-on-missing=ON` then. I don't see at the moment how I can respect all of these constraints:. 1. Keep configuration simple by not introducing new build flags; 2. Make `ROOT_ADD_GTEST` fully usable in downstream code even if ROOT was not built with unit tests; 3. Don't add `gtest` as an unavoidable build dependency of ROOT if you have `fail-on-missin=ON`; 4. Respect `fail-on-missing`. Which of these constraints should be relaxed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396463790
https://github.com/root-project/root/issues/16612#issuecomment-2396463790:93,Modifiability,config,configuration,93,"That will be hard to respect, because that means unless we introduce a new `testsupport=OFF` configuration flag, gtest would always be a dependency of ROOT with `-fail-on-missing=ON` then. I don't see at the moment how I can respect all of these constraints:. 1. Keep configuration simple by not introducing new build flags; 2. Make `ROOT_ADD_GTEST` fully usable in downstream code even if ROOT was not built with unit tests; 3. Don't add `gtest` as an unavoidable build dependency of ROOT if you have `fail-on-missin=ON`; 4. Respect `fail-on-missing`. Which of these constraints should be relaxed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396463790
https://github.com/root-project/root/issues/16612#issuecomment-2396463790:268,Modifiability,config,configuration,268,"That will be hard to respect, because that means unless we introduce a new `testsupport=OFF` configuration flag, gtest would always be a dependency of ROOT with `-fail-on-missing=ON` then. I don't see at the moment how I can respect all of these constraints:. 1. Keep configuration simple by not introducing new build flags; 2. Make `ROOT_ADD_GTEST` fully usable in downstream code even if ROOT was not built with unit tests; 3. Don't add `gtest` as an unavoidable build dependency of ROOT if you have `fail-on-missin=ON`; 4. Respect `fail-on-missing`. Which of these constraints should be relaxed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396463790
https://github.com/root-project/root/issues/16612#issuecomment-2396463790:76,Testability,test,testsupport,76,"That will be hard to respect, because that means unless we introduce a new `testsupport=OFF` configuration flag, gtest would always be a dependency of ROOT with `-fail-on-missing=ON` then. I don't see at the moment how I can respect all of these constraints:. 1. Keep configuration simple by not introducing new build flags; 2. Make `ROOT_ADD_GTEST` fully usable in downstream code even if ROOT was not built with unit tests; 3. Don't add `gtest` as an unavoidable build dependency of ROOT if you have `fail-on-missin=ON`; 4. Respect `fail-on-missing`. Which of these constraints should be relaxed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396463790
https://github.com/root-project/root/issues/16612#issuecomment-2396463790:419,Testability,test,tests,419,"That will be hard to respect, because that means unless we introduce a new `testsupport=OFF` configuration flag, gtest would always be a dependency of ROOT with `-fail-on-missing=ON` then. I don't see at the moment how I can respect all of these constraints:. 1. Keep configuration simple by not introducing new build flags; 2. Make `ROOT_ADD_GTEST` fully usable in downstream code even if ROOT was not built with unit tests; 3. Don't add `gtest` as an unavoidable build dependency of ROOT if you have `fail-on-missin=ON`; 4. Respect `fail-on-missing`. Which of these constraints should be relaxed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396463790
https://github.com/root-project/root/issues/16612#issuecomment-2396463790:282,Usability,simpl,simple,282,"That will be hard to respect, because that means unless we introduce a new `testsupport=OFF` configuration flag, gtest would always be a dependency of ROOT with `-fail-on-missing=ON` then. I don't see at the moment how I can respect all of these constraints:. 1. Keep configuration simple by not introducing new build flags; 2. Make `ROOT_ADD_GTEST` fully usable in downstream code even if ROOT was not built with unit tests; 3. Don't add `gtest` as an unavoidable build dependency of ROOT if you have `fail-on-missin=ON`; 4. Respect `fail-on-missing`. Which of these constraints should be relaxed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396463790
https://github.com/root-project/root/issues/16612#issuecomment-2396463790:356,Usability,usab,usable,356,"That will be hard to respect, because that means unless we introduce a new `testsupport=OFF` configuration flag, gtest would always be a dependency of ROOT with `-fail-on-missing=ON` then. I don't see at the moment how I can respect all of these constraints:. 1. Keep configuration simple by not introducing new build flags; 2. Make `ROOT_ADD_GTEST` fully usable in downstream code even if ROOT was not built with unit tests; 3. Don't add `gtest` as an unavoidable build dependency of ROOT if you have `fail-on-missin=ON`; 4. Respect `fail-on-missing`. Which of these constraints should be relaxed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396463790
https://github.com/root-project/root/pull/16640#issuecomment-2400792247:194,Integrability,interface,interface,194,"@ktf (I can reproduce the problem now). Commit b2c6904bf458d5149e3955881d0054ba256a4110 seems to have broken the expectation of only one basket in flight, I also wonder how it interact with the interface, in particular, it is clear that this PR removes the crashs but does it lead to correct data being read through the bulk interface?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2400792247
https://github.com/root-project/root/pull/16640#issuecomment-2400792247:325,Integrability,interface,interface,325,"@ktf (I can reproduce the problem now). Commit b2c6904bf458d5149e3955881d0054ba256a4110 seems to have broken the expectation of only one basket in flight, I also wonder how it interact with the interface, in particular, it is clear that this PR removes the crashs but does it lead to correct data being read through the bulk interface?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2400792247
https://github.com/root-project/root/pull/16640#issuecomment-2400792247:226,Usability,clear,clear,226,"@ktf (I can reproduce the problem now). Commit b2c6904bf458d5149e3955881d0054ba256a4110 seems to have broken the expectation of only one basket in flight, I also wonder how it interact with the interface, in particular, it is clear that this PR removes the crashs but does it lead to correct data being read through the bulk interface?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2400792247
https://github.com/root-project/root/pull/16640#issuecomment-2406804701:602,Deployability,patch,patch,602,"I was enabling SetClusterPrefetch as part of the attempt to reduce read_calls when processing our AODs. Indeed I now notice that it's enough to simply do:. ```C++; // Was affected by https://github.com/root-project/root/issues/8962; // Re-enabling this seems to cut the number of IOPS in half; tree->SetCacheSize(25000000);; //tree->SetClusterPrefetch(true);; for (auto& reader : mBranchReaders) {; tree->AddBranchToCache(reader->branch());; }; tree->StopCacheLearningPhase();; ```. to obtain the same result, so I am fine to simply disable it for now. Do I understand correctly that I still need this patch, though, in case there is more than one basket?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2406804701
https://github.com/root-project/root/pull/16640#issuecomment-2406804701:60,Energy Efficiency,reduce,reduce,60,"I was enabling SetClusterPrefetch as part of the attempt to reduce read_calls when processing our AODs. Indeed I now notice that it's enough to simply do:. ```C++; // Was affected by https://github.com/root-project/root/issues/8962; // Re-enabling this seems to cut the number of IOPS in half; tree->SetCacheSize(25000000);; //tree->SetClusterPrefetch(true);; for (auto& reader : mBranchReaders) {; tree->AddBranchToCache(reader->branch());; }; tree->StopCacheLearningPhase();; ```. to obtain the same result, so I am fine to simply disable it for now. Do I understand correctly that I still need this patch, though, in case there is more than one basket?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2406804701
https://github.com/root-project/root/pull/16640#issuecomment-2406804701:144,Usability,simpl,simply,144,"I was enabling SetClusterPrefetch as part of the attempt to reduce read_calls when processing our AODs. Indeed I now notice that it's enough to simply do:. ```C++; // Was affected by https://github.com/root-project/root/issues/8962; // Re-enabling this seems to cut the number of IOPS in half; tree->SetCacheSize(25000000);; //tree->SetClusterPrefetch(true);; for (auto& reader : mBranchReaders) {; tree->AddBranchToCache(reader->branch());; }; tree->StopCacheLearningPhase();; ```. to obtain the same result, so I am fine to simply disable it for now. Do I understand correctly that I still need this patch, though, in case there is more than one basket?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2406804701
https://github.com/root-project/root/pull/16640#issuecomment-2406804701:526,Usability,simpl,simply,526,"I was enabling SetClusterPrefetch as part of the attempt to reduce read_calls when processing our AODs. Indeed I now notice that it's enough to simply do:. ```C++; // Was affected by https://github.com/root-project/root/issues/8962; // Re-enabling this seems to cut the number of IOPS in half; tree->SetCacheSize(25000000);; //tree->SetClusterPrefetch(true);; for (auto& reader : mBranchReaders) {; tree->AddBranchToCache(reader->branch());; }; tree->StopCacheLearningPhase();; ```. to obtain the same result, so I am fine to simply disable it for now. Do I understand correctly that I still need this patch, though, in case there is more than one basket?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2406804701
https://github.com/root-project/root/pull/16640#issuecomment-2406995100:62,Energy Efficiency,reduce,reduce,62,> I was enabling SetClusterPrefetch as part of the attempt to reduce read_calls when processing our AODs. Apriori it does not intend have an effect on that. > Indeed I now notice that it's enough to simply do:. What is the change (increase of the cache size or explicit cache learning or both)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2406995100
https://github.com/root-project/root/pull/16640#issuecomment-2406995100:247,Performance,cache,cache,247,> I was enabling SetClusterPrefetch as part of the attempt to reduce read_calls when processing our AODs. Apriori it does not intend have an effect on that. > Indeed I now notice that it's enough to simply do:. What is the change (increase of the cache size or explicit cache learning or both)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2406995100
https://github.com/root-project/root/pull/16640#issuecomment-2406995100:270,Performance,cache,cache,270,> I was enabling SetClusterPrefetch as part of the attempt to reduce read_calls when processing our AODs. Apriori it does not intend have an effect on that. > Indeed I now notice that it's enough to simply do:. What is the change (increase of the cache size or explicit cache learning or both)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2406995100
https://github.com/root-project/root/pull/16640#issuecomment-2406995100:199,Usability,simpl,simply,199,> I was enabling SetClusterPrefetch as part of the attempt to reduce read_calls when processing our AODs. Apriori it does not intend have an effect on that. > Indeed I now notice that it's enough to simply do:. What is the change (increase of the cache size or explicit cache learning or both)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2406995100
https://github.com/root-project/root/pull/16640#issuecomment-2406995100:276,Usability,learn,learning,276,> I was enabling SetClusterPrefetch as part of the attempt to reduce read_calls when processing our AODs. Apriori it does not intend have an effect on that. > Indeed I now notice that it's enough to simply do:. What is the change (increase of the cache size or explicit cache learning or both)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2406995100
https://github.com/root-project/root/pull/16640#issuecomment-2407188475:38,Performance,cache,cache,38,"> What is the change (increase of the cache size or explicit cache learning or both)?. Doing the caching at all. I thought prefetching was part of it, but apparently it is not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2407188475
https://github.com/root-project/root/pull/16640#issuecomment-2407188475:61,Performance,cache,cache,61,"> What is the change (increase of the cache size or explicit cache learning or both)?. Doing the caching at all. I thought prefetching was part of it, but apparently it is not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2407188475
https://github.com/root-project/root/pull/16640#issuecomment-2407188475:67,Usability,learn,learning,67,"> What is the change (increase of the cache size or explicit cache learning or both)?. Doing the caching at all. I thought prefetching was part of it, but apparently it is not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2407188475
https://github.com/root-project/root/issues/16668#issuecomment-2440788615:297,Deployability,upgrade,upgrades,297,"> (Most likely) To reproduce build with https://github.com/root-project/root/commit/3e03f7891c07828b32cf7efe4382202ecdca1a79 and then rebuild the same directory commit https://github.com/root-project/root/commit/7f006742bb1d1786d2a8c7c06e4e20cf8900e777 (llvm 18). Incremental rebuilds across LLVM upgrades are (intentionally) not supported - too many things move around. This has always been clearly communicated and I propose to close this issue as ""not planned"" (and I misclicked)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16668#issuecomment-2440788615
https://github.com/root-project/root/issues/16668#issuecomment-2440788615:392,Usability,clear,clearly,392,"> (Most likely) To reproduce build with https://github.com/root-project/root/commit/3e03f7891c07828b32cf7efe4382202ecdca1a79 and then rebuild the same directory commit https://github.com/root-project/root/commit/7f006742bb1d1786d2a8c7c06e4e20cf8900e777 (llvm 18). Incremental rebuilds across LLVM upgrades are (intentionally) not supported - too many things move around. This has always been clearly communicated and I propose to close this issue as ""not planned"" (and I misclicked)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16668#issuecomment-2440788615
https://github.com/root-project/root/pull/16671#issuecomment-2410483715:276,Usability,clear,clear,276,"You are right, extra boilerplate in the tutorials is not good. But This PR is not meant to me merged as is, I did it to explore why `ClearProxiedObjects()` is needed also for hard shutdown. And the set of code that I needed to add to the tutorials made to reason more or less clear: there is some issue with `TH1` specifically.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16671#issuecomment-2410483715
https://github.com/root-project/root/pull/16693#issuecomment-2443511035:163,Security,access,access,163,"Looks good from my point of view, I'll let Jakob have the final say. One point we should clarify at some point (but doesn't need to block this PR) is how subfield access plays with writing: It intuitively makes sense for reading as you can just have the same value multiple times in memory. But I guess we only want to take the top-level fields from the entry for writing? Should we forbid creating a (parallel) writer passing a model with registered subfields?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16693#issuecomment-2443511035
https://github.com/root-project/root/pull/16693#issuecomment-2443511035:193,Usability,intuit,intuitively,193,"Looks good from my point of view, I'll let Jakob have the final say. One point we should clarify at some point (but doesn't need to block this PR) is how subfield access plays with writing: It intuitively makes sense for reading as you can just have the same value multiple times in memory. But I guess we only want to take the top-level fields from the entry for writing? Should we forbid creating a (parallel) writer passing a model with registered subfields?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16693#issuecomment-2443511035
https://github.com/root-project/root/pull/16693#issuecomment-2443706354:165,Security,access,access,165,"> Looks good from my point of view, I'll let Jakob have the final say. One point we should clarify at some point (but doesn't need to block this PR) is how subfield access plays with writing: It intuitively makes sense for reading as you can just have the same value multiple times in memory. But I guess we only want to take the top-level fields from the entry for writing? Should we forbid creating a (parallel) writer passing a model with registered subfields?. This is a very good point, I've only considered the reading side of things. I would be in favor of the last possibility and just completely disallow creating writers from models with registered subfields.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16693#issuecomment-2443706354
https://github.com/root-project/root/pull/16693#issuecomment-2443706354:195,Usability,intuit,intuitively,195,"> Looks good from my point of view, I'll let Jakob have the final say. One point we should clarify at some point (but doesn't need to block this PR) is how subfield access plays with writing: It intuitively makes sense for reading as you can just have the same value multiple times in memory. But I guess we only want to take the top-level fields from the entry for writing? Should we forbid creating a (parallel) writer passing a model with registered subfields?. This is a very good point, I've only considered the reading side of things. I would be in favor of the last possibility and just completely disallow creating writers from models with registered subfields.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16693#issuecomment-2443706354
https://github.com/root-project/root/issues/16719#issuecomment-2427294206:869,Availability,error,error,869,"The summary is simple (and still the same after applying [`38b0d88` (#16722)](https://github.com/root-project/root/pull/16722/commits/38b0d88d1d51fe914a6aff3645f03a483e31588a):. On first run in a clean directory with `BLAS` missing, we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ... Passed 16.11 sec. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 16.37 sec; ```; and if we immediately re-run we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ...***Failed 9.10 sec; ```; and the error is:; ```; [ RUN ] RModelParser_PyTorch.SEQUENTIAL_MODEL; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; indicates that on the 2nd runs, the test want symbols from the `BLAS` library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16719#issuecomment-2427294206
https://github.com/root-project/root/issues/16719#issuecomment-2427294206:1018,Integrability,interface,interface,1018,"The summary is simple (and still the same after applying [`38b0d88` (#16722)](https://github.com/root-project/root/pull/16722/commits/38b0d88d1d51fe914a6aff3645f03a483e31588a):. On first run in a clean directory with `BLAS` missing, we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ... Passed 16.11 sec. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 16.37 sec; ```; and if we immediately re-run we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ...***Failed 9.10 sec; ```; and the error is:; ```; [ RUN ] RModelParser_PyTorch.SEQUENTIAL_MODEL; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; indicates that on the 2nd runs, the test want symbols from the `BLAS` library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16719#issuecomment-2427294206
https://github.com/root-project/root/issues/16719#issuecomment-2427294206:492,Testability,test,tests,492,"The summary is simple (and still the same after applying [`38b0d88` (#16722)](https://github.com/root-project/root/pull/16722/commits/38b0d88d1d51fe914a6aff3645f03a483e31588a):. On first run in a clean directory with `BLAS` missing, we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ... Passed 16.11 sec. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 16.37 sec; ```; and if we immediately re-run we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ...***Failed 9.10 sec; ```; and the error is:; ```; [ RUN ] RModelParser_PyTorch.SEQUENTIAL_MODEL; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; indicates that on the 2nd runs, the test want symbols from the `BLAS` library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16719#issuecomment-2427294206
https://github.com/root-project/root/issues/16719#issuecomment-2427294206:508,Testability,test,tests,508,"The summary is simple (and still the same after applying [`38b0d88` (#16722)](https://github.com/root-project/root/pull/16722/commits/38b0d88d1d51fe914a6aff3645f03a483e31588a):. On first run in a clean directory with `BLAS` missing, we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ... Passed 16.11 sec. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 16.37 sec; ```; and if we immediately re-run we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ...***Failed 9.10 sec; ```; and the error is:; ```; [ RUN ] RModelParser_PyTorch.SEQUENTIAL_MODEL; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; indicates that on the 2nd runs, the test want symbols from the `BLAS` library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16719#issuecomment-2427294206
https://github.com/root-project/root/issues/16719#issuecomment-2427294206:1081,Testability,test,test,1081,"The summary is simple (and still the same after applying [`38b0d88` (#16722)](https://github.com/root-project/root/pull/16722/commits/38b0d88d1d51fe914a6aff3645f03a483e31588a):. On first run in a clean directory with `BLAS` missing, we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ... Passed 16.11 sec. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 16.37 sec; ```; and if we immediately re-run we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ...***Failed 9.10 sec; ```; and the error is:; ```; [ RUN ] RModelParser_PyTorch.SEQUENTIAL_MODEL; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; indicates that on the 2nd runs, the test want symbols from the `BLAS` library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16719#issuecomment-2427294206
https://github.com/root-project/root/issues/16719#issuecomment-2427294206:15,Usability,simpl,simple,15,"The summary is simple (and still the same after applying [`38b0d88` (#16722)](https://github.com/root-project/root/pull/16722/commits/38b0d88d1d51fe914a6aff3645f03a483e31588a):. On first run in a clean directory with `BLAS` missing, we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ... Passed 16.11 sec. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 16.37 sec; ```; and if we immediately re-run we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ...***Failed 9.10 sec; ```; and the error is:; ```; [ RUN ] RModelParser_PyTorch.SEQUENTIAL_MODEL; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; indicates that on the 2nd runs, the test want symbols from the `BLAS` library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16719#issuecomment-2427294206
https://github.com/root-project/root/issues/16720#issuecomment-2425048725:194,Availability,failure,failure,194,"Yes, it is clearly a difference is setup. In the failing one the `BLAS` library is not installed (or not found) and the real problem is that this result in a very obscure and hard to understand failure:; ```; IncrementalExecutor::executeFunction: symbol 'saxpy_' unresolved while linking [cling interface function]!; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; Instead we should either; * fail to configure if BLAS is missing; or ; * disable the components that require BLAS when configuring whe BLAS is missing; or; * disable the test that require BLAS when BLAS is not there. and at the very least we should list somewhere (if not already done so, but I don't see it) that the `BLAS` library is required to successfully run the tests and some of the features.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16720#issuecomment-2425048725
https://github.com/root-project/root/issues/16720#issuecomment-2425048725:87,Deployability,install,installed,87,"Yes, it is clearly a difference is setup. In the failing one the `BLAS` library is not installed (or not found) and the real problem is that this result in a very obscure and hard to understand failure:; ```; IncrementalExecutor::executeFunction: symbol 'saxpy_' unresolved while linking [cling interface function]!; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; Instead we should either; * fail to configure if BLAS is missing; or ; * disable the components that require BLAS when configuring whe BLAS is missing; or; * disable the test that require BLAS when BLAS is not there. and at the very least we should list somewhere (if not already done so, but I don't see it) that the `BLAS` library is required to successfully run the tests and some of the features.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16720#issuecomment-2425048725
https://github.com/root-project/root/issues/16720#issuecomment-2425048725:295,Integrability,interface,interface,295,"Yes, it is clearly a difference is setup. In the failing one the `BLAS` library is not installed (or not found) and the real problem is that this result in a very obscure and hard to understand failure:; ```; IncrementalExecutor::executeFunction: symbol 'saxpy_' unresolved while linking [cling interface function]!; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; Instead we should either; * fail to configure if BLAS is missing; or ; * disable the components that require BLAS when configuring whe BLAS is missing; or; * disable the test that require BLAS when BLAS is not there. and at the very least we should list somewhere (if not already done so, but I don't see it) that the `BLAS` library is required to successfully run the tests and some of the features.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16720#issuecomment-2425048725
https://github.com/root-project/root/issues/16720#issuecomment-2425048725:403,Integrability,interface,interface,403,"Yes, it is clearly a difference is setup. In the failing one the `BLAS` library is not installed (or not found) and the real problem is that this result in a very obscure and hard to understand failure:; ```; IncrementalExecutor::executeFunction: symbol 'saxpy_' unresolved while linking [cling interface function]!; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; Instead we should either; * fail to configure if BLAS is missing; or ; * disable the components that require BLAS when configuring whe BLAS is missing; or; * disable the test that require BLAS when BLAS is not there. and at the very least we should list somewhere (if not already done so, but I don't see it) that the `BLAS` library is required to successfully run the tests and some of the features.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16720#issuecomment-2425048725
https://github.com/root-project/root/issues/16720#issuecomment-2425048725:466,Modifiability,config,configure,466,"Yes, it is clearly a difference is setup. In the failing one the `BLAS` library is not installed (or not found) and the real problem is that this result in a very obscure and hard to understand failure:; ```; IncrementalExecutor::executeFunction: symbol 'saxpy_' unresolved while linking [cling interface function]!; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; Instead we should either; * fail to configure if BLAS is missing; or ; * disable the components that require BLAS when configuring whe BLAS is missing; or; * disable the test that require BLAS when BLAS is not there. and at the very least we should list somewhere (if not already done so, but I don't see it) that the `BLAS` library is required to successfully run the tests and some of the features.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16720#issuecomment-2425048725
https://github.com/root-project/root/issues/16720#issuecomment-2425048725:549,Modifiability,config,configuring,549,"Yes, it is clearly a difference is setup. In the failing one the `BLAS` library is not installed (or not found) and the real problem is that this result in a very obscure and hard to understand failure:; ```; IncrementalExecutor::executeFunction: symbol 'saxpy_' unresolved while linking [cling interface function]!; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; Instead we should either; * fail to configure if BLAS is missing; or ; * disable the components that require BLAS when configuring whe BLAS is missing; or; * disable the test that require BLAS when BLAS is not there. and at the very least we should list somewhere (if not already done so, but I don't see it) that the `BLAS` library is required to successfully run the tests and some of the features.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16720#issuecomment-2425048725
https://github.com/root-project/root/issues/16720#issuecomment-2425048725:600,Testability,test,test,600,"Yes, it is clearly a difference is setup. In the failing one the `BLAS` library is not installed (or not found) and the real problem is that this result in a very obscure and hard to understand failure:; ```; IncrementalExecutor::executeFunction: symbol 'saxpy_' unresolved while linking [cling interface function]!; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; Instead we should either; * fail to configure if BLAS is missing; or ; * disable the components that require BLAS when configuring whe BLAS is missing; or; * disable the test that require BLAS when BLAS is not there. and at the very least we should list somewhere (if not already done so, but I don't see it) that the `BLAS` library is required to successfully run the tests and some of the features.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16720#issuecomment-2425048725
https://github.com/root-project/root/issues/16720#issuecomment-2425048725:799,Testability,test,tests,799,"Yes, it is clearly a difference is setup. In the failing one the `BLAS` library is not installed (or not found) and the real problem is that this result in a very obscure and hard to understand failure:; ```; IncrementalExecutor::executeFunction: symbol 'saxpy_' unresolved while linking [cling interface function]!; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; Instead we should either; * fail to configure if BLAS is missing; or ; * disable the components that require BLAS when configuring whe BLAS is missing; or; * disable the test that require BLAS when BLAS is not there. and at the very least we should list somewhere (if not already done so, but I don't see it) that the `BLAS` library is required to successfully run the tests and some of the features.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16720#issuecomment-2425048725
https://github.com/root-project/root/issues/16720#issuecomment-2425048725:11,Usability,clear,clearly,11,"Yes, it is clearly a difference is setup. In the failing one the `BLAS` library is not installed (or not found) and the real problem is that this result in a very obscure and hard to understand failure:; ```; IncrementalExecutor::executeFunction: symbol 'saxpy_' unresolved while linking [cling interface function]!; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; Instead we should either; * fail to configure if BLAS is missing; or ; * disable the components that require BLAS when configuring whe BLAS is missing; or; * disable the test that require BLAS when BLAS is not there. and at the very least we should list somewhere (if not already done so, but I don't see it) that the `BLAS` library is required to successfully run the tests and some of the features.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16720#issuecomment-2425048725
https://github.com/root-project/root/issues/16733#issuecomment-2435320448:227,Testability,log,log,227,"OK, so simply disabling the `LOG_CONFIGURE`, `LOG_BUILD`, `LOG_INSTALL` when using `CONFIGURE_COMMAND`, `BUILD_COMMNAD`, `INSTALL_COMMAND` seems to fix the issue (i.e. no `BUILD_JOB_SERVER_AWARE` involved), but then we have no log...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16733#issuecomment-2435320448
https://github.com/root-project/root/issues/16733#issuecomment-2435320448:7,Usability,simpl,simply,7,"OK, so simply disabling the `LOG_CONFIGURE`, `LOG_BUILD`, `LOG_INSTALL` when using `CONFIGURE_COMMAND`, `BUILD_COMMNAD`, `INSTALL_COMMAND` seems to fix the issue (i.e. no `BUILD_JOB_SERVER_AWARE` involved), but then we have no log...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16733#issuecomment-2435320448
https://github.com/root-project/root/pull/16748#issuecomment-2442692217:21,Availability,error,errors,21,"Typically, disparate errors that are all kinda the same mean an error was set prior by some other operation and not cleared. What then happens is that the next (any) Python operation fails, setting its own error. This is something that's new:; ```; +Exception ignored in PyObject_HasAttr(); consider using PyObject_HasAttrWithError(), PyObject_GetOptionalAttr() or PyObject_GetAttr():; ```; and may help narrow it down.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16748#issuecomment-2442692217
https://github.com/root-project/root/pull/16748#issuecomment-2442692217:64,Availability,error,error,64,"Typically, disparate errors that are all kinda the same mean an error was set prior by some other operation and not cleared. What then happens is that the next (any) Python operation fails, setting its own error. This is something that's new:; ```; +Exception ignored in PyObject_HasAttr(); consider using PyObject_HasAttrWithError(), PyObject_GetOptionalAttr() or PyObject_GetAttr():; ```; and may help narrow it down.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16748#issuecomment-2442692217
https://github.com/root-project/root/pull/16748#issuecomment-2442692217:206,Availability,error,error,206,"Typically, disparate errors that are all kinda the same mean an error was set prior by some other operation and not cleared. What then happens is that the next (any) Python operation fails, setting its own error. This is something that's new:; ```; +Exception ignored in PyObject_HasAttr(); consider using PyObject_HasAttrWithError(), PyObject_GetOptionalAttr() or PyObject_GetAttr():; ```; and may help narrow it down.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16748#issuecomment-2442692217
https://github.com/root-project/root/pull/16748#issuecomment-2442692217:414,Availability,down,down,414,"Typically, disparate errors that are all kinda the same mean an error was set prior by some other operation and not cleared. What then happens is that the next (any) Python operation fails, setting its own error. This is something that's new:; ```; +Exception ignored in PyObject_HasAttr(); consider using PyObject_HasAttrWithError(), PyObject_GetOptionalAttr() or PyObject_GetAttr():; ```; and may help narrow it down.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16748#issuecomment-2442692217
https://github.com/root-project/root/pull/16748#issuecomment-2442692217:116,Usability,clear,cleared,116,"Typically, disparate errors that are all kinda the same mean an error was set prior by some other operation and not cleared. What then happens is that the next (any) Python operation fails, setting its own error. This is something that's new:; ```; +Exception ignored in PyObject_HasAttr(); consider using PyObject_HasAttrWithError(), PyObject_GetOptionalAttr() or PyObject_GetAttr():; ```; and may help narrow it down.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16748#issuecomment-2442692217
https://github.com/root-project/root/issues/16757#issuecomment-2440928601:126,Energy Efficiency,allocate,allocate,126,"Some other fields try to get this right, for example `RRecordField`. We should investigate if we can make `std::vector<char>` allocate over-aligned memory areas. The other option is to forbid over-aligned types (and possibly simplify some other code).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16757#issuecomment-2440928601
https://github.com/root-project/root/issues/16757#issuecomment-2440928601:225,Usability,simpl,simplify,225,"Some other fields try to get this right, for example `RRecordField`. We should investigate if we can make `std::vector<char>` allocate over-aligned memory areas. The other option is to forbid over-aligned types (and possibly simplify some other code).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16757#issuecomment-2440928601
https://github.com/root-project/root/issues/16774#issuecomment-2447782541:26,Usability,feedback,feedback,26,@GiacomoXT thanks for the feedback. Let us know how that goes!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16774#issuecomment-2447782541
https://github.com/root-project/root/issues/16784#issuecomment-2444638572:544,Deployability,release,release,544,"Oh. Missed GetCumulative. The thing that probably bothers me is the description of GetQuantiles or rather what is the use case of GetQuantiles with p==nullptr. When you say ""If p is null, it calculates F-1(F(bin_edges)) = bin_edges"", the bin_edges are already known (if it really calculates them inside, that is quite surprising). The really new thing (although maybe not a product, but side-effect) is the p. I understand that removing the default would break backward compatibility, so I am not advocating just removing the thing in the next release. It's just that if there is a default argument, normally it represents a frequent use case, so it brings attention while learning about a given method. Here it brings confusion (to me and to my student at least).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16784#issuecomment-2444638572
https://github.com/root-project/root/issues/16784#issuecomment-2444638572:673,Usability,learn,learning,673,"Oh. Missed GetCumulative. The thing that probably bothers me is the description of GetQuantiles or rather what is the use case of GetQuantiles with p==nullptr. When you say ""If p is null, it calculates F-1(F(bin_edges)) = bin_edges"", the bin_edges are already known (if it really calculates them inside, that is quite surprising). The really new thing (although maybe not a product, but side-effect) is the p. I understand that removing the default would break backward compatibility, so I am not advocating just removing the thing in the next release. It's just that if there is a default argument, normally it represents a frequent use case, so it brings attention while learning about a given method. Here it brings confusion (to me and to my student at least).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16784#issuecomment-2444638572
https://github.com/root-project/root/issues/16784#issuecomment-2444656410:128,Modifiability,variab,variable,128,"> he really new thing (although maybe not a product, but side-effect) is the p. But p stays null. F(x) is stored to a temporary variable, p is not set to F(x). > (if it really calculates them inside, that is quite surprising). It does. It's a technical workaround to have both paths to follow the same code. > It's just that if there is a default argument, normally it represents a frequent use case, so it brings attention while learning about a given method. Here it brings confusion (to me and to my student at least). I agree with you. So I would suggest to remove from your title ""add new method to handle this case"".; Making it non-default would force everyone to pass an argument. If one wants the old behavior, it will pass nullptr and get the bin edges as before, so no new extra method is needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16784#issuecomment-2444656410
https://github.com/root-project/root/issues/16784#issuecomment-2444656410:430,Usability,learn,learning,430,"> he really new thing (although maybe not a product, but side-effect) is the p. But p stays null. F(x) is stored to a temporary variable, p is not set to F(x). > (if it really calculates them inside, that is quite surprising). It does. It's a technical workaround to have both paths to follow the same code. > It's just that if there is a default argument, normally it represents a frequent use case, so it brings attention while learning about a given method. Here it brings confusion (to me and to my student at least). I agree with you. So I would suggest to remove from your title ""add new method to handle this case"".; Making it non-default would force everyone to pass an argument. If one wants the old behavior, it will pass nullptr and get the bin edges as before, so no new extra method is needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/16784#issuecomment-2444656410
https://github.com/root-project/root/pull/16785#issuecomment-2446725220:152,Modifiability,evolve,evolve,152,"> @dpiparo, since you wrote this code last year: #13532; > ; > You have any idea why `Py_GetProgramName` was necessary?. I think I was simply trying to evolve the existing Python 2 code existing at the time, there is no sophisticated strategy behind. If the usage of the deprecated function can be avoided, great.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16785#issuecomment-2446725220
https://github.com/root-project/root/pull/16785#issuecomment-2446725220:298,Safety,avoid,avoided,298,"> @dpiparo, since you wrote this code last year: #13532; > ; > You have any idea why `Py_GetProgramName` was necessary?. I think I was simply trying to evolve the existing Python 2 code existing at the time, there is no sophisticated strategy behind. If the usage of the deprecated function can be avoided, great.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16785#issuecomment-2446725220
https://github.com/root-project/root/pull/16785#issuecomment-2446725220:135,Usability,simpl,simply,135,"> @dpiparo, since you wrote this code last year: #13532; > ; > You have any idea why `Py_GetProgramName` was necessary?. I think I was simply trying to evolve the existing Python 2 code existing at the time, there is no sophisticated strategy behind. If the usage of the deprecated function can be avoided, great.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16785#issuecomment-2446725220
https://github.com/root-project/root/pull/16786#issuecomment-2446318660:90,Energy Efficiency,power,power,90,"@vepadulano the idea here is to separate ""regular"" users just using the RNTuple API from ""power"" users that want to reimplement parts thereof. I'm admittedly not sure if that's a clear enough distinction to warrant the use of the `Internal` namespace; we certainly want the public API to guide the regular user as much as possible to the correct usage of RNTuple and I think ""power"" users are fine with navigating the internals if they need to solve a very specific problem. ; I don't know if @jblomer has more to say about this, but I don't have a strong opinion either way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16786#issuecomment-2446318660
https://github.com/root-project/root/pull/16786#issuecomment-2446318660:376,Energy Efficiency,power,power,376,"@vepadulano the idea here is to separate ""regular"" users just using the RNTuple API from ""power"" users that want to reimplement parts thereof. I'm admittedly not sure if that's a clear enough distinction to warrant the use of the `Internal` namespace; we certainly want the public API to guide the regular user as much as possible to the correct usage of RNTuple and I think ""power"" users are fine with navigating the internals if they need to solve a very specific problem. ; I don't know if @jblomer has more to say about this, but I don't have a strong opinion either way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16786#issuecomment-2446318660
https://github.com/root-project/root/pull/16786#issuecomment-2446318660:179,Usability,clear,clear,179,"@vepadulano the idea here is to separate ""regular"" users just using the RNTuple API from ""power"" users that want to reimplement parts thereof. I'm admittedly not sure if that's a clear enough distinction to warrant the use of the `Internal` namespace; we certainly want the public API to guide the regular user as much as possible to the correct usage of RNTuple and I think ""power"" users are fine with navigating the internals if they need to solve a very specific problem. ; I don't know if @jblomer has more to say about this, but I don't have a strong opinion either way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16786#issuecomment-2446318660
https://github.com/root-project/root/pull/16786#issuecomment-2446318660:288,Usability,guid,guide,288,"@vepadulano the idea here is to separate ""regular"" users just using the RNTuple API from ""power"" users that want to reimplement parts thereof. I'm admittedly not sure if that's a clear enough distinction to warrant the use of the `Internal` namespace; we certainly want the public API to guide the regular user as much as possible to the correct usage of RNTuple and I think ""power"" users are fine with navigating the internals if they need to solve a very specific problem. ; I don't know if @jblomer has more to say about this, but I don't have a strong opinion either way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/16786#issuecomment-2446318660
