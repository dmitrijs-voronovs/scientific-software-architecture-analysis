id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/sofa-framework/sofa/pull/415:430,Testability,test,test,430,PR #158 broke livecoding of shader. This PR restore it. @guparan and @hugtalbot Could this PR be treated in fast-path please ? . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/415
https://github.com/sofa-framework/sofa/pull/416:657,Availability,failure,failures,657,"When trying to serialize / desserialize custom binary data structures (non-native / non-scalar Sofa types) as byte arrays from C++ to Python, PyString_FromStirng is called, which stops the input stream at the first \0 it encounters.; PyString_FromStringAndSize retrieves the full stream instead, which is more likely to be what we want here.; @damienmarchal could you tell me what you think of this?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416
https://github.com/sofa-framework/sofa/pull/416:707,Availability,failure,failures,707,"When trying to serialize / desserialize custom binary data structures (non-native / non-scalar Sofa types) as byte arrays from C++ to Python, PyString_FromStirng is called, which stops the input stream at the first \0 it encounters.; PyString_FromStringAndSize retrieves the full stream instead, which is more likely to be what we want here.; @damienmarchal could you tell me what you think of this?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416
https://github.com/sofa-framework/sofa/pull/416:500,Integrability,message,message,500,"When trying to serialize / desserialize custom binary data structures (non-native / non-scalar Sofa types) as byte arrays from C++ to Python, PyString_FromStirng is called, which stops the input stream at the first \0 it encounters.; PyString_FromStringAndSize retrieves the full stream instead, which is more likely to be what we want here.; @damienmarchal could you tell me what you think of this?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416
https://github.com/sofa-framework/sofa/pull/416:652,Testability,test,test,652,"When trying to serialize / desserialize custom binary data structures (non-native / non-scalar Sofa types) as byte arrays from C++ to Python, PyString_FromStirng is called, which stops the input stream at the first \0 it encounters.; PyString_FromStringAndSize retrieves the full stream instead, which is more likely to be what we want here.; @damienmarchal could you tell me what you think of this?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416
https://github.com/sofa-framework/sofa/pull/416:702,Testability,test,test,702,"When trying to serialize / desserialize custom binary data structures (non-native / non-scalar Sofa types) as byte arrays from C++ to Python, PyString_FromStirng is called, which stops the input stream at the first \0 it encounters.; PyString_FromStringAndSize retrieves the full stream instead, which is more likely to be what we want here.; @damienmarchal could you tell me what you think of this?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416
https://github.com/sofa-framework/sofa/issues/417:93,Energy Efficiency,reduce,reduce,93,"Hello all,. While trying to disable some unused components/plugins from my setup in order to reduce compilation times, I discovered that SceneCreator depends on many base plugins, and that most test plugins depend on SceneCreator. This design makes it *really* hard to disable any plugin if somebody wants to compile tests for the remaining enabled plugins. I guess the ""correct"" way would be to split the SceneCreator features in each plugin so that you never pay for what you don't use (we're doing c++ after all :-). Any idea/feedback?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417
https://github.com/sofa-framework/sofa/issues/417:150,Integrability,depend,depends,150,"Hello all,. While trying to disable some unused components/plugins from my setup in order to reduce compilation times, I discovered that SceneCreator depends on many base plugins, and that most test plugins depend on SceneCreator. This design makes it *really* hard to disable any plugin if somebody wants to compile tests for the remaining enabled plugins. I guess the ""correct"" way would be to split the SceneCreator features in each plugin so that you never pay for what you don't use (we're doing c++ after all :-). Any idea/feedback?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417
https://github.com/sofa-framework/sofa/issues/417:207,Integrability,depend,depend,207,"Hello all,. While trying to disable some unused components/plugins from my setup in order to reduce compilation times, I discovered that SceneCreator depends on many base plugins, and that most test plugins depend on SceneCreator. This design makes it *really* hard to disable any plugin if somebody wants to compile tests for the remaining enabled plugins. I guess the ""correct"" way would be to split the SceneCreator features in each plugin so that you never pay for what you don't use (we're doing c++ after all :-). Any idea/feedback?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417
https://github.com/sofa-framework/sofa/issues/417:59,Modifiability,plugin,plugins,59,"Hello all,. While trying to disable some unused components/plugins from my setup in order to reduce compilation times, I discovered that SceneCreator depends on many base plugins, and that most test plugins depend on SceneCreator. This design makes it *really* hard to disable any plugin if somebody wants to compile tests for the remaining enabled plugins. I guess the ""correct"" way would be to split the SceneCreator features in each plugin so that you never pay for what you don't use (we're doing c++ after all :-). Any idea/feedback?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417
https://github.com/sofa-framework/sofa/issues/417:171,Modifiability,plugin,plugins,171,"Hello all,. While trying to disable some unused components/plugins from my setup in order to reduce compilation times, I discovered that SceneCreator depends on many base plugins, and that most test plugins depend on SceneCreator. This design makes it *really* hard to disable any plugin if somebody wants to compile tests for the remaining enabled plugins. I guess the ""correct"" way would be to split the SceneCreator features in each plugin so that you never pay for what you don't use (we're doing c++ after all :-). Any idea/feedback?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417
https://github.com/sofa-framework/sofa/issues/417:199,Modifiability,plugin,plugins,199,"Hello all,. While trying to disable some unused components/plugins from my setup in order to reduce compilation times, I discovered that SceneCreator depends on many base plugins, and that most test plugins depend on SceneCreator. This design makes it *really* hard to disable any plugin if somebody wants to compile tests for the remaining enabled plugins. I guess the ""correct"" way would be to split the SceneCreator features in each plugin so that you never pay for what you don't use (we're doing c++ after all :-). Any idea/feedback?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417
https://github.com/sofa-framework/sofa/issues/417:281,Modifiability,plugin,plugin,281,"Hello all,. While trying to disable some unused components/plugins from my setup in order to reduce compilation times, I discovered that SceneCreator depends on many base plugins, and that most test plugins depend on SceneCreator. This design makes it *really* hard to disable any plugin if somebody wants to compile tests for the remaining enabled plugins. I guess the ""correct"" way would be to split the SceneCreator features in each plugin so that you never pay for what you don't use (we're doing c++ after all :-). Any idea/feedback?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417
https://github.com/sofa-framework/sofa/issues/417:349,Modifiability,plugin,plugins,349,"Hello all,. While trying to disable some unused components/plugins from my setup in order to reduce compilation times, I discovered that SceneCreator depends on many base plugins, and that most test plugins depend on SceneCreator. This design makes it *really* hard to disable any plugin if somebody wants to compile tests for the remaining enabled plugins. I guess the ""correct"" way would be to split the SceneCreator features in each plugin so that you never pay for what you don't use (we're doing c++ after all :-). Any idea/feedback?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417
https://github.com/sofa-framework/sofa/issues/417:436,Modifiability,plugin,plugin,436,"Hello all,. While trying to disable some unused components/plugins from my setup in order to reduce compilation times, I discovered that SceneCreator depends on many base plugins, and that most test plugins depend on SceneCreator. This design makes it *really* hard to disable any plugin if somebody wants to compile tests for the remaining enabled plugins. I guess the ""correct"" way would be to split the SceneCreator features in each plugin so that you never pay for what you don't use (we're doing c++ after all :-). Any idea/feedback?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417
https://github.com/sofa-framework/sofa/issues/417:194,Testability,test,test,194,"Hello all,. While trying to disable some unused components/plugins from my setup in order to reduce compilation times, I discovered that SceneCreator depends on many base plugins, and that most test plugins depend on SceneCreator. This design makes it *really* hard to disable any plugin if somebody wants to compile tests for the remaining enabled plugins. I guess the ""correct"" way would be to split the SceneCreator features in each plugin so that you never pay for what you don't use (we're doing c++ after all :-). Any idea/feedback?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417
https://github.com/sofa-framework/sofa/issues/417:317,Testability,test,tests,317,"Hello all,. While trying to disable some unused components/plugins from my setup in order to reduce compilation times, I discovered that SceneCreator depends on many base plugins, and that most test plugins depend on SceneCreator. This design makes it *really* hard to disable any plugin if somebody wants to compile tests for the remaining enabled plugins. I guess the ""correct"" way would be to split the SceneCreator features in each plugin so that you never pay for what you don't use (we're doing c++ after all :-). Any idea/feedback?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417
https://github.com/sofa-framework/sofa/issues/417:529,Usability,feedback,feedback,529,"Hello all,. While trying to disable some unused components/plugins from my setup in order to reduce compilation times, I discovered that SceneCreator depends on many base plugins, and that most test plugins depend on SceneCreator. This design makes it *really* hard to disable any plugin if somebody wants to compile tests for the remaining enabled plugins. I guess the ""correct"" way would be to split the SceneCreator features in each plugin so that you never pay for what you don't use (we're doing c++ after all :-). Any idea/feedback?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417
https://github.com/sofa-framework/sofa/issues/418:1297,Deployability,update,update,1297,"_You made a recent checkout from master and your private plugins does not compile anymore._ . This is an unconfortable situation and be sure a lot of effort are done to reduce the amount of time this is happening. But whatever care we can take, this may and will happen. Two probable cases:; - when breaking stuffs that shouldn't be there have been merged by mistake. Well, we apologize for this situation. To help, do not hesitate to participate in the reviewing of the PRs before they are merged into master to detect this situation. ; ; - when breaking change that are accepted on purpose. The reason is that there is a general consensus that Sofa is currently very ""fat"" and thus PRs trying to clean or make sofa lightweight to compile are positive contribution to Sofa. The drawback of that is that cleaning and modularizing Sofa have a strong impact on file/code organization and for sure is going to break external code. . As this is going to happen I suggest in the following thread to report what he had to do to compile master when encountered a broken compilation. Anyone can contribute... . Hope this will help. . eg:; - I had to add a lot of #include<fstream> to avoid compilation problem with xxx; - Component from #include<SofaVolumetricData> have moved and been renamed ! I had to update my ; CMakeList.txt to add find_package(SofaImplicitField) or find_package(SofaDistanceGrid). An html version of the this thread is at:; Website version: https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/help-list/. To edit it checkout: https://github.com/sofa-framework/doc/blob/master/40_Programming_with_SOFA/10_Start_coding/70_Help_list.md. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418
https://github.com/sofa-framework/sofa/issues/418:169,Energy Efficiency,reduce,reduce,169,"_You made a recent checkout from master and your private plugins does not compile anymore._ . This is an unconfortable situation and be sure a lot of effort are done to reduce the amount of time this is happening. But whatever care we can take, this may and will happen. Two probable cases:; - when breaking stuffs that shouldn't be there have been merged by mistake. Well, we apologize for this situation. To help, do not hesitate to participate in the reviewing of the PRs before they are merged into master to detect this situation. ; ; - when breaking change that are accepted on purpose. The reason is that there is a general consensus that Sofa is currently very ""fat"" and thus PRs trying to clean or make sofa lightweight to compile are positive contribution to Sofa. The drawback of that is that cleaning and modularizing Sofa have a strong impact on file/code organization and for sure is going to break external code. . As this is going to happen I suggest in the following thread to report what he had to do to compile master when encountered a broken compilation. Anyone can contribute... . Hope this will help. . eg:; - I had to add a lot of #include<fstream> to avoid compilation problem with xxx; - Component from #include<SofaVolumetricData> have moved and been renamed ! I had to update my ; CMakeList.txt to add find_package(SofaImplicitField) or find_package(SofaDistanceGrid). An html version of the this thread is at:; Website version: https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/help-list/. To edit it checkout: https://github.com/sofa-framework/doc/blob/master/40_Programming_with_SOFA/10_Start_coding/70_Help_list.md. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418
https://github.com/sofa-framework/sofa/issues/418:57,Modifiability,plugin,plugins,57,"_You made a recent checkout from master and your private plugins does not compile anymore._ . This is an unconfortable situation and be sure a lot of effort are done to reduce the amount of time this is happening. But whatever care we can take, this may and will happen. Two probable cases:; - when breaking stuffs that shouldn't be there have been merged by mistake. Well, we apologize for this situation. To help, do not hesitate to participate in the reviewing of the PRs before they are merged into master to detect this situation. ; ; - when breaking change that are accepted on purpose. The reason is that there is a general consensus that Sofa is currently very ""fat"" and thus PRs trying to clean or make sofa lightweight to compile are positive contribution to Sofa. The drawback of that is that cleaning and modularizing Sofa have a strong impact on file/code organization and for sure is going to break external code. . As this is going to happen I suggest in the following thread to report what he had to do to compile master when encountered a broken compilation. Anyone can contribute... . Hope this will help. . eg:; - I had to add a lot of #include<fstream> to avoid compilation problem with xxx; - Component from #include<SofaVolumetricData> have moved and been renamed ! I had to update my ; CMakeList.txt to add find_package(SofaImplicitField) or find_package(SofaDistanceGrid). An html version of the this thread is at:; Website version: https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/help-list/. To edit it checkout: https://github.com/sofa-framework/doc/blob/master/40_Programming_with_SOFA/10_Start_coding/70_Help_list.md. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418
https://github.com/sofa-framework/sofa/issues/418:513,Safety,detect,detect,513,"_You made a recent checkout from master and your private plugins does not compile anymore._ . This is an unconfortable situation and be sure a lot of effort are done to reduce the amount of time this is happening. But whatever care we can take, this may and will happen. Two probable cases:; - when breaking stuffs that shouldn't be there have been merged by mistake. Well, we apologize for this situation. To help, do not hesitate to participate in the reviewing of the PRs before they are merged into master to detect this situation. ; ; - when breaking change that are accepted on purpose. The reason is that there is a general consensus that Sofa is currently very ""fat"" and thus PRs trying to clean or make sofa lightweight to compile are positive contribution to Sofa. The drawback of that is that cleaning and modularizing Sofa have a strong impact on file/code organization and for sure is going to break external code. . As this is going to happen I suggest in the following thread to report what he had to do to compile master when encountered a broken compilation. Anyone can contribute... . Hope this will help. . eg:; - I had to add a lot of #include<fstream> to avoid compilation problem with xxx; - Component from #include<SofaVolumetricData> have moved and been renamed ! I had to update my ; CMakeList.txt to add find_package(SofaImplicitField) or find_package(SofaDistanceGrid). An html version of the this thread is at:; Website version: https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/help-list/. To edit it checkout: https://github.com/sofa-framework/doc/blob/master/40_Programming_with_SOFA/10_Start_coding/70_Help_list.md. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418
https://github.com/sofa-framework/sofa/issues/418:1176,Safety,avoid,avoid,1176,"_You made a recent checkout from master and your private plugins does not compile anymore._ . This is an unconfortable situation and be sure a lot of effort are done to reduce the amount of time this is happening. But whatever care we can take, this may and will happen. Two probable cases:; - when breaking stuffs that shouldn't be there have been merged by mistake. Well, we apologize for this situation. To help, do not hesitate to participate in the reviewing of the PRs before they are merged into master to detect this situation. ; ; - when breaking change that are accepted on purpose. The reason is that there is a general consensus that Sofa is currently very ""fat"" and thus PRs trying to clean or make sofa lightweight to compile are positive contribution to Sofa. The drawback of that is that cleaning and modularizing Sofa have a strong impact on file/code organization and for sure is going to break external code. . As this is going to happen I suggest in the following thread to report what he had to do to compile master when encountered a broken compilation. Anyone can contribute... . Hope this will help. . eg:; - I had to add a lot of #include<fstream> to avoid compilation problem with xxx; - Component from #include<SofaVolumetricData> have moved and been renamed ! I had to update my ; CMakeList.txt to add find_package(SofaImplicitField) or find_package(SofaDistanceGrid). An html version of the this thread is at:; Website version: https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/help-list/. To edit it checkout: https://github.com/sofa-framework/doc/blob/master/40_Programming_with_SOFA/10_Start_coding/70_Help_list.md. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418
https://github.com/sofa-framework/sofa/pull/419:140,Availability,mainten,maintenance,140,Sofa is a drama in term of #include coupling which make:; - compilation time to be larger than what it should; - cost a lot in term of code maintenance. . In the future we should try to progressively improve the situation. ; This PR is a minor step toward this target. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/419
https://github.com/sofa-framework/sofa/pull/419:527,Availability,failure,failures,527,Sofa is a drama in term of #include coupling which make:; - compilation time to be larger than what it should; - cost a lot in term of code maintenance. . In the future we should try to progressively improve the situation. ; This PR is a minor step toward this target. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/419
https://github.com/sofa-framework/sofa/pull/419:577,Availability,failure,failures,577,Sofa is a drama in term of #include coupling which make:; - compilation time to be larger than what it should; - cost a lot in term of code maintenance. . In the future we should try to progressively improve the situation. ; This PR is a minor step toward this target. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/419
https://github.com/sofa-framework/sofa/pull/419:370,Integrability,message,message,370,Sofa is a drama in term of #include coupling which make:; - compilation time to be larger than what it should; - cost a lot in term of code maintenance. . In the future we should try to progressively improve the situation. ; This PR is a minor step toward this target. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/419
https://github.com/sofa-framework/sofa/pull/419:36,Modifiability,coupling,coupling,36,Sofa is a drama in term of #include coupling which make:; - compilation time to be larger than what it should; - cost a lot in term of code maintenance. . In the future we should try to progressively improve the situation. ; This PR is a minor step toward this target. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/419
https://github.com/sofa-framework/sofa/pull/419:522,Testability,test,test,522,Sofa is a drama in term of #include coupling which make:; - compilation time to be larger than what it should; - cost a lot in term of code maintenance. . In the future we should try to progressively improve the situation. ; This PR is a minor step toward this target. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/419
https://github.com/sofa-framework/sofa/pull/419:572,Testability,test,test,572,Sofa is a drama in term of #include coupling which make:; - compilation time to be larger than what it should; - cost a lot in term of code maintenance. . In the future we should try to progressively improve the situation. ; This PR is a minor step toward this target. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/419
https://github.com/sofa-framework/sofa/issues/420:200,Availability,error,error,200,"FYI:; Since the inclusion of .............**, Visual Studio 2015 needs to be updated to Update3** Service Pack while compiling AdvancedTimer.cpp.; ""....\sofakernel\extlibs\json\nlohmann_json.h(1259): error C2100: illegal indirection (compiling source file ....\SofaKernel\framework\sofa\helper\AdvancedTimer.cpp)"". (https://github.com/nlohmann/json/issues/719). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/420
https://github.com/sofa-framework/sofa/issues/420:77,Deployability,update,updated,77,"FYI:; Since the inclusion of .............**, Visual Studio 2015 needs to be updated to Update3** Service Pack while compiling AdvancedTimer.cpp.; ""....\sofakernel\extlibs\json\nlohmann_json.h(1259): error C2100: illegal indirection (compiling source file ....\SofaKernel\framework\sofa\helper\AdvancedTimer.cpp)"". (https://github.com/nlohmann/json/issues/719). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/420
https://github.com/sofa-framework/sofa/pull/421:635,Availability,failure,failures,635,"Fix regression (appeared when boost was supposed to be removed from Sofa).; -> Plugins _not able to find Boost automatically_ failed to compile (because it needs boost to compile obviously); ; The problem was coming on Windows mainly, as boost are often installed in the system directories on Unix system. And few changes were added to make boost's CMake part more consistent. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/421
https://github.com/sofa-framework/sofa/pull/421:685,Availability,failure,failures,685,"Fix regression (appeared when boost was supposed to be removed from Sofa).; -> Plugins _not able to find Boost automatically_ failed to compile (because it needs boost to compile obviously); ; The problem was coming on Windows mainly, as boost are often installed in the system directories on Unix system. And few changes were added to make boost's CMake part more consistent. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/421
https://github.com/sofa-framework/sofa/pull/421:254,Deployability,install,installed,254,"Fix regression (appeared when boost was supposed to be removed from Sofa).; -> Plugins _not able to find Boost automatically_ failed to compile (because it needs boost to compile obviously); ; The problem was coming on Windows mainly, as boost are often installed in the system directories on Unix system. And few changes were added to make boost's CMake part more consistent. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/421
https://github.com/sofa-framework/sofa/pull/421:478,Integrability,message,message,478,"Fix regression (appeared when boost was supposed to be removed from Sofa).; -> Plugins _not able to find Boost automatically_ failed to compile (because it needs boost to compile obviously); ; The problem was coming on Windows mainly, as boost are often installed in the system directories on Unix system. And few changes were added to make boost's CMake part more consistent. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/421
https://github.com/sofa-framework/sofa/pull/421:79,Modifiability,Plugin,Plugins,79,"Fix regression (appeared when boost was supposed to be removed from Sofa).; -> Plugins _not able to find Boost automatically_ failed to compile (because it needs boost to compile obviously); ; The problem was coming on Windows mainly, as boost are often installed in the system directories on Unix system. And few changes were added to make boost's CMake part more consistent. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/421
https://github.com/sofa-framework/sofa/pull/421:630,Testability,test,test,630,"Fix regression (appeared when boost was supposed to be removed from Sofa).; -> Plugins _not able to find Boost automatically_ failed to compile (because it needs boost to compile obviously); ; The problem was coming on Windows mainly, as boost are often installed in the system directories on Unix system. And few changes were added to make boost's CMake part more consistent. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/421
https://github.com/sofa-framework/sofa/pull/421:680,Testability,test,test,680,"Fix regression (appeared when boost was supposed to be removed from Sofa).; -> Plugins _not able to find Boost automatically_ failed to compile (because it needs boost to compile obviously); ; The problem was coming on Windows mainly, as boost are often installed in the system directories on Unix system. And few changes were added to make boost's CMake part more consistent. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/421
https://github.com/sofa-framework/sofa/pull/422:491,Availability,failure,failures,491,"In ImplicitSurfaceContainer:; Class name didn't match and also the namespace of DiscreteGridField. In applications/plugin/CMakeLists.txt:; SofaVolumetricData depends on SofaDistanceGrid and SofaImplicitField, so should be added first. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/422
https://github.com/sofa-framework/sofa/pull/422:541,Availability,failure,failures,541,"In ImplicitSurfaceContainer:; Class name didn't match and also the namespace of DiscreteGridField. In applications/plugin/CMakeLists.txt:; SofaVolumetricData depends on SofaDistanceGrid and SofaImplicitField, so should be added first. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/422
https://github.com/sofa-framework/sofa/pull/422:158,Integrability,depend,depends,158,"In ImplicitSurfaceContainer:; Class name didn't match and also the namespace of DiscreteGridField. In applications/plugin/CMakeLists.txt:; SofaVolumetricData depends on SofaDistanceGrid and SofaImplicitField, so should be added first. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/422
https://github.com/sofa-framework/sofa/pull/422:334,Integrability,message,message,334,"In ImplicitSurfaceContainer:; Class name didn't match and also the namespace of DiscreteGridField. In applications/plugin/CMakeLists.txt:; SofaVolumetricData depends on SofaDistanceGrid and SofaImplicitField, so should be added first. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/422
https://github.com/sofa-framework/sofa/pull/422:115,Modifiability,plugin,plugin,115,"In ImplicitSurfaceContainer:; Class name didn't match and also the namespace of DiscreteGridField. In applications/plugin/CMakeLists.txt:; SofaVolumetricData depends on SofaDistanceGrid and SofaImplicitField, so should be added first. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/422
https://github.com/sofa-framework/sofa/pull/422:486,Testability,test,test,486,"In ImplicitSurfaceContainer:; Class name didn't match and also the namespace of DiscreteGridField. In applications/plugin/CMakeLists.txt:; SofaVolumetricData depends on SofaDistanceGrid and SofaImplicitField, so should be added first. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/422
https://github.com/sofa-framework/sofa/pull/422:536,Testability,test,test,536,"In ImplicitSurfaceContainer:; Class name didn't match and also the namespace of DiscreteGridField. In applications/plugin/CMakeLists.txt:; SofaVolumetricData depends on SofaDistanceGrid and SofaImplicitField, so should be added first. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/422
https://github.com/sofa-framework/sofa/pull/423:535,Availability,failure,failures,535,"This PR removes warnings caused by inconsistent use of the override keyword. While it might not remove all of them (not all plugins have been checked), it allows developers to actually fix the remaining ones rather than ignoring them because it will only generate more warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423
https://github.com/sofa-framework/sofa/pull/423:585,Availability,failure,failures,585,"This PR removes warnings caused by inconsistent use of the override keyword. While it might not remove all of them (not all plugins have been checked), it allows developers to actually fix the remaining ones rather than ignoring them because it will only generate more warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423
https://github.com/sofa-framework/sofa/pull/423:378,Integrability,message,message,378,"This PR removes warnings caused by inconsistent use of the override keyword. While it might not remove all of them (not all plugins have been checked), it allows developers to actually fix the remaining ones rather than ignoring them because it will only generate more warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423
https://github.com/sofa-framework/sofa/pull/423:124,Modifiability,plugin,plugins,124,"This PR removes warnings caused by inconsistent use of the override keyword. While it might not remove all of them (not all plugins have been checked), it allows developers to actually fix the remaining ones rather than ignoring them because it will only generate more warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423
https://github.com/sofa-framework/sofa/pull/423:530,Testability,test,test,530,"This PR removes warnings caused by inconsistent use of the override keyword. While it might not remove all of them (not all plugins have been checked), it allows developers to actually fix the remaining ones rather than ignoring them because it will only generate more warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423
https://github.com/sofa-framework/sofa/pull/423:580,Testability,test,test,580,"This PR removes warnings caused by inconsistent use of the override keyword. While it might not remove all of them (not all plugins have been checked), it allows developers to actually fix the remaining ones rather than ignoring them because it will only generate more warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423
https://github.com/sofa-framework/sofa/pull/424:553,Availability,failure,failures,553,"Last step to complete the task to unify the image importing process. Now that CImgPlugin is integrated, ImageBMP/ImagePNG and ImageQt can be removed from the trunk of Sofa. ; It lets all the responsibility of reading images to CImgPlugin (or any user custom plugin). (closes finally #9 and #51 ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424
https://github.com/sofa-framework/sofa/pull/424:603,Availability,failure,failures,603,"Last step to complete the task to unify the image importing process. Now that CImgPlugin is integrated, ImageBMP/ImagePNG and ImageQt can be removed from the trunk of Sofa. ; It lets all the responsibility of reading images to CImgPlugin (or any user custom plugin). (closes finally #9 and #51 ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424
https://github.com/sofa-framework/sofa/pull/424:92,Deployability,integrat,integrated,92,"Last step to complete the task to unify the image importing process. Now that CImgPlugin is integrated, ImageBMP/ImagePNG and ImageQt can be removed from the trunk of Sofa. ; It lets all the responsibility of reading images to CImgPlugin (or any user custom plugin). (closes finally #9 and #51 ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424
https://github.com/sofa-framework/sofa/pull/424:92,Integrability,integrat,integrated,92,"Last step to complete the task to unify the image importing process. Now that CImgPlugin is integrated, ImageBMP/ImagePNG and ImageQt can be removed from the trunk of Sofa. ; It lets all the responsibility of reading images to CImgPlugin (or any user custom plugin). (closes finally #9 and #51 ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424
https://github.com/sofa-framework/sofa/pull/424:396,Integrability,message,message,396,"Last step to complete the task to unify the image importing process. Now that CImgPlugin is integrated, ImageBMP/ImagePNG and ImageQt can be removed from the trunk of Sofa. ; It lets all the responsibility of reading images to CImgPlugin (or any user custom plugin). (closes finally #9 and #51 ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424
https://github.com/sofa-framework/sofa/pull/424:258,Modifiability,plugin,plugin,258,"Last step to complete the task to unify the image importing process. Now that CImgPlugin is integrated, ImageBMP/ImagePNG and ImageQt can be removed from the trunk of Sofa. ; It lets all the responsibility of reading images to CImgPlugin (or any user custom plugin). (closes finally #9 and #51 ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424
https://github.com/sofa-framework/sofa/pull/424:548,Testability,test,test,548,"Last step to complete the task to unify the image importing process. Now that CImgPlugin is integrated, ImageBMP/ImagePNG and ImageQt can be removed from the trunk of Sofa. ; It lets all the responsibility of reading images to CImgPlugin (or any user custom plugin). (closes finally #9 and #51 ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424
https://github.com/sofa-framework/sofa/pull/424:598,Testability,test,test,598,"Last step to complete the task to unify the image importing process. Now that CImgPlugin is integrated, ImageBMP/ImagePNG and ImageQt can be removed from the trunk of Sofa. ; It lets all the responsibility of reading images to CImgPlugin (or any user custom plugin). (closes finally #9 and #51 ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424
https://github.com/sofa-framework/sofa/pull/425:363,Availability,failure,failures,363,There should be no more calls of OpenGL API in SofaKernel's modules.; Clean gl's related includes as well. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/425
https://github.com/sofa-framework/sofa/pull/425:413,Availability,failure,failures,413,There should be no more calls of OpenGL API in SofaKernel's modules.; Clean gl's related includes as well. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/425
https://github.com/sofa-framework/sofa/pull/425:206,Integrability,message,message,206,There should be no more calls of OpenGL API in SofaKernel's modules.; Clean gl's related includes as well. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/425
https://github.com/sofa-framework/sofa/pull/425:358,Testability,test,test,358,There should be no more calls of OpenGL API in SofaKernel's modules.; Clean gl's related includes as well. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/425
https://github.com/sofa-framework/sofa/pull/425:408,Testability,test,test,408,There should be no more calls of OpenGL API in SofaKernel's modules.; Clean gl's related includes as well. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/425
https://github.com/sofa-framework/sofa/issues/427:182,Integrability,depend,dependencies,182,"Let's move modules to plugins!. As pluginizing is a big hard for a coding sprint, we will mainly do preparatory work for future pluginization.; This means:; - [x] Solve SceneCreator dependencies problem; - [x] Identify at least one module to pluginize; - [x] If we have time, pluginize a module",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427
https://github.com/sofa-framework/sofa/issues/427:22,Modifiability,plugin,plugins,22,"Let's move modules to plugins!. As pluginizing is a big hard for a coding sprint, we will mainly do preparatory work for future pluginization.; This means:; - [x] Solve SceneCreator dependencies problem; - [x] Identify at least one module to pluginize; - [x] If we have time, pluginize a module",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427
https://github.com/sofa-framework/sofa/issues/427:35,Modifiability,plugin,pluginizing,35,"Let's move modules to plugins!. As pluginizing is a big hard for a coding sprint, we will mainly do preparatory work for future pluginization.; This means:; - [x] Solve SceneCreator dependencies problem; - [x] Identify at least one module to pluginize; - [x] If we have time, pluginize a module",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427
https://github.com/sofa-framework/sofa/issues/427:128,Modifiability,plugin,pluginization,128,"Let's move modules to plugins!. As pluginizing is a big hard for a coding sprint, we will mainly do preparatory work for future pluginization.; This means:; - [x] Solve SceneCreator dependencies problem; - [x] Identify at least one module to pluginize; - [x] If we have time, pluginize a module",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427
https://github.com/sofa-framework/sofa/issues/427:242,Modifiability,plugin,pluginize,242,"Let's move modules to plugins!. As pluginizing is a big hard for a coding sprint, we will mainly do preparatory work for future pluginization.; This means:; - [x] Solve SceneCreator dependencies problem; - [x] Identify at least one module to pluginize; - [x] If we have time, pluginize a module",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427
https://github.com/sofa-framework/sofa/issues/427:276,Modifiability,plugin,pluginize,276,"Let's move modules to plugins!. As pluginizing is a big hard for a coding sprint, we will mainly do preparatory work for future pluginization.; This means:; - [x] Solve SceneCreator dependencies problem; - [x] Identify at least one module to pluginize; - [x] If we have time, pluginize a module",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427
https://github.com/sofa-framework/sofa/pull/429:818,Availability,down,down,818,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:1167,Availability,failure,failures,1167,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:1522,Availability,failure,failures,1522,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:1572,Availability,failure,failures,1572,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:307,Integrability,depend,dependencies,307,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:789,Integrability,depend,dependencies,789,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:1365,Integrability,message,message,1365,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:943,Modifiability,plugin,plugin,943,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:995,Modifiability,Plugin,Pluginizing,995,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:1111,Modifiability,refactor,refactoring,1111,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:845,Safety,avoid,avoid,845,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:1162,Testability,test,test,1162,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:1517,Testability,test,test,1517,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:1567,Testability,test,test,1567,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:179,Usability,simpl,simpleapi,179,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:251,Usability,simpl,simpleapi,251,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/429:327,Usability,simpl,simplify,327,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429
https://github.com/sofa-framework/sofa/pull/431:300,Availability,failure,failures,300,Please try it on the CI before merging ;) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/431
https://github.com/sofa-framework/sofa/pull/431:350,Availability,failure,failures,350,Please try it on the CI before merging ;) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/431
https://github.com/sofa-framework/sofa/pull/431:143,Integrability,message,message,143,Please try it on the CI before merging ;) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/431
https://github.com/sofa-framework/sofa/pull/431:295,Testability,test,test,295,Please try it on the CI before merging ;) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/431
https://github.com/sofa-framework/sofa/pull/431:345,Testability,test,test,345,Please try it on the CI before merging ;) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/431
https://github.com/sofa-framework/sofa/pull/432:256,Availability,failure,failures,256,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/432
https://github.com/sofa-framework/sofa/pull/432:306,Availability,failure,failures,306,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/432
https://github.com/sofa-framework/sofa/pull/432:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/432
https://github.com/sofa-framework/sofa/pull/432:251,Testability,test,test,251,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/432
https://github.com/sofa-framework/sofa/pull/432:301,Testability,test,test,301,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/432
https://github.com/sofa-framework/sofa/pull/433:256,Availability,failure,failures,256,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/433
https://github.com/sofa-framework/sofa/pull/433:306,Availability,failure,failures,306,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/433
https://github.com/sofa-framework/sofa/pull/433:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/433
https://github.com/sofa-framework/sofa/pull/433:251,Testability,test,test,251,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/433
https://github.com/sofa-framework/sofa/pull/433:301,Testability,test,test,301,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/433
https://github.com/sofa-framework/sofa/issues/434:16,Usability,clear,clear,16,"While trying to clear the build from compiler-warnings I found these pieces of code in in the metioned files:. ` if (!added) listOfMonoMial.push_back(b); nbOfMonomial++;` at 410; ` if (!added) listOfMonoMial.push_back((*itb)); nbOfMonomial++;` at 431; ` if (!added) listOfMonoMial.push_back(-(*itb)); nbOfMonomial++;` at 452. The compiler warning is indicating that the second statement is not effected by the if-statement. But from my point of view, the second statement should be included like. `if(!added); {; .... ;; nbOfMonomial++;; }; `",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/434
https://github.com/sofa-framework/sofa/issues/435:637,Modifiability,variab,variable,637,"While trying to clear the build from compiler-warnings I found these pieces of code in in the metioned files:. ```C++; unsigned int idx = 0;; for( size_t i=0 ; i<size ; ); for( size_t j=0; j<value && i<size ; ++j, ++i ); rigidIndexPerPoint[i] = idx;; ++idx;; ```; (code is at line 280 in the file); The compiler warning is indicating that the `++idx;` statement is not effected by the outer or inner for-loop. As in this case `rigidIndexPerPoint[i] = idx;` is always assigning ""0"" to the `rigidIndexPerPoint[i]` I would purpose either to change change the mentioned statement to `rigidIndexPerPoint[i] = idx++;` or make `idx` a constant variable.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/435
https://github.com/sofa-framework/sofa/issues/435:16,Usability,clear,clear,16,"While trying to clear the build from compiler-warnings I found these pieces of code in in the metioned files:. ```C++; unsigned int idx = 0;; for( size_t i=0 ; i<size ; ); for( size_t j=0; j<value && i<size ; ++j, ++i ); rigidIndexPerPoint[i] = idx;; ++idx;; ```; (code is at line 280 in the file); The compiler warning is indicating that the `++idx;` statement is not effected by the outer or inner for-loop. As in this case `rigidIndexPerPoint[i] = idx;` is always assigning ""0"" to the `rigidIndexPerPoint[i]` I would purpose either to change change the mentioned statement to `rigidIndexPerPoint[i] = idx++;` or make `idx` a constant variable.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/435
https://github.com/sofa-framework/sofa/pull/436:1421,Availability,failure,failures,1421,"This PR simply introduces the template alias:. ```c++ ; sofa::core::sptr<T> = boost::intrusive_ptr<T>;; ```; in `<sofa/core/sptr.h>` and reflects the needed changes in the codebase. # Motivation. Most (all?) component types in SOFA come with a member typename `T::SPtr` referring to `boost::intrusive_ptr<T>`, which makes it impossible to declare a member shared pointer to another component without including the component header file. In an effort to decrease compilation times by removing unneeded include files, this PR introduces a template alias to solve this problem. It is now possible to declare member shared pointers using a forward declaration of their types only, as shown in 48f1447. # Changelog. - added `sofa::core::sptr<T>` template alias; - reflected changes in BaseClass macros, Base and Aspects; - replaced many constructors in `New` with variadic templates; - added an example include fix in `Compliant`. # Note. This PR is *not* intended to be a place for fixing every member SPtr + includes, otherwise it will never get merged. . If we can agree on the PR's philosophy and get it merged, please make separate PRs for include simplifications. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436
https://github.com/sofa-framework/sofa/pull/436:1471,Availability,failure,failures,1471,"This PR simply introduces the template alias:. ```c++ ; sofa::core::sptr<T> = boost::intrusive_ptr<T>;; ```; in `<sofa/core/sptr.h>` and reflects the needed changes in the codebase. # Motivation. Most (all?) component types in SOFA come with a member typename `T::SPtr` referring to `boost::intrusive_ptr<T>`, which makes it impossible to declare a member shared pointer to another component without including the component header file. In an effort to decrease compilation times by removing unneeded include files, this PR introduces a template alias to solve this problem. It is now possible to declare member shared pointers using a forward declaration of their types only, as shown in 48f1447. # Changelog. - added `sofa::core::sptr<T>` template alias; - reflected changes in BaseClass macros, Base and Aspects; - replaced many constructors in `New` with variadic templates; - added an example include fix in `Compliant`. # Note. This PR is *not* intended to be a place for fixing every member SPtr + includes, otherwise it will never get merged. . If we can agree on the PR's philosophy and get it merged, please make separate PRs for include simplifications. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436
https://github.com/sofa-framework/sofa/pull/436:1264,Integrability,message,message,1264,"This PR simply introduces the template alias:. ```c++ ; sofa::core::sptr<T> = boost::intrusive_ptr<T>;; ```; in `<sofa/core/sptr.h>` and reflects the needed changes in the codebase. # Motivation. Most (all?) component types in SOFA come with a member typename `T::SPtr` referring to `boost::intrusive_ptr<T>`, which makes it impossible to declare a member shared pointer to another component without including the component header file. In an effort to decrease compilation times by removing unneeded include files, this PR introduces a template alias to solve this problem. It is now possible to declare member shared pointers using a forward declaration of their types only, as shown in 48f1447. # Changelog. - added `sofa::core::sptr<T>` template alias; - reflected changes in BaseClass macros, Base and Aspects; - replaced many constructors in `New` with variadic templates; - added an example include fix in `Compliant`. # Note. This PR is *not* intended to be a place for fixing every member SPtr + includes, otherwise it will never get merged. . If we can agree on the PR's philosophy and get it merged, please make separate PRs for include simplifications. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436
https://github.com/sofa-framework/sofa/pull/436:1416,Testability,test,test,1416,"This PR simply introduces the template alias:. ```c++ ; sofa::core::sptr<T> = boost::intrusive_ptr<T>;; ```; in `<sofa/core/sptr.h>` and reflects the needed changes in the codebase. # Motivation. Most (all?) component types in SOFA come with a member typename `T::SPtr` referring to `boost::intrusive_ptr<T>`, which makes it impossible to declare a member shared pointer to another component without including the component header file. In an effort to decrease compilation times by removing unneeded include files, this PR introduces a template alias to solve this problem. It is now possible to declare member shared pointers using a forward declaration of their types only, as shown in 48f1447. # Changelog. - added `sofa::core::sptr<T>` template alias; - reflected changes in BaseClass macros, Base and Aspects; - replaced many constructors in `New` with variadic templates; - added an example include fix in `Compliant`. # Note. This PR is *not* intended to be a place for fixing every member SPtr + includes, otherwise it will never get merged. . If we can agree on the PR's philosophy and get it merged, please make separate PRs for include simplifications. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436
https://github.com/sofa-framework/sofa/pull/436:1466,Testability,test,test,1466,"This PR simply introduces the template alias:. ```c++ ; sofa::core::sptr<T> = boost::intrusive_ptr<T>;; ```; in `<sofa/core/sptr.h>` and reflects the needed changes in the codebase. # Motivation. Most (all?) component types in SOFA come with a member typename `T::SPtr` referring to `boost::intrusive_ptr<T>`, which makes it impossible to declare a member shared pointer to another component without including the component header file. In an effort to decrease compilation times by removing unneeded include files, this PR introduces a template alias to solve this problem. It is now possible to declare member shared pointers using a forward declaration of their types only, as shown in 48f1447. # Changelog. - added `sofa::core::sptr<T>` template alias; - reflected changes in BaseClass macros, Base and Aspects; - replaced many constructors in `New` with variadic templates; - added an example include fix in `Compliant`. # Note. This PR is *not* intended to be a place for fixing every member SPtr + includes, otherwise it will never get merged. . If we can agree on the PR's philosophy and get it merged, please make separate PRs for include simplifications. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436
https://github.com/sofa-framework/sofa/pull/436:8,Usability,simpl,simply,8,"This PR simply introduces the template alias:. ```c++ ; sofa::core::sptr<T> = boost::intrusive_ptr<T>;; ```; in `<sofa/core/sptr.h>` and reflects the needed changes in the codebase. # Motivation. Most (all?) component types in SOFA come with a member typename `T::SPtr` referring to `boost::intrusive_ptr<T>`, which makes it impossible to declare a member shared pointer to another component without including the component header file. In an effort to decrease compilation times by removing unneeded include files, this PR introduces a template alias to solve this problem. It is now possible to declare member shared pointers using a forward declaration of their types only, as shown in 48f1447. # Changelog. - added `sofa::core::sptr<T>` template alias; - reflected changes in BaseClass macros, Base and Aspects; - replaced many constructors in `New` with variadic templates; - added an example include fix in `Compliant`. # Note. This PR is *not* intended to be a place for fixing every member SPtr + includes, otherwise it will never get merged. . If we can agree on the PR's philosophy and get it merged, please make separate PRs for include simplifications. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436
https://github.com/sofa-framework/sofa/pull/436:1148,Usability,simpl,simplifications,1148,"This PR simply introduces the template alias:. ```c++ ; sofa::core::sptr<T> = boost::intrusive_ptr<T>;; ```; in `<sofa/core/sptr.h>` and reflects the needed changes in the codebase. # Motivation. Most (all?) component types in SOFA come with a member typename `T::SPtr` referring to `boost::intrusive_ptr<T>`, which makes it impossible to declare a member shared pointer to another component without including the component header file. In an effort to decrease compilation times by removing unneeded include files, this PR introduces a template alias to solve this problem. It is now possible to declare member shared pointers using a forward declaration of their types only, as shown in 48f1447. # Changelog. - added `sofa::core::sptr<T>` template alias; - reflected changes in BaseClass macros, Base and Aspects; - replaced many constructors in `New` with variadic templates; - added an example include fix in `Compliant`. # Note. This PR is *not* intended to be a place for fixing every member SPtr + includes, otherwise it will never get merged. . If we can agree on the PR's philosophy and get it merged, please make separate PRs for include simplifications. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436
https://github.com/sofa-framework/sofa/pull/437:256,Availability,failure,failures,256,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/437
https://github.com/sofa-framework/sofa/pull/437:306,Availability,failure,failures,306,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/437
https://github.com/sofa-framework/sofa/pull/437:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/437
https://github.com/sofa-framework/sofa/pull/437:251,Testability,test,test,251,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/437
https://github.com/sofa-framework/sofa/pull/437:301,Testability,test,test,301,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/437
https://github.com/sofa-framework/sofa/pull/438:312,Availability,failure,failures,312,Add a reset to the mappingJacobian in machanicalObject. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/438
https://github.com/sofa-framework/sofa/pull/438:362,Availability,failure,failures,362,Add a reset to the mappingJacobian in machanicalObject. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/438
https://github.com/sofa-framework/sofa/pull/438:155,Integrability,message,message,155,Add a reset to the mappingJacobian in machanicalObject. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/438
https://github.com/sofa-framework/sofa/pull/438:307,Testability,test,test,307,Add a reset to the mappingJacobian in machanicalObject. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/438
https://github.com/sofa-framework/sofa/pull/438:357,Testability,test,test,357,Add a reset to the mappingJacobian in machanicalObject. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/438
https://github.com/sofa-framework/sofa/pull/439:307,Availability,failure,failures,307,Adds a stop when the visitor encounters a mapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/439
https://github.com/sofa-framework/sofa/pull/439:357,Availability,failure,failures,357,Adds a stop when the visitor encounters a mapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/439
https://github.com/sofa-framework/sofa/pull/439:150,Integrability,message,message,150,Adds a stop when the visitor encounters a mapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/439
https://github.com/sofa-framework/sofa/pull/439:302,Testability,test,test,302,Adds a stop when the visitor encounters a mapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/439
https://github.com/sofa-framework/sofa/pull/439:352,Testability,test,test,352,Adds a stop when the visitor encounters a mapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/439
https://github.com/sofa-framework/sofa/issues/440:187,Modifiability,plugin,plugin,187,"Hi ! . Many existing component (FixedPlaneConstraint, FixedRotationConstraint, PointConstraint...) are particular implementation of PartialFixedConstraint. We have put them in a separate plugin named; ""Specific Boundary Conditions"". To finalize this work, it could be useful to have an implementation of FixedConstraint, on which you can define a subset of direction that you want to block. It would allow to have a unique implementation for fixed constraint in general. What do you think ?. Christian. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/440
https://github.com/sofa-framework/sofa/pull/441:281,Availability,failure,failures,281,fixes #435 RigidMapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/441
https://github.com/sofa-framework/sofa/pull/441:331,Availability,failure,failures,331,fixes #435 RigidMapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/441
https://github.com/sofa-framework/sofa/pull/441:124,Integrability,message,message,124,fixes #435 RigidMapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/441
https://github.com/sofa-framework/sofa/pull/441:276,Testability,test,test,276,fixes #435 RigidMapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/441
https://github.com/sofa-framework/sofa/pull/441:326,Testability,test,test,326,fixes #435 RigidMapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/441
https://github.com/sofa-framework/sofa/pull/442:281,Availability,failure,failures,281,fixing Polynomial #434 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/442
https://github.com/sofa-framework/sofa/pull/442:331,Availability,failure,failures,331,fixing Polynomial #434 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/442
https://github.com/sofa-framework/sofa/pull/442:124,Integrability,message,message,124,fixing Polynomial #434 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/442
https://github.com/sofa-framework/sofa/pull/442:276,Testability,test,test,276,fixing Polynomial #434 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/442
https://github.com/sofa-framework/sofa/pull/442:326,Testability,test,test,326,fixing Polynomial #434 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/442
https://github.com/sofa-framework/sofa/issues/443:90,Deployability,configurat,configuration,90,"I encountered a little issue during the compilation of SOFA using Visual Studio 2017. The configuration of SofaHelper's project, generated by CMake, seems incorrect. Indeed, during the linkage step, instead of looking for **libpng16.lib** (or libpng16d.lib) in **src/lib/win64/** (or /src/lib/win32), it searches **libpng.lib** (or libpngd.lib) in **build/SofaKernel/SofaFramework/SofaHelper**. At the moment, the workaround is to copy-paste and rename the concerned libraries, or manually edit the SofaHelper's project configuration inside Visual Studio to fix the path.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/443
https://github.com/sofa-framework/sofa/issues/443:520,Deployability,configurat,configuration,520,"I encountered a little issue during the compilation of SOFA using Visual Studio 2017. The configuration of SofaHelper's project, generated by CMake, seems incorrect. Indeed, during the linkage step, instead of looking for **libpng16.lib** (or libpng16d.lib) in **src/lib/win64/** (or /src/lib/win32), it searches **libpng.lib** (or libpngd.lib) in **build/SofaKernel/SofaFramework/SofaHelper**. At the moment, the workaround is to copy-paste and rename the concerned libraries, or manually edit the SofaHelper's project configuration inside Visual Studio to fix the path.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/443
https://github.com/sofa-framework/sofa/issues/443:90,Modifiability,config,configuration,90,"I encountered a little issue during the compilation of SOFA using Visual Studio 2017. The configuration of SofaHelper's project, generated by CMake, seems incorrect. Indeed, during the linkage step, instead of looking for **libpng16.lib** (or libpng16d.lib) in **src/lib/win64/** (or /src/lib/win32), it searches **libpng.lib** (or libpngd.lib) in **build/SofaKernel/SofaFramework/SofaHelper**. At the moment, the workaround is to copy-paste and rename the concerned libraries, or manually edit the SofaHelper's project configuration inside Visual Studio to fix the path.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/443
https://github.com/sofa-framework/sofa/issues/443:520,Modifiability,config,configuration,520,"I encountered a little issue during the compilation of SOFA using Visual Studio 2017. The configuration of SofaHelper's project, generated by CMake, seems incorrect. Indeed, during the linkage step, instead of looking for **libpng16.lib** (or libpng16d.lib) in **src/lib/win64/** (or /src/lib/win32), it searches **libpng.lib** (or libpngd.lib) in **build/SofaKernel/SofaFramework/SofaHelper**. At the moment, the workaround is to copy-paste and rename the concerned libraries, or manually edit the SofaHelper's project configuration inside Visual Studio to fix the path.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/443
https://github.com/sofa-framework/sofa/pull/444:12,Availability,error,errors,12,We had some errors while compiling sofa 17.06 on macos with Apple LLVM 9.0.; This was caused by two oddly inlined functions. So here's a PR removing the inline declaration.; We hope it'll be useful. Cheers.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/444
https://github.com/sofa-framework/sofa/pull/444:464,Availability,failure,failures,464,We had some errors while compiling sofa 17.06 on macos with Apple LLVM 9.0.; This was caused by two oddly inlined functions. So here's a PR removing the inline declaration.; We hope it'll be useful. Cheers.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/444
https://github.com/sofa-framework/sofa/pull/444:514,Availability,failure,failures,514,We had some errors while compiling sofa 17.06 on macos with Apple LLVM 9.0.; This was caused by two oddly inlined functions. So here's a PR removing the inline declaration.; We hope it'll be useful. Cheers.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/444
https://github.com/sofa-framework/sofa/pull/444:307,Integrability,message,message,307,We had some errors while compiling sofa 17.06 on macos with Apple LLVM 9.0.; This was caused by two oddly inlined functions. So here's a PR removing the inline declaration.; We hope it'll be useful. Cheers.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/444
https://github.com/sofa-framework/sofa/pull/444:459,Testability,test,test,459,We had some errors while compiling sofa 17.06 on macos with Apple LLVM 9.0.; This was caused by two oddly inlined functions. So here's a PR removing the inline declaration.; We hope it'll be useful. Cheers.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/444
https://github.com/sofa-framework/sofa/pull/444:509,Testability,test,test,509,We had some errors while compiling sofa 17.06 on macos with Apple LLVM 9.0.; This was caused by two oddly inlined functions. So here's a PR removing the inline declaration.; We hope it'll be useful. Cheers.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/444
https://github.com/sofa-framework/sofa/issues/445:301,Availability,error,error,301,"Hi,. seems like the tutorials are kind of destroyed : . - Some images don't appear anymore; - the UI is locked in a too small dimension (ie menus not completely visible) and brings too much orange light (possibly a question of color preferences); - closure of the scene launched in Sofa triggering an error messageBox; - some internal links between pages are broken; etc. maybe it would also be nice to check if all the tutorial scenes still work and are representative of the good usage of Sofa; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/445
https://github.com/sofa-framework/sofa/issues/445:307,Integrability,message,messageBox,307,"Hi,. seems like the tutorials are kind of destroyed : . - Some images don't appear anymore; - the UI is locked in a too small dimension (ie menus not completely visible) and brings too much orange light (possibly a question of color preferences); - closure of the scene launched in Sofa triggering an error messageBox; - some internal links between pages are broken; etc. maybe it would also be nice to check if all the tutorial scenes still work and are representative of the good usage of Sofa; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/445
https://github.com/sofa-framework/sofa/pull/446:184,Availability,avail,available,184,"UPDATE: SofaHelper compilation with msvc. libpng should not be forced; to be linked using pragma directive. The name of the library may vary,; and it the debug version may well not be available, and its; unavailability should not break the debug build. I fell in the same problem as the one mentionned in issue #443 while compiling; with msvc in debug, without having on my system a version of the libpng ; library called ""libpngd.lib"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/446
https://github.com/sofa-framework/sofa/pull/446:693,Availability,failure,failures,693,"UPDATE: SofaHelper compilation with msvc. libpng should not be forced; to be linked using pragma directive. The name of the library may vary,; and it the debug version may well not be available, and its; unavailability should not break the debug build. I fell in the same problem as the one mentionned in issue #443 while compiling; with msvc in debug, without having on my system a version of the libpng ; library called ""libpngd.lib"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/446
https://github.com/sofa-framework/sofa/pull/446:743,Availability,failure,failures,743,"UPDATE: SofaHelper compilation with msvc. libpng should not be forced; to be linked using pragma directive. The name of the library may vary,; and it the debug version may well not be available, and its; unavailability should not break the debug build. I fell in the same problem as the one mentionned in issue #443 while compiling; with msvc in debug, without having on my system a version of the libpng ; library called ""libpngd.lib"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/446
https://github.com/sofa-framework/sofa/pull/446:0,Deployability,UPDATE,UPDATE,0,"UPDATE: SofaHelper compilation with msvc. libpng should not be forced; to be linked using pragma directive. The name of the library may vary,; and it the debug version may well not be available, and its; unavailability should not break the debug build. I fell in the same problem as the one mentionned in issue #443 while compiling; with msvc in debug, without having on my system a version of the libpng ; library called ""libpngd.lib"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/446
https://github.com/sofa-framework/sofa/pull/446:536,Integrability,message,message,536,"UPDATE: SofaHelper compilation with msvc. libpng should not be forced; to be linked using pragma directive. The name of the library may vary,; and it the debug version may well not be available, and its; unavailability should not break the debug build. I fell in the same problem as the one mentionned in issue #443 while compiling; with msvc in debug, without having on my system a version of the libpng ; library called ""libpngd.lib"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/446
https://github.com/sofa-framework/sofa/pull/446:688,Testability,test,test,688,"UPDATE: SofaHelper compilation with msvc. libpng should not be forced; to be linked using pragma directive. The name of the library may vary,; and it the debug version may well not be available, and its; unavailability should not break the debug build. I fell in the same problem as the one mentionned in issue #443 while compiling; with msvc in debug, without having on my system a version of the libpng ; library called ""libpngd.lib"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/446
https://github.com/sofa-framework/sofa/pull/446:738,Testability,test,test,738,"UPDATE: SofaHelper compilation with msvc. libpng should not be forced; to be linked using pragma directive. The name of the library may vary,; and it the debug version may well not be available, and its; unavailability should not break the debug build. I fell in the same problem as the one mentionned in issue #443 while compiling; with msvc in debug, without having on my system a version of the libpng ; library called ""libpngd.lib"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/446
https://github.com/sofa-framework/sofa/pull/447:438,Availability,failure,failures,438,"Some pragma directive were introduced by 4548ab474f89a229f; but they work only with gcc, and generate some warnings with ; other compilers, at least msvc based on my own experience. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/447
https://github.com/sofa-framework/sofa/pull/447:488,Availability,failure,failures,488,"Some pragma directive were introduced by 4548ab474f89a229f; but they work only with gcc, and generate some warnings with ; other compilers, at least msvc based on my own experience. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/447
https://github.com/sofa-framework/sofa/pull/447:281,Integrability,message,message,281,"Some pragma directive were introduced by 4548ab474f89a229f; but they work only with gcc, and generate some warnings with ; other compilers, at least msvc based on my own experience. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/447
https://github.com/sofa-framework/sofa/pull/447:433,Testability,test,test,433,"Some pragma directive were introduced by 4548ab474f89a229f; but they work only with gcc, and generate some warnings with ; other compilers, at least msvc based on my own experience. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/447
https://github.com/sofa-framework/sofa/pull/447:483,Testability,test,test,483,"Some pragma directive were introduced by 4548ab474f89a229f; but they work only with gcc, and generate some warnings with ; other compilers, at least msvc based on my own experience. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/447
https://github.com/sofa-framework/sofa/pull/448:399,Availability,failure,failures,399,"I do not have cstringt.h on my system, and it does not seem to be a requirement to build; FileMonitor_windows.cpp ; Any thoughts about this ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/448
https://github.com/sofa-framework/sofa/pull/448:449,Availability,failure,failures,449,"I do not have cstringt.h on my system, and it does not seem to be a requirement to build; FileMonitor_windows.cpp ; Any thoughts about this ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/448
https://github.com/sofa-framework/sofa/pull/448:242,Integrability,message,message,242,"I do not have cstringt.h on my system, and it does not seem to be a requirement to build; FileMonitor_windows.cpp ; Any thoughts about this ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/448
https://github.com/sofa-framework/sofa/pull/448:394,Testability,test,test,394,"I do not have cstringt.h on my system, and it does not seem to be a requirement to build; FileMonitor_windows.cpp ; Any thoughts about this ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/448
https://github.com/sofa-framework/sofa/pull/448:444,Testability,test,test,444,"I do not have cstringt.h on my system, and it does not seem to be a requirement to build; FileMonitor_windows.cpp ; Any thoughts about this ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/448
https://github.com/sofa-framework/sofa/pull/449:330,Availability,failure,failures,330,This PR is basically the same as #444 but this time it is against master. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/449
https://github.com/sofa-framework/sofa/pull/449:380,Availability,failure,failures,380,This PR is basically the same as #444 but this time it is against master. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/449
https://github.com/sofa-framework/sofa/pull/449:173,Integrability,message,message,173,This PR is basically the same as #444 but this time it is against master. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/449
https://github.com/sofa-framework/sofa/pull/449:325,Testability,test,test,325,This PR is basically the same as #444 but this time it is against master. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/449
https://github.com/sofa-framework/sofa/pull/449:375,Testability,test,test,375,This PR is basically the same as #444 but this time it is against master. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/449
https://github.com/sofa-framework/sofa/pull/450:571,Availability,failure,failures,571,This PR adds some read/write access method for Data which can shorten slightly the syntax ; required when you want to construct a Read(Write)Accessor object for a Data. ; It extends the method implemented in commit 77ca6f2a7c2cf18a39cdad6a4a88f02ed6d9a9dd; for WriteOnlyAccessor to other types of Data Accessor.; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/450
https://github.com/sofa-framework/sofa/pull/450:621,Availability,failure,failures,621,This PR adds some read/write access method for Data which can shorten slightly the syntax ; required when you want to construct a Read(Write)Accessor object for a Data. ; It extends the method implemented in commit 77ca6f2a7c2cf18a39cdad6a4a88f02ed6d9a9dd; for WriteOnlyAccessor to other types of Data Accessor.; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/450
https://github.com/sofa-framework/sofa/pull/450:414,Integrability,message,message,414,This PR adds some read/write access method for Data which can shorten slightly the syntax ; required when you want to construct a Read(Write)Accessor object for a Data. ; It extends the method implemented in commit 77ca6f2a7c2cf18a39cdad6a4a88f02ed6d9a9dd; for WriteOnlyAccessor to other types of Data Accessor.; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/450
https://github.com/sofa-framework/sofa/pull/450:174,Modifiability,extend,extends,174,This PR adds some read/write access method for Data which can shorten slightly the syntax ; required when you want to construct a Read(Write)Accessor object for a Data. ; It extends the method implemented in commit 77ca6f2a7c2cf18a39cdad6a4a88f02ed6d9a9dd; for WriteOnlyAccessor to other types of Data Accessor.; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/450
https://github.com/sofa-framework/sofa/pull/450:29,Security,access,access,29,This PR adds some read/write access method for Data which can shorten slightly the syntax ; required when you want to construct a Read(Write)Accessor object for a Data. ; It extends the method implemented in commit 77ca6f2a7c2cf18a39cdad6a4a88f02ed6d9a9dd; for WriteOnlyAccessor to other types of Data Accessor.; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/450
https://github.com/sofa-framework/sofa/pull/450:141,Security,Access,Accessor,141,This PR adds some read/write access method for Data which can shorten slightly the syntax ; required when you want to construct a Read(Write)Accessor object for a Data. ; It extends the method implemented in commit 77ca6f2a7c2cf18a39cdad6a4a88f02ed6d9a9dd; for WriteOnlyAccessor to other types of Data Accessor.; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/450
https://github.com/sofa-framework/sofa/pull/450:302,Security,Access,Accessor,302,This PR adds some read/write access method for Data which can shorten slightly the syntax ; required when you want to construct a Read(Write)Accessor object for a Data. ; It extends the method implemented in commit 77ca6f2a7c2cf18a39cdad6a4a88f02ed6d9a9dd; for WriteOnlyAccessor to other types of Data Accessor.; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/450
https://github.com/sofa-framework/sofa/pull/450:566,Testability,test,test,566,This PR adds some read/write access method for Data which can shorten slightly the syntax ; required when you want to construct a Read(Write)Accessor object for a Data. ; It extends the method implemented in commit 77ca6f2a7c2cf18a39cdad6a4a88f02ed6d9a9dd; for WriteOnlyAccessor to other types of Data Accessor.; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/450
https://github.com/sofa-framework/sofa/pull/450:616,Testability,test,test,616,This PR adds some read/write access method for Data which can shorten slightly the syntax ; required when you want to construct a Read(Write)Accessor object for a Data. ; It extends the method implemented in commit 77ca6f2a7c2cf18a39cdad6a4a88f02ed6d9a9dd; for WriteOnlyAccessor to other types of Data Accessor.; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/450
https://github.com/sofa-framework/sofa/pull/451:349,Availability,failure,failures,349,`${CMAKE_BINARY_DIR}/bin/$<CONFIG>/` does not exist if using MSVC without Visual Studio IDE. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/451
https://github.com/sofa-framework/sofa/pull/451:399,Availability,failure,failures,399,`${CMAKE_BINARY_DIR}/bin/$<CONFIG>/` does not exist if using MSVC without Visual Studio IDE. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/451
https://github.com/sofa-framework/sofa/pull/451:192,Integrability,message,message,192,`${CMAKE_BINARY_DIR}/bin/$<CONFIG>/` does not exist if using MSVC without Visual Studio IDE. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/451
https://github.com/sofa-framework/sofa/pull/451:27,Modifiability,CONFIG,CONFIG,27,`${CMAKE_BINARY_DIR}/bin/$<CONFIG>/` does not exist if using MSVC without Visual Studio IDE. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/451
https://github.com/sofa-framework/sofa/pull/451:344,Testability,test,test,344,`${CMAKE_BINARY_DIR}/bin/$<CONFIG>/` does not exist if using MSVC without Visual Studio IDE. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/451
https://github.com/sofa-framework/sofa/pull/451:394,Testability,test,test,394,`${CMAKE_BINARY_DIR}/bin/$<CONFIG>/` does not exist if using MSVC without Visual Studio IDE. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/451
https://github.com/sofa-framework/sofa/pull/452:565,Availability,failure,failures,565,This PR add some facility method to convert back and forth a `MapMapSparseMatrix` type ; into an `Eigen::SparseMatrix`. # CHANGELOG ; * Added some utility methods to be able to accumulate MatrixDeriv types to parent dofs when the mapping implements its jacobian using a sparse matrix from the Eigen library.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/452
https://github.com/sofa-framework/sofa/pull/452:615,Availability,failure,failures,615,This PR add some facility method to convert back and forth a `MapMapSparseMatrix` type ; into an `Eigen::SparseMatrix`. # CHANGELOG ; * Added some utility methods to be able to accumulate MatrixDeriv types to parent dofs when the mapping implements its jacobian using a sparse matrix from the Eigen library.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/452
https://github.com/sofa-framework/sofa/pull/452:408,Integrability,message,message,408,This PR add some facility method to convert back and forth a `MapMapSparseMatrix` type ; into an `Eigen::SparseMatrix`. # CHANGELOG ; * Added some utility methods to be able to accumulate MatrixDeriv types to parent dofs when the mapping implements its jacobian using a sparse matrix from the Eigen library.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/452
https://github.com/sofa-framework/sofa/pull/452:560,Testability,test,test,560,This PR add some facility method to convert back and forth a `MapMapSparseMatrix` type ; into an `Eigen::SparseMatrix`. # CHANGELOG ; * Added some utility methods to be able to accumulate MatrixDeriv types to parent dofs when the mapping implements its jacobian using a sparse matrix from the Eigen library.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/452
https://github.com/sofa-framework/sofa/pull/452:610,Testability,test,test,610,This PR add some facility method to convert back and forth a `MapMapSparseMatrix` type ; into an `Eigen::SparseMatrix`. # CHANGELOG ; * Added some utility methods to be able to accumulate MatrixDeriv types to parent dofs when the mapping implements its jacobian using a sparse matrix from the Eigen library.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/452
https://github.com/sofa-framework/sofa/pull/453:1198,Availability,down,down,1198,"s afterwards. It is a reopening of #429 (sort of).; I started from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-m",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:1641,Availability,failure,failures,1641,"//github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:1996,Availability,failure,failures,1996,"//github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:2046,Availability,failure,failures,2046,"//github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:687,Integrability,depend,dependencies,687,"This is the work on which was based the STC#4 coding sprint.; It has to be merged to clearly differentiate deprecation and pluginization works afterwards. It is a reopening of #429 (sort of).; I started from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:1169,Integrability,depend,dependencies,1169,"s afterwards. It is a reopening of #429 (sort of).; I started from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-m",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:1839,Integrability,message,message,1839,"//github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:123,Modifiability,plugin,pluginization,123,"This is the work on which was based the STC#4 coding sprint.; It has to be merged to clearly differentiate deprecation and pluginization works afterwards. It is a reopening of #429 (sort of).; I started from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:1417,Modifiability,plugin,plugin,1417,"//github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:1469,Modifiability,Plugin,Pluginizing,1469,"//github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:1585,Modifiability,refactor,refactoring,1585,"//github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:1252,Performance,load,loaded,1252,"//github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:1319,Safety,avoid,avoid,1319,"//github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:1636,Testability,test,test,1636,"//github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:1991,Testability,test,test,1991,"//github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:2041,Testability,test,test,2041,"//github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:85,Usability,clear,clearly,85,"This is the work on which was based the STC#4 coding sprint.; It has to be merged to clearly differentiate deprecation and pluginization works afterwards. It is a reopening of #429 (sort of).; I started from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:559,Usability,simpl,simpleapi,559,"This is the work on which was based the STC#4 coding sprint.; It has to be merged to clearly differentiate deprecation and pluginization works afterwards. It is a reopening of #429 (sort of).; I started from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:631,Usability,simpl,simpleapi,631,"This is the work on which was based the STC#4 coding sprint.; It has to be merged to clearly differentiate deprecation and pluginization works afterwards. It is a reopening of #429 (sort of).; I started from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/453:707,Usability,simpl,simplify,707,"This is the work on which was based the STC#4 coding sprint.; It has to be merged to clearly differentiate deprecation and pluginization works afterwards. It is a reopening of #429 (sort of).; I started from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453
https://github.com/sofa-framework/sofa/pull/454:379,Availability,failure,failures,379,This PR will remove various warnings generated when compiling with gcc 6.3.0. Warnings coming from extlibs are not fixed.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/454
https://github.com/sofa-framework/sofa/pull/454:429,Availability,failure,failures,429,This PR will remove various warnings generated when compiling with gcc 6.3.0. Warnings coming from extlibs are not fixed.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/454
https://github.com/sofa-framework/sofa/pull/454:222,Integrability,message,message,222,This PR will remove various warnings generated when compiling with gcc 6.3.0. Warnings coming from extlibs are not fixed.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/454
https://github.com/sofa-framework/sofa/pull/454:374,Testability,test,test,374,This PR will remove various warnings generated when compiling with gcc 6.3.0. Warnings coming from extlibs are not fixed.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/454
https://github.com/sofa-framework/sofa/pull/454:424,Testability,test,test,424,This PR will remove various warnings generated when compiling with gcc 6.3.0. Warnings coming from extlibs are not fixed.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/454
https://github.com/sofa-framework/sofa/pull/455:1377,Availability,failure,failures,1377,"This PR removes the dependency from SofaTest to the framework_test executable.; The reason for this is that SofaTest depends on a **lot** (if not all...) of librarires which do not reside ; in SofaKernel. So having a dependency to SofaTest somewhat defeats the whole puropose of writing; self contained fast to compile unit tests.; As a general rule, it should be a requirement that SofaKernel can compile without any dependency to ; libraries that do not reside in SofaKernel.; This PR address the problem only for framework_test, but the problem persists in SofaSimulation_test. # CHANGELOG; - Moved AdvancedTimer_test and DefaultAnimationLoop to SofaSimulation_test since they require to be able to instantiate a concrete instance of a Node; - Moved _TrackedData_test to SofaSimulation_test since it requires to be able to instantiate an AnimateBeginEvent object; - Removed dependency to SofaTest from framework_test, which implied the following; - removing calls to EXPECT_MSG_NOEMIT ( which is defined in SofaTest ); - copy pasting EXPECT_MAT_NEAR and EXPECT_MAT_DOUBLE_EQ macros from SofaTest in MatTypes_test.cpp. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455
https://github.com/sofa-framework/sofa/pull/455:1427,Availability,failure,failures,1427,"This PR removes the dependency from SofaTest to the framework_test executable.; The reason for this is that SofaTest depends on a **lot** (if not all...) of librarires which do not reside ; in SofaKernel. So having a dependency to SofaTest somewhat defeats the whole puropose of writing; self contained fast to compile unit tests.; As a general rule, it should be a requirement that SofaKernel can compile without any dependency to ; libraries that do not reside in SofaKernel.; This PR address the problem only for framework_test, but the problem persists in SofaSimulation_test. # CHANGELOG; - Moved AdvancedTimer_test and DefaultAnimationLoop to SofaSimulation_test since they require to be able to instantiate a concrete instance of a Node; - Moved _TrackedData_test to SofaSimulation_test since it requires to be able to instantiate an AnimateBeginEvent object; - Removed dependency to SofaTest from framework_test, which implied the following; - removing calls to EXPECT_MSG_NOEMIT ( which is defined in SofaTest ); - copy pasting EXPECT_MAT_NEAR and EXPECT_MAT_DOUBLE_EQ macros from SofaTest in MatTypes_test.cpp. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455
https://github.com/sofa-framework/sofa/pull/455:20,Integrability,depend,dependency,20,"This PR removes the dependency from SofaTest to the framework_test executable.; The reason for this is that SofaTest depends on a **lot** (if not all...) of librarires which do not reside ; in SofaKernel. So having a dependency to SofaTest somewhat defeats the whole puropose of writing; self contained fast to compile unit tests.; As a general rule, it should be a requirement that SofaKernel can compile without any dependency to ; libraries that do not reside in SofaKernel.; This PR address the problem only for framework_test, but the problem persists in SofaSimulation_test. # CHANGELOG; - Moved AdvancedTimer_test and DefaultAnimationLoop to SofaSimulation_test since they require to be able to instantiate a concrete instance of a Node; - Moved _TrackedData_test to SofaSimulation_test since it requires to be able to instantiate an AnimateBeginEvent object; - Removed dependency to SofaTest from framework_test, which implied the following; - removing calls to EXPECT_MSG_NOEMIT ( which is defined in SofaTest ); - copy pasting EXPECT_MAT_NEAR and EXPECT_MAT_DOUBLE_EQ macros from SofaTest in MatTypes_test.cpp. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455
https://github.com/sofa-framework/sofa/pull/455:117,Integrability,depend,depends,117,"This PR removes the dependency from SofaTest to the framework_test executable.; The reason for this is that SofaTest depends on a **lot** (if not all...) of librarires which do not reside ; in SofaKernel. So having a dependency to SofaTest somewhat defeats the whole puropose of writing; self contained fast to compile unit tests.; As a general rule, it should be a requirement that SofaKernel can compile without any dependency to ; libraries that do not reside in SofaKernel.; This PR address the problem only for framework_test, but the problem persists in SofaSimulation_test. # CHANGELOG; - Moved AdvancedTimer_test and DefaultAnimationLoop to SofaSimulation_test since they require to be able to instantiate a concrete instance of a Node; - Moved _TrackedData_test to SofaSimulation_test since it requires to be able to instantiate an AnimateBeginEvent object; - Removed dependency to SofaTest from framework_test, which implied the following; - removing calls to EXPECT_MSG_NOEMIT ( which is defined in SofaTest ); - copy pasting EXPECT_MAT_NEAR and EXPECT_MAT_DOUBLE_EQ macros from SofaTest in MatTypes_test.cpp. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455
https://github.com/sofa-framework/sofa/pull/455:217,Integrability,depend,dependency,217,"This PR removes the dependency from SofaTest to the framework_test executable.; The reason for this is that SofaTest depends on a **lot** (if not all...) of librarires which do not reside ; in SofaKernel. So having a dependency to SofaTest somewhat defeats the whole puropose of writing; self contained fast to compile unit tests.; As a general rule, it should be a requirement that SofaKernel can compile without any dependency to ; libraries that do not reside in SofaKernel.; This PR address the problem only for framework_test, but the problem persists in SofaSimulation_test. # CHANGELOG; - Moved AdvancedTimer_test and DefaultAnimationLoop to SofaSimulation_test since they require to be able to instantiate a concrete instance of a Node; - Moved _TrackedData_test to SofaSimulation_test since it requires to be able to instantiate an AnimateBeginEvent object; - Removed dependency to SofaTest from framework_test, which implied the following; - removing calls to EXPECT_MSG_NOEMIT ( which is defined in SofaTest ); - copy pasting EXPECT_MAT_NEAR and EXPECT_MAT_DOUBLE_EQ macros from SofaTest in MatTypes_test.cpp. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455
https://github.com/sofa-framework/sofa/pull/455:418,Integrability,depend,dependency,418,"This PR removes the dependency from SofaTest to the framework_test executable.; The reason for this is that SofaTest depends on a **lot** (if not all...) of librarires which do not reside ; in SofaKernel. So having a dependency to SofaTest somewhat defeats the whole puropose of writing; self contained fast to compile unit tests.; As a general rule, it should be a requirement that SofaKernel can compile without any dependency to ; libraries that do not reside in SofaKernel.; This PR address the problem only for framework_test, but the problem persists in SofaSimulation_test. # CHANGELOG; - Moved AdvancedTimer_test and DefaultAnimationLoop to SofaSimulation_test since they require to be able to instantiate a concrete instance of a Node; - Moved _TrackedData_test to SofaSimulation_test since it requires to be able to instantiate an AnimateBeginEvent object; - Removed dependency to SofaTest from framework_test, which implied the following; - removing calls to EXPECT_MSG_NOEMIT ( which is defined in SofaTest ); - copy pasting EXPECT_MAT_NEAR and EXPECT_MAT_DOUBLE_EQ macros from SofaTest in MatTypes_test.cpp. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455
https://github.com/sofa-framework/sofa/pull/455:877,Integrability,depend,dependency,877,"This PR removes the dependency from SofaTest to the framework_test executable.; The reason for this is that SofaTest depends on a **lot** (if not all...) of librarires which do not reside ; in SofaKernel. So having a dependency to SofaTest somewhat defeats the whole puropose of writing; self contained fast to compile unit tests.; As a general rule, it should be a requirement that SofaKernel can compile without any dependency to ; libraries that do not reside in SofaKernel.; This PR address the problem only for framework_test, but the problem persists in SofaSimulation_test. # CHANGELOG; - Moved AdvancedTimer_test and DefaultAnimationLoop to SofaSimulation_test since they require to be able to instantiate a concrete instance of a Node; - Moved _TrackedData_test to SofaSimulation_test since it requires to be able to instantiate an AnimateBeginEvent object; - Removed dependency to SofaTest from framework_test, which implied the following; - removing calls to EXPECT_MSG_NOEMIT ( which is defined in SofaTest ); - copy pasting EXPECT_MAT_NEAR and EXPECT_MAT_DOUBLE_EQ macros from SofaTest in MatTypes_test.cpp. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455
https://github.com/sofa-framework/sofa/pull/455:1220,Integrability,message,message,1220,"This PR removes the dependency from SofaTest to the framework_test executable.; The reason for this is that SofaTest depends on a **lot** (if not all...) of librarires which do not reside ; in SofaKernel. So having a dependency to SofaTest somewhat defeats the whole puropose of writing; self contained fast to compile unit tests.; As a general rule, it should be a requirement that SofaKernel can compile without any dependency to ; libraries that do not reside in SofaKernel.; This PR address the problem only for framework_test, but the problem persists in SofaSimulation_test. # CHANGELOG; - Moved AdvancedTimer_test and DefaultAnimationLoop to SofaSimulation_test since they require to be able to instantiate a concrete instance of a Node; - Moved _TrackedData_test to SofaSimulation_test since it requires to be able to instantiate an AnimateBeginEvent object; - Removed dependency to SofaTest from framework_test, which implied the following; - removing calls to EXPECT_MSG_NOEMIT ( which is defined in SofaTest ); - copy pasting EXPECT_MAT_NEAR and EXPECT_MAT_DOUBLE_EQ macros from SofaTest in MatTypes_test.cpp. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455
https://github.com/sofa-framework/sofa/pull/455:324,Testability,test,tests,324,"This PR removes the dependency from SofaTest to the framework_test executable.; The reason for this is that SofaTest depends on a **lot** (if not all...) of librarires which do not reside ; in SofaKernel. So having a dependency to SofaTest somewhat defeats the whole puropose of writing; self contained fast to compile unit tests.; As a general rule, it should be a requirement that SofaKernel can compile without any dependency to ; libraries that do not reside in SofaKernel.; This PR address the problem only for framework_test, but the problem persists in SofaSimulation_test. # CHANGELOG; - Moved AdvancedTimer_test and DefaultAnimationLoop to SofaSimulation_test since they require to be able to instantiate a concrete instance of a Node; - Moved _TrackedData_test to SofaSimulation_test since it requires to be able to instantiate an AnimateBeginEvent object; - Removed dependency to SofaTest from framework_test, which implied the following; - removing calls to EXPECT_MSG_NOEMIT ( which is defined in SofaTest ); - copy pasting EXPECT_MAT_NEAR and EXPECT_MAT_DOUBLE_EQ macros from SofaTest in MatTypes_test.cpp. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455
https://github.com/sofa-framework/sofa/pull/455:1372,Testability,test,test,1372,"This PR removes the dependency from SofaTest to the framework_test executable.; The reason for this is that SofaTest depends on a **lot** (if not all...) of librarires which do not reside ; in SofaKernel. So having a dependency to SofaTest somewhat defeats the whole puropose of writing; self contained fast to compile unit tests.; As a general rule, it should be a requirement that SofaKernel can compile without any dependency to ; libraries that do not reside in SofaKernel.; This PR address the problem only for framework_test, but the problem persists in SofaSimulation_test. # CHANGELOG; - Moved AdvancedTimer_test and DefaultAnimationLoop to SofaSimulation_test since they require to be able to instantiate a concrete instance of a Node; - Moved _TrackedData_test to SofaSimulation_test since it requires to be able to instantiate an AnimateBeginEvent object; - Removed dependency to SofaTest from framework_test, which implied the following; - removing calls to EXPECT_MSG_NOEMIT ( which is defined in SofaTest ); - copy pasting EXPECT_MAT_NEAR and EXPECT_MAT_DOUBLE_EQ macros from SofaTest in MatTypes_test.cpp. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455
https://github.com/sofa-framework/sofa/pull/455:1422,Testability,test,test,1422,"This PR removes the dependency from SofaTest to the framework_test executable.; The reason for this is that SofaTest depends on a **lot** (if not all...) of librarires which do not reside ; in SofaKernel. So having a dependency to SofaTest somewhat defeats the whole puropose of writing; self contained fast to compile unit tests.; As a general rule, it should be a requirement that SofaKernel can compile without any dependency to ; libraries that do not reside in SofaKernel.; This PR address the problem only for framework_test, but the problem persists in SofaSimulation_test. # CHANGELOG; - Moved AdvancedTimer_test and DefaultAnimationLoop to SofaSimulation_test since they require to be able to instantiate a concrete instance of a Node; - Moved _TrackedData_test to SofaSimulation_test since it requires to be able to instantiate an AnimateBeginEvent object; - Removed dependency to SofaTest from framework_test, which implied the following; - removing calls to EXPECT_MSG_NOEMIT ( which is defined in SofaTest ); - copy pasting EXPECT_MAT_NEAR and EXPECT_MAT_DOUBLE_EQ macros from SofaTest in MatTypes_test.cpp. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455
https://github.com/sofa-framework/sofa/pull/456:353,Availability,failure,failures,353,# CHANGELOG ; - [SofaDefaulttype] Add MapMapSparseMatrix multTranspose method with BaseVector. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/456
https://github.com/sofa-framework/sofa/pull/456:403,Availability,failure,failures,403,# CHANGELOG ; - [SofaDefaulttype] Add MapMapSparseMatrix multTranspose method with BaseVector. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/456
https://github.com/sofa-framework/sofa/pull/456:196,Integrability,message,message,196,# CHANGELOG ; - [SofaDefaulttype] Add MapMapSparseMatrix multTranspose method with BaseVector. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/456
https://github.com/sofa-framework/sofa/pull/456:348,Testability,test,test,348,# CHANGELOG ; - [SofaDefaulttype] Add MapMapSparseMatrix multTranspose method with BaseVector. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/456
https://github.com/sofa-framework/sofa/pull/456:398,Testability,test,test,398,# CHANGELOG ; - [SofaDefaulttype] Add MapMapSparseMatrix multTranspose method with BaseVector. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/456
https://github.com/sofa-framework/sofa/pull/457:1180,Availability,failure,failures,1180,"This branch contains the coding-sprint results & associated fixing commits. . There is the commit for the base branch, the coding sprint commit, post-sprint compilation fixes et test fixing. . CHANGELOG:; - deprecating several components (see the list in deprecatingcomponents.cpp); - the SceneCreator is base on a totally new implementation. The most notable difference is that the ; SceneCreator is no more relying on component from sofa core but use the factory to create the objects. ; The API does not change but if the factory is empty (because no plugin is loaded) then the ; components cannot be not created. So If you used SceneCreator in your test you may need to pre-load the plugin or module as done in ""sofa/SofaKernel/modules/SofaImplicitOdeSolver/SofaImplicitOdeSolver_test/loadPlugins.cpp""; - Fix FileMonitor_test that were randomly failing one MacOS; - Fix DataEngine_test that was failing on Vertex2Frame. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/457
https://github.com/sofa-framework/sofa/pull/457:1230,Availability,failure,failures,1230,"This branch contains the coding-sprint results & associated fixing commits. . There is the commit for the base branch, the coding sprint commit, post-sprint compilation fixes et test fixing. . CHANGELOG:; - deprecating several components (see the list in deprecatingcomponents.cpp); - the SceneCreator is base on a totally new implementation. The most notable difference is that the ; SceneCreator is no more relying on component from sofa core but use the factory to create the objects. ; The API does not change but if the factory is empty (because no plugin is loaded) then the ; components cannot be not created. So If you used SceneCreator in your test you may need to pre-load the plugin or module as done in ""sofa/SofaKernel/modules/SofaImplicitOdeSolver/SofaImplicitOdeSolver_test/loadPlugins.cpp""; - Fix FileMonitor_test that were randomly failing one MacOS; - Fix DataEngine_test that was failing on Vertex2Frame. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/457
https://github.com/sofa-framework/sofa/pull/457:1023,Integrability,message,message,1023,"This branch contains the coding-sprint results & associated fixing commits. . There is the commit for the base branch, the coding sprint commit, post-sprint compilation fixes et test fixing. . CHANGELOG:; - deprecating several components (see the list in deprecatingcomponents.cpp); - the SceneCreator is base on a totally new implementation. The most notable difference is that the ; SceneCreator is no more relying on component from sofa core but use the factory to create the objects. ; The API does not change but if the factory is empty (because no plugin is loaded) then the ; components cannot be not created. So If you used SceneCreator in your test you may need to pre-load the plugin or module as done in ""sofa/SofaKernel/modules/SofaImplicitOdeSolver/SofaImplicitOdeSolver_test/loadPlugins.cpp""; - Fix FileMonitor_test that were randomly failing one MacOS; - Fix DataEngine_test that was failing on Vertex2Frame. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/457
https://github.com/sofa-framework/sofa/pull/457:554,Modifiability,plugin,plugin,554,"This branch contains the coding-sprint results & associated fixing commits. . There is the commit for the base branch, the coding sprint commit, post-sprint compilation fixes et test fixing. . CHANGELOG:; - deprecating several components (see the list in deprecatingcomponents.cpp); - the SceneCreator is base on a totally new implementation. The most notable difference is that the ; SceneCreator is no more relying on component from sofa core but use the factory to create the objects. ; The API does not change but if the factory is empty (because no plugin is loaded) then the ; components cannot be not created. So If you used SceneCreator in your test you may need to pre-load the plugin or module as done in ""sofa/SofaKernel/modules/SofaImplicitOdeSolver/SofaImplicitOdeSolver_test/loadPlugins.cpp""; - Fix FileMonitor_test that were randomly failing one MacOS; - Fix DataEngine_test that was failing on Vertex2Frame. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/457
https://github.com/sofa-framework/sofa/pull/457:687,Modifiability,plugin,plugin,687,"This branch contains the coding-sprint results & associated fixing commits. . There is the commit for the base branch, the coding sprint commit, post-sprint compilation fixes et test fixing. . CHANGELOG:; - deprecating several components (see the list in deprecatingcomponents.cpp); - the SceneCreator is base on a totally new implementation. The most notable difference is that the ; SceneCreator is no more relying on component from sofa core but use the factory to create the objects. ; The API does not change but if the factory is empty (because no plugin is loaded) then the ; components cannot be not created. So If you used SceneCreator in your test you may need to pre-load the plugin or module as done in ""sofa/SofaKernel/modules/SofaImplicitOdeSolver/SofaImplicitOdeSolver_test/loadPlugins.cpp""; - Fix FileMonitor_test that were randomly failing one MacOS; - Fix DataEngine_test that was failing on Vertex2Frame. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/457
https://github.com/sofa-framework/sofa/pull/457:564,Performance,load,loaded,564,"This branch contains the coding-sprint results & associated fixing commits. . There is the commit for the base branch, the coding sprint commit, post-sprint compilation fixes et test fixing. . CHANGELOG:; - deprecating several components (see the list in deprecatingcomponents.cpp); - the SceneCreator is base on a totally new implementation. The most notable difference is that the ; SceneCreator is no more relying on component from sofa core but use the factory to create the objects. ; The API does not change but if the factory is empty (because no plugin is loaded) then the ; components cannot be not created. So If you used SceneCreator in your test you may need to pre-load the plugin or module as done in ""sofa/SofaKernel/modules/SofaImplicitOdeSolver/SofaImplicitOdeSolver_test/loadPlugins.cpp""; - Fix FileMonitor_test that were randomly failing one MacOS; - Fix DataEngine_test that was failing on Vertex2Frame. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/457
https://github.com/sofa-framework/sofa/pull/457:678,Performance,load,load,678,"This branch contains the coding-sprint results & associated fixing commits. . There is the commit for the base branch, the coding sprint commit, post-sprint compilation fixes et test fixing. . CHANGELOG:; - deprecating several components (see the list in deprecatingcomponents.cpp); - the SceneCreator is base on a totally new implementation. The most notable difference is that the ; SceneCreator is no more relying on component from sofa core but use the factory to create the objects. ; The API does not change but if the factory is empty (because no plugin is loaded) then the ; components cannot be not created. So If you used SceneCreator in your test you may need to pre-load the plugin or module as done in ""sofa/SofaKernel/modules/SofaImplicitOdeSolver/SofaImplicitOdeSolver_test/loadPlugins.cpp""; - Fix FileMonitor_test that were randomly failing one MacOS; - Fix DataEngine_test that was failing on Vertex2Frame. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/457
https://github.com/sofa-framework/sofa/pull/457:789,Performance,load,loadPlugins,789,"This branch contains the coding-sprint results & associated fixing commits. . There is the commit for the base branch, the coding sprint commit, post-sprint compilation fixes et test fixing. . CHANGELOG:; - deprecating several components (see the list in deprecatingcomponents.cpp); - the SceneCreator is base on a totally new implementation. The most notable difference is that the ; SceneCreator is no more relying on component from sofa core but use the factory to create the objects. ; The API does not change but if the factory is empty (because no plugin is loaded) then the ; components cannot be not created. So If you used SceneCreator in your test you may need to pre-load the plugin or module as done in ""sofa/SofaKernel/modules/SofaImplicitOdeSolver/SofaImplicitOdeSolver_test/loadPlugins.cpp""; - Fix FileMonitor_test that were randomly failing one MacOS; - Fix DataEngine_test that was failing on Vertex2Frame. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/457
https://github.com/sofa-framework/sofa/pull/457:178,Testability,test,test,178,"This branch contains the coding-sprint results & associated fixing commits. . There is the commit for the base branch, the coding sprint commit, post-sprint compilation fixes et test fixing. . CHANGELOG:; - deprecating several components (see the list in deprecatingcomponents.cpp); - the SceneCreator is base on a totally new implementation. The most notable difference is that the ; SceneCreator is no more relying on component from sofa core but use the factory to create the objects. ; The API does not change but if the factory is empty (because no plugin is loaded) then the ; components cannot be not created. So If you used SceneCreator in your test you may need to pre-load the plugin or module as done in ""sofa/SofaKernel/modules/SofaImplicitOdeSolver/SofaImplicitOdeSolver_test/loadPlugins.cpp""; - Fix FileMonitor_test that were randomly failing one MacOS; - Fix DataEngine_test that was failing on Vertex2Frame. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/457
https://github.com/sofa-framework/sofa/pull/457:653,Testability,test,test,653,"This branch contains the coding-sprint results & associated fixing commits. . There is the commit for the base branch, the coding sprint commit, post-sprint compilation fixes et test fixing. . CHANGELOG:; - deprecating several components (see the list in deprecatingcomponents.cpp); - the SceneCreator is base on a totally new implementation. The most notable difference is that the ; SceneCreator is no more relying on component from sofa core but use the factory to create the objects. ; The API does not change but if the factory is empty (because no plugin is loaded) then the ; components cannot be not created. So If you used SceneCreator in your test you may need to pre-load the plugin or module as done in ""sofa/SofaKernel/modules/SofaImplicitOdeSolver/SofaImplicitOdeSolver_test/loadPlugins.cpp""; - Fix FileMonitor_test that were randomly failing one MacOS; - Fix DataEngine_test that was failing on Vertex2Frame. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/457
https://github.com/sofa-framework/sofa/pull/457:1175,Testability,test,test,1175,"This branch contains the coding-sprint results & associated fixing commits. . There is the commit for the base branch, the coding sprint commit, post-sprint compilation fixes et test fixing. . CHANGELOG:; - deprecating several components (see the list in deprecatingcomponents.cpp); - the SceneCreator is base on a totally new implementation. The most notable difference is that the ; SceneCreator is no more relying on component from sofa core but use the factory to create the objects. ; The API does not change but if the factory is empty (because no plugin is loaded) then the ; components cannot be not created. So If you used SceneCreator in your test you may need to pre-load the plugin or module as done in ""sofa/SofaKernel/modules/SofaImplicitOdeSolver/SofaImplicitOdeSolver_test/loadPlugins.cpp""; - Fix FileMonitor_test that were randomly failing one MacOS; - Fix DataEngine_test that was failing on Vertex2Frame. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/457
https://github.com/sofa-framework/sofa/pull/457:1225,Testability,test,test,1225,"This branch contains the coding-sprint results & associated fixing commits. . There is the commit for the base branch, the coding sprint commit, post-sprint compilation fixes et test fixing. . CHANGELOG:; - deprecating several components (see the list in deprecatingcomponents.cpp); - the SceneCreator is base on a totally new implementation. The most notable difference is that the ; SceneCreator is no more relying on component from sofa core but use the factory to create the objects. ; The API does not change but if the factory is empty (because no plugin is loaded) then the ; components cannot be not created. So If you used SceneCreator in your test you may need to pre-load the plugin or module as done in ""sofa/SofaKernel/modules/SofaImplicitOdeSolver/SofaImplicitOdeSolver_test/loadPlugins.cpp""; - Fix FileMonitor_test that were randomly failing one MacOS; - Fix DataEngine_test that was failing on Vertex2Frame. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/457
https://github.com/sofa-framework/sofa/pull/458:443,Availability,failure,failures,443,"That script is used to parse the output of the AdvancedTimer in a Python scene to plot it. One of the function bindings has changed name, but this change was not reflected in the script. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/458
https://github.com/sofa-framework/sofa/pull/458:493,Availability,failure,failures,493,"That script is used to parse the output of the AdvancedTimer in a Python scene to plot it. One of the function bindings has changed name, but this change was not reflected in the script. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/458
https://github.com/sofa-framework/sofa/pull/458:286,Integrability,message,message,286,"That script is used to parse the output of the AdvancedTimer in a Python scene to plot it. One of the function bindings has changed name, but this change was not reflected in the script. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/458
https://github.com/sofa-framework/sofa/pull/458:438,Testability,test,test,438,"That script is used to parse the output of the AdvancedTimer in a Python scene to plot it. One of the function bindings has changed name, but this change was not reflected in the script. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/458
https://github.com/sofa-framework/sofa/pull/458:488,Testability,test,test,488,"That script is used to parse the output of the AdvancedTimer in a Python scene to plot it. One of the function bindings has changed name, but this change was not reflected in the script. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/458
https://github.com/sofa-framework/sofa/pull/459:749,Availability,mask,masked,749,"This PR diffs against the sofa-framework::issofa_constrainsolving branch until it has been merged into master. # Objectives; - Adjust FreeMotionAnimationLoop so that it is more faithful to the actual equations, most notably by ; allowing only one linearisation of the mappings within the time step. ; - Update the API in order to compute a linearised version of the constraint forces, in a similar fashion to ; what is done in the Compliant plugin. . # Requirements ; The following PR are required in order to build this ; - #484 ✔️; - #450 ✔️ ; - #452 ✔️ ; - #456 ✔️ . For testing: ; - `SOFA_USE_MASK` **must** be deactivated, otherwise derivatives quantities ( velocity at contact points for example) are not propagated at all since all dofs are ""masked"" by default. After having a rather quick look, apparently the `SOFA_USE_MASK` impose some strict (undocumented) requirements (on top of other limitations like the fact that it does not support changes in the topology) about where in the time step the ""apply"" method of mappings is called. - There is a branch on my local fork that integrates all the requirements for testing that can be found at the following location [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration). # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:8814,Availability,failure,failures,8814,"ted with each of the mapping parent dofs. - ContactMappers : It is (very) questionable to let contact mappers propagate the unconstrained dynamics solution vector towards contact dofs by calling `updateXfree()` since it will induce inconsistencies in mapping linearisation if the contact mappers are non linear, since contact mappings will therefore be linearised around the free motion configuration, and the rest being linearised around the configuration at the beginning of the time step. This PR does not address this problem which is left for future work. It arises only with non linear contact mappers (like the `RigidContactMapper` for instance), but this should be kept in mind. - LinearSolver API : As a general note, I believe the LinearSolver API is a bloated with virtual methods which are difficult to understand since they are not directly related to the computation / factorisation of a positive definite matrix, and are mostly optional especially for non assembled solver like CG. Most of the methods should reside in the ConstraintCorrection API, and concrete instance of ConstraintCorrection should be templated on the type of LinearSolver in my opinion, since it is the only objects that actually make use of these methods, and really what you want is to have access to the concrete type of Matrix and Vector used by the solver. Also from my understanding only `LinearSolver` instances that derive from `MatrixLinearSolver` implement these kind of methods, so maybe a first step would be to move them here. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:8864,Availability,failure,failures,8864,"ted with each of the mapping parent dofs. - ContactMappers : It is (very) questionable to let contact mappers propagate the unconstrained dynamics solution vector towards contact dofs by calling `updateXfree()` since it will induce inconsistencies in mapping linearisation if the contact mappers are non linear, since contact mappings will therefore be linearised around the free motion configuration, and the rest being linearised around the configuration at the beginning of the time step. This PR does not address this problem which is left for future work. It arises only with non linear contact mappers (like the `RigidContactMapper` for instance), but this should be kept in mind. - LinearSolver API : As a general note, I believe the LinearSolver API is a bloated with virtual methods which are difficult to understand since they are not directly related to the computation / factorisation of a positive definite matrix, and are mostly optional especially for non assembled solver like CG. Most of the methods should reside in the ConstraintCorrection API, and concrete instance of ConstraintCorrection should be templated on the type of LinearSolver in my opinion, since it is the only objects that actually make use of these methods, and really what you want is to have access to the concrete type of Matrix and Vector used by the solver. Also from my understanding only `LinearSolver` instances that derive from `MatrixLinearSolver` implement these kind of methods, so maybe a first step would be to move them here. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:303,Deployability,Update,Update,303,"This PR diffs against the sofa-framework::issofa_constrainsolving branch until it has been merged into master. # Objectives; - Adjust FreeMotionAnimationLoop so that it is more faithful to the actual equations, most notably by ; allowing only one linearisation of the mappings within the time step. ; - Update the API in order to compute a linearised version of the constraint forces, in a similar fashion to ; what is done in the Compliant plugin. . # Requirements ; The following PR are required in order to build this ; - #484 ✔️; - #450 ✔️ ; - #452 ✔️ ; - #456 ✔️ . For testing: ; - `SOFA_USE_MASK` **must** be deactivated, otherwise derivatives quantities ( velocity at contact points for example) are not propagated at all since all dofs are ""masked"" by default. After having a rather quick look, apparently the `SOFA_USE_MASK` impose some strict (undocumented) requirements (on top of other limitations like the fact that it does not support changes in the topology) about where in the time step the ""apply"" method of mappings is called. - There is a branch on my local fork that integrates all the requirements for testing that can be found at the following location [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration). # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:1087,Deployability,integrat,integrates,1087,"eMotionAnimationLoop so that it is more faithful to the actual equations, most notably by ; allowing only one linearisation of the mappings within the time step. ; - Update the API in order to compute a linearised version of the constraint forces, in a similar fashion to ; what is done in the Compliant plugin. . # Requirements ; The following PR are required in order to build this ; - #484 ✔️; - #450 ✔️ ; - #452 ✔️ ; - #456 ✔️ . For testing: ; - `SOFA_USE_MASK` **must** be deactivated, otherwise derivatives quantities ( velocity at contact points for example) are not propagated at all since all dofs are ""masked"" by default. After having a rather quick look, apparently the `SOFA_USE_MASK` impose some strict (undocumented) requirements (on top of other limitations like the fact that it does not support changes in the topology) about where in the time step the ""apply"" method of mappings is called. - There is a branch on my local fork that integrates all the requirements for testing that can be found at the following location [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration). # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API constructor needs to be passed the number of lines that are involved in the solving of this constraint equation. The previous implementat",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:3791,Deployability,UPDATE,UPDATES,3791,"tion (stored in a `BaseVector` form) inside a dedicated state vector of a `MechanicalState`. Requires PR #456. This value can be used later on to discover the stiffness coming from the non linear mapping that result from it.; - `BaseMechanicalState` `resetConstraint` and `getConstraintJacobian` methods need to be given a `ConstraintParams` to be able to retrieve the `MatrixDerivId` containing the constraint jacobian. ; - `LinearSolver` API ; - rename `applyContactForce` API method into `applyConstraintForce`. This method is no longer responsible for applying the corrective motion, but just to compute it. ; - `buildComplianceMatrix` API method needs to be passed a `ConstraintParams` so that concrete instances of `LinearSolver` can retrieve the `MatrixDerivId` that points to the constraint jacobian.; ; FIX. [SofaConstraint]; - `GenericConstraintSolver` block gauss seidel can support arbitrary size of blocks. The previous implementation had an hard coded limit of 6 for the block size. UPDATES. [SofaSimulationCore]; - Adapted `AnimateVisitor`, `MechanicalGetConstraintJacobianVisitor` and `MechanicalResetConstraintVisitor` to the changes introduced in `BaseMechanicalState` API. [SofaBaseMechanics] ; - `MechanicalObject` dynamically allocated state vectors are given a name and a owner like any other Data. As a result, these dynamic state vectors can be displayed by the GUI. Also adapted the code to the API changes introduced in `BaseMechanicalState` API. [SofaMeshCollision]; - Some contact mappers `updateXfree()` method were not calling `applyJ` and therefore were not propagating the free velocity towards contact dofs, resulting in segfault when solving constraints in velocity mode. . [SofaConstraint]; - `GenericConstraintSolver` accumulates the constraint lambdas towards independant dofs, so that non linear mappings can compute the geometric stiffness induced by the constraint forces from the previous time step.; - `FreeMotionAnimationLoop` assembles mapping geometric sti",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:4312,Deployability,update,updateXfree,4312,"but just to compute it. ; - `buildComplianceMatrix` API method needs to be passed a `ConstraintParams` so that concrete instances of `LinearSolver` can retrieve the `MatrixDerivId` that points to the constraint jacobian.; ; FIX. [SofaConstraint]; - `GenericConstraintSolver` block gauss seidel can support arbitrary size of blocks. The previous implementation had an hard coded limit of 6 for the block size. UPDATES. [SofaSimulationCore]; - Adapted `AnimateVisitor`, `MechanicalGetConstraintJacobianVisitor` and `MechanicalResetConstraintVisitor` to the changes introduced in `BaseMechanicalState` API. [SofaBaseMechanics] ; - `MechanicalObject` dynamically allocated state vectors are given a name and a owner like any other Data. As a result, these dynamic state vectors can be displayed by the GUI. Also adapted the code to the API changes introduced in `BaseMechanicalState` API. [SofaMeshCollision]; - Some contact mappers `updateXfree()` method were not calling `applyJ` and therefore were not propagating the free velocity towards contact dofs, resulting in segfault when solving constraints in velocity mode. . [SofaConstraint]; - `GenericConstraintSolver` accumulates the constraint lambdas towards independant dofs, so that non linear mappings can compute the geometric stiffness induced by the constraint forces from the previous time step.; - `FreeMotionAnimationLoop` assembles mapping geometric stiffness when possible. It also uses a single mapping linearisation within the time step. The solving step becomes very similar to the one explained in the ""Stable Constraints"" paper, when the compliance of the constraint is equal to zero.; - `BilateralConstraintResolutionNDofs` uses Eigen library to factorize a constraint block of arbitrary size using LDLT decomposition.; - `ConstraintAnimationLoop` minor changes introduced to reflect API changes. [SofaMiscMapping]; - `DistanceMapping` implements the `applyJT` method for `MatrixDeriv` types using the utility methods provided in #452",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:7228,Deployability,update,updateXfree,7228,"ing from the constraint solving step into a specific location ( by default `VecId::externalForce()`, but a dynamic `VecId` can be used also). [Examples] ; - `InextensiblePendulum.scn` shows the benefits of the linearisation of the constraint force. # Remarks ; - `MappingGeometricStiffnessForceField` suffers the same limitation as any other forcefield, ie the mapping must be directly connected to the independant dofs, otherwise it would require an additional unsupported computation to project the mapped stiffness matrix into the space of the independant degrees of freedom. Multimappings support is not there, since it would probably require some adapatation in the API, so that it is easy to retrieve the stiffness block associated with each of the mapping parent dofs. - ContactMappers : It is (very) questionable to let contact mappers propagate the unconstrained dynamics solution vector towards contact dofs by calling `updateXfree()` since it will induce inconsistencies in mapping linearisation if the contact mappers are non linear, since contact mappings will therefore be linearised around the free motion configuration, and the rest being linearised around the configuration at the beginning of the time step. This PR does not address this problem which is left for future work. It arises only with non linear contact mappers (like the `RigidContactMapper` for instance), but this should be kept in mind. - LinearSolver API : As a general note, I believe the LinearSolver API is a bloated with virtual methods which are difficult to understand since they are not directly related to the computation / factorisation of a positive definite matrix, and are mostly optional especially for non assembled solver like CG. Most of the methods should reside in the ConstraintCorrection API, and concrete instance of ConstraintCorrection should be templated on the type of LinearSolver in my opinion, since it is the only objects that actually make use of these methods, and really what you wan",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:7419,Deployability,configurat,configuration,7419,"ing from the constraint solving step into a specific location ( by default `VecId::externalForce()`, but a dynamic `VecId` can be used also). [Examples] ; - `InextensiblePendulum.scn` shows the benefits of the linearisation of the constraint force. # Remarks ; - `MappingGeometricStiffnessForceField` suffers the same limitation as any other forcefield, ie the mapping must be directly connected to the independant dofs, otherwise it would require an additional unsupported computation to project the mapped stiffness matrix into the space of the independant degrees of freedom. Multimappings support is not there, since it would probably require some adapatation in the API, so that it is easy to retrieve the stiffness block associated with each of the mapping parent dofs. - ContactMappers : It is (very) questionable to let contact mappers propagate the unconstrained dynamics solution vector towards contact dofs by calling `updateXfree()` since it will induce inconsistencies in mapping linearisation if the contact mappers are non linear, since contact mappings will therefore be linearised around the free motion configuration, and the rest being linearised around the configuration at the beginning of the time step. This PR does not address this problem which is left for future work. It arises only with non linear contact mappers (like the `RigidContactMapper` for instance), but this should be kept in mind. - LinearSolver API : As a general note, I believe the LinearSolver API is a bloated with virtual methods which are difficult to understand since they are not directly related to the computation / factorisation of a positive definite matrix, and are mostly optional especially for non assembled solver like CG. Most of the methods should reside in the ConstraintCorrection API, and concrete instance of ConstraintCorrection should be templated on the type of LinearSolver in my opinion, since it is the only objects that actually make use of these methods, and really what you wan",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:7475,Deployability,configurat,configuration,7475,"ing from the constraint solving step into a specific location ( by default `VecId::externalForce()`, but a dynamic `VecId` can be used also). [Examples] ; - `InextensiblePendulum.scn` shows the benefits of the linearisation of the constraint force. # Remarks ; - `MappingGeometricStiffnessForceField` suffers the same limitation as any other forcefield, ie the mapping must be directly connected to the independant dofs, otherwise it would require an additional unsupported computation to project the mapped stiffness matrix into the space of the independant degrees of freedom. Multimappings support is not there, since it would probably require some adapatation in the API, so that it is easy to retrieve the stiffness block associated with each of the mapping parent dofs. - ContactMappers : It is (very) questionable to let contact mappers propagate the unconstrained dynamics solution vector towards contact dofs by calling `updateXfree()` since it will induce inconsistencies in mapping linearisation if the contact mappers are non linear, since contact mappings will therefore be linearised around the free motion configuration, and the rest being linearised around the configuration at the beginning of the time step. This PR does not address this problem which is left for future work. It arises only with non linear contact mappers (like the `RigidContactMapper` for instance), but this should be kept in mind. - LinearSolver API : As a general note, I believe the LinearSolver API is a bloated with virtual methods which are difficult to understand since they are not directly related to the computation / factorisation of a positive definite matrix, and are mostly optional especially for non assembled solver like CG. Most of the methods should reside in the ConstraintCorrection API, and concrete instance of ConstraintCorrection should be templated on the type of LinearSolver in my opinion, since it is the only objects that actually make use of these methods, and really what you wan",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:3824,Energy Efficiency,Adapt,Adapted,3824,"res PR #456. This value can be used later on to discover the stiffness coming from the non linear mapping that result from it.; - `BaseMechanicalState` `resetConstraint` and `getConstraintJacobian` methods need to be given a `ConstraintParams` to be able to retrieve the `MatrixDerivId` containing the constraint jacobian. ; - `LinearSolver` API ; - rename `applyContactForce` API method into `applyConstraintForce`. This method is no longer responsible for applying the corrective motion, but just to compute it. ; - `buildComplianceMatrix` API method needs to be passed a `ConstraintParams` so that concrete instances of `LinearSolver` can retrieve the `MatrixDerivId` that points to the constraint jacobian.; ; FIX. [SofaConstraint]; - `GenericConstraintSolver` block gauss seidel can support arbitrary size of blocks. The previous implementation had an hard coded limit of 6 for the block size. UPDATES. [SofaSimulationCore]; - Adapted `AnimateVisitor`, `MechanicalGetConstraintJacobianVisitor` and `MechanicalResetConstraintVisitor` to the changes introduced in `BaseMechanicalState` API. [SofaBaseMechanics] ; - `MechanicalObject` dynamically allocated state vectors are given a name and a owner like any other Data. As a result, these dynamic state vectors can be displayed by the GUI. Also adapted the code to the API changes introduced in `BaseMechanicalState` API. [SofaMeshCollision]; - Some contact mappers `updateXfree()` method were not calling `applyJ` and therefore were not propagating the free velocity towards contact dofs, resulting in segfault when solving constraints in velocity mode. . [SofaConstraint]; - `GenericConstraintSolver` accumulates the constraint lambdas towards independant dofs, so that non linear mappings can compute the geometric stiffness induced by the constraint forces from the previous time step.; - `FreeMotionAnimationLoop` assembles mapping geometric stiffness when possible. It also uses a single mapping linearisation within the time step. The solvi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:4041,Energy Efficiency,allocate,allocated,4041,"tConstraint` and `getConstraintJacobian` methods need to be given a `ConstraintParams` to be able to retrieve the `MatrixDerivId` containing the constraint jacobian. ; - `LinearSolver` API ; - rename `applyContactForce` API method into `applyConstraintForce`. This method is no longer responsible for applying the corrective motion, but just to compute it. ; - `buildComplianceMatrix` API method needs to be passed a `ConstraintParams` so that concrete instances of `LinearSolver` can retrieve the `MatrixDerivId` that points to the constraint jacobian.; ; FIX. [SofaConstraint]; - `GenericConstraintSolver` block gauss seidel can support arbitrary size of blocks. The previous implementation had an hard coded limit of 6 for the block size. UPDATES. [SofaSimulationCore]; - Adapted `AnimateVisitor`, `MechanicalGetConstraintJacobianVisitor` and `MechanicalResetConstraintVisitor` to the changes introduced in `BaseMechanicalState` API. [SofaBaseMechanics] ; - `MechanicalObject` dynamically allocated state vectors are given a name and a owner like any other Data. As a result, these dynamic state vectors can be displayed by the GUI. Also adapted the code to the API changes introduced in `BaseMechanicalState` API. [SofaMeshCollision]; - Some contact mappers `updateXfree()` method were not calling `applyJ` and therefore were not propagating the free velocity towards contact dofs, resulting in segfault when solving constraints in velocity mode. . [SofaConstraint]; - `GenericConstraintSolver` accumulates the constraint lambdas towards independant dofs, so that non linear mappings can compute the geometric stiffness induced by the constraint forces from the previous time step.; - `FreeMotionAnimationLoop` assembles mapping geometric stiffness when possible. It also uses a single mapping linearisation within the time step. The solving step becomes very similar to the one explained in the ""Stable Constraints"" paper, when the compliance of the constraint is equal to zero.; - `BilateralCons",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:4190,Energy Efficiency,adapt,adapted,4190,"rSolver` API ; - rename `applyContactForce` API method into `applyConstraintForce`. This method is no longer responsible for applying the corrective motion, but just to compute it. ; - `buildComplianceMatrix` API method needs to be passed a `ConstraintParams` so that concrete instances of `LinearSolver` can retrieve the `MatrixDerivId` that points to the constraint jacobian.; ; FIX. [SofaConstraint]; - `GenericConstraintSolver` block gauss seidel can support arbitrary size of blocks. The previous implementation had an hard coded limit of 6 for the block size. UPDATES. [SofaSimulationCore]; - Adapted `AnimateVisitor`, `MechanicalGetConstraintJacobianVisitor` and `MechanicalResetConstraintVisitor` to the changes introduced in `BaseMechanicalState` API. [SofaBaseMechanics] ; - `MechanicalObject` dynamically allocated state vectors are given a name and a owner like any other Data. As a result, these dynamic state vectors can be displayed by the GUI. Also adapted the code to the API changes introduced in `BaseMechanicalState` API. [SofaMeshCollision]; - Some contact mappers `updateXfree()` method were not calling `applyJ` and therefore were not propagating the free velocity towards contact dofs, resulting in segfault when solving constraints in velocity mode. . [SofaConstraint]; - `GenericConstraintSolver` accumulates the constraint lambdas towards independant dofs, so that non linear mappings can compute the geometric stiffness induced by the constraint forces from the previous time step.; - `FreeMotionAnimationLoop` assembles mapping geometric stiffness when possible. It also uses a single mapping linearisation within the time step. The solving step becomes very similar to the one explained in the ""Stable Constraints"" paper, when the compliance of the constraint is equal to zero.; - `BilateralConstraintResolutionNDofs` uses Eigen library to factorize a constraint block of arbitrary size using LDLT decomposition.; - `ConstraintAnimationLoop` minor changes introduced to ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:5471,Energy Efficiency,adapt,adapted,5471,"in segfault when solving constraints in velocity mode. . [SofaConstraint]; - `GenericConstraintSolver` accumulates the constraint lambdas towards independant dofs, so that non linear mappings can compute the geometric stiffness induced by the constraint forces from the previous time step.; - `FreeMotionAnimationLoop` assembles mapping geometric stiffness when possible. It also uses a single mapping linearisation within the time step. The solving step becomes very similar to the one explained in the ""Stable Constraints"" paper, when the compliance of the constraint is equal to zero.; - `BilateralConstraintResolutionNDofs` uses Eigen library to factorize a constraint block of arbitrary size using LDLT decomposition.; - `ConstraintAnimationLoop` minor changes introduced to reflect API changes. [SofaMiscMapping]; - `DistanceMapping` implements the `applyJT` method for `MatrixDeriv` types using the utility methods provided in #452 . [SofaGeneralAnimationLoop]; - `MultiStepAnimationLoop` and `MultiTagAnimationLoop` : adapted code to reflect API change. ADD. [SofaConstraint]; - `MappingGeometricStiffnessForceField` can assemble the geometric stiffness of a mapping.; - `UniformConstraint` defines a constraint with a uniform direction in the contact space, internally it represents an identity matrix. It computes the right hand side of constraint equations in velocity mode as `rhs = phi / dt + dvfree`, following the same calculus notation and derivation as the one explained in the ""Stable Constraints"" paper. In position mode the constraint rhs differs from the constraint rhs in velocity mode by a `dt` factor. `rhs = phi + dvfree * dt` which gives `rhs = dxfree` which is similar to what was done by the previous implementation. ; - `ConstraintStoreLambdaVisitor` which is used by the `GenericConstraintSolver` to store the lambda resulting from the constraint solving step into a specific location ( by default `VecId::externalForce()`, but a dynamic `VecId` can be used also). [Examp",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:1087,Integrability,integrat,integrates,1087,"eMotionAnimationLoop so that it is more faithful to the actual equations, most notably by ; allowing only one linearisation of the mappings within the time step. ; - Update the API in order to compute a linearised version of the constraint forces, in a similar fashion to ; what is done in the Compliant plugin. . # Requirements ; The following PR are required in order to build this ; - #484 ✔️; - #450 ✔️ ; - #452 ✔️ ; - #456 ✔️ . For testing: ; - `SOFA_USE_MASK` **must** be deactivated, otherwise derivatives quantities ( velocity at contact points for example) are not propagated at all since all dofs are ""masked"" by default. After having a rather quick look, apparently the `SOFA_USE_MASK` impose some strict (undocumented) requirements (on top of other limitations like the fact that it does not support changes in the topology) about where in the time step the ""apply"" method of mappings is called. - There is a branch on my local fork that integrates all the requirements for testing that can be found at the following location [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration). # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API constructor needs to be passed the number of lines that are involved in the solving of this constraint equation. The previous implementat",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:1544,Integrability,depend,depending,1544,"450 ✔️ ; - #452 ✔️ ; - #456 ✔️ . For testing: ; - `SOFA_USE_MASK` **must** be deactivated, otherwise derivatives quantities ( velocity at contact points for example) are not propagated at all since all dofs are ""masked"" by default. After having a rather quick look, apparently the `SOFA_USE_MASK` impose some strict (undocumented) requirements (on top of other limitations like the fact that it does not support changes in the topology) about where in the time step the ""apply"" method of mappings is called. - There is a branch on my local fork that integrates all the requirements for testing that can be found at the following location [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration). # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API constructor needs to be passed the number of lines that are involved in the solving of this constraint equation. The previous implementation was silently initializing this value to one. If that property has to modified because it depends on some other state variables of a concrete implementation of the `ConstraintResolution`, the `setNbLines` method has to be called to reflect it. Also added some getters/setters method.; - `BaseConstraintCorrection` API separates the methods which computes the constraint displacement in motion spac",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:2231,Integrability,depend,depends,2231," # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API constructor needs to be passed the number of lines that are involved in the solving of this constraint equation. The previous implementation was silently initializing this value to one. If that property has to modified because it depends on some other state variables of a concrete implementation of the `ConstraintResolution`, the `setNbLines` method has to be called to reflect it. Also added some getters/setters method.; - `BaseConstraintCorrection` API separates the methods which computes the constraint displacement in motion space from the methods which apply it. ; - As result, factorized quite significantly the methods related to the `ConstraintCorrection` API ; - `BaseConstraint` API defines a `storeLambda` method which is used to store the result of the constraint force computation (stored in a `BaseVector` form) inside a dedicated state vector of a `MechanicalState`. Requires PR #456. This value can be used later on to discover the stiffness coming from the non linear mapping that result from it.; - `BaseMechanicalState` `resetConstraint` and `getConstraintJacobian` methods need to be given a `ConstraintParams` to be able to retrieve the `MatrixDerivId` containing the constraint jacobian. ; - `LinearSolver` API ; - rename `applyContactForce` API method into ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:8657,Integrability,message,message,8657,"ted with each of the mapping parent dofs. - ContactMappers : It is (very) questionable to let contact mappers propagate the unconstrained dynamics solution vector towards contact dofs by calling `updateXfree()` since it will induce inconsistencies in mapping linearisation if the contact mappers are non linear, since contact mappings will therefore be linearised around the free motion configuration, and the rest being linearised around the configuration at the beginning of the time step. This PR does not address this problem which is left for future work. It arises only with non linear contact mappers (like the `RigidContactMapper` for instance), but this should be kept in mind. - LinearSolver API : As a general note, I believe the LinearSolver API is a bloated with virtual methods which are difficult to understand since they are not directly related to the computation / factorisation of a positive definite matrix, and are mostly optional especially for non assembled solver like CG. Most of the methods should reside in the ConstraintCorrection API, and concrete instance of ConstraintCorrection should be templated on the type of LinearSolver in my opinion, since it is the only objects that actually make use of these methods, and really what you want is to have access to the concrete type of Matrix and Vector used by the solver. Also from my understanding only `LinearSolver` instances that derive from `MatrixLinearSolver` implement these kind of methods, so maybe a first step would be to move them here. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:441,Modifiability,plugin,plugin,441,"This PR diffs against the sofa-framework::issofa_constrainsolving branch until it has been merged into master. # Objectives; - Adjust FreeMotionAnimationLoop so that it is more faithful to the actual equations, most notably by ; allowing only one linearisation of the mappings within the time step. ; - Update the API in order to compute a linearised version of the constraint forces, in a similar fashion to ; what is done in the Compliant plugin. . # Requirements ; The following PR are required in order to build this ; - #484 ✔️; - #450 ✔️ ; - #452 ✔️ ; - #456 ✔️ . For testing: ; - `SOFA_USE_MASK` **must** be deactivated, otherwise derivatives quantities ( velocity at contact points for example) are not propagated at all since all dofs are ""masked"" by default. After having a rather quick look, apparently the `SOFA_USE_MASK` impose some strict (undocumented) requirements (on top of other limitations like the fact that it does not support changes in the topology) about where in the time step the ""apply"" method of mappings is called. - There is a branch on my local fork that integrates all the requirements for testing that can be found at the following location [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration). # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:2259,Modifiability,variab,variables,2259," # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API constructor needs to be passed the number of lines that are involved in the solving of this constraint equation. The previous implementation was silently initializing this value to one. If that property has to modified because it depends on some other state variables of a concrete implementation of the `ConstraintResolution`, the `setNbLines` method has to be called to reflect it. Also added some getters/setters method.; - `BaseConstraintCorrection` API separates the methods which computes the constraint displacement in motion space from the methods which apply it. ; - As result, factorized quite significantly the methods related to the `ConstraintCorrection` API ; - `BaseConstraint` API defines a `storeLambda` method which is used to store the result of the constraint force computation (stored in a `BaseVector` form) inside a dedicated state vector of a `MechanicalState`. Requires PR #456. This value can be used later on to discover the stiffness coming from the non linear mapping that result from it.; - `BaseMechanicalState` `resetConstraint` and `getConstraintJacobian` methods need to be given a `ConstraintParams` to be able to retrieve the `MatrixDerivId` containing the constraint jacobian. ; - `LinearSolver` API ; - rename `applyContactForce` API method into ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:3824,Modifiability,Adapt,Adapted,3824,"res PR #456. This value can be used later on to discover the stiffness coming from the non linear mapping that result from it.; - `BaseMechanicalState` `resetConstraint` and `getConstraintJacobian` methods need to be given a `ConstraintParams` to be able to retrieve the `MatrixDerivId` containing the constraint jacobian. ; - `LinearSolver` API ; - rename `applyContactForce` API method into `applyConstraintForce`. This method is no longer responsible for applying the corrective motion, but just to compute it. ; - `buildComplianceMatrix` API method needs to be passed a `ConstraintParams` so that concrete instances of `LinearSolver` can retrieve the `MatrixDerivId` that points to the constraint jacobian.; ; FIX. [SofaConstraint]; - `GenericConstraintSolver` block gauss seidel can support arbitrary size of blocks. The previous implementation had an hard coded limit of 6 for the block size. UPDATES. [SofaSimulationCore]; - Adapted `AnimateVisitor`, `MechanicalGetConstraintJacobianVisitor` and `MechanicalResetConstraintVisitor` to the changes introduced in `BaseMechanicalState` API. [SofaBaseMechanics] ; - `MechanicalObject` dynamically allocated state vectors are given a name and a owner like any other Data. As a result, these dynamic state vectors can be displayed by the GUI. Also adapted the code to the API changes introduced in `BaseMechanicalState` API. [SofaMeshCollision]; - Some contact mappers `updateXfree()` method were not calling `applyJ` and therefore were not propagating the free velocity towards contact dofs, resulting in segfault when solving constraints in velocity mode. . [SofaConstraint]; - `GenericConstraintSolver` accumulates the constraint lambdas towards independant dofs, so that non linear mappings can compute the geometric stiffness induced by the constraint forces from the previous time step.; - `FreeMotionAnimationLoop` assembles mapping geometric stiffness when possible. It also uses a single mapping linearisation within the time step. The solvi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:4190,Modifiability,adapt,adapted,4190,"rSolver` API ; - rename `applyContactForce` API method into `applyConstraintForce`. This method is no longer responsible for applying the corrective motion, but just to compute it. ; - `buildComplianceMatrix` API method needs to be passed a `ConstraintParams` so that concrete instances of `LinearSolver` can retrieve the `MatrixDerivId` that points to the constraint jacobian.; ; FIX. [SofaConstraint]; - `GenericConstraintSolver` block gauss seidel can support arbitrary size of blocks. The previous implementation had an hard coded limit of 6 for the block size. UPDATES. [SofaSimulationCore]; - Adapted `AnimateVisitor`, `MechanicalGetConstraintJacobianVisitor` and `MechanicalResetConstraintVisitor` to the changes introduced in `BaseMechanicalState` API. [SofaBaseMechanics] ; - `MechanicalObject` dynamically allocated state vectors are given a name and a owner like any other Data. As a result, these dynamic state vectors can be displayed by the GUI. Also adapted the code to the API changes introduced in `BaseMechanicalState` API. [SofaMeshCollision]; - Some contact mappers `updateXfree()` method were not calling `applyJ` and therefore were not propagating the free velocity towards contact dofs, resulting in segfault when solving constraints in velocity mode. . [SofaConstraint]; - `GenericConstraintSolver` accumulates the constraint lambdas towards independant dofs, so that non linear mappings can compute the geometric stiffness induced by the constraint forces from the previous time step.; - `FreeMotionAnimationLoop` assembles mapping geometric stiffness when possible. It also uses a single mapping linearisation within the time step. The solving step becomes very similar to the one explained in the ""Stable Constraints"" paper, when the compliance of the constraint is equal to zero.; - `BilateralConstraintResolutionNDofs` uses Eigen library to factorize a constraint block of arbitrary size using LDLT decomposition.; - `ConstraintAnimationLoop` minor changes introduced to ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:5471,Modifiability,adapt,adapted,5471,"in segfault when solving constraints in velocity mode. . [SofaConstraint]; - `GenericConstraintSolver` accumulates the constraint lambdas towards independant dofs, so that non linear mappings can compute the geometric stiffness induced by the constraint forces from the previous time step.; - `FreeMotionAnimationLoop` assembles mapping geometric stiffness when possible. It also uses a single mapping linearisation within the time step. The solving step becomes very similar to the one explained in the ""Stable Constraints"" paper, when the compliance of the constraint is equal to zero.; - `BilateralConstraintResolutionNDofs` uses Eigen library to factorize a constraint block of arbitrary size using LDLT decomposition.; - `ConstraintAnimationLoop` minor changes introduced to reflect API changes. [SofaMiscMapping]; - `DistanceMapping` implements the `applyJT` method for `MatrixDeriv` types using the utility methods provided in #452 . [SofaGeneralAnimationLoop]; - `MultiStepAnimationLoop` and `MultiTagAnimationLoop` : adapted code to reflect API change. ADD. [SofaConstraint]; - `MappingGeometricStiffnessForceField` can assemble the geometric stiffness of a mapping.; - `UniformConstraint` defines a constraint with a uniform direction in the contact space, internally it represents an identity matrix. It computes the right hand side of constraint equations in velocity mode as `rhs = phi / dt + dvfree`, following the same calculus notation and derivation as the one explained in the ""Stable Constraints"" paper. In position mode the constraint rhs differs from the constraint rhs in velocity mode by a `dt` factor. `rhs = phi + dvfree * dt` which gives `rhs = dxfree` which is similar to what was done by the previous implementation. ; - `ConstraintStoreLambdaVisitor` which is used by the `GenericConstraintSolver` to store the lambda resulting from the constraint solving step into a specific location ( by default `VecId::externalForce()`, but a dynamic `VecId` can be used also). [Examp",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:7419,Modifiability,config,configuration,7419,"ing from the constraint solving step into a specific location ( by default `VecId::externalForce()`, but a dynamic `VecId` can be used also). [Examples] ; - `InextensiblePendulum.scn` shows the benefits of the linearisation of the constraint force. # Remarks ; - `MappingGeometricStiffnessForceField` suffers the same limitation as any other forcefield, ie the mapping must be directly connected to the independant dofs, otherwise it would require an additional unsupported computation to project the mapped stiffness matrix into the space of the independant degrees of freedom. Multimappings support is not there, since it would probably require some adapatation in the API, so that it is easy to retrieve the stiffness block associated with each of the mapping parent dofs. - ContactMappers : It is (very) questionable to let contact mappers propagate the unconstrained dynamics solution vector towards contact dofs by calling `updateXfree()` since it will induce inconsistencies in mapping linearisation if the contact mappers are non linear, since contact mappings will therefore be linearised around the free motion configuration, and the rest being linearised around the configuration at the beginning of the time step. This PR does not address this problem which is left for future work. It arises only with non linear contact mappers (like the `RigidContactMapper` for instance), but this should be kept in mind. - LinearSolver API : As a general note, I believe the LinearSolver API is a bloated with virtual methods which are difficult to understand since they are not directly related to the computation / factorisation of a positive definite matrix, and are mostly optional especially for non assembled solver like CG. Most of the methods should reside in the ConstraintCorrection API, and concrete instance of ConstraintCorrection should be templated on the type of LinearSolver in my opinion, since it is the only objects that actually make use of these methods, and really what you wan",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:7475,Modifiability,config,configuration,7475,"ing from the constraint solving step into a specific location ( by default `VecId::externalForce()`, but a dynamic `VecId` can be used also). [Examples] ; - `InextensiblePendulum.scn` shows the benefits of the linearisation of the constraint force. # Remarks ; - `MappingGeometricStiffnessForceField` suffers the same limitation as any other forcefield, ie the mapping must be directly connected to the independant dofs, otherwise it would require an additional unsupported computation to project the mapped stiffness matrix into the space of the independant degrees of freedom. Multimappings support is not there, since it would probably require some adapatation in the API, so that it is easy to retrieve the stiffness block associated with each of the mapping parent dofs. - ContactMappers : It is (very) questionable to let contact mappers propagate the unconstrained dynamics solution vector towards contact dofs by calling `updateXfree()` since it will induce inconsistencies in mapping linearisation if the contact mappers are non linear, since contact mappings will therefore be linearised around the free motion configuration, and the rest being linearised around the configuration at the beginning of the time step. This PR does not address this problem which is left for future work. It arises only with non linear contact mappers (like the `RigidContactMapper` for instance), but this should be kept in mind. - LinearSolver API : As a general note, I believe the LinearSolver API is a bloated with virtual methods which are difficult to understand since they are not directly related to the computation / factorisation of a positive definite matrix, and are mostly optional especially for non assembled solver like CG. Most of the methods should reside in the ConstraintCorrection API, and concrete instance of ConstraintCorrection should be templated on the type of LinearSolver in my opinion, since it is the only objects that actually make use of these methods, and really what you wan",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:8311,Security,access,access,8311,"ted with each of the mapping parent dofs. - ContactMappers : It is (very) questionable to let contact mappers propagate the unconstrained dynamics solution vector towards contact dofs by calling `updateXfree()` since it will induce inconsistencies in mapping linearisation if the contact mappers are non linear, since contact mappings will therefore be linearised around the free motion configuration, and the rest being linearised around the configuration at the beginning of the time step. This PR does not address this problem which is left for future work. It arises only with non linear contact mappers (like the `RigidContactMapper` for instance), but this should be kept in mind. - LinearSolver API : As a general note, I believe the LinearSolver API is a bloated with virtual methods which are difficult to understand since they are not directly related to the computation / factorisation of a positive definite matrix, and are mostly optional especially for non assembled solver like CG. Most of the methods should reside in the ConstraintCorrection API, and concrete instance of ConstraintCorrection should be templated on the type of LinearSolver in my opinion, since it is the only objects that actually make use of these methods, and really what you want is to have access to the concrete type of Matrix and Vector used by the solver. Also from my understanding only `LinearSolver` instances that derive from `MatrixLinearSolver` implement these kind of methods, so maybe a first step would be to move them here. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:574,Testability,test,testing,574,"This PR diffs against the sofa-framework::issofa_constrainsolving branch until it has been merged into master. # Objectives; - Adjust FreeMotionAnimationLoop so that it is more faithful to the actual equations, most notably by ; allowing only one linearisation of the mappings within the time step. ; - Update the API in order to compute a linearised version of the constraint forces, in a similar fashion to ; what is done in the Compliant plugin. . # Requirements ; The following PR are required in order to build this ; - #484 ✔️; - #450 ✔️ ; - #452 ✔️ ; - #456 ✔️ . For testing: ; - `SOFA_USE_MASK` **must** be deactivated, otherwise derivatives quantities ( velocity at contact points for example) are not propagated at all since all dofs are ""masked"" by default. After having a rather quick look, apparently the `SOFA_USE_MASK` impose some strict (undocumented) requirements (on top of other limitations like the fact that it does not support changes in the topology) about where in the time step the ""apply"" method of mappings is called. - There is a branch on my local fork that integrates all the requirements for testing that can be found at the following location [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration). # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:1123,Testability,test,testing,1123,"eMotionAnimationLoop so that it is more faithful to the actual equations, most notably by ; allowing only one linearisation of the mappings within the time step. ; - Update the API in order to compute a linearised version of the constraint forces, in a similar fashion to ; what is done in the Compliant plugin. . # Requirements ; The following PR are required in order to build this ; - #484 ✔️; - #450 ✔️ ; - #452 ✔️ ; - #456 ✔️ . For testing: ; - `SOFA_USE_MASK` **must** be deactivated, otherwise derivatives quantities ( velocity at contact points for example) are not propagated at all since all dofs are ""masked"" by default. After having a rather quick look, apparently the `SOFA_USE_MASK` impose some strict (undocumented) requirements (on top of other limitations like the fact that it does not support changes in the topology) about where in the time step the ""apply"" method of mappings is called. - There is a branch on my local fork that integrates all the requirements for testing that can be found at the following location [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration). # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API constructor needs to be passed the number of lines that are involved in the solving of this constraint equation. The previous implementat",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:8809,Testability,test,test,8809,"ted with each of the mapping parent dofs. - ContactMappers : It is (very) questionable to let contact mappers propagate the unconstrained dynamics solution vector towards contact dofs by calling `updateXfree()` since it will induce inconsistencies in mapping linearisation if the contact mappers are non linear, since contact mappings will therefore be linearised around the free motion configuration, and the rest being linearised around the configuration at the beginning of the time step. This PR does not address this problem which is left for future work. It arises only with non linear contact mappers (like the `RigidContactMapper` for instance), but this should be kept in mind. - LinearSolver API : As a general note, I believe the LinearSolver API is a bloated with virtual methods which are difficult to understand since they are not directly related to the computation / factorisation of a positive definite matrix, and are mostly optional especially for non assembled solver like CG. Most of the methods should reside in the ConstraintCorrection API, and concrete instance of ConstraintCorrection should be templated on the type of LinearSolver in my opinion, since it is the only objects that actually make use of these methods, and really what you want is to have access to the concrete type of Matrix and Vector used by the solver. Also from my understanding only `LinearSolver` instances that derive from `MatrixLinearSolver` implement these kind of methods, so maybe a first step would be to move them here. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:8859,Testability,test,test,8859,"ted with each of the mapping parent dofs. - ContactMappers : It is (very) questionable to let contact mappers propagate the unconstrained dynamics solution vector towards contact dofs by calling `updateXfree()` since it will induce inconsistencies in mapping linearisation if the contact mappers are non linear, since contact mappings will therefore be linearised around the free motion configuration, and the rest being linearised around the configuration at the beginning of the time step. This PR does not address this problem which is left for future work. It arises only with non linear contact mappers (like the `RigidContactMapper` for instance), but this should be kept in mind. - LinearSolver API : As a general note, I believe the LinearSolver API is a bloated with virtual methods which are difficult to understand since they are not directly related to the computation / factorisation of a positive definite matrix, and are mostly optional especially for non assembled solver like CG. Most of the methods should reside in the ConstraintCorrection API, and concrete instance of ConstraintCorrection should be templated on the type of LinearSolver in my opinion, since it is the only objects that actually make use of these methods, and really what you want is to have access to the concrete type of Matrix and Vector used by the solver. Also from my understanding only `LinearSolver` instances that derive from `MatrixLinearSolver` implement these kind of methods, so maybe a first step would be to move them here. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/459:854,Usability,undo,undocumented,854,"This PR diffs against the sofa-framework::issofa_constrainsolving branch until it has been merged into master. # Objectives; - Adjust FreeMotionAnimationLoop so that it is more faithful to the actual equations, most notably by ; allowing only one linearisation of the mappings within the time step. ; - Update the API in order to compute a linearised version of the constraint forces, in a similar fashion to ; what is done in the Compliant plugin. . # Requirements ; The following PR are required in order to build this ; - #484 ✔️; - #450 ✔️ ; - #452 ✔️ ; - #456 ✔️ . For testing: ; - `SOFA_USE_MASK` **must** be deactivated, otherwise derivatives quantities ( velocity at contact points for example) are not propagated at all since all dofs are ""masked"" by default. After having a rather quick look, apparently the `SOFA_USE_MASK` impose some strict (undocumented) requirements (on top of other limitations like the fact that it does not support changes in the topology) about where in the time step the ""apply"" method of mappings is called. - There is a branch on my local fork that integrates all the requirements for testing that can be found at the following location [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration). # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459
https://github.com/sofa-framework/sofa/pull/460:256,Availability,failure,failures,256,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460
https://github.com/sofa-framework/sofa/pull/460:306,Availability,failure,failures,306,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460
https://github.com/sofa-framework/sofa/pull/460:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460
https://github.com/sofa-framework/sofa/pull/460:251,Testability,test,test,251,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460
https://github.com/sofa-framework/sofa/pull/460:301,Testability,test,test,301,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460
https://github.com/sofa-framework/sofa/pull/461:30,Availability,error,errors,30,We ran into some more compile errors on windows using MSVC 2015. libQGLViewer wouldn't compile without those missing headers. Here's a quick fix but you might want to update libQGLViewer to the latest version (2.7.0). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/461
https://github.com/sofa-framework/sofa/pull/461:474,Availability,failure,failures,474,We ran into some more compile errors on windows using MSVC 2015. libQGLViewer wouldn't compile without those missing headers. Here's a quick fix but you might want to update libQGLViewer to the latest version (2.7.0). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/461
https://github.com/sofa-framework/sofa/pull/461:524,Availability,failure,failures,524,We ran into some more compile errors on windows using MSVC 2015. libQGLViewer wouldn't compile without those missing headers. Here's a quick fix but you might want to update libQGLViewer to the latest version (2.7.0). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/461
https://github.com/sofa-framework/sofa/pull/461:167,Deployability,update,update,167,We ran into some more compile errors on windows using MSVC 2015. libQGLViewer wouldn't compile without those missing headers. Here's a quick fix but you might want to update libQGLViewer to the latest version (2.7.0). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/461
https://github.com/sofa-framework/sofa/pull/461:317,Integrability,message,message,317,We ran into some more compile errors on windows using MSVC 2015. libQGLViewer wouldn't compile without those missing headers. Here's a quick fix but you might want to update libQGLViewer to the latest version (2.7.0). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/461
https://github.com/sofa-framework/sofa/pull/461:469,Testability,test,test,469,We ran into some more compile errors on windows using MSVC 2015. libQGLViewer wouldn't compile without those missing headers. Here's a quick fix but you might want to update libQGLViewer to the latest version (2.7.0). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/461
https://github.com/sofa-framework/sofa/pull/461:519,Testability,test,test,519,We ran into some more compile errors on windows using MSVC 2015. libQGLViewer wouldn't compile without those missing headers. Here's a quick fix but you might want to update libQGLViewer to the latest version (2.7.0). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/461
https://github.com/sofa-framework/sofa/issues/462:265,Availability,error,error,265,"The scene is generated successfully the first time with the the OglSceneFrame component correctly loaded and without warnings.; But, with or without any parameters specified in the component, I have been unable for the last few days to reload the scene. A segfault error is appearing.; I tried another scene containing this component and the result is the same.; I confirm that without this component, both scenes properly reload (using CTRL+R). Thanks in advance for resolving this issue!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/462
https://github.com/sofa-framework/sofa/issues/462:98,Performance,load,loaded,98,"The scene is generated successfully the first time with the the OglSceneFrame component correctly loaded and without warnings.; But, with or without any parameters specified in the component, I have been unable for the last few days to reload the scene. A segfault error is appearing.; I tried another scene containing this component and the result is the same.; I confirm that without this component, both scenes properly reload (using CTRL+R). Thanks in advance for resolving this issue!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/462
https://github.com/sofa-framework/sofa/issues/463:53,Modifiability,plugin,plugins,53,The new SceneCreator implementation requires to load plugins to work. ; To do that it calls the PluginManager...the problem is that in debug...the plugins have are not found. https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/436/testReport/. Is this because of the _d suffix ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463
https://github.com/sofa-framework/sofa/issues/463:96,Modifiability,Plugin,PluginManager,96,The new SceneCreator implementation requires to load plugins to work. ; To do that it calls the PluginManager...the problem is that in debug...the plugins have are not found. https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/436/testReport/. Is this because of the _d suffix ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463
https://github.com/sofa-framework/sofa/issues/463:147,Modifiability,plugin,plugins,147,The new SceneCreator implementation requires to load plugins to work. ; To do that it calls the PluginManager...the problem is that in debug...the plugins have are not found. https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/436/testReport/. Is this because of the _d suffix ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463
https://github.com/sofa-framework/sofa/issues/463:48,Performance,load,load,48,The new SceneCreator implementation requires to load plugins to work. ; To do that it calls the PluginManager...the problem is that in debug...the plugins have are not found. https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/436/testReport/. Is this because of the _d suffix ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463
https://github.com/sofa-framework/sofa/issues/463:242,Testability,test,testReport,242,The new SceneCreator implementation requires to load plugins to work. ; To do that it calls the PluginManager...the problem is that in debug...the plugins have are not found. https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/436/testReport/. Is this because of the _d suffix ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463
https://github.com/sofa-framework/sofa/issues/464:15,Availability,error,errors,15,Problem: build errors in libQGLViewer with MSVC 2015. See https://github.com/sofa-framework/sofa/pull/461; Solution (TODO): update libQGLViewer to the latest version (2.7.0).,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/464
https://github.com/sofa-framework/sofa/issues/464:124,Deployability,update,update,124,Problem: build errors in libQGLViewer with MSVC 2015. See https://github.com/sofa-framework/sofa/pull/461; Solution (TODO): update libQGLViewer to the latest version (2.7.0).,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/464
https://github.com/sofa-framework/sofa/pull/465:595,Availability,failure,failures,595,"The SceneCreator is now based on the plugin manager to load its dependency. ; It seems that when compiling in debug the plugin names are changed. In this PR I added to the PluginManager a way to search for ""debugging"" names when Sofa is compiled in debug. . This should fix the failling tests on options_debug on master reported in #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465
https://github.com/sofa-framework/sofa/pull/465:645,Availability,failure,failures,645,"The SceneCreator is now based on the plugin manager to load its dependency. ; It seems that when compiling in debug the plugin names are changed. In this PR I added to the PluginManager a way to search for ""debugging"" names when Sofa is compiled in debug. . This should fix the failling tests on options_debug on master reported in #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465
https://github.com/sofa-framework/sofa/pull/465:64,Integrability,depend,dependency,64,"The SceneCreator is now based on the plugin manager to load its dependency. ; It seems that when compiling in debug the plugin names are changed. In this PR I added to the PluginManager a way to search for ""debugging"" names when Sofa is compiled in debug. . This should fix the failling tests on options_debug on master reported in #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465
https://github.com/sofa-framework/sofa/pull/465:438,Integrability,message,message,438,"The SceneCreator is now based on the plugin manager to load its dependency. ; It seems that when compiling in debug the plugin names are changed. In this PR I added to the PluginManager a way to search for ""debugging"" names when Sofa is compiled in debug. . This should fix the failling tests on options_debug on master reported in #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465
https://github.com/sofa-framework/sofa/pull/465:37,Modifiability,plugin,plugin,37,"The SceneCreator is now based on the plugin manager to load its dependency. ; It seems that when compiling in debug the plugin names are changed. In this PR I added to the PluginManager a way to search for ""debugging"" names when Sofa is compiled in debug. . This should fix the failling tests on options_debug on master reported in #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465
https://github.com/sofa-framework/sofa/pull/465:120,Modifiability,plugin,plugin,120,"The SceneCreator is now based on the plugin manager to load its dependency. ; It seems that when compiling in debug the plugin names are changed. In this PR I added to the PluginManager a way to search for ""debugging"" names when Sofa is compiled in debug. . This should fix the failling tests on options_debug on master reported in #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465
https://github.com/sofa-framework/sofa/pull/465:172,Modifiability,Plugin,PluginManager,172,"The SceneCreator is now based on the plugin manager to load its dependency. ; It seems that when compiling in debug the plugin names are changed. In this PR I added to the PluginManager a way to search for ""debugging"" names when Sofa is compiled in debug. . This should fix the failling tests on options_debug on master reported in #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465
https://github.com/sofa-framework/sofa/pull/465:55,Performance,load,load,55,"The SceneCreator is now based on the plugin manager to load its dependency. ; It seems that when compiling in debug the plugin names are changed. In this PR I added to the PluginManager a way to search for ""debugging"" names when Sofa is compiled in debug. . This should fix the failling tests on options_debug on master reported in #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465
https://github.com/sofa-framework/sofa/pull/465:287,Testability,test,tests,287,"The SceneCreator is now based on the plugin manager to load its dependency. ; It seems that when compiling in debug the plugin names are changed. In this PR I added to the PluginManager a way to search for ""debugging"" names when Sofa is compiled in debug. . This should fix the failling tests on options_debug on master reported in #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465
https://github.com/sofa-framework/sofa/pull/465:590,Testability,test,test,590,"The SceneCreator is now based on the plugin manager to load its dependency. ; It seems that when compiling in debug the plugin names are changed. In this PR I added to the PluginManager a way to search for ""debugging"" names when Sofa is compiled in debug. . This should fix the failling tests on options_debug on master reported in #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465
https://github.com/sofa-framework/sofa/pull/465:640,Testability,test,test,640,"The SceneCreator is now based on the plugin manager to load its dependency. ; It seems that when compiling in debug the plugin names are changed. In this PR I added to the PluginManager a way to search for ""debugging"" names when Sofa is compiled in debug. . This should fix the failling tests on options_debug on master reported in #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465
https://github.com/sofa-framework/sofa/issues/466:18,Deployability,update,update,18,Is it possible to update the glew version distributed in the windows dependencies?. We can get this problem with the actually distributed version 1.13: https://www.khronos.org/opengl/wiki/OpenGL_Loading_Library#Initialization_of_GLEW_1.13.0_and_earlier. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/466
https://github.com/sofa-framework/sofa/issues/466:69,Integrability,depend,dependencies,69,Is it possible to update the glew version distributed in the windows dependencies?. We can get this problem with the actually distributed version 1.13: https://www.khronos.org/opengl/wiki/OpenGL_Loading_Library#Initialization_of_GLEW_1.13.0_and_earlier. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/466
https://github.com/sofa-framework/sofa/pull/467:366,Availability,failure,failures,366,All tests scenes are now failing because we cannot load the SofaSphFluid plugin. ; This fix should helps ;) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/467
https://github.com/sofa-framework/sofa/pull/467:416,Availability,failure,failures,416,All tests scenes are now failing because we cannot load the SofaSphFluid plugin. ; This fix should helps ;) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/467
https://github.com/sofa-framework/sofa/pull/467:209,Integrability,message,message,209,All tests scenes are now failing because we cannot load the SofaSphFluid plugin. ; This fix should helps ;) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/467
https://github.com/sofa-framework/sofa/pull/467:73,Modifiability,plugin,plugin,73,All tests scenes are now failing because we cannot load the SofaSphFluid plugin. ; This fix should helps ;) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/467
https://github.com/sofa-framework/sofa/pull/467:51,Performance,load,load,51,All tests scenes are now failing because we cannot load the SofaSphFluid plugin. ; This fix should helps ;) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/467
https://github.com/sofa-framework/sofa/pull/467:4,Testability,test,tests,4,All tests scenes are now failing because we cannot load the SofaSphFluid plugin. ; This fix should helps ;) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/467
https://github.com/sofa-framework/sofa/pull/467:361,Testability,test,test,361,All tests scenes are now failing because we cannot load the SofaSphFluid plugin. ; This fix should helps ;) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/467
https://github.com/sofa-framework/sofa/pull/467:411,Testability,test,test,411,All tests scenes are now failing because we cannot load the SofaSphFluid plugin. ; This fix should helps ;) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/467
https://github.com/sofa-framework/sofa/pull/468:589,Availability,failure,failures,589,"This pull request allows the usage of the advanced timer ; 1. In the standard way; `runSofa -c 1`; 2. Only for the init functions:; `runSofa -c 0`; 3. For the init function and for every second step:; `runSofa -c -2`. Moreover, the usage of the advanced timer in batch mode works again:; `runSofa -c -2 -g batch -n 10`. Fixes #357 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468
https://github.com/sofa-framework/sofa/pull/468:639,Availability,failure,failures,639,"This pull request allows the usage of the advanced timer ; 1. In the standard way; `runSofa -c 1`; 2. Only for the init functions:; `runSofa -c 0`; 3. For the init function and for every second step:; `runSofa -c -2`. Moreover, the usage of the advanced timer in batch mode works again:; `runSofa -c -2 -g batch -n 10`. Fixes #357 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468
https://github.com/sofa-framework/sofa/pull/468:432,Integrability,message,message,432,"This pull request allows the usage of the advanced timer ; 1. In the standard way; `runSofa -c 1`; 2. Only for the init functions:; `runSofa -c 0`; 3. For the init function and for every second step:; `runSofa -c -2`. Moreover, the usage of the advanced timer in batch mode works again:; `runSofa -c -2 -g batch -n 10`. Fixes #357 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468
https://github.com/sofa-framework/sofa/pull/468:584,Testability,test,test,584,"This pull request allows the usage of the advanced timer ; 1. In the standard way; `runSofa -c 1`; 2. Only for the init functions:; `runSofa -c 0`; 3. For the init function and for every second step:; `runSofa -c -2`. Moreover, the usage of the advanced timer in batch mode works again:; `runSofa -c -2 -g batch -n 10`. Fixes #357 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468
https://github.com/sofa-framework/sofa/pull/468:634,Testability,test,test,634,"This pull request allows the usage of the advanced timer ; 1. In the standard way; `runSofa -c 1`; 2. Only for the init functions:; `runSofa -c 0`; 3. For the init function and for every second step:; `runSofa -c -2`. Moreover, the usage of the advanced timer in batch mode works again:; `runSofa -c -2 -g batch -n 10`. Fixes #357 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468
https://github.com/sofa-framework/sofa/pull/469:585,Availability,failure,failures,585,"Based on the PR https://github.com/sofa-framework/sofa/pull/365, this work add comments ; Agreed that the default value of warmStart option should be false (see Maxime's comment in PR#335). However, the associated comments in the code would be very useful for beginners starting and understanding the conjugate gradient in SOFA. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/469
https://github.com/sofa-framework/sofa/pull/469:635,Availability,failure,failures,635,"Based on the PR https://github.com/sofa-framework/sofa/pull/365, this work add comments ; Agreed that the default value of warmStart option should be false (see Maxime's comment in PR#335). However, the associated comments in the code would be very useful for beginners starting and understanding the conjugate gradient in SOFA. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/469
https://github.com/sofa-framework/sofa/pull/469:428,Integrability,message,message,428,"Based on the PR https://github.com/sofa-framework/sofa/pull/365, this work add comments ; Agreed that the default value of warmStart option should be false (see Maxime's comment in PR#335). However, the associated comments in the code would be very useful for beginners starting and understanding the conjugate gradient in SOFA. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/469
https://github.com/sofa-framework/sofa/pull/469:580,Testability,test,test,580,"Based on the PR https://github.com/sofa-framework/sofa/pull/365, this work add comments ; Agreed that the default value of warmStart option should be false (see Maxime's comment in PR#335). However, the associated comments in the code would be very useful for beginners starting and understanding the conjugate gradient in SOFA. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/469
https://github.com/sofa-framework/sofa/pull/469:630,Testability,test,test,630,"Based on the PR https://github.com/sofa-framework/sofa/pull/365, this work add comments ; Agreed that the default value of warmStart option should be false (see Maxime's comment in PR#335). However, the associated comments in the code would be very useful for beginners starting and understanding the conjugate gradient in SOFA. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/469
https://github.com/sofa-framework/sofa/pull/470:384,Availability,failure,failures,384,"A directory that was recently removed is still mentioned in the cmake build files, so installation fails (compilation is fine). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/470
https://github.com/sofa-framework/sofa/pull/470:434,Availability,failure,failures,434,"A directory that was recently removed is still mentioned in the cmake build files, so installation fails (compilation is fine). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/470
https://github.com/sofa-framework/sofa/pull/470:86,Deployability,install,installation,86,"A directory that was recently removed is still mentioned in the cmake build files, so installation fails (compilation is fine). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/470
https://github.com/sofa-framework/sofa/pull/470:227,Integrability,message,message,227,"A directory that was recently removed is still mentioned in the cmake build files, so installation fails (compilation is fine). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/470
https://github.com/sofa-framework/sofa/pull/470:379,Testability,test,test,379,"A directory that was recently removed is still mentioned in the cmake build files, so installation fails (compilation is fine). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/470
https://github.com/sofa-framework/sofa/pull/470:429,Testability,test,test,429,"A directory that was recently removed is still mentioned in the cmake build files, so installation fails (compilation is fine). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/470
https://github.com/sofa-framework/sofa/pull/471:1612,Availability,failure,failures,1612,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:1662,Availability,failure,failures,1662,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:504,Deployability,update,updates,504,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:746,Deployability,update,updates,746,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:1263,Integrability,depend,dependency,1263,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:1455,Integrability,message,message,1455,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:90,Modifiability,refactor,refactoring,90,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:911,Modifiability,plugin,plugin,911,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:384,Performance,load,loading,384,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:985,Performance,load,load,985,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:150,Testability,test,test,150,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:176,Testability,test,testing,176,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:230,Testability,test,tests,230,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:277,Testability,test,testing,277,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:346,Testability,test,tests,346,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:589,Testability,test,testing,589,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:610,Testability,test,tests,610,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:758,Testability,test,tests,758,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:972,Testability,test,tests,972,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:1198,Testability,test,tests,1198,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:1607,Testability,test,test,1607,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:1657,Testability,test,test,1657,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:834,Usability,Simpl,SimpleApi,834,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:1244,Usability,Simpl,SimpleAPI,1244,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/471:1336,Usability,feedback,feedback,1336,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471
https://github.com/sofa-framework/sofa/pull/472:294,Availability,failure,failures,294,serialisation work on color datatype. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/472
https://github.com/sofa-framework/sofa/pull/472:344,Availability,failure,failures,344,serialisation work on color datatype. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/472
https://github.com/sofa-framework/sofa/pull/472:137,Integrability,message,message,137,serialisation work on color datatype. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/472
https://github.com/sofa-framework/sofa/pull/472:289,Testability,test,test,289,serialisation work on color datatype. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/472
https://github.com/sofa-framework/sofa/pull/472:339,Testability,test,test,339,serialisation work on color datatype. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/472
https://github.com/sofa-framework/sofa/pull/473:95,Availability,error,error,95,"sofa::helper::afficheResult definition no longer exists, resulting in unresolved external link error with msvc during debug compilation. I stumbled upon an unresolved external which apparently was introduced by a42dcec ; I guess the initial intent was to replace this method by a new method called `resultToString`, but its declaration did not make it through the header file. I suspect the unresolved external should have been caught by other compilers, but am I the only one; to compile in debug mode sometimes ?; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/473
https://github.com/sofa-framework/sofa/pull/473:772,Availability,failure,failures,772,"sofa::helper::afficheResult definition no longer exists, resulting in unresolved external link error with msvc during debug compilation. I stumbled upon an unresolved external which apparently was introduced by a42dcec ; I guess the initial intent was to replace this method by a new method called `resultToString`, but its declaration did not make it through the header file. I suspect the unresolved external should have been caught by other compilers, but am I the only one; to compile in debug mode sometimes ?; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/473
https://github.com/sofa-framework/sofa/pull/473:822,Availability,failure,failures,822,"sofa::helper::afficheResult definition no longer exists, resulting in unresolved external link error with msvc during debug compilation. I stumbled upon an unresolved external which apparently was introduced by a42dcec ; I guess the initial intent was to replace this method by a new method called `resultToString`, but its declaration did not make it through the header file. I suspect the unresolved external should have been caught by other compilers, but am I the only one; to compile in debug mode sometimes ?; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/473
https://github.com/sofa-framework/sofa/pull/473:615,Integrability,message,message,615,"sofa::helper::afficheResult definition no longer exists, resulting in unresolved external link error with msvc during debug compilation. I stumbled upon an unresolved external which apparently was introduced by a42dcec ; I guess the initial intent was to replace this method by a new method called `resultToString`, but its declaration did not make it through the header file. I suspect the unresolved external should have been caught by other compilers, but am I the only one; to compile in debug mode sometimes ?; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/473
https://github.com/sofa-framework/sofa/pull/473:767,Testability,test,test,767,"sofa::helper::afficheResult definition no longer exists, resulting in unresolved external link error with msvc during debug compilation. I stumbled upon an unresolved external which apparently was introduced by a42dcec ; I guess the initial intent was to replace this method by a new method called `resultToString`, but its declaration did not make it through the header file. I suspect the unresolved external should have been caught by other compilers, but am I the only one; to compile in debug mode sometimes ?; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/473
https://github.com/sofa-framework/sofa/pull/473:817,Testability,test,test,817,"sofa::helper::afficheResult definition no longer exists, resulting in unresolved external link error with msvc during debug compilation. I stumbled upon an unresolved external which apparently was introduced by a42dcec ; I guess the initial intent was to replace this method by a new method called `resultToString`, but its declaration did not make it through the header file. I suspect the unresolved external should have been caught by other compilers, but am I the only one; to compile in debug mode sometimes ?; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/473
https://github.com/sofa-framework/sofa/pull/474:517,Availability,failure,failures,517,"When a texture cannot be loaded the OglModel will crash. This PR fix that. ; As the image loader are now ""optional"" through CImgPlugin. . NB: I cannot prevent myself to clean a bit the commented code because I; cannot do bug tracking in the middle of the mess. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/474
https://github.com/sofa-framework/sofa/pull/474:567,Availability,failure,failures,567,"When a texture cannot be loaded the OglModel will crash. This PR fix that. ; As the image loader are now ""optional"" through CImgPlugin. . NB: I cannot prevent myself to clean a bit the commented code because I; cannot do bug tracking in the middle of the mess. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/474
https://github.com/sofa-framework/sofa/pull/474:360,Integrability,message,message,360,"When a texture cannot be loaded the OglModel will crash. This PR fix that. ; As the image loader are now ""optional"" through CImgPlugin. . NB: I cannot prevent myself to clean a bit the commented code because I; cannot do bug tracking in the middle of the mess. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/474
https://github.com/sofa-framework/sofa/pull/474:25,Performance,load,loaded,25,"When a texture cannot be loaded the OglModel will crash. This PR fix that. ; As the image loader are now ""optional"" through CImgPlugin. . NB: I cannot prevent myself to clean a bit the commented code because I; cannot do bug tracking in the middle of the mess. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/474
https://github.com/sofa-framework/sofa/pull/474:90,Performance,load,loader,90,"When a texture cannot be loaded the OglModel will crash. This PR fix that. ; As the image loader are now ""optional"" through CImgPlugin. . NB: I cannot prevent myself to clean a bit the commented code because I; cannot do bug tracking in the middle of the mess. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/474
https://github.com/sofa-framework/sofa/pull/474:512,Testability,test,test,512,"When a texture cannot be loaded the OglModel will crash. This PR fix that. ; As the image loader are now ""optional"" through CImgPlugin. . NB: I cannot prevent myself to clean a bit the commented code because I; cannot do bug tracking in the middle of the mess. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/474
https://github.com/sofa-framework/sofa/pull/474:562,Testability,test,test,562,"When a texture cannot be loaded the OglModel will crash. This PR fix that. ; As the image loader are now ""optional"" through CImgPlugin. . NB: I cannot prevent myself to clean a bit the commented code because I; cannot do bug tracking in the middle of the mess. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/474
https://github.com/sofa-framework/sofa/pull/475:1063,Availability,failure,failures,1063,"Currently config.h is a all-in-one configuration file that is generated by CMakeLists and included nearly everywhere. The problem is that it contains also very specific options that very few files are using. But, each time any of these specific option is changed sofa needs to be recompiled entirely. This PR is a implementing a more modular approach in which each .cpp that specifically requires a given define include a dedicated file.; Eg:; #include<config/build_option_opengl.h> // to do #if(SOFA_WITH_OPENGL==1); or; #include<config/build_option_experimental.h> // to do #if(SOFA_WITH_EXPERIMENTALFATURE==1); or; #include<config/sharedlibrary_defines.h>. It is still possible to use the old file but by being more specific we will reduce the amount of file to recompile when we will changed something. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/475
https://github.com/sofa-framework/sofa/pull/475:1113,Availability,failure,failures,1113,"Currently config.h is a all-in-one configuration file that is generated by CMakeLists and included nearly everywhere. The problem is that it contains also very specific options that very few files are using. But, each time any of these specific option is changed sofa needs to be recompiled entirely. This PR is a implementing a more modular approach in which each .cpp that specifically requires a given define include a dedicated file.; Eg:; #include<config/build_option_opengl.h> // to do #if(SOFA_WITH_OPENGL==1); or; #include<config/build_option_experimental.h> // to do #if(SOFA_WITH_EXPERIMENTALFATURE==1); or; #include<config/sharedlibrary_defines.h>. It is still possible to use the old file but by being more specific we will reduce the amount of file to recompile when we will changed something. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/475
https://github.com/sofa-framework/sofa/pull/475:35,Deployability,configurat,configuration,35,"Currently config.h is a all-in-one configuration file that is generated by CMakeLists and included nearly everywhere. The problem is that it contains also very specific options that very few files are using. But, each time any of these specific option is changed sofa needs to be recompiled entirely. This PR is a implementing a more modular approach in which each .cpp that specifically requires a given define include a dedicated file.; Eg:; #include<config/build_option_opengl.h> // to do #if(SOFA_WITH_OPENGL==1); or; #include<config/build_option_experimental.h> // to do #if(SOFA_WITH_EXPERIMENTALFATURE==1); or; #include<config/sharedlibrary_defines.h>. It is still possible to use the old file but by being more specific we will reduce the amount of file to recompile when we will changed something. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/475
https://github.com/sofa-framework/sofa/pull/475:736,Energy Efficiency,reduce,reduce,736,"Currently config.h is a all-in-one configuration file that is generated by CMakeLists and included nearly everywhere. The problem is that it contains also very specific options that very few files are using. But, each time any of these specific option is changed sofa needs to be recompiled entirely. This PR is a implementing a more modular approach in which each .cpp that specifically requires a given define include a dedicated file.; Eg:; #include<config/build_option_opengl.h> // to do #if(SOFA_WITH_OPENGL==1); or; #include<config/build_option_experimental.h> // to do #if(SOFA_WITH_EXPERIMENTALFATURE==1); or; #include<config/sharedlibrary_defines.h>. It is still possible to use the old file but by being more specific we will reduce the amount of file to recompile when we will changed something. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/475
https://github.com/sofa-framework/sofa/pull/475:906,Integrability,message,message,906,"Currently config.h is a all-in-one configuration file that is generated by CMakeLists and included nearly everywhere. The problem is that it contains also very specific options that very few files are using. But, each time any of these specific option is changed sofa needs to be recompiled entirely. This PR is a implementing a more modular approach in which each .cpp that specifically requires a given define include a dedicated file.; Eg:; #include<config/build_option_opengl.h> // to do #if(SOFA_WITH_OPENGL==1); or; #include<config/build_option_experimental.h> // to do #if(SOFA_WITH_EXPERIMENTALFATURE==1); or; #include<config/sharedlibrary_defines.h>. It is still possible to use the old file but by being more specific we will reduce the amount of file to recompile when we will changed something. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/475
https://github.com/sofa-framework/sofa/pull/475:10,Modifiability,config,config,10,"Currently config.h is a all-in-one configuration file that is generated by CMakeLists and included nearly everywhere. The problem is that it contains also very specific options that very few files are using. But, each time any of these specific option is changed sofa needs to be recompiled entirely. This PR is a implementing a more modular approach in which each .cpp that specifically requires a given define include a dedicated file.; Eg:; #include<config/build_option_opengl.h> // to do #if(SOFA_WITH_OPENGL==1); or; #include<config/build_option_experimental.h> // to do #if(SOFA_WITH_EXPERIMENTALFATURE==1); or; #include<config/sharedlibrary_defines.h>. It is still possible to use the old file but by being more specific we will reduce the amount of file to recompile when we will changed something. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/475
https://github.com/sofa-framework/sofa/pull/475:35,Modifiability,config,configuration,35,"Currently config.h is a all-in-one configuration file that is generated by CMakeLists and included nearly everywhere. The problem is that it contains also very specific options that very few files are using. But, each time any of these specific option is changed sofa needs to be recompiled entirely. This PR is a implementing a more modular approach in which each .cpp that specifically requires a given define include a dedicated file.; Eg:; #include<config/build_option_opengl.h> // to do #if(SOFA_WITH_OPENGL==1); or; #include<config/build_option_experimental.h> // to do #if(SOFA_WITH_EXPERIMENTALFATURE==1); or; #include<config/sharedlibrary_defines.h>. It is still possible to use the old file but by being more specific we will reduce the amount of file to recompile when we will changed something. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/475
https://github.com/sofa-framework/sofa/pull/475:453,Modifiability,config,config,453,"Currently config.h is a all-in-one configuration file that is generated by CMakeLists and included nearly everywhere. The problem is that it contains also very specific options that very few files are using. But, each time any of these specific option is changed sofa needs to be recompiled entirely. This PR is a implementing a more modular approach in which each .cpp that specifically requires a given define include a dedicated file.; Eg:; #include<config/build_option_opengl.h> // to do #if(SOFA_WITH_OPENGL==1); or; #include<config/build_option_experimental.h> // to do #if(SOFA_WITH_EXPERIMENTALFATURE==1); or; #include<config/sharedlibrary_defines.h>. It is still possible to use the old file but by being more specific we will reduce the amount of file to recompile when we will changed something. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/475
https://github.com/sofa-framework/sofa/pull/475:531,Modifiability,config,config,531,"Currently config.h is a all-in-one configuration file that is generated by CMakeLists and included nearly everywhere. The problem is that it contains also very specific options that very few files are using. But, each time any of these specific option is changed sofa needs to be recompiled entirely. This PR is a implementing a more modular approach in which each .cpp that specifically requires a given define include a dedicated file.; Eg:; #include<config/build_option_opengl.h> // to do #if(SOFA_WITH_OPENGL==1); or; #include<config/build_option_experimental.h> // to do #if(SOFA_WITH_EXPERIMENTALFATURE==1); or; #include<config/sharedlibrary_defines.h>. It is still possible to use the old file but by being more specific we will reduce the amount of file to recompile when we will changed something. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/475
https://github.com/sofa-framework/sofa/pull/475:627,Modifiability,config,config,627,"Currently config.h is a all-in-one configuration file that is generated by CMakeLists and included nearly everywhere. The problem is that it contains also very specific options that very few files are using. But, each time any of these specific option is changed sofa needs to be recompiled entirely. This PR is a implementing a more modular approach in which each .cpp that specifically requires a given define include a dedicated file.; Eg:; #include<config/build_option_opengl.h> // to do #if(SOFA_WITH_OPENGL==1); or; #include<config/build_option_experimental.h> // to do #if(SOFA_WITH_EXPERIMENTALFATURE==1); or; #include<config/sharedlibrary_defines.h>. It is still possible to use the old file but by being more specific we will reduce the amount of file to recompile when we will changed something. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/475
https://github.com/sofa-framework/sofa/pull/475:1058,Testability,test,test,1058,"Currently config.h is a all-in-one configuration file that is generated by CMakeLists and included nearly everywhere. The problem is that it contains also very specific options that very few files are using. But, each time any of these specific option is changed sofa needs to be recompiled entirely. This PR is a implementing a more modular approach in which each .cpp that specifically requires a given define include a dedicated file.; Eg:; #include<config/build_option_opengl.h> // to do #if(SOFA_WITH_OPENGL==1); or; #include<config/build_option_experimental.h> // to do #if(SOFA_WITH_EXPERIMENTALFATURE==1); or; #include<config/sharedlibrary_defines.h>. It is still possible to use the old file but by being more specific we will reduce the amount of file to recompile when we will changed something. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/475
https://github.com/sofa-framework/sofa/pull/475:1108,Testability,test,test,1108,"Currently config.h is a all-in-one configuration file that is generated by CMakeLists and included nearly everywhere. The problem is that it contains also very specific options that very few files are using. But, each time any of these specific option is changed sofa needs to be recompiled entirely. This PR is a implementing a more modular approach in which each .cpp that specifically requires a given define include a dedicated file.; Eg:; #include<config/build_option_opengl.h> // to do #if(SOFA_WITH_OPENGL==1); or; #include<config/build_option_experimental.h> // to do #if(SOFA_WITH_EXPERIMENTALFATURE==1); or; #include<config/sharedlibrary_defines.h>. It is still possible to use the old file but by being more specific we will reduce the amount of file to recompile when we will changed something. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/475
https://github.com/sofa-framework/sofa/pull/476:109,Availability,error,error,109,Because of the InfoComponent (that report in the GUI the fact that a component; was not created the complete error log from the factory where not reported. This commit fix that. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/476
https://github.com/sofa-framework/sofa/pull/476:434,Availability,failure,failures,434,Because of the InfoComponent (that report in the GUI the fact that a component; was not created the complete error log from the factory where not reported. This commit fix that. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/476
https://github.com/sofa-framework/sofa/pull/476:484,Availability,failure,failures,484,Because of the InfoComponent (that report in the GUI the fact that a component; was not created the complete error log from the factory where not reported. This commit fix that. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/476
https://github.com/sofa-framework/sofa/pull/476:277,Integrability,message,message,277,Because of the InfoComponent (that report in the GUI the fact that a component; was not created the complete error log from the factory where not reported. This commit fix that. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/476
https://github.com/sofa-framework/sofa/pull/476:115,Testability,log,log,115,Because of the InfoComponent (that report in the GUI the fact that a component; was not created the complete error log from the factory where not reported. This commit fix that. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/476
https://github.com/sofa-framework/sofa/pull/476:429,Testability,test,test,429,Because of the InfoComponent (that report in the GUI the fact that a component; was not created the complete error log from the factory where not reported. This commit fix that. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/476
https://github.com/sofa-framework/sofa/pull/476:479,Testability,test,test,479,Because of the InfoComponent (that report in the GUI the fact that a component; was not created the complete error log from the factory where not reported. This commit fix that. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/476
https://github.com/sofa-framework/sofa/pull/477:283,Availability,failure,failures,283,One more plugin in Sofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/477
https://github.com/sofa-framework/sofa/pull/477:333,Availability,failure,failures,333,One more plugin in Sofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/477
https://github.com/sofa-framework/sofa/pull/477:126,Integrability,message,message,126,One more plugin in Sofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/477
https://github.com/sofa-framework/sofa/pull/477:9,Modifiability,plugin,plugin,9,One more plugin in Sofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/477
https://github.com/sofa-framework/sofa/pull/477:278,Testability,test,test,278,One more plugin in Sofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/477
https://github.com/sofa-framework/sofa/pull/477:328,Testability,test,test,328,One more plugin in Sofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/477
https://github.com/sofa-framework/sofa/pull/478:435,Availability,failure,failures,435,"As this test needs LennardJonesFF, which is now deprecated, the test has been deprecated to fix this. It now runs smoothly in ""full"" component set and is removed from ""standard"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/478
https://github.com/sofa-framework/sofa/pull/478:485,Availability,failure,failures,485,"As this test needs LennardJonesFF, which is now deprecated, the test has been deprecated to fix this. It now runs smoothly in ""full"" component set and is removed from ""standard"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/478
https://github.com/sofa-framework/sofa/pull/478:278,Integrability,message,message,278,"As this test needs LennardJonesFF, which is now deprecated, the test has been deprecated to fix this. It now runs smoothly in ""full"" component set and is removed from ""standard"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/478
https://github.com/sofa-framework/sofa/pull/478:8,Testability,test,test,8,"As this test needs LennardJonesFF, which is now deprecated, the test has been deprecated to fix this. It now runs smoothly in ""full"" component set and is removed from ""standard"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/478
https://github.com/sofa-framework/sofa/pull/478:64,Testability,test,test,64,"As this test needs LennardJonesFF, which is now deprecated, the test has been deprecated to fix this. It now runs smoothly in ""full"" component set and is removed from ""standard"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/478
https://github.com/sofa-framework/sofa/pull/478:430,Testability,test,test,430,"As this test needs LennardJonesFF, which is now deprecated, the test has been deprecated to fix this. It now runs smoothly in ""full"" component set and is removed from ""standard"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/478
https://github.com/sofa-framework/sofa/pull/478:480,Testability,test,test,480,"As this test needs LennardJonesFF, which is now deprecated, the test has been deprecated to fix this. It now runs smoothly in ""full"" component set and is removed from ""standard"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/478
https://github.com/sofa-framework/sofa/pull/479:393,Availability,failure,failures,393,When a message does not have an 'suggestion' text then sofa will; crash. Because of Index out of bound.; This PR fix that.; Fixes #491 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/479
https://github.com/sofa-framework/sofa/pull/479:443,Availability,failure,failures,443,When a message does not have an 'suggestion' text then sofa will; crash. Because of Index out of bound.; This PR fix that.; Fixes #491 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/479
https://github.com/sofa-framework/sofa/pull/479:7,Integrability,message,message,7,When a message does not have an 'suggestion' text then sofa will; crash. Because of Index out of bound.; This PR fix that.; Fixes #491 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/479
https://github.com/sofa-framework/sofa/pull/479:236,Integrability,message,message,236,When a message does not have an 'suggestion' text then sofa will; crash. Because of Index out of bound.; This PR fix that.; Fixes #491 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/479
https://github.com/sofa-framework/sofa/pull/479:388,Testability,test,test,388,When a message does not have an 'suggestion' text then sofa will; crash. Because of Index out of bound.; This PR fix that.; Fixes #491 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/479
https://github.com/sofa-framework/sofa/pull/479:438,Testability,test,test,438,When a message does not have an 'suggestion' text then sofa will; crash. Because of Index out of bound.; This PR fix that.; Fixes #491 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/479
https://github.com/sofa-framework/sofa/issues/480:13,Testability,test,tested,13,"Hey,. I just tested differents gui arguments and encounter a weird argument name issue.; if you run : `runsofa -g qt` this will run the opengl view. Everything is working well, but the argument name is a bit ... confusing.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/480
https://github.com/sofa-framework/sofa/issues/482:395,Availability,reliab,reliable,395,"Hello,. I saw that several PRs are in work that move potentially lots of source files into plugins (#396, #407, #408, #477).; These types of changes can be very painful for everyone looking at file histories and/or not working exclusively on master:; - all existing branches / PRs are very likely to cause conflict. Yes git does its best to try to match files in different paths but this is not reliable at all. Example issues: it won't move files that are created in the same directories in other branches/PRs, you have to be expert in all the rename match heuristics within git in order to be able to use merge with 10s of commits with mismatching file hierarchies (and there is none that I know of that will work well enough to be always used); - the history of all affected files will be polluted by this move. Example: it is tricky to know the history of all the SofaKernel files before May 2016 [(example)](https://github.com/sofa-framework/sofa/commits/master/SofaKernel/framework/sofa/core/BaseState.h) (can someone remind me what we gained by this massive move? I would like to know because that's the number-one time-waster on our end for merges/history tracking). So I would like to know if those considerations were understood before doing this once again ?. And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :. 1. First only change the CMake scripts / per-lib main header/cpp to convert them to plugins WITHOUT moving the actual source files; 2. Document the proposed new directory hierarchy, propose it and wait for feedback from enough community members; 3. Once there is an agreement on the hierarchy, apply it via a commit that does not change anything else (changes in cmake scripts should be done as a separate commit, to ease solving later merge/conflict issues). And regarding point 2, instead of moving everything in `applications/plugins` that is only there because of a bad decision 10 years ago (it was simpler as we ha",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:2006,Deployability,release,release,2006,"d by this massive move? I would like to know because that's the number-one time-waster on our end for merges/history tracking). So I would like to know if those considerations were understood before doing this once again ?. And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :. 1. First only change the CMake scripts / per-lib main header/cpp to convert them to plugins WITHOUT moving the actual source files; 2. Document the proposed new directory hierarchy, propose it and wait for feedback from enough community members; 3. Once there is an agreement on the hierarchy, apply it via a commit that does not change anything else (changes in cmake scripts should be done as a separate commit, to ease solving later merge/conflict issues). And regarding point 2, instead of moving everything in `applications/plugins` that is only there because of a bad decision 10 years ago (it was simpler as we had to release the main directories as separate archives for licensing reason so we packed the couple of plugins we had together with the executables), I would propose to use the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:4396,Integrability,depend,depending,4396,"her licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same directory; 3. clear separation of the different licences, so that we can be sure that a LGPL-only app does not actually include GPL-licenced headers (because of the useful convention to include plugins/lib classes with `MyPlugin/MyClass.h`, all codes must be compiled with options to add to the compiler path the parent of a plugin directory, currently because it is the same parent as plugins with different licences it is difficult to be sure unwanted code is not included); 4. it fits with the way of organizing all codes around collections of libraries, which was the original intent behind Helper/Core/DefaultType within SofaFramework, Simulation* within SofaSimulation, Base* within SofaBase, ..., but which unfortunately was not agreed to with everyone so stuck in years-long discussions and is now broken by adding a ""SofaKernel"" level. As a reminder of the key points of this way of organizing codes, the idea was to make it consistent where the code/targets are found (always within a sub-subdirectory) while allowing to share common scripts/docs/packaging/... at the ""collection"" level instead of copy/pasted within each plugin/library. 2 disadvantages that I see:; 1. it would be useful to also move the other plugins to this new hierarchy (so more files would need to be moved in the end), but this can be done later, plugin-by-plugin, depending on the main maintainers of each; 2. we might get stuck in an endless debate/discussion again...",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:91,Modifiability,plugin,plugins,91,"Hello,. I saw that several PRs are in work that move potentially lots of source files into plugins (#396, #407, #408, #477).; These types of changes can be very painful for everyone looking at file histories and/or not working exclusively on master:; - all existing branches / PRs are very likely to cause conflict. Yes git does its best to try to match files in different paths but this is not reliable at all. Example issues: it won't move files that are created in the same directories in other branches/PRs, you have to be expert in all the rename match heuristics within git in order to be able to use merge with 10s of commits with mismatching file hierarchies (and there is none that I know of that will work well enough to be always used); - the history of all affected files will be polluted by this move. Example: it is tricky to know the history of all the SofaKernel files before May 2016 [(example)](https://github.com/sofa-framework/sofa/commits/master/SofaKernel/framework/sofa/core/BaseState.h) (can someone remind me what we gained by this massive move? I would like to know because that's the number-one time-waster on our end for merges/history tracking). So I would like to know if those considerations were understood before doing this once again ?. And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :. 1. First only change the CMake scripts / per-lib main header/cpp to convert them to plugins WITHOUT moving the actual source files; 2. Document the proposed new directory hierarchy, propose it and wait for feedback from enough community members; 3. Once there is an agreement on the hierarchy, apply it via a commit that does not change anything else (changes in cmake scripts should be done as a separate commit, to ease solving later merge/conflict issues). And regarding point 2, instead of moving everything in `applications/plugins` that is only there because of a bad decision 10 years ago (it was simpler as we ha",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:1465,Modifiability,plugin,plugins,1465,"hat are created in the same directories in other branches/PRs, you have to be expert in all the rename match heuristics within git in order to be able to use merge with 10s of commits with mismatching file hierarchies (and there is none that I know of that will work well enough to be always used); - the history of all affected files will be polluted by this move. Example: it is tricky to know the history of all the SofaKernel files before May 2016 [(example)](https://github.com/sofa-framework/sofa/commits/master/SofaKernel/framework/sofa/core/BaseState.h) (can someone remind me what we gained by this massive move? I would like to know because that's the number-one time-waster on our end for merges/history tracking). So I would like to know if those considerations were understood before doing this once again ?. And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :. 1. First only change the CMake scripts / per-lib main header/cpp to convert them to plugins WITHOUT moving the actual source files; 2. Document the proposed new directory hierarchy, propose it and wait for feedback from enough community members; 3. Once there is an agreement on the hierarchy, apply it via a commit that does not change anything else (changes in cmake scripts should be done as a separate commit, to ease solving later merge/conflict issues). And regarding point 2, instead of moving everything in `applications/plugins` that is only there because of a bad decision 10 years ago (it was simpler as we had to release the main directories as separate archives for licensing reason so we packed the couple of plugins we had together with the executables), I would propose to use the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any pl",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:1910,Modifiability,plugin,plugins,1910,"d by this massive move? I would like to know because that's the number-one time-waster on our end for merges/history tracking). So I would like to know if those considerations were understood before doing this once again ?. And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :. 1. First only change the CMake scripts / per-lib main header/cpp to convert them to plugins WITHOUT moving the actual source files; 2. Document the proposed new directory hierarchy, propose it and wait for feedback from enough community members; 3. Once there is an agreement on the hierarchy, apply it via a commit that does not change anything else (changes in cmake scripts should be done as a separate commit, to ease solving later merge/conflict issues). And regarding point 2, instead of moving everything in `applications/plugins` that is only there because of a bad decision 10 years ago (it was simpler as we had to release the main directories as separate archives for licensing reason so we packed the couple of plugins we had together with the executables), I would propose to use the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:2104,Modifiability,plugin,plugins,2104,"d by this massive move? I would like to know because that's the number-one time-waster on our end for merges/history tracking). So I would like to know if those considerations were understood before doing this once again ?. And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :. 1. First only change the CMake scripts / per-lib main header/cpp to convert them to plugins WITHOUT moving the actual source files; 2. Document the proposed new directory hierarchy, propose it and wait for feedback from enough community members; 3. Once there is an agreement on the hierarchy, apply it via a commit that does not change anything else (changes in cmake scripts should be done as a separate commit, to ease solving later merge/conflict issues). And regarding point 2, instead of moving everything in `applications/plugins` that is only there because of a bad decision 10 years ago (it was simpler as we had to release the main directories as separate archives for licensing reason so we packed the couple of plugins we had together with the executables), I would propose to use the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:2306,Modifiability,plugin,plugin,2306,"uld suggest a 3 steps approach :. 1. First only change the CMake scripts / per-lib main header/cpp to convert them to plugins WITHOUT moving the actual source files; 2. Document the proposed new directory hierarchy, propose it and wait for feedback from enough community members; 3. Once there is an agreement on the hierarchy, apply it via a commit that does not change anything else (changes in cmake scripts should be done as a separate commit, to ease solving later merge/conflict issues). And regarding point 2, instead of moving everything in `applications/plugins` that is only there because of a bad decision 10 years ago (it was simpler as we had to release the main directories as separate archives for licensing reason so we packed the couple of plugins we had together with the executables), I would propose to use the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same directory; 3. clear separation of the different licences, so that we can be sure that a LGPL-only app does not actually include GPL-licenced headers (because of the useful convention to include plugins/lib classes with `MyPlugin/MyClass.h`, all codes must be compiled with options to add to the compil",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:2447,Modifiability,plugin,plugins,2447,"lugins WITHOUT moving the actual source files; 2. Document the proposed new directory hierarchy, propose it and wait for feedback from enough community members; 3. Once there is an agreement on the hierarchy, apply it via a commit that does not change anything else (changes in cmake scripts should be done as a separate commit, to ease solving later merge/conflict issues). And regarding point 2, instead of moving everything in `applications/plugins` that is only there because of a bad decision 10 years ago (it was simpler as we had to release the main directories as separate archives for licensing reason so we packed the couple of plugins we had together with the executables), I would propose to use the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same directory; 3. clear separation of the different licences, so that we can be sure that a LGPL-only app does not actually include GPL-licenced headers (because of the useful convention to include plugins/lib classes with `MyPlugin/MyClass.h`, all codes must be compiled with options to add to the compiler path the parent of a plugin directory, currently because it is the same parent as plugins with different licences i",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:2884,Modifiability,plugin,plugins,2884," 2, instead of moving everything in `applications/plugins` that is only there because of a bad decision 10 years ago (it was simpler as we had to release the main directories as separate archives for licensing reason so we packed the couple of plugins we had together with the executables), I would propose to use the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same directory; 3. clear separation of the different licences, so that we can be sure that a LGPL-only app does not actually include GPL-licenced headers (because of the useful convention to include plugins/lib classes with `MyPlugin/MyClass.h`, all codes must be compiled with options to add to the compiler path the parent of a plugin directory, currently because it is the same parent as plugins with different licences it is difficult to be sure unwanted code is not included); 4. it fits with the way of organizing all codes around collections of libraries, which was the original intent behind Helper/Core/DefaultType within SofaFramework, Simulation* within SofaSimulation, Base* within SofaBase, ..., but which unfortunately was not agreed to with everyone so stuck in years-long discussions and is now broken ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:3015,Modifiability,plugin,plugins,3015,"main directories as separate archives for licensing reason so we packed the couple of plugins we had together with the executables), I would propose to use the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same directory; 3. clear separation of the different licences, so that we can be sure that a LGPL-only app does not actually include GPL-licenced headers (because of the useful convention to include plugins/lib classes with `MyPlugin/MyClass.h`, all codes must be compiled with options to add to the compiler path the parent of a plugin directory, currently because it is the same parent as plugins with different licences it is difficult to be sure unwanted code is not included); 4. it fits with the way of organizing all codes around collections of libraries, which was the original intent behind Helper/Core/DefaultType within SofaFramework, Simulation* within SofaSimulation, Base* within SofaBase, ..., but which unfortunately was not agreed to with everyone so stuck in years-long discussions and is now broken by adding a ""SofaKernel"" level. As a reminder of the key points of this way of organizing codes, the idea was to make it consistent where the code/targets are",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:3241,Modifiability,plugin,plugins,3241,"e the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same directory; 3. clear separation of the different licences, so that we can be sure that a LGPL-only app does not actually include GPL-licenced headers (because of the useful convention to include plugins/lib classes with `MyPlugin/MyClass.h`, all codes must be compiled with options to add to the compiler path the parent of a plugin directory, currently because it is the same parent as plugins with different licences it is difficult to be sure unwanted code is not included); 4. it fits with the way of organizing all codes around collections of libraries, which was the original intent behind Helper/Core/DefaultType within SofaFramework, Simulation* within SofaSimulation, Base* within SofaBase, ..., but which unfortunately was not agreed to with everyone so stuck in years-long discussions and is now broken by adding a ""SofaKernel"" level. As a reminder of the key points of this way of organizing codes, the idea was to make it consistent where the code/targets are found (always within a sub-subdirectory) while allowing to share common scripts/docs/packaging/... at the ""collection"" level instead of copy/pasted withi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:3372,Modifiability,plugin,plugin,3372,"sGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same directory; 3. clear separation of the different licences, so that we can be sure that a LGPL-only app does not actually include GPL-licenced headers (because of the useful convention to include plugins/lib classes with `MyPlugin/MyClass.h`, all codes must be compiled with options to add to the compiler path the parent of a plugin directory, currently because it is the same parent as plugins with different licences it is difficult to be sure unwanted code is not included); 4. it fits with the way of organizing all codes around collections of libraries, which was the original intent behind Helper/Core/DefaultType within SofaFramework, Simulation* within SofaSimulation, Base* within SofaBase, ..., but which unfortunately was not agreed to with everyone so stuck in years-long discussions and is now broken by adding a ""SofaKernel"" level. As a reminder of the key points of this way of organizing codes, the idea was to make it consistent where the code/targets are found (always within a sub-subdirectory) while allowing to share common scripts/docs/packaging/... at the ""collection"" level instead of copy/pasted within each plugin/library. 2 disadvantages that I see:; 1. it would be useful to also move the other plugins to this new hierarchy (so more files would need to be moved in the end), but this can be done later, plugin-by-plugin, depending",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:3433,Modifiability,plugin,plugins,3433,"sGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same directory; 3. clear separation of the different licences, so that we can be sure that a LGPL-only app does not actually include GPL-licenced headers (because of the useful convention to include plugins/lib classes with `MyPlugin/MyClass.h`, all codes must be compiled with options to add to the compiler path the parent of a plugin directory, currently because it is the same parent as plugins with different licences it is difficult to be sure unwanted code is not included); 4. it fits with the way of organizing all codes around collections of libraries, which was the original intent behind Helper/Core/DefaultType within SofaFramework, Simulation* within SofaSimulation, Base* within SofaBase, ..., but which unfortunately was not agreed to with everyone so stuck in years-long discussions and is now broken by adding a ""SofaKernel"" level. As a reminder of the key points of this way of organizing codes, the idea was to make it consistent where the code/targets are found (always within a sub-subdirectory) while allowing to share common scripts/docs/packaging/... at the ""collection"" level instead of copy/pasted within each plugin/library. 2 disadvantages that I see:; 1. it would be useful to also move the other plugins to this new hierarchy (so more files would need to be moved in the end), but this can be done later, plugin-by-plugin, depending",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:4179,Modifiability,plugin,plugin,4179,"her licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same directory; 3. clear separation of the different licences, so that we can be sure that a LGPL-only app does not actually include GPL-licenced headers (because of the useful convention to include plugins/lib classes with `MyPlugin/MyClass.h`, all codes must be compiled with options to add to the compiler path the parent of a plugin directory, currently because it is the same parent as plugins with different licences it is difficult to be sure unwanted code is not included); 4. it fits with the way of organizing all codes around collections of libraries, which was the original intent behind Helper/Core/DefaultType within SofaFramework, Simulation* within SofaSimulation, Base* within SofaBase, ..., but which unfortunately was not agreed to with everyone so stuck in years-long discussions and is now broken by adding a ""SofaKernel"" level. As a reminder of the key points of this way of organizing codes, the idea was to make it consistent where the code/targets are found (always within a sub-subdirectory) while allowing to share common scripts/docs/packaging/... at the ""collection"" level instead of copy/pasted within each plugin/library. 2 disadvantages that I see:; 1. it would be useful to also move the other plugins to this new hierarchy (so more files would need to be moved in the end), but this can be done later, plugin-by-plugin, depending on the main maintainers of each; 2. we might get stuck in an endless debate/discussion again...",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:4269,Modifiability,plugin,plugins,4269,"her licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same directory; 3. clear separation of the different licences, so that we can be sure that a LGPL-only app does not actually include GPL-licenced headers (because of the useful convention to include plugins/lib classes with `MyPlugin/MyClass.h`, all codes must be compiled with options to add to the compiler path the parent of a plugin directory, currently because it is the same parent as plugins with different licences it is difficult to be sure unwanted code is not included); 4. it fits with the way of organizing all codes around collections of libraries, which was the original intent behind Helper/Core/DefaultType within SofaFramework, Simulation* within SofaSimulation, Base* within SofaBase, ..., but which unfortunately was not agreed to with everyone so stuck in years-long discussions and is now broken by adding a ""SofaKernel"" level. As a reminder of the key points of this way of organizing codes, the idea was to make it consistent where the code/targets are found (always within a sub-subdirectory) while allowing to share common scripts/docs/packaging/... at the ""collection"" level instead of copy/pasted within each plugin/library. 2 disadvantages that I see:; 1. it would be useful to also move the other plugins to this new hierarchy (so more files would need to be moved in the end), but this can be done later, plugin-by-plugin, depending on the main maintainers of each; 2. we might get stuck in an endless debate/discussion again...",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:4378,Modifiability,plugin,plugin-by-plugin,4378,"her licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same directory; 3. clear separation of the different licences, so that we can be sure that a LGPL-only app does not actually include GPL-licenced headers (because of the useful convention to include plugins/lib classes with `MyPlugin/MyClass.h`, all codes must be compiled with options to add to the compiler path the parent of a plugin directory, currently because it is the same parent as plugins with different licences it is difficult to be sure unwanted code is not included); 4. it fits with the way of organizing all codes around collections of libraries, which was the original intent behind Helper/Core/DefaultType within SofaFramework, Simulation* within SofaSimulation, Base* within SofaBase, ..., but which unfortunately was not agreed to with everyone so stuck in years-long discussions and is now broken by adding a ""SofaKernel"" level. As a reminder of the key points of this way of organizing codes, the idea was to make it consistent where the code/targets are found (always within a sub-subdirectory) while allowing to share common scripts/docs/packaging/... at the ""collection"" level instead of copy/pasted within each plugin/library. 2 disadvantages that I see:; 1. it would be useful to also move the other plugins to this new hierarchy (so more files would need to be moved in the end), but this can be done later, plugin-by-plugin, depending on the main maintainers of each; 2. we might get stuck in an endless debate/discussion again...",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:1587,Usability,feedback,feedback,1587,"hin git in order to be able to use merge with 10s of commits with mismatching file hierarchies (and there is none that I know of that will work well enough to be always used); - the history of all affected files will be polluted by this move. Example: it is tricky to know the history of all the SofaKernel files before May 2016 [(example)](https://github.com/sofa-framework/sofa/commits/master/SofaKernel/framework/sofa/core/BaseState.h) (can someone remind me what we gained by this massive move? I would like to know because that's the number-one time-waster on our end for merges/history tracking). So I would like to know if those considerations were understood before doing this once again ?. And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :. 1. First only change the CMake scripts / per-lib main header/cpp to convert them to plugins WITHOUT moving the actual source files; 2. Document the proposed new directory hierarchy, propose it and wait for feedback from enough community members; 3. Once there is an agreement on the hierarchy, apply it via a commit that does not change anything else (changes in cmake scripts should be done as a separate commit, to ease solving later merge/conflict issues). And regarding point 2, instead of moving everything in `applications/plugins` that is only there because of a bad decision 10 years ago (it was simpler as we had to release the main directories as separate archives for licensing reason so we packed the couple of plugins we had together with the executables), I would propose to use the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an al",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:1985,Usability,simpl,simpler,1985,"d by this massive move? I would like to know because that's the number-one time-waster on our end for merges/history tracking). So I would like to know if those considerations were understood before doing this once again ?. And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :. 1. First only change the CMake scripts / per-lib main header/cpp to convert them to plugins WITHOUT moving the actual source files; 2. Document the proposed new directory hierarchy, propose it and wait for feedback from enough community members; 3. Once there is an agreement on the hierarchy, apply it via a commit that does not change anything else (changes in cmake scripts should be done as a separate commit, to ease solving later merge/conflict issues). And regarding point 2, instead of moving everything in `applications/plugins` that is only there because of a bad decision 10 years ago (it was simpler as we had to release the main directories as separate archives for licensing reason so we packed the couple of plugins we had together with the executables), I would propose to use the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/issues/482:3061,Usability,clear,clear,3061,"e the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same directory; 3. clear separation of the different licences, so that we can be sure that a LGPL-only app does not actually include GPL-licenced headers (because of the useful convention to include plugins/lib classes with `MyPlugin/MyClass.h`, all codes must be compiled with options to add to the compiler path the parent of a plugin directory, currently because it is the same parent as plugins with different licences it is difficult to be sure unwanted code is not included); 4. it fits with the way of organizing all codes around collections of libraries, which was the original intent behind Helper/Core/DefaultType within SofaFramework, Simulation* within SofaSimulation, Base* within SofaBase, ..., but which unfortunately was not agreed to with everyone so stuck in years-long discussions and is now broken by adding a ""SofaKernel"" level. As a reminder of the key points of this way of organizing codes, the idea was to make it consistent where the code/targets are found (always within a sub-subdirectory) while allowing to share common scripts/docs/packaging/... at the ""collection"" level instead of copy/pasted withi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482
https://github.com/sofa-framework/sofa/pull/483:7,Availability,error,error,7,Fixes `error: chosen constructor is explicit in copy-initialization`; see https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options/6311/console. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/483
https://github.com/sofa-framework/sofa/pull/483:398,Availability,failure,failures,398,Fixes `error: chosen constructor is explicit in copy-initialization`; see https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options/6311/console. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/483
https://github.com/sofa-framework/sofa/pull/483:448,Availability,failure,failures,448,Fixes `error: chosen constructor is explicit in copy-initialization`; see https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options/6311/console. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/483
https://github.com/sofa-framework/sofa/pull/483:241,Integrability,message,message,241,Fixes `error: chosen constructor is explicit in copy-initialization`; see https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options/6311/console. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/483
https://github.com/sofa-framework/sofa/pull/483:393,Testability,test,test,393,Fixes `error: chosen constructor is explicit in copy-initialization`; see https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options/6311/console. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/483
https://github.com/sofa-framework/sofa/pull/483:443,Testability,test,test,443,Fixes `error: chosen constructor is explicit in copy-initialization`; see https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options/6311/console. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/483
https://github.com/sofa-framework/sofa/pull/484:2614,Availability,failure,failures,2614," the same factors for the compliance matrix computation and the correction computation as the one used in LinearSolverConstraintCorrection. ### Cleans; - Clean and Optimize UncoupledConstraintCorrection, factorize code between rigids and vecs, optimize addComplianceInConstraintSpace significantly for large number of constraints.; - Move new constraint accumulation visitors from GenericConstraintSolver.h to MechanicalVisitor.h so that they can be used by other solvers.; - Code refactoring in GenericConstraintCorrection. ### Bugfixes; - Fix FreeMotionAnimationLoop allocates the freeposition / freevelocity as first thing in the time step.; - Fix Haptic mode with haptic influence from constraints applied on all frames. It was not working well on the simulation side.; - Add a correction velocity factor and correction position factor as data in UncoupledConstraintCorrection.; - Fix, the GenericConstraintSolver was not providing the correct number of interations for profiler stats.; - GenericConstraintCorrection's ODESolver is now searched locally.; - Fix the Local Jacobian Matrix. It was not resized when no more constraints were applied on a MechanicalState.; - UncoupledConstraintCorrection for rigid is now in a 7 value vector. When using the default initialization of the compliance using the mass matrix of the rigid the linear part of the compliance was added twice. ### Moved files; - Move contact identifier code in a separate file to avoid inelegant FrictionContact.h inclusion in each contact class file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484
https://github.com/sofa-framework/sofa/pull/484:2664,Availability,failure,failures,2664," the same factors for the compliance matrix computation and the correction computation as the one used in LinearSolverConstraintCorrection. ### Cleans; - Clean and Optimize UncoupledConstraintCorrection, factorize code between rigids and vecs, optimize addComplianceInConstraintSpace significantly for large number of constraints.; - Move new constraint accumulation visitors from GenericConstraintSolver.h to MechanicalVisitor.h so that they can be used by other solvers.; - Code refactoring in GenericConstraintCorrection. ### Bugfixes; - Fix FreeMotionAnimationLoop allocates the freeposition / freevelocity as first thing in the time step.; - Fix Haptic mode with haptic influence from constraints applied on all frames. It was not working well on the simulation side.; - Add a correction velocity factor and correction position factor as data in UncoupledConstraintCorrection.; - Fix, the GenericConstraintSolver was not providing the correct number of interations for profiler stats.; - GenericConstraintCorrection's ODESolver is now searched locally.; - Fix the Local Jacobian Matrix. It was not resized when no more constraints were applied on a MechanicalState.; - UncoupledConstraintCorrection for rigid is now in a 7 value vector. When using the default initialization of the compliance using the mass matrix of the rigid the linear part of the compliance was added twice. ### Moved files; - Move contact identifier code in a separate file to avoid inelegant FrictionContact.h inclusion in each contact class file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484
https://github.com/sofa-framework/sofa/pull/484:1401,Energy Efficiency,allocate,allocates,1401,"tended to be safer (but not yet completely safe) when using multiple forcefeedback devices.; - GenericConstraintCorrection: automatically search LinearSolver from context when solverName is not specified (same behavior as LinearSolverConstraintCorrection).; - Factorize the computation of the compliance matrix and virtualize the computation of dx.; - Improve UncoupledConstraintCorrection compliance computation. Use the same factors for the compliance matrix computation and the correction computation as the one used in LinearSolverConstraintCorrection. ### Cleans; - Clean and Optimize UncoupledConstraintCorrection, factorize code between rigids and vecs, optimize addComplianceInConstraintSpace significantly for large number of constraints.; - Move new constraint accumulation visitors from GenericConstraintSolver.h to MechanicalVisitor.h so that they can be used by other solvers.; - Code refactoring in GenericConstraintCorrection. ### Bugfixes; - Fix FreeMotionAnimationLoop allocates the freeposition / freevelocity as first thing in the time step.; - Fix Haptic mode with haptic influence from constraints applied on all frames. It was not working well on the simulation side.; - Add a correction velocity factor and correction position factor as data in UncoupledConstraintCorrection.; - Fix, the GenericConstraintSolver was not providing the correct number of interations for profiler stats.; - GenericConstraintCorrection's ODESolver is now searched locally.; - Fix the Local Jacobian Matrix. It was not resized when no more constraints were applied on a MechanicalState.; - UncoupledConstraintCorrection for rigid is now in a 7 value vector. When using the default initialization of the compliance using the mass matrix of the rigid the linear part of the compliance was added twice. ### Moved files; - Move contact identifier code in a separate file to avoid inelegant FrictionContact.h inclusion in each contact class file. ______________________________________________________; <!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484
https://github.com/sofa-framework/sofa/pull/484:2457,Integrability,message,message,2457," the same factors for the compliance matrix computation and the correction computation as the one used in LinearSolverConstraintCorrection. ### Cleans; - Clean and Optimize UncoupledConstraintCorrection, factorize code between rigids and vecs, optimize addComplianceInConstraintSpace significantly for large number of constraints.; - Move new constraint accumulation visitors from GenericConstraintSolver.h to MechanicalVisitor.h so that they can be used by other solvers.; - Code refactoring in GenericConstraintCorrection. ### Bugfixes; - Fix FreeMotionAnimationLoop allocates the freeposition / freevelocity as first thing in the time step.; - Fix Haptic mode with haptic influence from constraints applied on all frames. It was not working well on the simulation side.; - Add a correction velocity factor and correction position factor as data in UncoupledConstraintCorrection.; - Fix, the GenericConstraintSolver was not providing the correct number of interations for profiler stats.; - GenericConstraintCorrection's ODESolver is now searched locally.; - Fix the Local Jacobian Matrix. It was not resized when no more constraints were applied on a MechanicalState.; - UncoupledConstraintCorrection for rigid is now in a 7 value vector. When using the default initialization of the compliance using the mass matrix of the rigid the linear part of the compliance was added twice. ### Moved files; - Move contact identifier code in a separate file to avoid inelegant FrictionContact.h inclusion in each contact class file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484
https://github.com/sofa-framework/sofa/pull/484:413,Modifiability,extend,extended,413,"Needed by #459 ; @fjourdes I let you add informations in the comments 😉 . ## issofa_constraintsolving. ### New features; - Add correctionVelocityFactor and correctionPositionFactor Data in UncoupledConstraintCorrection to experiment with modulating the constraint response influence on visual tool positions.; - Add more detail in timing of GenericConstraintSolver. ### Improvements; - Constraint problem locking extended to be safer (but not yet completely safe) when using multiple forcefeedback devices.; - GenericConstraintCorrection: automatically search LinearSolver from context when solverName is not specified (same behavior as LinearSolverConstraintCorrection).; - Factorize the computation of the compliance matrix and virtualize the computation of dx.; - Improve UncoupledConstraintCorrection compliance computation. Use the same factors for the compliance matrix computation and the correction computation as the one used in LinearSolverConstraintCorrection. ### Cleans; - Clean and Optimize UncoupledConstraintCorrection, factorize code between rigids and vecs, optimize addComplianceInConstraintSpace significantly for large number of constraints.; - Move new constraint accumulation visitors from GenericConstraintSolver.h to MechanicalVisitor.h so that they can be used by other solvers.; - Code refactoring in GenericConstraintCorrection. ### Bugfixes; - Fix FreeMotionAnimationLoop allocates the freeposition / freevelocity as first thing in the time step.; - Fix Haptic mode with haptic influence from constraints applied on all frames. It was not working well on the simulation side.; - Add a correction velocity factor and correction position factor as data in UncoupledConstraintCorrection.; - Fix, the GenericConstraintSolver was not providing the correct number of interations for profiler stats.; - GenericConstraintCorrection's ODESolver is now searched locally.; - Fix the Local Jacobian Matrix. It was not resized when no more constraints were applied on a MechanicalState",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484
https://github.com/sofa-framework/sofa/pull/484:1313,Modifiability,refactor,refactoring,1313," timing of GenericConstraintSolver. ### Improvements; - Constraint problem locking extended to be safer (but not yet completely safe) when using multiple forcefeedback devices.; - GenericConstraintCorrection: automatically search LinearSolver from context when solverName is not specified (same behavior as LinearSolverConstraintCorrection).; - Factorize the computation of the compliance matrix and virtualize the computation of dx.; - Improve UncoupledConstraintCorrection compliance computation. Use the same factors for the compliance matrix computation and the correction computation as the one used in LinearSolverConstraintCorrection. ### Cleans; - Clean and Optimize UncoupledConstraintCorrection, factorize code between rigids and vecs, optimize addComplianceInConstraintSpace significantly for large number of constraints.; - Move new constraint accumulation visitors from GenericConstraintSolver.h to MechanicalVisitor.h so that they can be used by other solvers.; - Code refactoring in GenericConstraintCorrection. ### Bugfixes; - Fix FreeMotionAnimationLoop allocates the freeposition / freevelocity as first thing in the time step.; - Fix Haptic mode with haptic influence from constraints applied on all frames. It was not working well on the simulation side.; - Add a correction velocity factor and correction position factor as data in UncoupledConstraintCorrection.; - Fix, the GenericConstraintSolver was not providing the correct number of interations for profiler stats.; - GenericConstraintCorrection's ODESolver is now searched locally.; - Fix the Local Jacobian Matrix. It was not resized when no more constraints were applied on a MechanicalState.; - UncoupledConstraintCorrection for rigid is now in a 7 value vector. When using the default initialization of the compliance using the mass matrix of the rigid the linear part of the compliance was added twice. ### Moved files; - Move contact identifier code in a separate file to avoid inelegant FrictionContact.h inclusion ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484
https://github.com/sofa-framework/sofa/pull/484:996,Performance,Optimiz,Optimize,996,"nts 😉 . ## issofa_constraintsolving. ### New features; - Add correctionVelocityFactor and correctionPositionFactor Data in UncoupledConstraintCorrection to experiment with modulating the constraint response influence on visual tool positions.; - Add more detail in timing of GenericConstraintSolver. ### Improvements; - Constraint problem locking extended to be safer (but not yet completely safe) when using multiple forcefeedback devices.; - GenericConstraintCorrection: automatically search LinearSolver from context when solverName is not specified (same behavior as LinearSolverConstraintCorrection).; - Factorize the computation of the compliance matrix and virtualize the computation of dx.; - Improve UncoupledConstraintCorrection compliance computation. Use the same factors for the compliance matrix computation and the correction computation as the one used in LinearSolverConstraintCorrection. ### Cleans; - Clean and Optimize UncoupledConstraintCorrection, factorize code between rigids and vecs, optimize addComplianceInConstraintSpace significantly for large number of constraints.; - Move new constraint accumulation visitors from GenericConstraintSolver.h to MechanicalVisitor.h so that they can be used by other solvers.; - Code refactoring in GenericConstraintCorrection. ### Bugfixes; - Fix FreeMotionAnimationLoop allocates the freeposition / freevelocity as first thing in the time step.; - Fix Haptic mode with haptic influence from constraints applied on all frames. It was not working well on the simulation side.; - Add a correction velocity factor and correction position factor as data in UncoupledConstraintCorrection.; - Fix, the GenericConstraintSolver was not providing the correct number of interations for profiler stats.; - GenericConstraintCorrection's ODESolver is now searched locally.; - Fix the Local Jacobian Matrix. It was not resized when no more constraints were applied on a MechanicalState.; - UncoupledConstraintCorrection for rigid is now in a 7 value v",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484
https://github.com/sofa-framework/sofa/pull/484:1076,Performance,optimiz,optimize,1076,"nts 😉 . ## issofa_constraintsolving. ### New features; - Add correctionVelocityFactor and correctionPositionFactor Data in UncoupledConstraintCorrection to experiment with modulating the constraint response influence on visual tool positions.; - Add more detail in timing of GenericConstraintSolver. ### Improvements; - Constraint problem locking extended to be safer (but not yet completely safe) when using multiple forcefeedback devices.; - GenericConstraintCorrection: automatically search LinearSolver from context when solverName is not specified (same behavior as LinearSolverConstraintCorrection).; - Factorize the computation of the compliance matrix and virtualize the computation of dx.; - Improve UncoupledConstraintCorrection compliance computation. Use the same factors for the compliance matrix computation and the correction computation as the one used in LinearSolverConstraintCorrection. ### Cleans; - Clean and Optimize UncoupledConstraintCorrection, factorize code between rigids and vecs, optimize addComplianceInConstraintSpace significantly for large number of constraints.; - Move new constraint accumulation visitors from GenericConstraintSolver.h to MechanicalVisitor.h so that they can be used by other solvers.; - Code refactoring in GenericConstraintCorrection. ### Bugfixes; - Fix FreeMotionAnimationLoop allocates the freeposition / freevelocity as first thing in the time step.; - Fix Haptic mode with haptic influence from constraints applied on all frames. It was not working well on the simulation side.; - Add a correction velocity factor and correction position factor as data in UncoupledConstraintCorrection.; - Fix, the GenericConstraintSolver was not providing the correct number of interations for profiler stats.; - GenericConstraintCorrection's ODESolver is now searched locally.; - Fix the Local Jacobian Matrix. It was not resized when no more constraints were applied on a MechanicalState.; - UncoupledConstraintCorrection for rigid is now in a 7 value v",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484
https://github.com/sofa-framework/sofa/pull/484:428,Safety,safe,safer,428,"Needed by #459 ; @fjourdes I let you add informations in the comments 😉 . ## issofa_constraintsolving. ### New features; - Add correctionVelocityFactor and correctionPositionFactor Data in UncoupledConstraintCorrection to experiment with modulating the constraint response influence on visual tool positions.; - Add more detail in timing of GenericConstraintSolver. ### Improvements; - Constraint problem locking extended to be safer (but not yet completely safe) when using multiple forcefeedback devices.; - GenericConstraintCorrection: automatically search LinearSolver from context when solverName is not specified (same behavior as LinearSolverConstraintCorrection).; - Factorize the computation of the compliance matrix and virtualize the computation of dx.; - Improve UncoupledConstraintCorrection compliance computation. Use the same factors for the compliance matrix computation and the correction computation as the one used in LinearSolverConstraintCorrection. ### Cleans; - Clean and Optimize UncoupledConstraintCorrection, factorize code between rigids and vecs, optimize addComplianceInConstraintSpace significantly for large number of constraints.; - Move new constraint accumulation visitors from GenericConstraintSolver.h to MechanicalVisitor.h so that they can be used by other solvers.; - Code refactoring in GenericConstraintCorrection. ### Bugfixes; - Fix FreeMotionAnimationLoop allocates the freeposition / freevelocity as first thing in the time step.; - Fix Haptic mode with haptic influence from constraints applied on all frames. It was not working well on the simulation side.; - Add a correction velocity factor and correction position factor as data in UncoupledConstraintCorrection.; - Fix, the GenericConstraintSolver was not providing the correct number of interations for profiler stats.; - GenericConstraintCorrection's ODESolver is now searched locally.; - Fix the Local Jacobian Matrix. It was not resized when no more constraints were applied on a MechanicalState",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484
https://github.com/sofa-framework/sofa/pull/484:458,Safety,safe,safe,458,"Needed by #459 ; @fjourdes I let you add informations in the comments 😉 . ## issofa_constraintsolving. ### New features; - Add correctionVelocityFactor and correctionPositionFactor Data in UncoupledConstraintCorrection to experiment with modulating the constraint response influence on visual tool positions.; - Add more detail in timing of GenericConstraintSolver. ### Improvements; - Constraint problem locking extended to be safer (but not yet completely safe) when using multiple forcefeedback devices.; - GenericConstraintCorrection: automatically search LinearSolver from context when solverName is not specified (same behavior as LinearSolverConstraintCorrection).; - Factorize the computation of the compliance matrix and virtualize the computation of dx.; - Improve UncoupledConstraintCorrection compliance computation. Use the same factors for the compliance matrix computation and the correction computation as the one used in LinearSolverConstraintCorrection. ### Cleans; - Clean and Optimize UncoupledConstraintCorrection, factorize code between rigids and vecs, optimize addComplianceInConstraintSpace significantly for large number of constraints.; - Move new constraint accumulation visitors from GenericConstraintSolver.h to MechanicalVisitor.h so that they can be used by other solvers.; - Code refactoring in GenericConstraintCorrection. ### Bugfixes; - Fix FreeMotionAnimationLoop allocates the freeposition / freevelocity as first thing in the time step.; - Fix Haptic mode with haptic influence from constraints applied on all frames. It was not working well on the simulation side.; - Add a correction velocity factor and correction position factor as data in UncoupledConstraintCorrection.; - Fix, the GenericConstraintSolver was not providing the correct number of interations for profiler stats.; - GenericConstraintCorrection's ODESolver is now searched locally.; - Fix the Local Jacobian Matrix. It was not resized when no more constraints were applied on a MechanicalState",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484
https://github.com/sofa-framework/sofa/pull/484:2286,Safety,avoid,avoid,2286," the same factors for the compliance matrix computation and the correction computation as the one used in LinearSolverConstraintCorrection. ### Cleans; - Clean and Optimize UncoupledConstraintCorrection, factorize code between rigids and vecs, optimize addComplianceInConstraintSpace significantly for large number of constraints.; - Move new constraint accumulation visitors from GenericConstraintSolver.h to MechanicalVisitor.h so that they can be used by other solvers.; - Code refactoring in GenericConstraintCorrection. ### Bugfixes; - Fix FreeMotionAnimationLoop allocates the freeposition / freevelocity as first thing in the time step.; - Fix Haptic mode with haptic influence from constraints applied on all frames. It was not working well on the simulation side.; - Add a correction velocity factor and correction position factor as data in UncoupledConstraintCorrection.; - Fix, the GenericConstraintSolver was not providing the correct number of interations for profiler stats.; - GenericConstraintCorrection's ODESolver is now searched locally.; - Fix the Local Jacobian Matrix. It was not resized when no more constraints were applied on a MechanicalState.; - UncoupledConstraintCorrection for rigid is now in a 7 value vector. When using the default initialization of the compliance using the mass matrix of the rigid the linear part of the compliance was added twice. ### Moved files; - Move contact identifier code in a separate file to avoid inelegant FrictionContact.h inclusion in each contact class file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484
https://github.com/sofa-framework/sofa/pull/484:2609,Testability,test,test,2609," the same factors for the compliance matrix computation and the correction computation as the one used in LinearSolverConstraintCorrection. ### Cleans; - Clean and Optimize UncoupledConstraintCorrection, factorize code between rigids and vecs, optimize addComplianceInConstraintSpace significantly for large number of constraints.; - Move new constraint accumulation visitors from GenericConstraintSolver.h to MechanicalVisitor.h so that they can be used by other solvers.; - Code refactoring in GenericConstraintCorrection. ### Bugfixes; - Fix FreeMotionAnimationLoop allocates the freeposition / freevelocity as first thing in the time step.; - Fix Haptic mode with haptic influence from constraints applied on all frames. It was not working well on the simulation side.; - Add a correction velocity factor and correction position factor as data in UncoupledConstraintCorrection.; - Fix, the GenericConstraintSolver was not providing the correct number of interations for profiler stats.; - GenericConstraintCorrection's ODESolver is now searched locally.; - Fix the Local Jacobian Matrix. It was not resized when no more constraints were applied on a MechanicalState.; - UncoupledConstraintCorrection for rigid is now in a 7 value vector. When using the default initialization of the compliance using the mass matrix of the rigid the linear part of the compliance was added twice. ### Moved files; - Move contact identifier code in a separate file to avoid inelegant FrictionContact.h inclusion in each contact class file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484
https://github.com/sofa-framework/sofa/pull/484:2659,Testability,test,test,2659," the same factors for the compliance matrix computation and the correction computation as the one used in LinearSolverConstraintCorrection. ### Cleans; - Clean and Optimize UncoupledConstraintCorrection, factorize code between rigids and vecs, optimize addComplianceInConstraintSpace significantly for large number of constraints.; - Move new constraint accumulation visitors from GenericConstraintSolver.h to MechanicalVisitor.h so that they can be used by other solvers.; - Code refactoring in GenericConstraintCorrection. ### Bugfixes; - Fix FreeMotionAnimationLoop allocates the freeposition / freevelocity as first thing in the time step.; - Fix Haptic mode with haptic influence from constraints applied on all frames. It was not working well on the simulation side.; - Add a correction velocity factor and correction position factor as data in UncoupledConstraintCorrection.; - Fix, the GenericConstraintSolver was not providing the correct number of interations for profiler stats.; - GenericConstraintCorrection's ODESolver is now searched locally.; - Fix the Local Jacobian Matrix. It was not resized when no more constraints were applied on a MechanicalState.; - UncoupledConstraintCorrection for rigid is now in a 7 value vector. When using the default initialization of the compliance using the mass matrix of the rigid the linear part of the compliance was added twice. ### Moved files; - Move contact identifier code in a separate file to avoid inelegant FrictionContact.h inclusion in each contact class file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484
https://github.com/sofa-framework/sofa/pull/485:310,Availability,failure,failures,310,Remove new warning in MapMapSparseMatrixEigenUtils.h. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/485
https://github.com/sofa-framework/sofa/pull/485:360,Availability,failure,failures,360,Remove new warning in MapMapSparseMatrixEigenUtils.h. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/485
https://github.com/sofa-framework/sofa/pull/485:153,Integrability,message,message,153,Remove new warning in MapMapSparseMatrixEigenUtils.h. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/485
https://github.com/sofa-framework/sofa/pull/485:305,Testability,test,test,305,Remove new warning in MapMapSparseMatrixEigenUtils.h. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/485
https://github.com/sofa-framework/sofa/pull/485:355,Testability,test,test,355,Remove new warning in MapMapSparseMatrixEigenUtils.h. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/485
https://github.com/sofa-framework/sofa/pull/486:281,Availability,failure,failures,281,One more plugin in Sofa. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/486
https://github.com/sofa-framework/sofa/pull/486:331,Availability,failure,failures,331,One more plugin in Sofa. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/486
https://github.com/sofa-framework/sofa/pull/486:124,Integrability,message,message,124,One more plugin in Sofa. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/486
https://github.com/sofa-framework/sofa/pull/486:9,Modifiability,plugin,plugin,9,One more plugin in Sofa. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/486
https://github.com/sofa-framework/sofa/pull/486:276,Testability,test,test,276,One more plugin in Sofa. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/486
https://github.com/sofa-framework/sofa/pull/486:326,Testability,test,test,326,One more plugin in Sofa. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/486
https://github.com/sofa-framework/sofa/pull/487:1674,Availability,failure,failures,1674,"u can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some ini",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:3632,Availability,failure,failures,3632,"ected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:3682,Availability,failure,failures,3682,"ected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:2623,Integrability,depend,depends,2623,"ck wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:2909,Integrability,depend,dependency,2909,"ck wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:3475,Integrability,message,message,3475,"ected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:146,Modifiability,plugin,plugin,146,"I don't believe there was a pull request already attached to issofa_plugins branch ? My apologies if that ; was the case. . # Purpose; Some basic plugin functionalities were silently changed for no good reasons other the past years, namely; - SOFA_LIBSUFFIX which should be set as ""_d"" during a debug build is broken under msvc since c89da68 which as the commit name says is indeed monstruous. It was ""fixed"" later by adding directly inside the PluginManager code a condition to add the ""_d"" suffix by checking the compiler. ; - The default behavior of the global `PluginRepository`, was changed by c5a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ;",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:445,Modifiability,Plugin,PluginManager,445,"I don't believe there was a pull request already attached to issofa_plugins branch ? My apologies if that ; was the case. . # Purpose; Some basic plugin functionalities were silently changed for no good reasons other the past years, namely; - SOFA_LIBSUFFIX which should be set as ""_d"" during a debug build is broken under msvc since c89da68 which as the commit name says is indeed monstruous. It was ""fixed"" later by adding directly inside the PluginManager code a condition to add the ""_d"" suffix by checking the compiler. ; - The default behavior of the global `PluginRepository`, was changed by c5a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ;",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:565,Modifiability,Plugin,PluginRepository,565,"I don't believe there was a pull request already attached to issofa_plugins branch ? My apologies if that ; was the case. . # Purpose; Some basic plugin functionalities were silently changed for no good reasons other the past years, namely; - SOFA_LIBSUFFIX which should be set as ""_d"" during a debug build is broken under msvc since c89da68 which as the commit name says is indeed monstruous. It was ""fixed"" later by adding directly inside the PluginManager code a condition to add the ""_d"" suffix by checking the compiler. ; - The default behavior of the global `PluginRepository`, was changed by c5a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ;",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:1054,Modifiability,Plugin,PluginRepository,1054,"I don't believe there was a pull request already attached to issofa_plugins branch ? My apologies if that ; was the case. . # Purpose; Some basic plugin functionalities were silently changed for no good reasons other the past years, namely; - SOFA_LIBSUFFIX which should be set as ""_d"" during a debug build is broken under msvc since c89da68 which as the commit name says is indeed monstruous. It was ""fixed"" later by adding directly inside the PluginManager code a condition to add the ""_d"" suffix by checking the compiler. ; - The default behavior of the global `PluginRepository`, was changed by c5a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ;",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:1281,Modifiability,plugin,plugin,1281," reasons other the past years, namely; - SOFA_LIBSUFFIX which should be set as ""_d"" during a debug build is broken under msvc since c89da68 which as the commit name says is indeed monstruous. It was ""fixed"" later by adding directly inside the PluginManager code a condition to add the ""_d"" suffix by checking the compiler. ; - The default behavior of the global `PluginRepository`, was changed by c5a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:1395,Modifiability,Plugin,PluginRepository,1395,"uous. It was ""fixed"" later by adding directly inside the PluginManager code a condition to add the ""_d"" suffix by checking the compiler. ; - The default behavior of the global `PluginRepository`, was changed by c5a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder h",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:1496,Modifiability,Plugin,PluginManager,1496,"piler. ; - The default behavior of the global `PluginRepository`, was changed by c5a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:1610,Modifiability,plugin,plugin,1610,"a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead h",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:1771,Modifiability,plugin,plugin,1771,"cts when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:1816,Modifiability,plugin,pluginIsLoaded,1816,"cts when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:2046,Modifiability,extend,extend,2046," by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ;",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:2057,Modifiability,plugin,plugin,2057," by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ;",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:2193,Modifiability,plugin,plugins,2193,"uffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I t",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:2209,Modifiability,Plugin,PluginManager,2209,"uffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I t",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:693,Performance,load,load,693,"I don't believe there was a pull request already attached to issofa_plugins branch ? My apologies if that ; was the case. . # Purpose; Some basic plugin functionalities were silently changed for no good reasons other the past years, namely; - SOFA_LIBSUFFIX which should be set as ""_d"" during a debug build is broken under msvc since c89da68 which as the commit name says is indeed monstruous. It was ""fixed"" later by adding directly inside the PluginManager code a condition to add the ""_d"" suffix by checking the compiler. ; - The default behavior of the global `PluginRepository`, was changed by c5a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ;",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:1274,Performance,load,load,1274," reasons other the past years, namely; - SOFA_LIBSUFFIX which should be set as ""_d"" during a debug build is broken under msvc since c89da68 which as the commit name says is indeed monstruous. It was ""fixed"" later by adding directly inside the PluginManager code a condition to add the ""_d"" suffix by checking the compiler. ; - The default behavior of the global `PluginRepository`, was changed by c5a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:1548,Performance,load,loadPlugin,1548,"piler. ; - The default behavior of the global `PluginRepository`, was changed by c5a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:1628,Performance,load,loaded,1628,"a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead h",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:1719,Performance,load,loaded,1719,"u can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some ini",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:1789,Performance,load,loaded,1789,"cts when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:832,Testability,test,test,832,"I don't believe there was a pull request already attached to issofa_plugins branch ? My apologies if that ; was the case. . # Purpose; Some basic plugin functionalities were silently changed for no good reasons other the past years, namely; - SOFA_LIBSUFFIX which should be set as ""_d"" during a debug build is broken under msvc since c89da68 which as the commit name says is indeed monstruous. It was ""fixed"" later by adding directly inside the PluginManager code a condition to add the ""_d"" suffix by checking the compiler. ; - The default behavior of the global `PluginRepository`, was changed by c5a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ;",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:950,Testability,test,tests,950,"I don't believe there was a pull request already attached to issofa_plugins branch ? My apologies if that ; was the case. . # Purpose; Some basic plugin functionalities were silently changed for no good reasons other the past years, namely; - SOFA_LIBSUFFIX which should be set as ""_d"" during a debug build is broken under msvc since c89da68 which as the commit name says is indeed monstruous. It was ""fixed"" later by adding directly inside the PluginManager code a condition to add the ""_d"" suffix by checking the compiler. ; - The default behavior of the global `PluginRepository`, was changed by c5a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ;",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:2485,Testability,test,test,2485,"ctory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the e",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:2740,Testability,test,test,2740,"ck wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:2815,Testability,test,test,2815,"ck wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:3305,Testability,test,testing,3305,"ected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:3627,Testability,test,test,3627,"ected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/487:3677,Testability,test,test,3677,"ected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487
https://github.com/sofa-framework/sofa/pull/488:54,Availability,error,error,54,"# Purpose; For some reason, I stumbled upon a strange error where `EulerImplicitSolver` is no longer registered in the factory. It turns out that some `init...()` methods call are missing in `SofaComponentCommon`; Maybe this error arised on master because some includes directive have been cleaned, or some ; dependencies have been removed which were hiding this problem before. . # CHANGELOG; FIX; [SofaComponentCommon]; - Make sure `initComponentCommon()` method calls the init method of all the libraries that compose the package so that we are sure the `ObjectFactory` is well populated. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/488
https://github.com/sofa-framework/sofa/pull/488:225,Availability,error,error,225,"# Purpose; For some reason, I stumbled upon a strange error where `EulerImplicitSolver` is no longer registered in the factory. It turns out that some `init...()` methods call are missing in `SofaComponentCommon`; Maybe this error arised on master because some includes directive have been cleaned, or some ; dependencies have been removed which were hiding this problem before. . # CHANGELOG; FIX; [SofaComponentCommon]; - Make sure `initComponentCommon()` method calls the init method of all the libraries that compose the package so that we are sure the `ObjectFactory` is well populated. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/488
https://github.com/sofa-framework/sofa/pull/488:850,Availability,failure,failures,850,"# Purpose; For some reason, I stumbled upon a strange error where `EulerImplicitSolver` is no longer registered in the factory. It turns out that some `init...()` methods call are missing in `SofaComponentCommon`; Maybe this error arised on master because some includes directive have been cleaned, or some ; dependencies have been removed which were hiding this problem before. . # CHANGELOG; FIX; [SofaComponentCommon]; - Make sure `initComponentCommon()` method calls the init method of all the libraries that compose the package so that we are sure the `ObjectFactory` is well populated. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/488
https://github.com/sofa-framework/sofa/pull/488:900,Availability,failure,failures,900,"# Purpose; For some reason, I stumbled upon a strange error where `EulerImplicitSolver` is no longer registered in the factory. It turns out that some `init...()` methods call are missing in `SofaComponentCommon`; Maybe this error arised on master because some includes directive have been cleaned, or some ; dependencies have been removed which were hiding this problem before. . # CHANGELOG; FIX; [SofaComponentCommon]; - Make sure `initComponentCommon()` method calls the init method of all the libraries that compose the package so that we are sure the `ObjectFactory` is well populated. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/488
https://github.com/sofa-framework/sofa/pull/488:309,Integrability,depend,dependencies,309,"# Purpose; For some reason, I stumbled upon a strange error where `EulerImplicitSolver` is no longer registered in the factory. It turns out that some `init...()` methods call are missing in `SofaComponentCommon`; Maybe this error arised on master because some includes directive have been cleaned, or some ; dependencies have been removed which were hiding this problem before. . # CHANGELOG; FIX; [SofaComponentCommon]; - Make sure `initComponentCommon()` method calls the init method of all the libraries that compose the package so that we are sure the `ObjectFactory` is well populated. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/488
https://github.com/sofa-framework/sofa/pull/488:693,Integrability,message,message,693,"# Purpose; For some reason, I stumbled upon a strange error where `EulerImplicitSolver` is no longer registered in the factory. It turns out that some `init...()` methods call are missing in `SofaComponentCommon`; Maybe this error arised on master because some includes directive have been cleaned, or some ; dependencies have been removed which were hiding this problem before. . # CHANGELOG; FIX; [SofaComponentCommon]; - Make sure `initComponentCommon()` method calls the init method of all the libraries that compose the package so that we are sure the `ObjectFactory` is well populated. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/488
https://github.com/sofa-framework/sofa/pull/488:845,Testability,test,test,845,"# Purpose; For some reason, I stumbled upon a strange error where `EulerImplicitSolver` is no longer registered in the factory. It turns out that some `init...()` methods call are missing in `SofaComponentCommon`; Maybe this error arised on master because some includes directive have been cleaned, or some ; dependencies have been removed which were hiding this problem before. . # CHANGELOG; FIX; [SofaComponentCommon]; - Make sure `initComponentCommon()` method calls the init method of all the libraries that compose the package so that we are sure the `ObjectFactory` is well populated. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/488
https://github.com/sofa-framework/sofa/pull/488:895,Testability,test,test,895,"# Purpose; For some reason, I stumbled upon a strange error where `EulerImplicitSolver` is no longer registered in the factory. It turns out that some `init...()` methods call are missing in `SofaComponentCommon`; Maybe this error arised on master because some includes directive have been cleaned, or some ; dependencies have been removed which were hiding this problem before. . # CHANGELOG; FIX; [SofaComponentCommon]; - Make sure `initComponentCommon()` method calls the init method of all the libraries that compose the package so that we are sure the `ObjectFactory` is well populated. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/488
https://github.com/sofa-framework/sofa/issues/489:119,Testability,test,tests,119,"On top of the many things that c89da68 does (wrong), see PR #487 for a glimpse, I noticed that the ; inclusion of unit tests executable related to a given library have been extracted outside from the CMakeLists.txt of the very library it is supposed to test. . What I initially did was to have ; ```; # MyLibrary/CMakelists.txt. addLibrary( MyLibrary SHARED ${HEADER_FILES} ${SOURCE_FILES} ). if(TARGET gtest) ; # there is a gtest TARGET, so we are interested in having unit tests built for sure ! ; # since we do not reditribute unit tests, doing the find_package() thing is probably ; # overkill... If the main CMakelists.txt adds gtest to the build, then the gtest TARGET ; # will be defined; add_subdirectory(MyLibrary_test); endif(); ```. All the information related to the library is visible from the library `CMakelists.txt` and not hidden from the developer in some remote unrelated file, which also implies that you must include all the Sofa modules in your build.; What if I decide not to include the whole library set of Sofa and still get my precious unit tests executed ? ; Hint : I do not use the main `CMakelists.txt` provided in the master branch, and probably never will. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/489
https://github.com/sofa-framework/sofa/issues/489:253,Testability,test,test,253,"On top of the many things that c89da68 does (wrong), see PR #487 for a glimpse, I noticed that the ; inclusion of unit tests executable related to a given library have been extracted outside from the CMakeLists.txt of the very library it is supposed to test. . What I initially did was to have ; ```; # MyLibrary/CMakelists.txt. addLibrary( MyLibrary SHARED ${HEADER_FILES} ${SOURCE_FILES} ). if(TARGET gtest) ; # there is a gtest TARGET, so we are interested in having unit tests built for sure ! ; # since we do not reditribute unit tests, doing the find_package() thing is probably ; # overkill... If the main CMakelists.txt adds gtest to the build, then the gtest TARGET ; # will be defined; add_subdirectory(MyLibrary_test); endif(); ```. All the information related to the library is visible from the library `CMakelists.txt` and not hidden from the developer in some remote unrelated file, which also implies that you must include all the Sofa modules in your build.; What if I decide not to include the whole library set of Sofa and still get my precious unit tests executed ? ; Hint : I do not use the main `CMakelists.txt` provided in the master branch, and probably never will. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/489
https://github.com/sofa-framework/sofa/issues/489:475,Testability,test,tests,475,"On top of the many things that c89da68 does (wrong), see PR #487 for a glimpse, I noticed that the ; inclusion of unit tests executable related to a given library have been extracted outside from the CMakeLists.txt of the very library it is supposed to test. . What I initially did was to have ; ```; # MyLibrary/CMakelists.txt. addLibrary( MyLibrary SHARED ${HEADER_FILES} ${SOURCE_FILES} ). if(TARGET gtest) ; # there is a gtest TARGET, so we are interested in having unit tests built for sure ! ; # since we do not reditribute unit tests, doing the find_package() thing is probably ; # overkill... If the main CMakelists.txt adds gtest to the build, then the gtest TARGET ; # will be defined; add_subdirectory(MyLibrary_test); endif(); ```. All the information related to the library is visible from the library `CMakelists.txt` and not hidden from the developer in some remote unrelated file, which also implies that you must include all the Sofa modules in your build.; What if I decide not to include the whole library set of Sofa and still get my precious unit tests executed ? ; Hint : I do not use the main `CMakelists.txt` provided in the master branch, and probably never will. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/489
https://github.com/sofa-framework/sofa/issues/489:535,Testability,test,tests,535,"On top of the many things that c89da68 does (wrong), see PR #487 for a glimpse, I noticed that the ; inclusion of unit tests executable related to a given library have been extracted outside from the CMakeLists.txt of the very library it is supposed to test. . What I initially did was to have ; ```; # MyLibrary/CMakelists.txt. addLibrary( MyLibrary SHARED ${HEADER_FILES} ${SOURCE_FILES} ). if(TARGET gtest) ; # there is a gtest TARGET, so we are interested in having unit tests built for sure ! ; # since we do not reditribute unit tests, doing the find_package() thing is probably ; # overkill... If the main CMakelists.txt adds gtest to the build, then the gtest TARGET ; # will be defined; add_subdirectory(MyLibrary_test); endif(); ```. All the information related to the library is visible from the library `CMakelists.txt` and not hidden from the developer in some remote unrelated file, which also implies that you must include all the Sofa modules in your build.; What if I decide not to include the whole library set of Sofa and still get my precious unit tests executed ? ; Hint : I do not use the main `CMakelists.txt` provided in the master branch, and probably never will. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/489
https://github.com/sofa-framework/sofa/issues/489:1068,Testability,test,tests,1068,"On top of the many things that c89da68 does (wrong), see PR #487 for a glimpse, I noticed that the ; inclusion of unit tests executable related to a given library have been extracted outside from the CMakeLists.txt of the very library it is supposed to test. . What I initially did was to have ; ```; # MyLibrary/CMakelists.txt. addLibrary( MyLibrary SHARED ${HEADER_FILES} ${SOURCE_FILES} ). if(TARGET gtest) ; # there is a gtest TARGET, so we are interested in having unit tests built for sure ! ; # since we do not reditribute unit tests, doing the find_package() thing is probably ; # overkill... If the main CMakelists.txt adds gtest to the build, then the gtest TARGET ; # will be defined; add_subdirectory(MyLibrary_test); endif(); ```. All the information related to the library is visible from the library `CMakelists.txt` and not hidden from the developer in some remote unrelated file, which also implies that you must include all the Sofa modules in your build.; What if I decide not to include the whole library set of Sofa and still get my precious unit tests executed ? ; Hint : I do not use the main `CMakelists.txt` provided in the master branch, and probably never will. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/489
https://github.com/sofa-framework/sofa/issues/490:302,Modifiability,plugin,plugins,302,"This was introduced by e33ff21e75356e6967509cc0822d72c74f2d0247 ; So in order to have the ""_d"" debug postfix in your binary, you must use the `sofa_add_plugin` macro. ; I do not use this macro, and I did not mind its existence because I thought it was only related to have a pretty presentation of the plugins in the cmake-gui. https://github.com/fjourdes/sofa/blob/insimo_sofabuild/CMakeLists.txt is the main CMakelists.txt I use in my fork. Could be much simpler, because I started it by modifying the CMakeLists.txt fomr master, and also I really spent 5 minutes on it. The list of projects and plugin to build is simply passed through CMake cache variables. However now you are in the case where doing a ; `add_subdirectory(my_plugin_directory)` and ; `sofa_add_plugin(my_plugin_directory)` both works, and ends up giving different names for your binaries regarding of the config you use for building. . I do not mind strategies like https://github.com/fjourdes/sofa/blob/insimo_sofabuild/SofaKernel/SofaCommon/CMakeLists.txt for packages that are a composition of libraries - I think it is an improvement in this particular case - but for plugins that are a single library, all the necessary information should reside on their CMakeLists.txt. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/490
https://github.com/sofa-framework/sofa/issues/490:598,Modifiability,plugin,plugin,598,"This was introduced by e33ff21e75356e6967509cc0822d72c74f2d0247 ; So in order to have the ""_d"" debug postfix in your binary, you must use the `sofa_add_plugin` macro. ; I do not use this macro, and I did not mind its existence because I thought it was only related to have a pretty presentation of the plugins in the cmake-gui. https://github.com/fjourdes/sofa/blob/insimo_sofabuild/CMakeLists.txt is the main CMakelists.txt I use in my fork. Could be much simpler, because I started it by modifying the CMakeLists.txt fomr master, and also I really spent 5 minutes on it. The list of projects and plugin to build is simply passed through CMake cache variables. However now you are in the case where doing a ; `add_subdirectory(my_plugin_directory)` and ; `sofa_add_plugin(my_plugin_directory)` both works, and ends up giving different names for your binaries regarding of the config you use for building. . I do not mind strategies like https://github.com/fjourdes/sofa/blob/insimo_sofabuild/SofaKernel/SofaCommon/CMakeLists.txt for packages that are a composition of libraries - I think it is an improvement in this particular case - but for plugins that are a single library, all the necessary information should reside on their CMakeLists.txt. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/490
https://github.com/sofa-framework/sofa/issues/490:651,Modifiability,variab,variables,651,"This was introduced by e33ff21e75356e6967509cc0822d72c74f2d0247 ; So in order to have the ""_d"" debug postfix in your binary, you must use the `sofa_add_plugin` macro. ; I do not use this macro, and I did not mind its existence because I thought it was only related to have a pretty presentation of the plugins in the cmake-gui. https://github.com/fjourdes/sofa/blob/insimo_sofabuild/CMakeLists.txt is the main CMakelists.txt I use in my fork. Could be much simpler, because I started it by modifying the CMakeLists.txt fomr master, and also I really spent 5 minutes on it. The list of projects and plugin to build is simply passed through CMake cache variables. However now you are in the case where doing a ; `add_subdirectory(my_plugin_directory)` and ; `sofa_add_plugin(my_plugin_directory)` both works, and ends up giving different names for your binaries regarding of the config you use for building. . I do not mind strategies like https://github.com/fjourdes/sofa/blob/insimo_sofabuild/SofaKernel/SofaCommon/CMakeLists.txt for packages that are a composition of libraries - I think it is an improvement in this particular case - but for plugins that are a single library, all the necessary information should reside on their CMakeLists.txt. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/490
https://github.com/sofa-framework/sofa/issues/490:877,Modifiability,config,config,877,"This was introduced by e33ff21e75356e6967509cc0822d72c74f2d0247 ; So in order to have the ""_d"" debug postfix in your binary, you must use the `sofa_add_plugin` macro. ; I do not use this macro, and I did not mind its existence because I thought it was only related to have a pretty presentation of the plugins in the cmake-gui. https://github.com/fjourdes/sofa/blob/insimo_sofabuild/CMakeLists.txt is the main CMakelists.txt I use in my fork. Could be much simpler, because I started it by modifying the CMakeLists.txt fomr master, and also I really spent 5 minutes on it. The list of projects and plugin to build is simply passed through CMake cache variables. However now you are in the case where doing a ; `add_subdirectory(my_plugin_directory)` and ; `sofa_add_plugin(my_plugin_directory)` both works, and ends up giving different names for your binaries regarding of the config you use for building. . I do not mind strategies like https://github.com/fjourdes/sofa/blob/insimo_sofabuild/SofaKernel/SofaCommon/CMakeLists.txt for packages that are a composition of libraries - I think it is an improvement in this particular case - but for plugins that are a single library, all the necessary information should reside on their CMakeLists.txt. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/490
https://github.com/sofa-framework/sofa/issues/490:1144,Modifiability,plugin,plugins,1144,"This was introduced by e33ff21e75356e6967509cc0822d72c74f2d0247 ; So in order to have the ""_d"" debug postfix in your binary, you must use the `sofa_add_plugin` macro. ; I do not use this macro, and I did not mind its existence because I thought it was only related to have a pretty presentation of the plugins in the cmake-gui. https://github.com/fjourdes/sofa/blob/insimo_sofabuild/CMakeLists.txt is the main CMakelists.txt I use in my fork. Could be much simpler, because I started it by modifying the CMakeLists.txt fomr master, and also I really spent 5 minutes on it. The list of projects and plugin to build is simply passed through CMake cache variables. However now you are in the case where doing a ; `add_subdirectory(my_plugin_directory)` and ; `sofa_add_plugin(my_plugin_directory)` both works, and ends up giving different names for your binaries regarding of the config you use for building. . I do not mind strategies like https://github.com/fjourdes/sofa/blob/insimo_sofabuild/SofaKernel/SofaCommon/CMakeLists.txt for packages that are a composition of libraries - I think it is an improvement in this particular case - but for plugins that are a single library, all the necessary information should reside on their CMakeLists.txt. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/490
https://github.com/sofa-framework/sofa/issues/490:645,Performance,cache,cache,645,"This was introduced by e33ff21e75356e6967509cc0822d72c74f2d0247 ; So in order to have the ""_d"" debug postfix in your binary, you must use the `sofa_add_plugin` macro. ; I do not use this macro, and I did not mind its existence because I thought it was only related to have a pretty presentation of the plugins in the cmake-gui. https://github.com/fjourdes/sofa/blob/insimo_sofabuild/CMakeLists.txt is the main CMakelists.txt I use in my fork. Could be much simpler, because I started it by modifying the CMakeLists.txt fomr master, and also I really spent 5 minutes on it. The list of projects and plugin to build is simply passed through CMake cache variables. However now you are in the case where doing a ; `add_subdirectory(my_plugin_directory)` and ; `sofa_add_plugin(my_plugin_directory)` both works, and ends up giving different names for your binaries regarding of the config you use for building. . I do not mind strategies like https://github.com/fjourdes/sofa/blob/insimo_sofabuild/SofaKernel/SofaCommon/CMakeLists.txt for packages that are a composition of libraries - I think it is an improvement in this particular case - but for plugins that are a single library, all the necessary information should reside on their CMakeLists.txt. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/490
https://github.com/sofa-framework/sofa/issues/490:457,Usability,simpl,simpler,457,"This was introduced by e33ff21e75356e6967509cc0822d72c74f2d0247 ; So in order to have the ""_d"" debug postfix in your binary, you must use the `sofa_add_plugin` macro. ; I do not use this macro, and I did not mind its existence because I thought it was only related to have a pretty presentation of the plugins in the cmake-gui. https://github.com/fjourdes/sofa/blob/insimo_sofabuild/CMakeLists.txt is the main CMakelists.txt I use in my fork. Could be much simpler, because I started it by modifying the CMakeLists.txt fomr master, and also I really spent 5 minutes on it. The list of projects and plugin to build is simply passed through CMake cache variables. However now you are in the case where doing a ; `add_subdirectory(my_plugin_directory)` and ; `sofa_add_plugin(my_plugin_directory)` both works, and ends up giving different names for your binaries regarding of the config you use for building. . I do not mind strategies like https://github.com/fjourdes/sofa/blob/insimo_sofabuild/SofaKernel/SofaCommon/CMakeLists.txt for packages that are a composition of libraries - I think it is an improvement in this particular case - but for plugins that are a single library, all the necessary information should reside on their CMakeLists.txt. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/490
https://github.com/sofa-framework/sofa/issues/490:617,Usability,simpl,simply,617,"This was introduced by e33ff21e75356e6967509cc0822d72c74f2d0247 ; So in order to have the ""_d"" debug postfix in your binary, you must use the `sofa_add_plugin` macro. ; I do not use this macro, and I did not mind its existence because I thought it was only related to have a pretty presentation of the plugins in the cmake-gui. https://github.com/fjourdes/sofa/blob/insimo_sofabuild/CMakeLists.txt is the main CMakelists.txt I use in my fork. Could be much simpler, because I started it by modifying the CMakeLists.txt fomr master, and also I really spent 5 minutes on it. The list of projects and plugin to build is simply passed through CMake cache variables. However now you are in the case where doing a ; `add_subdirectory(my_plugin_directory)` and ; `sofa_add_plugin(my_plugin_directory)` both works, and ends up giving different names for your binaries regarding of the config you use for building. . I do not mind strategies like https://github.com/fjourdes/sofa/blob/insimo_sofabuild/SofaKernel/SofaCommon/CMakeLists.txt for packages that are a composition of libraries - I think it is an improvement in this particular case - but for plugins that are a single library, all the necessary information should reside on their CMakeLists.txt. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/490
https://github.com/sofa-framework/sofa/issues/492:112,Modifiability,plugin,plugin,112,"Hi everyone,. I'm working right now on a small improvement that will allow people to directly import SofaPython plugin library (libSofaPython.so) inside their python script without the need for an external application (exemple runSofa). A python script could than looks something like:. ```; # scene.py; from libSofaPython import Sofa. root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(); for i in range(0,2):; ...; root.simulationStep(0.01); # Some data and timing analysis in python here...; ...; Sofa.cleanup(); ```; and could be called simply with; `python scene.py`. You can follow the development on the branch; https://github.com/jnbrunet/sofa/tree/sofa_python_without_executable. For now, the primary use for us is to create a batch application directly in python for our experiments (mainly time and precision benchmarks), but maybe some day we could also use this for a complete GUI experience. If you got any suggestion, please do not hesitate to write them here. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492
https://github.com/sofa-framework/sofa/issues/492:348,Performance,load,loadScene,348,"Hi everyone,. I'm working right now on a small improvement that will allow people to directly import SofaPython plugin library (libSofaPython.so) inside their python script without the need for an external application (exemple runSofa). A python script could than looks something like:. ```; # scene.py; from libSofaPython import Sofa. root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(); for i in range(0,2):; ...; root.simulationStep(0.01); # Some data and timing analysis in python here...; ...; Sofa.cleanup(); ```; and could be called simply with; `python scene.py`. You can follow the development on the branch; https://github.com/jnbrunet/sofa/tree/sofa_python_without_executable. For now, the primary use for us is to create a batch application directly in python for our experiments (mainly time and precision benchmarks), but maybe some day we could also use this for a complete GUI experience. If you got any suggestion, please do not hesitate to write them here. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492
https://github.com/sofa-framework/sofa/issues/492:833,Testability,benchmark,benchmarks,833,"Hi everyone,. I'm working right now on a small improvement that will allow people to directly import SofaPython plugin library (libSofaPython.so) inside their python script without the need for an external application (exemple runSofa). A python script could than looks something like:. ```; # scene.py; from libSofaPython import Sofa. root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(); for i in range(0,2):; ...; root.simulationStep(0.01); # Some data and timing analysis in python here...; ...; Sofa.cleanup(); ```; and could be called simply with; `python scene.py`. You can follow the development on the branch; https://github.com/jnbrunet/sofa/tree/sofa_python_without_executable. For now, the primary use for us is to create a batch application directly in python for our experiments (mainly time and precision benchmarks), but maybe some day we could also use this for a complete GUI experience. If you got any suggestion, please do not hesitate to write them here. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492
https://github.com/sofa-framework/sofa/issues/492:554,Usability,simpl,simply,554,"Hi everyone,. I'm working right now on a small improvement that will allow people to directly import SofaPython plugin library (libSofaPython.so) inside their python script without the need for an external application (exemple runSofa). A python script could than looks something like:. ```; # scene.py; from libSofaPython import Sofa. root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(); for i in range(0,2):; ...; root.simulationStep(0.01); # Some data and timing analysis in python here...; ...; Sofa.cleanup(); ```; and could be called simply with; `python scene.py`. You can follow the development on the branch; https://github.com/jnbrunet/sofa/tree/sofa_python_without_executable. For now, the primary use for us is to create a batch application directly in python for our experiments (mainly time and precision benchmarks), but maybe some day we could also use this for a complete GUI experience. If you got any suggestion, please do not hesitate to write them here. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492
https://github.com/sofa-framework/sofa/issues/493:191,Usability,Simpl,SimpleGUI,191,"Working on master.; SOFAGUI_GLUT turned on. #include <sofa/helper/io/ImageBMP.h> no such file or directory, same for #include <sofa/defaulttype/LaparoscopicRigidTypes.h>. Both are needed for SimpleGUI.cpp and MultithreadGUI.cpp. Does anybody know where I can found it ? ; Plus, the need of LaparoscopicRigidTypes sounds weird to me ... ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/493
https://github.com/sofa-framework/sofa/issues/494:123,Energy Efficiency,adapt,adapt,123,"After #475 merge, we should decide when we want the old behavior (all options in `config.h`) to stop working.; The work to adapt all config.h includes in SOFA is easy (searching for macros and including the right config/*.h file) but we have to find the best solution to permit translation for everybody around. What do you think?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/494
https://github.com/sofa-framework/sofa/issues/494:82,Modifiability,config,config,82,"After #475 merge, we should decide when we want the old behavior (all options in `config.h`) to stop working.; The work to adapt all config.h includes in SOFA is easy (searching for macros and including the right config/*.h file) but we have to find the best solution to permit translation for everybody around. What do you think?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/494
https://github.com/sofa-framework/sofa/issues/494:123,Modifiability,adapt,adapt,123,"After #475 merge, we should decide when we want the old behavior (all options in `config.h`) to stop working.; The work to adapt all config.h includes in SOFA is easy (searching for macros and including the right config/*.h file) but we have to find the best solution to permit translation for everybody around. What do you think?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/494
https://github.com/sofa-framework/sofa/issues/494:133,Modifiability,config,config,133,"After #475 merge, we should decide when we want the old behavior (all options in `config.h`) to stop working.; The work to adapt all config.h includes in SOFA is easy (searching for macros and including the right config/*.h file) but we have to find the best solution to permit translation for everybody around. What do you think?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/494
https://github.com/sofa-framework/sofa/issues/494:213,Modifiability,config,config,213,"After #475 merge, we should decide when we want the old behavior (all options in `config.h`) to stop working.; The work to adapt all config.h includes in SOFA is easy (searching for macros and including the right config/*.h file) but we have to find the best solution to permit translation for everybody around. What do you think?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/494
https://github.com/sofa-framework/sofa/issues/496:296,Modifiability,refactor,refactor,296,"I was searching for a marching cube to render an implicit field (a real one, given from any analytic formulation not just metaball or blobs union). . I didn't find one, is there any ? ; While I was searching I found a least 4 different variations ...and thus wonder if there is no opportunity to refactor a bit. . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496
https://github.com/sofa-framework/sofa/pull/497:419,Availability,failure,failures,419,## issofa_meshspringff. ### New features. ### Improvements; - MeshSpringForceField: add drawing of springs elongation . ### Cleans. ### Bugfixes. ### Moved files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/497
https://github.com/sofa-framework/sofa/pull/497:469,Availability,failure,failures,469,## issofa_meshspringff. ### New features. ### Improvements; - MeshSpringForceField: add drawing of springs elongation . ### Cleans. ### Bugfixes. ### Moved files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/497
https://github.com/sofa-framework/sofa/pull/497:262,Integrability,message,message,262,## issofa_meshspringff. ### New features. ### Improvements; - MeshSpringForceField: add drawing of springs elongation . ### Cleans. ### Bugfixes. ### Moved files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/497
https://github.com/sofa-framework/sofa/pull/497:414,Testability,test,test,414,## issofa_meshspringff. ### New features. ### Improvements; - MeshSpringForceField: add drawing of springs elongation . ### Cleans. ### Bugfixes. ### Moved files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/497
https://github.com/sofa-framework/sofa/pull/497:464,Testability,test,test,464,## issofa_meshspringff. ### New features. ### Improvements; - MeshSpringForceField: add drawing of springs elongation . ### Cleans. ### Bugfixes. ### Moved files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/497
https://github.com/sofa-framework/sofa/pull/498:564,Availability,failure,failures,564,## issofa_springff. ### New features. ### Improvements; - SpringForceField: enabled flag in SpringForceField::Spring ; - SpringForceField: make all Data public to be able to edit the springs info from other components ; - SpringForceField: fix duplicated member . ### Cleans. ### Bugfixes. ### Moved files . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/498
https://github.com/sofa-framework/sofa/pull/498:614,Availability,failure,failures,614,## issofa_springff. ### New features. ### Improvements; - SpringForceField: enabled flag in SpringForceField::Spring ; - SpringForceField: make all Data public to be able to edit the springs info from other components ; - SpringForceField: fix duplicated member . ### Cleans. ### Bugfixes. ### Moved files . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/498
https://github.com/sofa-framework/sofa/pull/498:407,Integrability,message,message,407,## issofa_springff. ### New features. ### Improvements; - SpringForceField: enabled flag in SpringForceField::Spring ; - SpringForceField: make all Data public to be able to edit the springs info from other components ; - SpringForceField: fix duplicated member . ### Cleans. ### Bugfixes. ### Moved files . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/498
https://github.com/sofa-framework/sofa/pull/498:559,Testability,test,test,559,## issofa_springff. ### New features. ### Improvements; - SpringForceField: enabled flag in SpringForceField::Spring ; - SpringForceField: make all Data public to be able to edit the springs info from other components ; - SpringForceField: fix duplicated member . ### Cleans. ### Bugfixes. ### Moved files . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/498
https://github.com/sofa-framework/sofa/pull/498:609,Testability,test,test,609,## issofa_springff. ### New features. ### Improvements; - SpringForceField: enabled flag in SpringForceField::Spring ; - SpringForceField: make all Data public to be able to edit the springs info from other components ; - SpringForceField: fix duplicated member . ### Cleans. ### Bugfixes. ### Moved files . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/498
https://github.com/sofa-framework/sofa/pull/499:401,Availability,failure,failures,401,Fixes #493 . Every Laparoscopic related code has been removed.; The ImageBMP dependency has been removed and replaced by the FactoryImage stuff. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/499
https://github.com/sofa-framework/sofa/pull/499:451,Availability,failure,failures,451,Fixes #493 . Every Laparoscopic related code has been removed.; The ImageBMP dependency has been removed and replaced by the FactoryImage stuff. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/499
https://github.com/sofa-framework/sofa/pull/499:77,Integrability,depend,dependency,77,Fixes #493 . Every Laparoscopic related code has been removed.; The ImageBMP dependency has been removed and replaced by the FactoryImage stuff. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/499
https://github.com/sofa-framework/sofa/pull/499:244,Integrability,message,message,244,Fixes #493 . Every Laparoscopic related code has been removed.; The ImageBMP dependency has been removed and replaced by the FactoryImage stuff. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/499
https://github.com/sofa-framework/sofa/pull/499:396,Testability,test,test,396,Fixes #493 . Every Laparoscopic related code has been removed.; The ImageBMP dependency has been removed and replaced by the FactoryImage stuff. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/499
https://github.com/sofa-framework/sofa/pull/499:446,Testability,test,test,446,Fixes #493 . Every Laparoscopic related code has been removed.; The ImageBMP dependency has been removed and replaced by the FactoryImage stuff. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/499
https://github.com/sofa-framework/sofa/pull/500:423,Availability,failure,failures,423,This fix allows to set the default filename for the Monitor class. The default name assignment is removed in 'init()' function since in constructor it doesn't work. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/500
https://github.com/sofa-framework/sofa/pull/500:473,Availability,failure,failures,473,This fix allows to set the default filename for the Monitor class. The default name assignment is removed in 'init()' function since in constructor it doesn't work. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/500
https://github.com/sofa-framework/sofa/pull/500:52,Energy Efficiency,Monitor,Monitor,52,This fix allows to set the default filename for the Monitor class. The default name assignment is removed in 'init()' function since in constructor it doesn't work. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/500
https://github.com/sofa-framework/sofa/pull/500:266,Integrability,message,message,266,This fix allows to set the default filename for the Monitor class. The default name assignment is removed in 'init()' function since in constructor it doesn't work. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/500
https://github.com/sofa-framework/sofa/pull/500:418,Testability,test,test,418,This fix allows to set the default filename for the Monitor class. The default name assignment is removed in 'init()' function since in constructor it doesn't work. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/500
https://github.com/sofa-framework/sofa/pull/500:468,Testability,test,test,468,This fix allows to set the default filename for the Monitor class. The default name assignment is removed in 'init()' function since in constructor it doesn't work. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/500
https://github.com/sofa-framework/sofa/pull/501:814,Availability,failure,failures,814,"## issofa attachconstraint. ### New features. ### Improvements; - AttachConstraint: add a position, velocity and response factor in order to correct the constraint. ; - AttachConstraint: Add constraint factor per pair of constraint points to release progressively the attach.; - AttachConstraint: needs an initialization of the data constraintFactor, size of this factor should be at least as important as the minimum of the indices. ; - Scenes: parameter constraintFactor is needed for the component in the scene. ### Cleans. ### Bugfixes. ### Moved files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/501
https://github.com/sofa-framework/sofa/pull/501:864,Availability,failure,failures,864,"## issofa attachconstraint. ### New features. ### Improvements; - AttachConstraint: add a position, velocity and response factor in order to correct the constraint. ; - AttachConstraint: Add constraint factor per pair of constraint points to release progressively the attach.; - AttachConstraint: needs an initialization of the data constraintFactor, size of this factor should be at least as important as the minimum of the indices. ; - Scenes: parameter constraintFactor is needed for the component in the scene. ### Cleans. ### Bugfixes. ### Moved files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/501
https://github.com/sofa-framework/sofa/pull/501:242,Deployability,release,release,242,"## issofa attachconstraint. ### New features. ### Improvements; - AttachConstraint: add a position, velocity and response factor in order to correct the constraint. ; - AttachConstraint: Add constraint factor per pair of constraint points to release progressively the attach.; - AttachConstraint: needs an initialization of the data constraintFactor, size of this factor should be at least as important as the minimum of the indices. ; - Scenes: parameter constraintFactor is needed for the component in the scene. ### Cleans. ### Bugfixes. ### Moved files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/501
https://github.com/sofa-framework/sofa/pull/501:657,Integrability,message,message,657,"## issofa attachconstraint. ### New features. ### Improvements; - AttachConstraint: add a position, velocity and response factor in order to correct the constraint. ; - AttachConstraint: Add constraint factor per pair of constraint points to release progressively the attach.; - AttachConstraint: needs an initialization of the data constraintFactor, size of this factor should be at least as important as the minimum of the indices. ; - Scenes: parameter constraintFactor is needed for the component in the scene. ### Cleans. ### Bugfixes. ### Moved files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/501
https://github.com/sofa-framework/sofa/pull/501:809,Testability,test,test,809,"## issofa attachconstraint. ### New features. ### Improvements; - AttachConstraint: add a position, velocity and response factor in order to correct the constraint. ; - AttachConstraint: Add constraint factor per pair of constraint points to release progressively the attach.; - AttachConstraint: needs an initialization of the data constraintFactor, size of this factor should be at least as important as the minimum of the indices. ; - Scenes: parameter constraintFactor is needed for the component in the scene. ### Cleans. ### Bugfixes. ### Moved files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/501
https://github.com/sofa-framework/sofa/pull/501:859,Testability,test,test,859,"## issofa attachconstraint. ### New features. ### Improvements; - AttachConstraint: add a position, velocity and response factor in order to correct the constraint. ; - AttachConstraint: Add constraint factor per pair of constraint points to release progressively the attach.; - AttachConstraint: needs an initialization of the data constraintFactor, size of this factor should be at least as important as the minimum of the indices. ; - Scenes: parameter constraintFactor is needed for the component in the scene. ### Cleans. ### Bugfixes. ### Moved files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/501
https://github.com/sofa-framework/sofa/pull/502:65,Availability,Failure,Failures,65,This should fix failing scene tests due to issofa_plugin merge ; Failures were due to wrong `plugin_list.conf` path implying no plugin loading. Added some output to understand better were this list is loaded from (especially in case of failure). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502
https://github.com/sofa-framework/sofa/pull/502:236,Availability,failure,failure,236,This should fix failing scene tests due to issofa_plugin merge ; Failures were due to wrong `plugin_list.conf` path implying no plugin loading. Added some output to understand better were this list is loaded from (especially in case of failure). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502
https://github.com/sofa-framework/sofa/pull/502:502,Availability,failure,failures,502,This should fix failing scene tests due to issofa_plugin merge ; Failures were due to wrong `plugin_list.conf` path implying no plugin loading. Added some output to understand better were this list is loaded from (especially in case of failure). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502
https://github.com/sofa-framework/sofa/pull/502:552,Availability,failure,failures,552,This should fix failing scene tests due to issofa_plugin merge ; Failures were due to wrong `plugin_list.conf` path implying no plugin loading. Added some output to understand better were this list is loaded from (especially in case of failure). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502
https://github.com/sofa-framework/sofa/pull/502:345,Integrability,message,message,345,This should fix failing scene tests due to issofa_plugin merge ; Failures were due to wrong `plugin_list.conf` path implying no plugin loading. Added some output to understand better were this list is loaded from (especially in case of failure). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502
https://github.com/sofa-framework/sofa/pull/502:128,Modifiability,plugin,plugin,128,This should fix failing scene tests due to issofa_plugin merge ; Failures were due to wrong `plugin_list.conf` path implying no plugin loading. Added some output to understand better were this list is loaded from (especially in case of failure). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502
https://github.com/sofa-framework/sofa/pull/502:135,Performance,load,loading,135,This should fix failing scene tests due to issofa_plugin merge ; Failures were due to wrong `plugin_list.conf` path implying no plugin loading. Added some output to understand better were this list is loaded from (especially in case of failure). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502
https://github.com/sofa-framework/sofa/pull/502:201,Performance,load,loaded,201,This should fix failing scene tests due to issofa_plugin merge ; Failures were due to wrong `plugin_list.conf` path implying no plugin loading. Added some output to understand better were this list is loaded from (especially in case of failure). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502
https://github.com/sofa-framework/sofa/pull/502:30,Testability,test,tests,30,This should fix failing scene tests due to issofa_plugin merge ; Failures were due to wrong `plugin_list.conf` path implying no plugin loading. Added some output to understand better were this list is loaded from (especially in case of failure). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502
https://github.com/sofa-framework/sofa/pull/502:497,Testability,test,test,497,This should fix failing scene tests due to issofa_plugin merge ; Failures were due to wrong `plugin_list.conf` path implying no plugin loading. Added some output to understand better were this list is loaded from (especially in case of failure). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502
https://github.com/sofa-framework/sofa/pull/502:547,Testability,test,test,547,This should fix failing scene tests due to issofa_plugin merge ; Failures were due to wrong `plugin_list.conf` path implying no plugin loading. Added some output to understand better were this list is loaded from (especially in case of failure). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502
https://github.com/sofa-framework/sofa/pull/503:76,Availability,error,error,76,"Minor commit to improve messaging when image cannot be loaded.; Before : no error, no message, no hints for available extensions to use. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503
https://github.com/sofa-framework/sofa/pull/503:108,Availability,avail,available,108,"Minor commit to improve messaging when image cannot be loaded.; Before : no error, no message, no hints for available extensions to use. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503
https://github.com/sofa-framework/sofa/pull/503:393,Availability,failure,failures,393,"Minor commit to improve messaging when image cannot be loaded.; Before : no error, no message, no hints for available extensions to use. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503
https://github.com/sofa-framework/sofa/pull/503:443,Availability,failure,failures,443,"Minor commit to improve messaging when image cannot be loaded.; Before : no error, no message, no hints for available extensions to use. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503
https://github.com/sofa-framework/sofa/pull/503:86,Integrability,message,message,86,"Minor commit to improve messaging when image cannot be loaded.; Before : no error, no message, no hints for available extensions to use. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503
https://github.com/sofa-framework/sofa/pull/503:236,Integrability,message,message,236,"Minor commit to improve messaging when image cannot be loaded.; Before : no error, no message, no hints for available extensions to use. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503
https://github.com/sofa-framework/sofa/pull/503:55,Performance,load,loaded,55,"Minor commit to improve messaging when image cannot be loaded.; Before : no error, no message, no hints for available extensions to use. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503
https://github.com/sofa-framework/sofa/pull/503:388,Testability,test,test,388,"Minor commit to improve messaging when image cannot be loaded.; Before : no error, no message, no hints for available extensions to use. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503
https://github.com/sofa-framework/sofa/pull/503:438,Testability,test,test,438,"Minor commit to improve messaging when image cannot be loaded.; Before : no error, no message, no hints for available extensions to use. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503
https://github.com/sofa-framework/sofa/pull/504:468,Availability,failure,failures,468,"This should fix ""a few"" failing scene tests due to ColladaSceneLoader on Windows. See the Details tab of https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64_pr1/526/warnings2Result/category.96784904/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/504
https://github.com/sofa-framework/sofa/pull/504:518,Availability,failure,failures,518,"This should fix ""a few"" failing scene tests due to ColladaSceneLoader on Windows. See the Details tab of https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64_pr1/526/warnings2Result/category.96784904/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/504
https://github.com/sofa-framework/sofa/pull/504:311,Integrability,message,message,311,"This should fix ""a few"" failing scene tests due to ColladaSceneLoader on Windows. See the Details tab of https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64_pr1/526/warnings2Result/category.96784904/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/504
https://github.com/sofa-framework/sofa/pull/504:38,Testability,test,tests,38,"This should fix ""a few"" failing scene tests due to ColladaSceneLoader on Windows. See the Details tab of https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64_pr1/526/warnings2Result/category.96784904/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/504
https://github.com/sofa-framework/sofa/pull/504:463,Testability,test,test,463,"This should fix ""a few"" failing scene tests due to ColladaSceneLoader on Windows. See the Details tab of https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64_pr1/526/warnings2Result/category.96784904/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/504
https://github.com/sofa-framework/sofa/pull/504:513,Testability,test,test,513,"This should fix ""a few"" failing scene tests due to ColladaSceneLoader on Windows. See the Details tab of https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64_pr1/526/warnings2Result/category.96784904/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/504
https://github.com/sofa-framework/sofa/pull/505:256,Availability,failure,failures,256,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/505
https://github.com/sofa-framework/sofa/pull/505:306,Availability,failure,failures,306,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/505
https://github.com/sofa-framework/sofa/pull/505:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/505
https://github.com/sofa-framework/sofa/pull/505:251,Testability,test,test,251,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/505
https://github.com/sofa-framework/sofa/pull/505:301,Testability,test,test,301,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/505
https://github.com/sofa-framework/sofa/pull/506:22,Availability,error,errors,22,A fix for compilation errors when working with operator '*=' from Transform class. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/506
https://github.com/sofa-framework/sofa/pull/506:339,Availability,failure,failures,339,A fix for compilation errors when working with operator '*=' from Transform class. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/506
https://github.com/sofa-framework/sofa/pull/506:389,Availability,failure,failures,389,A fix for compilation errors when working with operator '*=' from Transform class. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/506
https://github.com/sofa-framework/sofa/pull/506:182,Integrability,message,message,182,A fix for compilation errors when working with operator '*=' from Transform class. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/506
https://github.com/sofa-framework/sofa/pull/506:334,Testability,test,test,334,A fix for compilation errors when working with operator '*=' from Transform class. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/506
https://github.com/sofa-framework/sofa/pull/506:384,Testability,test,test,384,A fix for compilation errors when working with operator '*=' from Transform class. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/506
https://github.com/sofa-framework/sofa/pull/507:79,Availability,error,errors,79,Very simple PR to allow Windows loading MultiThreading plugin.; Will fix these errors: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64/550/warnings2Result/category.96784904/. [ci-build][with-scene-tests]; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/507
https://github.com/sofa-framework/sofa/pull/507:476,Availability,failure,failures,476,Very simple PR to allow Windows loading MultiThreading plugin.; Will fix these errors: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64/550/warnings2Result/category.96784904/. [ci-build][with-scene-tests]; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/507
https://github.com/sofa-framework/sofa/pull/507:526,Availability,failure,failures,526,Very simple PR to allow Windows loading MultiThreading plugin.; Will fix these errors: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64/550/warnings2Result/category.96784904/. [ci-build][with-scene-tests]; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/507
https://github.com/sofa-framework/sofa/pull/507:319,Integrability,message,message,319,Very simple PR to allow Windows loading MultiThreading plugin.; Will fix these errors: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64/550/warnings2Result/category.96784904/. [ci-build][with-scene-tests]; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/507
https://github.com/sofa-framework/sofa/pull/507:55,Modifiability,plugin,plugin,55,Very simple PR to allow Windows loading MultiThreading plugin.; Will fix these errors: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64/550/warnings2Result/category.96784904/. [ci-build][with-scene-tests]; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/507
https://github.com/sofa-framework/sofa/pull/507:32,Performance,load,loading,32,Very simple PR to allow Windows loading MultiThreading plugin.; Will fix these errors: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64/550/warnings2Result/category.96784904/. [ci-build][with-scene-tests]; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/507
https://github.com/sofa-framework/sofa/pull/507:212,Testability,test,tests,212,Very simple PR to allow Windows loading MultiThreading plugin.; Will fix these errors: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64/550/warnings2Result/category.96784904/. [ci-build][with-scene-tests]; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/507
https://github.com/sofa-framework/sofa/pull/507:471,Testability,test,test,471,Very simple PR to allow Windows loading MultiThreading plugin.; Will fix these errors: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64/550/warnings2Result/category.96784904/. [ci-build][with-scene-tests]; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/507
https://github.com/sofa-framework/sofa/pull/507:521,Testability,test,test,521,Very simple PR to allow Windows loading MultiThreading plugin.; Will fix these errors: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64/550/warnings2Result/category.96784904/. [ci-build][with-scene-tests]; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/507
https://github.com/sofa-framework/sofa/pull/507:5,Usability,simpl,simple,5,Very simple PR to allow Windows loading MultiThreading plugin.; Will fix these errors: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64/550/warnings2Result/category.96784904/. [ci-build][with-scene-tests]; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/507
https://github.com/sofa-framework/sofa/issues/509:69,Availability,fault,fault,69,"Hello,. I am working on Windows 8 and Sofa v17.06 has a segmentation fault when opening a scene file. Consequently, the program instantly crashes. Have you already heard about this kind of bug?. Best regards. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/509
https://github.com/sofa-framework/sofa/pull/510:426,Availability,failure,failures,426,"Very basic PR just to let you know that the CGAL plugin is not compatible with latest CGAL.; As is, it compiles with CGAL <= 4.9.1. CI build is unnecessary for this PR.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/510
https://github.com/sofa-framework/sofa/pull/510:476,Availability,failure,failures,476,"Very basic PR just to let you know that the CGAL plugin is not compatible with latest CGAL.; As is, it compiles with CGAL <= 4.9.1. CI build is unnecessary for this PR.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/510
https://github.com/sofa-framework/sofa/pull/510:269,Integrability,message,message,269,"Very basic PR just to let you know that the CGAL plugin is not compatible with latest CGAL.; As is, it compiles with CGAL <= 4.9.1. CI build is unnecessary for this PR.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/510
https://github.com/sofa-framework/sofa/pull/510:49,Modifiability,plugin,plugin,49,"Very basic PR just to let you know that the CGAL plugin is not compatible with latest CGAL.; As is, it compiles with CGAL <= 4.9.1. CI build is unnecessary for this PR.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/510
https://github.com/sofa-framework/sofa/pull/510:421,Testability,test,test,421,"Very basic PR just to let you know that the CGAL plugin is not compatible with latest CGAL.; As is, it compiles with CGAL <= 4.9.1. CI build is unnecessary for this PR.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/510
https://github.com/sofa-framework/sofa/pull/510:471,Testability,test,test,471,"Very basic PR just to let you know that the CGAL plugin is not compatible with latest CGAL.; As is, it compiles with CGAL <= 4.9.1. CI build is unnecessary for this PR.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/510
https://github.com/sofa-framework/sofa/pull/511:340,Availability,failure,failures,340,"Suffix was missing for SceneCreator, SofaTest and SofaSimulationCore.; Fixes #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/511
https://github.com/sofa-framework/sofa/pull/511:390,Availability,failure,failures,390,"Suffix was missing for SceneCreator, SofaTest and SofaSimulationCore.; Fixes #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/511
https://github.com/sofa-framework/sofa/pull/511:183,Integrability,message,message,183,"Suffix was missing for SceneCreator, SofaTest and SofaSimulationCore.; Fixes #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/511
https://github.com/sofa-framework/sofa/pull/511:335,Testability,test,test,335,"Suffix was missing for SceneCreator, SofaTest and SofaSimulationCore.; Fixes #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/511
https://github.com/sofa-framework/sofa/pull/511:385,Testability,test,test,385,"Suffix was missing for SceneCreator, SofaTest and SofaSimulationCore.; Fixes #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/511
https://github.com/sofa-framework/sofa/issues/512:992,Modifiability,variab,variable,992,"While trying to add new options, I encounter the problem of adding new short argument names with consistency. The thing is, right now you have to design your option by using a short name (a char) and a long name (a char*).; But many options already exist. Finding a non used char which is consistent for an option is quite difficult. By reading existents short names, I assume I'm not the first one encountering this issue. Shouldn't it be better to let the user having the ability of using char* instead of char ? ; Of course short name still have to be ""short"" and we can add rules defining the maximum lenght of a short name, 3 for example. By example : ; ` .option(&colorsStatus, ""col"", ""colors"",""use colors on stdout and stderr (yes, no, auto)""); ` From POV, it is more consistent than : ; ` .option(&colorsStatus,'z',""colors"",""use colors on stdout and stderr (yes, no, auto)""); `. Here is an overview of the function : . ```; /** Declare an optional argument; \param ptr pointer to the variable; \param sho short name; \param lon long name; \param help; */; template<class T> inline; ArgumentParser& option( T* ptr, char sho, const char* lon, const char* help ); {; string sn, ln(lon), h(help); sn += sho;. if( sho!=0 && shortName.find(sho) != shortName.end() ); {; msg_fatal(""ArgumentParser"") << ""name "" << sn << "" already used !"";; exit(EXIT_FAILURE);; }; ....; ```. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/512
https://github.com/sofa-framework/sofa/pull/513:1553,Availability,failure,failures,1553,"Here is a fix for issue: https://github.com/sofa-framework/sofa/issues/512. # Objectives; - add optional short argument ☑; - add more flexibility. We don't want to edit the main.cpp each time we want to add new arguments ☑; - simplifcation of ArgumentParser. We will use the boost program option ☑. # Changelog. - `ArgumentParser` completely changed. It's now using boost program option. It's better using existing things rather than creating our own implementation and maintain it; - `SceneCreatorBenchmarks.cpp ` use the new ArgumentParser; - `runSofa/Main.cpp` use the new ArgumentParser; - `BaseGUI.h` use the new ArgumentParser, and changed the way we can parse arguments.; - `BatchGUI` use the new ArgumentParser, and add argument registration; - `GUIManager.cpp` changed the api, removed initGUI (useless most of the time); - `gui/Main.cpp` use the new GUIManager function (replace the GUIManager); - `MultithreadGUI` use the new ArgumentParser and GUIManager; - `SimpleGUI` use the new ArgumentParser and GUIManager; - `RealGUI` use the new ArgumentParser and GUIManager. ## API Breaking. - `ArgumentParser` everything changed; - `BaseGUI` use the new ArgumentParser, and changed the way we can parse arguments.; - `GUIManager` changed the api, removed initGUI (useless most of the time). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/513
https://github.com/sofa-framework/sofa/pull/513:1603,Availability,failure,failures,1603,"Here is a fix for issue: https://github.com/sofa-framework/sofa/issues/512. # Objectives; - add optional short argument ☑; - add more flexibility. We don't want to edit the main.cpp each time we want to add new arguments ☑; - simplifcation of ArgumentParser. We will use the boost program option ☑. # Changelog. - `ArgumentParser` completely changed. It's now using boost program option. It's better using existing things rather than creating our own implementation and maintain it; - `SceneCreatorBenchmarks.cpp ` use the new ArgumentParser; - `runSofa/Main.cpp` use the new ArgumentParser; - `BaseGUI.h` use the new ArgumentParser, and changed the way we can parse arguments.; - `BatchGUI` use the new ArgumentParser, and add argument registration; - `GUIManager.cpp` changed the api, removed initGUI (useless most of the time); - `gui/Main.cpp` use the new GUIManager function (replace the GUIManager); - `MultithreadGUI` use the new ArgumentParser and GUIManager; - `SimpleGUI` use the new ArgumentParser and GUIManager; - `RealGUI` use the new ArgumentParser and GUIManager. ## API Breaking. - `ArgumentParser` everything changed; - `BaseGUI` use the new ArgumentParser, and changed the way we can parse arguments.; - `GUIManager` changed the api, removed initGUI (useless most of the time). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/513
https://github.com/sofa-framework/sofa/pull/513:1396,Integrability,message,message,1396,"Here is a fix for issue: https://github.com/sofa-framework/sofa/issues/512. # Objectives; - add optional short argument ☑; - add more flexibility. We don't want to edit the main.cpp each time we want to add new arguments ☑; - simplifcation of ArgumentParser. We will use the boost program option ☑. # Changelog. - `ArgumentParser` completely changed. It's now using boost program option. It's better using existing things rather than creating our own implementation and maintain it; - `SceneCreatorBenchmarks.cpp ` use the new ArgumentParser; - `runSofa/Main.cpp` use the new ArgumentParser; - `BaseGUI.h` use the new ArgumentParser, and changed the way we can parse arguments.; - `BatchGUI` use the new ArgumentParser, and add argument registration; - `GUIManager.cpp` changed the api, removed initGUI (useless most of the time); - `gui/Main.cpp` use the new GUIManager function (replace the GUIManager); - `MultithreadGUI` use the new ArgumentParser and GUIManager; - `SimpleGUI` use the new ArgumentParser and GUIManager; - `RealGUI` use the new ArgumentParser and GUIManager. ## API Breaking. - `ArgumentParser` everything changed; - `BaseGUI` use the new ArgumentParser, and changed the way we can parse arguments.; - `GUIManager` changed the api, removed initGUI (useless most of the time). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/513
https://github.com/sofa-framework/sofa/pull/513:1548,Testability,test,test,1548,"Here is a fix for issue: https://github.com/sofa-framework/sofa/issues/512. # Objectives; - add optional short argument ☑; - add more flexibility. We don't want to edit the main.cpp each time we want to add new arguments ☑; - simplifcation of ArgumentParser. We will use the boost program option ☑. # Changelog. - `ArgumentParser` completely changed. It's now using boost program option. It's better using existing things rather than creating our own implementation and maintain it; - `SceneCreatorBenchmarks.cpp ` use the new ArgumentParser; - `runSofa/Main.cpp` use the new ArgumentParser; - `BaseGUI.h` use the new ArgumentParser, and changed the way we can parse arguments.; - `BatchGUI` use the new ArgumentParser, and add argument registration; - `GUIManager.cpp` changed the api, removed initGUI (useless most of the time); - `gui/Main.cpp` use the new GUIManager function (replace the GUIManager); - `MultithreadGUI` use the new ArgumentParser and GUIManager; - `SimpleGUI` use the new ArgumentParser and GUIManager; - `RealGUI` use the new ArgumentParser and GUIManager. ## API Breaking. - `ArgumentParser` everything changed; - `BaseGUI` use the new ArgumentParser, and changed the way we can parse arguments.; - `GUIManager` changed the api, removed initGUI (useless most of the time). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/513
https://github.com/sofa-framework/sofa/pull/513:1598,Testability,test,test,1598,"Here is a fix for issue: https://github.com/sofa-framework/sofa/issues/512. # Objectives; - add optional short argument ☑; - add more flexibility. We don't want to edit the main.cpp each time we want to add new arguments ☑; - simplifcation of ArgumentParser. We will use the boost program option ☑. # Changelog. - `ArgumentParser` completely changed. It's now using boost program option. It's better using existing things rather than creating our own implementation and maintain it; - `SceneCreatorBenchmarks.cpp ` use the new ArgumentParser; - `runSofa/Main.cpp` use the new ArgumentParser; - `BaseGUI.h` use the new ArgumentParser, and changed the way we can parse arguments.; - `BatchGUI` use the new ArgumentParser, and add argument registration; - `GUIManager.cpp` changed the api, removed initGUI (useless most of the time); - `gui/Main.cpp` use the new GUIManager function (replace the GUIManager); - `MultithreadGUI` use the new ArgumentParser and GUIManager; - `SimpleGUI` use the new ArgumentParser and GUIManager; - `RealGUI` use the new ArgumentParser and GUIManager. ## API Breaking. - `ArgumentParser` everything changed; - `BaseGUI` use the new ArgumentParser, and changed the way we can parse arguments.; - `GUIManager` changed the api, removed initGUI (useless most of the time). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/513
https://github.com/sofa-framework/sofa/pull/513:226,Usability,simpl,simplifcation,226,"Here is a fix for issue: https://github.com/sofa-framework/sofa/issues/512. # Objectives; - add optional short argument ☑; - add more flexibility. We don't want to edit the main.cpp each time we want to add new arguments ☑; - simplifcation of ArgumentParser. We will use the boost program option ☑. # Changelog. - `ArgumentParser` completely changed. It's now using boost program option. It's better using existing things rather than creating our own implementation and maintain it; - `SceneCreatorBenchmarks.cpp ` use the new ArgumentParser; - `runSofa/Main.cpp` use the new ArgumentParser; - `BaseGUI.h` use the new ArgumentParser, and changed the way we can parse arguments.; - `BatchGUI` use the new ArgumentParser, and add argument registration; - `GUIManager.cpp` changed the api, removed initGUI (useless most of the time); - `gui/Main.cpp` use the new GUIManager function (replace the GUIManager); - `MultithreadGUI` use the new ArgumentParser and GUIManager; - `SimpleGUI` use the new ArgumentParser and GUIManager; - `RealGUI` use the new ArgumentParser and GUIManager. ## API Breaking. - `ArgumentParser` everything changed; - `BaseGUI` use the new ArgumentParser, and changed the way we can parse arguments.; - `GUIManager` changed the api, removed initGUI (useless most of the time). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/513
https://github.com/sofa-framework/sofa/pull/513:971,Usability,Simpl,SimpleGUI,971,"Here is a fix for issue: https://github.com/sofa-framework/sofa/issues/512. # Objectives; - add optional short argument ☑; - add more flexibility. We don't want to edit the main.cpp each time we want to add new arguments ☑; - simplifcation of ArgumentParser. We will use the boost program option ☑. # Changelog. - `ArgumentParser` completely changed. It's now using boost program option. It's better using existing things rather than creating our own implementation and maintain it; - `SceneCreatorBenchmarks.cpp ` use the new ArgumentParser; - `runSofa/Main.cpp` use the new ArgumentParser; - `BaseGUI.h` use the new ArgumentParser, and changed the way we can parse arguments.; - `BatchGUI` use the new ArgumentParser, and add argument registration; - `GUIManager.cpp` changed the api, removed initGUI (useless most of the time); - `gui/Main.cpp` use the new GUIManager function (replace the GUIManager); - `MultithreadGUI` use the new ArgumentParser and GUIManager; - `SimpleGUI` use the new ArgumentParser and GUIManager; - `RealGUI` use the new ArgumentParser and GUIManager. ## API Breaking. - `ArgumentParser` everything changed; - `BaseGUI` use the new ArgumentParser, and changed the way we can parse arguments.; - `GUIManager` changed the api, removed initGUI (useless most of the time). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/513
https://github.com/sofa-framework/sofa/pull/514:22,Integrability,message,message,22,"When making a PR, the message for developers would then be:. Thank you for your pull request!; Someone will soon check it and start the builds. Note that by submitting a contribution to SOFA and signing-off your commits (*git commit -S*), you hereby adhere to the [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco). Discussion with @dmargery",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/514
https://github.com/sofa-framework/sofa/pull/514:280,Security,Certificate,Certificate,280,"When making a PR, the message for developers would then be:. Thank you for your pull request!; Someone will soon check it and start the builds. Note that by submitting a contribution to SOFA and signing-off your commits (*git commit -S*), you hereby adhere to the [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco). Discussion with @dmargery",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/514
https://github.com/sofa-framework/sofa/pull/514:391,Security,certificate,certificate-of-origin-dco,391,"When making a PR, the message for developers would then be:. Thank you for your pull request!; Someone will soon check it and start the builds. Note that by submitting a contribution to SOFA and signing-off your commits (*git commit -S*), you hereby adhere to the [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco). Discussion with @dmargery",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/514
https://github.com/sofa-framework/sofa/pull/515:330,Availability,failure,failures,330,This PR replaces #510 with a simple fix suggested by @vmagno (thank you). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/515
https://github.com/sofa-framework/sofa/pull/515:380,Availability,failure,failures,380,This PR replaces #510 with a simple fix suggested by @vmagno (thank you). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/515
https://github.com/sofa-framework/sofa/pull/515:173,Integrability,message,message,173,This PR replaces #510 with a simple fix suggested by @vmagno (thank you). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/515
https://github.com/sofa-framework/sofa/pull/515:325,Testability,test,test,325,This PR replaces #510 with a simple fix suggested by @vmagno (thank you). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/515
https://github.com/sofa-framework/sofa/pull/515:375,Testability,test,test,375,This PR replaces #510 with a simple fix suggested by @vmagno (thank you). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/515
https://github.com/sofa-framework/sofa/pull/515:29,Usability,simpl,simple,29,This PR replaces #510 with a simple fix suggested by @vmagno (thank you). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/515
https://github.com/sofa-framework/sofa/pull/516:287,Availability,failure,failures,287,Because of missing _declspec_. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/516
https://github.com/sofa-framework/sofa/pull/516:337,Availability,failure,failures,337,Because of missing _declspec_. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/516
https://github.com/sofa-framework/sofa/pull/516:130,Integrability,message,message,130,Because of missing _declspec_. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/516
https://github.com/sofa-framework/sofa/pull/516:282,Testability,test,test,282,Because of missing _declspec_. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/516
https://github.com/sofa-framework/sofa/pull/516:332,Testability,test,test,332,Because of missing _declspec_. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/516
https://github.com/sofa-framework/sofa/issues/517:69,Deployability,release,release,69,"Hello,. I think it would be great (if not mandatory) to have in this release of Sofa new features and not only bug fixes. . To make that possible I suggest to use the SOFA_WITH_EXPERIMENTAL_FEATURES options to conditionally activate plugins or component that are in their way for integration but are not considered as stable enough or that may be subject to API change in 18.06. Those should print a warning message in their init function if used. . If agreed on the principle of allowing EXPERIMENTAL new components in 17.12 I have the following features/component to propose (all are located in plugins):; - In plugin/PSL:; - the PSL scene file format; - In plugin/SofaImplicitField: ; - CustomField (to implement implicit field in python and/or cython); - SurfaceMeshFromImplicitField (to generate a surface mesh from an implicit field using a marching cube); - ImplicitFieldViewer (to visualize the implicit surface); - python/difigeom (a complete library to make complex procedural geometry using ; distance field and python+cython) ; - In plugin/CGAL: ; - SurfaceMeshFromImplicitField (generate a surface mesh from an implicit field using CGAL); - VolumeMeshFromImplicitField (generates a tetrahedral mesh from implicit field using CGAL) . And you ? Do you have things that you would like to have integrated ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517
https://github.com/sofa-framework/sofa/issues/517:280,Deployability,integrat,integration,280,"Hello,. I think it would be great (if not mandatory) to have in this release of Sofa new features and not only bug fixes. . To make that possible I suggest to use the SOFA_WITH_EXPERIMENTAL_FEATURES options to conditionally activate plugins or component that are in their way for integration but are not considered as stable enough or that may be subject to API change in 18.06. Those should print a warning message in their init function if used. . If agreed on the principle of allowing EXPERIMENTAL new components in 17.12 I have the following features/component to propose (all are located in plugins):; - In plugin/PSL:; - the PSL scene file format; - In plugin/SofaImplicitField: ; - CustomField (to implement implicit field in python and/or cython); - SurfaceMeshFromImplicitField (to generate a surface mesh from an implicit field using a marching cube); - ImplicitFieldViewer (to visualize the implicit surface); - python/difigeom (a complete library to make complex procedural geometry using ; distance field and python+cython) ; - In plugin/CGAL: ; - SurfaceMeshFromImplicitField (generate a surface mesh from an implicit field using CGAL); - VolumeMeshFromImplicitField (generates a tetrahedral mesh from implicit field using CGAL) . And you ? Do you have things that you would like to have integrated ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517
https://github.com/sofa-framework/sofa/issues/517:1303,Deployability,integrat,integrated,1303,"Hello,. I think it would be great (if not mandatory) to have in this release of Sofa new features and not only bug fixes. . To make that possible I suggest to use the SOFA_WITH_EXPERIMENTAL_FEATURES options to conditionally activate plugins or component that are in their way for integration but are not considered as stable enough or that may be subject to API change in 18.06. Those should print a warning message in their init function if used. . If agreed on the principle of allowing EXPERIMENTAL new components in 17.12 I have the following features/component to propose (all are located in plugins):; - In plugin/PSL:; - the PSL scene file format; - In plugin/SofaImplicitField: ; - CustomField (to implement implicit field in python and/or cython); - SurfaceMeshFromImplicitField (to generate a surface mesh from an implicit field using a marching cube); - ImplicitFieldViewer (to visualize the implicit surface); - python/difigeom (a complete library to make complex procedural geometry using ; distance field and python+cython) ; - In plugin/CGAL: ; - SurfaceMeshFromImplicitField (generate a surface mesh from an implicit field using CGAL); - VolumeMeshFromImplicitField (generates a tetrahedral mesh from implicit field using CGAL) . And you ? Do you have things that you would like to have integrated ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517
https://github.com/sofa-framework/sofa/issues/517:280,Integrability,integrat,integration,280,"Hello,. I think it would be great (if not mandatory) to have in this release of Sofa new features and not only bug fixes. . To make that possible I suggest to use the SOFA_WITH_EXPERIMENTAL_FEATURES options to conditionally activate plugins or component that are in their way for integration but are not considered as stable enough or that may be subject to API change in 18.06. Those should print a warning message in their init function if used. . If agreed on the principle of allowing EXPERIMENTAL new components in 17.12 I have the following features/component to propose (all are located in plugins):; - In plugin/PSL:; - the PSL scene file format; - In plugin/SofaImplicitField: ; - CustomField (to implement implicit field in python and/or cython); - SurfaceMeshFromImplicitField (to generate a surface mesh from an implicit field using a marching cube); - ImplicitFieldViewer (to visualize the implicit surface); - python/difigeom (a complete library to make complex procedural geometry using ; distance field and python+cython) ; - In plugin/CGAL: ; - SurfaceMeshFromImplicitField (generate a surface mesh from an implicit field using CGAL); - VolumeMeshFromImplicitField (generates a tetrahedral mesh from implicit field using CGAL) . And you ? Do you have things that you would like to have integrated ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517
https://github.com/sofa-framework/sofa/issues/517:408,Integrability,message,message,408,"Hello,. I think it would be great (if not mandatory) to have in this release of Sofa new features and not only bug fixes. . To make that possible I suggest to use the SOFA_WITH_EXPERIMENTAL_FEATURES options to conditionally activate plugins or component that are in their way for integration but are not considered as stable enough or that may be subject to API change in 18.06. Those should print a warning message in their init function if used. . If agreed on the principle of allowing EXPERIMENTAL new components in 17.12 I have the following features/component to propose (all are located in plugins):; - In plugin/PSL:; - the PSL scene file format; - In plugin/SofaImplicitField: ; - CustomField (to implement implicit field in python and/or cython); - SurfaceMeshFromImplicitField (to generate a surface mesh from an implicit field using a marching cube); - ImplicitFieldViewer (to visualize the implicit surface); - python/difigeom (a complete library to make complex procedural geometry using ; distance field and python+cython) ; - In plugin/CGAL: ; - SurfaceMeshFromImplicitField (generate a surface mesh from an implicit field using CGAL); - VolumeMeshFromImplicitField (generates a tetrahedral mesh from implicit field using CGAL) . And you ? Do you have things that you would like to have integrated ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517
https://github.com/sofa-framework/sofa/issues/517:1303,Integrability,integrat,integrated,1303,"Hello,. I think it would be great (if not mandatory) to have in this release of Sofa new features and not only bug fixes. . To make that possible I suggest to use the SOFA_WITH_EXPERIMENTAL_FEATURES options to conditionally activate plugins or component that are in their way for integration but are not considered as stable enough or that may be subject to API change in 18.06. Those should print a warning message in their init function if used. . If agreed on the principle of allowing EXPERIMENTAL new components in 17.12 I have the following features/component to propose (all are located in plugins):; - In plugin/PSL:; - the PSL scene file format; - In plugin/SofaImplicitField: ; - CustomField (to implement implicit field in python and/or cython); - SurfaceMeshFromImplicitField (to generate a surface mesh from an implicit field using a marching cube); - ImplicitFieldViewer (to visualize the implicit surface); - python/difigeom (a complete library to make complex procedural geometry using ; distance field and python+cython) ; - In plugin/CGAL: ; - SurfaceMeshFromImplicitField (generate a surface mesh from an implicit field using CGAL); - VolumeMeshFromImplicitField (generates a tetrahedral mesh from implicit field using CGAL) . And you ? Do you have things that you would like to have integrated ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517
https://github.com/sofa-framework/sofa/issues/517:233,Modifiability,plugin,plugins,233,"Hello,. I think it would be great (if not mandatory) to have in this release of Sofa new features and not only bug fixes. . To make that possible I suggest to use the SOFA_WITH_EXPERIMENTAL_FEATURES options to conditionally activate plugins or component that are in their way for integration but are not considered as stable enough or that may be subject to API change in 18.06. Those should print a warning message in their init function if used. . If agreed on the principle of allowing EXPERIMENTAL new components in 17.12 I have the following features/component to propose (all are located in plugins):; - In plugin/PSL:; - the PSL scene file format; - In plugin/SofaImplicitField: ; - CustomField (to implement implicit field in python and/or cython); - SurfaceMeshFromImplicitField (to generate a surface mesh from an implicit field using a marching cube); - ImplicitFieldViewer (to visualize the implicit surface); - python/difigeom (a complete library to make complex procedural geometry using ; distance field and python+cython) ; - In plugin/CGAL: ; - SurfaceMeshFromImplicitField (generate a surface mesh from an implicit field using CGAL); - VolumeMeshFromImplicitField (generates a tetrahedral mesh from implicit field using CGAL) . And you ? Do you have things that you would like to have integrated ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517
https://github.com/sofa-framework/sofa/issues/517:597,Modifiability,plugin,plugins,597,"Hello,. I think it would be great (if not mandatory) to have in this release of Sofa new features and not only bug fixes. . To make that possible I suggest to use the SOFA_WITH_EXPERIMENTAL_FEATURES options to conditionally activate plugins or component that are in their way for integration but are not considered as stable enough or that may be subject to API change in 18.06. Those should print a warning message in their init function if used. . If agreed on the principle of allowing EXPERIMENTAL new components in 17.12 I have the following features/component to propose (all are located in plugins):; - In plugin/PSL:; - the PSL scene file format; - In plugin/SofaImplicitField: ; - CustomField (to implement implicit field in python and/or cython); - SurfaceMeshFromImplicitField (to generate a surface mesh from an implicit field using a marching cube); - ImplicitFieldViewer (to visualize the implicit surface); - python/difigeom (a complete library to make complex procedural geometry using ; distance field and python+cython) ; - In plugin/CGAL: ; - SurfaceMeshFromImplicitField (generate a surface mesh from an implicit field using CGAL); - VolumeMeshFromImplicitField (generates a tetrahedral mesh from implicit field using CGAL) . And you ? Do you have things that you would like to have integrated ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517
https://github.com/sofa-framework/sofa/issues/517:613,Modifiability,plugin,plugin,613,"Hello,. I think it would be great (if not mandatory) to have in this release of Sofa new features and not only bug fixes. . To make that possible I suggest to use the SOFA_WITH_EXPERIMENTAL_FEATURES options to conditionally activate plugins or component that are in their way for integration but are not considered as stable enough or that may be subject to API change in 18.06. Those should print a warning message in their init function if used. . If agreed on the principle of allowing EXPERIMENTAL new components in 17.12 I have the following features/component to propose (all are located in plugins):; - In plugin/PSL:; - the PSL scene file format; - In plugin/SofaImplicitField: ; - CustomField (to implement implicit field in python and/or cython); - SurfaceMeshFromImplicitField (to generate a surface mesh from an implicit field using a marching cube); - ImplicitFieldViewer (to visualize the implicit surface); - python/difigeom (a complete library to make complex procedural geometry using ; distance field and python+cython) ; - In plugin/CGAL: ; - SurfaceMeshFromImplicitField (generate a surface mesh from an implicit field using CGAL); - VolumeMeshFromImplicitField (generates a tetrahedral mesh from implicit field using CGAL) . And you ? Do you have things that you would like to have integrated ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517
https://github.com/sofa-framework/sofa/issues/517:660,Modifiability,plugin,plugin,660,"Hello,. I think it would be great (if not mandatory) to have in this release of Sofa new features and not only bug fixes. . To make that possible I suggest to use the SOFA_WITH_EXPERIMENTAL_FEATURES options to conditionally activate plugins or component that are in their way for integration but are not considered as stable enough or that may be subject to API change in 18.06. Those should print a warning message in their init function if used. . If agreed on the principle of allowing EXPERIMENTAL new components in 17.12 I have the following features/component to propose (all are located in plugins):; - In plugin/PSL:; - the PSL scene file format; - In plugin/SofaImplicitField: ; - CustomField (to implement implicit field in python and/or cython); - SurfaceMeshFromImplicitField (to generate a surface mesh from an implicit field using a marching cube); - ImplicitFieldViewer (to visualize the implicit surface); - python/difigeom (a complete library to make complex procedural geometry using ; distance field and python+cython) ; - In plugin/CGAL: ; - SurfaceMeshFromImplicitField (generate a surface mesh from an implicit field using CGAL); - VolumeMeshFromImplicitField (generates a tetrahedral mesh from implicit field using CGAL) . And you ? Do you have things that you would like to have integrated ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517
https://github.com/sofa-framework/sofa/issues/517:1045,Modifiability,plugin,plugin,1045,"Hello,. I think it would be great (if not mandatory) to have in this release of Sofa new features and not only bug fixes. . To make that possible I suggest to use the SOFA_WITH_EXPERIMENTAL_FEATURES options to conditionally activate plugins or component that are in their way for integration but are not considered as stable enough or that may be subject to API change in 18.06. Those should print a warning message in their init function if used. . If agreed on the principle of allowing EXPERIMENTAL new components in 17.12 I have the following features/component to propose (all are located in plugins):; - In plugin/PSL:; - the PSL scene file format; - In plugin/SofaImplicitField: ; - CustomField (to implement implicit field in python and/or cython); - SurfaceMeshFromImplicitField (to generate a surface mesh from an implicit field using a marching cube); - ImplicitFieldViewer (to visualize the implicit surface); - python/difigeom (a complete library to make complex procedural geometry using ; distance field and python+cython) ; - In plugin/CGAL: ; - SurfaceMeshFromImplicitField (generate a surface mesh from an implicit field using CGAL); - VolumeMeshFromImplicitField (generates a tetrahedral mesh from implicit field using CGAL) . And you ? Do you have things that you would like to have integrated ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517
https://github.com/sofa-framework/sofa/pull/518:303,Availability,failure,failures,303,Following discussions with @fjourdes in #502 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/518
https://github.com/sofa-framework/sofa/pull/518:353,Availability,failure,failures,353,Following discussions with @fjourdes in #502 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/518
https://github.com/sofa-framework/sofa/pull/518:146,Integrability,message,message,146,Following discussions with @fjourdes in #502 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/518
https://github.com/sofa-framework/sofa/pull/518:298,Testability,test,test,298,Following discussions with @fjourdes in #502 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/518
https://github.com/sofa-framework/sofa/pull/518:348,Testability,test,test,348,Following discussions with @fjourdes in #502 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/518
https://github.com/sofa-framework/sofa/pull/519:356,Availability,failure,failures,356,The script would sometimes plot completely wrong info because some numbers were treated as strings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/519
https://github.com/sofa-framework/sofa/pull/519:406,Availability,failure,failures,406,The script would sometimes plot completely wrong info because some numbers were treated as strings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/519
https://github.com/sofa-framework/sofa/pull/519:199,Integrability,message,message,199,The script would sometimes plot completely wrong info because some numbers were treated as strings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/519
https://github.com/sofa-framework/sofa/pull/519:351,Testability,test,test,351,The script would sometimes plot completely wrong info because some numbers were treated as strings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/519
https://github.com/sofa-framework/sofa/pull/519:401,Testability,test,test,401,The script would sometimes plot completely wrong info because some numbers were treated as strings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/519
https://github.com/sofa-framework/sofa/pull/520:327,Availability,failure,failures,327,This removes some override warnings that were (re)introduced recently. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/520
https://github.com/sofa-framework/sofa/pull/520:377,Availability,failure,failures,377,This removes some override warnings that were (re)introduced recently. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/520
https://github.com/sofa-framework/sofa/pull/520:170,Integrability,message,message,170,This removes some override warnings that were (re)introduced recently. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/520
https://github.com/sofa-framework/sofa/pull/520:322,Testability,test,test,322,This removes some override warnings that were (re)introduced recently. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/520
https://github.com/sofa-framework/sofa/pull/520:372,Testability,test,test,372,This removes some override warnings that were (re)introduced recently. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/520
https://github.com/sofa-framework/sofa/pull/521:503,Availability,failure,failures,503,"Some scenes where presenting strange behavior : no object moving; with specific numerical settings, and with some others it was; working fine. This was due to a threshold of CG met at first step; on denominator value. Now force at least one step. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/521
https://github.com/sofa-framework/sofa/pull/521:553,Availability,failure,failures,553,"Some scenes where presenting strange behavior : no object moving; with specific numerical settings, and with some others it was; working fine. This was due to a threshold of CG met at first step; on denominator value. Now force at least one step. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/521
https://github.com/sofa-framework/sofa/pull/521:346,Integrability,message,message,346,"Some scenes where presenting strange behavior : no object moving; with specific numerical settings, and with some others it was; working fine. This was due to a threshold of CG met at first step; on denominator value. Now force at least one step. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/521
https://github.com/sofa-framework/sofa/pull/521:498,Testability,test,test,498,"Some scenes where presenting strange behavior : no object moving; with specific numerical settings, and with some others it was; working fine. This was due to a threshold of CG met at first step; on denominator value. Now force at least one step. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/521
https://github.com/sofa-framework/sofa/pull/521:548,Testability,test,test,548,"Some scenes where presenting strange behavior : no object moving; with specific numerical settings, and with some others it was; working fine. This was due to a threshold of CG met at first step; on denominator value. Now force at least one step. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/521
https://github.com/sofa-framework/sofa/pull/522:484,Availability,failure,failures,484,Small PR on the pickHandler class.; ADD: several tests on pointers != null before accessing them. ; ADD: default ray length parameter in the constructor.; UPDATE: replace most of the .h include in the header by forward classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/522
https://github.com/sofa-framework/sofa/pull/522:534,Availability,failure,failures,534,Small PR on the pickHandler class.; ADD: several tests on pointers != null before accessing them. ; ADD: default ray length parameter in the constructor.; UPDATE: replace most of the .h include in the header by forward classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/522
https://github.com/sofa-framework/sofa/pull/522:155,Deployability,UPDATE,UPDATE,155,Small PR on the pickHandler class.; ADD: several tests on pointers != null before accessing them. ; ADD: default ray length parameter in the constructor.; UPDATE: replace most of the .h include in the header by forward classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/522
https://github.com/sofa-framework/sofa/pull/522:327,Integrability,message,message,327,Small PR on the pickHandler class.; ADD: several tests on pointers != null before accessing them. ; ADD: default ray length parameter in the constructor.; UPDATE: replace most of the .h include in the header by forward classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/522
https://github.com/sofa-framework/sofa/pull/522:82,Security,access,accessing,82,Small PR on the pickHandler class.; ADD: several tests on pointers != null before accessing them. ; ADD: default ray length parameter in the constructor.; UPDATE: replace most of the .h include in the header by forward classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/522
https://github.com/sofa-framework/sofa/pull/522:49,Testability,test,tests,49,Small PR on the pickHandler class.; ADD: several tests on pointers != null before accessing them. ; ADD: default ray length parameter in the constructor.; UPDATE: replace most of the .h include in the header by forward classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/522
https://github.com/sofa-framework/sofa/pull/522:479,Testability,test,test,479,Small PR on the pickHandler class.; ADD: several tests on pointers != null before accessing them. ; ADD: default ray length parameter in the constructor.; UPDATE: replace most of the .h include in the header by forward classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/522
https://github.com/sofa-framework/sofa/pull/522:529,Testability,test,test,529,Small PR on the pickHandler class.; ADD: several tests on pointers != null before accessing them. ; ADD: default ray length parameter in the constructor.; UPDATE: replace most of the .h include in the header by forward classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/522
https://github.com/sofa-framework/sofa/pull/523:482,Availability,failure,failures,482,"The PLUGIN_SOFASPHFLUID option was not taken into account by the CUDA plugin, so it would try to link against that plugin even if it was not compiled with SOFA. There was also a file that was included twice in CMakeLists.txt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/523
https://github.com/sofa-framework/sofa/pull/523:532,Availability,failure,failures,532,"The PLUGIN_SOFASPHFLUID option was not taken into account by the CUDA plugin, so it would try to link against that plugin even if it was not compiled with SOFA. There was also a file that was included twice in CMakeLists.txt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/523
https://github.com/sofa-framework/sofa/pull/523:325,Integrability,message,message,325,"The PLUGIN_SOFASPHFLUID option was not taken into account by the CUDA plugin, so it would try to link against that plugin even if it was not compiled with SOFA. There was also a file that was included twice in CMakeLists.txt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/523
https://github.com/sofa-framework/sofa/pull/523:70,Modifiability,plugin,plugin,70,"The PLUGIN_SOFASPHFLUID option was not taken into account by the CUDA plugin, so it would try to link against that plugin even if it was not compiled with SOFA. There was also a file that was included twice in CMakeLists.txt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/523
https://github.com/sofa-framework/sofa/pull/523:115,Modifiability,plugin,plugin,115,"The PLUGIN_SOFASPHFLUID option was not taken into account by the CUDA plugin, so it would try to link against that plugin even if it was not compiled with SOFA. There was also a file that was included twice in CMakeLists.txt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/523
https://github.com/sofa-framework/sofa/pull/523:477,Testability,test,test,477,"The PLUGIN_SOFASPHFLUID option was not taken into account by the CUDA plugin, so it would try to link against that plugin even if it was not compiled with SOFA. There was also a file that was included twice in CMakeLists.txt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/523
https://github.com/sofa-framework/sofa/pull/523:527,Testability,test,test,527,"The PLUGIN_SOFASPHFLUID option was not taken into account by the CUDA plugin, so it would try to link against that plugin even if it was not compiled with SOFA. There was also a file that was included twice in CMakeLists.txt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/523
https://github.com/sofa-framework/sofa/pull/524:895,Availability,failure,failures,895,"The user was never informed that its scene does not compute bbox.; Consequently the viewer settings based on the bbox are messed up. This PR will at least warn the user that he needs to either:; - add a component which implements computeBBox; - implement itself in its own components; - force set bbox=""minx miny minz maxx maxy maxz"" parameter in a node/component. The logic would want to set it in the root node.; This PR fixes also the fact that the bbox parameter was being ignored by the BBox computing visitors. . This PR is related to issue #29, but it does not compute BBox automatically so #29 should not be closed, in my opinion. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524
https://github.com/sofa-framework/sofa/pull/524:945,Availability,failure,failures,945,"The user was never informed that its scene does not compute bbox.; Consequently the viewer settings based on the bbox are messed up. This PR will at least warn the user that he needs to either:; - add a component which implements computeBBox; - implement itself in its own components; - force set bbox=""minx miny minz maxx maxy maxz"" parameter in a node/component. The logic would want to set it in the root node.; This PR fixes also the fact that the bbox parameter was being ignored by the BBox computing visitors. . This PR is related to issue #29, but it does not compute BBox automatically so #29 should not be closed, in my opinion. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524
https://github.com/sofa-framework/sofa/pull/524:738,Integrability,message,message,738,"The user was never informed that its scene does not compute bbox.; Consequently the viewer settings based on the bbox are messed up. This PR will at least warn the user that he needs to either:; - add a component which implements computeBBox; - implement itself in its own components; - force set bbox=""minx miny minz maxx maxy maxz"" parameter in a node/component. The logic would want to set it in the root node.; This PR fixes also the fact that the bbox parameter was being ignored by the BBox computing visitors. . This PR is related to issue #29, but it does not compute BBox automatically so #29 should not be closed, in my opinion. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524
https://github.com/sofa-framework/sofa/pull/524:369,Testability,log,logic,369,"The user was never informed that its scene does not compute bbox.; Consequently the viewer settings based on the bbox are messed up. This PR will at least warn the user that he needs to either:; - add a component which implements computeBBox; - implement itself in its own components; - force set bbox=""minx miny minz maxx maxy maxz"" parameter in a node/component. The logic would want to set it in the root node.; This PR fixes also the fact that the bbox parameter was being ignored by the BBox computing visitors. . This PR is related to issue #29, but it does not compute BBox automatically so #29 should not be closed, in my opinion. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524
https://github.com/sofa-framework/sofa/pull/524:890,Testability,test,test,890,"The user was never informed that its scene does not compute bbox.; Consequently the viewer settings based on the bbox are messed up. This PR will at least warn the user that he needs to either:; - add a component which implements computeBBox; - implement itself in its own components; - force set bbox=""minx miny minz maxx maxy maxz"" parameter in a node/component. The logic would want to set it in the root node.; This PR fixes also the fact that the bbox parameter was being ignored by the BBox computing visitors. . This PR is related to issue #29, but it does not compute BBox automatically so #29 should not be closed, in my opinion. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524
https://github.com/sofa-framework/sofa/pull/524:940,Testability,test,test,940,"The user was never informed that its scene does not compute bbox.; Consequently the viewer settings based on the bbox are messed up. This PR will at least warn the user that he needs to either:; - add a component which implements computeBBox; - implement itself in its own components; - force set bbox=""minx miny minz maxx maxy maxz"" parameter in a node/component. The logic would want to set it in the root node.; This PR fixes also the fact that the bbox parameter was being ignored by the BBox computing visitors. . This PR is related to issue #29, but it does not compute BBox automatically so #29 should not be closed, in my opinion. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524
https://github.com/sofa-framework/sofa/pull/525:612,Availability,failure,failures,612,"To use a LinearForceField, we need to specify a series of key times associated with forces. However, when simulation time goes beyond the last key time, the force becomes zero instantly. This PR changes it so that it stays at the last specified force instead.; There are a few more small changes to remove some warnings and to use SOFA coding conventions. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/525
https://github.com/sofa-framework/sofa/pull/525:662,Availability,failure,failures,662,"To use a LinearForceField, we need to specify a series of key times associated with forces. However, when simulation time goes beyond the last key time, the force becomes zero instantly. This PR changes it so that it stays at the last specified force instead.; There are a few more small changes to remove some warnings and to use SOFA coding conventions. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/525
https://github.com/sofa-framework/sofa/pull/525:455,Integrability,message,message,455,"To use a LinearForceField, we need to specify a series of key times associated with forces. However, when simulation time goes beyond the last key time, the force becomes zero instantly. This PR changes it so that it stays at the last specified force instead.; There are a few more small changes to remove some warnings and to use SOFA coding conventions. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/525
https://github.com/sofa-framework/sofa/pull/525:607,Testability,test,test,607,"To use a LinearForceField, we need to specify a series of key times associated with forces. However, when simulation time goes beyond the last key time, the force becomes zero instantly. This PR changes it so that it stays at the last specified force instead.; There are a few more small changes to remove some warnings and to use SOFA coding conventions. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/525
https://github.com/sofa-framework/sofa/pull/525:657,Testability,test,test,657,"To use a LinearForceField, we need to specify a series of key times associated with forces. However, when simulation time goes beyond the last key time, the force becomes zero instantly. This PR changes it so that it stays at the last specified force instead.; There are a few more small changes to remove some warnings and to use SOFA coding conventions. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/525
https://github.com/sofa-framework/sofa/pull/526:642,Availability,failure,failures,642,"fixing #238 ; This fix solves the segfault at startup that intel-powered linux machines experience.; It should be a linux-specific bugfix to my understanding.; If anyone knows a clean way of probing whether or not a ""Core profile"" context would be created (something better than parsing lspci to see if we're runing an intel GPU...), I'll update this PR accordingly. Anyone to review?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526
https://github.com/sofa-framework/sofa/pull/526:692,Availability,failure,failures,692,"fixing #238 ; This fix solves the segfault at startup that intel-powered linux machines experience.; It should be a linux-specific bugfix to my understanding.; If anyone knows a clean way of probing whether or not a ""Core profile"" context would be created (something better than parsing lspci to see if we're runing an intel GPU...), I'll update this PR accordingly. Anyone to review?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526
https://github.com/sofa-framework/sofa/pull/526:339,Deployability,update,update,339,"fixing #238 ; This fix solves the segfault at startup that intel-powered linux machines experience.; It should be a linux-specific bugfix to my understanding.; If anyone knows a clean way of probing whether or not a ""Core profile"" context would be created (something better than parsing lspci to see if we're runing an intel GPU...), I'll update this PR accordingly. Anyone to review?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526
https://github.com/sofa-framework/sofa/pull/526:65,Energy Efficiency,power,powered,65,"fixing #238 ; This fix solves the segfault at startup that intel-powered linux machines experience.; It should be a linux-specific bugfix to my understanding.; If anyone knows a clean way of probing whether or not a ""Core profile"" context would be created (something better than parsing lspci to see if we're runing an intel GPU...), I'll update this PR accordingly. Anyone to review?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526
https://github.com/sofa-framework/sofa/pull/526:485,Integrability,message,message,485,"fixing #238 ; This fix solves the segfault at startup that intel-powered linux machines experience.; It should be a linux-specific bugfix to my understanding.; If anyone knows a clean way of probing whether or not a ""Core profile"" context would be created (something better than parsing lspci to see if we're runing an intel GPU...), I'll update this PR accordingly. Anyone to review?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526
https://github.com/sofa-framework/sofa/pull/526:637,Testability,test,test,637,"fixing #238 ; This fix solves the segfault at startup that intel-powered linux machines experience.; It should be a linux-specific bugfix to my understanding.; If anyone knows a clean way of probing whether or not a ""Core profile"" context would be created (something better than parsing lspci to see if we're runing an intel GPU...), I'll update this PR accordingly. Anyone to review?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526
https://github.com/sofa-framework/sofa/pull/526:687,Testability,test,test,687,"fixing #238 ; This fix solves the segfault at startup that intel-powered linux machines experience.; It should be a linux-specific bugfix to my understanding.; If anyone knows a clean way of probing whether or not a ""Core profile"" context would be created (something better than parsing lspci to see if we're runing an intel GPU...), I'll update this PR accordingly. Anyone to review?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526
https://github.com/sofa-framework/sofa/pull/527:256,Availability,failure,failures,256,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/527
https://github.com/sofa-framework/sofa/pull/527:306,Availability,failure,failures,306,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/527
https://github.com/sofa-framework/sofa/pull/527:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/527
https://github.com/sofa-framework/sofa/pull/527:251,Testability,test,test,251,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/527
https://github.com/sofa-framework/sofa/pull/527:301,Testability,test,test,301,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/527
https://github.com/sofa-framework/sofa/issues/529:304,Security,access,accessed,304,I am wondering why the fields `nbPoints` and `points`in [PointSetTopologyContainer](https://github.com/sofa-framework/sofa/blob/463ad43061881fb94efc4366a80e3d1f9e99c4a1/SofaKernel/modules/SofaBaseTopology/PointSetTopologyContainer.h) are of type Data _and_ private in the class. They can not be directly accessed from the outside. They could also be a simple `unsiged int` and `helper::vector`... Is it for serialisation ?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/529
https://github.com/sofa-framework/sofa/issues/529:352,Usability,simpl,simple,352,I am wondering why the fields `nbPoints` and `points`in [PointSetTopologyContainer](https://github.com/sofa-framework/sofa/blob/463ad43061881fb94efc4366a80e3d1f9e99c4a1/SofaKernel/modules/SofaBaseTopology/PointSetTopologyContainer.h) are of type Data _and_ private in the class. They can not be directly accessed from the outside. They could also be a simple `unsiged int` and `helper::vector`... Is it for serialisation ?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/529
https://github.com/sofa-framework/sofa/pull/530:742,Availability,failure,failures,742,Currently there is the SOFA_EXTERNAL_DIRECTORY to add out-of-tree; directory in the compilation process. But when this directory contains; plugins those one are not handled the same way as are the one in; application/plugin. To unify that I added a SOFA_EXTERNAL_PLUGIN option and; did minimal change to the 'sofa_add_generic' macro to detect and; handle out of tree directory. So if you want to add external plugin you can use SOFA_EXTERNAL_PLUGIN; instead of SOFA_EXTERNAL_DIRECTORY. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530
https://github.com/sofa-framework/sofa/pull/530:792,Availability,failure,failures,792,Currently there is the SOFA_EXTERNAL_DIRECTORY to add out-of-tree; directory in the compilation process. But when this directory contains; plugins those one are not handled the same way as are the one in; application/plugin. To unify that I added a SOFA_EXTERNAL_PLUGIN option and; did minimal change to the 'sofa_add_generic' macro to detect and; handle out of tree directory. So if you want to add external plugin you can use SOFA_EXTERNAL_PLUGIN; instead of SOFA_EXTERNAL_DIRECTORY. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530
https://github.com/sofa-framework/sofa/pull/530:585,Integrability,message,message,585,Currently there is the SOFA_EXTERNAL_DIRECTORY to add out-of-tree; directory in the compilation process. But when this directory contains; plugins those one are not handled the same way as are the one in; application/plugin. To unify that I added a SOFA_EXTERNAL_PLUGIN option and; did minimal change to the 'sofa_add_generic' macro to detect and; handle out of tree directory. So if you want to add external plugin you can use SOFA_EXTERNAL_PLUGIN; instead of SOFA_EXTERNAL_DIRECTORY. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530
https://github.com/sofa-framework/sofa/pull/530:139,Modifiability,plugin,plugins,139,Currently there is the SOFA_EXTERNAL_DIRECTORY to add out-of-tree; directory in the compilation process. But when this directory contains; plugins those one are not handled the same way as are the one in; application/plugin. To unify that I added a SOFA_EXTERNAL_PLUGIN option and; did minimal change to the 'sofa_add_generic' macro to detect and; handle out of tree directory. So if you want to add external plugin you can use SOFA_EXTERNAL_PLUGIN; instead of SOFA_EXTERNAL_DIRECTORY. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530
https://github.com/sofa-framework/sofa/pull/530:217,Modifiability,plugin,plugin,217,Currently there is the SOFA_EXTERNAL_DIRECTORY to add out-of-tree; directory in the compilation process. But when this directory contains; plugins those one are not handled the same way as are the one in; application/plugin. To unify that I added a SOFA_EXTERNAL_PLUGIN option and; did minimal change to the 'sofa_add_generic' macro to detect and; handle out of tree directory. So if you want to add external plugin you can use SOFA_EXTERNAL_PLUGIN; instead of SOFA_EXTERNAL_DIRECTORY. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530
https://github.com/sofa-framework/sofa/pull/530:409,Modifiability,plugin,plugin,409,Currently there is the SOFA_EXTERNAL_DIRECTORY to add out-of-tree; directory in the compilation process. But when this directory contains; plugins those one are not handled the same way as are the one in; application/plugin. To unify that I added a SOFA_EXTERNAL_PLUGIN option and; did minimal change to the 'sofa_add_generic' macro to detect and; handle out of tree directory. So if you want to add external plugin you can use SOFA_EXTERNAL_PLUGIN; instead of SOFA_EXTERNAL_DIRECTORY. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530
https://github.com/sofa-framework/sofa/pull/530:336,Safety,detect,detect,336,Currently there is the SOFA_EXTERNAL_DIRECTORY to add out-of-tree; directory in the compilation process. But when this directory contains; plugins those one are not handled the same way as are the one in; application/plugin. To unify that I added a SOFA_EXTERNAL_PLUGIN option and; did minimal change to the 'sofa_add_generic' macro to detect and; handle out of tree directory. So if you want to add external plugin you can use SOFA_EXTERNAL_PLUGIN; instead of SOFA_EXTERNAL_DIRECTORY. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530
https://github.com/sofa-framework/sofa/pull/530:737,Testability,test,test,737,Currently there is the SOFA_EXTERNAL_DIRECTORY to add out-of-tree; directory in the compilation process. But when this directory contains; plugins those one are not handled the same way as are the one in; application/plugin. To unify that I added a SOFA_EXTERNAL_PLUGIN option and; did minimal change to the 'sofa_add_generic' macro to detect and; handle out of tree directory. So if you want to add external plugin you can use SOFA_EXTERNAL_PLUGIN; instead of SOFA_EXTERNAL_DIRECTORY. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530
https://github.com/sofa-framework/sofa/pull/530:787,Testability,test,test,787,Currently there is the SOFA_EXTERNAL_DIRECTORY to add out-of-tree; directory in the compilation process. But when this directory contains; plugins those one are not handled the same way as are the one in; application/plugin. To unify that I added a SOFA_EXTERNAL_PLUGIN option and; did minimal change to the 'sofa_add_generic' macro to detect and; handle out of tree directory. So if you want to add external plugin you can use SOFA_EXTERNAL_PLUGIN; instead of SOFA_EXTERNAL_DIRECTORY. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530
https://github.com/sofa-framework/sofa/issues/531:12,Deployability,install,installed,12,"Hi all, ; I installed Sofa (v=17.06, with the Sofapython, Compliant, Image and Flexible pluggins) in a conda environment (conda 4.3.30 with python 2.7.11, numpy 1.13.3) on my computer (macOs 10.13.1). The installation apparently worked fine but when I run a python file it crashes while importing numpy.; More specifically, the crash happens as the framework tries to import the first C++-based module of numpy (=multiarray) see joined file below. I checked the dependency paths and they all point toward the /lib repository of the specific conda env in used.; I also tried to recompile numpy locally and the same problem happened... Does anyone has a clue on what's happening with my setup ?; Thx. PS: numpy works fine in the same conda env in ipython; PPS: I did not use cmake-gui for the compilation but the regular cmake. I used the following compilation flags but I might have missed something : . -DSOFAGUI_QGLVIEWER:BOOL=ON ; -DPLUGIN_FLEXIBLE:BOOL=ON ; -DPLUGIN_COMPLIANT:BOOL=ON ; -DPLUGIN_IMAGE:BOOL=ON ; -DPLUGIN_SOFAPYTHON:BOOL=ON ; -DBoost_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DGLEW_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DGLEW_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libGLEW.dylib ; -DJPEG_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DJPEG_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libjpeg.dylib ; -DPNG_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libpng.dylib ; -DPNG_PNG_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DTIFF_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libtiff.dylib ; -DTIFF_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include . ![screen shot 2017-11-27 at 14 58 33](https://us",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531
https://github.com/sofa-framework/sofa/issues/531:205,Deployability,install,installation,205,"Hi all, ; I installed Sofa (v=17.06, with the Sofapython, Compliant, Image and Flexible pluggins) in a conda environment (conda 4.3.30 with python 2.7.11, numpy 1.13.3) on my computer (macOs 10.13.1). The installation apparently worked fine but when I run a python file it crashes while importing numpy.; More specifically, the crash happens as the framework tries to import the first C++-based module of numpy (=multiarray) see joined file below. I checked the dependency paths and they all point toward the /lib repository of the specific conda env in used.; I also tried to recompile numpy locally and the same problem happened... Does anyone has a clue on what's happening with my setup ?; Thx. PS: numpy works fine in the same conda env in ipython; PPS: I did not use cmake-gui for the compilation but the regular cmake. I used the following compilation flags but I might have missed something : . -DSOFAGUI_QGLVIEWER:BOOL=ON ; -DPLUGIN_FLEXIBLE:BOOL=ON ; -DPLUGIN_COMPLIANT:BOOL=ON ; -DPLUGIN_IMAGE:BOOL=ON ; -DPLUGIN_SOFAPYTHON:BOOL=ON ; -DBoost_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DGLEW_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DGLEW_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libGLEW.dylib ; -DJPEG_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DJPEG_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libjpeg.dylib ; -DPNG_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libpng.dylib ; -DPNG_PNG_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DTIFF_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libtiff.dylib ; -DTIFF_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include . ![screen shot 2017-11-27 at 14 58 33](https://us",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531
https://github.com/sofa-framework/sofa/issues/531:462,Integrability,depend,dependency,462,"Hi all, ; I installed Sofa (v=17.06, with the Sofapython, Compliant, Image and Flexible pluggins) in a conda environment (conda 4.3.30 with python 2.7.11, numpy 1.13.3) on my computer (macOs 10.13.1). The installation apparently worked fine but when I run a python file it crashes while importing numpy.; More specifically, the crash happens as the framework tries to import the first C++-based module of numpy (=multiarray) see joined file below. I checked the dependency paths and they all point toward the /lib repository of the specific conda env in used.; I also tried to recompile numpy locally and the same problem happened... Does anyone has a clue on what's happening with my setup ?; Thx. PS: numpy works fine in the same conda env in ipython; PPS: I did not use cmake-gui for the compilation but the regular cmake. I used the following compilation flags but I might have missed something : . -DSOFAGUI_QGLVIEWER:BOOL=ON ; -DPLUGIN_FLEXIBLE:BOOL=ON ; -DPLUGIN_COMPLIANT:BOOL=ON ; -DPLUGIN_IMAGE:BOOL=ON ; -DPLUGIN_SOFAPYTHON:BOOL=ON ; -DBoost_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DGLEW_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DGLEW_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libGLEW.dylib ; -DJPEG_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DJPEG_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libjpeg.dylib ; -DPNG_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libpng.dylib ; -DPNG_PNG_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DTIFF_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libtiff.dylib ; -DTIFF_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include . ![screen shot 2017-11-27 at 14 58 33](https://us",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531
https://github.com/sofa-framework/sofa/issues/531:79,Modifiability,Flexible,Flexible,79,"Hi all, ; I installed Sofa (v=17.06, with the Sofapython, Compliant, Image and Flexible pluggins) in a conda environment (conda 4.3.30 with python 2.7.11, numpy 1.13.3) on my computer (macOs 10.13.1). The installation apparently worked fine but when I run a python file it crashes while importing numpy.; More specifically, the crash happens as the framework tries to import the first C++-based module of numpy (=multiarray) see joined file below. I checked the dependency paths and they all point toward the /lib repository of the specific conda env in used.; I also tried to recompile numpy locally and the same problem happened... Does anyone has a clue on what's happening with my setup ?; Thx. PS: numpy works fine in the same conda env in ipython; PPS: I did not use cmake-gui for the compilation but the regular cmake. I used the following compilation flags but I might have missed something : . -DSOFAGUI_QGLVIEWER:BOOL=ON ; -DPLUGIN_FLEXIBLE:BOOL=ON ; -DPLUGIN_COMPLIANT:BOOL=ON ; -DPLUGIN_IMAGE:BOOL=ON ; -DPLUGIN_SOFAPYTHON:BOOL=ON ; -DBoost_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DGLEW_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DGLEW_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libGLEW.dylib ; -DJPEG_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DJPEG_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libjpeg.dylib ; -DPNG_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libpng.dylib ; -DPNG_PNG_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DTIFF_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libtiff.dylib ; -DTIFF_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include . ![screen shot 2017-11-27 at 14 58 33](https://us",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531
https://github.com/sofa-framework/sofa/pull/532:58,Availability,error,errors,58,"A few people in the Mimesis team have made comments about errors that occur when the USE_MASK option is enabled. This PR simply sets the option as disabled by default, so that users will not unknowingly use it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/532
https://github.com/sofa-framework/sofa/pull/532:467,Availability,failure,failures,467,"A few people in the Mimesis team have made comments about errors that occur when the USE_MASK option is enabled. This PR simply sets the option as disabled by default, so that users will not unknowingly use it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/532
https://github.com/sofa-framework/sofa/pull/532:517,Availability,failure,failures,517,"A few people in the Mimesis team have made comments about errors that occur when the USE_MASK option is enabled. This PR simply sets the option as disabled by default, so that users will not unknowingly use it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/532
https://github.com/sofa-framework/sofa/pull/532:310,Integrability,message,message,310,"A few people in the Mimesis team have made comments about errors that occur when the USE_MASK option is enabled. This PR simply sets the option as disabled by default, so that users will not unknowingly use it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/532
https://github.com/sofa-framework/sofa/pull/532:462,Testability,test,test,462,"A few people in the Mimesis team have made comments about errors that occur when the USE_MASK option is enabled. This PR simply sets the option as disabled by default, so that users will not unknowingly use it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/532
https://github.com/sofa-framework/sofa/pull/532:512,Testability,test,test,512,"A few people in the Mimesis team have made comments about errors that occur when the USE_MASK option is enabled. This PR simply sets the option as disabled by default, so that users will not unknowingly use it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/532
https://github.com/sofa-framework/sofa/pull/532:121,Usability,simpl,simply,121,"A few people in the Mimesis team have made comments about errors that occur when the USE_MASK option is enabled. This PR simply sets the option as disabled by default, so that users will not unknowingly use it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/532
https://github.com/sofa-framework/sofa/pull/533:411,Availability,failure,failures,411,"Capture::saveScreenshot was not destroying the content of the Image pointer.; This solves this, plus adds one check on the pointer and add message output. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/533
https://github.com/sofa-framework/sofa/pull/533:461,Availability,failure,failures,461,"Capture::saveScreenshot was not destroying the content of the Image pointer.; This solves this, plus adds one check on the pointer and add message output. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/533
https://github.com/sofa-framework/sofa/pull/533:139,Integrability,message,message,139,"Capture::saveScreenshot was not destroying the content of the Image pointer.; This solves this, plus adds one check on the pointer and add message output. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/533
https://github.com/sofa-framework/sofa/pull/533:254,Integrability,message,message,254,"Capture::saveScreenshot was not destroying the content of the Image pointer.; This solves this, plus adds one check on the pointer and add message output. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/533
https://github.com/sofa-framework/sofa/pull/533:406,Testability,test,test,406,"Capture::saveScreenshot was not destroying the content of the Image pointer.; This solves this, plus adds one check on the pointer and add message output. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/533
https://github.com/sofa-framework/sofa/pull/533:456,Testability,test,test,456,"Capture::saveScreenshot was not destroying the content of the Image pointer.; This solves this, plus adds one check on the pointer and add message output. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/533
https://github.com/sofa-framework/sofa/pull/534:727,Availability,failure,failures,727,"Here is a plugin communication ; The purpose of this plugin is to add ability to the users to simply send/receive data´s from sofa. Instead of creating many plugins for each implementation/hardware, we propose to regroup all of them in one communication plugin. . Actually there is two network protocol implemented : ; - OSC (has packet size limiations ...); - ZMQ. Improvements : ; - better thread safe implementation; - more types; - add others library implementation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534
https://github.com/sofa-framework/sofa/pull/534:777,Availability,failure,failures,777,"Here is a plugin communication ; The purpose of this plugin is to add ability to the users to simply send/receive data´s from sofa. Instead of creating many plugins for each implementation/hardware, we propose to regroup all of them in one communication plugin. . Actually there is two network protocol implemented : ; - OSC (has packet size limiations ...); - ZMQ. Improvements : ; - better thread safe implementation; - more types; - add others library implementation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534
https://github.com/sofa-framework/sofa/pull/534:294,Integrability,protocol,protocol,294,"Here is a plugin communication ; The purpose of this plugin is to add ability to the users to simply send/receive data´s from sofa. Instead of creating many plugins for each implementation/hardware, we propose to regroup all of them in one communication plugin. . Actually there is two network protocol implemented : ; - OSC (has packet size limiations ...); - ZMQ. Improvements : ; - better thread safe implementation; - more types; - add others library implementation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534
https://github.com/sofa-framework/sofa/pull/534:570,Integrability,message,message,570,"Here is a plugin communication ; The purpose of this plugin is to add ability to the users to simply send/receive data´s from sofa. Instead of creating many plugins for each implementation/hardware, we propose to regroup all of them in one communication plugin. . Actually there is two network protocol implemented : ; - OSC (has packet size limiations ...); - ZMQ. Improvements : ; - better thread safe implementation; - more types; - add others library implementation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534
https://github.com/sofa-framework/sofa/pull/534:10,Modifiability,plugin,plugin,10,"Here is a plugin communication ; The purpose of this plugin is to add ability to the users to simply send/receive data´s from sofa. Instead of creating many plugins for each implementation/hardware, we propose to regroup all of them in one communication plugin. . Actually there is two network protocol implemented : ; - OSC (has packet size limiations ...); - ZMQ. Improvements : ; - better thread safe implementation; - more types; - add others library implementation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534
https://github.com/sofa-framework/sofa/pull/534:53,Modifiability,plugin,plugin,53,"Here is a plugin communication ; The purpose of this plugin is to add ability to the users to simply send/receive data´s from sofa. Instead of creating many plugins for each implementation/hardware, we propose to regroup all of them in one communication plugin. . Actually there is two network protocol implemented : ; - OSC (has packet size limiations ...); - ZMQ. Improvements : ; - better thread safe implementation; - more types; - add others library implementation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534
https://github.com/sofa-framework/sofa/pull/534:157,Modifiability,plugin,plugins,157,"Here is a plugin communication ; The purpose of this plugin is to add ability to the users to simply send/receive data´s from sofa. Instead of creating many plugins for each implementation/hardware, we propose to regroup all of them in one communication plugin. . Actually there is two network protocol implemented : ; - OSC (has packet size limiations ...); - ZMQ. Improvements : ; - better thread safe implementation; - more types; - add others library implementation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534
https://github.com/sofa-framework/sofa/pull/534:254,Modifiability,plugin,plugin,254,"Here is a plugin communication ; The purpose of this plugin is to add ability to the users to simply send/receive data´s from sofa. Instead of creating many plugins for each implementation/hardware, we propose to regroup all of them in one communication plugin. . Actually there is two network protocol implemented : ; - OSC (has packet size limiations ...); - ZMQ. Improvements : ; - better thread safe implementation; - more types; - add others library implementation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534
https://github.com/sofa-framework/sofa/pull/534:399,Safety,safe,safe,399,"Here is a plugin communication ; The purpose of this plugin is to add ability to the users to simply send/receive data´s from sofa. Instead of creating many plugins for each implementation/hardware, we propose to regroup all of them in one communication plugin. . Actually there is two network protocol implemented : ; - OSC (has packet size limiations ...); - ZMQ. Improvements : ; - better thread safe implementation; - more types; - add others library implementation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534
https://github.com/sofa-framework/sofa/pull/534:722,Testability,test,test,722,"Here is a plugin communication ; The purpose of this plugin is to add ability to the users to simply send/receive data´s from sofa. Instead of creating many plugins for each implementation/hardware, we propose to regroup all of them in one communication plugin. . Actually there is two network protocol implemented : ; - OSC (has packet size limiations ...); - ZMQ. Improvements : ; - better thread safe implementation; - more types; - add others library implementation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534
https://github.com/sofa-framework/sofa/pull/534:772,Testability,test,test,772,"Here is a plugin communication ; The purpose of this plugin is to add ability to the users to simply send/receive data´s from sofa. Instead of creating many plugins for each implementation/hardware, we propose to regroup all of them in one communication plugin. . Actually there is two network protocol implemented : ; - OSC (has packet size limiations ...); - ZMQ. Improvements : ; - better thread safe implementation; - more types; - add others library implementation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534
https://github.com/sofa-framework/sofa/pull/534:94,Usability,simpl,simply,94,"Here is a plugin communication ; The purpose of this plugin is to add ability to the users to simply send/receive data´s from sofa. Instead of creating many plugins for each implementation/hardware, we propose to regroup all of them in one communication plugin. . Actually there is two network protocol implemented : ; - OSC (has packet size limiations ...); - ZMQ. Improvements : ; - better thread safe implementation; - more types; - add others library implementation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534
https://github.com/sofa-framework/sofa/pull/536:298,Availability,failure,failures,298,normals and vectors to Legacy vtk import. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536
https://github.com/sofa-framework/sofa/pull/536:348,Availability,failure,failures,348,normals and vectors to Legacy vtk import. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536
https://github.com/sofa-framework/sofa/pull/536:141,Integrability,message,message,141,normals and vectors to Legacy vtk import. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536
https://github.com/sofa-framework/sofa/pull/536:293,Testability,test,test,293,normals and vectors to Legacy vtk import. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536
https://github.com/sofa-framework/sofa/pull/536:343,Testability,test,test,343,normals and vectors to Legacy vtk import. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536
https://github.com/sofa-framework/sofa/issues/537:52,Modifiability,plugin,plugin,52,"HeadlessRecorder is, as its name suggest, a new gui plugin who allow users to records sofa visualisation without any windows (batch only). ⚠ Linux only ⚠. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/537
https://github.com/sofa-framework/sofa/pull/538:462,Availability,failure,failures,462,"HeadlessRecorder is, as its name suggest, a new gui plugin who allow users to records sofa visualisation without any windows (batch only). ⚠ Linux only ⚠. https://github.com/sofa-framework/sofa/issues/537. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538
https://github.com/sofa-framework/sofa/pull/538:512,Availability,failure,failures,512,"HeadlessRecorder is, as its name suggest, a new gui plugin who allow users to records sofa visualisation without any windows (batch only). ⚠ Linux only ⚠. https://github.com/sofa-framework/sofa/issues/537. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538
https://github.com/sofa-framework/sofa/pull/538:305,Integrability,message,message,305,"HeadlessRecorder is, as its name suggest, a new gui plugin who allow users to records sofa visualisation without any windows (batch only). ⚠ Linux only ⚠. https://github.com/sofa-framework/sofa/issues/537. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538
https://github.com/sofa-framework/sofa/pull/538:52,Modifiability,plugin,plugin,52,"HeadlessRecorder is, as its name suggest, a new gui plugin who allow users to records sofa visualisation without any windows (batch only). ⚠ Linux only ⚠. https://github.com/sofa-framework/sofa/issues/537. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538
https://github.com/sofa-framework/sofa/pull/538:457,Testability,test,test,457,"HeadlessRecorder is, as its name suggest, a new gui plugin who allow users to records sofa visualisation without any windows (batch only). ⚠ Linux only ⚠. https://github.com/sofa-framework/sofa/issues/537. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538
https://github.com/sofa-framework/sofa/pull/538:507,Testability,test,test,507,"HeadlessRecorder is, as its name suggest, a new gui plugin who allow users to records sofa visualisation without any windows (batch only). ⚠ Linux only ⚠. https://github.com/sofa-framework/sofa/issues/537. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538
https://github.com/sofa-framework/sofa/issues/539:282,Availability,toler,tolerance,282,"This bug seems to have been introduced by 0ae8f64fc7145417bb528af039b1b9bd30dfb247. To reproduce the bug, the following scene should normally converge. ```; <?xml version=""1.0""?>; <Node dt=""1"">; <StaticSolver />; 	<CGLinearSolver name=""CGLinearSolver"" printLog=""1"" iterations=""250"" tolerance=""1e-08"" threshold=""1e-08"" />; 	<RegularGridTopology name=""grid"" n=""3 3 25"" min=""0 0 0"" max=""15 15 180"" p0=""0 0 0"" />; 	<MechanicalObject template=""Vec3d"" name=""dof"" src=""@grid"" showObject=""1"" showObjectScale=""5"" />; 	<HexahedronSetTopologyContainer src=""@grid"" />; 	<HexahedronSetGeometryAlgorithms />; 	<HexahedronFEMForceField template=""Vec3d"" method=""small"" poissonRatio=""0.45"" youngModulus=""1.51665"" />; 	<BoxROI name=""fixedROI"" box=""0 0 -3.75 15 15 3.75"" drawBoxes=""1"" />; 	<FixedConstraint indices=""@fixedROI.indices"" />; 	<BoxROI name=""forceROI"" box=""0 0 176.25 15 15 183.75"" drawBoxes=""1"" />; 	<LinearForceField points=""@forceROI.indices"" times=""0 1"" forces=""0 0 0 0 -0.00166667 0"" />; </Node>; ```. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/539
https://github.com/sofa-framework/sofa/pull/540:726,Availability,failure,failures,726,Small improvement on the view of html file associated with scenes. We can now navigate (with backward) between and starting Sofa scene directly with hyperlinks. The windows can also be hidden/displayed and its location preserved. . I cannot prevent myself to also clean small things in RealGUI and SetDirectory/FileSystem. ; But this is very minor. . I made a quick & dirty video to show the results so that you don't need to compile it: ; https://youtu.be/5uumC9f-wzo. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540
https://github.com/sofa-framework/sofa/pull/540:776,Availability,failure,failures,776,Small improvement on the view of html file associated with scenes. We can now navigate (with backward) between and starting Sofa scene directly with hyperlinks. The windows can also be hidden/displayed and its location preserved. . I cannot prevent myself to also clean small things in RealGUI and SetDirectory/FileSystem. ; But this is very minor. . I made a quick & dirty video to show the results so that you don't need to compile it: ; https://youtu.be/5uumC9f-wzo. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540
https://github.com/sofa-framework/sofa/pull/540:569,Integrability,message,message,569,Small improvement on the view of html file associated with scenes. We can now navigate (with backward) between and starting Sofa scene directly with hyperlinks. The windows can also be hidden/displayed and its location preserved. . I cannot prevent myself to also clean small things in RealGUI and SetDirectory/FileSystem. ; But this is very minor. . I made a quick & dirty video to show the results so that you don't need to compile it: ; https://youtu.be/5uumC9f-wzo. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540
https://github.com/sofa-framework/sofa/pull/540:721,Testability,test,test,721,Small improvement on the view of html file associated with scenes. We can now navigate (with backward) between and starting Sofa scene directly with hyperlinks. The windows can also be hidden/displayed and its location preserved. . I cannot prevent myself to also clean small things in RealGUI and SetDirectory/FileSystem. ; But this is very minor. . I made a quick & dirty video to show the results so that you don't need to compile it: ; https://youtu.be/5uumC9f-wzo. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540
https://github.com/sofa-framework/sofa/pull/540:771,Testability,test,test,771,Small improvement on the view of html file associated with scenes. We can now navigate (with backward) between and starting Sofa scene directly with hyperlinks. The windows can also be hidden/displayed and its location preserved. . I cannot prevent myself to also clean small things in RealGUI and SetDirectory/FileSystem. ; But this is very minor. . I made a quick & dirty video to show the results so that you don't need to compile it: ; https://youtu.be/5uumC9f-wzo. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540
https://github.com/sofa-framework/sofa/pull/541:693,Availability,failure,failures,693,"Here is the PR with the PSL plugin to simplify the writing of scene with SOFA. Video with examples:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. The ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541
https://github.com/sofa-framework/sofa/pull/541:743,Availability,failure,failures,743,"Here is the PR with the PSL plugin to simplify the writing of scene with SOFA. Video with examples:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. The ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541
https://github.com/sofa-framework/sofa/pull/541:536,Integrability,message,message,536,"Here is the PR with the PSL plugin to simplify the writing of scene with SOFA. Video with examples:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. The ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541
https://github.com/sofa-framework/sofa/pull/541:28,Modifiability,plugin,plugin,28,"Here is the PR with the PSL plugin to simplify the writing of scene with SOFA. Video with examples:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. The ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541
https://github.com/sofa-framework/sofa/pull/541:254,Modifiability,plugin,plugins,254,"Here is the PR with the PSL plugin to simplify the writing of scene with SOFA. Video with examples:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. The ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541
https://github.com/sofa-framework/sofa/pull/541:420,Modifiability,plugin,plugins,420,"Here is the PR with the PSL plugin to simplify the writing of scene with SOFA. Video with examples:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. The ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541
https://github.com/sofa-framework/sofa/pull/541:688,Testability,test,test,688,"Here is the PR with the PSL plugin to simplify the writing of scene with SOFA. Video with examples:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. The ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541
https://github.com/sofa-framework/sofa/pull/541:738,Testability,test,test,738,"Here is the PR with the PSL plugin to simplify the writing of scene with SOFA. Video with examples:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. The ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541
https://github.com/sofa-framework/sofa/pull/541:38,Usability,simpl,simplify,38,"Here is the PR with the PSL plugin to simplify the writing of scene with SOFA. Video with examples:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. The ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541
https://github.com/sofa-framework/sofa/pull/542:564,Availability,failure,failures,564,For those that are curious about the current status on this branch..you can see the inclusion dependencies in:; https://rawgit.com/SofaDefrost/sofa/reduceInclude2/include_2017_12_18.html. And the same for the current master; https://rawgit.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/542
https://github.com/sofa-framework/sofa/pull/542:614,Availability,failure,failures,614,For those that are curious about the current status on this branch..you can see the inclusion dependencies in:; https://rawgit.com/SofaDefrost/sofa/reduceInclude2/include_2017_12_18.html. And the same for the current master; https://rawgit.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/542
https://github.com/sofa-framework/sofa/pull/542:94,Integrability,depend,dependencies,94,For those that are curious about the current status on this branch..you can see the inclusion dependencies in:; https://rawgit.com/SofaDefrost/sofa/reduceInclude2/include_2017_12_18.html. And the same for the current master; https://rawgit.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/542
https://github.com/sofa-framework/sofa/pull/542:407,Integrability,message,message,407,For those that are curious about the current status on this branch..you can see the inclusion dependencies in:; https://rawgit.com/SofaDefrost/sofa/reduceInclude2/include_2017_12_18.html. And the same for the current master; https://rawgit.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/542
https://github.com/sofa-framework/sofa/pull/542:559,Testability,test,test,559,For those that are curious about the current status on this branch..you can see the inclusion dependencies in:; https://rawgit.com/SofaDefrost/sofa/reduceInclude2/include_2017_12_18.html. And the same for the current master; https://rawgit.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/542
https://github.com/sofa-framework/sofa/pull/542:609,Testability,test,test,609,For those that are curious about the current status on this branch..you can see the inclusion dependencies in:; https://rawgit.com/SofaDefrost/sofa/reduceInclude2/include_2017_12_18.html. And the same for the current master; https://rawgit.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/542
https://github.com/sofa-framework/sofa/issues/543:533,Integrability,depend,dependencies,533,"Dear SOFA community and @sofa-framework/reviewers,. As you know, one of our main objectives is currently to propose a major evolution of SOFA: this is the project ""SOFA-NG"", standing for Next Gen. ; Let us give you some insight about the final plan and the steps to reach these objectives. Any feedback is welcome. ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the necessary modules; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users. ## Steps of implementation. Our concerns; - Focus on non-core components only; - Make the transition as smooth as possible; - Keep the history. Steps to follow; - Propose an architecture and a folder structure; - Decide a place for each component (incrementally); - Create the folder structure in SOFA plugins directory; - Pluginize one by one the components towards their new place. Note that this project; - will be documented, scripts will be provided to help the transition in plugins; - is compatible (can be run in parallel) with the deprecation task. ## Proposed structure. ~~https://annuel2.framapad.org/p/sofang-v0~~; EDIT: latest proposal: https://annuel2.framapad.org/p/sofang-v3. As you can see the structure is quite similar to the old namespace structure of SOFA. ; Feel free to edit/comment this pad or to propose your own version.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543
https://github.com/sofa-framework/sofa/issues/543:367,Modifiability,refactor,refactorize,367,"Dear SOFA community and @sofa-framework/reviewers,. As you know, one of our main objectives is currently to propose a major evolution of SOFA: this is the project ""SOFA-NG"", standing for Next Gen. ; Let us give you some insight about the final plan and the steps to reach these objectives. Any feedback is welcome. ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the necessary modules; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users. ## Steps of implementation. Our concerns; - Focus on non-core components only; - Make the transition as smooth as possible; - Keep the history. Steps to follow; - Propose an architecture and a folder structure; - Decide a place for each component (incrementally); - Create the folder structure in SOFA plugins directory; - Pluginize one by one the components towards their new place. Note that this project; - will be documented, scripts will be provided to help the transition in plugins; - is compatible (can be run in parallel) with the deprecation task. ## Proposed structure. ~~https://annuel2.framapad.org/p/sofang-v0~~; EDIT: latest proposal: https://annuel2.framapad.org/p/sofang-v3. As you can see the structure is quite similar to the old namespace structure of SOFA. ; Feel free to edit/comment this pad or to propose your own version.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543
https://github.com/sofa-framework/sofa/issues/543:445,Modifiability,plugin,plugins,445,"Dear SOFA community and @sofa-framework/reviewers,. As you know, one of our main objectives is currently to propose a major evolution of SOFA: this is the project ""SOFA-NG"", standing for Next Gen. ; Let us give you some insight about the final plan and the steps to reach these objectives. Any feedback is welcome. ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the necessary modules; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users. ## Steps of implementation. Our concerns; - Focus on non-core components only; - Make the transition as smooth as possible; - Keep the history. Steps to follow; - Propose an architecture and a folder structure; - Decide a place for each component (incrementally); - Create the folder structure in SOFA plugins directory; - Pluginize one by one the components towards their new place. Note that this project; - will be documented, scripts will be provided to help the transition in plugins; - is compatible (can be run in parallel) with the deprecation task. ## Proposed structure. ~~https://annuel2.framapad.org/p/sofang-v0~~; EDIT: latest proposal: https://annuel2.framapad.org/p/sofang-v3. As you can see the structure is quite similar to the old namespace structure of SOFA. ; Feel free to edit/comment this pad or to propose your own version.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543
https://github.com/sofa-framework/sofa/issues/543:1023,Modifiability,plugin,plugins,1023,"Dear SOFA community and @sofa-framework/reviewers,. As you know, one of our main objectives is currently to propose a major evolution of SOFA: this is the project ""SOFA-NG"", standing for Next Gen. ; Let us give you some insight about the final plan and the steps to reach these objectives. Any feedback is welcome. ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the necessary modules; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users. ## Steps of implementation. Our concerns; - Focus on non-core components only; - Make the transition as smooth as possible; - Keep the history. Steps to follow; - Propose an architecture and a folder structure; - Decide a place for each component (incrementally); - Create the folder structure in SOFA plugins directory; - Pluginize one by one the components towards their new place. Note that this project; - will be documented, scripts will be provided to help the transition in plugins; - is compatible (can be run in parallel) with the deprecation task. ## Proposed structure. ~~https://annuel2.framapad.org/p/sofang-v0~~; EDIT: latest proposal: https://annuel2.framapad.org/p/sofang-v3. As you can see the structure is quite similar to the old namespace structure of SOFA. ; Feel free to edit/comment this pad or to propose your own version.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543
https://github.com/sofa-framework/sofa/issues/543:1044,Modifiability,Plugin,Pluginize,1044,"Dear SOFA community and @sofa-framework/reviewers,. As you know, one of our main objectives is currently to propose a major evolution of SOFA: this is the project ""SOFA-NG"", standing for Next Gen. ; Let us give you some insight about the final plan and the steps to reach these objectives. Any feedback is welcome. ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the necessary modules; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users. ## Steps of implementation. Our concerns; - Focus on non-core components only; - Make the transition as smooth as possible; - Keep the history. Steps to follow; - Propose an architecture and a folder structure; - Decide a place for each component (incrementally); - Create the folder structure in SOFA plugins directory; - Pluginize one by one the components towards their new place. Note that this project; - will be documented, scripts will be provided to help the transition in plugins; - is compatible (can be run in parallel) with the deprecation task. ## Proposed structure. ~~https://annuel2.framapad.org/p/sofang-v0~~; EDIT: latest proposal: https://annuel2.framapad.org/p/sofang-v3. As you can see the structure is quite similar to the old namespace structure of SOFA. ; Feel free to edit/comment this pad or to propose your own version.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543
https://github.com/sofa-framework/sofa/issues/543:1202,Modifiability,plugin,plugins,1202,"Dear SOFA community and @sofa-framework/reviewers,. As you know, one of our main objectives is currently to propose a major evolution of SOFA: this is the project ""SOFA-NG"", standing for Next Gen. ; Let us give you some insight about the final plan and the steps to reach these objectives. Any feedback is welcome. ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the necessary modules; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users. ## Steps of implementation. Our concerns; - Focus on non-core components only; - Make the transition as smooth as possible; - Keep the history. Steps to follow; - Propose an architecture and a folder structure; - Decide a place for each component (incrementally); - Create the folder structure in SOFA plugins directory; - Pluginize one by one the components towards their new place. Note that this project; - will be documented, scripts will be provided to help the transition in plugins; - is compatible (can be run in parallel) with the deprecation task. ## Proposed structure. ~~https://annuel2.framapad.org/p/sofang-v0~~; EDIT: latest proposal: https://annuel2.framapad.org/p/sofang-v3. As you can see the structure is quite similar to the old namespace structure of SOFA. ; Feel free to edit/comment this pad or to propose your own version.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543
https://github.com/sofa-framework/sofa/issues/543:488,Performance,load,load,488,"Dear SOFA community and @sofa-framework/reviewers,. As you know, one of our main objectives is currently to propose a major evolution of SOFA: this is the project ""SOFA-NG"", standing for Next Gen. ; Let us give you some insight about the final plan and the steps to reach these objectives. Any feedback is welcome. ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the necessary modules; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users. ## Steps of implementation. Our concerns; - Focus on non-core components only; - Make the transition as smooth as possible; - Keep the history. Steps to follow; - Propose an architecture and a folder structure; - Decide a place for each component (incrementally); - Create the folder structure in SOFA plugins directory; - Pluginize one by one the components towards their new place. Note that this project; - will be documented, scripts will be provided to help the transition in plugins; - is compatible (can be run in parallel) with the deprecation task. ## Proposed structure. ~~https://annuel2.framapad.org/p/sofang-v0~~; EDIT: latest proposal: https://annuel2.framapad.org/p/sofang-v3. As you can see the structure is quite similar to the old namespace structure of SOFA. ; Feel free to edit/comment this pad or to propose your own version.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543
https://github.com/sofa-framework/sofa/issues/543:583,Security,validat,validation,583,"Dear SOFA community and @sofa-framework/reviewers,. As you know, one of our main objectives is currently to propose a major evolution of SOFA: this is the project ""SOFA-NG"", standing for Next Gen. ; Let us give you some insight about the final plan and the steps to reach these objectives. Any feedback is welcome. ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the necessary modules; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users. ## Steps of implementation. Our concerns; - Focus on non-core components only; - Make the transition as smooth as possible; - Keep the history. Steps to follow; - Propose an architecture and a folder structure; - Decide a place for each component (incrementally); - Create the folder structure in SOFA plugins directory; - Pluginize one by one the components towards their new place. Note that this project; - will be documented, scripts will be provided to help the transition in plugins; - is compatible (can be run in parallel) with the deprecation task. ## Proposed structure. ~~https://annuel2.framapad.org/p/sofang-v0~~; EDIT: latest proposal: https://annuel2.framapad.org/p/sofang-v3. As you can see the structure is quite similar to the old namespace structure of SOFA. ; Feel free to edit/comment this pad or to propose your own version.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543
https://github.com/sofa-framework/sofa/issues/543:611,Testability,test,test,611,"Dear SOFA community and @sofa-framework/reviewers,. As you know, one of our main objectives is currently to propose a major evolution of SOFA: this is the project ""SOFA-NG"", standing for Next Gen. ; Let us give you some insight about the final plan and the steps to reach these objectives. Any feedback is welcome. ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the necessary modules; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users. ## Steps of implementation. Our concerns; - Focus on non-core components only; - Make the transition as smooth as possible; - Keep the history. Steps to follow; - Propose an architecture and a folder structure; - Decide a place for each component (incrementally); - Create the folder structure in SOFA plugins directory; - Pluginize one by one the components towards their new place. Note that this project; - will be documented, scripts will be provided to help the transition in plugins; - is compatible (can be run in parallel) with the deprecation task. ## Proposed structure. ~~https://annuel2.framapad.org/p/sofang-v0~~; EDIT: latest proposal: https://annuel2.framapad.org/p/sofang-v3. As you can see the structure is quite similar to the old namespace structure of SOFA. ; Feel free to edit/comment this pad or to propose your own version.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543
https://github.com/sofa-framework/sofa/issues/543:294,Usability,feedback,feedback,294,"Dear SOFA community and @sofa-framework/reviewers,. As you know, one of our main objectives is currently to propose a major evolution of SOFA: this is the project ""SOFA-NG"", standing for Next Gen. ; Let us give you some insight about the final plan and the steps to reach these objectives. Any feedback is welcome. ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the necessary modules; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users. ## Steps of implementation. Our concerns; - Focus on non-core components only; - Make the transition as smooth as possible; - Keep the history. Steps to follow; - Propose an architecture and a folder structure; - Decide a place for each component (incrementally); - Create the folder structure in SOFA plugins directory; - Pluginize one by one the components towards their new place. Note that this project; - will be documented, scripts will be provided to help the transition in plugins; - is compatible (can be run in parallel) with the deprecation task. ## Proposed structure. ~~https://annuel2.framapad.org/p/sofang-v0~~; EDIT: latest proposal: https://annuel2.framapad.org/p/sofang-v3. As you can see the structure is quite similar to the old namespace structure of SOFA. ; Feel free to edit/comment this pad or to propose your own version.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543
https://github.com/sofa-framework/sofa/pull/544:392,Availability,failure,failures,392,With this PR you can `find_package(CImgPlugin)` in an other cmake project. Quite useful since this plugin is indeed part of the *core*. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/544
https://github.com/sofa-framework/sofa/pull/544:442,Availability,failure,failures,442,With this PR you can `find_package(CImgPlugin)` in an other cmake project. Quite useful since this plugin is indeed part of the *core*. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/544
https://github.com/sofa-framework/sofa/pull/544:235,Integrability,message,message,235,With this PR you can `find_package(CImgPlugin)` in an other cmake project. Quite useful since this plugin is indeed part of the *core*. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/544
https://github.com/sofa-framework/sofa/pull/544:99,Modifiability,plugin,plugin,99,With this PR you can `find_package(CImgPlugin)` in an other cmake project. Quite useful since this plugin is indeed part of the *core*. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/544
https://github.com/sofa-framework/sofa/pull/544:387,Testability,test,test,387,With this PR you can `find_package(CImgPlugin)` in an other cmake project. Quite useful since this plugin is indeed part of the *core*. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/544
https://github.com/sofa-framework/sofa/pull/544:437,Testability,test,test,437,With this PR you can `find_package(CImgPlugin)` in an other cmake project. Quite useful since this plugin is indeed part of the *core*. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/544
https://github.com/sofa-framework/sofa/pull/545:320,Availability,failure,failures,320,Fixes #464 . Changelog: http://libqglviewer.com/changeLog.html. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/545
https://github.com/sofa-framework/sofa/pull/545:370,Availability,failure,failures,370,Fixes #464 . Changelog: http://libqglviewer.com/changeLog.html. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/545
https://github.com/sofa-framework/sofa/pull/545:163,Integrability,message,message,163,Fixes #464 . Changelog: http://libqglviewer.com/changeLog.html. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/545
https://github.com/sofa-framework/sofa/pull/545:315,Testability,test,test,315,Fixes #464 . Changelog: http://libqglviewer.com/changeLog.html. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/545
https://github.com/sofa-framework/sofa/pull/545:365,Testability,test,test,365,Fixes #464 . Changelog: http://libqglviewer.com/changeLog.html. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/545
https://github.com/sofa-framework/sofa/pull/546:819,Availability,failure,failures,819,"This work aims at having a complete Doxygen documentation of SOFA components, especially concerning their Datas. I used the shell script doxygenDataComments.sh to; 1. Force each Data to be defined on one line; 2. Add an inlined and Doxygen-formatted comment on each Data (if no comment found) copying the description used in `initData`. Obviously this has not a 100% coverage (it ""only"" affects Data<.*> written members) but it's still a very good start. PS: our nightly-generated Doxygen is ready to receive these changes: https://www.sofa-framework.org/newapi. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/546
https://github.com/sofa-framework/sofa/pull/546:869,Availability,failure,failures,869,"This work aims at having a complete Doxygen documentation of SOFA components, especially concerning their Datas. I used the shell script doxygenDataComments.sh to; 1. Force each Data to be defined on one line; 2. Add an inlined and Doxygen-formatted comment on each Data (if no comment found) copying the description used in `initData`. Obviously this has not a 100% coverage (it ""only"" affects Data<.*> written members) but it's still a very good start. PS: our nightly-generated Doxygen is ready to receive these changes: https://www.sofa-framework.org/newapi. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/546
https://github.com/sofa-framework/sofa/pull/546:662,Integrability,message,message,662,"This work aims at having a complete Doxygen documentation of SOFA components, especially concerning their Datas. I used the shell script doxygenDataComments.sh to; 1. Force each Data to be defined on one line; 2. Add an inlined and Doxygen-formatted comment on each Data (if no comment found) copying the description used in `initData`. Obviously this has not a 100% coverage (it ""only"" affects Data<.*> written members) but it's still a very good start. PS: our nightly-generated Doxygen is ready to receive these changes: https://www.sofa-framework.org/newapi. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/546
https://github.com/sofa-framework/sofa/pull/546:814,Testability,test,test,814,"This work aims at having a complete Doxygen documentation of SOFA components, especially concerning their Datas. I used the shell script doxygenDataComments.sh to; 1. Force each Data to be defined on one line; 2. Add an inlined and Doxygen-formatted comment on each Data (if no comment found) copying the description used in `initData`. Obviously this has not a 100% coverage (it ""only"" affects Data<.*> written members) but it's still a very good start. PS: our nightly-generated Doxygen is ready to receive these changes: https://www.sofa-framework.org/newapi. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/546
https://github.com/sofa-framework/sofa/pull/546:864,Testability,test,test,864,"This work aims at having a complete Doxygen documentation of SOFA components, especially concerning their Datas. I used the shell script doxygenDataComments.sh to; 1. Force each Data to be defined on one line; 2. Add an inlined and Doxygen-formatted comment on each Data (if no comment found) copying the description used in `initData`. Obviously this has not a 100% coverage (it ""only"" affects Data<.*> written members) but it's still a very good start. PS: our nightly-generated Doxygen is ready to receive these changes: https://www.sofa-framework.org/newapi. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/546
https://github.com/sofa-framework/sofa/pull/547:400,Availability,failure,failures,400,While working in interactive mode the scenechecker is executed each time the file is reloaded. This is ; not really convenient.. Thus this fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/547
https://github.com/sofa-framework/sofa/pull/547:450,Availability,failure,failures,450,While working in interactive mode the scenechecker is executed each time the file is reloaded. This is ; not really convenient.. Thus this fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/547
https://github.com/sofa-framework/sofa/pull/547:243,Integrability,message,message,243,While working in interactive mode the scenechecker is executed each time the file is reloaded. This is ; not really convenient.. Thus this fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/547
https://github.com/sofa-framework/sofa/pull/547:395,Testability,test,test,395,While working in interactive mode the scenechecker is executed each time the file is reloaded. This is ; not really convenient.. Thus this fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/547
https://github.com/sofa-framework/sofa/pull/547:445,Testability,test,test,445,While working in interactive mode the scenechecker is executed each time the file is reloaded. This is ; not really convenient.. Thus this fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/547
https://github.com/sofa-framework/sofa/pull/548:246,Availability,failure,failures,246,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] do generate LESS warnings.; - [x] do generate LESS unit test failures.; - [x] do generate LESS scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548
https://github.com/sofa-framework/sofa/pull/548:291,Availability,failure,failures,291,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] do generate LESS warnings.; - [x] do generate LESS unit test failures.; - [x] do generate LESS scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548
https://github.com/sofa-framework/sofa/pull/548:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] do generate LESS warnings.; - [x] do generate LESS unit test failures.; - [x] do generate LESS scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548
https://github.com/sofa-framework/sofa/pull/548:241,Testability,test,test,241,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] do generate LESS warnings.; - [x] do generate LESS unit test failures.; - [x] do generate LESS scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548
https://github.com/sofa-framework/sofa/pull/548:286,Testability,test,test,286,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] do generate LESS warnings.; - [x] do generate LESS unit test failures.; - [x] do generate LESS scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548
https://github.com/sofa-framework/sofa/pull/549:467,Availability,failure,failures,467,Small PR to fix SofaPhysicsAPI compilation broken due to changes done in sofa main API on:. - helper::io::Image; - GUIManager::RegisterGUI. Maybe this project should be added to one of the vm of the dashboard?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/549
https://github.com/sofa-framework/sofa/pull/549:517,Availability,failure,failures,517,Small PR to fix SofaPhysicsAPI compilation broken due to changes done in sofa main API on:. - helper::io::Image; - GUIManager::RegisterGUI. Maybe this project should be added to one of the vm of the dashboard?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/549
https://github.com/sofa-framework/sofa/pull/549:310,Integrability,message,message,310,Small PR to fix SofaPhysicsAPI compilation broken due to changes done in sofa main API on:. - helper::io::Image; - GUIManager::RegisterGUI. Maybe this project should be added to one of the vm of the dashboard?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/549
https://github.com/sofa-framework/sofa/pull/549:462,Testability,test,test,462,Small PR to fix SofaPhysicsAPI compilation broken due to changes done in sofa main API on:. - helper::io::Image; - GUIManager::RegisterGUI. Maybe this project should be added to one of the vm of the dashboard?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/549
https://github.com/sofa-framework/sofa/pull/549:512,Testability,test,test,512,Small PR to fix SofaPhysicsAPI compilation broken due to changes done in sofa main API on:. - helper::io::Image; - GUIManager::RegisterGUI. Maybe this project should be added to one of the vm of the dashboard?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/549
https://github.com/sofa-framework/sofa/pull/550:370,Availability,failure,failures,370,After discussion in https://github.com/sofa-framework/sofa/pull/536. Let's use this to nicely format our PRs :-). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/550
https://github.com/sofa-framework/sofa/pull/550:420,Availability,failure,failures,420,After discussion in https://github.com/sofa-framework/sofa/pull/536. Let's use this to nicely format our PRs :-). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/550
https://github.com/sofa-framework/sofa/pull/550:213,Integrability,message,message,213,After discussion in https://github.com/sofa-framework/sofa/pull/536. Let's use this to nicely format our PRs :-). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/550
https://github.com/sofa-framework/sofa/pull/550:365,Testability,test,test,365,After discussion in https://github.com/sofa-framework/sofa/pull/536. Let's use this to nicely format our PRs :-). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/550
https://github.com/sofa-framework/sofa/pull/550:415,Testability,test,test,415,After discussion in https://github.com/sofa-framework/sofa/pull/536. Let's use this to nicely format our PRs :-). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/550
https://github.com/sofa-framework/sofa/pull/553:411,Availability,failure,failures,411,"Minor PR just allowing the messages (msg_info) of **VTKExporter** of being indeed outputed; To do this, I just activated the _printLog_ flag for msg_info. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/553
https://github.com/sofa-framework/sofa/pull/553:461,Availability,failure,failures,461,"Minor PR just allowing the messages (msg_info) of **VTKExporter** of being indeed outputed; To do this, I just activated the _printLog_ flag for msg_info. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/553
https://github.com/sofa-framework/sofa/pull/553:27,Integrability,message,messages,27,"Minor PR just allowing the messages (msg_info) of **VTKExporter** of being indeed outputed; To do this, I just activated the _printLog_ flag for msg_info. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/553
https://github.com/sofa-framework/sofa/pull/553:254,Integrability,message,message,254,"Minor PR just allowing the messages (msg_info) of **VTKExporter** of being indeed outputed; To do this, I just activated the _printLog_ flag for msg_info. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/553
https://github.com/sofa-framework/sofa/pull/553:406,Testability,test,test,406,"Minor PR just allowing the messages (msg_info) of **VTKExporter** of being indeed outputed; To do this, I just activated the _printLog_ flag for msg_info. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/553
https://github.com/sofa-framework/sofa/pull/553:456,Testability,test,test,456,"Minor PR just allowing the messages (msg_info) of **VTKExporter** of being indeed outputed; To do this, I just activated the _printLog_ flag for msg_info. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/553
https://github.com/sofa-framework/sofa/pull/554:305,Availability,failure,failures,305,Some changes to be able to handle tetra removal. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554
https://github.com/sofa-framework/sofa/pull/554:355,Availability,failure,failures,355,Some changes to be able to handle tetra removal. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554
https://github.com/sofa-framework/sofa/pull/554:148,Integrability,message,message,148,Some changes to be able to handle tetra removal. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554
https://github.com/sofa-framework/sofa/pull/554:300,Testability,test,test,300,Some changes to be able to handle tetra removal. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554
https://github.com/sofa-framework/sofa/pull/554:350,Testability,test,test,350,Some changes to be able to handle tetra removal. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554
https://github.com/sofa-framework/sofa/pull/555:33,Availability,error,errors,33,"by filtering duplicates warnings/errors/crashes. This should fix JVM heap problems on small VMs when parsing scene-testing/warnings.txt, scene-testing/errors.txt and scene-testing/crashes.txt. Please don't forget the real problem is that we have 60k+ scene-test warnings... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555
https://github.com/sofa-framework/sofa/pull/555:151,Availability,error,errors,151,"by filtering duplicates warnings/errors/crashes. This should fix JVM heap problems on small VMs when parsing scene-testing/warnings.txt, scene-testing/errors.txt and scene-testing/crashes.txt. Please don't forget the real problem is that we have 60k+ scene-test warnings... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555
https://github.com/sofa-framework/sofa/pull/555:530,Availability,failure,failures,530,"by filtering duplicates warnings/errors/crashes. This should fix JVM heap problems on small VMs when parsing scene-testing/warnings.txt, scene-testing/errors.txt and scene-testing/crashes.txt. Please don't forget the real problem is that we have 60k+ scene-test warnings... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555
https://github.com/sofa-framework/sofa/pull/555:580,Availability,failure,failures,580,"by filtering duplicates warnings/errors/crashes. This should fix JVM heap problems on small VMs when parsing scene-testing/warnings.txt, scene-testing/errors.txt and scene-testing/crashes.txt. Please don't forget the real problem is that we have 60k+ scene-test warnings... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555
https://github.com/sofa-framework/sofa/pull/555:373,Integrability,message,message,373,"by filtering duplicates warnings/errors/crashes. This should fix JVM heap problems on small VMs when parsing scene-testing/warnings.txt, scene-testing/errors.txt and scene-testing/crashes.txt. Please don't forget the real problem is that we have 60k+ scene-test warnings... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555
https://github.com/sofa-framework/sofa/pull/555:115,Testability,test,testing,115,"by filtering duplicates warnings/errors/crashes. This should fix JVM heap problems on small VMs when parsing scene-testing/warnings.txt, scene-testing/errors.txt and scene-testing/crashes.txt. Please don't forget the real problem is that we have 60k+ scene-test warnings... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555
https://github.com/sofa-framework/sofa/pull/555:143,Testability,test,testing,143,"by filtering duplicates warnings/errors/crashes. This should fix JVM heap problems on small VMs when parsing scene-testing/warnings.txt, scene-testing/errors.txt and scene-testing/crashes.txt. Please don't forget the real problem is that we have 60k+ scene-test warnings... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555
https://github.com/sofa-framework/sofa/pull/555:172,Testability,test,testing,172,"by filtering duplicates warnings/errors/crashes. This should fix JVM heap problems on small VMs when parsing scene-testing/warnings.txt, scene-testing/errors.txt and scene-testing/crashes.txt. Please don't forget the real problem is that we have 60k+ scene-test warnings... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555
https://github.com/sofa-framework/sofa/pull/555:257,Testability,test,test,257,"by filtering duplicates warnings/errors/crashes. This should fix JVM heap problems on small VMs when parsing scene-testing/warnings.txt, scene-testing/errors.txt and scene-testing/crashes.txt. Please don't forget the real problem is that we have 60k+ scene-test warnings... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555
https://github.com/sofa-framework/sofa/pull/555:525,Testability,test,test,525,"by filtering duplicates warnings/errors/crashes. This should fix JVM heap problems on small VMs when parsing scene-testing/warnings.txt, scene-testing/errors.txt and scene-testing/crashes.txt. Please don't forget the real problem is that we have 60k+ scene-test warnings... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555
https://github.com/sofa-framework/sofa/pull/555:575,Testability,test,test,575,"by filtering duplicates warnings/errors/crashes. This should fix JVM heap problems on small VMs when parsing scene-testing/warnings.txt, scene-testing/errors.txt and scene-testing/crashes.txt. Please don't forget the real problem is that we have 60k+ scene-test warnings... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555
https://github.com/sofa-framework/sofa/pull/556:511,Availability,failure,failures,511,"Fix bug introduced in #521 . If threshold is met at first step with den=0, break but info msg; about the status of the linear system. If threshold is met at first with den!=0, then continue one more iteration; and warning about threshold value too large. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/556
https://github.com/sofa-framework/sofa/pull/556:561,Availability,failure,failures,561,"Fix bug introduced in #521 . If threshold is met at first step with den=0, break but info msg; about the status of the linear system. If threshold is met at first with den!=0, then continue one more iteration; and warning about threshold value too large. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/556
https://github.com/sofa-framework/sofa/pull/556:354,Integrability,message,message,354,"Fix bug introduced in #521 . If threshold is met at first step with den=0, break but info msg; about the status of the linear system. If threshold is met at first with den!=0, then continue one more iteration; and warning about threshold value too large. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/556
https://github.com/sofa-framework/sofa/pull/556:506,Testability,test,test,506,"Fix bug introduced in #521 . If threshold is met at first step with den=0, break but info msg; about the status of the linear system. If threshold is met at first with den!=0, then continue one more iteration; and warning about threshold value too large. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/556
https://github.com/sofa-framework/sofa/pull/556:556,Testability,test,test,556,"Fix bug introduced in #521 . If threshold is met at first step with den=0, break but info msg; about the status of the linear system. If threshold is met at first with den!=0, then continue one more iteration; and warning about threshold value too large. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/556
https://github.com/sofa-framework/sofa/issues/557:190,Availability,error,error,190,"Take for example the scene: Demos/Liver.scn; Change the gravity of the root node:; <Node name=""lroot"" gravity=""0 0 0"" dt=""0.02"">. As soon as the simulation start, the liver disappears... No error message in the console, neither on the components. Does someone has an idea?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/557
https://github.com/sofa-framework/sofa/issues/557:196,Integrability,message,message,196,"Take for example the scene: Demos/Liver.scn; Change the gravity of the root node:; <Node name=""lroot"" gravity=""0 0 0"" dt=""0.02"">. As soon as the simulation start, the liver disappears... No error message in the console, neither on the components. Does someone has an idea?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/557
https://github.com/sofa-framework/sofa/issues/558:98,Modifiability,plugin,plugin,98,HI guys. several users are giving us feedback about the RequiredPlugin which is not working.; The plugin (dll) is not loaded and the associated components obviously can't be created. Any hints ?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/558
https://github.com/sofa-framework/sofa/issues/558:118,Performance,load,loaded,118,HI guys. several users are giving us feedback about the RequiredPlugin which is not working.; The plugin (dll) is not loaded and the associated components obviously can't be created. Any hints ?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/558
https://github.com/sofa-framework/sofa/issues/558:37,Usability,feedback,feedback,37,HI guys. several users are giving us feedback about the RequiredPlugin which is not working.; The plugin (dll) is not loaded and the associated components obviously can't be created. Any hints ?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/558
https://github.com/sofa-framework/sofa/pull/559:145,Availability,error,error,145,"Hopefully this will fix our CI restart problems. We are now clamping the scene-test warnings file to 5000 warnings max.; If clamping is done, an error is reported in output and in scene-test errors summary. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/559
https://github.com/sofa-framework/sofa/pull/559:191,Availability,error,errors,191,"Hopefully this will fix our CI restart problems. We are now clamping the scene-test warnings file to 5000 warnings max.; If clamping is done, an error is reported in output and in scene-test errors summary. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/559
https://github.com/sofa-framework/sofa/pull/559:463,Availability,failure,failures,463,"Hopefully this will fix our CI restart problems. We are now clamping the scene-test warnings file to 5000 warnings max.; If clamping is done, an error is reported in output and in scene-test errors summary. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/559
https://github.com/sofa-framework/sofa/pull/559:513,Availability,failure,failures,513,"Hopefully this will fix our CI restart problems. We are now clamping the scene-test warnings file to 5000 warnings max.; If clamping is done, an error is reported in output and in scene-test errors summary. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/559
https://github.com/sofa-framework/sofa/pull/559:306,Integrability,message,message,306,"Hopefully this will fix our CI restart problems. We are now clamping the scene-test warnings file to 5000 warnings max.; If clamping is done, an error is reported in output and in scene-test errors summary. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/559
https://github.com/sofa-framework/sofa/pull/559:79,Testability,test,test,79,"Hopefully this will fix our CI restart problems. We are now clamping the scene-test warnings file to 5000 warnings max.; If clamping is done, an error is reported in output and in scene-test errors summary. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/559
https://github.com/sofa-framework/sofa/pull/559:186,Testability,test,test,186,"Hopefully this will fix our CI restart problems. We are now clamping the scene-test warnings file to 5000 warnings max.; If clamping is done, an error is reported in output and in scene-test errors summary. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/559
https://github.com/sofa-framework/sofa/pull/559:458,Testability,test,test,458,"Hopefully this will fix our CI restart problems. We are now clamping the scene-test warnings file to 5000 warnings max.; If clamping is done, an error is reported in output and in scene-test errors summary. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/559
https://github.com/sofa-framework/sofa/pull/559:508,Testability,test,test,508,"Hopefully this will fix our CI restart problems. We are now clamping the scene-test warnings file to 5000 warnings max.; If clamping is done, an error is reported in output and in scene-test errors summary. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/559
https://github.com/sofa-framework/sofa/pull/560:462,Availability,failure,failures,462,A modification of BoxROI object that could be rotated using given angle values and a test for it. The values of angles are defined like in applyRotation method where Euler Angle values in degrees are used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560
https://github.com/sofa-framework/sofa/pull/560:512,Availability,failure,failures,512,A modification of BoxROI object that could be rotated using given angle values and a test for it. The values of angles are defined like in applyRotation method where Euler Angle values in degrees are used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560
https://github.com/sofa-framework/sofa/pull/560:305,Integrability,message,message,305,A modification of BoxROI object that could be rotated using given angle values and a test for it. The values of angles are defined like in applyRotation method where Euler Angle values in degrees are used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560
https://github.com/sofa-framework/sofa/pull/560:85,Testability,test,test,85,A modification of BoxROI object that could be rotated using given angle values and a test for it. The values of angles are defined like in applyRotation method where Euler Angle values in degrees are used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560
https://github.com/sofa-framework/sofa/pull/560:457,Testability,test,test,457,A modification of BoxROI object that could be rotated using given angle values and a test for it. The values of angles are defined like in applyRotation method where Euler Angle values in degrees are used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560
https://github.com/sofa-framework/sofa/pull/560:507,Testability,test,test,507,A modification of BoxROI object that could be rotated using given angle values and a test for it. The values of angles are defined like in applyRotation method where Euler Angle values in degrees are used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560
https://github.com/sofa-framework/sofa/issues/561:361,Availability,ERROR,ERROR,361,"When building runsofa (master version 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/issues/561:520,Availability,ERROR,ERROR,520,"When building runsofa (master version 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/issues/561:679,Availability,ERROR,ERROR,679,"When building runsofa (master version 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/issues/561:793,Availability,ERROR,ERROR,793,"When building runsofa (master version 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/issues/561:875,Availability,ERROR,ERROR,875,"When building runsofa (master version 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/issues/561:971,Availability,ERROR,ERROR,971,"a (master version 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/issues/561:1035,Availability,ERROR,ERROR,1035,"a (master version 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/issues/561:1495,Availability,ERROR,ERROR,1495,"n 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/issues/561:1554,Availability,error,error,1554,"n 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/issues/561:1615,Availability,ERROR,ERROR,1615,"n 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/issues/561:1674,Availability,error,error,1674,"n 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/issues/561:91,Modifiability,plugin,plugin,91,"When building runsofa (master version 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/issues/561:120,Performance,load,loaded,120,"When building runsofa (master version 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/issues/561:818,Performance,load,load,818,"When building runsofa (master version 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/issues/561:1024,Performance,load,loaded,1024,"a (master version 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/issues/561:1353,Security,Validat,Validating,1353,"n 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561
https://github.com/sofa-framework/sofa/pull/562:252,Availability,failure,failure,252,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562
https://github.com/sofa-framework/sofa/pull/562:851,Availability,failure,failures,851,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562
https://github.com/sofa-framework/sofa/pull/562:901,Availability,failure,failures,901,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562
https://github.com/sofa-framework/sofa/pull/562:49,Integrability,depend,depend,49,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562
https://github.com/sofa-framework/sofa/pull/562:694,Integrability,message,message,694,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562
https://github.com/sofa-framework/sofa/pull/562:0,Modifiability,Refactor,Refactor,0,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562
https://github.com/sofa-framework/sofa/pull/562:269,Modifiability,plugin,plugins,269,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562
https://github.com/sofa-framework/sofa/pull/562:331,Modifiability,flexible,flexible,331,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562
https://github.com/sofa-framework/sofa/pull/562:313,Performance,load,loaded,313,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562
https://github.com/sofa-framework/sofa/pull/562:345,Safety,avoid,avoid,345,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562
https://github.com/sofa-framework/sofa/pull/562:846,Testability,test,test,846,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562
https://github.com/sofa-framework/sofa/pull/562:896,Testability,test,test,896,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562
https://github.com/sofa-framework/sofa/pull/562:560,Usability,clear,clearity,560,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562
https://github.com/sofa-framework/sofa/pull/563:476,Availability,failure,failures,476,This PR Do: ; [SofaGraphComponent] FIX Bug in scene checker.; [SofaGraphComponent] FIX RequiredPlugin . For more details have a look at the commit messages. ; This PR is a re-split of PR #548 to ease review & merging. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/563
https://github.com/sofa-framework/sofa/pull/563:526,Availability,failure,failures,526,This PR Do: ; [SofaGraphComponent] FIX Bug in scene checker.; [SofaGraphComponent] FIX RequiredPlugin . For more details have a look at the commit messages. ; This PR is a re-split of PR #548 to ease review & merging. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/563
https://github.com/sofa-framework/sofa/pull/563:147,Integrability,message,messages,147,This PR Do: ; [SofaGraphComponent] FIX Bug in scene checker.; [SofaGraphComponent] FIX RequiredPlugin . For more details have a look at the commit messages. ; This PR is a re-split of PR #548 to ease review & merging. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/563
https://github.com/sofa-framework/sofa/pull/563:319,Integrability,message,message,319,This PR Do: ; [SofaGraphComponent] FIX Bug in scene checker.; [SofaGraphComponent] FIX RequiredPlugin . For more details have a look at the commit messages. ; This PR is a re-split of PR #548 to ease review & merging. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/563
https://github.com/sofa-framework/sofa/pull/563:471,Testability,test,test,471,This PR Do: ; [SofaGraphComponent] FIX Bug in scene checker.; [SofaGraphComponent] FIX RequiredPlugin . For more details have a look at the commit messages. ; This PR is a re-split of PR #548 to ease review & merging. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/563
https://github.com/sofa-framework/sofa/pull/563:521,Testability,test,test,521,This PR Do: ; [SofaGraphComponent] FIX Bug in scene checker.; [SofaGraphComponent] FIX RequiredPlugin . For more details have a look at the commit messages. ; This PR is a re-split of PR #548 to ease review & merging. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/563
https://github.com/sofa-framework/sofa/pull/564:359,Availability,failure,failures,359,[WIP]; - I try to figure out how to fix the issue : https://github.com/sofa-framework/sofa/issues/561. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/564
https://github.com/sofa-framework/sofa/pull/564:409,Availability,failure,failures,409,[WIP]; - I try to figure out how to fix the issue : https://github.com/sofa-framework/sofa/issues/561. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/564
https://github.com/sofa-framework/sofa/pull/564:202,Integrability,message,message,202,[WIP]; - I try to figure out how to fix the issue : https://github.com/sofa-framework/sofa/issues/561. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/564
https://github.com/sofa-framework/sofa/pull/564:354,Testability,test,test,354,[WIP]; - I try to figure out how to fix the issue : https://github.com/sofa-framework/sofa/issues/561. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/564
https://github.com/sofa-framework/sofa/pull/564:404,Testability,test,test,404,[WIP]; - I try to figure out how to fix the issue : https://github.com/sofa-framework/sofa/issues/561. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/564
https://github.com/sofa-framework/sofa/pull/565:345,Availability,failure,failures,345,This PR is a follow up #548 ; My last batch of changes to fix the CI. Please review :) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/565
https://github.com/sofa-framework/sofa/pull/565:395,Availability,failure,failures,395,This PR is a follow up #548 ; My last batch of changes to fix the CI. Please review :) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/565
https://github.com/sofa-framework/sofa/pull/565:188,Integrability,message,message,188,This PR is a follow up #548 ; My last batch of changes to fix the CI. Please review :) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/565
https://github.com/sofa-framework/sofa/pull/565:340,Testability,test,test,340,This PR is a follow up #548 ; My last batch of changes to fix the CI. Please review :) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/565
https://github.com/sofa-framework/sofa/pull/565:390,Testability,test,test,390,This PR is a follow up #548 ; My last batch of changes to fix the CI. Please review :) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/565
https://github.com/sofa-framework/sofa/pull/566:347,Availability,failure,failures,347,This change is needed before using the new dependency pack (libjpeg + libtiff) on Windows. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/566
https://github.com/sofa-framework/sofa/pull/566:397,Availability,failure,failures,397,This change is needed before using the new dependency pack (libjpeg + libtiff) on Windows. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/566
https://github.com/sofa-framework/sofa/pull/566:43,Integrability,depend,dependency,43,This change is needed before using the new dependency pack (libjpeg + libtiff) on Windows. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/566
https://github.com/sofa-framework/sofa/pull/566:190,Integrability,message,message,190,This change is needed before using the new dependency pack (libjpeg + libtiff) on Windows. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/566
https://github.com/sofa-framework/sofa/pull/566:342,Testability,test,test,342,This change is needed before using the new dependency pack (libjpeg + libtiff) on Windows. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/566
https://github.com/sofa-framework/sofa/pull/566:392,Testability,test,test,392,This change is needed before using the new dependency pack (libjpeg + libtiff) on Windows. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/566
https://github.com/sofa-framework/sofa/pull/567:907,Availability,failure,failures,907,"In the PR #484, the way of searching the ODESolver in GenericConstraintCorrection changed from ; `c->get(odesolver, core::objectmodel::BaseContext::SearchRoot);`; to; `c->get(odesolver, core::objectmodel::BaseContext::Local);`; In some of our simulations, the GenericConstraintCorrection is located in the root node. And so no ODE solver can be found, and the user can not set it manually. . In this PR: . - Added data d_ODESolverName, to allow user to specify the ODE solver as it is actually done for the linear solvers; - If no ODE solver found using d_ODESolverName, search in ""Local"", then in ""SearchRoot"".; - Some cleaning (including renaming). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567
https://github.com/sofa-framework/sofa/pull/567:957,Availability,failure,failures,957,"In the PR #484, the way of searching the ODESolver in GenericConstraintCorrection changed from ; `c->get(odesolver, core::objectmodel::BaseContext::SearchRoot);`; to; `c->get(odesolver, core::objectmodel::BaseContext::Local);`; In some of our simulations, the GenericConstraintCorrection is located in the root node. And so no ODE solver can be found, and the user can not set it manually. . In this PR: . - Added data d_ODESolverName, to allow user to specify the ODE solver as it is actually done for the linear solvers; - If no ODE solver found using d_ODESolverName, search in ""Local"", then in ""SearchRoot"".; - Some cleaning (including renaming). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567
https://github.com/sofa-framework/sofa/pull/567:750,Integrability,message,message,750,"In the PR #484, the way of searching the ODESolver in GenericConstraintCorrection changed from ; `c->get(odesolver, core::objectmodel::BaseContext::SearchRoot);`; to; `c->get(odesolver, core::objectmodel::BaseContext::Local);`; In some of our simulations, the GenericConstraintCorrection is located in the root node. And so no ODE solver can be found, and the user can not set it manually. . In this PR: . - Added data d_ODESolverName, to allow user to specify the ODE solver as it is actually done for the linear solvers; - If no ODE solver found using d_ODESolverName, search in ""Local"", then in ""SearchRoot"".; - Some cleaning (including renaming). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567
https://github.com/sofa-framework/sofa/pull/567:902,Testability,test,test,902,"In the PR #484, the way of searching the ODESolver in GenericConstraintCorrection changed from ; `c->get(odesolver, core::objectmodel::BaseContext::SearchRoot);`; to; `c->get(odesolver, core::objectmodel::BaseContext::Local);`; In some of our simulations, the GenericConstraintCorrection is located in the root node. And so no ODE solver can be found, and the user can not set it manually. . In this PR: . - Added data d_ODESolverName, to allow user to specify the ODE solver as it is actually done for the linear solvers; - If no ODE solver found using d_ODESolverName, search in ""Local"", then in ""SearchRoot"".; - Some cleaning (including renaming). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567
https://github.com/sofa-framework/sofa/pull/567:952,Testability,test,test,952,"In the PR #484, the way of searching the ODESolver in GenericConstraintCorrection changed from ; `c->get(odesolver, core::objectmodel::BaseContext::SearchRoot);`; to; `c->get(odesolver, core::objectmodel::BaseContext::Local);`; In some of our simulations, the GenericConstraintCorrection is located in the root node. And so no ODE solver can be found, and the user can not set it manually. . In this PR: . - Added data d_ODESolverName, to allow user to specify the ODE solver as it is actually done for the linear solvers; - If no ODE solver found using d_ODESolverName, search in ""Local"", then in ""SearchRoot"".; - Some cleaning (including renaming). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567
https://github.com/sofa-framework/sofa/pull/568:551,Availability,failure,failures,551,Fixes #561 . This PR does the same work as #564 but using the existing `Utils::getSofaPathPrefix()` function and avoiding heavy macro creation in root CMakelists.; I also removed all the PluginRepository and DataRepository re-inits. Sorry @ErwanDouaille I did not know this function before :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/568
https://github.com/sofa-framework/sofa/pull/568:601,Availability,failure,failures,601,Fixes #561 . This PR does the same work as #564 but using the existing `Utils::getSofaPathPrefix()` function and avoiding heavy macro creation in root CMakelists.; I also removed all the PluginRepository and DataRepository re-inits. Sorry @ErwanDouaille I did not know this function before :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/568
https://github.com/sofa-framework/sofa/pull/568:394,Integrability,message,message,394,Fixes #561 . This PR does the same work as #564 but using the existing `Utils::getSofaPathPrefix()` function and avoiding heavy macro creation in root CMakelists.; I also removed all the PluginRepository and DataRepository re-inits. Sorry @ErwanDouaille I did not know this function before :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/568
https://github.com/sofa-framework/sofa/pull/568:187,Modifiability,Plugin,PluginRepository,187,Fixes #561 . This PR does the same work as #564 but using the existing `Utils::getSofaPathPrefix()` function and avoiding heavy macro creation in root CMakelists.; I also removed all the PluginRepository and DataRepository re-inits. Sorry @ErwanDouaille I did not know this function before :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/568
https://github.com/sofa-framework/sofa/pull/568:113,Safety,avoid,avoiding,113,Fixes #561 . This PR does the same work as #564 but using the existing `Utils::getSofaPathPrefix()` function and avoiding heavy macro creation in root CMakelists.; I also removed all the PluginRepository and DataRepository re-inits. Sorry @ErwanDouaille I did not know this function before :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/568
https://github.com/sofa-framework/sofa/pull/568:546,Testability,test,test,546,Fixes #561 . This PR does the same work as #564 but using the existing `Utils::getSofaPathPrefix()` function and avoiding heavy macro creation in root CMakelists.; I also removed all the PluginRepository and DataRepository re-inits. Sorry @ErwanDouaille I did not know this function before :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/568
https://github.com/sofa-framework/sofa/pull/568:596,Testability,test,test,596,Fixes #561 . This PR does the same work as #564 but using the existing `Utils::getSofaPathPrefix()` function and avoiding heavy macro creation in root CMakelists.; I also removed all the PluginRepository and DataRepository re-inits. Sorry @ErwanDouaille I did not know this function before :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/568
https://github.com/sofa-framework/sofa/issues/569:276,Availability,ERROR,ERROR,276,I could not open a SOFA scene using the following command line as per the documentation guidelines: . ls applications/plugins/SofaPython/examples/fontain.scn; applications/plugins/SofaPython/examples/fontain.scn. runSofa applications/plugins/SofaPython/examples/fontain.scn; [ERROR] [XMLParser] Failed to open applications/plugins/SofaPython/examples/fontain.scn; Failed to open file at line 0 row 0. The issue was encountered on both - Mac OS and Linux. ; Please help to solve this. Thank you!. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/569
https://github.com/sofa-framework/sofa/issues/569:118,Modifiability,plugin,plugins,118,I could not open a SOFA scene using the following command line as per the documentation guidelines: . ls applications/plugins/SofaPython/examples/fontain.scn; applications/plugins/SofaPython/examples/fontain.scn. runSofa applications/plugins/SofaPython/examples/fontain.scn; [ERROR] [XMLParser] Failed to open applications/plugins/SofaPython/examples/fontain.scn; Failed to open file at line 0 row 0. The issue was encountered on both - Mac OS and Linux. ; Please help to solve this. Thank you!. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/569
https://github.com/sofa-framework/sofa/issues/569:172,Modifiability,plugin,plugins,172,I could not open a SOFA scene using the following command line as per the documentation guidelines: . ls applications/plugins/SofaPython/examples/fontain.scn; applications/plugins/SofaPython/examples/fontain.scn. runSofa applications/plugins/SofaPython/examples/fontain.scn; [ERROR] [XMLParser] Failed to open applications/plugins/SofaPython/examples/fontain.scn; Failed to open file at line 0 row 0. The issue was encountered on both - Mac OS and Linux. ; Please help to solve this. Thank you!. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/569
https://github.com/sofa-framework/sofa/issues/569:234,Modifiability,plugin,plugins,234,I could not open a SOFA scene using the following command line as per the documentation guidelines: . ls applications/plugins/SofaPython/examples/fontain.scn; applications/plugins/SofaPython/examples/fontain.scn. runSofa applications/plugins/SofaPython/examples/fontain.scn; [ERROR] [XMLParser] Failed to open applications/plugins/SofaPython/examples/fontain.scn; Failed to open file at line 0 row 0. The issue was encountered on both - Mac OS and Linux. ; Please help to solve this. Thank you!. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/569
https://github.com/sofa-framework/sofa/issues/569:323,Modifiability,plugin,plugins,323,I could not open a SOFA scene using the following command line as per the documentation guidelines: . ls applications/plugins/SofaPython/examples/fontain.scn; applications/plugins/SofaPython/examples/fontain.scn. runSofa applications/plugins/SofaPython/examples/fontain.scn; [ERROR] [XMLParser] Failed to open applications/plugins/SofaPython/examples/fontain.scn; Failed to open file at line 0 row 0. The issue was encountered on both - Mac OS and Linux. ; Please help to solve this. Thank you!. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/569
https://github.com/sofa-framework/sofa/issues/569:88,Usability,guid,guidelines,88,I could not open a SOFA scene using the following command line as per the documentation guidelines: . ls applications/plugins/SofaPython/examples/fontain.scn; applications/plugins/SofaPython/examples/fontain.scn. runSofa applications/plugins/SofaPython/examples/fontain.scn; [ERROR] [XMLParser] Failed to open applications/plugins/SofaPython/examples/fontain.scn; Failed to open file at line 0 row 0. The issue was encountered on both - Mac OS and Linux. ; Please help to solve this. Thank you!. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/569
https://github.com/sofa-framework/sofa/pull/570:348,Availability,failure,failures,348,This change has been performed to make the usage of the script and the documentary clearer. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/570
https://github.com/sofa-framework/sofa/pull/570:398,Availability,failure,failures,398,This change has been performed to make the usage of the script and the documentary clearer. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/570
https://github.com/sofa-framework/sofa/pull/570:191,Integrability,message,message,191,This change has been performed to make the usage of the script and the documentary clearer. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/570
https://github.com/sofa-framework/sofa/pull/570:21,Performance,perform,performed,21,This change has been performed to make the usage of the script and the documentary clearer. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/570
https://github.com/sofa-framework/sofa/pull/570:343,Testability,test,test,343,This change has been performed to make the usage of the script and the documentary clearer. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/570
https://github.com/sofa-framework/sofa/pull/570:393,Testability,test,test,393,This change has been performed to make the usage of the script and the documentary clearer. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/570
https://github.com/sofa-framework/sofa/pull/570:83,Usability,clear,clearer,83,This change has been performed to make the usage of the script and the documentary clearer. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/570
https://github.com/sofa-framework/sofa/issues/571:142,Availability,down,down,142,"In removing the gravity in root node on caduceus.scn scene and then pressing button ""Reset Scene"" the snake disappears and computations falls down in infinite circle with message:. [WARNING] [MinProximityIntersection(Proximity)] WARNING: null distance between contact detected. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/571
https://github.com/sofa-framework/sofa/issues/571:171,Integrability,message,message,171,"In removing the gravity in root node on caduceus.scn scene and then pressing button ""Reset Scene"" the snake disappears and computations falls down in infinite circle with message:. [WARNING] [MinProximityIntersection(Proximity)] WARNING: null distance between contact detected. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/571
https://github.com/sofa-framework/sofa/issues/571:268,Safety,detect,detected,268,"In removing the gravity in root node on caduceus.scn scene and then pressing button ""Reset Scene"" the snake disappears and computations falls down in infinite circle with message:. [WARNING] [MinProximityIntersection(Proximity)] WARNING: null distance between contact detected. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/571
https://github.com/sofa-framework/sofa/pull/572:2696,Availability,fault,faulty,2696,"libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the p",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5994,Availability,avail,available,5994,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:6511,Availability,failure,failures,6511,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:6561,Availability,failure,failures,6561,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:1407,Deployability,update,updateConvergencePlot,1407," - Handling the case of python script loading a python scene (the current GIL handling implementation will prevent the main python script to get back the interpreter after a python scene runs). ### What this PR brings. Right now, in order to use the SofaPython plugin, you need to create a python scene and run it through a C++ executable (such as runSofa). What I'm proposing here is to simply load the Sofa plugin inside a python script, that's it. A python script could then look like : . ```#!/usr/bin/python2.7; from libSofaPython import Sofa; import argparse. # Parse the arguments; parser = argparse.ArgumentParser(); parser.add_argument(""-n"", ""--number_of_steps"", type=int, help=""Number of steps until the final forces are reach"", default=10); o = parser.parse_args(). sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim); root = Sofa.createNode(""root""). # ...; # some code that creates the scene tree; # ... root.init(). for i in range(number_of_steps):; root.simulationStep(dt); updateConvergencePlot(root). analysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:6196,Integrability,wrap,wraps,6196,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:6354,Integrability,message,message,6354,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:325,Modifiability,plugin,plugin,325,"Hey guys,. Sorry for the delay. This is a draft PR so that people can start reviewing/testing this feature if they want. There is still some things missing before merging. ### Needs to be addressed before merging. - MacOS and Windows compatibility: python import command only tries to load .so extension, so the cmake of the plugin should generate both SofaPython.dylib (.dll) and SofaPython.so for it to work.; - Handling the case of python script loading a python scene (the current GIL handling implementation will prevent the main python script to get back the interpreter after a python scene runs). ### What this PR brings. Right now, in order to use the SofaPython plugin, you need to create a python scene and run it through a C++ executable (such as runSofa). What I'm proposing here is to simply load the Sofa plugin inside a python script, that's it. A python script could then look like : . ```#!/usr/bin/python2.7; from libSofaPython import Sofa; import argparse. # Parse the arguments; parser = argparse.ArgumentParser(); parser.add_argument(""-n"", ""--number_of_steps"", type=int, help=""Number of steps until the final forces are reach"", default=10); o = parser.parse_args(). sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim); root = Sofa.createNode(""root""). # ...; # some code that creates the scene tree; # ... root.init(). for i in range(number_of_steps):; root.simulationStep(dt); updateConvergencePlot(root). analysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:672,Modifiability,plugin,plugin,672,"Hey guys,. Sorry for the delay. This is a draft PR so that people can start reviewing/testing this feature if they want. There is still some things missing before merging. ### Needs to be addressed before merging. - MacOS and Windows compatibility: python import command only tries to load .so extension, so the cmake of the plugin should generate both SofaPython.dylib (.dll) and SofaPython.so for it to work.; - Handling the case of python script loading a python scene (the current GIL handling implementation will prevent the main python script to get back the interpreter after a python scene runs). ### What this PR brings. Right now, in order to use the SofaPython plugin, you need to create a python scene and run it through a C++ executable (such as runSofa). What I'm proposing here is to simply load the Sofa plugin inside a python script, that's it. A python script could then look like : . ```#!/usr/bin/python2.7; from libSofaPython import Sofa; import argparse. # Parse the arguments; parser = argparse.ArgumentParser(); parser.add_argument(""-n"", ""--number_of_steps"", type=int, help=""Number of steps until the final forces are reach"", default=10); o = parser.parse_args(). sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim); root = Sofa.createNode(""root""). # ...; # some code that creates the scene tree; # ... root.init(). for i in range(number_of_steps):; root.simulationStep(dt); updateConvergencePlot(root). analysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:820,Modifiability,plugin,plugin,820,"Hey guys,. Sorry for the delay. This is a draft PR so that people can start reviewing/testing this feature if they want. There is still some things missing before merging. ### Needs to be addressed before merging. - MacOS and Windows compatibility: python import command only tries to load .so extension, so the cmake of the plugin should generate both SofaPython.dylib (.dll) and SofaPython.so for it to work.; - Handling the case of python script loading a python scene (the current GIL handling implementation will prevent the main python script to get back the interpreter after a python scene runs). ### What this PR brings. Right now, in order to use the SofaPython plugin, you need to create a python scene and run it through a C++ executable (such as runSofa). What I'm proposing here is to simply load the Sofa plugin inside a python script, that's it. A python script could then look like : . ```#!/usr/bin/python2.7; from libSofaPython import Sofa; import argparse. # Parse the arguments; parser = argparse.ArgumentParser(); parser.add_argument(""-n"", ""--number_of_steps"", type=int, help=""Number of steps until the final forces are reach"", default=10); o = parser.parse_args(). sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim); root = Sofa.createNode(""root""). # ...; # some code that creates the scene tree; # ... root.init(). for i in range(number_of_steps):; root.simulationStep(dt); updateConvergencePlot(root). analysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:2013,Modifiability,config,config,2013,"arser = argparse.ArgumentParser(); parser.add_argument(""-n"", ""--number_of_steps"", type=int, help=""Number of steps until the final forces are reach"", default=10); o = parser.parse_args(). sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim); root = Sofa.createNode(""root""). # ...; # some code that creates the scene tree; # ... root.init(). for i in range(number_of_steps):; root.simulationStep(dt); updateConvergencePlot(root). analysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in th",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:2330,Modifiability,Plugin,Plugin,2330,"nalysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:2433,Modifiability,plugin,plugin,2433,"nalysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:2635,Modifiability,Plugin,PluginManager,2635," an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:2957,Modifiability,plugin,plugin,2957,"nager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3309,Modifiability,plugin,plugin,3309,"in manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager wa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3434,Modifiability,plugin,plugin,3434,"mmand in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and a",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3583,Modifiability,plugin,plugin,3583,"ofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded a",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3707,Modifiability,plugin,pluginManager,3707,"ript:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3733,Modifiability,plugin,plugin,3733,"ript:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3780,Modifiability,plugin,plugin,3780,"aPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a s",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3823,Modifiability,plugin,pluginManager,3823,"aPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a s",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3865,Modifiability,plugin,plugins,3865,"aPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a s",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4207,Modifiability,plugin,pluginManager,4207,"ted when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, ple",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4302,Modifiability,plugin,plugin,4302,"ted when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, ple",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4404,Modifiability,Plugin,PluginManager,4404,"er hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compare",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4455,Modifiability,Plugin,Plugin,4455," on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4486,Modifiability,Plugin,PluginManager,4486," on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4500,Modifiability,plugin,plugins,4500," on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4515,Modifiability,Plugin,PluginManager,4515," on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4566,Modifiability,Plugin,Plugin,4566,"_How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4647,Modifiability,plugin,plugin,4647,"_How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4725,Modifiability,Plugin,Plugin,4725," the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternal",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4760,Modifiability,Plugin,PluginManager,4760," the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternal",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4777,Modifiability,Plugin,PluginManager,4777," the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternal",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4828,Modifiability,Plugin,Plugin,4828,"ins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4871,Modifiability,Plugin,PluginManager,4871,"ins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4932,Modifiability,Plugin,PluginManager,4932,"its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it m",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4983,Modifiability,Plugin,Plugin,4983,"other procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5014,Modifiability,Plugin,PluginManager,5014,"other procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5028,Modifiability,plugin,plugins,5028,"other procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5043,Modifiability,Plugin,PluginManager,5043,"other procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5104,Modifiability,Plugin,Plugin,5104,"ommand, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a co",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5147,Modifiability,Plugin,PluginManager,5147,"ommand, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a co",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5321,Modifiability,plugin,plugins,5321,"o sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; -",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5428,Modifiability,plugin,plugin,5428,"o sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; -",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5446,Modifiability,plugin,plugin,5446,"o sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; -",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5498,Modifiability,Plugin,PluginManager,5498,"anager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5517,Modifiability,plugin,plugin,5517,"anager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5610,Modifiability,Plugin,PluginManager,5610,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5677,Modifiability,plugin,plugins,5677,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5708,Modifiability,plugin,plugin,5708,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5801,Modifiability,plugin,plugin,5801,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5841,Modifiability,plugin,plugin,5841,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5862,Modifiability,Plugin,PluginManager,5862,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5900,Modifiability,plugin,plugin,5900,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:285,Performance,load,load,285,"Hey guys,. Sorry for the delay. This is a draft PR so that people can start reviewing/testing this feature if they want. There is still some things missing before merging. ### Needs to be addressed before merging. - MacOS and Windows compatibility: python import command only tries to load .so extension, so the cmake of the plugin should generate both SofaPython.dylib (.dll) and SofaPython.so for it to work.; - Handling the case of python script loading a python scene (the current GIL handling implementation will prevent the main python script to get back the interpreter after a python scene runs). ### What this PR brings. Right now, in order to use the SofaPython plugin, you need to create a python scene and run it through a C++ executable (such as runSofa). What I'm proposing here is to simply load the Sofa plugin inside a python script, that's it. A python script could then look like : . ```#!/usr/bin/python2.7; from libSofaPython import Sofa; import argparse. # Parse the arguments; parser = argparse.ArgumentParser(); parser.add_argument(""-n"", ""--number_of_steps"", type=int, help=""Number of steps until the final forces are reach"", default=10); o = parser.parse_args(). sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim); root = Sofa.createNode(""root""). # ...; # some code that creates the scene tree; # ... root.init(). for i in range(number_of_steps):; root.simulationStep(dt); updateConvergencePlot(root). analysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:449,Performance,load,loading,449,"Hey guys,. Sorry for the delay. This is a draft PR so that people can start reviewing/testing this feature if they want. There is still some things missing before merging. ### Needs to be addressed before merging. - MacOS and Windows compatibility: python import command only tries to load .so extension, so the cmake of the plugin should generate both SofaPython.dylib (.dll) and SofaPython.so for it to work.; - Handling the case of python script loading a python scene (the current GIL handling implementation will prevent the main python script to get back the interpreter after a python scene runs). ### What this PR brings. Right now, in order to use the SofaPython plugin, you need to create a python scene and run it through a C++ executable (such as runSofa). What I'm proposing here is to simply load the Sofa plugin inside a python script, that's it. A python script could then look like : . ```#!/usr/bin/python2.7; from libSofaPython import Sofa; import argparse. # Parse the arguments; parser = argparse.ArgumentParser(); parser.add_argument(""-n"", ""--number_of_steps"", type=int, help=""Number of steps until the final forces are reach"", default=10); o = parser.parse_args(). sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim); root = Sofa.createNode(""root""). # ...; # some code that creates the scene tree; # ... root.init(). for i in range(number_of_steps):; root.simulationStep(dt); updateConvergencePlot(root). analysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:806,Performance,load,load,806,"Hey guys,. Sorry for the delay. This is a draft PR so that people can start reviewing/testing this feature if they want. There is still some things missing before merging. ### Needs to be addressed before merging. - MacOS and Windows compatibility: python import command only tries to load .so extension, so the cmake of the plugin should generate both SofaPython.dylib (.dll) and SofaPython.so for it to work.; - Handling the case of python script loading a python scene (the current GIL handling implementation will prevent the main python script to get back the interpreter after a python scene runs). ### What this PR brings. Right now, in order to use the SofaPython plugin, you need to create a python scene and run it through a C++ executable (such as runSofa). What I'm proposing here is to simply load the Sofa plugin inside a python script, that's it. A python script could then look like : . ```#!/usr/bin/python2.7; from libSofaPython import Sofa; import argparse. # Parse the arguments; parser = argparse.ArgumentParser(); parser.add_argument(""-n"", ""--number_of_steps"", type=int, help=""Number of steps until the final forces are reach"", default=10); o = parser.parse_args(). sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim); root = Sofa.createNode(""root""). # ...; # some code that creates the scene tree; # ... root.init(). for i in range(number_of_steps):; root.simulationStep(dt); updateConvergencePlot(root). analysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:1808,Performance,load,loadScene,1808,"n inside a python script, that's it. A python script could then look like : . ```#!/usr/bin/python2.7; from libSofaPython import Sofa; import argparse. # Parse the arguments; parser = argparse.ArgumentParser(); parser.add_argument(""-n"", ""--number_of_steps"", type=int, help=""Number of steps until the final forces are reach"", default=10); o = parser.parse_args(). sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim); root = Sofa.createNode(""root""). # ...; # some code that creates the scene tree; # ... root.init(). for i in range(number_of_steps):; root.simulationStep(dt); updateConvergencePlot(root). analysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""Sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:2411,Performance,load,loading,2411,"nalysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:2517,Performance,load,loads,2517,"nalysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:2593,Performance,load,loadPlugin,2593," an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:2654,Performance,load,load,2654," an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:2770,Performance,Load,Loads,2770,"on(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:2810,Performance,load,loadPlugin,2810,"aduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManage",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:2837,Performance,Load,Loads,2837,"aduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManage",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:2975,Performance,load,loaded,2975,"nager.setConfigDirectoryPath(sofa_prefix + ""/config""); Sofa.GUIManager.setScreenshotDirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3054,Performance,load,loading,3054,"DirectoryPath(sofa_prefix + ""/screenshots""). Sofa.GUIManager.init(""qglviewer""); Sofa.GUIManager.createGUI(); Sofa.GUIManager.setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3145,Performance,load,loadLibrary,3145,".setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from t",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3186,Performance,load,loaded,3186,".setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from t",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3253,Performance,load,load,3253,".setDimension(800, 600); Sofa.GUIManager.setScene(root). Sofa.GUIManager.MainLoop(root). Sofa.GUIManager.closeGUI(); ```; ### What else this PR brings. **Plugin manager**; One of the problem arising from this feature is the duplicated loading of the python plugin: when issuing the `import Sofa` command in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from t",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3533,Performance,load,load,3533,"mmand in the python script the interpreter loads the library (SofaPython.so). If the script explicitly calls the `Sofa.loadPlugin(""SofaPython"")` command, Sofa's PluginManager will load again the same library. Example of a faulty script:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and a",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3724,Performance,load,load,3724,"ript:; ```#!/usr/bin/python2.7; from libSofaPython import Sofa # Loads SofaPython.so in the memory; Sofa.loadPlugin(""SofaPython"") # Loads again SofaPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3858,Performance,load,loaded,3858,"aPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a s",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:3899,Performance,load,load,3899,"aPython.so in the memory; ```; I think this brings up a wider question:. _What should happen if the same plugin/library is loaded twice or more in the memory?_. Now, most operating systems will prevent loading a library twice in the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a s",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4009,Performance,load,loaded,4009,"n the memory. On OS supporting the dlopen command, and on Windows loadLibrary command, the library will be loaded only once, but a counter is incremented each time we try to load it. This counter is decremented when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4348,Performance,load,load,4348,"ted when we unload the plugin, and the library will be completely cleaned from the memory ONLY when this counter reach 0. On the other hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, ple",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4419,Performance,load,loadPlugin,4419,"er hand, Sofa's plugin manager WILL call the `initExternalModule` function implemented on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compare",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4462,Performance,load,loaded,4462," on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4530,Performance,load,loadPlugin,4530," on the library each time we load it. This can produce weird behaviors as most plugin won't handled the multiple initialization calls. _How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4582,Performance,load,loaded,4582,"_How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4665,Performance,load,loaded,4665,"_How to reproduce the problem?_. In most cases, people will use the pluginManager to load the plugin. Using this twice or more with the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4732,Performance,load,loaded,4732," the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternal",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4792,Performance,load,loadPlugin,4792," the same plugin path will already be handled by the pluginManager which looks into its loaded plugins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternal",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4843,Performance,load,loaded,4843,"ins map to make sure we don't load a same library file more than once (using its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4947,Performance,load,loadPlugin,4947,"its absolute path). In other cases, a library could already be loaded into the memory by another procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it m",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:4990,Performance,load,loaded,4990,"other procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5058,Performance,load,loadPlugin,5058,"other procedure external to Sofa (such as the ""import"" command from python interpreter, a self made dlopen command, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5119,Performance,load,loaded,5119,"ommand, a dynamic linking from the compiler, etc.). Using the pluginManager will than failed to prevent the multiple links since its map doesn't contain the plugin yet (since the manager was not used to load it in the first place). To sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a co",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5421,Performance,load,loaded,5421,"o sum up:. Case 1; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; -",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5532,Performance,load,loaded,5532,"anager::loadPlugin(""/path/to/myplugin.so""); Plugin won't be loaded and a warning is printed to the user telling him that the plugin is already loaded; ```; Case 2; ```; > dlopen(""/path/to/myplugin.so""); Plugin loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5625,Performance,load,loadPlugin,5625,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5670,Performance,load,loaded,5670,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5726,Performance,load,load,5726,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5834,Performance,load,loaded,5834,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5931,Performance,load,loading,5931,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:5954,Performance,load,loaded,5954,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:86,Testability,test,testing,86,"Hey guys,. Sorry for the delay. This is a draft PR so that people can start reviewing/testing this feature if they want. There is still some things missing before merging. ### Needs to be addressed before merging. - MacOS and Windows compatibility: python import command only tries to load .so extension, so the cmake of the plugin should generate both SofaPython.dylib (.dll) and SofaPython.so for it to work.; - Handling the case of python script loading a python scene (the current GIL handling implementation will prevent the main python script to get back the interpreter after a python scene runs). ### What this PR brings. Right now, in order to use the SofaPython plugin, you need to create a python scene and run it through a C++ executable (such as runSofa). What I'm proposing here is to simply load the Sofa plugin inside a python script, that's it. A python script could then look like : . ```#!/usr/bin/python2.7; from libSofaPython import Sofa; import argparse. # Parse the arguments; parser = argparse.ArgumentParser(); parser.add_argument(""-n"", ""--number_of_steps"", type=int, help=""Number of steps until the final forces are reach"", default=10); o = parser.parse_args(). sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim); root = Sofa.createNode(""root""). # ...; # some code that creates the scene tree; # ... root.init(). for i in range(number_of_steps):; root.simulationStep(dt); updateConvergencePlot(root). analysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:6506,Testability,test,test,6506,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:6556,Testability,test,test,6556,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/572:799,Usability,simpl,simply,799,"Hey guys,. Sorry for the delay. This is a draft PR so that people can start reviewing/testing this feature if they want. There is still some things missing before merging. ### Needs to be addressed before merging. - MacOS and Windows compatibility: python import command only tries to load .so extension, so the cmake of the plugin should generate both SofaPython.dylib (.dll) and SofaPython.so for it to work.; - Handling the case of python script loading a python scene (the current GIL handling implementation will prevent the main python script to get back the interpreter after a python scene runs). ### What this PR brings. Right now, in order to use the SofaPython plugin, you need to create a python scene and run it through a C++ executable (such as runSofa). What I'm proposing here is to simply load the Sofa plugin inside a python script, that's it. A python script could then look like : . ```#!/usr/bin/python2.7; from libSofaPython import Sofa; import argparse. # Parse the arguments; parser = argparse.ArgumentParser(); parser.add_argument(""-n"", ""--number_of_steps"", type=int, help=""Number of steps until the final forces are reach"", default=10); o = parser.parse_args(). sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim); root = Sofa.createNode(""root""). # ...; # some code that creates the scene tree; # ... root.init(). for i in range(number_of_steps):; root.simulationStep(dt); updateConvergencePlot(root). analysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572
https://github.com/sofa-framework/sofa/pull/573:221,Availability,error,error,221,"The scene checker detects when we use a plugin but forgot the ""required plugin"" tag and tells us how to add it in our scene, but without closing the tag. This PR fixes the bug in the suggestion and corrects some typos in error messages in the same file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/573
https://github.com/sofa-framework/sofa/pull/573:510,Availability,failure,failures,510,"The scene checker detects when we use a plugin but forgot the ""required plugin"" tag and tells us how to add it in our scene, but without closing the tag. This PR fixes the bug in the suggestion and corrects some typos in error messages in the same file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/573
https://github.com/sofa-framework/sofa/pull/573:560,Availability,failure,failures,560,"The scene checker detects when we use a plugin but forgot the ""required plugin"" tag and tells us how to add it in our scene, but without closing the tag. This PR fixes the bug in the suggestion and corrects some typos in error messages in the same file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/573
https://github.com/sofa-framework/sofa/pull/573:227,Integrability,message,messages,227,"The scene checker detects when we use a plugin but forgot the ""required plugin"" tag and tells us how to add it in our scene, but without closing the tag. This PR fixes the bug in the suggestion and corrects some typos in error messages in the same file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/573
https://github.com/sofa-framework/sofa/pull/573:353,Integrability,message,message,353,"The scene checker detects when we use a plugin but forgot the ""required plugin"" tag and tells us how to add it in our scene, but without closing the tag. This PR fixes the bug in the suggestion and corrects some typos in error messages in the same file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/573
https://github.com/sofa-framework/sofa/pull/573:40,Modifiability,plugin,plugin,40,"The scene checker detects when we use a plugin but forgot the ""required plugin"" tag and tells us how to add it in our scene, but without closing the tag. This PR fixes the bug in the suggestion and corrects some typos in error messages in the same file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/573
https://github.com/sofa-framework/sofa/pull/573:72,Modifiability,plugin,plugin,72,"The scene checker detects when we use a plugin but forgot the ""required plugin"" tag and tells us how to add it in our scene, but without closing the tag. This PR fixes the bug in the suggestion and corrects some typos in error messages in the same file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/573
https://github.com/sofa-framework/sofa/pull/573:18,Safety,detect,detects,18,"The scene checker detects when we use a plugin but forgot the ""required plugin"" tag and tells us how to add it in our scene, but without closing the tag. This PR fixes the bug in the suggestion and corrects some typos in error messages in the same file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/573
https://github.com/sofa-framework/sofa/pull/573:505,Testability,test,test,505,"The scene checker detects when we use a plugin but forgot the ""required plugin"" tag and tells us how to add it in our scene, but without closing the tag. This PR fixes the bug in the suggestion and corrects some typos in error messages in the same file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/573
https://github.com/sofa-framework/sofa/pull/573:555,Testability,test,test,555,"The scene checker detects when we use a plugin but forgot the ""required plugin"" tag and tells us how to add it in our scene, but without closing the tag. This PR fixes the bug in the suggestion and corrects some typos in error messages in the same file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/573
https://github.com/sofa-framework/sofa/issues/574:351,Deployability,update,updatePoints,351,"Historically Setting a CubeTopology with nx, ny, nz was creating the topology elements but not the positions vectors. This has been changed in commit: https://github.com/sofa-framework/sofa/commit/47ef2e63a80cda787fd4c61c04580e22ecd56e2e. Need to check code if it was a bug or if the component needs to be used in another way. ```; void CubeTopology::updatePoints(); {; SeqPoints& points = *seqPoints.beginEdit();; points.resize(nbPoints) ;; for(int i;i<nbPoints;i++); {; points[i] = getPoint(i);; }; seqPoints.endEdit();; }; ```. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/574
https://github.com/sofa-framework/sofa/pull/575:959,Availability,failure,failures,959,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:1009,Availability,failure,failures,1009,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:343,Deployability,configurat,configuration,343,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:417,Integrability,depend,dependency,417,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:481,Integrability,depend,dependencies,481,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:802,Integrability,message,message,802,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:29,Modifiability,plugin,pluginized,29,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:197,Modifiability,plugin,plugins,197,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:326,Modifiability,plugin,plugins,326,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:343,Modifiability,config,configuration,343,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:510,Modifiability,plugin,plugin,510,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:518,Modifiability,plugin,plugin,518,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:675,Modifiability,plugin,plugins,675,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:242,Testability,test,testing,242,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:283,Testability,test,tests,283,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:396,Testability,test,tests,396,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:572,Testability,test,tested,572,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:954,Testability,test,test,954,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/575:1004,Testability,test,test,1004,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575
https://github.com/sofa-framework/sofa/pull/576:372,Availability,failure,failures,372,- Add support to load VTK polylines in legacy formated files; - used the new astyle formating onto the three files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/576
https://github.com/sofa-framework/sofa/pull/576:422,Availability,failure,failures,422,- Add support to load VTK polylines in legacy formated files; - used the new astyle formating onto the three files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/576
https://github.com/sofa-framework/sofa/pull/576:215,Integrability,message,message,215,- Add support to load VTK polylines in legacy formated files; - used the new astyle formating onto the three files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/576
https://github.com/sofa-framework/sofa/pull/576:17,Performance,load,load,17,- Add support to load VTK polylines in legacy formated files; - used the new astyle formating onto the three files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/576
https://github.com/sofa-framework/sofa/pull/576:367,Testability,test,test,367,- Add support to load VTK polylines in legacy formated files; - used the new astyle formating onto the three files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/576
https://github.com/sofa-framework/sofa/pull/576:417,Testability,test,test,417,- Add support to load VTK polylines in legacy formated files; - used the new astyle formating onto the three files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/576
https://github.com/sofa-framework/sofa/issues/577:204,Availability,error,error,204,"I'm using Windows and compiling with Visual Studio. Thanks for the fixes made with PR #568 . I think there's one line that still needs to changed. When I ran the updated version, I received the following error: . [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\git\sofaframework\sofa\master\build\bin/share/sofa/gui/runSofa/resources/:C:/git/sofaframework/sofa/master/build/share/sofa/gui/qt/resources. I think the issue is in line 154 of sofa/applications/projects/runSofa/Main.cpp. ; Instead of:; GuiDataRepository.addFirstPath(SetDirectory::GetRelativeFromProcess(""../share/sofa/gui/runSofa/resources/"")) ;; ; I think it should be:; GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources/"").c_str()) ; . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/577
https://github.com/sofa-framework/sofa/issues/577:214,Availability,ERROR,ERROR,214,"I'm using Windows and compiling with Visual Studio. Thanks for the fixes made with PR #568 . I think there's one line that still needs to changed. When I ran the updated version, I received the following error: . [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\git\sofaframework\sofa\master\build\bin/share/sofa/gui/runSofa/resources/:C:/git/sofaframework/sofa/master/build/share/sofa/gui/qt/resources. I think the issue is in line 154 of sofa/applications/projects/runSofa/Main.cpp. ; Instead of:; GuiDataRepository.addFirstPath(SetDirectory::GetRelativeFromProcess(""../share/sofa/gui/runSofa/resources/"")) ;; ; I think it should be:; GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources/"").c_str()) ; . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/577
https://github.com/sofa-framework/sofa/issues/577:162,Deployability,update,updated,162,"I'm using Windows and compiling with Visual Studio. Thanks for the fixes made with PR #568 . I think there's one line that still needs to changed. When I ran the updated version, I received the following error: . [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\git\sofaframework\sofa\master\build\bin/share/sofa/gui/runSofa/resources/:C:/git/sofaframework/sofa/master/build/share/sofa/gui/qt/resources. I think the issue is in line 154 of sofa/applications/projects/runSofa/Main.cpp. ; Instead of:; GuiDataRepository.addFirstPath(SetDirectory::GetRelativeFromProcess(""../share/sofa/gui/runSofa/resources/"")) ;; ; I think it should be:; GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources/"").c_str()) ; . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/577
https://github.com/sofa-framework/sofa/issues/577:516,Usability,GuiD,GuiDataRepository,516,"I'm using Windows and compiling with Visual Studio. Thanks for the fixes made with PR #568 . I think there's one line that still needs to changed. When I ran the updated version, I received the following error: . [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\git\sofaframework\sofa\master\build\bin/share/sofa/gui/runSofa/resources/:C:/git/sofaframework/sofa/master/build/share/sofa/gui/qt/resources. I think the issue is in line 154 of sofa/applications/projects/runSofa/Main.cpp. ; Instead of:; GuiDataRepository.addFirstPath(SetDirectory::GetRelativeFromProcess(""../share/sofa/gui/runSofa/resources/"")) ;; ; I think it should be:; GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources/"").c_str()) ; . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/577
https://github.com/sofa-framework/sofa/issues/577:653,Usability,GuiD,GuiDataRepository,653,"I'm using Windows and compiling with Visual Studio. Thanks for the fixes made with PR #568 . I think there's one line that still needs to changed. When I ran the updated version, I received the following error: . [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\git\sofaframework\sofa\master\build\bin/share/sofa/gui/runSofa/resources/:C:/git/sofaframework/sofa/master/build/share/sofa/gui/qt/resources. I think the issue is in line 154 of sofa/applications/projects/runSofa/Main.cpp. ; Instead of:; GuiDataRepository.addFirstPath(SetDirectory::GetRelativeFromProcess(""../share/sofa/gui/runSofa/resources/"")) ;; ; I think it should be:; GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources/"").c_str()) ; . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/577
https://github.com/sofa-framework/sofa/pull/578:414,Availability,failure,failures,414,This fixes the GuiRepository path for Windows VS compiling related to issue #577 and then a subsequent issue with QTextBrowser opening the runsofa.html file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/578
https://github.com/sofa-framework/sofa/pull/578:464,Availability,failure,failures,464,This fixes the GuiRepository path for Windows VS compiling related to issue #577 and then a subsequent issue with QTextBrowser opening the runsofa.html file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/578
https://github.com/sofa-framework/sofa/pull/578:257,Integrability,message,message,257,This fixes the GuiRepository path for Windows VS compiling related to issue #577 and then a subsequent issue with QTextBrowser opening the runsofa.html file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/578
https://github.com/sofa-framework/sofa/pull/578:409,Testability,test,test,409,This fixes the GuiRepository path for Windows VS compiling related to issue #577 and then a subsequent issue with QTextBrowser opening the runsofa.html file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/578
https://github.com/sofa-framework/sofa/pull/578:459,Testability,test,test,459,This fixes the GuiRepository path for Windows VS compiling related to issue #577 and then a subsequent issue with QTextBrowser opening the runsofa.html file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/578
https://github.com/sofa-framework/sofa/pull/579:384,Availability,failure,failures,384,Only an optimal version based on the initial values of the; stiffness vector was implemented. Need to have updated stiffnesses. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/579
https://github.com/sofa-framework/sofa/pull/579:434,Availability,failure,failures,434,Only an optimal version based on the initial values of the; stiffness vector was implemented. Need to have updated stiffnesses. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/579
https://github.com/sofa-framework/sofa/pull/579:107,Deployability,update,updated,107,Only an optimal version based on the initial values of the; stiffness vector was implemented. Need to have updated stiffnesses. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/579
https://github.com/sofa-framework/sofa/pull/579:227,Integrability,message,message,227,Only an optimal version based on the initial values of the; stiffness vector was implemented. Need to have updated stiffnesses. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/579
https://github.com/sofa-framework/sofa/pull/579:379,Testability,test,test,379,Only an optimal version based on the initial values of the; stiffness vector was implemented. Need to have updated stiffnesses. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/579
https://github.com/sofa-framework/sofa/pull/579:429,Testability,test,test,429,Only an optimal version based on the initial values of the; stiffness vector was implemented. Need to have updated stiffnesses. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/579
https://github.com/sofa-framework/sofa/pull/580:866,Availability,failure,failures,866,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580
https://github.com/sofa-framework/sofa/pull/580:916,Availability,failure,failures,916,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580
https://github.com/sofa-framework/sofa/pull/580:709,Integrability,message,message,709,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580
https://github.com/sofa-framework/sofa/pull/580:165,Modifiability,Plugin,PluginManager,165,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580
https://github.com/sofa-framework/sofa/pull/580:243,Modifiability,plugin,pluginPath,243,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580
https://github.com/sofa-framework/sofa/pull/580:359,Modifiability,plugin,plugins,359,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580
https://github.com/sofa-framework/sofa/pull/580:467,Modifiability,plugin,plugin,467,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580
https://github.com/sofa-framework/sofa/pull/580:354,Performance,load,load,354,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580
https://github.com/sofa-framework/sofa/pull/580:460,Performance,load,loaded,460,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580
https://github.com/sofa-framework/sofa/pull/580:412,Safety,avoid,avoid,412,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580
https://github.com/sofa-framework/sofa/pull/580:583,Safety,avoid,avoided,583,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580
https://github.com/sofa-framework/sofa/pull/580:600,Security,access,access,600,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580
https://github.com/sofa-framework/sofa/pull/580:861,Testability,test,test,861,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580
https://github.com/sofa-framework/sofa/pull/580:911,Testability,test,test,911,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580
https://github.com/sofa-framework/sofa/issues/581:284,Integrability,message,message,284,"Hi,; When adding a MechanicalObject in a subnode of one containing a solver, its positions are taken into account by the solver (addKToMatrix) even if it is not mapped to the MechanicalObject in the solver's node. I am not sure that this makes sense, but if it does, a little warning message seems necessary to avoid spending time (hours in my case, as physics is not my strong suit...) searching for what goes wrong in the scene.; Looking fwd to your input on this topic!; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581
https://github.com/sofa-framework/sofa/issues/581:311,Safety,avoid,avoid,311,"Hi,; When adding a MechanicalObject in a subnode of one containing a solver, its positions are taken into account by the solver (addKToMatrix) even if it is not mapped to the MechanicalObject in the solver's node. I am not sure that this makes sense, but if it does, a little warning message seems necessary to avoid spending time (hours in my case, as physics is not my strong suit...) searching for what goes wrong in the scene.; Looking fwd to your input on this topic!; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581
https://github.com/sofa-framework/sofa/pull/583:2177,Availability,avail,available,2177,"he Sofa 'DataEngine' in a scripted way. In the second example provided it is shown how a versatile ROI functionality can be implemented with the help of the PSDE. Two examples with some documentation are provided in: ; applications/plugins/SofaPython/examples/PSDEExamples/. Example of use (01-basic/PSDEBasic.pyscn):; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; import Sofa; import os. path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename=path+'liver.vtk'); rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=""DataEngine.py"", classname=""MyDataEngine"")	 . ```; Example for DataEngine class in Python (01-basic/DataEngine.py):. ```python; class MyDataEngine(Sofa.PythonScriptDataEngine): ; ; def parse(self): ; # this is the correct place to define inputs and outputs! (linking will not work in init() for instance); self.addNewInput('Positions',datatype='p',value='@loader.position') ; self.addNewOutput('NumPoints',datatype='d', value='0') . def init(self):; 	pass. def update(self): ; self.NumPoints = len(self.Positions); ```. What it does NOT provide: A new form of parsing from Python data to Sofa data. It uses the available mechanism that uses string conversion and parsing. Also, the type of the Data has to be declared/selected with a parameter in Python, because there is no logic to automatically derive the type desired by the user (could be future work). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583
https://github.com/sofa-framework/sofa/pull/583:2680,Availability,failure,failures,2680,"he Sofa 'DataEngine' in a scripted way. In the second example provided it is shown how a versatile ROI functionality can be implemented with the help of the PSDE. Two examples with some documentation are provided in: ; applications/plugins/SofaPython/examples/PSDEExamples/. Example of use (01-basic/PSDEBasic.pyscn):; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; import Sofa; import os. path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename=path+'liver.vtk'); rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=""DataEngine.py"", classname=""MyDataEngine"")	 . ```; Example for DataEngine class in Python (01-basic/DataEngine.py):. ```python; class MyDataEngine(Sofa.PythonScriptDataEngine): ; ; def parse(self): ; # this is the correct place to define inputs and outputs! (linking will not work in init() for instance); self.addNewInput('Positions',datatype='p',value='@loader.position') ; self.addNewOutput('NumPoints',datatype='d', value='0') . def init(self):; 	pass. def update(self): ; self.NumPoints = len(self.Positions); ```. What it does NOT provide: A new form of parsing from Python data to Sofa data. It uses the available mechanism that uses string conversion and parsing. Also, the type of the Data has to be declared/selected with a parameter in Python, because there is no logic to automatically derive the type desired by the user (could be future work). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583
https://github.com/sofa-framework/sofa/pull/583:2730,Availability,failure,failures,2730,"he Sofa 'DataEngine' in a scripted way. In the second example provided it is shown how a versatile ROI functionality can be implemented with the help of the PSDE. Two examples with some documentation are provided in: ; applications/plugins/SofaPython/examples/PSDEExamples/. Example of use (01-basic/PSDEBasic.pyscn):; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; import Sofa; import os. path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename=path+'liver.vtk'); rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=""DataEngine.py"", classname=""MyDataEngine"")	 . ```; Example for DataEngine class in Python (01-basic/DataEngine.py):. ```python; class MyDataEngine(Sofa.PythonScriptDataEngine): ; ; def parse(self): ; # this is the correct place to define inputs and outputs! (linking will not work in init() for instance); self.addNewInput('Positions',datatype='p',value='@loader.position') ; self.addNewOutput('NumPoints',datatype='d', value='0') . def init(self):; 	pass. def update(self): ; self.NumPoints = len(self.Positions); ```. What it does NOT provide: A new form of parsing from Python data to Sofa data. It uses the available mechanism that uses string conversion and parsing. Also, the type of the Data has to be declared/selected with a parameter in Python, because there is no logic to automatically derive the type desired by the user (could be future work). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583
https://github.com/sofa-framework/sofa/pull/583:414,Deployability,update,update,414,"The PSDE works similar to a function block in Simulink or comparable software. The user can define a block (a PSDE) declaring its Inputs, Outputs (I/Os) and its behavior using Python alone. It has some similarities with the ""PythonScriptController"" (PSC). The two main differences are:. - PSDE-objects are not triggered by events (not conceptually at least). Rather, the functionality should be implemented in the update() function of the associated script, which is called once per simulation frame. ; - I/Os can be added directly to the object inside the parse() function of the PSDE-object. Linking using the '@'-syntax also works. Therefore, the PSDE-object behaves like any other object that has I/Os (or Data in general). Inside the script these newly defined I/Os can be accessed as members of the object, providing an easy syntax. You can think of the PSDE as a possibility of subclassing the Sofa 'DataEngine' in a scripted way. In the second example provided it is shown how a versatile ROI functionality can be implemented with the help of the PSDE. Two examples with some documentation are provided in: ; applications/plugins/SofaPython/examples/PSDEExamples/. Example of use (01-basic/PSDEBasic.pyscn):; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; import Sofa; import os. path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename=path+'liver.vtk'); rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=""DataEngine.py"", classname=""MyDataEngine"")	 . ```; Example for DataEngine class in Python (01-basic/DataEngine.py):. ```python; class MyDataEngine(Sofa.PythonScriptDataEngine): ; ; def parse(self): ; # this is the correct place to define inputs and outputs! (linking will not work in init() for instance); self.addNewInput('Positions',datatype='p',value='@loader.position') ; self.addNewOutput('NumPoints',datatype='d', value='0') . de",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583
https://github.com/sofa-framework/sofa/pull/583:2027,Deployability,update,update,2027,"he Sofa 'DataEngine' in a scripted way. In the second example provided it is shown how a versatile ROI functionality can be implemented with the help of the PSDE. Two examples with some documentation are provided in: ; applications/plugins/SofaPython/examples/PSDEExamples/. Example of use (01-basic/PSDEBasic.pyscn):; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; import Sofa; import os. path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename=path+'liver.vtk'); rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=""DataEngine.py"", classname=""MyDataEngine"")	 . ```; Example for DataEngine class in Python (01-basic/DataEngine.py):. ```python; class MyDataEngine(Sofa.PythonScriptDataEngine): ; ; def parse(self): ; # this is the correct place to define inputs and outputs! (linking will not work in init() for instance); self.addNewInput('Positions',datatype='p',value='@loader.position') ; self.addNewOutput('NumPoints',datatype='d', value='0') . def init(self):; 	pass. def update(self): ; self.NumPoints = len(self.Positions); ```. What it does NOT provide: A new form of parsing from Python data to Sofa data. It uses the available mechanism that uses string conversion and parsing. Also, the type of the Data has to be declared/selected with a parameter in Python, because there is no logic to automatically derive the type desired by the user (could be future work). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583
https://github.com/sofa-framework/sofa/pull/583:2523,Integrability,message,message,2523,"he Sofa 'DataEngine' in a scripted way. In the second example provided it is shown how a versatile ROI functionality can be implemented with the help of the PSDE. Two examples with some documentation are provided in: ; applications/plugins/SofaPython/examples/PSDEExamples/. Example of use (01-basic/PSDEBasic.pyscn):; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; import Sofa; import os. path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename=path+'liver.vtk'); rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=""DataEngine.py"", classname=""MyDataEngine"")	 . ```; Example for DataEngine class in Python (01-basic/DataEngine.py):. ```python; class MyDataEngine(Sofa.PythonScriptDataEngine): ; ; def parse(self): ; # this is the correct place to define inputs and outputs! (linking will not work in init() for instance); self.addNewInput('Positions',datatype='p',value='@loader.position') ; self.addNewOutput('NumPoints',datatype='d', value='0') . def init(self):; 	pass. def update(self): ; self.NumPoints = len(self.Positions); ```. What it does NOT provide: A new form of parsing from Python data to Sofa data. It uses the available mechanism that uses string conversion and parsing. Also, the type of the Data has to be declared/selected with a parameter in Python, because there is no logic to automatically derive the type desired by the user (could be future work). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583
https://github.com/sofa-framework/sofa/pull/583:1130,Modifiability,plugin,plugins,1130,"declaring its Inputs, Outputs (I/Os) and its behavior using Python alone. It has some similarities with the ""PythonScriptController"" (PSC). The two main differences are:. - PSDE-objects are not triggered by events (not conceptually at least). Rather, the functionality should be implemented in the update() function of the associated script, which is called once per simulation frame. ; - I/Os can be added directly to the object inside the parse() function of the PSDE-object. Linking using the '@'-syntax also works. Therefore, the PSDE-object behaves like any other object that has I/Os (or Data in general). Inside the script these newly defined I/Os can be accessed as members of the object, providing an easy syntax. You can think of the PSDE as a possibility of subclassing the Sofa 'DataEngine' in a scripted way. In the second example provided it is shown how a versatile ROI functionality can be implemented with the help of the PSDE. Two examples with some documentation are provided in: ; applications/plugins/SofaPython/examples/PSDEExamples/. Example of use (01-basic/PSDEBasic.pyscn):; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; import Sofa; import os. path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename=path+'liver.vtk'); rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=""DataEngine.py"", classname=""MyDataEngine"")	 . ```; Example for DataEngine class in Python (01-basic/DataEngine.py):. ```python; class MyDataEngine(Sofa.PythonScriptDataEngine): ; ; def parse(self): ; # this is the correct place to define inputs and outputs! (linking will not work in init() for instance); self.addNewInput('Positions',datatype='p',value='@loader.position') ; self.addNewOutput('NumPoints',datatype='d', value='0') . def init(self):; 	pass. def update(self): ; self.NumPoints = len(self.Positions); ```. What it does NOT provide: A ne",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583
https://github.com/sofa-framework/sofa/pull/583:1459,Performance,load,loader,1459,", which is called once per simulation frame. ; - I/Os can be added directly to the object inside the parse() function of the PSDE-object. Linking using the '@'-syntax also works. Therefore, the PSDE-object behaves like any other object that has I/Os (or Data in general). Inside the script these newly defined I/Os can be accessed as members of the object, providing an easy syntax. You can think of the PSDE as a possibility of subclassing the Sofa 'DataEngine' in a scripted way. In the second example provided it is shown how a versatile ROI functionality can be implemented with the help of the PSDE. Two examples with some documentation are provided in: ; applications/plugins/SofaPython/examples/PSDEExamples/. Example of use (01-basic/PSDEBasic.pyscn):; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; import Sofa; import os. path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename=path+'liver.vtk'); rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=""DataEngine.py"", classname=""MyDataEngine"")	 . ```; Example for DataEngine class in Python (01-basic/DataEngine.py):. ```python; class MyDataEngine(Sofa.PythonScriptDataEngine): ; ; def parse(self): ; # this is the correct place to define inputs and outputs! (linking will not work in init() for instance); self.addNewInput('Positions',datatype='p',value='@loader.position') ; self.addNewOutput('NumPoints',datatype='d', value='0') . def init(self):; 	pass. def update(self): ; self.NumPoints = len(self.Positions); ```. What it does NOT provide: A new form of parsing from Python data to Sofa data. It uses the available mechanism that uses string conversion and parsing. Also, the type of the Data has to be declared/selected with a parameter in Python, because there is no logic to automatically derive the type desired by the user (could be future work). ________________________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583
https://github.com/sofa-framework/sofa/pull/583:1922,Performance,load,loader,1922,"he Sofa 'DataEngine' in a scripted way. In the second example provided it is shown how a versatile ROI functionality can be implemented with the help of the PSDE. Two examples with some documentation are provided in: ; applications/plugins/SofaPython/examples/PSDEExamples/. Example of use (01-basic/PSDEBasic.pyscn):; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; import Sofa; import os. path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename=path+'liver.vtk'); rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=""DataEngine.py"", classname=""MyDataEngine"")	 . ```; Example for DataEngine class in Python (01-basic/DataEngine.py):. ```python; class MyDataEngine(Sofa.PythonScriptDataEngine): ; ; def parse(self): ; # this is the correct place to define inputs and outputs! (linking will not work in init() for instance); self.addNewInput('Positions',datatype='p',value='@loader.position') ; self.addNewOutput('NumPoints',datatype='d', value='0') . def init(self):; 	pass. def update(self): ; self.NumPoints = len(self.Positions); ```. What it does NOT provide: A new form of parsing from Python data to Sofa data. It uses the available mechanism that uses string conversion and parsing. Also, the type of the Data has to be declared/selected with a parameter in Python, because there is no logic to automatically derive the type desired by the user (could be future work). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583
https://github.com/sofa-framework/sofa/pull/583:778,Security,access,accessed,778,"The PSDE works similar to a function block in Simulink or comparable software. The user can define a block (a PSDE) declaring its Inputs, Outputs (I/Os) and its behavior using Python alone. It has some similarities with the ""PythonScriptController"" (PSC). The two main differences are:. - PSDE-objects are not triggered by events (not conceptually at least). Rather, the functionality should be implemented in the update() function of the associated script, which is called once per simulation frame. ; - I/Os can be added directly to the object inside the parse() function of the PSDE-object. Linking using the '@'-syntax also works. Therefore, the PSDE-object behaves like any other object that has I/Os (or Data in general). Inside the script these newly defined I/Os can be accessed as members of the object, providing an easy syntax. You can think of the PSDE as a possibility of subclassing the Sofa 'DataEngine' in a scripted way. In the second example provided it is shown how a versatile ROI functionality can be implemented with the help of the PSDE. Two examples with some documentation are provided in: ; applications/plugins/SofaPython/examples/PSDEExamples/. Example of use (01-basic/PSDEBasic.pyscn):; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; import Sofa; import os. path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename=path+'liver.vtk'); rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=""DataEngine.py"", classname=""MyDataEngine"")	 . ```; Example for DataEngine class in Python (01-basic/DataEngine.py):. ```python; class MyDataEngine(Sofa.PythonScriptDataEngine): ; ; def parse(self): ; # this is the correct place to define inputs and outputs! (linking will not work in init() for instance); self.addNewInput('Positions',datatype='p',value='@loader.position') ; self.addNewOutput('NumPoints',datatype='d', value='0') . de",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583
https://github.com/sofa-framework/sofa/pull/583:2341,Testability,log,logic,2341,"he Sofa 'DataEngine' in a scripted way. In the second example provided it is shown how a versatile ROI functionality can be implemented with the help of the PSDE. Two examples with some documentation are provided in: ; applications/plugins/SofaPython/examples/PSDEExamples/. Example of use (01-basic/PSDEBasic.pyscn):; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; import Sofa; import os. path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename=path+'liver.vtk'); rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=""DataEngine.py"", classname=""MyDataEngine"")	 . ```; Example for DataEngine class in Python (01-basic/DataEngine.py):. ```python; class MyDataEngine(Sofa.PythonScriptDataEngine): ; ; def parse(self): ; # this is the correct place to define inputs and outputs! (linking will not work in init() for instance); self.addNewInput('Positions',datatype='p',value='@loader.position') ; self.addNewOutput('NumPoints',datatype='d', value='0') . def init(self):; 	pass. def update(self): ; self.NumPoints = len(self.Positions); ```. What it does NOT provide: A new form of parsing from Python data to Sofa data. It uses the available mechanism that uses string conversion and parsing. Also, the type of the Data has to be declared/selected with a parameter in Python, because there is no logic to automatically derive the type desired by the user (could be future work). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583
https://github.com/sofa-framework/sofa/pull/583:2675,Testability,test,test,2675,"he Sofa 'DataEngine' in a scripted way. In the second example provided it is shown how a versatile ROI functionality can be implemented with the help of the PSDE. Two examples with some documentation are provided in: ; applications/plugins/SofaPython/examples/PSDEExamples/. Example of use (01-basic/PSDEBasic.pyscn):; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; import Sofa; import os. path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename=path+'liver.vtk'); rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=""DataEngine.py"", classname=""MyDataEngine"")	 . ```; Example for DataEngine class in Python (01-basic/DataEngine.py):. ```python; class MyDataEngine(Sofa.PythonScriptDataEngine): ; ; def parse(self): ; # this is the correct place to define inputs and outputs! (linking will not work in init() for instance); self.addNewInput('Positions',datatype='p',value='@loader.position') ; self.addNewOutput('NumPoints',datatype='d', value='0') . def init(self):; 	pass. def update(self): ; self.NumPoints = len(self.Positions); ```. What it does NOT provide: A new form of parsing from Python data to Sofa data. It uses the available mechanism that uses string conversion and parsing. Also, the type of the Data has to be declared/selected with a parameter in Python, because there is no logic to automatically derive the type desired by the user (could be future work). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583
https://github.com/sofa-framework/sofa/pull/583:2725,Testability,test,test,2725,"he Sofa 'DataEngine' in a scripted way. In the second example provided it is shown how a versatile ROI functionality can be implemented with the help of the PSDE. Two examples with some documentation are provided in: ; applications/plugins/SofaPython/examples/PSDEExamples/. Example of use (01-basic/PSDEBasic.pyscn):; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; import Sofa; import os. path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename=path+'liver.vtk'); rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=""DataEngine.py"", classname=""MyDataEngine"")	 . ```; Example for DataEngine class in Python (01-basic/DataEngine.py):. ```python; class MyDataEngine(Sofa.PythonScriptDataEngine): ; ; def parse(self): ; # this is the correct place to define inputs and outputs! (linking will not work in init() for instance); self.addNewInput('Positions',datatype='p',value='@loader.position') ; self.addNewOutput('NumPoints',datatype='d', value='0') . def init(self):; 	pass. def update(self): ; self.NumPoints = len(self.Positions); ```. What it does NOT provide: A new form of parsing from Python data to Sofa data. It uses the available mechanism that uses string conversion and parsing. Also, the type of the Data has to be declared/selected with a parameter in Python, because there is no logic to automatically derive the type desired by the user (could be future work). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583
https://github.com/sofa-framework/sofa/pull/584:332,Availability,failure,failures,332,Everything is in the title !; Towards a really clean and green dashboard !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/584
https://github.com/sofa-framework/sofa/pull/584:382,Availability,failure,failures,382,Everything is in the title !; Towards a really clean and green dashboard !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/584
https://github.com/sofa-framework/sofa/pull/584:57,Energy Efficiency,green,green,57,Everything is in the title !; Towards a really clean and green dashboard !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/584
https://github.com/sofa-framework/sofa/pull/584:175,Integrability,message,message,175,Everything is in the title !; Towards a really clean and green dashboard !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/584
https://github.com/sofa-framework/sofa/pull/584:327,Testability,test,test,327,Everything is in the title !; Towards a really clean and green dashboard !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/584
https://github.com/sofa-framework/sofa/pull/584:377,Testability,test,test,377,Everything is in the title !; Towards a really clean and green dashboard !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/584
https://github.com/sofa-framework/sofa/pull/585:432,Availability,failure,failures,432,"Everything is in the title.; Also update SOFA version in CMake to `18.06.dev`. From source dir: `./scripts/licenseUpdater/licenseUpdater.sh . auto 2018 ""development version""`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/585
https://github.com/sofa-framework/sofa/pull/585:482,Availability,failure,failures,482,"Everything is in the title.; Also update SOFA version in CMake to `18.06.dev`. From source dir: `./scripts/licenseUpdater/licenseUpdater.sh . auto 2018 ""development version""`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/585
https://github.com/sofa-framework/sofa/pull/585:34,Deployability,update,update,34,"Everything is in the title.; Also update SOFA version in CMake to `18.06.dev`. From source dir: `./scripts/licenseUpdater/licenseUpdater.sh . auto 2018 ""development version""`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/585
https://github.com/sofa-framework/sofa/pull/585:275,Integrability,message,message,275,"Everything is in the title.; Also update SOFA version in CMake to `18.06.dev`. From source dir: `./scripts/licenseUpdater/licenseUpdater.sh . auto 2018 ""development version""`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/585
https://github.com/sofa-framework/sofa/pull/585:427,Testability,test,test,427,"Everything is in the title.; Also update SOFA version in CMake to `18.06.dev`. From source dir: `./scripts/licenseUpdater/licenseUpdater.sh . auto 2018 ""development version""`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/585
https://github.com/sofa-framework/sofa/pull/585:477,Testability,test,test,477,"Everything is in the title.; Also update SOFA version in CMake to `18.06.dev`. From source dir: `./scripts/licenseUpdater/licenseUpdater.sh . auto 2018 ""development version""`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/585
https://github.com/sofa-framework/sofa/pull/586:486,Availability,failure,failures,486,This PR removes the COMPONENTSET mechanism from our CMakeLists.; Deprecated components are now identified by the option SOFA_WITH_DEPRECATED_COMPONENTS. I also couldn't resist to reformat a bit. Tell me if I did something wrong!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/586
https://github.com/sofa-framework/sofa/pull/586:536,Availability,failure,failures,536,This PR removes the COMPONENTSET mechanism from our CMakeLists.; Deprecated components are now identified by the option SOFA_WITH_DEPRECATED_COMPONENTS. I also couldn't resist to reformat a bit. Tell me if I did something wrong!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/586
https://github.com/sofa-framework/sofa/pull/586:329,Integrability,message,message,329,This PR removes the COMPONENTSET mechanism from our CMakeLists.; Deprecated components are now identified by the option SOFA_WITH_DEPRECATED_COMPONENTS. I also couldn't resist to reformat a bit. Tell me if I did something wrong!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/586
https://github.com/sofa-framework/sofa/pull/586:481,Testability,test,test,481,This PR removes the COMPONENTSET mechanism from our CMakeLists.; Deprecated components are now identified by the option SOFA_WITH_DEPRECATED_COMPONENTS. I also couldn't resist to reformat a bit. Tell me if I did something wrong!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/586
https://github.com/sofa-framework/sofa/pull/586:531,Testability,test,test,531,This PR removes the COMPONENTSET mechanism from our CMakeLists.; Deprecated components are now identified by the option SOFA_WITH_DEPRECATED_COMPONENTS. I also couldn't resist to reformat a bit. Tell me if I did something wrong!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/586
https://github.com/sofa-framework/sofa/pull/587:464,Availability,failure,failures,464,Clean the Messaging.h class by:. - removing commented/unused code; - removing the double parentheses used for the conditions of the **msg_*_when(cond)**. Compiles fine. This should also remove some warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/587
https://github.com/sofa-framework/sofa/pull/587:514,Availability,failure,failures,514,Clean the Messaging.h class by:. - removing commented/unused code; - removing the double parentheses used for the conditions of the **msg_*_when(cond)**. Compiles fine. This should also remove some warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/587
https://github.com/sofa-framework/sofa/pull/587:307,Integrability,message,message,307,Clean the Messaging.h class by:. - removing commented/unused code; - removing the double parentheses used for the conditions of the **msg_*_when(cond)**. Compiles fine. This should also remove some warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/587
https://github.com/sofa-framework/sofa/pull/587:459,Testability,test,test,459,Clean the Messaging.h class by:. - removing commented/unused code; - removing the double parentheses used for the conditions of the **msg_*_when(cond)**. Compiles fine. This should also remove some warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/587
https://github.com/sofa-framework/sofa/pull/587:509,Testability,test,test,509,Clean the Messaging.h class by:. - removing commented/unused code; - removing the double parentheses used for the conditions of the **msg_*_when(cond)**. Compiles fine. This should also remove some warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/587
https://github.com/sofa-framework/sofa/pull/588:303,Availability,failure,failures,303,Small PR to fix two unneeded dependencies :-). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/588
https://github.com/sofa-framework/sofa/pull/588:353,Availability,failure,failures,353,Small PR to fix two unneeded dependencies :-). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/588
https://github.com/sofa-framework/sofa/pull/588:29,Integrability,depend,dependencies,29,Small PR to fix two unneeded dependencies :-). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/588
https://github.com/sofa-framework/sofa/pull/588:146,Integrability,message,message,146,Small PR to fix two unneeded dependencies :-). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/588
https://github.com/sofa-framework/sofa/pull/588:298,Testability,test,test,298,Small PR to fix two unneeded dependencies :-). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/588
https://github.com/sofa-framework/sofa/pull/588:348,Testability,test,test,348,Small PR to fix two unneeded dependencies :-). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/588
https://github.com/sofa-framework/sofa/pull/590:367,Availability,failure,failures,367,Simply remove a useless if block. Related to : https://github.com/sofa-framework/sofa/issues/535; Fixes #535 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/590
https://github.com/sofa-framework/sofa/pull/590:417,Availability,failure,failures,417,Simply remove a useless if block. Related to : https://github.com/sofa-framework/sofa/issues/535; Fixes #535 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/590
https://github.com/sofa-framework/sofa/pull/590:210,Integrability,message,message,210,Simply remove a useless if block. Related to : https://github.com/sofa-framework/sofa/issues/535; Fixes #535 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/590
https://github.com/sofa-framework/sofa/pull/590:362,Testability,test,test,362,Simply remove a useless if block. Related to : https://github.com/sofa-framework/sofa/issues/535; Fixes #535 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/590
https://github.com/sofa-framework/sofa/pull/590:412,Testability,test,test,412,Simply remove a useless if block. Related to : https://github.com/sofa-framework/sofa/issues/535; Fixes #535 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/590
https://github.com/sofa-framework/sofa/pull/590:0,Usability,Simpl,Simply,0,Simply remove a useless if block. Related to : https://github.com/sofa-framework/sofa/issues/535; Fixes #535 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/590
https://github.com/sofa-framework/sofa/pull/591:317,Availability,failure,failures,317,This will fix the crashing DistanceGridForceField-liver.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/591
https://github.com/sofa-framework/sofa/pull/591:367,Availability,failure,failures,367,This will fix the crashing DistanceGridForceField-liver.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/591
https://github.com/sofa-framework/sofa/pull/591:160,Integrability,message,message,160,This will fix the crashing DistanceGridForceField-liver.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/591
https://github.com/sofa-framework/sofa/pull/591:312,Testability,test,test,312,This will fix the crashing DistanceGridForceField-liver.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/591
https://github.com/sofa-framework/sofa/pull/591:362,Testability,test,test,362,This will fix the crashing DistanceGridForceField-liver.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/591
https://github.com/sofa-framework/sofa/pull/592:502,Availability,failure,failures,502,This PR fix an issue with sofa-launcher. When we are using sofa-launcher the scene we want to execute is copied in the /tmp directory. ; But because we weren't closing the current file it wasn't saved and so wasn't executed. . The fix close it.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/592
https://github.com/sofa-framework/sofa/pull/592:552,Availability,failure,failures,552,This PR fix an issue with sofa-launcher. When we are using sofa-launcher the scene we want to execute is copied in the /tmp directory. ; But because we weren't closing the current file it wasn't saved and so wasn't executed. . The fix close it.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/592
https://github.com/sofa-framework/sofa/pull/592:345,Integrability,message,message,345,This PR fix an issue with sofa-launcher. When we are using sofa-launcher the scene we want to execute is copied in the /tmp directory. ; But because we weren't closing the current file it wasn't saved and so wasn't executed. . The fix close it.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/592
https://github.com/sofa-framework/sofa/pull/592:497,Testability,test,test,497,This PR fix an issue with sofa-launcher. When we are using sofa-launcher the scene we want to execute is copied in the /tmp directory. ; But because we weren't closing the current file it wasn't saved and so wasn't executed. . The fix close it.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/592
https://github.com/sofa-framework/sofa/pull/592:547,Testability,test,test,547,This PR fix an issue with sofa-launcher. When we are using sofa-launcher the scene we want to execute is copied in the /tmp directory. ; But because we weren't closing the current file it wasn't saved and so wasn't executed. . The fix close it.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/592
https://github.com/sofa-framework/sofa/pull/594:460,Availability,failure,failures,460,"ignored scene: DistanceGridForceField-liver.scn. This way, the scene has to remain ignored to build the plugin in default mode (we need it for SofaImplicitField, which is needed for a bunch of examples). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/594
https://github.com/sofa-framework/sofa/pull/594:510,Availability,failure,failures,510,"ignored scene: DistanceGridForceField-liver.scn. This way, the scene has to remain ignored to build the plugin in default mode (we need it for SofaImplicitField, which is needed for a bunch of examples). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/594
https://github.com/sofa-framework/sofa/pull/594:303,Integrability,message,message,303,"ignored scene: DistanceGridForceField-liver.scn. This way, the scene has to remain ignored to build the plugin in default mode (we need it for SofaImplicitField, which is needed for a bunch of examples). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/594
https://github.com/sofa-framework/sofa/pull/594:104,Modifiability,plugin,plugin,104,"ignored scene: DistanceGridForceField-liver.scn. This way, the scene has to remain ignored to build the plugin in default mode (we need it for SofaImplicitField, which is needed for a bunch of examples). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/594
https://github.com/sofa-framework/sofa/pull/594:455,Testability,test,test,455,"ignored scene: DistanceGridForceField-liver.scn. This way, the scene has to remain ignored to build the plugin in default mode (we need it for SofaImplicitField, which is needed for a bunch of examples). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/594
https://github.com/sofa-framework/sofa/pull/594:505,Testability,test,test,505,"ignored scene: DistanceGridForceField-liver.scn. This way, the scene has to remain ignored to build the plugin in default mode (we need it for SofaImplicitField, which is needed for a bunch of examples). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/594
https://github.com/sofa-framework/sofa/pull/595:502,Availability,failure,failures,502,This PR will fix our last failing unit test on Unix! :tada: . CImgPlugin defines for CImg build needed to also be defined by every project using CImg.; ~~They are now exported in `CImgPlugin_CFLAGS`.~~; They are now defined PUBLIC by CImgPlugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/595
https://github.com/sofa-framework/sofa/pull/595:552,Availability,failure,failures,552,This PR will fix our last failing unit test on Unix! :tada: . CImgPlugin defines for CImg build needed to also be defined by every project using CImg.; ~~They are now exported in `CImgPlugin_CFLAGS`.~~; They are now defined PUBLIC by CImgPlugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/595
https://github.com/sofa-framework/sofa/pull/595:345,Integrability,message,message,345,This PR will fix our last failing unit test on Unix! :tada: . CImgPlugin defines for CImg build needed to also be defined by every project using CImg.; ~~They are now exported in `CImgPlugin_CFLAGS`.~~; They are now defined PUBLIC by CImgPlugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/595
https://github.com/sofa-framework/sofa/pull/595:39,Testability,test,test,39,This PR will fix our last failing unit test on Unix! :tada: . CImgPlugin defines for CImg build needed to also be defined by every project using CImg.; ~~They are now exported in `CImgPlugin_CFLAGS`.~~; They are now defined PUBLIC by CImgPlugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/595
https://github.com/sofa-framework/sofa/pull/595:497,Testability,test,test,497,This PR will fix our last failing unit test on Unix! :tada: . CImgPlugin defines for CImg build needed to also be defined by every project using CImg.; ~~They are now exported in `CImgPlugin_CFLAGS`.~~; They are now defined PUBLIC by CImgPlugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/595
https://github.com/sofa-framework/sofa/pull/595:547,Testability,test,test,547,This PR will fix our last failing unit test on Unix! :tada: . CImgPlugin defines for CImg build needed to also be defined by every project using CImg.; ~~They are now exported in `CImgPlugin_CFLAGS`.~~; They are now defined PUBLIC by CImgPlugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/595
https://github.com/sofa-framework/sofa/pull/596:368,Availability,failure,failures,368,This is an attempt to refactor from PR #332 to make it non breaking. . No need for review now this is in WIP. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/596
https://github.com/sofa-framework/sofa/pull/596:418,Availability,failure,failures,418,This is an attempt to refactor from PR #332 to make it non breaking. . No need for review now this is in WIP. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/596
https://github.com/sofa-framework/sofa/pull/596:211,Integrability,message,message,211,This is an attempt to refactor from PR #332 to make it non breaking. . No need for review now this is in WIP. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/596
https://github.com/sofa-framework/sofa/pull/596:22,Modifiability,refactor,refactor,22,This is an attempt to refactor from PR #332 to make it non breaking. . No need for review now this is in WIP. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/596
https://github.com/sofa-framework/sofa/pull/596:363,Testability,test,test,363,This is an attempt to refactor from PR #332 to make it non breaking. . No need for review now this is in WIP. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/596
https://github.com/sofa-framework/sofa/pull/596:413,Testability,test,test,413,This is an attempt to refactor from PR #332 to make it non breaking. . No need for review now this is in WIP. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/596
https://github.com/sofa-framework/sofa/issues/597:87,Deployability,update,update,87,"Hi all, . There has been quite a lot of discussion recently about how the to implement update mecanisms. ; There is of course the DataTracker, but we are quite a lot to implement complementary mecanism in our respectives plugins so it may be a good idea to see what can be factorized into SofaCore. To do that it would be nice to have examples / snippets / draft of the different approaches we have tested or in mind so that we can evaluate the code impact and interoperability. @bruno-marques, @hugtalbot, @epernod, @jnbrunet feel free to add your ideas. ______________________________________________________; Dedicated Gitter room : https://gitter.im/sofa-framework/data-update?utm_source=share-link&utm_medium=link&utm_campaign=share-link",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597
https://github.com/sofa-framework/sofa/issues/597:674,Deployability,update,update,674,"Hi all, . There has been quite a lot of discussion recently about how the to implement update mecanisms. ; There is of course the DataTracker, but we are quite a lot to implement complementary mecanism in our respectives plugins so it may be a good idea to see what can be factorized into SofaCore. To do that it would be nice to have examples / snippets / draft of the different approaches we have tested or in mind so that we can evaluate the code impact and interoperability. @bruno-marques, @hugtalbot, @epernod, @jnbrunet feel free to add your ideas. ______________________________________________________; Dedicated Gitter room : https://gitter.im/sofa-framework/data-update?utm_source=share-link&utm_medium=link&utm_campaign=share-link",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597
https://github.com/sofa-framework/sofa/issues/597:461,Integrability,interoperab,interoperability,461,"Hi all, . There has been quite a lot of discussion recently about how the to implement update mecanisms. ; There is of course the DataTracker, but we are quite a lot to implement complementary mecanism in our respectives plugins so it may be a good idea to see what can be factorized into SofaCore. To do that it would be nice to have examples / snippets / draft of the different approaches we have tested or in mind so that we can evaluate the code impact and interoperability. @bruno-marques, @hugtalbot, @epernod, @jnbrunet feel free to add your ideas. ______________________________________________________; Dedicated Gitter room : https://gitter.im/sofa-framework/data-update?utm_source=share-link&utm_medium=link&utm_campaign=share-link",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597
https://github.com/sofa-framework/sofa/issues/597:221,Modifiability,plugin,plugins,221,"Hi all, . There has been quite a lot of discussion recently about how the to implement update mecanisms. ; There is of course the DataTracker, but we are quite a lot to implement complementary mecanism in our respectives plugins so it may be a good idea to see what can be factorized into SofaCore. To do that it would be nice to have examples / snippets / draft of the different approaches we have tested or in mind so that we can evaluate the code impact and interoperability. @bruno-marques, @hugtalbot, @epernod, @jnbrunet feel free to add your ideas. ______________________________________________________; Dedicated Gitter room : https://gitter.im/sofa-framework/data-update?utm_source=share-link&utm_medium=link&utm_campaign=share-link",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597
https://github.com/sofa-framework/sofa/issues/597:399,Testability,test,tested,399,"Hi all, . There has been quite a lot of discussion recently about how the to implement update mecanisms. ; There is of course the DataTracker, but we are quite a lot to implement complementary mecanism in our respectives plugins so it may be a good idea to see what can be factorized into SofaCore. To do that it would be nice to have examples / snippets / draft of the different approaches we have tested or in mind so that we can evaluate the code impact and interoperability. @bruno-marques, @hugtalbot, @epernod, @jnbrunet feel free to add your ideas. ______________________________________________________; Dedicated Gitter room : https://gitter.im/sofa-framework/data-update?utm_source=share-link&utm_medium=link&utm_campaign=share-link",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597
https://github.com/sofa-framework/sofa/pull/598:941,Availability,failure,failures,941,"Glut is a deprecated library and in my opinion, should be not used anymore. (not compatible with newer version of OpenGL, etc); It can be replaced with GLFW to create quick graphical applications. This first PR is moving the SofaGuiGlut to the applications directory, in case any people are still using it.; Actually, the code was not compatible with the current SofaGui API and was not compiling.; The code is now compilable and launchable anyway. Any reference to Glut are removed from the SofaFramework (header, CMake) and from runSofa. Lastly, a replacement using gflw will be pushed in the near future, for people wishing to have a simple GUI without the heavy-duty Qt Framework. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/598
https://github.com/sofa-framework/sofa/pull/598:991,Availability,failure,failures,991,"Glut is a deprecated library and in my opinion, should be not used anymore. (not compatible with newer version of OpenGL, etc); It can be replaced with GLFW to create quick graphical applications. This first PR is moving the SofaGuiGlut to the applications directory, in case any people are still using it.; Actually, the code was not compatible with the current SofaGui API and was not compiling.; The code is now compilable and launchable anyway. Any reference to Glut are removed from the SofaFramework (header, CMake) and from runSofa. Lastly, a replacement using gflw will be pushed in the near future, for people wishing to have a simple GUI without the heavy-duty Qt Framework. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/598
https://github.com/sofa-framework/sofa/pull/598:784,Integrability,message,message,784,"Glut is a deprecated library and in my opinion, should be not used anymore. (not compatible with newer version of OpenGL, etc); It can be replaced with GLFW to create quick graphical applications. This first PR is moving the SofaGuiGlut to the applications directory, in case any people are still using it.; Actually, the code was not compatible with the current SofaGui API and was not compiling.; The code is now compilable and launchable anyway. Any reference to Glut are removed from the SofaFramework (header, CMake) and from runSofa. Lastly, a replacement using gflw will be pushed in the near future, for people wishing to have a simple GUI without the heavy-duty Qt Framework. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/598
https://github.com/sofa-framework/sofa/pull/598:936,Testability,test,test,936,"Glut is a deprecated library and in my opinion, should be not used anymore. (not compatible with newer version of OpenGL, etc); It can be replaced with GLFW to create quick graphical applications. This first PR is moving the SofaGuiGlut to the applications directory, in case any people are still using it.; Actually, the code was not compatible with the current SofaGui API and was not compiling.; The code is now compilable and launchable anyway. Any reference to Glut are removed from the SofaFramework (header, CMake) and from runSofa. Lastly, a replacement using gflw will be pushed in the near future, for people wishing to have a simple GUI without the heavy-duty Qt Framework. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/598
https://github.com/sofa-framework/sofa/pull/598:986,Testability,test,test,986,"Glut is a deprecated library and in my opinion, should be not used anymore. (not compatible with newer version of OpenGL, etc); It can be replaced with GLFW to create quick graphical applications. This first PR is moving the SofaGuiGlut to the applications directory, in case any people are still using it.; Actually, the code was not compatible with the current SofaGui API and was not compiling.; The code is now compilable and launchable anyway. Any reference to Glut are removed from the SofaFramework (header, CMake) and from runSofa. Lastly, a replacement using gflw will be pushed in the near future, for people wishing to have a simple GUI without the heavy-duty Qt Framework. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/598
https://github.com/sofa-framework/sofa/pull/598:637,Usability,simpl,simple,637,"Glut is a deprecated library and in my opinion, should be not used anymore. (not compatible with newer version of OpenGL, etc); It can be replaced with GLFW to create quick graphical applications. This first PR is moving the SofaGuiGlut to the applications directory, in case any people are still using it.; Actually, the code was not compatible with the current SofaGui API and was not compiling.; The code is now compilable and launchable anyway. Any reference to Glut are removed from the SofaFramework (header, CMake) and from runSofa. Lastly, a replacement using gflw will be pushed in the near future, for people wishing to have a simple GUI without the heavy-duty Qt Framework. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/598
https://github.com/sofa-framework/sofa/pull/599:575,Availability,failure,failures,575,"It was not possible to compile runSofa without activating SofaGuiQt, because GuiDataRepository was instantiated in SofaGuiQt library.; As GuiDataRepository seems to be rather generic and not tied to Qt, GuiDataRepository has been moved to SofaGuiCommon ; and allows runSofa to be compiled without enabling SOFA_GUI_QT. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599
https://github.com/sofa-framework/sofa/pull/599:625,Availability,failure,failures,625,"It was not possible to compile runSofa without activating SofaGuiQt, because GuiDataRepository was instantiated in SofaGuiQt library.; As GuiDataRepository seems to be rather generic and not tied to Qt, GuiDataRepository has been moved to SofaGuiCommon ; and allows runSofa to be compiled without enabling SOFA_GUI_QT. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599
https://github.com/sofa-framework/sofa/pull/599:418,Integrability,message,message,418,"It was not possible to compile runSofa without activating SofaGuiQt, because GuiDataRepository was instantiated in SofaGuiQt library.; As GuiDataRepository seems to be rather generic and not tied to Qt, GuiDataRepository has been moved to SofaGuiCommon ; and allows runSofa to be compiled without enabling SOFA_GUI_QT. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599
https://github.com/sofa-framework/sofa/pull/599:570,Testability,test,test,570,"It was not possible to compile runSofa without activating SofaGuiQt, because GuiDataRepository was instantiated in SofaGuiQt library.; As GuiDataRepository seems to be rather generic and not tied to Qt, GuiDataRepository has been moved to SofaGuiCommon ; and allows runSofa to be compiled without enabling SOFA_GUI_QT. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599
https://github.com/sofa-framework/sofa/pull/599:620,Testability,test,test,620,"It was not possible to compile runSofa without activating SofaGuiQt, because GuiDataRepository was instantiated in SofaGuiQt library.; As GuiDataRepository seems to be rather generic and not tied to Qt, GuiDataRepository has been moved to SofaGuiCommon ; and allows runSofa to be compiled without enabling SOFA_GUI_QT. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599
https://github.com/sofa-framework/sofa/pull/599:77,Usability,GuiD,GuiDataRepository,77,"It was not possible to compile runSofa without activating SofaGuiQt, because GuiDataRepository was instantiated in SofaGuiQt library.; As GuiDataRepository seems to be rather generic and not tied to Qt, GuiDataRepository has been moved to SofaGuiCommon ; and allows runSofa to be compiled without enabling SOFA_GUI_QT. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599
https://github.com/sofa-framework/sofa/pull/599:138,Usability,GuiD,GuiDataRepository,138,"It was not possible to compile runSofa without activating SofaGuiQt, because GuiDataRepository was instantiated in SofaGuiQt library.; As GuiDataRepository seems to be rather generic and not tied to Qt, GuiDataRepository has been moved to SofaGuiCommon ; and allows runSofa to be compiled without enabling SOFA_GUI_QT. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599
https://github.com/sofa-framework/sofa/pull/599:203,Usability,GuiD,GuiDataRepository,203,"It was not possible to compile runSofa without activating SofaGuiQt, because GuiDataRepository was instantiated in SofaGuiQt library.; As GuiDataRepository seems to be rather generic and not tied to Qt, GuiDataRepository has been moved to SofaGuiCommon ; and allows runSofa to be compiled without enabling SOFA_GUI_QT. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599
https://github.com/sofa-framework/sofa/issues/600:322,Integrability,interface,interface,322,"Hi guys,. I coded a component a few months ago that was designed to grab the OpenGL window of Sofa. It was pretty simple, a glReadPixels on the GL_VIEWPORT, and it was working fine.; Today though, I ran a scene that was using this component, and noticed that it isn't only grabbing the sofa scene, but also the whole user interface. I know the old GUI is destined to dissapear slowly, but the issue will be the same in sofaqtquick. It would be really interesting to be able to grab a specific opengl context from a widget for instance, or directly from the sofa scene. I don't think the way I'm doing so is a great idea, and to be honest I don't know what would be a clean way of doing so, especially give how slow a glReadPixels() is... It might be a very similar topic as the Headless recorder from @ErwanDouaille ? Except that I don't want to lose the GUI just to capture images. Any ideas?; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/600
https://github.com/sofa-framework/sofa/issues/600:114,Usability,simpl,simple,114,"Hi guys,. I coded a component a few months ago that was designed to grab the OpenGL window of Sofa. It was pretty simple, a glReadPixels on the GL_VIEWPORT, and it was working fine.; Today though, I ran a scene that was using this component, and noticed that it isn't only grabbing the sofa scene, but also the whole user interface. I know the old GUI is destined to dissapear slowly, but the issue will be the same in sofaqtquick. It would be really interesting to be able to grab a specific opengl context from a widget for instance, or directly from the sofa scene. I don't think the way I'm doing so is a great idea, and to be honest I don't know what would be a clean way of doing so, especially give how slow a glReadPixels() is... It might be a very similar topic as the Headless recorder from @ErwanDouaille ? Except that I don't want to lose the GUI just to capture images. Any ideas?; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/600
https://github.com/sofa-framework/sofa/pull/601:256,Availability,failure,failures,256,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/601
https://github.com/sofa-framework/sofa/pull/601:306,Availability,failure,failures,306,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/601
https://github.com/sofa-framework/sofa/pull/601:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/601
https://github.com/sofa-framework/sofa/pull/601:251,Testability,test,test,251,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/601
https://github.com/sofa-framework/sofa/pull/601:301,Testability,test,test,301,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/601
https://github.com/sofa-framework/sofa/issues/602:188,Modifiability,plugin,plugin,188,"Hello,. I would like to discuss a design to represent mesh loaded from a file that contains several child meshes. For example FBX or COLLADA can now be loaded in Sofa using the SofaAssimp plugin but for the moment all child meshes are merged in one big mesh.; We loose the information of Bones etc.. . The API from sofa::core::loader::MeshLoader doesn't support several mesh for the moment. . ```; // Point coordinates in 3D in double.; Data< helper::vector<sofa::defaulttype::Vec<3,SReal> > > d_positions; ///< Vertices of the mesh loaded. //Tab of 1D elements; Data< helper::vector< Polyline > > d_polylines; ///< Polylines of the mesh loaded. // Tab of 2D elements composition; Data< helper::vector< Edge > > d_edges; ///< Edges of the mesh loaded; Data< helper::vector< Triangle > > d_triangles; ///< Triangles of the mesh loaded; Data< helper::vector< Quad > > d_quads; ///< Quads of the mesh loaded. ```; Any suggestion?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/602
https://github.com/sofa-framework/sofa/issues/602:59,Performance,load,loaded,59,"Hello,. I would like to discuss a design to represent mesh loaded from a file that contains several child meshes. For example FBX or COLLADA can now be loaded in Sofa using the SofaAssimp plugin but for the moment all child meshes are merged in one big mesh.; We loose the information of Bones etc.. . The API from sofa::core::loader::MeshLoader doesn't support several mesh for the moment. . ```; // Point coordinates in 3D in double.; Data< helper::vector<sofa::defaulttype::Vec<3,SReal> > > d_positions; ///< Vertices of the mesh loaded. //Tab of 1D elements; Data< helper::vector< Polyline > > d_polylines; ///< Polylines of the mesh loaded. // Tab of 2D elements composition; Data< helper::vector< Edge > > d_edges; ///< Edges of the mesh loaded; Data< helper::vector< Triangle > > d_triangles; ///< Triangles of the mesh loaded; Data< helper::vector< Quad > > d_quads; ///< Quads of the mesh loaded. ```; Any suggestion?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/602
https://github.com/sofa-framework/sofa/issues/602:152,Performance,load,loaded,152,"Hello,. I would like to discuss a design to represent mesh loaded from a file that contains several child meshes. For example FBX or COLLADA can now be loaded in Sofa using the SofaAssimp plugin but for the moment all child meshes are merged in one big mesh.; We loose the information of Bones etc.. . The API from sofa::core::loader::MeshLoader doesn't support several mesh for the moment. . ```; // Point coordinates in 3D in double.; Data< helper::vector<sofa::defaulttype::Vec<3,SReal> > > d_positions; ///< Vertices of the mesh loaded. //Tab of 1D elements; Data< helper::vector< Polyline > > d_polylines; ///< Polylines of the mesh loaded. // Tab of 2D elements composition; Data< helper::vector< Edge > > d_edges; ///< Edges of the mesh loaded; Data< helper::vector< Triangle > > d_triangles; ///< Triangles of the mesh loaded; Data< helper::vector< Quad > > d_quads; ///< Quads of the mesh loaded. ```; Any suggestion?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/602
https://github.com/sofa-framework/sofa/issues/602:327,Performance,load,loader,327,"Hello,. I would like to discuss a design to represent mesh loaded from a file that contains several child meshes. For example FBX or COLLADA can now be loaded in Sofa using the SofaAssimp plugin but for the moment all child meshes are merged in one big mesh.; We loose the information of Bones etc.. . The API from sofa::core::loader::MeshLoader doesn't support several mesh for the moment. . ```; // Point coordinates in 3D in double.; Data< helper::vector<sofa::defaulttype::Vec<3,SReal> > > d_positions; ///< Vertices of the mesh loaded. //Tab of 1D elements; Data< helper::vector< Polyline > > d_polylines; ///< Polylines of the mesh loaded. // Tab of 2D elements composition; Data< helper::vector< Edge > > d_edges; ///< Edges of the mesh loaded; Data< helper::vector< Triangle > > d_triangles; ///< Triangles of the mesh loaded; Data< helper::vector< Quad > > d_quads; ///< Quads of the mesh loaded. ```; Any suggestion?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/602
https://github.com/sofa-framework/sofa/issues/602:533,Performance,load,loaded,533,"Hello,. I would like to discuss a design to represent mesh loaded from a file that contains several child meshes. For example FBX or COLLADA can now be loaded in Sofa using the SofaAssimp plugin but for the moment all child meshes are merged in one big mesh.; We loose the information of Bones etc.. . The API from sofa::core::loader::MeshLoader doesn't support several mesh for the moment. . ```; // Point coordinates in 3D in double.; Data< helper::vector<sofa::defaulttype::Vec<3,SReal> > > d_positions; ///< Vertices of the mesh loaded. //Tab of 1D elements; Data< helper::vector< Polyline > > d_polylines; ///< Polylines of the mesh loaded. // Tab of 2D elements composition; Data< helper::vector< Edge > > d_edges; ///< Edges of the mesh loaded; Data< helper::vector< Triangle > > d_triangles; ///< Triangles of the mesh loaded; Data< helper::vector< Quad > > d_quads; ///< Quads of the mesh loaded. ```; Any suggestion?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/602
https://github.com/sofa-framework/sofa/issues/602:638,Performance,load,loaded,638,"Hello,. I would like to discuss a design to represent mesh loaded from a file that contains several child meshes. For example FBX or COLLADA can now be loaded in Sofa using the SofaAssimp plugin but for the moment all child meshes are merged in one big mesh.; We loose the information of Bones etc.. . The API from sofa::core::loader::MeshLoader doesn't support several mesh for the moment. . ```; // Point coordinates in 3D in double.; Data< helper::vector<sofa::defaulttype::Vec<3,SReal> > > d_positions; ///< Vertices of the mesh loaded. //Tab of 1D elements; Data< helper::vector< Polyline > > d_polylines; ///< Polylines of the mesh loaded. // Tab of 2D elements composition; Data< helper::vector< Edge > > d_edges; ///< Edges of the mesh loaded; Data< helper::vector< Triangle > > d_triangles; ///< Triangles of the mesh loaded; Data< helper::vector< Quad > > d_quads; ///< Quads of the mesh loaded. ```; Any suggestion?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/602
https://github.com/sofa-framework/sofa/issues/602:744,Performance,load,loaded,744,"Hello,. I would like to discuss a design to represent mesh loaded from a file that contains several child meshes. For example FBX or COLLADA can now be loaded in Sofa using the SofaAssimp plugin but for the moment all child meshes are merged in one big mesh.; We loose the information of Bones etc.. . The API from sofa::core::loader::MeshLoader doesn't support several mesh for the moment. . ```; // Point coordinates in 3D in double.; Data< helper::vector<sofa::defaulttype::Vec<3,SReal> > > d_positions; ///< Vertices of the mesh loaded. //Tab of 1D elements; Data< helper::vector< Polyline > > d_polylines; ///< Polylines of the mesh loaded. // Tab of 2D elements composition; Data< helper::vector< Edge > > d_edges; ///< Edges of the mesh loaded; Data< helper::vector< Triangle > > d_triangles; ///< Triangles of the mesh loaded; Data< helper::vector< Quad > > d_quads; ///< Quads of the mesh loaded. ```; Any suggestion?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/602
https://github.com/sofa-framework/sofa/issues/602:827,Performance,load,loaded,827,"Hello,. I would like to discuss a design to represent mesh loaded from a file that contains several child meshes. For example FBX or COLLADA can now be loaded in Sofa using the SofaAssimp plugin but for the moment all child meshes are merged in one big mesh.; We loose the information of Bones etc.. . The API from sofa::core::loader::MeshLoader doesn't support several mesh for the moment. . ```; // Point coordinates in 3D in double.; Data< helper::vector<sofa::defaulttype::Vec<3,SReal> > > d_positions; ///< Vertices of the mesh loaded. //Tab of 1D elements; Data< helper::vector< Polyline > > d_polylines; ///< Polylines of the mesh loaded. // Tab of 2D elements composition; Data< helper::vector< Edge > > d_edges; ///< Edges of the mesh loaded; Data< helper::vector< Triangle > > d_triangles; ///< Triangles of the mesh loaded; Data< helper::vector< Quad > > d_quads; ///< Quads of the mesh loaded. ```; Any suggestion?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/602
https://github.com/sofa-framework/sofa/issues/602:898,Performance,load,loaded,898,"Hello,. I would like to discuss a design to represent mesh loaded from a file that contains several child meshes. For example FBX or COLLADA can now be loaded in Sofa using the SofaAssimp plugin but for the moment all child meshes are merged in one big mesh.; We loose the information of Bones etc.. . The API from sofa::core::loader::MeshLoader doesn't support several mesh for the moment. . ```; // Point coordinates in 3D in double.; Data< helper::vector<sofa::defaulttype::Vec<3,SReal> > > d_positions; ///< Vertices of the mesh loaded. //Tab of 1D elements; Data< helper::vector< Polyline > > d_polylines; ///< Polylines of the mesh loaded. // Tab of 2D elements composition; Data< helper::vector< Edge > > d_edges; ///< Edges of the mesh loaded; Data< helper::vector< Triangle > > d_triangles; ///< Triangles of the mesh loaded; Data< helper::vector< Quad > > d_quads; ///< Quads of the mesh loaded. ```; Any suggestion?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/602
https://github.com/sofa-framework/sofa/pull/603:647,Availability,failure,failures,647,PR: first version of the integration of assimp Importer to Sofa loader structure. - Only support single mesh creation for the moment: see discussion: https://github.com/sofa-framework/sofa/issues/602; - Change all loader logs to use msg_error/warning/info; - Change in SofaKernel :; - loader that failed at init is now set to componentState Invalide.; - Add extension field in Datafilename. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603
https://github.com/sofa-framework/sofa/pull/603:697,Availability,failure,failures,697,PR: first version of the integration of assimp Importer to Sofa loader structure. - Only support single mesh creation for the moment: see discussion: https://github.com/sofa-framework/sofa/issues/602; - Change all loader logs to use msg_error/warning/info; - Change in SofaKernel :; - loader that failed at init is now set to componentState Invalide.; - Add extension field in Datafilename. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603
https://github.com/sofa-framework/sofa/pull/603:25,Deployability,integrat,integration,25,PR: first version of the integration of assimp Importer to Sofa loader structure. - Only support single mesh creation for the moment: see discussion: https://github.com/sofa-framework/sofa/issues/602; - Change all loader logs to use msg_error/warning/info; - Change in SofaKernel :; - loader that failed at init is now set to componentState Invalide.; - Add extension field in Datafilename. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603
https://github.com/sofa-framework/sofa/pull/603:25,Integrability,integrat,integration,25,PR: first version of the integration of assimp Importer to Sofa loader structure. - Only support single mesh creation for the moment: see discussion: https://github.com/sofa-framework/sofa/issues/602; - Change all loader logs to use msg_error/warning/info; - Change in SofaKernel :; - loader that failed at init is now set to componentState Invalide.; - Add extension field in Datafilename. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603
https://github.com/sofa-framework/sofa/pull/603:490,Integrability,message,message,490,PR: first version of the integration of assimp Importer to Sofa loader structure. - Only support single mesh creation for the moment: see discussion: https://github.com/sofa-framework/sofa/issues/602; - Change all loader logs to use msg_error/warning/info; - Change in SofaKernel :; - loader that failed at init is now set to componentState Invalide.; - Add extension field in Datafilename. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603
https://github.com/sofa-framework/sofa/pull/603:64,Performance,load,loader,64,PR: first version of the integration of assimp Importer to Sofa loader structure. - Only support single mesh creation for the moment: see discussion: https://github.com/sofa-framework/sofa/issues/602; - Change all loader logs to use msg_error/warning/info; - Change in SofaKernel :; - loader that failed at init is now set to componentState Invalide.; - Add extension field in Datafilename. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603
https://github.com/sofa-framework/sofa/pull/603:214,Performance,load,loader,214,PR: first version of the integration of assimp Importer to Sofa loader structure. - Only support single mesh creation for the moment: see discussion: https://github.com/sofa-framework/sofa/issues/602; - Change all loader logs to use msg_error/warning/info; - Change in SofaKernel :; - loader that failed at init is now set to componentState Invalide.; - Add extension field in Datafilename. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603
https://github.com/sofa-framework/sofa/pull/603:285,Performance,load,loader,285,PR: first version of the integration of assimp Importer to Sofa loader structure. - Only support single mesh creation for the moment: see discussion: https://github.com/sofa-framework/sofa/issues/602; - Change all loader logs to use msg_error/warning/info; - Change in SofaKernel :; - loader that failed at init is now set to componentState Invalide.; - Add extension field in Datafilename. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603
https://github.com/sofa-framework/sofa/pull/603:221,Testability,log,logs,221,PR: first version of the integration of assimp Importer to Sofa loader structure. - Only support single mesh creation for the moment: see discussion: https://github.com/sofa-framework/sofa/issues/602; - Change all loader logs to use msg_error/warning/info; - Change in SofaKernel :; - loader that failed at init is now set to componentState Invalide.; - Add extension field in Datafilename. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603
https://github.com/sofa-framework/sofa/pull/603:642,Testability,test,test,642,PR: first version of the integration of assimp Importer to Sofa loader structure. - Only support single mesh creation for the moment: see discussion: https://github.com/sofa-framework/sofa/issues/602; - Change all loader logs to use msg_error/warning/info; - Change in SofaKernel :; - loader that failed at init is now set to componentState Invalide.; - Add extension field in Datafilename. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603
https://github.com/sofa-framework/sofa/pull/603:692,Testability,test,test,692,PR: first version of the integration of assimp Importer to Sofa loader structure. - Only support single mesh creation for the moment: see discussion: https://github.com/sofa-framework/sofa/issues/602; - Change all loader logs to use msg_error/warning/info; - Change in SofaKernel :; - loader that failed at init is now set to componentState Invalide.; - Add extension field in Datafilename. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603
https://github.com/sofa-framework/sofa/pull/604:804,Availability,failure,failures,804,This shouldn't break anything and is a first step toward the slighgly more ambitious pr #601 . CHANGELOG:; - update gtest from their master (version 1.9: sha1 447d58b4ee8ea96b4757a5bb5f0b3be75af6c2a1); - update the CMakeLists so that they correctly export the needed -D to be used as a shared library; - Fix the problem of missing GTEST_API_ operator<< gtest by implementing the function in TestMessageHandler_test instead of gtest. NB: A better FIX for the GTEST_API_ operator<< could be to make submit PR to gtest but I have no more time left. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604
https://github.com/sofa-framework/sofa/pull/604:854,Availability,failure,failures,854,This shouldn't break anything and is a first step toward the slighgly more ambitious pr #601 . CHANGELOG:; - update gtest from their master (version 1.9: sha1 447d58b4ee8ea96b4757a5bb5f0b3be75af6c2a1); - update the CMakeLists so that they correctly export the needed -D to be used as a shared library; - Fix the problem of missing GTEST_API_ operator<< gtest by implementing the function in TestMessageHandler_test instead of gtest. NB: A better FIX for the GTEST_API_ operator<< could be to make submit PR to gtest but I have no more time left. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604
https://github.com/sofa-framework/sofa/pull/604:109,Deployability,update,update,109,This shouldn't break anything and is a first step toward the slighgly more ambitious pr #601 . CHANGELOG:; - update gtest from their master (version 1.9: sha1 447d58b4ee8ea96b4757a5bb5f0b3be75af6c2a1); - update the CMakeLists so that they correctly export the needed -D to be used as a shared library; - Fix the problem of missing GTEST_API_ operator<< gtest by implementing the function in TestMessageHandler_test instead of gtest. NB: A better FIX for the GTEST_API_ operator<< could be to make submit PR to gtest but I have no more time left. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604
https://github.com/sofa-framework/sofa/pull/604:204,Deployability,update,update,204,This shouldn't break anything and is a first step toward the slighgly more ambitious pr #601 . CHANGELOG:; - update gtest from their master (version 1.9: sha1 447d58b4ee8ea96b4757a5bb5f0b3be75af6c2a1); - update the CMakeLists so that they correctly export the needed -D to be used as a shared library; - Fix the problem of missing GTEST_API_ operator<< gtest by implementing the function in TestMessageHandler_test instead of gtest. NB: A better FIX for the GTEST_API_ operator<< could be to make submit PR to gtest but I have no more time left. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604
https://github.com/sofa-framework/sofa/pull/604:647,Integrability,message,message,647,This shouldn't break anything and is a first step toward the slighgly more ambitious pr #601 . CHANGELOG:; - update gtest from their master (version 1.9: sha1 447d58b4ee8ea96b4757a5bb5f0b3be75af6c2a1); - update the CMakeLists so that they correctly export the needed -D to be used as a shared library; - Fix the problem of missing GTEST_API_ operator<< gtest by implementing the function in TestMessageHandler_test instead of gtest. NB: A better FIX for the GTEST_API_ operator<< could be to make submit PR to gtest but I have no more time left. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604
https://github.com/sofa-framework/sofa/pull/604:799,Testability,test,test,799,This shouldn't break anything and is a first step toward the slighgly more ambitious pr #601 . CHANGELOG:; - update gtest from their master (version 1.9: sha1 447d58b4ee8ea96b4757a5bb5f0b3be75af6c2a1); - update the CMakeLists so that they correctly export the needed -D to be used as a shared library; - Fix the problem of missing GTEST_API_ operator<< gtest by implementing the function in TestMessageHandler_test instead of gtest. NB: A better FIX for the GTEST_API_ operator<< could be to make submit PR to gtest but I have no more time left. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604
https://github.com/sofa-framework/sofa/pull/604:849,Testability,test,test,849,This shouldn't break anything and is a first step toward the slighgly more ambitious pr #601 . CHANGELOG:; - update gtest from their master (version 1.9: sha1 447d58b4ee8ea96b4757a5bb5f0b3be75af6c2a1); - update the CMakeLists so that they correctly export the needed -D to be used as a shared library; - Fix the problem of missing GTEST_API_ operator<< gtest by implementing the function in TestMessageHandler_test instead of gtest. NB: A better FIX for the GTEST_API_ operator<< could be to make submit PR to gtest but I have no more time left. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604
https://github.com/sofa-framework/sofa/pull/605:1155,Availability,failure,failures,1155,"I found the dependency between SofaFramework & gtest annoying so I moved the classes that rely on gtest from the framework to put them in two external packages:; - SofaFramework/SofaHelperTesting; - SofaSimulation/SofaSimulationHelperTesting . These two packages have dependencies on both gtest and SofaFramework or gtest and SofaSimulation. These packages should now be imported in subsequent tests. . I also moved framework_test and simulation_test which have non consistant naming and location to what, I hope, is more consistant.; So ; - SofaKernel/framework/sofa/framework_test is now SofaKernel/SofaFramework/tests/SofaFramework_test ; - SofaKernel/modules/sofa/simulation/frameworkextra_test is now SofaKernel/SofaFramework/tests/SofaFrameworkExtra_test ; - SofaKernel/modules/sofa/simulation/simulation_test is now SofaKernel/SofaSimulaton/tests/SofaSimulation_test . This PR rely on #604 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605
https://github.com/sofa-framework/sofa/pull/605:1205,Availability,failure,failures,1205,"I found the dependency between SofaFramework & gtest annoying so I moved the classes that rely on gtest from the framework to put them in two external packages:; - SofaFramework/SofaHelperTesting; - SofaSimulation/SofaSimulationHelperTesting . These two packages have dependencies on both gtest and SofaFramework or gtest and SofaSimulation. These packages should now be imported in subsequent tests. . I also moved framework_test and simulation_test which have non consistant naming and location to what, I hope, is more consistant.; So ; - SofaKernel/framework/sofa/framework_test is now SofaKernel/SofaFramework/tests/SofaFramework_test ; - SofaKernel/modules/sofa/simulation/frameworkextra_test is now SofaKernel/SofaFramework/tests/SofaFrameworkExtra_test ; - SofaKernel/modules/sofa/simulation/simulation_test is now SofaKernel/SofaSimulaton/tests/SofaSimulation_test . This PR rely on #604 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605
https://github.com/sofa-framework/sofa/pull/605:12,Integrability,depend,dependency,12,"I found the dependency between SofaFramework & gtest annoying so I moved the classes that rely on gtest from the framework to put them in two external packages:; - SofaFramework/SofaHelperTesting; - SofaSimulation/SofaSimulationHelperTesting . These two packages have dependencies on both gtest and SofaFramework or gtest and SofaSimulation. These packages should now be imported in subsequent tests. . I also moved framework_test and simulation_test which have non consistant naming and location to what, I hope, is more consistant.; So ; - SofaKernel/framework/sofa/framework_test is now SofaKernel/SofaFramework/tests/SofaFramework_test ; - SofaKernel/modules/sofa/simulation/frameworkextra_test is now SofaKernel/SofaFramework/tests/SofaFrameworkExtra_test ; - SofaKernel/modules/sofa/simulation/simulation_test is now SofaKernel/SofaSimulaton/tests/SofaSimulation_test . This PR rely on #604 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605
https://github.com/sofa-framework/sofa/pull/605:268,Integrability,depend,dependencies,268,"I found the dependency between SofaFramework & gtest annoying so I moved the classes that rely on gtest from the framework to put them in two external packages:; - SofaFramework/SofaHelperTesting; - SofaSimulation/SofaSimulationHelperTesting . These two packages have dependencies on both gtest and SofaFramework or gtest and SofaSimulation. These packages should now be imported in subsequent tests. . I also moved framework_test and simulation_test which have non consistant naming and location to what, I hope, is more consistant.; So ; - SofaKernel/framework/sofa/framework_test is now SofaKernel/SofaFramework/tests/SofaFramework_test ; - SofaKernel/modules/sofa/simulation/frameworkextra_test is now SofaKernel/SofaFramework/tests/SofaFrameworkExtra_test ; - SofaKernel/modules/sofa/simulation/simulation_test is now SofaKernel/SofaSimulaton/tests/SofaSimulation_test . This PR rely on #604 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605
https://github.com/sofa-framework/sofa/pull/605:998,Integrability,message,message,998,"I found the dependency between SofaFramework & gtest annoying so I moved the classes that rely on gtest from the framework to put them in two external packages:; - SofaFramework/SofaHelperTesting; - SofaSimulation/SofaSimulationHelperTesting . These two packages have dependencies on both gtest and SofaFramework or gtest and SofaSimulation. These packages should now be imported in subsequent tests. . I also moved framework_test and simulation_test which have non consistant naming and location to what, I hope, is more consistant.; So ; - SofaKernel/framework/sofa/framework_test is now SofaKernel/SofaFramework/tests/SofaFramework_test ; - SofaKernel/modules/sofa/simulation/frameworkextra_test is now SofaKernel/SofaFramework/tests/SofaFrameworkExtra_test ; - SofaKernel/modules/sofa/simulation/simulation_test is now SofaKernel/SofaSimulaton/tests/SofaSimulation_test . This PR rely on #604 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605
https://github.com/sofa-framework/sofa/pull/605:394,Testability,test,tests,394,"I found the dependency between SofaFramework & gtest annoying so I moved the classes that rely on gtest from the framework to put them in two external packages:; - SofaFramework/SofaHelperTesting; - SofaSimulation/SofaSimulationHelperTesting . These two packages have dependencies on both gtest and SofaFramework or gtest and SofaSimulation. These packages should now be imported in subsequent tests. . I also moved framework_test and simulation_test which have non consistant naming and location to what, I hope, is more consistant.; So ; - SofaKernel/framework/sofa/framework_test is now SofaKernel/SofaFramework/tests/SofaFramework_test ; - SofaKernel/modules/sofa/simulation/frameworkextra_test is now SofaKernel/SofaFramework/tests/SofaFrameworkExtra_test ; - SofaKernel/modules/sofa/simulation/simulation_test is now SofaKernel/SofaSimulaton/tests/SofaSimulation_test . This PR rely on #604 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605
https://github.com/sofa-framework/sofa/pull/605:615,Testability,test,tests,615,"I found the dependency between SofaFramework & gtest annoying so I moved the classes that rely on gtest from the framework to put them in two external packages:; - SofaFramework/SofaHelperTesting; - SofaSimulation/SofaSimulationHelperTesting . These two packages have dependencies on both gtest and SofaFramework or gtest and SofaSimulation. These packages should now be imported in subsequent tests. . I also moved framework_test and simulation_test which have non consistant naming and location to what, I hope, is more consistant.; So ; - SofaKernel/framework/sofa/framework_test is now SofaKernel/SofaFramework/tests/SofaFramework_test ; - SofaKernel/modules/sofa/simulation/frameworkextra_test is now SofaKernel/SofaFramework/tests/SofaFrameworkExtra_test ; - SofaKernel/modules/sofa/simulation/simulation_test is now SofaKernel/SofaSimulaton/tests/SofaSimulation_test . This PR rely on #604 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605
https://github.com/sofa-framework/sofa/pull/605:731,Testability,test,tests,731,"I found the dependency between SofaFramework & gtest annoying so I moved the classes that rely on gtest from the framework to put them in two external packages:; - SofaFramework/SofaHelperTesting; - SofaSimulation/SofaSimulationHelperTesting . These two packages have dependencies on both gtest and SofaFramework or gtest and SofaSimulation. These packages should now be imported in subsequent tests. . I also moved framework_test and simulation_test which have non consistant naming and location to what, I hope, is more consistant.; So ; - SofaKernel/framework/sofa/framework_test is now SofaKernel/SofaFramework/tests/SofaFramework_test ; - SofaKernel/modules/sofa/simulation/frameworkextra_test is now SofaKernel/SofaFramework/tests/SofaFrameworkExtra_test ; - SofaKernel/modules/sofa/simulation/simulation_test is now SofaKernel/SofaSimulaton/tests/SofaSimulation_test . This PR rely on #604 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605
https://github.com/sofa-framework/sofa/pull/605:848,Testability,test,tests,848,"I found the dependency between SofaFramework & gtest annoying so I moved the classes that rely on gtest from the framework to put them in two external packages:; - SofaFramework/SofaHelperTesting; - SofaSimulation/SofaSimulationHelperTesting . These two packages have dependencies on both gtest and SofaFramework or gtest and SofaSimulation. These packages should now be imported in subsequent tests. . I also moved framework_test and simulation_test which have non consistant naming and location to what, I hope, is more consistant.; So ; - SofaKernel/framework/sofa/framework_test is now SofaKernel/SofaFramework/tests/SofaFramework_test ; - SofaKernel/modules/sofa/simulation/frameworkextra_test is now SofaKernel/SofaFramework/tests/SofaFrameworkExtra_test ; - SofaKernel/modules/sofa/simulation/simulation_test is now SofaKernel/SofaSimulaton/tests/SofaSimulation_test . This PR rely on #604 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605
https://github.com/sofa-framework/sofa/pull/605:1150,Testability,test,test,1150,"I found the dependency between SofaFramework & gtest annoying so I moved the classes that rely on gtest from the framework to put them in two external packages:; - SofaFramework/SofaHelperTesting; - SofaSimulation/SofaSimulationHelperTesting . These two packages have dependencies on both gtest and SofaFramework or gtest and SofaSimulation. These packages should now be imported in subsequent tests. . I also moved framework_test and simulation_test which have non consistant naming and location to what, I hope, is more consistant.; So ; - SofaKernel/framework/sofa/framework_test is now SofaKernel/SofaFramework/tests/SofaFramework_test ; - SofaKernel/modules/sofa/simulation/frameworkextra_test is now SofaKernel/SofaFramework/tests/SofaFrameworkExtra_test ; - SofaKernel/modules/sofa/simulation/simulation_test is now SofaKernel/SofaSimulaton/tests/SofaSimulation_test . This PR rely on #604 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605
https://github.com/sofa-framework/sofa/pull/605:1200,Testability,test,test,1200,"I found the dependency between SofaFramework & gtest annoying so I moved the classes that rely on gtest from the framework to put them in two external packages:; - SofaFramework/SofaHelperTesting; - SofaSimulation/SofaSimulationHelperTesting . These two packages have dependencies on both gtest and SofaFramework or gtest and SofaSimulation. These packages should now be imported in subsequent tests. . I also moved framework_test and simulation_test which have non consistant naming and location to what, I hope, is more consistant.; So ; - SofaKernel/framework/sofa/framework_test is now SofaKernel/SofaFramework/tests/SofaFramework_test ; - SofaKernel/modules/sofa/simulation/frameworkextra_test is now SofaKernel/SofaFramework/tests/SofaFrameworkExtra_test ; - SofaKernel/modules/sofa/simulation/simulation_test is now SofaKernel/SofaSimulaton/tests/SofaSimulation_test . This PR rely on #604 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605
https://github.com/sofa-framework/sofa/pull/607:32,Availability,error,errors,32,Multiple users complained about errors that actually are not errors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/607
https://github.com/sofa-framework/sofa/pull/607:61,Availability,error,errors,61,Multiple users complained about errors that actually are not errors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/607
https://github.com/sofa-framework/sofa/pull/607:325,Availability,failure,failures,325,Multiple users complained about errors that actually are not errors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/607
https://github.com/sofa-framework/sofa/pull/607:375,Availability,failure,failures,375,Multiple users complained about errors that actually are not errors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/607
https://github.com/sofa-framework/sofa/pull/607:168,Integrability,message,message,168,Multiple users complained about errors that actually are not errors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/607
https://github.com/sofa-framework/sofa/pull/607:320,Testability,test,test,320,Multiple users complained about errors that actually are not errors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/607
https://github.com/sofa-framework/sofa/pull/607:370,Testability,test,test,370,Multiple users complained about errors that actually are not errors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/607
https://github.com/sofa-framework/sofa/pull/608:63,Availability,error,errors,63,Every plugin/module in SOFA should handle its dependencies and errors itself. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/608
https://github.com/sofa-framework/sofa/pull/608:334,Availability,failure,failures,334,Every plugin/module in SOFA should handle its dependencies and errors itself. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/608
https://github.com/sofa-framework/sofa/pull/608:384,Availability,failure,failures,384,Every plugin/module in SOFA should handle its dependencies and errors itself. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/608
https://github.com/sofa-framework/sofa/pull/608:46,Integrability,depend,dependencies,46,Every plugin/module in SOFA should handle its dependencies and errors itself. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/608
https://github.com/sofa-framework/sofa/pull/608:177,Integrability,message,message,177,Every plugin/module in SOFA should handle its dependencies and errors itself. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/608
https://github.com/sofa-framework/sofa/pull/608:6,Modifiability,plugin,plugin,6,Every plugin/module in SOFA should handle its dependencies and errors itself. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/608
https://github.com/sofa-framework/sofa/pull/608:329,Testability,test,test,329,Every plugin/module in SOFA should handle its dependencies and errors itself. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/608
https://github.com/sofa-framework/sofa/pull/608:379,Testability,test,test,379,Every plugin/module in SOFA should handle its dependencies and errors itself. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/608
https://github.com/sofa-framework/sofa/pull/609:455,Availability,failure,failures,455,"Hello,. Since we talked about it during the SofaDev meeting,; Here's our QuickNDirty answer to the make install fail for CImgPlugin.; Of course as-is it is not acceptable or mergeable but it's here. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609
https://github.com/sofa-framework/sofa/pull/609:505,Availability,failure,failures,505,"Hello,. Since we talked about it during the SofaDev meeting,; Here's our QuickNDirty answer to the make install fail for CImgPlugin.; Of course as-is it is not acceptable or mergeable but it's here. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609
https://github.com/sofa-framework/sofa/pull/609:104,Deployability,install,install,104,"Hello,. Since we talked about it during the SofaDev meeting,; Here's our QuickNDirty answer to the make install fail for CImgPlugin.; Of course as-is it is not acceptable or mergeable but it's here. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609
https://github.com/sofa-framework/sofa/pull/609:298,Integrability,message,message,298,"Hello,. Since we talked about it during the SofaDev meeting,; Here's our QuickNDirty answer to the make install fail for CImgPlugin.; Of course as-is it is not acceptable or mergeable but it's here. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609
https://github.com/sofa-framework/sofa/pull/609:450,Testability,test,test,450,"Hello,. Since we talked about it during the SofaDev meeting,; Here's our QuickNDirty answer to the make install fail for CImgPlugin.; Of course as-is it is not acceptable or mergeable but it's here. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609
https://github.com/sofa-framework/sofa/pull/609:500,Testability,test,test,500,"Hello,. Since we talked about it during the SofaDev meeting,; Here's our QuickNDirty answer to the make install fail for CImgPlugin.; Of course as-is it is not acceptable or mergeable but it's here. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609
https://github.com/sofa-framework/sofa/pull/610:429,Availability,failure,failures,429,"This solves the issue : [runsofa] -a -n conflict for batch #552; In case to run infinite iterations, the command to be run in command line is: ; bin/runSofa -g batch -n -1. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610
https://github.com/sofa-framework/sofa/pull/610:479,Availability,failure,failures,479,"This solves the issue : [runsofa] -a -n conflict for batch #552; In case to run infinite iterations, the command to be run in command line is: ; bin/runSofa -g batch -n -1. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610
https://github.com/sofa-framework/sofa/pull/610:272,Integrability,message,message,272,"This solves the issue : [runsofa] -a -n conflict for batch #552; In case to run infinite iterations, the command to be run in command line is: ; bin/runSofa -g batch -n -1. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610
https://github.com/sofa-framework/sofa/pull/610:424,Testability,test,test,424,"This solves the issue : [runsofa] -a -n conflict for batch #552; In case to run infinite iterations, the command to be run in command line is: ; bin/runSofa -g batch -n -1. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610
https://github.com/sofa-framework/sofa/pull/610:474,Testability,test,test,474,"This solves the issue : [runsofa] -a -n conflict for batch #552; In case to run infinite iterations, the command to be run in command line is: ; bin/runSofa -g batch -n -1. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610
https://github.com/sofa-framework/sofa/pull/611:563,Availability,failure,failures,563,"Now we have a tool to list the deprecated components, we can build with `SOFA_WITH_DEPRECATED_COMPONENTS=OFF` + `APPLICATION_GETDEPRECATEDCOMPONENTS=ON` and ignore scenes using deprecated components during scene tests. I also added a function to ignore scenes using non-existent (because disabled) plugins. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/611
https://github.com/sofa-framework/sofa/pull/611:613,Availability,failure,failures,613,"Now we have a tool to list the deprecated components, we can build with `SOFA_WITH_DEPRECATED_COMPONENTS=OFF` + `APPLICATION_GETDEPRECATEDCOMPONENTS=ON` and ignore scenes using deprecated components during scene tests. I also added a function to ignore scenes using non-existent (because disabled) plugins. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/611
https://github.com/sofa-framework/sofa/pull/611:406,Integrability,message,message,406,"Now we have a tool to list the deprecated components, we can build with `SOFA_WITH_DEPRECATED_COMPONENTS=OFF` + `APPLICATION_GETDEPRECATEDCOMPONENTS=ON` and ignore scenes using deprecated components during scene tests. I also added a function to ignore scenes using non-existent (because disabled) plugins. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/611
https://github.com/sofa-framework/sofa/pull/611:298,Modifiability,plugin,plugins,298,"Now we have a tool to list the deprecated components, we can build with `SOFA_WITH_DEPRECATED_COMPONENTS=OFF` + `APPLICATION_GETDEPRECATEDCOMPONENTS=ON` and ignore scenes using deprecated components during scene tests. I also added a function to ignore scenes using non-existent (because disabled) plugins. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/611
https://github.com/sofa-framework/sofa/pull/611:212,Testability,test,tests,212,"Now we have a tool to list the deprecated components, we can build with `SOFA_WITH_DEPRECATED_COMPONENTS=OFF` + `APPLICATION_GETDEPRECATEDCOMPONENTS=ON` and ignore scenes using deprecated components during scene tests. I also added a function to ignore scenes using non-existent (because disabled) plugins. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/611
https://github.com/sofa-framework/sofa/pull/611:558,Testability,test,test,558,"Now we have a tool to list the deprecated components, we can build with `SOFA_WITH_DEPRECATED_COMPONENTS=OFF` + `APPLICATION_GETDEPRECATEDCOMPONENTS=ON` and ignore scenes using deprecated components during scene tests. I also added a function to ignore scenes using non-existent (because disabled) plugins. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/611
https://github.com/sofa-framework/sofa/pull/611:608,Testability,test,test,608,"Now we have a tool to list the deprecated components, we can build with `SOFA_WITH_DEPRECATED_COMPONENTS=OFF` + `APPLICATION_GETDEPRECATEDCOMPONENTS=ON` and ignore scenes using deprecated components during scene tests. I also added a function to ignore scenes using non-existent (because disabled) plugins. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/611
https://github.com/sofa-framework/sofa/pull/612:371,Availability,failure,failures,371,Add just a collision model (Sphere to have collision in the default fontain.scn example of the SofaPython example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/612
https://github.com/sofa-framework/sofa/pull/612:421,Availability,failure,failures,421,Add just a collision model (Sphere to have collision in the default fontain.scn example of the SofaPython example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/612
https://github.com/sofa-framework/sofa/pull/612:214,Integrability,message,message,214,Add just a collision model (Sphere to have collision in the default fontain.scn example of the SofaPython example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/612
https://github.com/sofa-framework/sofa/pull/612:366,Testability,test,test,366,Add just a collision model (Sphere to have collision in the default fontain.scn example of the SofaPython example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/612
https://github.com/sofa-framework/sofa/pull/612:416,Testability,test,test,416,Add just a collision model (Sphere to have collision in the default fontain.scn example of the SofaPython example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/612
https://github.com/sofa-framework/sofa/pull/613:143,Availability,echo,echoed,143,On running the command: bin/runSofa -g batch -n infinite; infinite iterations will start and time computed after every 1000 iterations will be echoed.; Solving the issue #552 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613
https://github.com/sofa-framework/sofa/pull/613:433,Availability,failure,failures,433,On running the command: bin/runSofa -g batch -n infinite; infinite iterations will start and time computed after every 1000 iterations will be echoed.; Solving the issue #552 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613
https://github.com/sofa-framework/sofa/pull/613:483,Availability,failure,failures,483,On running the command: bin/runSofa -g batch -n infinite; infinite iterations will start and time computed after every 1000 iterations will be echoed.; Solving the issue #552 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613
https://github.com/sofa-framework/sofa/pull/613:276,Integrability,message,message,276,On running the command: bin/runSofa -g batch -n infinite; infinite iterations will start and time computed after every 1000 iterations will be echoed.; Solving the issue #552 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613
https://github.com/sofa-framework/sofa/pull/613:428,Testability,test,test,428,On running the command: bin/runSofa -g batch -n infinite; infinite iterations will start and time computed after every 1000 iterations will be echoed.; Solving the issue #552 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613
https://github.com/sofa-framework/sofa/pull/613:478,Testability,test,test,478,On running the command: bin/runSofa -g batch -n infinite; infinite iterations will start and time computed after every 1000 iterations will be echoed.; Solving the issue #552 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613
https://github.com/sofa-framework/sofa/pull/614:567,Availability,failure,failures,567,"Issue detected by @quentinfrancois0. This comes from a change in the Python configuration since the last High Sierra.; The line #include <Python/Python.h> involved a link ""Python"" to the python include, but this is no longer valid in High Sierra. This was causing a fail in the compilation (include not found). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/614
https://github.com/sofa-framework/sofa/pull/614:617,Availability,failure,failures,617,"Issue detected by @quentinfrancois0. This comes from a change in the Python configuration since the last High Sierra.; The line #include <Python/Python.h> involved a link ""Python"" to the python include, but this is no longer valid in High Sierra. This was causing a fail in the compilation (include not found). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/614
https://github.com/sofa-framework/sofa/pull/614:76,Deployability,configurat,configuration,76,"Issue detected by @quentinfrancois0. This comes from a change in the Python configuration since the last High Sierra.; The line #include <Python/Python.h> involved a link ""Python"" to the python include, but this is no longer valid in High Sierra. This was causing a fail in the compilation (include not found). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/614
https://github.com/sofa-framework/sofa/pull/614:410,Integrability,message,message,410,"Issue detected by @quentinfrancois0. This comes from a change in the Python configuration since the last High Sierra.; The line #include <Python/Python.h> involved a link ""Python"" to the python include, but this is no longer valid in High Sierra. This was causing a fail in the compilation (include not found). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/614
https://github.com/sofa-framework/sofa/pull/614:76,Modifiability,config,configuration,76,"Issue detected by @quentinfrancois0. This comes from a change in the Python configuration since the last High Sierra.; The line #include <Python/Python.h> involved a link ""Python"" to the python include, but this is no longer valid in High Sierra. This was causing a fail in the compilation (include not found). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/614
https://github.com/sofa-framework/sofa/pull/614:6,Safety,detect,detected,6,"Issue detected by @quentinfrancois0. This comes from a change in the Python configuration since the last High Sierra.; The line #include <Python/Python.h> involved a link ""Python"" to the python include, but this is no longer valid in High Sierra. This was causing a fail in the compilation (include not found). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/614
https://github.com/sofa-framework/sofa/pull/614:562,Testability,test,test,562,"Issue detected by @quentinfrancois0. This comes from a change in the Python configuration since the last High Sierra.; The line #include <Python/Python.h> involved a link ""Python"" to the python include, but this is no longer valid in High Sierra. This was causing a fail in the compilation (include not found). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/614
https://github.com/sofa-framework/sofa/pull/614:612,Testability,test,test,612,"Issue detected by @quentinfrancois0. This comes from a change in the Python configuration since the last High Sierra.; The line #include <Python/Python.h> involved a link ""Python"" to the python include, but this is no longer valid in High Sierra. This was causing a fail in the compilation (include not found). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/614
https://github.com/sofa-framework/sofa/pull/615:758,Availability,failure,failures,758,"This PR add a frameskip option to the headless recorder.; Previous behavior is kept for compatibility.; Frameskip option can have 4 different values : ; - noskip and simulationtime : previous behavior, now default. One frame is taken at each time step.; - realtime : Output images at rate of 1/fps; - an arbitrary float : tries to skip this much time between each frame. The order between simulation and frame saving has also been inverted : now the first frame taken is at time 0, instead of time dt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/615
https://github.com/sofa-framework/sofa/pull/615:808,Availability,failure,failures,808,"This PR add a frameskip option to the headless recorder.; Previous behavior is kept for compatibility.; Frameskip option can have 4 different values : ; - noskip and simulationtime : previous behavior, now default. One frame is taken at each time step.; - realtime : Output images at rate of 1/fps; - an arbitrary float : tries to skip this much time between each frame. The order between simulation and frame saving has also been inverted : now the first frame taken is at time 0, instead of time dt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/615
https://github.com/sofa-framework/sofa/pull/615:601,Integrability,message,message,601,"This PR add a frameskip option to the headless recorder.; Previous behavior is kept for compatibility.; Frameskip option can have 4 different values : ; - noskip and simulationtime : previous behavior, now default. One frame is taken at each time step.; - realtime : Output images at rate of 1/fps; - an arbitrary float : tries to skip this much time between each frame. The order between simulation and frame saving has also been inverted : now the first frame taken is at time 0, instead of time dt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/615
https://github.com/sofa-framework/sofa/pull/615:753,Testability,test,test,753,"This PR add a frameskip option to the headless recorder.; Previous behavior is kept for compatibility.; Frameskip option can have 4 different values : ; - noskip and simulationtime : previous behavior, now default. One frame is taken at each time step.; - realtime : Output images at rate of 1/fps; - an arbitrary float : tries to skip this much time between each frame. The order between simulation and frame saving has also been inverted : now the first frame taken is at time 0, instead of time dt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/615
https://github.com/sofa-framework/sofa/pull/615:803,Testability,test,test,803,"This PR add a frameskip option to the headless recorder.; Previous behavior is kept for compatibility.; Frameskip option can have 4 different values : ; - noskip and simulationtime : previous behavior, now default. One frame is taken at each time step.; - realtime : Output images at rate of 1/fps; - an arbitrary float : tries to skip this much time between each frame. The order between simulation and frame saving has also been inverted : now the first frame taken is at time 0, instead of time dt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/615
https://github.com/sofa-framework/sofa/pull/616:1857,Availability,failure,failures,1857,ighten the plugin a little bit. New structure:. ```; SofaPython; ├── Binding.cpp; ├── Binding.h; ├── Bindings; │   ├── BaseContext.cpp; │   ├── BaseContext.h; │   ├── Base.cpp; │   ├── Base.cpp.orig; │   ├── Base.h; │   ├── Base.h.orig; │   ├── BaseLoader.cpp; │   ├── BaseLoader.h; │   ├── BaseMapping.cpp; │   ├── BaseMapping.h; │   ├── BaseMechanicalState.cpp; │   ├── BaseMechanicalState.h; │   ├── BaseMeshTopology.cpp; │   ├── BaseMeshTopology.h; │ └── ...; ├── CMakeLists.txt; ├── initSofaPython.cpp; ├── PythonCommon.h; ├── PythonEnvironment.cpp; ├── PythonEnvironment.h; ├── PythonFactory.cpp; ├── PythonFactory.h; ├── PythonMacros.cpp; ├── PythonMacros.h; ├── PythonToSofa.inl; ├── PythonVisitor.cpp; ├── PythonVisitor.h; ├── SceneLoaderPY.cpp; ├── SceneLoaderPY.h; ├── scn2python.py; ├── ScriptController; │   ├── PythonMainScriptController.cpp; │   ├── PythonMainScriptController.h; │   ├── PythonScriptController.cpp; │   ├── PythonScriptController.h; │   ├── PythonScriptControllerHelper.cpp; │   ├── PythonScriptControllerHelper.h; │   ├── PythonScriptDataEngine.cpp; │   ├── PythonScriptDataEngine.h; │   ├── PythonScriptEvent.cpp; │   ├── PythonScriptEvent.h; │   ├── PythonScriptFunction.cpp; │   ├── PythonScriptFunction.h; │   ├── ScriptController.cpp; │   ├── ScriptController.h; │   ├── ScriptDataEngine.cpp; │   ├── ScriptDataEngine.h; │   ├── ScriptEvent.cpp; │   ├── ScriptEvent.h; │   ├── ScriptFunction.cpp; │   └── ScriptFunction.h; ├── SofaPythonConfig.cmake.in; ├── SofaPython.txt; └── ...; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/616
https://github.com/sofa-framework/sofa/pull/616:1907,Availability,failure,failures,1907,ighten the plugin a little bit. New structure:. ```; SofaPython; ├── Binding.cpp; ├── Binding.h; ├── Bindings; │   ├── BaseContext.cpp; │   ├── BaseContext.h; │   ├── Base.cpp; │   ├── Base.cpp.orig; │   ├── Base.h; │   ├── Base.h.orig; │   ├── BaseLoader.cpp; │   ├── BaseLoader.h; │   ├── BaseMapping.cpp; │   ├── BaseMapping.h; │   ├── BaseMechanicalState.cpp; │   ├── BaseMechanicalState.h; │   ├── BaseMeshTopology.cpp; │   ├── BaseMeshTopology.h; │ └── ...; ├── CMakeLists.txt; ├── initSofaPython.cpp; ├── PythonCommon.h; ├── PythonEnvironment.cpp; ├── PythonEnvironment.h; ├── PythonFactory.cpp; ├── PythonFactory.h; ├── PythonMacros.cpp; ├── PythonMacros.h; ├── PythonToSofa.inl; ├── PythonVisitor.cpp; ├── PythonVisitor.h; ├── SceneLoaderPY.cpp; ├── SceneLoaderPY.h; ├── scn2python.py; ├── ScriptController; │   ├── PythonMainScriptController.cpp; │   ├── PythonMainScriptController.h; │   ├── PythonScriptController.cpp; │   ├── PythonScriptController.h; │   ├── PythonScriptControllerHelper.cpp; │   ├── PythonScriptControllerHelper.h; │   ├── PythonScriptDataEngine.cpp; │   ├── PythonScriptDataEngine.h; │   ├── PythonScriptEvent.cpp; │   ├── PythonScriptEvent.h; │   ├── PythonScriptFunction.cpp; │   ├── PythonScriptFunction.h; │   ├── ScriptController.cpp; │   ├── ScriptController.h; │   ├── ScriptDataEngine.cpp; │   ├── ScriptDataEngine.h; │   ├── ScriptEvent.cpp; │   ├── ScriptEvent.h; │   ├── ScriptFunction.cpp; │   └── ScriptFunction.h; ├── SofaPythonConfig.cmake.in; ├── SofaPython.txt; └── ...; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/616
https://github.com/sofa-framework/sofa/pull/616:1700,Integrability,message,message,1700,ighten the plugin a little bit. New structure:. ```; SofaPython; ├── Binding.cpp; ├── Binding.h; ├── Bindings; │   ├── BaseContext.cpp; │   ├── BaseContext.h; │   ├── Base.cpp; │   ├── Base.cpp.orig; │   ├── Base.h; │   ├── Base.h.orig; │   ├── BaseLoader.cpp; │   ├── BaseLoader.h; │   ├── BaseMapping.cpp; │   ├── BaseMapping.h; │   ├── BaseMechanicalState.cpp; │   ├── BaseMechanicalState.h; │   ├── BaseMeshTopology.cpp; │   ├── BaseMeshTopology.h; │ └── ...; ├── CMakeLists.txt; ├── initSofaPython.cpp; ├── PythonCommon.h; ├── PythonEnvironment.cpp; ├── PythonEnvironment.h; ├── PythonFactory.cpp; ├── PythonFactory.h; ├── PythonMacros.cpp; ├── PythonMacros.h; ├── PythonToSofa.inl; ├── PythonVisitor.cpp; ├── PythonVisitor.h; ├── SceneLoaderPY.cpp; ├── SceneLoaderPY.h; ├── scn2python.py; ├── ScriptController; │   ├── PythonMainScriptController.cpp; │   ├── PythonMainScriptController.h; │   ├── PythonScriptController.cpp; │   ├── PythonScriptController.h; │   ├── PythonScriptControllerHelper.cpp; │   ├── PythonScriptControllerHelper.h; │   ├── PythonScriptDataEngine.cpp; │   ├── PythonScriptDataEngine.h; │   ├── PythonScriptEvent.cpp; │   ├── PythonScriptEvent.h; │   ├── PythonScriptFunction.cpp; │   ├── PythonScriptFunction.h; │   ├── ScriptController.cpp; │   ├── ScriptController.h; │   ├── ScriptDataEngine.cpp; │   ├── ScriptDataEngine.h; │   ├── ScriptEvent.cpp; │   ├── ScriptEvent.h; │   ├── ScriptFunction.cpp; │   └── ScriptFunction.h; ├── SofaPythonConfig.cmake.in; ├── SofaPython.txt; └── ...; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/616
https://github.com/sofa-framework/sofa/pull/616:86,Modifiability,plugin,plugin,86,Move the bindings files and script controllers files to subdirectories to lighten the plugin a little bit. New structure:. ```; SofaPython; ├── Binding.cpp; ├── Binding.h; ├── Bindings; │   ├── BaseContext.cpp; │   ├── BaseContext.h; │   ├── Base.cpp; │   ├── Base.cpp.orig; │   ├── Base.h; │   ├── Base.h.orig; │   ├── BaseLoader.cpp; │   ├── BaseLoader.h; │   ├── BaseMapping.cpp; │   ├── BaseMapping.h; │   ├── BaseMechanicalState.cpp; │   ├── BaseMechanicalState.h; │   ├── BaseMeshTopology.cpp; │   ├── BaseMeshTopology.h; │ └── ...; ├── CMakeLists.txt; ├── initSofaPython.cpp; ├── PythonCommon.h; ├── PythonEnvironment.cpp; ├── PythonEnvironment.h; ├── PythonFactory.cpp; ├── PythonFactory.h; ├── PythonMacros.cpp; ├── PythonMacros.h; ├── PythonToSofa.inl; ├── PythonVisitor.cpp; ├── PythonVisitor.h; ├── SceneLoaderPY.cpp; ├── SceneLoaderPY.h; ├── scn2python.py; ├── ScriptController; │   ├── PythonMainScriptController.cpp; │   ├── PythonMainScriptController.h; │   ├── PythonScriptController.cpp; │   ├── PythonScriptController.h; │   ├── PythonScriptControllerHelper.cpp; │   ├── PythonScriptControllerHelper.h; │   ├── PythonScriptDataEngine.cpp; │   ├── PythonScriptDataEngine.h; │   ├── PythonScriptEvent.cpp; │   ├── PythonScriptEvent.h; │   ├── PythonScriptFunction.cpp; │   ├── PythonScriptFunction.h; │   ├── ScriptController.cpp; │   ├── ScriptController.h; │   ├── ScriptDataEngine.cpp; │   ├── ScriptDataEngine.h; │   ├── ScriptEvent.cpp; │   ├── ScriptEvent.h; │   ├── ScriptFunction.cpp; │   └── ScriptFunction.h; ├── SofaPythonConfig.cmake.in; ├── SofaPython.txt; └── ...; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/616
https://github.com/sofa-framework/sofa/pull/616:1852,Testability,test,test,1852,ighten the plugin a little bit. New structure:. ```; SofaPython; ├── Binding.cpp; ├── Binding.h; ├── Bindings; │   ├── BaseContext.cpp; │   ├── BaseContext.h; │   ├── Base.cpp; │   ├── Base.cpp.orig; │   ├── Base.h; │   ├── Base.h.orig; │   ├── BaseLoader.cpp; │   ├── BaseLoader.h; │   ├── BaseMapping.cpp; │   ├── BaseMapping.h; │   ├── BaseMechanicalState.cpp; │   ├── BaseMechanicalState.h; │   ├── BaseMeshTopology.cpp; │   ├── BaseMeshTopology.h; │ └── ...; ├── CMakeLists.txt; ├── initSofaPython.cpp; ├── PythonCommon.h; ├── PythonEnvironment.cpp; ├── PythonEnvironment.h; ├── PythonFactory.cpp; ├── PythonFactory.h; ├── PythonMacros.cpp; ├── PythonMacros.h; ├── PythonToSofa.inl; ├── PythonVisitor.cpp; ├── PythonVisitor.h; ├── SceneLoaderPY.cpp; ├── SceneLoaderPY.h; ├── scn2python.py; ├── ScriptController; │   ├── PythonMainScriptController.cpp; │   ├── PythonMainScriptController.h; │   ├── PythonScriptController.cpp; │   ├── PythonScriptController.h; │   ├── PythonScriptControllerHelper.cpp; │   ├── PythonScriptControllerHelper.h; │   ├── PythonScriptDataEngine.cpp; │   ├── PythonScriptDataEngine.h; │   ├── PythonScriptEvent.cpp; │   ├── PythonScriptEvent.h; │   ├── PythonScriptFunction.cpp; │   ├── PythonScriptFunction.h; │   ├── ScriptController.cpp; │   ├── ScriptController.h; │   ├── ScriptDataEngine.cpp; │   ├── ScriptDataEngine.h; │   ├── ScriptEvent.cpp; │   ├── ScriptEvent.h; │   ├── ScriptFunction.cpp; │   └── ScriptFunction.h; ├── SofaPythonConfig.cmake.in; ├── SofaPython.txt; └── ...; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/616
https://github.com/sofa-framework/sofa/pull/616:1902,Testability,test,test,1902,ighten the plugin a little bit. New structure:. ```; SofaPython; ├── Binding.cpp; ├── Binding.h; ├── Bindings; │   ├── BaseContext.cpp; │   ├── BaseContext.h; │   ├── Base.cpp; │   ├── Base.cpp.orig; │   ├── Base.h; │   ├── Base.h.orig; │   ├── BaseLoader.cpp; │   ├── BaseLoader.h; │   ├── BaseMapping.cpp; │   ├── BaseMapping.h; │   ├── BaseMechanicalState.cpp; │   ├── BaseMechanicalState.h; │   ├── BaseMeshTopology.cpp; │   ├── BaseMeshTopology.h; │ └── ...; ├── CMakeLists.txt; ├── initSofaPython.cpp; ├── PythonCommon.h; ├── PythonEnvironment.cpp; ├── PythonEnvironment.h; ├── PythonFactory.cpp; ├── PythonFactory.h; ├── PythonMacros.cpp; ├── PythonMacros.h; ├── PythonToSofa.inl; ├── PythonVisitor.cpp; ├── PythonVisitor.h; ├── SceneLoaderPY.cpp; ├── SceneLoaderPY.h; ├── scn2python.py; ├── ScriptController; │   ├── PythonMainScriptController.cpp; │   ├── PythonMainScriptController.h; │   ├── PythonScriptController.cpp; │   ├── PythonScriptController.h; │   ├── PythonScriptControllerHelper.cpp; │   ├── PythonScriptControllerHelper.h; │   ├── PythonScriptDataEngine.cpp; │   ├── PythonScriptDataEngine.h; │   ├── PythonScriptEvent.cpp; │   ├── PythonScriptEvent.h; │   ├── PythonScriptFunction.cpp; │   ├── PythonScriptFunction.h; │   ├── ScriptController.cpp; │   ├── ScriptController.h; │   ├── ScriptDataEngine.cpp; │   ├── ScriptDataEngine.h; │   ├── ScriptEvent.cpp; │   ├── ScriptEvent.h; │   ├── ScriptFunction.cpp; │   └── ScriptFunction.h; ├── SofaPythonConfig.cmake.in; ├── SofaPython.txt; └── ...; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/616
https://github.com/sofa-framework/sofa/pull/617:477,Availability,failure,failures,477,"The case where plugin is smaller than dotExt is not handled by std::equal. See how it works: http://en.cppreference.com/w/cpp/algorithm/equal. An assert is called.; I had the case when dotExt = "".dll"" and plugin = ""PSL"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617
https://github.com/sofa-framework/sofa/pull/617:527,Availability,failure,failures,527,"The case where plugin is smaller than dotExt is not handled by std::equal. See how it works: http://en.cppreference.com/w/cpp/algorithm/equal. An assert is called.; I had the case when dotExt = "".dll"" and plugin = ""PSL"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617
https://github.com/sofa-framework/sofa/pull/617:320,Integrability,message,message,320,"The case where plugin is smaller than dotExt is not handled by std::equal. See how it works: http://en.cppreference.com/w/cpp/algorithm/equal. An assert is called.; I had the case when dotExt = "".dll"" and plugin = ""PSL"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617
https://github.com/sofa-framework/sofa/pull/617:15,Modifiability,plugin,plugin,15,"The case where plugin is smaller than dotExt is not handled by std::equal. See how it works: http://en.cppreference.com/w/cpp/algorithm/equal. An assert is called.; I had the case when dotExt = "".dll"" and plugin = ""PSL"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617
https://github.com/sofa-framework/sofa/pull/617:205,Modifiability,plugin,plugin,205,"The case where plugin is smaller than dotExt is not handled by std::equal. See how it works: http://en.cppreference.com/w/cpp/algorithm/equal. An assert is called.; I had the case when dotExt = "".dll"" and plugin = ""PSL"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617
https://github.com/sofa-framework/sofa/pull/617:146,Testability,assert,assert,146,"The case where plugin is smaller than dotExt is not handled by std::equal. See how it works: http://en.cppreference.com/w/cpp/algorithm/equal. An assert is called.; I had the case when dotExt = "".dll"" and plugin = ""PSL"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617
https://github.com/sofa-framework/sofa/pull/617:472,Testability,test,test,472,"The case where plugin is smaller than dotExt is not handled by std::equal. See how it works: http://en.cppreference.com/w/cpp/algorithm/equal. An assert is called.; I had the case when dotExt = "".dll"" and plugin = ""PSL"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617
https://github.com/sofa-framework/sofa/pull/617:522,Testability,test,test,522,"The case where plugin is smaller than dotExt is not handled by std::equal. See how it works: http://en.cppreference.com/w/cpp/algorithm/equal. An assert is called.; I had the case when dotExt = "".dll"" and plugin = ""PSL"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617
https://github.com/sofa-framework/sofa/pull/618:370,Availability,failure,failures,370,This PR fixes install finding of Boost::program_options dependency added for the new ArgumentParser API in #513 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/618
https://github.com/sofa-framework/sofa/pull/618:420,Availability,failure,failures,420,This PR fixes install finding of Boost::program_options dependency added for the new ArgumentParser API in #513 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/618
https://github.com/sofa-framework/sofa/pull/618:14,Deployability,install,install,14,This PR fixes install finding of Boost::program_options dependency added for the new ArgumentParser API in #513 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/618
https://github.com/sofa-framework/sofa/pull/618:56,Integrability,depend,dependency,56,This PR fixes install finding of Boost::program_options dependency added for the new ArgumentParser API in #513 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/618
https://github.com/sofa-framework/sofa/pull/618:213,Integrability,message,message,213,This PR fixes install finding of Boost::program_options dependency added for the new ArgumentParser API in #513 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/618
https://github.com/sofa-framework/sofa/pull/618:365,Testability,test,test,365,This PR fixes install finding of Boost::program_options dependency added for the new ArgumentParser API in #513 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/618
https://github.com/sofa-framework/sofa/pull/618:415,Testability,test,test,415,This PR fixes install finding of Boost::program_options dependency added for the new ArgumentParser API in #513 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/618
https://github.com/sofa-framework/sofa/pull/619:309,Availability,failure,failures,309,Title says it all. Sorry for the messy quick fixing. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/619
https://github.com/sofa-framework/sofa/pull/619:359,Availability,failure,failures,359,Title says it all. Sorry for the messy quick fixing. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/619
https://github.com/sofa-framework/sofa/pull/619:152,Integrability,message,message,152,Title says it all. Sorry for the messy quick fixing. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/619
https://github.com/sofa-framework/sofa/pull/619:304,Testability,test,test,304,Title says it all. Sorry for the messy quick fixing. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/619
https://github.com/sofa-framework/sofa/pull/619:354,Testability,test,test,354,Title says it all. Sorry for the messy quick fixing. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/619
https://github.com/sofa-framework/sofa/pull/620:1086,Availability,failure,failures,1086,"Please gently welcome this first NG pull-request :blush: . The base idea was to remove the SofaComponent* packages from modules and to put them in their own place instead.; Doing this, I realized that SofaComponentBase contains actual components (it's not only a basic package as it should be).; Thus, it permitted me to introduce the first NG module Sofa.Component.Utils and fill it with SofaComponentBase intruders (MakeAliasComponent, MakeDataAliasComponent, MessageHandlerComponent, InfoComponent). NG architecture is based on the discussions in #543.; Transition headers are also provided (in deprecated_layout folder) to ensure old includes. I am also working with @damienmarchal on a way to cleanly automatize this kind of NG refactoring with python: see https://github.com/guparan/sofa2ng. Feedback is more than welcome!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/620
https://github.com/sofa-framework/sofa/pull/620:1136,Availability,failure,failures,1136,"Please gently welcome this first NG pull-request :blush: . The base idea was to remove the SofaComponent* packages from modules and to put them in their own place instead.; Doing this, I realized that SofaComponentBase contains actual components (it's not only a basic package as it should be).; Thus, it permitted me to introduce the first NG module Sofa.Component.Utils and fill it with SofaComponentBase intruders (MakeAliasComponent, MakeDataAliasComponent, MessageHandlerComponent, InfoComponent). NG architecture is based on the discussions in #543.; Transition headers are also provided (in deprecated_layout folder) to ensure old includes. I am also working with @damienmarchal on a way to cleanly automatize this kind of NG refactoring with python: see https://github.com/guparan/sofa2ng. Feedback is more than welcome!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/620
https://github.com/sofa-framework/sofa/pull/620:462,Integrability,Message,MessageHandlerComponent,462,"Please gently welcome this first NG pull-request :blush: . The base idea was to remove the SofaComponent* packages from modules and to put them in their own place instead.; Doing this, I realized that SofaComponentBase contains actual components (it's not only a basic package as it should be).; Thus, it permitted me to introduce the first NG module Sofa.Component.Utils and fill it with SofaComponentBase intruders (MakeAliasComponent, MakeDataAliasComponent, MessageHandlerComponent, InfoComponent). NG architecture is based on the discussions in #543.; Transition headers are also provided (in deprecated_layout folder) to ensure old includes. I am also working with @damienmarchal on a way to cleanly automatize this kind of NG refactoring with python: see https://github.com/guparan/sofa2ng. Feedback is more than welcome!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/620
https://github.com/sofa-framework/sofa/pull/620:929,Integrability,message,message,929,"Please gently welcome this first NG pull-request :blush: . The base idea was to remove the SofaComponent* packages from modules and to put them in their own place instead.; Doing this, I realized that SofaComponentBase contains actual components (it's not only a basic package as it should be).; Thus, it permitted me to introduce the first NG module Sofa.Component.Utils and fill it with SofaComponentBase intruders (MakeAliasComponent, MakeDataAliasComponent, MessageHandlerComponent, InfoComponent). NG architecture is based on the discussions in #543.; Transition headers are also provided (in deprecated_layout folder) to ensure old includes. I am also working with @damienmarchal on a way to cleanly automatize this kind of NG refactoring with python: see https://github.com/guparan/sofa2ng. Feedback is more than welcome!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/620
https://github.com/sofa-framework/sofa/pull/620:733,Modifiability,refactor,refactoring,733,"Please gently welcome this first NG pull-request :blush: . The base idea was to remove the SofaComponent* packages from modules and to put them in their own place instead.; Doing this, I realized that SofaComponentBase contains actual components (it's not only a basic package as it should be).; Thus, it permitted me to introduce the first NG module Sofa.Component.Utils and fill it with SofaComponentBase intruders (MakeAliasComponent, MakeDataAliasComponent, MessageHandlerComponent, InfoComponent). NG architecture is based on the discussions in #543.; Transition headers are also provided (in deprecated_layout folder) to ensure old includes. I am also working with @damienmarchal on a way to cleanly automatize this kind of NG refactoring with python: see https://github.com/guparan/sofa2ng. Feedback is more than welcome!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/620
https://github.com/sofa-framework/sofa/pull/620:1081,Testability,test,test,1081,"Please gently welcome this first NG pull-request :blush: . The base idea was to remove the SofaComponent* packages from modules and to put them in their own place instead.; Doing this, I realized that SofaComponentBase contains actual components (it's not only a basic package as it should be).; Thus, it permitted me to introduce the first NG module Sofa.Component.Utils and fill it with SofaComponentBase intruders (MakeAliasComponent, MakeDataAliasComponent, MessageHandlerComponent, InfoComponent). NG architecture is based on the discussions in #543.; Transition headers are also provided (in deprecated_layout folder) to ensure old includes. I am also working with @damienmarchal on a way to cleanly automatize this kind of NG refactoring with python: see https://github.com/guparan/sofa2ng. Feedback is more than welcome!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/620
https://github.com/sofa-framework/sofa/pull/620:1131,Testability,test,test,1131,"Please gently welcome this first NG pull-request :blush: . The base idea was to remove the SofaComponent* packages from modules and to put them in their own place instead.; Doing this, I realized that SofaComponentBase contains actual components (it's not only a basic package as it should be).; Thus, it permitted me to introduce the first NG module Sofa.Component.Utils and fill it with SofaComponentBase intruders (MakeAliasComponent, MakeDataAliasComponent, MessageHandlerComponent, InfoComponent). NG architecture is based on the discussions in #543.; Transition headers are also provided (in deprecated_layout folder) to ensure old includes. I am also working with @damienmarchal on a way to cleanly automatize this kind of NG refactoring with python: see https://github.com/guparan/sofa2ng. Feedback is more than welcome!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/620
https://github.com/sofa-framework/sofa/pull/620:798,Usability,Feedback,Feedback,798,"Please gently welcome this first NG pull-request :blush: . The base idea was to remove the SofaComponent* packages from modules and to put them in their own place instead.; Doing this, I realized that SofaComponentBase contains actual components (it's not only a basic package as it should be).; Thus, it permitted me to introduce the first NG module Sofa.Component.Utils and fill it with SofaComponentBase intruders (MakeAliasComponent, MakeDataAliasComponent, MessageHandlerComponent, InfoComponent). NG architecture is based on the discussions in #543.; Transition headers are also provided (in deprecated_layout folder) to ensure old includes. I am also working with @damienmarchal on a way to cleanly automatize this kind of NG refactoring with python: see https://github.com/guparan/sofa2ng. Feedback is more than welcome!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/620
https://github.com/sofa-framework/sofa/pull/621:884,Availability,failure,failures,884,"This PR adds a `isFile` function to the FileSystem component. The PluginManager will then use this new function to test whether or not the plugin path is an existent file. @guparan Concerning your question last week (what happens if the name of the plugin is passed without a path), the previous behavior was to check if the file was a valid library file (.so, etc.), and then gather the full path from the search directories. The new behavior will first check that the file is a valid file (which won't be if only the name is passed), and then try to find it in the search directories. This should not break any old behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621
https://github.com/sofa-framework/sofa/pull/621:934,Availability,failure,failures,934,"This PR adds a `isFile` function to the FileSystem component. The PluginManager will then use this new function to test whether or not the plugin path is an existent file. @guparan Concerning your question last week (what happens if the name of the plugin is passed without a path), the previous behavior was to check if the file was a valid library file (.so, etc.), and then gather the full path from the search directories. The new behavior will first check that the file is a valid file (which won't be if only the name is passed), and then try to find it in the search directories. This should not break any old behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621
https://github.com/sofa-framework/sofa/pull/621:727,Integrability,message,message,727,"This PR adds a `isFile` function to the FileSystem component. The PluginManager will then use this new function to test whether or not the plugin path is an existent file. @guparan Concerning your question last week (what happens if the name of the plugin is passed without a path), the previous behavior was to check if the file was a valid library file (.so, etc.), and then gather the full path from the search directories. The new behavior will first check that the file is a valid file (which won't be if only the name is passed), and then try to find it in the search directories. This should not break any old behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621
https://github.com/sofa-framework/sofa/pull/621:66,Modifiability,Plugin,PluginManager,66,"This PR adds a `isFile` function to the FileSystem component. The PluginManager will then use this new function to test whether or not the plugin path is an existent file. @guparan Concerning your question last week (what happens if the name of the plugin is passed without a path), the previous behavior was to check if the file was a valid library file (.so, etc.), and then gather the full path from the search directories. The new behavior will first check that the file is a valid file (which won't be if only the name is passed), and then try to find it in the search directories. This should not break any old behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621
https://github.com/sofa-framework/sofa/pull/621:139,Modifiability,plugin,plugin,139,"This PR adds a `isFile` function to the FileSystem component. The PluginManager will then use this new function to test whether or not the plugin path is an existent file. @guparan Concerning your question last week (what happens if the name of the plugin is passed without a path), the previous behavior was to check if the file was a valid library file (.so, etc.), and then gather the full path from the search directories. The new behavior will first check that the file is a valid file (which won't be if only the name is passed), and then try to find it in the search directories. This should not break any old behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621
https://github.com/sofa-framework/sofa/pull/621:249,Modifiability,plugin,plugin,249,"This PR adds a `isFile` function to the FileSystem component. The PluginManager will then use this new function to test whether or not the plugin path is an existent file. @guparan Concerning your question last week (what happens if the name of the plugin is passed without a path), the previous behavior was to check if the file was a valid library file (.so, etc.), and then gather the full path from the search directories. The new behavior will first check that the file is a valid file (which won't be if only the name is passed), and then try to find it in the search directories. This should not break any old behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621
https://github.com/sofa-framework/sofa/pull/621:115,Testability,test,test,115,"This PR adds a `isFile` function to the FileSystem component. The PluginManager will then use this new function to test whether or not the plugin path is an existent file. @guparan Concerning your question last week (what happens if the name of the plugin is passed without a path), the previous behavior was to check if the file was a valid library file (.so, etc.), and then gather the full path from the search directories. The new behavior will first check that the file is a valid file (which won't be if only the name is passed), and then try to find it in the search directories. This should not break any old behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621
https://github.com/sofa-framework/sofa/pull/621:879,Testability,test,test,879,"This PR adds a `isFile` function to the FileSystem component. The PluginManager will then use this new function to test whether or not the plugin path is an existent file. @guparan Concerning your question last week (what happens if the name of the plugin is passed without a path), the previous behavior was to check if the file was a valid library file (.so, etc.), and then gather the full path from the search directories. The new behavior will first check that the file is a valid file (which won't be if only the name is passed), and then try to find it in the search directories. This should not break any old behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621
https://github.com/sofa-framework/sofa/pull/621:929,Testability,test,test,929,"This PR adds a `isFile` function to the FileSystem component. The PluginManager will then use this new function to test whether or not the plugin path is an existent file. @guparan Concerning your question last week (what happens if the name of the plugin is passed without a path), the previous behavior was to check if the file was a valid library file (.so, etc.), and then gather the full path from the search directories. The new behavior will first check that the file is a valid file (which won't be if only the name is passed), and then try to find it in the search directories. This should not break any old behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621
https://github.com/sofa-framework/sofa/pull/622:11,Availability,error,errors,11,"Snap, CImg errors on Windows are fixed :tada: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/622
https://github.com/sofa-framework/sofa/pull/622:304,Availability,failure,failures,304,"Snap, CImg errors on Windows are fixed :tada: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/622
https://github.com/sofa-framework/sofa/pull/622:354,Availability,failure,failures,354,"Snap, CImg errors on Windows are fixed :tada: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/622
https://github.com/sofa-framework/sofa/pull/622:147,Integrability,message,message,147,"Snap, CImg errors on Windows are fixed :tada: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/622
https://github.com/sofa-framework/sofa/pull/622:299,Testability,test,test,299,"Snap, CImg errors on Windows are fixed :tada: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/622
https://github.com/sofa-framework/sofa/pull/622:349,Testability,test,test,349,"Snap, CImg errors on Windows are fixed :tada: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/622
https://github.com/sofa-framework/sofa/issues/623:150,Availability,error,error,150,"# Problem; When selected the SOFA_GUI_INTERACTION, this problem will appear. (in v17.12 and v17.06); ```; applications/sofa/gui/qt/RealGUI.cpp:432:5: error: ‘gridLayout’ was not declared in this scope; gridLayout->addWidget(interactionButton, 3, 0, 1, 1);; ^; SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/build.make:1634: recipe for target 'SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/RealGUI.cpp.o' failed; ```; There are three line use the object gridLayout, which is undefined.; ```; applications/sofa/gui/qt/RealGUI.cpp:432: gridLayout->addWidget(interactionButton, 3, 0, 1, 1);; applications/sofa/gui/qt/RealGUI.cpp:433: gridLayout->removeWidget(screenshotButton);; applications/sofa/gui/qt/RealGUI.cpp:434: gridLayout->addWidget(screenshotButton, 3, 1, 1,1);; ```; I only find the defination of gridLayout1 in the file ""RealGUI.h"" and ""RealGUI.cpp"" comes from the file ""ui_GUI.h"":; ```; ui_GUI.h:84: QGridLayout *gridLayout1;; ```; # Solution; Using gridLayout1 instead of gridLayout in these three lines, the problem will be disappear. But I do not know if it is the right way?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/623
https://github.com/sofa-framework/sofa/pull/624:414,Availability,failure,failures,414,"FIX: Name of a parameter (allowing to select incremental potential energy): before, the name contained spaces, was replaced by useIncrementalPotentialEnergy. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/624
https://github.com/sofa-framework/sofa/pull/624:464,Availability,failure,failures,464,"FIX: Name of a parameter (allowing to select incremental potential energy): before, the name contained spaces, was replaced by useIncrementalPotentialEnergy. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/624
https://github.com/sofa-framework/sofa/pull/624:67,Energy Efficiency,energy,energy,67,"FIX: Name of a parameter (allowing to select incremental potential energy): before, the name contained spaces, was replaced by useIncrementalPotentialEnergy. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/624
https://github.com/sofa-framework/sofa/pull/624:257,Integrability,message,message,257,"FIX: Name of a parameter (allowing to select incremental potential energy): before, the name contained spaces, was replaced by useIncrementalPotentialEnergy. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/624
https://github.com/sofa-framework/sofa/pull/624:409,Testability,test,test,409,"FIX: Name of a parameter (allowing to select incremental potential energy): before, the name contained spaces, was replaced by useIncrementalPotentialEnergy. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/624
https://github.com/sofa-framework/sofa/pull/624:459,Testability,test,test,459,"FIX: Name of a parameter (allowing to select incremental potential energy): before, the name contained spaces, was replaced by useIncrementalPotentialEnergy. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/624
https://github.com/sofa-framework/sofa/pull/625:827,Availability,failure,failures,827,"This PR fix an issue with the WriteState component. When we are using WriteState, we indicate as an argument the period with which we want to save the states. The states will be then saved in a file when a modulo of the period is reached.; But I have observed that there is always a one step offset between reaching the time to save and the actual saving. So I naively add one dt to the time WriteState is working with. . If there is an other way to resolve this issue without hard-coding in WriteState like I have done, I will be happy implement it . Thanks in advance; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/625
https://github.com/sofa-framework/sofa/pull/625:877,Availability,failure,failures,877,"This PR fix an issue with the WriteState component. When we are using WriteState, we indicate as an argument the period with which we want to save the states. The states will be then saved in a file when a modulo of the period is reached.; But I have observed that there is always a one step offset between reaching the time to save and the actual saving. So I naively add one dt to the time WriteState is working with. . If there is an other way to resolve this issue without hard-coding in WriteState like I have done, I will be happy implement it . Thanks in advance; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/625
https://github.com/sofa-framework/sofa/pull/625:670,Integrability,message,message,670,"This PR fix an issue with the WriteState component. When we are using WriteState, we indicate as an argument the period with which we want to save the states. The states will be then saved in a file when a modulo of the period is reached.; But I have observed that there is always a one step offset between reaching the time to save and the actual saving. So I naively add one dt to the time WriteState is working with. . If there is an other way to resolve this issue without hard-coding in WriteState like I have done, I will be happy implement it . Thanks in advance; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/625
https://github.com/sofa-framework/sofa/pull/625:822,Testability,test,test,822,"This PR fix an issue with the WriteState component. When we are using WriteState, we indicate as an argument the period with which we want to save the states. The states will be then saved in a file when a modulo of the period is reached.; But I have observed that there is always a one step offset between reaching the time to save and the actual saving. So I naively add one dt to the time WriteState is working with. . If there is an other way to resolve this issue without hard-coding in WriteState like I have done, I will be happy implement it . Thanks in advance; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/625
https://github.com/sofa-framework/sofa/pull/625:872,Testability,test,test,872,"This PR fix an issue with the WriteState component. When we are using WriteState, we indicate as an argument the period with which we want to save the states. The states will be then saved in a file when a modulo of the period is reached.; But I have observed that there is always a one step offset between reaching the time to save and the actual saving. So I naively add one dt to the time WriteState is working with. . If there is an other way to resolve this issue without hard-coding in WriteState like I have done, I will be happy implement it . Thanks in advance; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/625
https://github.com/sofa-framework/sofa/pull/626:518,Availability,failure,failures,518,"This fix was already applied to examples/Components/forcefield/TriangularForceFieldComparison.scn; See 28c8b68f9d6ed4be725baf305a0957097581fb13. Sorry but I can't explain why this fix was needed in the first place. ; If someone could, that would be great :+1: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/626
https://github.com/sofa-framework/sofa/pull/626:568,Availability,failure,failures,568,"This fix was already applied to examples/Components/forcefield/TriangularForceFieldComparison.scn; See 28c8b68f9d6ed4be725baf305a0957097581fb13. Sorry but I can't explain why this fix was needed in the first place. ; If someone could, that would be great :+1: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/626
https://github.com/sofa-framework/sofa/pull/626:361,Integrability,message,message,361,"This fix was already applied to examples/Components/forcefield/TriangularForceFieldComparison.scn; See 28c8b68f9d6ed4be725baf305a0957097581fb13. Sorry but I can't explain why this fix was needed in the first place. ; If someone could, that would be great :+1: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/626
https://github.com/sofa-framework/sofa/pull/626:513,Testability,test,test,513,"This fix was already applied to examples/Components/forcefield/TriangularForceFieldComparison.scn; See 28c8b68f9d6ed4be725baf305a0957097581fb13. Sorry but I can't explain why this fix was needed in the first place. ; If someone could, that would be great :+1: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/626
https://github.com/sofa-framework/sofa/pull/626:563,Testability,test,test,563,"This fix was already applied to examples/Components/forcefield/TriangularForceFieldComparison.scn; See 28c8b68f9d6ed4be725baf305a0957097581fb13. Sorry but I can't explain why this fix was needed in the first place. ; If someone could, that would be great :+1: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/626
https://github.com/sofa-framework/sofa/pull/627:419,Availability,failure,failures,419,This PR fix an issue with the BoxROI component. There was a test in the constructor of BoxROI that created an unwanted behavior.; This test was moved in reinit(); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/627
https://github.com/sofa-framework/sofa/pull/627:469,Availability,failure,failures,469,This PR fix an issue with the BoxROI component. There was a test in the constructor of BoxROI that created an unwanted behavior.; This test was moved in reinit(); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/627
https://github.com/sofa-framework/sofa/pull/627:262,Integrability,message,message,262,This PR fix an issue with the BoxROI component. There was a test in the constructor of BoxROI that created an unwanted behavior.; This test was moved in reinit(); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/627
https://github.com/sofa-framework/sofa/pull/627:60,Testability,test,test,60,This PR fix an issue with the BoxROI component. There was a test in the constructor of BoxROI that created an unwanted behavior.; This test was moved in reinit(); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/627
https://github.com/sofa-framework/sofa/pull/627:135,Testability,test,test,135,This PR fix an issue with the BoxROI component. There was a test in the constructor of BoxROI that created an unwanted behavior.; This test was moved in reinit(); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/627
https://github.com/sofa-framework/sofa/pull/627:414,Testability,test,test,414,This PR fix an issue with the BoxROI component. There was a test in the constructor of BoxROI that created an unwanted behavior.; This test was moved in reinit(); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/627
https://github.com/sofa-framework/sofa/pull/627:464,Testability,test,test,464,This PR fix an issue with the BoxROI component. There was a test in the constructor of BoxROI that created an unwanted behavior.; This test was moved in reinit(); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/627
https://github.com/sofa-framework/sofa/pull/628:462,Availability,failure,failures,462,One good point about ignoring scenes with unmet `RequiredPlugin` dependencies is that we can see what scenes need some `RequiredPlugin`: they are the only left to crash trying to create unknown components. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/628
https://github.com/sofa-framework/sofa/pull/628:512,Availability,failure,failures,512,One good point about ignoring scenes with unmet `RequiredPlugin` dependencies is that we can see what scenes need some `RequiredPlugin`: they are the only left to crash trying to create unknown components. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/628
https://github.com/sofa-framework/sofa/pull/628:65,Integrability,depend,dependencies,65,One good point about ignoring scenes with unmet `RequiredPlugin` dependencies is that we can see what scenes need some `RequiredPlugin`: they are the only left to crash trying to create unknown components. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/628
https://github.com/sofa-framework/sofa/pull/628:305,Integrability,message,message,305,One good point about ignoring scenes with unmet `RequiredPlugin` dependencies is that we can see what scenes need some `RequiredPlugin`: they are the only left to crash trying to create unknown components. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/628
https://github.com/sofa-framework/sofa/pull/628:457,Testability,test,test,457,One good point about ignoring scenes with unmet `RequiredPlugin` dependencies is that we can see what scenes need some `RequiredPlugin`: they are the only left to crash trying to create unknown components. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/628
https://github.com/sofa-framework/sofa/pull/628:507,Testability,test,test,507,One good point about ignoring scenes with unmet `RequiredPlugin` dependencies is that we can see what scenes need some `RequiredPlugin`: they are the only left to crash trying to create unknown components. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/628
https://github.com/sofa-framework/sofa/pull/629:1094,Availability,failure,failures,1094,"Hi,. I love @sescaida's PythonScriptDataEngine, I find it extremely useful when you don't want to implement a whole component to perform very basic actions. Though I find it cumbersome to have to manually specify the type of the input/output datafields.; While I have no idea (yet) how to fix this for the component's outputs, I implemented a small method to try to derive the input type from the linked value. We could also add scalar types to this method, to be able to handle passing scalar parameters directly from python.; Also, I think it would make more sense to use directly the output of ; ```; datafield->getValueTypeInfo()->name(); ``` ; instead of an arbitrary __char__ when expliciting the datafield type in the PSDE factory. If you have any idea how I could do something similar for output fields, I'm taking any advice :). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629
https://github.com/sofa-framework/sofa/pull/629:1144,Availability,failure,failures,1144,"Hi,. I love @sescaida's PythonScriptDataEngine, I find it extremely useful when you don't want to implement a whole component to perform very basic actions. Though I find it cumbersome to have to manually specify the type of the input/output datafields.; While I have no idea (yet) how to fix this for the component's outputs, I implemented a small method to try to derive the input type from the linked value. We could also add scalar types to this method, to be able to handle passing scalar parameters directly from python.; Also, I think it would make more sense to use directly the output of ; ```; datafield->getValueTypeInfo()->name(); ``` ; instead of an arbitrary __char__ when expliciting the datafield type in the PSDE factory. If you have any idea how I could do something similar for output fields, I'm taking any advice :). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629
https://github.com/sofa-framework/sofa/pull/629:937,Integrability,message,message,937,"Hi,. I love @sescaida's PythonScriptDataEngine, I find it extremely useful when you don't want to implement a whole component to perform very basic actions. Though I find it cumbersome to have to manually specify the type of the input/output datafields.; While I have no idea (yet) how to fix this for the component's outputs, I implemented a small method to try to derive the input type from the linked value. We could also add scalar types to this method, to be able to handle passing scalar parameters directly from python.; Also, I think it would make more sense to use directly the output of ; ```; datafield->getValueTypeInfo()->name(); ``` ; instead of an arbitrary __char__ when expliciting the datafield type in the PSDE factory. If you have any idea how I could do something similar for output fields, I'm taking any advice :). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629
https://github.com/sofa-framework/sofa/pull/629:129,Performance,perform,perform,129,"Hi,. I love @sescaida's PythonScriptDataEngine, I find it extremely useful when you don't want to implement a whole component to perform very basic actions. Though I find it cumbersome to have to manually specify the type of the input/output datafields.; While I have no idea (yet) how to fix this for the component's outputs, I implemented a small method to try to derive the input type from the linked value. We could also add scalar types to this method, to be able to handle passing scalar parameters directly from python.; Also, I think it would make more sense to use directly the output of ; ```; datafield->getValueTypeInfo()->name(); ``` ; instead of an arbitrary __char__ when expliciting the datafield type in the PSDE factory. If you have any idea how I could do something similar for output fields, I'm taking any advice :). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629
https://github.com/sofa-framework/sofa/pull/629:1089,Testability,test,test,1089,"Hi,. I love @sescaida's PythonScriptDataEngine, I find it extremely useful when you don't want to implement a whole component to perform very basic actions. Though I find it cumbersome to have to manually specify the type of the input/output datafields.; While I have no idea (yet) how to fix this for the component's outputs, I implemented a small method to try to derive the input type from the linked value. We could also add scalar types to this method, to be able to handle passing scalar parameters directly from python.; Also, I think it would make more sense to use directly the output of ; ```; datafield->getValueTypeInfo()->name(); ``` ; instead of an arbitrary __char__ when expliciting the datafield type in the PSDE factory. If you have any idea how I could do something similar for output fields, I'm taking any advice :). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629
https://github.com/sofa-framework/sofa/pull/629:1139,Testability,test,test,1139,"Hi,. I love @sescaida's PythonScriptDataEngine, I find it extremely useful when you don't want to implement a whole component to perform very basic actions. Though I find it cumbersome to have to manually specify the type of the input/output datafields.; While I have no idea (yet) how to fix this for the component's outputs, I implemented a small method to try to derive the input type from the linked value. We could also add scalar types to this method, to be able to handle passing scalar parameters directly from python.; Also, I think it would make more sense to use directly the output of ; ```; datafield->getValueTypeInfo()->name(); ``` ; instead of an arbitrary __char__ when expliciting the datafield type in the PSDE factory. If you have any idea how I could do something similar for output fields, I'm taking any advice :). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629
https://github.com/sofa-framework/sofa/pull/630:68,Availability,Error,Error,68,This PR suggested by @alxbilger fixes build on Windows with VS2017. Error was `C2057: expected constant expression`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/630
https://github.com/sofa-framework/sofa/pull/630:373,Availability,failure,failures,373,This PR suggested by @alxbilger fixes build on Windows with VS2017. Error was `C2057: expected constant expression`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/630
https://github.com/sofa-framework/sofa/pull/630:423,Availability,failure,failures,423,This PR suggested by @alxbilger fixes build on Windows with VS2017. Error was `C2057: expected constant expression`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/630
https://github.com/sofa-framework/sofa/pull/630:216,Integrability,message,message,216,This PR suggested by @alxbilger fixes build on Windows with VS2017. Error was `C2057: expected constant expression`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/630
https://github.com/sofa-framework/sofa/pull/630:368,Testability,test,test,368,This PR suggested by @alxbilger fixes build on Windows with VS2017. Error was `C2057: expected constant expression`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/630
https://github.com/sofa-framework/sofa/pull/630:418,Testability,test,test,418,This PR suggested by @alxbilger fixes build on Windows with VS2017. Error was `C2057: expected constant expression`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/630
https://github.com/sofa-framework/sofa/issues/632:12,Modifiability,plugin,plugin,12,Disabling a plugin and reconfiguring does not remove the plugin from plugin_list.conf. When writing plugin_list.conf (see runSofa CMakeLists) we use `__GlobalTargetList__` and `__GlobalTargetNameList__` global variables but these variables are based on CMake cache.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/632
https://github.com/sofa-framework/sofa/issues/632:57,Modifiability,plugin,plugin,57,Disabling a plugin and reconfiguring does not remove the plugin from plugin_list.conf. When writing plugin_list.conf (see runSofa CMakeLists) we use `__GlobalTargetList__` and `__GlobalTargetNameList__` global variables but these variables are based on CMake cache.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/632
https://github.com/sofa-framework/sofa/issues/632:210,Modifiability,variab,variables,210,Disabling a plugin and reconfiguring does not remove the plugin from plugin_list.conf. When writing plugin_list.conf (see runSofa CMakeLists) we use `__GlobalTargetList__` and `__GlobalTargetNameList__` global variables but these variables are based on CMake cache.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/632
https://github.com/sofa-framework/sofa/issues/632:230,Modifiability,variab,variables,230,Disabling a plugin and reconfiguring does not remove the plugin from plugin_list.conf. When writing plugin_list.conf (see runSofa CMakeLists) we use `__GlobalTargetList__` and `__GlobalTargetNameList__` global variables but these variables are based on CMake cache.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/632
https://github.com/sofa-framework/sofa/issues/632:259,Performance,cache,cache,259,Disabling a plugin and reconfiguring does not remove the plugin from plugin_list.conf. When writing plugin_list.conf (see runSofa CMakeLists) we use `__GlobalTargetList__` and `__GlobalTargetNameList__` global variables but these variables are based on CMake cache.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/632
https://github.com/sofa-framework/sofa/issues/633:342,Energy Efficiency,adapt,adapt,342,"Hi @sofa-framework/reviewers,. As you may know, we participate to Google Summer of Code this year. We proposed [3 projects](https://www.sofa-framework.org/community/google-summer-of-code/):; - **SOFA + Pulse**, mentored by @hugtalbot and Kitware: bringing Pulse into SOFA (as a plugin).; - **Emscriptening SOFA**, mentored by @damienmarchal: adapt the core of the SOFA so that it can be compiled with Emscripten allowing SOFA to run in a web browser.; - **Communication plugin**, mentored by @ErwanDouaille: improve the communication plugin (implement new protocols). Google granted us **2 slots** so we have to choose. We have promising candidates for every project so **we need your opinion**. Please **vote for the 2 projects** that you think would fit best. ; - For **SOFA + Pulse**, react with :+1: ; - For **Emscriptening SOFA**, react with :tada: ; - For **Communication plugin**, react with :heart: . Arguments in favor of a project can be ""I need it"", ""It would be very helpful for the community"", ""I think it fits well GSoC type of projects"", ... Do not hesitate to comment/discuss. ; Mentors (@hugtalbot, @damienmarchal, @ErwanDouaille) are also welcome to add a comment to detail a bit more the projects. **We have until Tuesday, April 17th at 16:00 UTC to decide.**. Thanks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633
https://github.com/sofa-framework/sofa/issues/633:556,Integrability,protocol,protocols,556,"Hi @sofa-framework/reviewers,. As you may know, we participate to Google Summer of Code this year. We proposed [3 projects](https://www.sofa-framework.org/community/google-summer-of-code/):; - **SOFA + Pulse**, mentored by @hugtalbot and Kitware: bringing Pulse into SOFA (as a plugin).; - **Emscriptening SOFA**, mentored by @damienmarchal: adapt the core of the SOFA so that it can be compiled with Emscripten allowing SOFA to run in a web browser.; - **Communication plugin**, mentored by @ErwanDouaille: improve the communication plugin (implement new protocols). Google granted us **2 slots** so we have to choose. We have promising candidates for every project so **we need your opinion**. Please **vote for the 2 projects** that you think would fit best. ; - For **SOFA + Pulse**, react with :+1: ; - For **Emscriptening SOFA**, react with :tada: ; - For **Communication plugin**, react with :heart: . Arguments in favor of a project can be ""I need it"", ""It would be very helpful for the community"", ""I think it fits well GSoC type of projects"", ... Do not hesitate to comment/discuss. ; Mentors (@hugtalbot, @damienmarchal, @ErwanDouaille) are also welcome to add a comment to detail a bit more the projects. **We have until Tuesday, April 17th at 16:00 UTC to decide.**. Thanks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633
https://github.com/sofa-framework/sofa/issues/633:278,Modifiability,plugin,plugin,278,"Hi @sofa-framework/reviewers,. As you may know, we participate to Google Summer of Code this year. We proposed [3 projects](https://www.sofa-framework.org/community/google-summer-of-code/):; - **SOFA + Pulse**, mentored by @hugtalbot and Kitware: bringing Pulse into SOFA (as a plugin).; - **Emscriptening SOFA**, mentored by @damienmarchal: adapt the core of the SOFA so that it can be compiled with Emscripten allowing SOFA to run in a web browser.; - **Communication plugin**, mentored by @ErwanDouaille: improve the communication plugin (implement new protocols). Google granted us **2 slots** so we have to choose. We have promising candidates for every project so **we need your opinion**. Please **vote for the 2 projects** that you think would fit best. ; - For **SOFA + Pulse**, react with :+1: ; - For **Emscriptening SOFA**, react with :tada: ; - For **Communication plugin**, react with :heart: . Arguments in favor of a project can be ""I need it"", ""It would be very helpful for the community"", ""I think it fits well GSoC type of projects"", ... Do not hesitate to comment/discuss. ; Mentors (@hugtalbot, @damienmarchal, @ErwanDouaille) are also welcome to add a comment to detail a bit more the projects. **We have until Tuesday, April 17th at 16:00 UTC to decide.**. Thanks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633
https://github.com/sofa-framework/sofa/issues/633:342,Modifiability,adapt,adapt,342,"Hi @sofa-framework/reviewers,. As you may know, we participate to Google Summer of Code this year. We proposed [3 projects](https://www.sofa-framework.org/community/google-summer-of-code/):; - **SOFA + Pulse**, mentored by @hugtalbot and Kitware: bringing Pulse into SOFA (as a plugin).; - **Emscriptening SOFA**, mentored by @damienmarchal: adapt the core of the SOFA so that it can be compiled with Emscripten allowing SOFA to run in a web browser.; - **Communication plugin**, mentored by @ErwanDouaille: improve the communication plugin (implement new protocols). Google granted us **2 slots** so we have to choose. We have promising candidates for every project so **we need your opinion**. Please **vote for the 2 projects** that you think would fit best. ; - For **SOFA + Pulse**, react with :+1: ; - For **Emscriptening SOFA**, react with :tada: ; - For **Communication plugin**, react with :heart: . Arguments in favor of a project can be ""I need it"", ""It would be very helpful for the community"", ""I think it fits well GSoC type of projects"", ... Do not hesitate to comment/discuss. ; Mentors (@hugtalbot, @damienmarchal, @ErwanDouaille) are also welcome to add a comment to detail a bit more the projects. **We have until Tuesday, April 17th at 16:00 UTC to decide.**. Thanks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633
https://github.com/sofa-framework/sofa/issues/633:470,Modifiability,plugin,plugin,470,"Hi @sofa-framework/reviewers,. As you may know, we participate to Google Summer of Code this year. We proposed [3 projects](https://www.sofa-framework.org/community/google-summer-of-code/):; - **SOFA + Pulse**, mentored by @hugtalbot and Kitware: bringing Pulse into SOFA (as a plugin).; - **Emscriptening SOFA**, mentored by @damienmarchal: adapt the core of the SOFA so that it can be compiled with Emscripten allowing SOFA to run in a web browser.; - **Communication plugin**, mentored by @ErwanDouaille: improve the communication plugin (implement new protocols). Google granted us **2 slots** so we have to choose. We have promising candidates for every project so **we need your opinion**. Please **vote for the 2 projects** that you think would fit best. ; - For **SOFA + Pulse**, react with :+1: ; - For **Emscriptening SOFA**, react with :tada: ; - For **Communication plugin**, react with :heart: . Arguments in favor of a project can be ""I need it"", ""It would be very helpful for the community"", ""I think it fits well GSoC type of projects"", ... Do not hesitate to comment/discuss. ; Mentors (@hugtalbot, @damienmarchal, @ErwanDouaille) are also welcome to add a comment to detail a bit more the projects. **We have until Tuesday, April 17th at 16:00 UTC to decide.**. Thanks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633
https://github.com/sofa-framework/sofa/issues/633:534,Modifiability,plugin,plugin,534,"Hi @sofa-framework/reviewers,. As you may know, we participate to Google Summer of Code this year. We proposed [3 projects](https://www.sofa-framework.org/community/google-summer-of-code/):; - **SOFA + Pulse**, mentored by @hugtalbot and Kitware: bringing Pulse into SOFA (as a plugin).; - **Emscriptening SOFA**, mentored by @damienmarchal: adapt the core of the SOFA so that it can be compiled with Emscripten allowing SOFA to run in a web browser.; - **Communication plugin**, mentored by @ErwanDouaille: improve the communication plugin (implement new protocols). Google granted us **2 slots** so we have to choose. We have promising candidates for every project so **we need your opinion**. Please **vote for the 2 projects** that you think would fit best. ; - For **SOFA + Pulse**, react with :+1: ; - For **Emscriptening SOFA**, react with :tada: ; - For **Communication plugin**, react with :heart: . Arguments in favor of a project can be ""I need it"", ""It would be very helpful for the community"", ""I think it fits well GSoC type of projects"", ... Do not hesitate to comment/discuss. ; Mentors (@hugtalbot, @damienmarchal, @ErwanDouaille) are also welcome to add a comment to detail a bit more the projects. **We have until Tuesday, April 17th at 16:00 UTC to decide.**. Thanks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633
https://github.com/sofa-framework/sofa/issues/633:878,Modifiability,plugin,plugin,878,"Hi @sofa-framework/reviewers,. As you may know, we participate to Google Summer of Code this year. We proposed [3 projects](https://www.sofa-framework.org/community/google-summer-of-code/):; - **SOFA + Pulse**, mentored by @hugtalbot and Kitware: bringing Pulse into SOFA (as a plugin).; - **Emscriptening SOFA**, mentored by @damienmarchal: adapt the core of the SOFA so that it can be compiled with Emscripten allowing SOFA to run in a web browser.; - **Communication plugin**, mentored by @ErwanDouaille: improve the communication plugin (implement new protocols). Google granted us **2 slots** so we have to choose. We have promising candidates for every project so **we need your opinion**. Please **vote for the 2 projects** that you think would fit best. ; - For **SOFA + Pulse**, react with :+1: ; - For **Emscriptening SOFA**, react with :tada: ; - For **Communication plugin**, react with :heart: . Arguments in favor of a project can be ""I need it"", ""It would be very helpful for the community"", ""I think it fits well GSoC type of projects"", ... Do not hesitate to comment/discuss. ; Mentors (@hugtalbot, @damienmarchal, @ErwanDouaille) are also welcome to add a comment to detail a bit more the projects. **We have until Tuesday, April 17th at 16:00 UTC to decide.**. Thanks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633
https://github.com/sofa-framework/sofa/pull/634:705,Availability,failure,failures,705,"Some computeBBox() functions were still using numeric_limits<Real>::min() instead of lowest(). numeric_limits<T>::min() returns 0 (more precisely a value very close to it) if T is a floating-point type, whereas numeric_limits<T>::lowest() returns -inf(more precisely -max of T), which is the expected behavior in computeBBox(). http://en.cppreference.com/w/cpp/types/numeric_limits/min; http://en.cppreference.com/w/cpp/types/numeric_limits/lowest. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/634
https://github.com/sofa-framework/sofa/pull/634:755,Availability,failure,failures,755,"Some computeBBox() functions were still using numeric_limits<Real>::min() instead of lowest(). numeric_limits<T>::min() returns 0 (more precisely a value very close to it) if T is a floating-point type, whereas numeric_limits<T>::lowest() returns -inf(more precisely -max of T), which is the expected behavior in computeBBox(). http://en.cppreference.com/w/cpp/types/numeric_limits/min; http://en.cppreference.com/w/cpp/types/numeric_limits/lowest. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/634
https://github.com/sofa-framework/sofa/pull/634:548,Integrability,message,message,548,"Some computeBBox() functions were still using numeric_limits<Real>::min() instead of lowest(). numeric_limits<T>::min() returns 0 (more precisely a value very close to it) if T is a floating-point type, whereas numeric_limits<T>::lowest() returns -inf(more precisely -max of T), which is the expected behavior in computeBBox(). http://en.cppreference.com/w/cpp/types/numeric_limits/min; http://en.cppreference.com/w/cpp/types/numeric_limits/lowest. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/634
https://github.com/sofa-framework/sofa/pull/634:700,Testability,test,test,700,"Some computeBBox() functions were still using numeric_limits<Real>::min() instead of lowest(). numeric_limits<T>::min() returns 0 (more precisely a value very close to it) if T is a floating-point type, whereas numeric_limits<T>::lowest() returns -inf(more precisely -max of T), which is the expected behavior in computeBBox(). http://en.cppreference.com/w/cpp/types/numeric_limits/min; http://en.cppreference.com/w/cpp/types/numeric_limits/lowest. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/634
https://github.com/sofa-framework/sofa/pull/634:750,Testability,test,test,750,"Some computeBBox() functions were still using numeric_limits<Real>::min() instead of lowest(). numeric_limits<T>::min() returns 0 (more precisely a value very close to it) if T is a floating-point type, whereas numeric_limits<T>::lowest() returns -inf(more precisely -max of T), which is the expected behavior in computeBBox(). http://en.cppreference.com/w/cpp/types/numeric_limits/min; http://en.cppreference.com/w/cpp/types/numeric_limits/lowest. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/634
https://github.com/sofa-framework/sofa/pull/635:549,Availability,failure,failures,549,"This PR contains all the changes I did to produce SOFA releases.; Basically it is almost only CMake improvements to ease SOFA installation. Some of them may not be clean/wanted/useful, **please give feedback**. WARNING: I renamed some macros in SofaMacros.cmake so this could break your code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/635
https://github.com/sofa-framework/sofa/pull/635:599,Availability,failure,failures,599,"This PR contains all the changes I did to produce SOFA releases.; Basically it is almost only CMake improvements to ease SOFA installation. Some of them may not be clean/wanted/useful, **please give feedback**. WARNING: I renamed some macros in SofaMacros.cmake so this could break your code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/635
https://github.com/sofa-framework/sofa/pull/635:55,Deployability,release,releases,55,"This PR contains all the changes I did to produce SOFA releases.; Basically it is almost only CMake improvements to ease SOFA installation. Some of them may not be clean/wanted/useful, **please give feedback**. WARNING: I renamed some macros in SofaMacros.cmake so this could break your code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/635
https://github.com/sofa-framework/sofa/pull/635:126,Deployability,install,installation,126,"This PR contains all the changes I did to produce SOFA releases.; Basically it is almost only CMake improvements to ease SOFA installation. Some of them may not be clean/wanted/useful, **please give feedback**. WARNING: I renamed some macros in SofaMacros.cmake so this could break your code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/635
https://github.com/sofa-framework/sofa/pull/635:392,Integrability,message,message,392,"This PR contains all the changes I did to produce SOFA releases.; Basically it is almost only CMake improvements to ease SOFA installation. Some of them may not be clean/wanted/useful, **please give feedback**. WARNING: I renamed some macros in SofaMacros.cmake so this could break your code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/635
https://github.com/sofa-framework/sofa/pull/635:544,Testability,test,test,544,"This PR contains all the changes I did to produce SOFA releases.; Basically it is almost only CMake improvements to ease SOFA installation. Some of them may not be clean/wanted/useful, **please give feedback**. WARNING: I renamed some macros in SofaMacros.cmake so this could break your code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/635
https://github.com/sofa-framework/sofa/pull/635:594,Testability,test,test,594,"This PR contains all the changes I did to produce SOFA releases.; Basically it is almost only CMake improvements to ease SOFA installation. Some of them may not be clean/wanted/useful, **please give feedback**. WARNING: I renamed some macros in SofaMacros.cmake so this could break your code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/635
https://github.com/sofa-framework/sofa/pull/635:199,Usability,feedback,feedback,199,"This PR contains all the changes I did to produce SOFA releases.; Basically it is almost only CMake improvements to ease SOFA installation. Some of them may not be clean/wanted/useful, **please give feedback**. WARNING: I renamed some macros in SofaMacros.cmake so this could break your code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/635
https://github.com/sofa-framework/sofa/pull/637:648,Availability,robust,robust,648,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:1369,Availability,robust,robust,1369,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:1646,Availability,failure,failures,1646,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:1696,Availability,failure,failures,1696,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:704,Deployability,update,update,704,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:948,Deployability,integrat,integrationMethod,948,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:948,Integrability,integrat,integrationMethod,948,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:1212,Integrability,depend,depends,1212,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:1489,Integrability,message,message,1489,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:290,Modifiability,variab,variable,290,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:1020,Modifiability,plugin,plugin,1020,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:1038,Modifiability,plugin,plugin,1038,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:591,Testability,test,tests,591,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:1641,Testability,test,test,1641,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:1691,Testability,test,test,1691,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:1254,Usability,simpl,simplified,1254,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/637:1325,Usability,clear,clearly,1325,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637
https://github.com/sofa-framework/sofa/pull/638:409,Availability,failure,failures,409,Just removing unnecessary headers include inside header in sofa::core; No forward class or intelligent refactoring. any suggestion/remark is welcomed. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/638
https://github.com/sofa-framework/sofa/pull/638:459,Availability,failure,failures,459,Just removing unnecessary headers include inside header in sofa::core; No forward class or intelligent refactoring. any suggestion/remark is welcomed. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/638
https://github.com/sofa-framework/sofa/pull/638:252,Integrability,message,message,252,Just removing unnecessary headers include inside header in sofa::core; No forward class or intelligent refactoring. any suggestion/remark is welcomed. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/638
https://github.com/sofa-framework/sofa/pull/638:103,Modifiability,refactor,refactoring,103,Just removing unnecessary headers include inside header in sofa::core; No forward class or intelligent refactoring. any suggestion/remark is welcomed. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/638
https://github.com/sofa-framework/sofa/pull/638:404,Testability,test,test,404,Just removing unnecessary headers include inside header in sofa::core; No forward class or intelligent refactoring. any suggestion/remark is welcomed. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/638
https://github.com/sofa-framework/sofa/pull/638:454,Testability,test,test,454,Just removing unnecessary headers include inside header in sofa::core; No forward class or intelligent refactoring. any suggestion/remark is welcomed. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/638
https://github.com/sofa-framework/sofa/pull/639:76,Availability,error,errors,76,"For consistency purpose, added a helper function to handle the file related errors for loaders and components. To use it: ; ```; FILE *f = fopen(filename.c_str(), ""r"");; msg_error_when(!f)<<sofa::helper::message::UnableToOpenFile(filename.c_str());; ```. Modified the usage in only ""MeshTrian.cpp"". With feedback, if I am in right direction, I will make changes to other loader and component accordingly.Solving issue #197 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639
https://github.com/sofa-framework/sofa/pull/639:681,Availability,failure,failures,681,"For consistency purpose, added a helper function to handle the file related errors for loaders and components. To use it: ; ```; FILE *f = fopen(filename.c_str(), ""r"");; msg_error_when(!f)<<sofa::helper::message::UnableToOpenFile(filename.c_str());; ```. Modified the usage in only ""MeshTrian.cpp"". With feedback, if I am in right direction, I will make changes to other loader and component accordingly.Solving issue #197 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639
https://github.com/sofa-framework/sofa/pull/639:731,Availability,failure,failures,731,"For consistency purpose, added a helper function to handle the file related errors for loaders and components. To use it: ; ```; FILE *f = fopen(filename.c_str(), ""r"");; msg_error_when(!f)<<sofa::helper::message::UnableToOpenFile(filename.c_str());; ```. Modified the usage in only ""MeshTrian.cpp"". With feedback, if I am in right direction, I will make changes to other loader and component accordingly.Solving issue #197 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639
https://github.com/sofa-framework/sofa/pull/639:204,Integrability,message,message,204,"For consistency purpose, added a helper function to handle the file related errors for loaders and components. To use it: ; ```; FILE *f = fopen(filename.c_str(), ""r"");; msg_error_when(!f)<<sofa::helper::message::UnableToOpenFile(filename.c_str());; ```. Modified the usage in only ""MeshTrian.cpp"". With feedback, if I am in right direction, I will make changes to other loader and component accordingly.Solving issue #197 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639
https://github.com/sofa-framework/sofa/pull/639:524,Integrability,message,message,524,"For consistency purpose, added a helper function to handle the file related errors for loaders and components. To use it: ; ```; FILE *f = fopen(filename.c_str(), ""r"");; msg_error_when(!f)<<sofa::helper::message::UnableToOpenFile(filename.c_str());; ```. Modified the usage in only ""MeshTrian.cpp"". With feedback, if I am in right direction, I will make changes to other loader and component accordingly.Solving issue #197 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639
https://github.com/sofa-framework/sofa/pull/639:87,Performance,load,loaders,87,"For consistency purpose, added a helper function to handle the file related errors for loaders and components. To use it: ; ```; FILE *f = fopen(filename.c_str(), ""r"");; msg_error_when(!f)<<sofa::helper::message::UnableToOpenFile(filename.c_str());; ```. Modified the usage in only ""MeshTrian.cpp"". With feedback, if I am in right direction, I will make changes to other loader and component accordingly.Solving issue #197 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639
https://github.com/sofa-framework/sofa/pull/639:371,Performance,load,loader,371,"For consistency purpose, added a helper function to handle the file related errors for loaders and components. To use it: ; ```; FILE *f = fopen(filename.c_str(), ""r"");; msg_error_when(!f)<<sofa::helper::message::UnableToOpenFile(filename.c_str());; ```. Modified the usage in only ""MeshTrian.cpp"". With feedback, if I am in right direction, I will make changes to other loader and component accordingly.Solving issue #197 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639
https://github.com/sofa-framework/sofa/pull/639:676,Testability,test,test,676,"For consistency purpose, added a helper function to handle the file related errors for loaders and components. To use it: ; ```; FILE *f = fopen(filename.c_str(), ""r"");; msg_error_when(!f)<<sofa::helper::message::UnableToOpenFile(filename.c_str());; ```. Modified the usage in only ""MeshTrian.cpp"". With feedback, if I am in right direction, I will make changes to other loader and component accordingly.Solving issue #197 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639
https://github.com/sofa-framework/sofa/pull/639:726,Testability,test,test,726,"For consistency purpose, added a helper function to handle the file related errors for loaders and components. To use it: ; ```; FILE *f = fopen(filename.c_str(), ""r"");; msg_error_when(!f)<<sofa::helper::message::UnableToOpenFile(filename.c_str());; ```. Modified the usage in only ""MeshTrian.cpp"". With feedback, if I am in right direction, I will make changes to other loader and component accordingly.Solving issue #197 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639
https://github.com/sofa-framework/sofa/pull/639:304,Usability,feedback,feedback,304,"For consistency purpose, added a helper function to handle the file related errors for loaders and components. To use it: ; ```; FILE *f = fopen(filename.c_str(), ""r"");; msg_error_when(!f)<<sofa::helper::message::UnableToOpenFile(filename.c_str());; ```. Modified the usage in only ""MeshTrian.cpp"". With feedback, if I am in right direction, I will make changes to other loader and component accordingly.Solving issue #197 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639
https://github.com/sofa-framework/sofa/pull/640:408,Availability,failure,failures,408,ADD: constructor and method in Quater to compute quaternion so it represents the rotation required to rotate from one direction vector to a second one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/640
https://github.com/sofa-framework/sofa/pull/640:458,Availability,failure,failures,458,ADD: constructor and method in Quater to compute quaternion so it represents the rotation required to rotate from one direction vector to a second one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/640
https://github.com/sofa-framework/sofa/pull/640:251,Integrability,message,message,251,ADD: constructor and method in Quater to compute quaternion so it represents the rotation required to rotate from one direction vector to a second one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/640
https://github.com/sofa-framework/sofa/pull/640:403,Testability,test,test,403,ADD: constructor and method in Quater to compute quaternion so it represents the rotation required to rotate from one direction vector to a second one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/640
https://github.com/sofa-framework/sofa/pull/640:453,Testability,test,test,453,ADD: constructor and method in Quater to compute quaternion so it represents the rotation required to rotate from one direction vector to a second one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/640
https://github.com/sofa-framework/sofa/pull/641:407,Availability,failure,failures,407,Fix 4 crashing (timeout) scenes on Windows CI:; - GenerateCylinder; - GenerateGrid; - Flexible: linearAffine_flex331.scn; - Compliant: FEM-donuts.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/641
https://github.com/sofa-framework/sofa/pull/641:457,Availability,failure,failures,457,Fix 4 crashing (timeout) scenes on Windows CI:; - GenerateCylinder; - GenerateGrid; - Flexible: linearAffine_flex331.scn; - Compliant: FEM-donuts.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/641
https://github.com/sofa-framework/sofa/pull/641:250,Integrability,message,message,250,Fix 4 crashing (timeout) scenes on Windows CI:; - GenerateCylinder; - GenerateGrid; - Flexible: linearAffine_flex331.scn; - Compliant: FEM-donuts.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/641
https://github.com/sofa-framework/sofa/pull/641:86,Modifiability,Flexible,Flexible,86,Fix 4 crashing (timeout) scenes on Windows CI:; - GenerateCylinder; - GenerateGrid; - Flexible: linearAffine_flex331.scn; - Compliant: FEM-donuts.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/641
https://github.com/sofa-framework/sofa/pull/641:16,Safety,timeout,timeout,16,Fix 4 crashing (timeout) scenes on Windows CI:; - GenerateCylinder; - GenerateGrid; - Flexible: linearAffine_flex331.scn; - Compliant: FEM-donuts.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/641
https://github.com/sofa-framework/sofa/pull/641:402,Testability,test,test,402,Fix 4 crashing (timeout) scenes on Windows CI:; - GenerateCylinder; - GenerateGrid; - Flexible: linearAffine_flex331.scn; - Compliant: FEM-donuts.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/641
https://github.com/sofa-framework/sofa/pull/641:452,Testability,test,test,452,Fix 4 crashing (timeout) scenes on Windows CI:; - GenerateCylinder; - GenerateGrid; - Flexible: linearAffine_flex331.scn; - Compliant: FEM-donuts.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/641
https://github.com/sofa-framework/sofa/pull/642:355,Availability,fault,faulty,355,"To reproduce the bug, simply add a `msg_error()` at the first line of `static std::string computeSofaPathPrefix()` (sofa/helper/Utils.cpp) on a mac OSX system. I believe this bug was due to an order mixup of global static initializer since this bug wasn't affecting Linux (not sure about Windows). I would need more time to prove this though. I moved the faulty global static intializer to local static initializer and that fixed the crashes. It may be a good idea in the future to minimize the uses of static objects (singletons, static global variables, etc) since they are pretty hard to debug and can cause behaviors dependent of the compiler used. @guparan could you test this in your PR #635 (by reinserting the msg_error) and make sure that the seg fault is gone?. Fixes #636 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642
https://github.com/sofa-framework/sofa/pull/642:756,Availability,fault,fault,756,"To reproduce the bug, simply add a `msg_error()` at the first line of `static std::string computeSofaPathPrefix()` (sofa/helper/Utils.cpp) on a mac OSX system. I believe this bug was due to an order mixup of global static initializer since this bug wasn't affecting Linux (not sure about Windows). I would need more time to prove this though. I moved the faulty global static intializer to local static initializer and that fixed the crashes. It may be a good idea in the future to minimize the uses of static objects (singletons, static global variables, etc) since they are pretty hard to debug and can cause behaviors dependent of the compiler used. @guparan could you test this in your PR #635 (by reinserting the msg_error) and make sure that the seg fault is gone?. Fixes #636 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642
https://github.com/sofa-framework/sofa/pull/642:1041,Availability,failure,failures,1041,"To reproduce the bug, simply add a `msg_error()` at the first line of `static std::string computeSofaPathPrefix()` (sofa/helper/Utils.cpp) on a mac OSX system. I believe this bug was due to an order mixup of global static initializer since this bug wasn't affecting Linux (not sure about Windows). I would need more time to prove this though. I moved the faulty global static intializer to local static initializer and that fixed the crashes. It may be a good idea in the future to minimize the uses of static objects (singletons, static global variables, etc) since they are pretty hard to debug and can cause behaviors dependent of the compiler used. @guparan could you test this in your PR #635 (by reinserting the msg_error) and make sure that the seg fault is gone?. Fixes #636 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642
https://github.com/sofa-framework/sofa/pull/642:1091,Availability,failure,failures,1091,"To reproduce the bug, simply add a `msg_error()` at the first line of `static std::string computeSofaPathPrefix()` (sofa/helper/Utils.cpp) on a mac OSX system. I believe this bug was due to an order mixup of global static initializer since this bug wasn't affecting Linux (not sure about Windows). I would need more time to prove this though. I moved the faulty global static intializer to local static initializer and that fixed the crashes. It may be a good idea in the future to minimize the uses of static objects (singletons, static global variables, etc) since they are pretty hard to debug and can cause behaviors dependent of the compiler used. @guparan could you test this in your PR #635 (by reinserting the msg_error) and make sure that the seg fault is gone?. Fixes #636 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642
https://github.com/sofa-framework/sofa/pull/642:621,Integrability,depend,dependent,621,"To reproduce the bug, simply add a `msg_error()` at the first line of `static std::string computeSofaPathPrefix()` (sofa/helper/Utils.cpp) on a mac OSX system. I believe this bug was due to an order mixup of global static initializer since this bug wasn't affecting Linux (not sure about Windows). I would need more time to prove this though. I moved the faulty global static intializer to local static initializer and that fixed the crashes. It may be a good idea in the future to minimize the uses of static objects (singletons, static global variables, etc) since they are pretty hard to debug and can cause behaviors dependent of the compiler used. @guparan could you test this in your PR #635 (by reinserting the msg_error) and make sure that the seg fault is gone?. Fixes #636 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642
https://github.com/sofa-framework/sofa/pull/642:884,Integrability,message,message,884,"To reproduce the bug, simply add a `msg_error()` at the first line of `static std::string computeSofaPathPrefix()` (sofa/helper/Utils.cpp) on a mac OSX system. I believe this bug was due to an order mixup of global static initializer since this bug wasn't affecting Linux (not sure about Windows). I would need more time to prove this though. I moved the faulty global static intializer to local static initializer and that fixed the crashes. It may be a good idea in the future to minimize the uses of static objects (singletons, static global variables, etc) since they are pretty hard to debug and can cause behaviors dependent of the compiler used. @guparan could you test this in your PR #635 (by reinserting the msg_error) and make sure that the seg fault is gone?. Fixes #636 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642
https://github.com/sofa-framework/sofa/pull/642:545,Modifiability,variab,variables,545,"To reproduce the bug, simply add a `msg_error()` at the first line of `static std::string computeSofaPathPrefix()` (sofa/helper/Utils.cpp) on a mac OSX system. I believe this bug was due to an order mixup of global static initializer since this bug wasn't affecting Linux (not sure about Windows). I would need more time to prove this though. I moved the faulty global static intializer to local static initializer and that fixed the crashes. It may be a good idea in the future to minimize the uses of static objects (singletons, static global variables, etc) since they are pretty hard to debug and can cause behaviors dependent of the compiler used. @guparan could you test this in your PR #635 (by reinserting the msg_error) and make sure that the seg fault is gone?. Fixes #636 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642
https://github.com/sofa-framework/sofa/pull/642:672,Testability,test,test,672,"To reproduce the bug, simply add a `msg_error()` at the first line of `static std::string computeSofaPathPrefix()` (sofa/helper/Utils.cpp) on a mac OSX system. I believe this bug was due to an order mixup of global static initializer since this bug wasn't affecting Linux (not sure about Windows). I would need more time to prove this though. I moved the faulty global static intializer to local static initializer and that fixed the crashes. It may be a good idea in the future to minimize the uses of static objects (singletons, static global variables, etc) since they are pretty hard to debug and can cause behaviors dependent of the compiler used. @guparan could you test this in your PR #635 (by reinserting the msg_error) and make sure that the seg fault is gone?. Fixes #636 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642
https://github.com/sofa-framework/sofa/pull/642:1036,Testability,test,test,1036,"To reproduce the bug, simply add a `msg_error()` at the first line of `static std::string computeSofaPathPrefix()` (sofa/helper/Utils.cpp) on a mac OSX system. I believe this bug was due to an order mixup of global static initializer since this bug wasn't affecting Linux (not sure about Windows). I would need more time to prove this though. I moved the faulty global static intializer to local static initializer and that fixed the crashes. It may be a good idea in the future to minimize the uses of static objects (singletons, static global variables, etc) since they are pretty hard to debug and can cause behaviors dependent of the compiler used. @guparan could you test this in your PR #635 (by reinserting the msg_error) and make sure that the seg fault is gone?. Fixes #636 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642
https://github.com/sofa-framework/sofa/pull/642:1086,Testability,test,test,1086,"To reproduce the bug, simply add a `msg_error()` at the first line of `static std::string computeSofaPathPrefix()` (sofa/helper/Utils.cpp) on a mac OSX system. I believe this bug was due to an order mixup of global static initializer since this bug wasn't affecting Linux (not sure about Windows). I would need more time to prove this though. I moved the faulty global static intializer to local static initializer and that fixed the crashes. It may be a good idea in the future to minimize the uses of static objects (singletons, static global variables, etc) since they are pretty hard to debug and can cause behaviors dependent of the compiler used. @guparan could you test this in your PR #635 (by reinserting the msg_error) and make sure that the seg fault is gone?. Fixes #636 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642
https://github.com/sofa-framework/sofa/pull/642:22,Usability,simpl,simply,22,"To reproduce the bug, simply add a `msg_error()` at the first line of `static std::string computeSofaPathPrefix()` (sofa/helper/Utils.cpp) on a mac OSX system. I believe this bug was due to an order mixup of global static initializer since this bug wasn't affecting Linux (not sure about Windows). I would need more time to prove this though. I moved the faulty global static intializer to local static initializer and that fixed the crashes. It may be a good idea in the future to minimize the uses of static objects (singletons, static global variables, etc) since they are pretty hard to debug and can cause behaviors dependent of the compiler used. @guparan could you test this in your PR #635 (by reinserting the msg_error) and make sure that the seg fault is gone?. Fixes #636 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642
https://github.com/sofa-framework/sofa/pull/643:345,Availability,failure,failures,345,This PR removes all occurrences and related codes for SOFA_GUI_INTERACTION. Fixes #623 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/643
https://github.com/sofa-framework/sofa/pull/643:395,Availability,failure,failures,395,This PR removes all occurrences and related codes for SOFA_GUI_INTERACTION. Fixes #623 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/643
https://github.com/sofa-framework/sofa/pull/643:188,Integrability,message,message,188,This PR removes all occurrences and related codes for SOFA_GUI_INTERACTION. Fixes #623 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/643
https://github.com/sofa-framework/sofa/pull/643:340,Testability,test,test,340,This PR removes all occurrences and related codes for SOFA_GUI_INTERACTION. Fixes #623 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/643
https://github.com/sofa-framework/sofa/pull/643:390,Testability,test,test,390,This PR removes all occurrences and related codes for SOFA_GUI_INTERACTION. Fixes #623 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/643
https://github.com/sofa-framework/sofa/pull/644:131,Availability,error,error,131,Crash dump will now appear on Jenkins scene-test crash summary. TODO (after merge): change Jenkins detection regex to ; `([^:]*): (error:.*)(([\r\n].*?)*?)### END OF OUTPUT ###`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/644
https://github.com/sofa-framework/sofa/pull/644:435,Availability,failure,failures,435,Crash dump will now appear on Jenkins scene-test crash summary. TODO (after merge): change Jenkins detection regex to ; `([^:]*): (error:.*)(([\r\n].*?)*?)### END OF OUTPUT ###`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/644
https://github.com/sofa-framework/sofa/pull/644:485,Availability,failure,failures,485,Crash dump will now appear on Jenkins scene-test crash summary. TODO (after merge): change Jenkins detection regex to ; `([^:]*): (error:.*)(([\r\n].*?)*?)### END OF OUTPUT ###`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/644
https://github.com/sofa-framework/sofa/pull/644:278,Integrability,message,message,278,Crash dump will now appear on Jenkins scene-test crash summary. TODO (after merge): change Jenkins detection regex to ; `([^:]*): (error:.*)(([\r\n].*?)*?)### END OF OUTPUT ###`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/644
https://github.com/sofa-framework/sofa/pull/644:99,Safety,detect,detection,99,Crash dump will now appear on Jenkins scene-test crash summary. TODO (after merge): change Jenkins detection regex to ; `([^:]*): (error:.*)(([\r\n].*?)*?)### END OF OUTPUT ###`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/644
https://github.com/sofa-framework/sofa/pull/644:44,Testability,test,test,44,Crash dump will now appear on Jenkins scene-test crash summary. TODO (after merge): change Jenkins detection regex to ; `([^:]*): (error:.*)(([\r\n].*?)*?)### END OF OUTPUT ###`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/644
https://github.com/sofa-framework/sofa/pull/644:430,Testability,test,test,430,Crash dump will now appear on Jenkins scene-test crash summary. TODO (after merge): change Jenkins detection regex to ; `([^:]*): (error:.*)(([\r\n].*?)*?)### END OF OUTPUT ###`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/644
https://github.com/sofa-framework/sofa/pull/644:480,Testability,test,test,480,Crash dump will now appear on Jenkins scene-test crash summary. TODO (after merge): change Jenkins detection regex to ; `([^:]*): (error:.*)(([\r\n].*?)*?)### END OF OUTPUT ###`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/644
https://github.com/sofa-framework/sofa/pull/645:412,Availability,failure,failures,412,"Fix #632 . The plugin list was never updated if we removed a plugin in the cmake configuration.; Plus, it was possible to append several identical targets. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/645
https://github.com/sofa-framework/sofa/pull/645:462,Availability,failure,failures,462,"Fix #632 . The plugin list was never updated if we removed a plugin in the cmake configuration.; Plus, it was possible to append several identical targets. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/645
https://github.com/sofa-framework/sofa/pull/645:37,Deployability,update,updated,37,"Fix #632 . The plugin list was never updated if we removed a plugin in the cmake configuration.; Plus, it was possible to append several identical targets. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/645
https://github.com/sofa-framework/sofa/pull/645:81,Deployability,configurat,configuration,81,"Fix #632 . The plugin list was never updated if we removed a plugin in the cmake configuration.; Plus, it was possible to append several identical targets. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/645
https://github.com/sofa-framework/sofa/pull/645:255,Integrability,message,message,255,"Fix #632 . The plugin list was never updated if we removed a plugin in the cmake configuration.; Plus, it was possible to append several identical targets. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/645
https://github.com/sofa-framework/sofa/pull/645:15,Modifiability,plugin,plugin,15,"Fix #632 . The plugin list was never updated if we removed a plugin in the cmake configuration.; Plus, it was possible to append several identical targets. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/645
https://github.com/sofa-framework/sofa/pull/645:61,Modifiability,plugin,plugin,61,"Fix #632 . The plugin list was never updated if we removed a plugin in the cmake configuration.; Plus, it was possible to append several identical targets. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/645
https://github.com/sofa-framework/sofa/pull/645:81,Modifiability,config,configuration,81,"Fix #632 . The plugin list was never updated if we removed a plugin in the cmake configuration.; Plus, it was possible to append several identical targets. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/645
https://github.com/sofa-framework/sofa/pull/645:407,Testability,test,test,407,"Fix #632 . The plugin list was never updated if we removed a plugin in the cmake configuration.; Plus, it was possible to append several identical targets. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/645
https://github.com/sofa-framework/sofa/pull/645:457,Testability,test,test,457,"Fix #632 . The plugin list was never updated if we removed a plugin in the cmake configuration.; Plus, it was possible to append several identical targets. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/645
https://github.com/sofa-framework/sofa/pull/646:637,Availability,failure,failures,637,MacOS crashes in batch mode were due to FrameBufferObject constructor calls during simulation construction.; Fixed by moving those constructor calls to `initVisual()` using `std::unique_ptr`. WARNING: I changed VisualManagerPass::getFBO(). [See here](https://github.com/sofa-framework/sofa/commit/e910ec1e91e667ce213caeece639120598881940#diff-74e00cdcc25741750d2ed4f6b53398a7R93). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/646
https://github.com/sofa-framework/sofa/pull/646:687,Availability,failure,failures,687,MacOS crashes in batch mode were due to FrameBufferObject constructor calls during simulation construction.; Fixed by moving those constructor calls to `initVisual()` using `std::unique_ptr`. WARNING: I changed VisualManagerPass::getFBO(). [See here](https://github.com/sofa-framework/sofa/commit/e910ec1e91e667ce213caeece639120598881940#diff-74e00cdcc25741750d2ed4f6b53398a7R93). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/646
https://github.com/sofa-framework/sofa/pull/646:480,Integrability,message,message,480,MacOS crashes in batch mode were due to FrameBufferObject constructor calls during simulation construction.; Fixed by moving those constructor calls to `initVisual()` using `std::unique_ptr`. WARNING: I changed VisualManagerPass::getFBO(). [See here](https://github.com/sofa-framework/sofa/commit/e910ec1e91e667ce213caeece639120598881940#diff-74e00cdcc25741750d2ed4f6b53398a7R93). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/646
https://github.com/sofa-framework/sofa/pull/646:632,Testability,test,test,632,MacOS crashes in batch mode were due to FrameBufferObject constructor calls during simulation construction.; Fixed by moving those constructor calls to `initVisual()` using `std::unique_ptr`. WARNING: I changed VisualManagerPass::getFBO(). [See here](https://github.com/sofa-framework/sofa/commit/e910ec1e91e667ce213caeece639120598881940#diff-74e00cdcc25741750d2ed4f6b53398a7R93). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/646
https://github.com/sofa-framework/sofa/pull/646:682,Testability,test,test,682,MacOS crashes in batch mode were due to FrameBufferObject constructor calls during simulation construction.; Fixed by moving those constructor calls to `initVisual()` using `std::unique_ptr`. WARNING: I changed VisualManagerPass::getFBO(). [See here](https://github.com/sofa-framework/sofa/commit/e910ec1e91e667ce213caeece639120598881940#diff-74e00cdcc25741750d2ed4f6b53398a7R93). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/646
https://github.com/sofa-framework/sofa/issues/647:36,Availability,error,error,36,"Hello everyone,. I have detected an error when I close a sofa scene on my Mac with Cmd + Q. Here is attached the list of warnings raised when I close a scene. . [Terminal.txt](https://github.com/sofa-framework/sofa/files/1950734/Terminal.txt). I'm using MacOS 10.13.4 and Sofa 17.12.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/647
https://github.com/sofa-framework/sofa/issues/647:24,Safety,detect,detected,24,"Hello everyone,. I have detected an error when I close a sofa scene on my Mac with Cmd + Q. Here is attached the list of warnings raised when I close a scene. . [Terminal.txt](https://github.com/sofa-framework/sofa/files/1950734/Terminal.txt). I'm using MacOS 10.13.4 and Sofa 17.12.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/647
https://github.com/sofa-framework/sofa/pull/648:407,Availability,failure,failures,407,An inputForceFeedback data is added in Geomagic so that a force; can be specified as input of the driver.; This force is used only if no LCP is found. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/648
https://github.com/sofa-framework/sofa/pull/648:457,Availability,failure,failures,457,An inputForceFeedback data is added in Geomagic so that a force; can be specified as input of the driver.; This force is used only if no LCP is found. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/648
https://github.com/sofa-framework/sofa/pull/648:250,Integrability,message,message,250,An inputForceFeedback data is added in Geomagic so that a force; can be specified as input of the driver.; This force is used only if no LCP is found. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/648
https://github.com/sofa-framework/sofa/pull/648:402,Testability,test,test,402,An inputForceFeedback data is added in Geomagic so that a force; can be specified as input of the driver.; This force is used only if no LCP is found. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/648
https://github.com/sofa-framework/sofa/pull/648:452,Testability,test,test,452,An inputForceFeedback data is added in Geomagic so that a force; can be specified as input of the driver.; This force is used only if no LCP is found. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/648
https://github.com/sofa-framework/sofa/pull/649:635,Availability,failure,failures,635,"This PR mainly changes SofaMacros.cmake to permit external (on another repository) projects/plugins to be automatically fetched, updated and added to SOFA. Important: this work will permit to include SofaQtQuick GUI as an external project :wink: . This is a modified version of @fredroy branch [setup_external_plugin](https://github.com/fredroy/sofa/tree/setup_external_plugin). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649
https://github.com/sofa-framework/sofa/pull/649:685,Availability,failure,failures,685,"This PR mainly changes SofaMacros.cmake to permit external (on another repository) projects/plugins to be automatically fetched, updated and added to SOFA. Important: this work will permit to include SofaQtQuick GUI as an external project :wink: . This is a modified version of @fredroy branch [setup_external_plugin](https://github.com/fredroy/sofa/tree/setup_external_plugin). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649
https://github.com/sofa-framework/sofa/pull/649:129,Deployability,update,updated,129,"This PR mainly changes SofaMacros.cmake to permit external (on another repository) projects/plugins to be automatically fetched, updated and added to SOFA. Important: this work will permit to include SofaQtQuick GUI as an external project :wink: . This is a modified version of @fredroy branch [setup_external_plugin](https://github.com/fredroy/sofa/tree/setup_external_plugin). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649
https://github.com/sofa-framework/sofa/pull/649:478,Integrability,message,message,478,"This PR mainly changes SofaMacros.cmake to permit external (on another repository) projects/plugins to be automatically fetched, updated and added to SOFA. Important: this work will permit to include SofaQtQuick GUI as an external project :wink: . This is a modified version of @fredroy branch [setup_external_plugin](https://github.com/fredroy/sofa/tree/setup_external_plugin). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649
https://github.com/sofa-framework/sofa/pull/649:92,Modifiability,plugin,plugins,92,"This PR mainly changes SofaMacros.cmake to permit external (on another repository) projects/plugins to be automatically fetched, updated and added to SOFA. Important: this work will permit to include SofaQtQuick GUI as an external project :wink: . This is a modified version of @fredroy branch [setup_external_plugin](https://github.com/fredroy/sofa/tree/setup_external_plugin). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649
https://github.com/sofa-framework/sofa/pull/649:630,Testability,test,test,630,"This PR mainly changes SofaMacros.cmake to permit external (on another repository) projects/plugins to be automatically fetched, updated and added to SOFA. Important: this work will permit to include SofaQtQuick GUI as an external project :wink: . This is a modified version of @fredroy branch [setup_external_plugin](https://github.com/fredroy/sofa/tree/setup_external_plugin). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649
https://github.com/sofa-framework/sofa/pull/649:680,Testability,test,test,680,"This PR mainly changes SofaMacros.cmake to permit external (on another repository) projects/plugins to be automatically fetched, updated and added to SOFA. Important: this work will permit to include SofaQtQuick GUI as an external project :wink: . This is a modified version of @fredroy branch [setup_external_plugin](https://github.com/fredroy/sofa/tree/setup_external_plugin). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649
https://github.com/sofa-framework/sofa/pull/650:1065,Availability,failure,failures,1065,"This PR hopes to solve the bug where radius option can't be used with AttachConstraint. Provided scenario will crash SOFA.; [attach_radius.txt](https://github.com/sofa-framework/sofa/files/1973782/attach_radius.txt) (Github don't let me give `*.scn` ...). This is due to a call done to early. First commit solve this specific issue.; However, if you execute the previous scenario with just the first commit, it will still not work correctly : both index 0 points will be attached to each other, and that's it. The reason is that the mechanical objects are not correctly initialized when AttachConstraint `init()` is called. Commit 2 is a hack to show how it behave if we delay the initialisation. This does not aim to stay (and likely breaks working scenarios). Is there a way to delay said initialisation ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/650
https://github.com/sofa-framework/sofa/pull/650:1115,Availability,failure,failures,1115,"This PR hopes to solve the bug where radius option can't be used with AttachConstraint. Provided scenario will crash SOFA.; [attach_radius.txt](https://github.com/sofa-framework/sofa/files/1973782/attach_radius.txt) (Github don't let me give `*.scn` ...). This is due to a call done to early. First commit solve this specific issue.; However, if you execute the previous scenario with just the first commit, it will still not work correctly : both index 0 points will be attached to each other, and that's it. The reason is that the mechanical objects are not correctly initialized when AttachConstraint `init()` is called. Commit 2 is a hack to show how it behave if we delay the initialisation. This does not aim to stay (and likely breaks working scenarios). Is there a way to delay said initialisation ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/650
https://github.com/sofa-framework/sofa/pull/650:908,Integrability,message,message,908,"This PR hopes to solve the bug where radius option can't be used with AttachConstraint. Provided scenario will crash SOFA.; [attach_radius.txt](https://github.com/sofa-framework/sofa/files/1973782/attach_radius.txt) (Github don't let me give `*.scn` ...). This is due to a call done to early. First commit solve this specific issue.; However, if you execute the previous scenario with just the first commit, it will still not work correctly : both index 0 points will be attached to each other, and that's it. The reason is that the mechanical objects are not correctly initialized when AttachConstraint `init()` is called. Commit 2 is a hack to show how it behave if we delay the initialisation. This does not aim to stay (and likely breaks working scenarios). Is there a way to delay said initialisation ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/650
https://github.com/sofa-framework/sofa/pull/650:1060,Testability,test,test,1060,"This PR hopes to solve the bug where radius option can't be used with AttachConstraint. Provided scenario will crash SOFA.; [attach_radius.txt](https://github.com/sofa-framework/sofa/files/1973782/attach_radius.txt) (Github don't let me give `*.scn` ...). This is due to a call done to early. First commit solve this specific issue.; However, if you execute the previous scenario with just the first commit, it will still not work correctly : both index 0 points will be attached to each other, and that's it. The reason is that the mechanical objects are not correctly initialized when AttachConstraint `init()` is called. Commit 2 is a hack to show how it behave if we delay the initialisation. This does not aim to stay (and likely breaks working scenarios). Is there a way to delay said initialisation ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/650
https://github.com/sofa-framework/sofa/pull/650:1110,Testability,test,test,1110,"This PR hopes to solve the bug where radius option can't be used with AttachConstraint. Provided scenario will crash SOFA.; [attach_radius.txt](https://github.com/sofa-framework/sofa/files/1973782/attach_radius.txt) (Github don't let me give `*.scn` ...). This is due to a call done to early. First commit solve this specific issue.; However, if you execute the previous scenario with just the first commit, it will still not work correctly : both index 0 points will be attached to each other, and that's it. The reason is that the mechanical objects are not correctly initialized when AttachConstraint `init()` is called. Commit 2 is a hack to show how it behave if we delay the initialisation. This does not aim to stay (and likely breaks working scenarios). Is there a way to delay said initialisation ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/650
https://github.com/sofa-framework/sofa/pull/651:31,Availability,reliab,reliable,31,"This PR makes it easier & more reliable for plugins / external projects to find paths to the ""examples/"" and the ""share/"" folders in both the build directory and install directory. The current system was filling a file (sofa.ini) for this single purpose, that GUIManager was then parsing to retrieve those paths. if another project (tests for instance) would want to retrieve those paths, they would have to first locate this sofa.ini file (which can be very tricky if not part of the SOFA project tree), parse it and add it to the DataRepository. Now, preprocessor defines holds the paths and you just have to add it to the DataRepository as such:; sofa::helper::system::DataRepository.addFirstPath(SOFA_SHARE_DIR); sofa::helper::system::DataRepository.addFirstPath(SOFA_EXAMPLES_DIR). In both cases, the paths are *absolute* which is great (and what I needed) when building an external project, but generating distributable binaries with absolute paths will not work out well...; I realise this PR is not mergeable until this issue is resolved, but don't know how to change that.; With relative paths, finding the install directory from external projects is impossible, and with absolute paths, redistribution of binaries is not feasible. . Looking fwd to your inputs!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/651
https://github.com/sofa-framework/sofa/pull/651:162,Deployability,install,install,162,"This PR makes it easier & more reliable for plugins / external projects to find paths to the ""examples/"" and the ""share/"" folders in both the build directory and install directory. The current system was filling a file (sofa.ini) for this single purpose, that GUIManager was then parsing to retrieve those paths. if another project (tests for instance) would want to retrieve those paths, they would have to first locate this sofa.ini file (which can be very tricky if not part of the SOFA project tree), parse it and add it to the DataRepository. Now, preprocessor defines holds the paths and you just have to add it to the DataRepository as such:; sofa::helper::system::DataRepository.addFirstPath(SOFA_SHARE_DIR); sofa::helper::system::DataRepository.addFirstPath(SOFA_EXAMPLES_DIR). In both cases, the paths are *absolute* which is great (and what I needed) when building an external project, but generating distributable binaries with absolute paths will not work out well...; I realise this PR is not mergeable until this issue is resolved, but don't know how to change that.; With relative paths, finding the install directory from external projects is impossible, and with absolute paths, redistribution of binaries is not feasible. . Looking fwd to your inputs!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/651
https://github.com/sofa-framework/sofa/pull/651:1116,Deployability,install,install,1116,"This PR makes it easier & more reliable for plugins / external projects to find paths to the ""examples/"" and the ""share/"" folders in both the build directory and install directory. The current system was filling a file (sofa.ini) for this single purpose, that GUIManager was then parsing to retrieve those paths. if another project (tests for instance) would want to retrieve those paths, they would have to first locate this sofa.ini file (which can be very tricky if not part of the SOFA project tree), parse it and add it to the DataRepository. Now, preprocessor defines holds the paths and you just have to add it to the DataRepository as such:; sofa::helper::system::DataRepository.addFirstPath(SOFA_SHARE_DIR); sofa::helper::system::DataRepository.addFirstPath(SOFA_EXAMPLES_DIR). In both cases, the paths are *absolute* which is great (and what I needed) when building an external project, but generating distributable binaries with absolute paths will not work out well...; I realise this PR is not mergeable until this issue is resolved, but don't know how to change that.; With relative paths, finding the install directory from external projects is impossible, and with absolute paths, redistribution of binaries is not feasible. . Looking fwd to your inputs!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/651
https://github.com/sofa-framework/sofa/pull/651:44,Modifiability,plugin,plugins,44,"This PR makes it easier & more reliable for plugins / external projects to find paths to the ""examples/"" and the ""share/"" folders in both the build directory and install directory. The current system was filling a file (sofa.ini) for this single purpose, that GUIManager was then parsing to retrieve those paths. if another project (tests for instance) would want to retrieve those paths, they would have to first locate this sofa.ini file (which can be very tricky if not part of the SOFA project tree), parse it and add it to the DataRepository. Now, preprocessor defines holds the paths and you just have to add it to the DataRepository as such:; sofa::helper::system::DataRepository.addFirstPath(SOFA_SHARE_DIR); sofa::helper::system::DataRepository.addFirstPath(SOFA_EXAMPLES_DIR). In both cases, the paths are *absolute* which is great (and what I needed) when building an external project, but generating distributable binaries with absolute paths will not work out well...; I realise this PR is not mergeable until this issue is resolved, but don't know how to change that.; With relative paths, finding the install directory from external projects is impossible, and with absolute paths, redistribution of binaries is not feasible. . Looking fwd to your inputs!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/651
https://github.com/sofa-framework/sofa/pull/651:333,Testability,test,tests,333,"This PR makes it easier & more reliable for plugins / external projects to find paths to the ""examples/"" and the ""share/"" folders in both the build directory and install directory. The current system was filling a file (sofa.ini) for this single purpose, that GUIManager was then parsing to retrieve those paths. if another project (tests for instance) would want to retrieve those paths, they would have to first locate this sofa.ini file (which can be very tricky if not part of the SOFA project tree), parse it and add it to the DataRepository. Now, preprocessor defines holds the paths and you just have to add it to the DataRepository as such:; sofa::helper::system::DataRepository.addFirstPath(SOFA_SHARE_DIR); sofa::helper::system::DataRepository.addFirstPath(SOFA_EXAMPLES_DIR). In both cases, the paths are *absolute* which is great (and what I needed) when building an external project, but generating distributable binaries with absolute paths will not work out well...; I realise this PR is not mergeable until this issue is resolved, but don't know how to change that.; With relative paths, finding the install directory from external projects is impossible, and with absolute paths, redistribution of binaries is not feasible. . Looking fwd to your inputs!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/651
https://github.com/sofa-framework/sofa/issues/652:31,Availability,error,error,31,"Hello everyone,. I detected an error with the .vtk file version. The version 4.2 of vtk has some lines which are not managed by Sofa. I generate the .vtk file with Paraview 5.5.0 on MacOS. These lines are metadata written between the first and the second parts of the file : ; <img width=""643"" alt=""capture d ecran 2018-05-09 a 10 16 40"" src=""https://user-images.githubusercontent.com/22655914/39803747-4590d964-5372-11e8-80e6-d81beabba2d4.png"">. The errors generated when you run a scene with such a .vtk file are : ; <img width=""886"" alt=""capture d ecran 2018-05-09 a 10 15 33"" src=""https://user-images.githubusercontent.com/22655914/39803770-5a6375d6-5372-11e8-94cd-cc39767ad188.png"">; The scene runs even with the errors and the .vtk file seems to be loaded correctly. I think there is something to change in MeshVTKLoader component in order to not consider these data. Actually I just (by hand) erase the lines and all is good. SOFA version : 17.12; System version : MacOS 10.13.4; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652
https://github.com/sofa-framework/sofa/issues/652:451,Availability,error,errors,451,"Hello everyone,. I detected an error with the .vtk file version. The version 4.2 of vtk has some lines which are not managed by Sofa. I generate the .vtk file with Paraview 5.5.0 on MacOS. These lines are metadata written between the first and the second parts of the file : ; <img width=""643"" alt=""capture d ecran 2018-05-09 a 10 16 40"" src=""https://user-images.githubusercontent.com/22655914/39803747-4590d964-5372-11e8-80e6-d81beabba2d4.png"">. The errors generated when you run a scene with such a .vtk file are : ; <img width=""886"" alt=""capture d ecran 2018-05-09 a 10 15 33"" src=""https://user-images.githubusercontent.com/22655914/39803770-5a6375d6-5372-11e8-94cd-cc39767ad188.png"">; The scene runs even with the errors and the .vtk file seems to be loaded correctly. I think there is something to change in MeshVTKLoader component in order to not consider these data. Actually I just (by hand) erase the lines and all is good. SOFA version : 17.12; System version : MacOS 10.13.4; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652
https://github.com/sofa-framework/sofa/issues/652:718,Availability,error,errors,718,"Hello everyone,. I detected an error with the .vtk file version. The version 4.2 of vtk has some lines which are not managed by Sofa. I generate the .vtk file with Paraview 5.5.0 on MacOS. These lines are metadata written between the first and the second parts of the file : ; <img width=""643"" alt=""capture d ecran 2018-05-09 a 10 16 40"" src=""https://user-images.githubusercontent.com/22655914/39803747-4590d964-5372-11e8-80e6-d81beabba2d4.png"">. The errors generated when you run a scene with such a .vtk file are : ; <img width=""886"" alt=""capture d ecran 2018-05-09 a 10 15 33"" src=""https://user-images.githubusercontent.com/22655914/39803770-5a6375d6-5372-11e8-94cd-cc39767ad188.png"">; The scene runs even with the errors and the .vtk file seems to be loaded correctly. I think there is something to change in MeshVTKLoader component in order to not consider these data. Actually I just (by hand) erase the lines and all is good. SOFA version : 17.12; System version : MacOS 10.13.4; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652
https://github.com/sofa-framework/sofa/issues/652:755,Performance,load,loaded,755,"Hello everyone,. I detected an error with the .vtk file version. The version 4.2 of vtk has some lines which are not managed by Sofa. I generate the .vtk file with Paraview 5.5.0 on MacOS. These lines are metadata written between the first and the second parts of the file : ; <img width=""643"" alt=""capture d ecran 2018-05-09 a 10 16 40"" src=""https://user-images.githubusercontent.com/22655914/39803747-4590d964-5372-11e8-80e6-d81beabba2d4.png"">. The errors generated when you run a scene with such a .vtk file are : ; <img width=""886"" alt=""capture d ecran 2018-05-09 a 10 15 33"" src=""https://user-images.githubusercontent.com/22655914/39803770-5a6375d6-5372-11e8-94cd-cc39767ad188.png"">; The scene runs even with the errors and the .vtk file seems to be loaded correctly. I think there is something to change in MeshVTKLoader component in order to not consider these data. Actually I just (by hand) erase the lines and all is good. SOFA version : 17.12; System version : MacOS 10.13.4; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652
https://github.com/sofa-framework/sofa/issues/652:19,Safety,detect,detected,19,"Hello everyone,. I detected an error with the .vtk file version. The version 4.2 of vtk has some lines which are not managed by Sofa. I generate the .vtk file with Paraview 5.5.0 on MacOS. These lines are metadata written between the first and the second parts of the file : ; <img width=""643"" alt=""capture d ecran 2018-05-09 a 10 16 40"" src=""https://user-images.githubusercontent.com/22655914/39803747-4590d964-5372-11e8-80e6-d81beabba2d4.png"">. The errors generated when you run a scene with such a .vtk file are : ; <img width=""886"" alt=""capture d ecran 2018-05-09 a 10 15 33"" src=""https://user-images.githubusercontent.com/22655914/39803770-5a6375d6-5372-11e8-94cd-cc39767ad188.png"">; The scene runs even with the errors and the .vtk file seems to be loaded correctly. I think there is something to change in MeshVTKLoader component in order to not consider these data. Actually I just (by hand) erase the lines and all is good. SOFA version : 17.12; System version : MacOS 10.13.4; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652
https://github.com/sofa-framework/sofa/pull/655:521,Availability,failure,failures,521,"The solver crash if the system is rank deficient because it read memory at indices like xxx[0]. . This PR:; - adds a conditional test prevent that. ; - adds SOFA_WITH_FLOAT, SOFA_WITH_DOUBLE to make it consistant with the rest of sofa.; - removes commented code. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/655
https://github.com/sofa-framework/sofa/pull/655:571,Availability,failure,failures,571,"The solver crash if the system is rank deficient because it read memory at indices like xxx[0]. . This PR:; - adds a conditional test prevent that. ; - adds SOFA_WITH_FLOAT, SOFA_WITH_DOUBLE to make it consistant with the rest of sofa.; - removes commented code. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/655
https://github.com/sofa-framework/sofa/pull/655:364,Integrability,message,message,364,"The solver crash if the system is rank deficient because it read memory at indices like xxx[0]. . This PR:; - adds a conditional test prevent that. ; - adds SOFA_WITH_FLOAT, SOFA_WITH_DOUBLE to make it consistant with the rest of sofa.; - removes commented code. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/655
https://github.com/sofa-framework/sofa/pull/655:129,Testability,test,test,129,"The solver crash if the system is rank deficient because it read memory at indices like xxx[0]. . This PR:; - adds a conditional test prevent that. ; - adds SOFA_WITH_FLOAT, SOFA_WITH_DOUBLE to make it consistant with the rest of sofa.; - removes commented code. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/655
https://github.com/sofa-framework/sofa/pull/655:516,Testability,test,test,516,"The solver crash if the system is rank deficient because it read memory at indices like xxx[0]. . This PR:; - adds a conditional test prevent that. ; - adds SOFA_WITH_FLOAT, SOFA_WITH_DOUBLE to make it consistant with the rest of sofa.; - removes commented code. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/655
https://github.com/sofa-framework/sofa/pull/655:566,Testability,test,test,566,"The solver crash if the system is rank deficient because it read memory at indices like xxx[0]. . This PR:; - adds a conditional test prevent that. ; - adds SOFA_WITH_FLOAT, SOFA_WITH_DOUBLE to make it consistant with the rest of sofa.; - removes commented code. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/655
https://github.com/sofa-framework/sofa/pull/656:1044,Availability,failure,failures,1044,This PR contains a set of small changes on SofaPython that we are using in our projects. . CHANGELOG:; - [SofaHelper] add StringUtils::getStringCopy (because it was duplicated in several place of the plugin); - [SofaPython] add systematically sys.argv in PythonEnvironment; - [SofaPython] add a very general getattr function in Binding_Node (to write node1.node2.node3.obj.data); - [SofaPython] add a getTarget in BaseObject (to return the plugins that contains a component); - [SofaPython] add a getComponentsFromTarget in the Sofa module ; - [SofaPython] add some minor function in Binding_Data; - [SofaPython] add docstring support for the Sofa module; - [SofaPython] change Binding_BaseContext.getObject to return None instead of a broken exception . There is tests for all features. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656
https://github.com/sofa-framework/sofa/pull/656:1094,Availability,failure,failures,1094,This PR contains a set of small changes on SofaPython that we are using in our projects. . CHANGELOG:; - [SofaHelper] add StringUtils::getStringCopy (because it was duplicated in several place of the plugin); - [SofaPython] add systematically sys.argv in PythonEnvironment; - [SofaPython] add a very general getattr function in Binding_Node (to write node1.node2.node3.obj.data); - [SofaPython] add a getTarget in BaseObject (to return the plugins that contains a component); - [SofaPython] add a getComponentsFromTarget in the Sofa module ; - [SofaPython] add some minor function in Binding_Data; - [SofaPython] add docstring support for the Sofa module; - [SofaPython] change Binding_BaseContext.getObject to return None instead of a broken exception . There is tests for all features. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656
https://github.com/sofa-framework/sofa/pull/656:887,Integrability,message,message,887,This PR contains a set of small changes on SofaPython that we are using in our projects. . CHANGELOG:; - [SofaHelper] add StringUtils::getStringCopy (because it was duplicated in several place of the plugin); - [SofaPython] add systematically sys.argv in PythonEnvironment; - [SofaPython] add a very general getattr function in Binding_Node (to write node1.node2.node3.obj.data); - [SofaPython] add a getTarget in BaseObject (to return the plugins that contains a component); - [SofaPython] add a getComponentsFromTarget in the Sofa module ; - [SofaPython] add some minor function in Binding_Data; - [SofaPython] add docstring support for the Sofa module; - [SofaPython] change Binding_BaseContext.getObject to return None instead of a broken exception . There is tests for all features. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656
https://github.com/sofa-framework/sofa/pull/656:200,Modifiability,plugin,plugin,200,This PR contains a set of small changes on SofaPython that we are using in our projects. . CHANGELOG:; - [SofaHelper] add StringUtils::getStringCopy (because it was duplicated in several place of the plugin); - [SofaPython] add systematically sys.argv in PythonEnvironment; - [SofaPython] add a very general getattr function in Binding_Node (to write node1.node2.node3.obj.data); - [SofaPython] add a getTarget in BaseObject (to return the plugins that contains a component); - [SofaPython] add a getComponentsFromTarget in the Sofa module ; - [SofaPython] add some minor function in Binding_Data; - [SofaPython] add docstring support for the Sofa module; - [SofaPython] change Binding_BaseContext.getObject to return None instead of a broken exception . There is tests for all features. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656
https://github.com/sofa-framework/sofa/pull/656:440,Modifiability,plugin,plugins,440,This PR contains a set of small changes on SofaPython that we are using in our projects. . CHANGELOG:; - [SofaHelper] add StringUtils::getStringCopy (because it was duplicated in several place of the plugin); - [SofaPython] add systematically sys.argv in PythonEnvironment; - [SofaPython] add a very general getattr function in Binding_Node (to write node1.node2.node3.obj.data); - [SofaPython] add a getTarget in BaseObject (to return the plugins that contains a component); - [SofaPython] add a getComponentsFromTarget in the Sofa module ; - [SofaPython] add some minor function in Binding_Data; - [SofaPython] add docstring support for the Sofa module; - [SofaPython] change Binding_BaseContext.getObject to return None instead of a broken exception . There is tests for all features. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656
https://github.com/sofa-framework/sofa/pull/656:764,Testability,test,tests,764,This PR contains a set of small changes on SofaPython that we are using in our projects. . CHANGELOG:; - [SofaHelper] add StringUtils::getStringCopy (because it was duplicated in several place of the plugin); - [SofaPython] add systematically sys.argv in PythonEnvironment; - [SofaPython] add a very general getattr function in Binding_Node (to write node1.node2.node3.obj.data); - [SofaPython] add a getTarget in BaseObject (to return the plugins that contains a component); - [SofaPython] add a getComponentsFromTarget in the Sofa module ; - [SofaPython] add some minor function in Binding_Data; - [SofaPython] add docstring support for the Sofa module; - [SofaPython] change Binding_BaseContext.getObject to return None instead of a broken exception . There is tests for all features. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656
https://github.com/sofa-framework/sofa/pull/656:1039,Testability,test,test,1039,This PR contains a set of small changes on SofaPython that we are using in our projects. . CHANGELOG:; - [SofaHelper] add StringUtils::getStringCopy (because it was duplicated in several place of the plugin); - [SofaPython] add systematically sys.argv in PythonEnvironment; - [SofaPython] add a very general getattr function in Binding_Node (to write node1.node2.node3.obj.data); - [SofaPython] add a getTarget in BaseObject (to return the plugins that contains a component); - [SofaPython] add a getComponentsFromTarget in the Sofa module ; - [SofaPython] add some minor function in Binding_Data; - [SofaPython] add docstring support for the Sofa module; - [SofaPython] change Binding_BaseContext.getObject to return None instead of a broken exception . There is tests for all features. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656
https://github.com/sofa-framework/sofa/pull/656:1089,Testability,test,test,1089,This PR contains a set of small changes on SofaPython that we are using in our projects. . CHANGELOG:; - [SofaHelper] add StringUtils::getStringCopy (because it was duplicated in several place of the plugin); - [SofaPython] add systematically sys.argv in PythonEnvironment; - [SofaPython] add a very general getattr function in Binding_Node (to write node1.node2.node3.obj.data); - [SofaPython] add a getTarget in BaseObject (to return the plugins that contains a component); - [SofaPython] add a getComponentsFromTarget in the Sofa module ; - [SofaPython] add some minor function in Binding_Data; - [SofaPython] add docstring support for the Sofa module; - [SofaPython] change Binding_BaseContext.getObject to return None instead of a broken exception . There is tests for all features. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656
https://github.com/sofa-framework/sofa/pull/657:780,Availability,failure,failures,780,"This PR contains small changes to runSofa. . One is to save & restore the scenegraph state in the live-coding mode. This fix avoid to constantly have to expand/collapse things to restore the view in a manageable state when we reload. . The second change is to fix a problem. When Data fields that belong in the ""Infos"" results in having to ""Infos"" panel in the object inspector. So this PR add the Data fields which are in the Info groups to the existing ""Infos"" panel instead of creating a second one with the same name. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/657
https://github.com/sofa-framework/sofa/pull/657:830,Availability,failure,failures,830,"This PR contains small changes to runSofa. . One is to save & restore the scenegraph state in the live-coding mode. This fix avoid to constantly have to expand/collapse things to restore the view in a manageable state when we reload. . The second change is to fix a problem. When Data fields that belong in the ""Infos"" results in having to ""Infos"" panel in the object inspector. So this PR add the Data fields which are in the Info groups to the existing ""Infos"" panel instead of creating a second one with the same name. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/657
https://github.com/sofa-framework/sofa/pull/657:623,Integrability,message,message,623,"This PR contains small changes to runSofa. . One is to save & restore the scenegraph state in the live-coding mode. This fix avoid to constantly have to expand/collapse things to restore the view in a manageable state when we reload. . The second change is to fix a problem. When Data fields that belong in the ""Infos"" results in having to ""Infos"" panel in the object inspector. So this PR add the Data fields which are in the Info groups to the existing ""Infos"" panel instead of creating a second one with the same name. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/657
https://github.com/sofa-framework/sofa/pull/657:125,Safety,avoid,avoid,125,"This PR contains small changes to runSofa. . One is to save & restore the scenegraph state in the live-coding mode. This fix avoid to constantly have to expand/collapse things to restore the view in a manageable state when we reload. . The second change is to fix a problem. When Data fields that belong in the ""Infos"" results in having to ""Infos"" panel in the object inspector. So this PR add the Data fields which are in the Info groups to the existing ""Infos"" panel instead of creating a second one with the same name. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/657
https://github.com/sofa-framework/sofa/pull/657:775,Testability,test,test,775,"This PR contains small changes to runSofa. . One is to save & restore the scenegraph state in the live-coding mode. This fix avoid to constantly have to expand/collapse things to restore the view in a manageable state when we reload. . The second change is to fix a problem. When Data fields that belong in the ""Infos"" results in having to ""Infos"" panel in the object inspector. So this PR add the Data fields which are in the Info groups to the existing ""Infos"" panel instead of creating a second one with the same name. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/657
https://github.com/sofa-framework/sofa/pull/657:825,Testability,test,test,825,"This PR contains small changes to runSofa. . One is to save & restore the scenegraph state in the live-coding mode. This fix avoid to constantly have to expand/collapse things to restore the view in a manageable state when we reload. . The second change is to fix a problem. When Data fields that belong in the ""Infos"" results in having to ""Infos"" panel in the object inspector. So this PR add the Data fields which are in the Info groups to the existing ""Infos"" panel instead of creating a second one with the same name. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/657
https://github.com/sofa-framework/sofa/pull/658:59,Availability,toler,tolerance,59,CG was emitting inappropriate warnings regarding threshold-tolerance. This PR fixes it by checking if this is the first time step and first iteration.; This PR also checks the cases with division by zero. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/658
https://github.com/sofa-framework/sofa/pull/658:461,Availability,failure,failures,461,CG was emitting inappropriate warnings regarding threshold-tolerance. This PR fixes it by checking if this is the first time step and first iteration.; This PR also checks the cases with division by zero. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/658
https://github.com/sofa-framework/sofa/pull/658:511,Availability,failure,failures,511,CG was emitting inappropriate warnings regarding threshold-tolerance. This PR fixes it by checking if this is the first time step and first iteration.; This PR also checks the cases with division by zero. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/658
https://github.com/sofa-framework/sofa/pull/658:304,Integrability,message,message,304,CG was emitting inappropriate warnings regarding threshold-tolerance. This PR fixes it by checking if this is the first time step and first iteration.; This PR also checks the cases with division by zero. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/658
https://github.com/sofa-framework/sofa/pull/658:456,Testability,test,test,456,CG was emitting inappropriate warnings regarding threshold-tolerance. This PR fixes it by checking if this is the first time step and first iteration.; This PR also checks the cases with division by zero. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/658
https://github.com/sofa-framework/sofa/pull/658:506,Testability,test,test,506,CG was emitting inappropriate warnings regarding threshold-tolerance. This PR fixes it by checking if this is the first time step and first iteration.; This PR also checks the cases with division by zero. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/658
https://github.com/sofa-framework/sofa/pull/659:422,Availability,failure,failures,422,Quick fix as glut has been removed from Sofa.; remove the glutInit which has nothing to be there. Moreover I don't think someone is using this project with useGui ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/659
https://github.com/sofa-framework/sofa/pull/659:472,Availability,failure,failures,472,Quick fix as glut has been removed from Sofa.; remove the glutInit which has nothing to be there. Moreover I don't think someone is using this project with useGui ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/659
https://github.com/sofa-framework/sofa/pull/659:265,Integrability,message,message,265,Quick fix as glut has been removed from Sofa.; remove the glutInit which has nothing to be there. Moreover I don't think someone is using this project with useGui ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/659
https://github.com/sofa-framework/sofa/pull/659:417,Testability,test,test,417,Quick fix as glut has been removed from Sofa.; remove the glutInit which has nothing to be there. Moreover I don't think someone is using this project with useGui ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/659
https://github.com/sofa-framework/sofa/pull/659:467,Testability,test,test,467,Quick fix as glut has been removed from Sofa.; remove the glutInit which has nothing to be there. Moreover I don't think someone is using this project with useGui ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/659
https://github.com/sofa-framework/sofa/pull/660:256,Availability,failure,failures,256,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/660
https://github.com/sofa-framework/sofa/pull/660:306,Availability,failure,failures,306,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/660
https://github.com/sofa-framework/sofa/pull/660:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/660
https://github.com/sofa-framework/sofa/pull/660:251,Testability,test,test,251,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/660
https://github.com/sofa-framework/sofa/pull/660:301,Testability,test,test,301,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/660
https://github.com/sofa-framework/sofa/pull/661:1614,Availability,failure,failures,1614,"Start work on merging the duplicated code of the mesh loader components versus helper::io::mesh loaders. See issue #42 . Basically, all code to load a mesh file directly in the topology without using a meshLoader component. For example: `<GridTopology fileMesh=""my_mesh.msh"" /> or <OglModel filename=""my_mesh.obj"" />`; go through the class: helper::io::MeshTopologyLoader which had directly some code to load several formats or was using a helper::io::meshXX to read XX file format. All this code is duplicated with the meshLoader components and with some differences (otherwise it would not be fun...). For the moment I only updated the MeshTopologyLoader and the helper::io::mesh classes to check the tests on all plateforms. ; Changes are:; - obj -> nothing (use MeshObj class); - trian -> nothing (use MeshTrian class); - vtk -> remove code from 2009 and use MeshVTK class from 2015. Still different from meshVTKLoader.; - stl -> nothing (use MeshSTL class); - gmsh -> create a MeshGmsh class and move the code in it.; - xsp -> create MeshXsp class and move the code in it.; - cgal -> remove the methods. Assume it is deprecated.; - unknown format -> the ""else"" method when format not found return false now and is set as deprecated. - Update the helper::io::mesh class to have topology buffers in order to be similar as baseMeshLoader for future merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/661
https://github.com/sofa-framework/sofa/pull/661:1664,Availability,failure,failures,1664,"Start work on merging the duplicated code of the mesh loader components versus helper::io::mesh loaders. See issue #42 . Basically, all code to load a mesh file directly in the topology without using a meshLoader component. For example: `<GridTopology fileMesh=""my_mesh.msh"" /> or <OglModel filename=""my_mesh.obj"" />`; go through the class: helper::io::MeshTopologyLoader which had directly some code to load several formats or was using a helper::io::meshXX to read XX file format. All this code is duplicated with the meshLoader components and with some differences (otherwise it would not be fun...). For the moment I only updated the MeshTopologyLoader and the helper::io::mesh classes to check the tests on all plateforms. ; Changes are:; - obj -> nothing (use MeshObj class); - trian -> nothing (use MeshTrian class); - vtk -> remove code from 2009 and use MeshVTK class from 2015. Still different from meshVTKLoader.; - stl -> nothing (use MeshSTL class); - gmsh -> create a MeshGmsh class and move the code in it.; - xsp -> create MeshXsp class and move the code in it.; - cgal -> remove the methods. Assume it is deprecated.; - unknown format -> the ""else"" method when format not found return false now and is set as deprecated. - Update the helper::io::mesh class to have topology buffers in order to be similar as baseMeshLoader for future merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/661
https://github.com/sofa-framework/sofa/pull/661:626,Deployability,update,updated,626,"Start work on merging the duplicated code of the mesh loader components versus helper::io::mesh loaders. See issue #42 . Basically, all code to load a mesh file directly in the topology without using a meshLoader component. For example: `<GridTopology fileMesh=""my_mesh.msh"" /> or <OglModel filename=""my_mesh.obj"" />`; go through the class: helper::io::MeshTopologyLoader which had directly some code to load several formats or was using a helper::io::meshXX to read XX file format. All this code is duplicated with the meshLoader components and with some differences (otherwise it would not be fun...). For the moment I only updated the MeshTopologyLoader and the helper::io::mesh classes to check the tests on all plateforms. ; Changes are:; - obj -> nothing (use MeshObj class); - trian -> nothing (use MeshTrian class); - vtk -> remove code from 2009 and use MeshVTK class from 2015. Still different from meshVTKLoader.; - stl -> nothing (use MeshSTL class); - gmsh -> create a MeshGmsh class and move the code in it.; - xsp -> create MeshXsp class and move the code in it.; - cgal -> remove the methods. Assume it is deprecated.; - unknown format -> the ""else"" method when format not found return false now and is set as deprecated. - Update the helper::io::mesh class to have topology buffers in order to be similar as baseMeshLoader for future merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/661
https://github.com/sofa-framework/sofa/pull/661:1240,Deployability,Update,Update,1240,"Start work on merging the duplicated code of the mesh loader components versus helper::io::mesh loaders. See issue #42 . Basically, all code to load a mesh file directly in the topology without using a meshLoader component. For example: `<GridTopology fileMesh=""my_mesh.msh"" /> or <OglModel filename=""my_mesh.obj"" />`; go through the class: helper::io::MeshTopologyLoader which had directly some code to load several formats or was using a helper::io::meshXX to read XX file format. All this code is duplicated with the meshLoader components and with some differences (otherwise it would not be fun...). For the moment I only updated the MeshTopologyLoader and the helper::io::mesh classes to check the tests on all plateforms. ; Changes are:; - obj -> nothing (use MeshObj class); - trian -> nothing (use MeshTrian class); - vtk -> remove code from 2009 and use MeshVTK class from 2015. Still different from meshVTKLoader.; - stl -> nothing (use MeshSTL class); - gmsh -> create a MeshGmsh class and move the code in it.; - xsp -> create MeshXsp class and move the code in it.; - cgal -> remove the methods. Assume it is deprecated.; - unknown format -> the ""else"" method when format not found return false now and is set as deprecated. - Update the helper::io::mesh class to have topology buffers in order to be similar as baseMeshLoader for future merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/661
https://github.com/sofa-framework/sofa/pull/661:1457,Integrability,message,message,1457,"Start work on merging the duplicated code of the mesh loader components versus helper::io::mesh loaders. See issue #42 . Basically, all code to load a mesh file directly in the topology without using a meshLoader component. For example: `<GridTopology fileMesh=""my_mesh.msh"" /> or <OglModel filename=""my_mesh.obj"" />`; go through the class: helper::io::MeshTopologyLoader which had directly some code to load several formats or was using a helper::io::meshXX to read XX file format. All this code is duplicated with the meshLoader components and with some differences (otherwise it would not be fun...). For the moment I only updated the MeshTopologyLoader and the helper::io::mesh classes to check the tests on all plateforms. ; Changes are:; - obj -> nothing (use MeshObj class); - trian -> nothing (use MeshTrian class); - vtk -> remove code from 2009 and use MeshVTK class from 2015. Still different from meshVTKLoader.; - stl -> nothing (use MeshSTL class); - gmsh -> create a MeshGmsh class and move the code in it.; - xsp -> create MeshXsp class and move the code in it.; - cgal -> remove the methods. Assume it is deprecated.; - unknown format -> the ""else"" method when format not found return false now and is set as deprecated. - Update the helper::io::mesh class to have topology buffers in order to be similar as baseMeshLoader for future merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/661
https://github.com/sofa-framework/sofa/pull/661:54,Performance,load,loader,54,"Start work on merging the duplicated code of the mesh loader components versus helper::io::mesh loaders. See issue #42 . Basically, all code to load a mesh file directly in the topology without using a meshLoader component. For example: `<GridTopology fileMesh=""my_mesh.msh"" /> or <OglModel filename=""my_mesh.obj"" />`; go through the class: helper::io::MeshTopologyLoader which had directly some code to load several formats or was using a helper::io::meshXX to read XX file format. All this code is duplicated with the meshLoader components and with some differences (otherwise it would not be fun...). For the moment I only updated the MeshTopologyLoader and the helper::io::mesh classes to check the tests on all plateforms. ; Changes are:; - obj -> nothing (use MeshObj class); - trian -> nothing (use MeshTrian class); - vtk -> remove code from 2009 and use MeshVTK class from 2015. Still different from meshVTKLoader.; - stl -> nothing (use MeshSTL class); - gmsh -> create a MeshGmsh class and move the code in it.; - xsp -> create MeshXsp class and move the code in it.; - cgal -> remove the methods. Assume it is deprecated.; - unknown format -> the ""else"" method when format not found return false now and is set as deprecated. - Update the helper::io::mesh class to have topology buffers in order to be similar as baseMeshLoader for future merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/661
https://github.com/sofa-framework/sofa/pull/661:96,Performance,load,loaders,96,"Start work on merging the duplicated code of the mesh loader components versus helper::io::mesh loaders. See issue #42 . Basically, all code to load a mesh file directly in the topology without using a meshLoader component. For example: `<GridTopology fileMesh=""my_mesh.msh"" /> or <OglModel filename=""my_mesh.obj"" />`; go through the class: helper::io::MeshTopologyLoader which had directly some code to load several formats or was using a helper::io::meshXX to read XX file format. All this code is duplicated with the meshLoader components and with some differences (otherwise it would not be fun...). For the moment I only updated the MeshTopologyLoader and the helper::io::mesh classes to check the tests on all plateforms. ; Changes are:; - obj -> nothing (use MeshObj class); - trian -> nothing (use MeshTrian class); - vtk -> remove code from 2009 and use MeshVTK class from 2015. Still different from meshVTKLoader.; - stl -> nothing (use MeshSTL class); - gmsh -> create a MeshGmsh class and move the code in it.; - xsp -> create MeshXsp class and move the code in it.; - cgal -> remove the methods. Assume it is deprecated.; - unknown format -> the ""else"" method when format not found return false now and is set as deprecated. - Update the helper::io::mesh class to have topology buffers in order to be similar as baseMeshLoader for future merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/661
https://github.com/sofa-framework/sofa/pull/661:144,Performance,load,load,144,"Start work on merging the duplicated code of the mesh loader components versus helper::io::mesh loaders. See issue #42 . Basically, all code to load a mesh file directly in the topology without using a meshLoader component. For example: `<GridTopology fileMesh=""my_mesh.msh"" /> or <OglModel filename=""my_mesh.obj"" />`; go through the class: helper::io::MeshTopologyLoader which had directly some code to load several formats or was using a helper::io::meshXX to read XX file format. All this code is duplicated with the meshLoader components and with some differences (otherwise it would not be fun...). For the moment I only updated the MeshTopologyLoader and the helper::io::mesh classes to check the tests on all plateforms. ; Changes are:; - obj -> nothing (use MeshObj class); - trian -> nothing (use MeshTrian class); - vtk -> remove code from 2009 and use MeshVTK class from 2015. Still different from meshVTKLoader.; - stl -> nothing (use MeshSTL class); - gmsh -> create a MeshGmsh class and move the code in it.; - xsp -> create MeshXsp class and move the code in it.; - cgal -> remove the methods. Assume it is deprecated.; - unknown format -> the ""else"" method when format not found return false now and is set as deprecated. - Update the helper::io::mesh class to have topology buffers in order to be similar as baseMeshLoader for future merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/661
https://github.com/sofa-framework/sofa/pull/661:404,Performance,load,load,404,"Start work on merging the duplicated code of the mesh loader components versus helper::io::mesh loaders. See issue #42 . Basically, all code to load a mesh file directly in the topology without using a meshLoader component. For example: `<GridTopology fileMesh=""my_mesh.msh"" /> or <OglModel filename=""my_mesh.obj"" />`; go through the class: helper::io::MeshTopologyLoader which had directly some code to load several formats or was using a helper::io::meshXX to read XX file format. All this code is duplicated with the meshLoader components and with some differences (otherwise it would not be fun...). For the moment I only updated the MeshTopologyLoader and the helper::io::mesh classes to check the tests on all plateforms. ; Changes are:; - obj -> nothing (use MeshObj class); - trian -> nothing (use MeshTrian class); - vtk -> remove code from 2009 and use MeshVTK class from 2015. Still different from meshVTKLoader.; - stl -> nothing (use MeshSTL class); - gmsh -> create a MeshGmsh class and move the code in it.; - xsp -> create MeshXsp class and move the code in it.; - cgal -> remove the methods. Assume it is deprecated.; - unknown format -> the ""else"" method when format not found return false now and is set as deprecated. - Update the helper::io::mesh class to have topology buffers in order to be similar as baseMeshLoader for future merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/661
https://github.com/sofa-framework/sofa/pull/661:703,Testability,test,tests,703,"Start work on merging the duplicated code of the mesh loader components versus helper::io::mesh loaders. See issue #42 . Basically, all code to load a mesh file directly in the topology without using a meshLoader component. For example: `<GridTopology fileMesh=""my_mesh.msh"" /> or <OglModel filename=""my_mesh.obj"" />`; go through the class: helper::io::MeshTopologyLoader which had directly some code to load several formats or was using a helper::io::meshXX to read XX file format. All this code is duplicated with the meshLoader components and with some differences (otherwise it would not be fun...). For the moment I only updated the MeshTopologyLoader and the helper::io::mesh classes to check the tests on all plateforms. ; Changes are:; - obj -> nothing (use MeshObj class); - trian -> nothing (use MeshTrian class); - vtk -> remove code from 2009 and use MeshVTK class from 2015. Still different from meshVTKLoader.; - stl -> nothing (use MeshSTL class); - gmsh -> create a MeshGmsh class and move the code in it.; - xsp -> create MeshXsp class and move the code in it.; - cgal -> remove the methods. Assume it is deprecated.; - unknown format -> the ""else"" method when format not found return false now and is set as deprecated. - Update the helper::io::mesh class to have topology buffers in order to be similar as baseMeshLoader for future merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/661
https://github.com/sofa-framework/sofa/pull/661:1609,Testability,test,test,1609,"Start work on merging the duplicated code of the mesh loader components versus helper::io::mesh loaders. See issue #42 . Basically, all code to load a mesh file directly in the topology without using a meshLoader component. For example: `<GridTopology fileMesh=""my_mesh.msh"" /> or <OglModel filename=""my_mesh.obj"" />`; go through the class: helper::io::MeshTopologyLoader which had directly some code to load several formats or was using a helper::io::meshXX to read XX file format. All this code is duplicated with the meshLoader components and with some differences (otherwise it would not be fun...). For the moment I only updated the MeshTopologyLoader and the helper::io::mesh classes to check the tests on all plateforms. ; Changes are:; - obj -> nothing (use MeshObj class); - trian -> nothing (use MeshTrian class); - vtk -> remove code from 2009 and use MeshVTK class from 2015. Still different from meshVTKLoader.; - stl -> nothing (use MeshSTL class); - gmsh -> create a MeshGmsh class and move the code in it.; - xsp -> create MeshXsp class and move the code in it.; - cgal -> remove the methods. Assume it is deprecated.; - unknown format -> the ""else"" method when format not found return false now and is set as deprecated. - Update the helper::io::mesh class to have topology buffers in order to be similar as baseMeshLoader for future merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/661
https://github.com/sofa-framework/sofa/pull/661:1659,Testability,test,test,1659,"Start work on merging the duplicated code of the mesh loader components versus helper::io::mesh loaders. See issue #42 . Basically, all code to load a mesh file directly in the topology without using a meshLoader component. For example: `<GridTopology fileMesh=""my_mesh.msh"" /> or <OglModel filename=""my_mesh.obj"" />`; go through the class: helper::io::MeshTopologyLoader which had directly some code to load several formats or was using a helper::io::meshXX to read XX file format. All this code is duplicated with the meshLoader components and with some differences (otherwise it would not be fun...). For the moment I only updated the MeshTopologyLoader and the helper::io::mesh classes to check the tests on all plateforms. ; Changes are:; - obj -> nothing (use MeshObj class); - trian -> nothing (use MeshTrian class); - vtk -> remove code from 2009 and use MeshVTK class from 2015. Still different from meshVTKLoader.; - stl -> nothing (use MeshSTL class); - gmsh -> create a MeshGmsh class and move the code in it.; - xsp -> create MeshXsp class and move the code in it.; - cgal -> remove the methods. Assume it is deprecated.; - unknown format -> the ""else"" method when format not found return false now and is set as deprecated. - Update the helper::io::mesh class to have topology buffers in order to be similar as baseMeshLoader for future merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/661
https://github.com/sofa-framework/sofa/pull/662:435,Availability,failure,failures,435,CMAKE_WARN_DEPRECATED sends warning when deprecated project is found.; This warning appears now for the Modeler and when the option; SOFA_WITH_DEPRECATED_COMPONENTS is activated. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/662
https://github.com/sofa-framework/sofa/pull/662:485,Availability,failure,failures,485,CMAKE_WARN_DEPRECATED sends warning when deprecated project is found.; This warning appears now for the Modeler and when the option; SOFA_WITH_DEPRECATED_COMPONENTS is activated. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/662
https://github.com/sofa-framework/sofa/pull/662:278,Integrability,message,message,278,CMAKE_WARN_DEPRECATED sends warning when deprecated project is found.; This warning appears now for the Modeler and when the option; SOFA_WITH_DEPRECATED_COMPONENTS is activated. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/662
https://github.com/sofa-framework/sofa/pull/662:430,Testability,test,test,430,CMAKE_WARN_DEPRECATED sends warning when deprecated project is found.; This warning appears now for the Modeler and when the option; SOFA_WITH_DEPRECATED_COMPONENTS is activated. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/662
https://github.com/sofa-framework/sofa/pull/662:480,Testability,test,test,480,CMAKE_WARN_DEPRECATED sends warning when deprecated project is found.; This warning appears now for the Modeler and when the option; SOFA_WITH_DEPRECATED_COMPONENTS is activated. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/662
https://github.com/sofa-framework/sofa/pull/663:879,Availability,failure,failures,879,"As said in the title this PR puts SofaSparseSolver and SofaPreconditioner in plugins. . There was #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE in config.h instead of using ; find_package to detect and activate conditional building depending on dependencies. I replaced this mechanisme by using find_package(Metis) which I found more clear. . NB: the PR is in wip as I want to check it is going in the same direction as SofaNG ; NB2: it may also be a good idea to add some unittest as SparseLDLSolver seems to be used (So @olivier-goury, @IPeterlik , @marques-bruno, @EulalieCoevoet if you have 1 hour to give feel free ;)); ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663
https://github.com/sofa-framework/sofa/pull/663:929,Availability,failure,failures,929,"As said in the title this PR puts SofaSparseSolver and SofaPreconditioner in plugins. . There was #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE in config.h instead of using ; find_package to detect and activate conditional building depending on dependencies. I replaced this mechanisme by using find_package(Metis) which I found more clear. . NB: the PR is in wip as I want to check it is going in the same direction as SofaNG ; NB2: it may also be a good idea to add some unittest as SparseLDLSolver seems to be used (So @olivier-goury, @IPeterlik , @marques-bruno, @EulalieCoevoet if you have 1 hour to give feel free ;)); ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663
https://github.com/sofa-framework/sofa/pull/663:228,Integrability,depend,depending,228,"As said in the title this PR puts SofaSparseSolver and SofaPreconditioner in plugins. . There was #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE in config.h instead of using ; find_package to detect and activate conditional building depending on dependencies. I replaced this mechanisme by using find_package(Metis) which I found more clear. . NB: the PR is in wip as I want to check it is going in the same direction as SofaNG ; NB2: it may also be a good idea to add some unittest as SparseLDLSolver seems to be used (So @olivier-goury, @IPeterlik , @marques-bruno, @EulalieCoevoet if you have 1 hour to give feel free ;)); ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663
https://github.com/sofa-framework/sofa/pull/663:241,Integrability,depend,dependencies,241,"As said in the title this PR puts SofaSparseSolver and SofaPreconditioner in plugins. . There was #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE in config.h instead of using ; find_package to detect and activate conditional building depending on dependencies. I replaced this mechanisme by using find_package(Metis) which I found more clear. . NB: the PR is in wip as I want to check it is going in the same direction as SofaNG ; NB2: it may also be a good idea to add some unittest as SparseLDLSolver seems to be used (So @olivier-goury, @IPeterlik , @marques-bruno, @EulalieCoevoet if you have 1 hour to give feel free ;)); ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663
https://github.com/sofa-framework/sofa/pull/663:722,Integrability,message,message,722,"As said in the title this PR puts SofaSparseSolver and SofaPreconditioner in plugins. . There was #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE in config.h instead of using ; find_package to detect and activate conditional building depending on dependencies. I replaced this mechanisme by using find_package(Metis) which I found more clear. . NB: the PR is in wip as I want to check it is going in the same direction as SofaNG ; NB2: it may also be a good idea to add some unittest as SparseLDLSolver seems to be used (So @olivier-goury, @IPeterlik , @marques-bruno, @EulalieCoevoet if you have 1 hour to give feel free ;)); ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663
https://github.com/sofa-framework/sofa/pull/663:77,Modifiability,plugin,plugins,77,"As said in the title this PR puts SofaSparseSolver and SofaPreconditioner in plugins. . There was #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE in config.h instead of using ; find_package to detect and activate conditional building depending on dependencies. I replaced this mechanisme by using find_package(Metis) which I found more clear. . NB: the PR is in wip as I want to check it is going in the same direction as SofaNG ; NB2: it may also be a good idea to add some unittest as SparseLDLSolver seems to be used (So @olivier-goury, @IPeterlik , @marques-bruno, @EulalieCoevoet if you have 1 hour to give feel free ;)); ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663
https://github.com/sofa-framework/sofa/pull/663:143,Modifiability,config,config,143,"As said in the title this PR puts SofaSparseSolver and SofaPreconditioner in plugins. . There was #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE in config.h instead of using ; find_package to detect and activate conditional building depending on dependencies. I replaced this mechanisme by using find_package(Metis) which I found more clear. . NB: the PR is in wip as I want to check it is going in the same direction as SofaNG ; NB2: it may also be a good idea to add some unittest as SparseLDLSolver seems to be used (So @olivier-goury, @IPeterlik , @marques-bruno, @EulalieCoevoet if you have 1 hour to give feel free ;)); ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663
https://github.com/sofa-framework/sofa/pull/663:187,Safety,detect,detect,187,"As said in the title this PR puts SofaSparseSolver and SofaPreconditioner in plugins. . There was #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE in config.h instead of using ; find_package to detect and activate conditional building depending on dependencies. I replaced this mechanisme by using find_package(Metis) which I found more clear. . NB: the PR is in wip as I want to check it is going in the same direction as SofaNG ; NB2: it may also be a good idea to add some unittest as SparseLDLSolver seems to be used (So @olivier-goury, @IPeterlik , @marques-bruno, @EulalieCoevoet if you have 1 hour to give feel free ;)); ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663
https://github.com/sofa-framework/sofa/pull/663:874,Testability,test,test,874,"As said in the title this PR puts SofaSparseSolver and SofaPreconditioner in plugins. . There was #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE in config.h instead of using ; find_package to detect and activate conditional building depending on dependencies. I replaced this mechanisme by using find_package(Metis) which I found more clear. . NB: the PR is in wip as I want to check it is going in the same direction as SofaNG ; NB2: it may also be a good idea to add some unittest as SparseLDLSolver seems to be used (So @olivier-goury, @IPeterlik , @marques-bruno, @EulalieCoevoet if you have 1 hour to give feel free ;)); ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663
https://github.com/sofa-framework/sofa/pull/663:924,Testability,test,test,924,"As said in the title this PR puts SofaSparseSolver and SofaPreconditioner in plugins. . There was #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE in config.h instead of using ; find_package to detect and activate conditional building depending on dependencies. I replaced this mechanisme by using find_package(Metis) which I found more clear. . NB: the PR is in wip as I want to check it is going in the same direction as SofaNG ; NB2: it may also be a good idea to add some unittest as SparseLDLSolver seems to be used (So @olivier-goury, @IPeterlik , @marques-bruno, @EulalieCoevoet if you have 1 hour to give feel free ;)); ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663
https://github.com/sofa-framework/sofa/pull/663:330,Usability,clear,clear,330,"As said in the title this PR puts SofaSparseSolver and SofaPreconditioner in plugins. . There was #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE in config.h instead of using ; find_package to detect and activate conditional building depending on dependencies. I replaced this mechanisme by using find_package(Metis) which I found more clear. . NB: the PR is in wip as I want to check it is going in the same direction as SofaNG ; NB2: it may also be a good idea to add some unittest as SparseLDLSolver seems to be used (So @olivier-goury, @IPeterlik , @marques-bruno, @EulalieCoevoet if you have 1 hour to give feel free ;)); ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663
https://github.com/sofa-framework/sofa/pull/664:495,Availability,failure,failures,495,The CGAL version provided in Unbuntu 18.04 LTS is 4.11 and it seems this version is now expecting that the CGAL_MESH_3_VERBOSE needs to have a value. . Otherwise it fails to compile.; The fix is minor so please consider merging it ASAP. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/664
https://github.com/sofa-framework/sofa/pull/664:545,Availability,failure,failures,545,The CGAL version provided in Unbuntu 18.04 LTS is 4.11 and it seems this version is now expecting that the CGAL_MESH_3_VERBOSE needs to have a value. . Otherwise it fails to compile.; The fix is minor so please consider merging it ASAP. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/664
https://github.com/sofa-framework/sofa/pull/664:338,Integrability,message,message,338,The CGAL version provided in Unbuntu 18.04 LTS is 4.11 and it seems this version is now expecting that the CGAL_MESH_3_VERBOSE needs to have a value. . Otherwise it fails to compile.; The fix is minor so please consider merging it ASAP. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/664
https://github.com/sofa-framework/sofa/pull/664:490,Testability,test,test,490,The CGAL version provided in Unbuntu 18.04 LTS is 4.11 and it seems this version is now expecting that the CGAL_MESH_3_VERBOSE needs to have a value. . Otherwise it fails to compile.; The fix is minor so please consider merging it ASAP. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/664
https://github.com/sofa-framework/sofa/pull/664:540,Testability,test,test,540,The CGAL version provided in Unbuntu 18.04 LTS is 4.11 and it seems this version is now expecting that the CGAL_MESH_3_VERBOSE needs to have a value. . Otherwise it fails to compile.; The fix is minor so please consider merging it ASAP. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/664
https://github.com/sofa-framework/sofa/issues/665:37,Testability,test,test,37,"For now, VMs are used for CI and the test of the scenes using a GPU support can not be tested.; A dedicated machine (maybe using LinuxBuilder) should be set up for this purpose.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/665
https://github.com/sofa-framework/sofa/issues/665:87,Testability,test,tested,87,"For now, VMs are used for CI and the test of the scenes using a GPU support can not be tested.; A dedicated machine (maybe using LinuxBuilder) should be set up for this purpose.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/665
https://github.com/sofa-framework/sofa/pull/666:644,Availability,failure,failures,644,"Current Headless Recorder does not generate files correctly; for that reason, media player can have trouble detecting the format of the file.; Vlc 3.0.2 cannot read the file, except if you specify manually that the file use h264 in advanced options. This PR solves this shortcomming, and also aims to separate this procedure from the rest of the headless recorder to improve readability. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/666
https://github.com/sofa-framework/sofa/pull/666:694,Availability,failure,failures,694,"Current Headless Recorder does not generate files correctly; for that reason, media player can have trouble detecting the format of the file.; Vlc 3.0.2 cannot read the file, except if you specify manually that the file use h264 in advanced options. This PR solves this shortcomming, and also aims to separate this procedure from the rest of the headless recorder to improve readability. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/666
https://github.com/sofa-framework/sofa/pull/666:487,Integrability,message,message,487,"Current Headless Recorder does not generate files correctly; for that reason, media player can have trouble detecting the format of the file.; Vlc 3.0.2 cannot read the file, except if you specify manually that the file use h264 in advanced options. This PR solves this shortcomming, and also aims to separate this procedure from the rest of the headless recorder to improve readability. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/666
https://github.com/sofa-framework/sofa/pull/666:108,Safety,detect,detecting,108,"Current Headless Recorder does not generate files correctly; for that reason, media player can have trouble detecting the format of the file.; Vlc 3.0.2 cannot read the file, except if you specify manually that the file use h264 in advanced options. This PR solves this shortcomming, and also aims to separate this procedure from the rest of the headless recorder to improve readability. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/666
https://github.com/sofa-framework/sofa/pull/666:639,Testability,test,test,639,"Current Headless Recorder does not generate files correctly; for that reason, media player can have trouble detecting the format of the file.; Vlc 3.0.2 cannot read the file, except if you specify manually that the file use h264 in advanced options. This PR solves this shortcomming, and also aims to separate this procedure from the rest of the headless recorder to improve readability. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/666
https://github.com/sofa-framework/sofa/pull/666:689,Testability,test,test,689,"Current Headless Recorder does not generate files correctly; for that reason, media player can have trouble detecting the format of the file.; Vlc 3.0.2 cannot read the file, except if you specify manually that the file use h264 in advanced options. This PR solves this shortcomming, and also aims to separate this procedure from the rest of the headless recorder to improve readability. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/666
https://github.com/sofa-framework/sofa/pull/667:491,Availability,failure,failures,491,Here is a very simple implementation that enable extra printing to help in understanding why some scenes are failing/crashing. . I also add few scenes with single solvers because those components where not tested anywhere in our CI. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/667
https://github.com/sofa-framework/sofa/pull/667:541,Availability,failure,failures,541,Here is a very simple implementation that enable extra printing to help in understanding why some scenes are failing/crashing. . I also add few scenes with single solvers because those components where not tested anywhere in our CI. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/667
https://github.com/sofa-framework/sofa/pull/667:334,Integrability,message,message,334,Here is a very simple implementation that enable extra printing to help in understanding why some scenes are failing/crashing. . I also add few scenes with single solvers because those components where not tested anywhere in our CI. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/667
https://github.com/sofa-framework/sofa/pull/667:206,Testability,test,tested,206,Here is a very simple implementation that enable extra printing to help in understanding why some scenes are failing/crashing. . I also add few scenes with single solvers because those components where not tested anywhere in our CI. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/667
https://github.com/sofa-framework/sofa/pull/667:486,Testability,test,test,486,Here is a very simple implementation that enable extra printing to help in understanding why some scenes are failing/crashing. . I also add few scenes with single solvers because those components where not tested anywhere in our CI. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/667
https://github.com/sofa-framework/sofa/pull/667:536,Testability,test,test,536,Here is a very simple implementation that enable extra printing to help in understanding why some scenes are failing/crashing. . I also add few scenes with single solvers because those components where not tested anywhere in our CI. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/667
https://github.com/sofa-framework/sofa/pull/667:15,Usability,simpl,simple,15,Here is a very simple implementation that enable extra printing to help in understanding why some scenes are failing/crashing. . I also add few scenes with single solvers because those components where not tested anywhere in our CI. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/667
https://github.com/sofa-framework/sofa/pull/668:809,Availability,failure,failures,809,As said in the title this PR puts SofaSparseSolver and SofaPreconditioner as a real module that can be activated/deactivated. . CHANGLELOG/; - move source files to src/SofaSparseSolver & src/SofaPreconditioner so the .h are not leaked anymore. ; - conditional code based on #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE is now changed to favor the use of *find_package* to detect and activate conditional building depending on dependencies. ; - add a modules/CMakeLists.txt to integrate that; - add the touched component into the list of 'moved' component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668
https://github.com/sofa-framework/sofa/pull/668:859,Availability,failure,failures,859,As said in the title this PR puts SofaSparseSolver and SofaPreconditioner as a real module that can be activated/deactivated. . CHANGLELOG/; - move source files to src/SofaSparseSolver & src/SofaPreconditioner so the .h are not leaked anymore. ; - conditional code based on #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE is now changed to favor the use of *find_package* to detect and activate conditional building depending on dependencies. ; - add a modules/CMakeLists.txt to integrate that; - add the touched component into the list of 'moved' component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668
https://github.com/sofa-framework/sofa/pull/668:473,Deployability,integrat,integrate,473,As said in the title this PR puts SofaSparseSolver and SofaPreconditioner as a real module that can be activated/deactivated. . CHANGLELOG/; - move source files to src/SofaSparseSolver & src/SofaPreconditioner so the .h are not leaked anymore. ; - conditional code based on #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE is now changed to favor the use of *find_package* to detect and activate conditional building depending on dependencies. ; - add a modules/CMakeLists.txt to integrate that; - add the touched component into the list of 'moved' component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668
https://github.com/sofa-framework/sofa/pull/668:410,Integrability,depend,depending,410,As said in the title this PR puts SofaSparseSolver and SofaPreconditioner as a real module that can be activated/deactivated. . CHANGLELOG/; - move source files to src/SofaSparseSolver & src/SofaPreconditioner so the .h are not leaked anymore. ; - conditional code based on #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE is now changed to favor the use of *find_package* to detect and activate conditional building depending on dependencies. ; - add a modules/CMakeLists.txt to integrate that; - add the touched component into the list of 'moved' component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668
https://github.com/sofa-framework/sofa/pull/668:423,Integrability,depend,dependencies,423,As said in the title this PR puts SofaSparseSolver and SofaPreconditioner as a real module that can be activated/deactivated. . CHANGLELOG/; - move source files to src/SofaSparseSolver & src/SofaPreconditioner so the .h are not leaked anymore. ; - conditional code based on #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE is now changed to favor the use of *find_package* to detect and activate conditional building depending on dependencies. ; - add a modules/CMakeLists.txt to integrate that; - add the touched component into the list of 'moved' component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668
https://github.com/sofa-framework/sofa/pull/668:473,Integrability,integrat,integrate,473,As said in the title this PR puts SofaSparseSolver and SofaPreconditioner as a real module that can be activated/deactivated. . CHANGLELOG/; - move source files to src/SofaSparseSolver & src/SofaPreconditioner so the .h are not leaked anymore. ; - conditional code based on #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE is now changed to favor the use of *find_package* to detect and activate conditional building depending on dependencies. ; - add a modules/CMakeLists.txt to integrate that; - add the touched component into the list of 'moved' component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668
https://github.com/sofa-framework/sofa/pull/668:652,Integrability,message,message,652,As said in the title this PR puts SofaSparseSolver and SofaPreconditioner as a real module that can be activated/deactivated. . CHANGLELOG/; - move source files to src/SofaSparseSolver & src/SofaPreconditioner so the .h are not leaked anymore. ; - conditional code based on #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE is now changed to favor the use of *find_package* to detect and activate conditional building depending on dependencies. ; - add a modules/CMakeLists.txt to integrate that; - add the touched component into the list of 'moved' component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668
https://github.com/sofa-framework/sofa/pull/668:369,Safety,detect,detect,369,As said in the title this PR puts SofaSparseSolver and SofaPreconditioner as a real module that can be activated/deactivated. . CHANGLELOG/; - move source files to src/SofaSparseSolver & src/SofaPreconditioner so the .h are not leaked anymore. ; - conditional code based on #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE is now changed to favor the use of *find_package* to detect and activate conditional building depending on dependencies. ; - add a modules/CMakeLists.txt to integrate that; - add the touched component into the list of 'moved' component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668
https://github.com/sofa-framework/sofa/pull/668:804,Testability,test,test,804,As said in the title this PR puts SofaSparseSolver and SofaPreconditioner as a real module that can be activated/deactivated. . CHANGLELOG/; - move source files to src/SofaSparseSolver & src/SofaPreconditioner so the .h are not leaked anymore. ; - conditional code based on #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE is now changed to favor the use of *find_package* to detect and activate conditional building depending on dependencies. ; - add a modules/CMakeLists.txt to integrate that; - add the touched component into the list of 'moved' component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668
https://github.com/sofa-framework/sofa/pull/668:854,Testability,test,test,854,As said in the title this PR puts SofaSparseSolver and SofaPreconditioner as a real module that can be activated/deactivated. . CHANGLELOG/; - move source files to src/SofaSparseSolver & src/SofaPreconditioner so the .h are not leaked anymore. ; - conditional code based on #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE is now changed to favor the use of *find_package* to detect and activate conditional building depending on dependencies. ; - add a modules/CMakeLists.txt to integrate that; - add the touched component into the list of 'moved' component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668
https://github.com/sofa-framework/sofa/pull/669:389,Availability,failure,failures,389,"Unfortunately Gaurab seems to be unreachable those days. As I want to use his good work, here is a quick cherry pick of his PR #639. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/669
https://github.com/sofa-framework/sofa/pull/669:439,Availability,failure,failures,439,"Unfortunately Gaurab seems to be unreachable those days. As I want to use his good work, here is a quick cherry pick of his PR #639. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/669
https://github.com/sofa-framework/sofa/pull/669:232,Integrability,message,message,232,"Unfortunately Gaurab seems to be unreachable those days. As I want to use his good work, here is a quick cherry pick of his PR #639. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/669
https://github.com/sofa-framework/sofa/pull/669:384,Testability,test,test,384,"Unfortunately Gaurab seems to be unreachable those days. As I want to use his good work, here is a quick cherry pick of his PR #639. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/669
https://github.com/sofa-framework/sofa/pull/669:434,Testability,test,test,434,"Unfortunately Gaurab seems to be unreachable those days. As I want to use his good work, here is a quick cherry pick of his PR #639. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/669
https://github.com/sofa-framework/sofa/pull/670:766,Availability,failure,failures,766,"Fixes #308 with initialization of SparseGridTopology with a mesh. Before, a 1% scaling was automatically applied on the grid bounding an input mesh. Removing the scaling was leading a crash since vertices could be exactly on the boundary surface (surface of the BBox of the mesh).; Now a safety check is done and a final check is done to alert if a vertex is not found. Minor cleans of the msg API are also added. @epernod @fredroy your feedback using your own scenes involving the SparseGrid would be useful. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/670
https://github.com/sofa-framework/sofa/pull/670:816,Availability,failure,failures,816,"Fixes #308 with initialization of SparseGridTopology with a mesh. Before, a 1% scaling was automatically applied on the grid bounding an input mesh. Removing the scaling was leading a crash since vertices could be exactly on the boundary surface (surface of the BBox of the mesh).; Now a safety check is done and a final check is done to alert if a vertex is not found. Minor cleans of the msg API are also added. @epernod @fredroy your feedback using your own scenes involving the SparseGrid would be useful. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/670
https://github.com/sofa-framework/sofa/pull/670:609,Integrability,message,message,609,"Fixes #308 with initialization of SparseGridTopology with a mesh. Before, a 1% scaling was automatically applied on the grid bounding an input mesh. Removing the scaling was leading a crash since vertices could be exactly on the boundary surface (surface of the BBox of the mesh).; Now a safety check is done and a final check is done to alert if a vertex is not found. Minor cleans of the msg API are also added. @epernod @fredroy your feedback using your own scenes involving the SparseGrid would be useful. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/670
https://github.com/sofa-framework/sofa/pull/670:288,Safety,safe,safety,288,"Fixes #308 with initialization of SparseGridTopology with a mesh. Before, a 1% scaling was automatically applied on the grid bounding an input mesh. Removing the scaling was leading a crash since vertices could be exactly on the boundary surface (surface of the BBox of the mesh).; Now a safety check is done and a final check is done to alert if a vertex is not found. Minor cleans of the msg API are also added. @epernod @fredroy your feedback using your own scenes involving the SparseGrid would be useful. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/670
https://github.com/sofa-framework/sofa/pull/670:761,Testability,test,test,761,"Fixes #308 with initialization of SparseGridTopology with a mesh. Before, a 1% scaling was automatically applied on the grid bounding an input mesh. Removing the scaling was leading a crash since vertices could be exactly on the boundary surface (surface of the BBox of the mesh).; Now a safety check is done and a final check is done to alert if a vertex is not found. Minor cleans of the msg API are also added. @epernod @fredroy your feedback using your own scenes involving the SparseGrid would be useful. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/670
https://github.com/sofa-framework/sofa/pull/670:811,Testability,test,test,811,"Fixes #308 with initialization of SparseGridTopology with a mesh. Before, a 1% scaling was automatically applied on the grid bounding an input mesh. Removing the scaling was leading a crash since vertices could be exactly on the boundary surface (surface of the BBox of the mesh).; Now a safety check is done and a final check is done to alert if a vertex is not found. Minor cleans of the msg API are also added. @epernod @fredroy your feedback using your own scenes involving the SparseGrid would be useful. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/670
https://github.com/sofa-framework/sofa/pull/670:437,Usability,feedback,feedback,437,"Fixes #308 with initialization of SparseGridTopology with a mesh. Before, a 1% scaling was automatically applied on the grid bounding an input mesh. Removing the scaling was leading a crash since vertices could be exactly on the boundary surface (surface of the BBox of the mesh).; Now a safety check is done and a final check is done to alert if a vertex is not found. Minor cleans of the msg API are also added. @epernod @fredroy your feedback using your own scenes involving the SparseGrid would be useful. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/670
https://github.com/sofa-framework/sofa/pull/671:465,Availability,failure,failures,465,"This PR allows to add aliases in C++ in DisplayFlags.; Moreover, DisplayFlags are now case insensitive but a warning is given.; The DisplayFlagsDataWidget is now fixed to correspond to the FlagTreeItem names. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/671
https://github.com/sofa-framework/sofa/pull/671:515,Availability,failure,failures,515,"This PR allows to add aliases in C++ in DisplayFlags.; Moreover, DisplayFlags are now case insensitive but a warning is given.; The DisplayFlagsDataWidget is now fixed to correspond to the FlagTreeItem names. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/671
https://github.com/sofa-framework/sofa/pull/671:308,Integrability,message,message,308,"This PR allows to add aliases in C++ in DisplayFlags.; Moreover, DisplayFlags are now case insensitive but a warning is given.; The DisplayFlagsDataWidget is now fixed to correspond to the FlagTreeItem names. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/671
https://github.com/sofa-framework/sofa/pull/671:460,Testability,test,test,460,"This PR allows to add aliases in C++ in DisplayFlags.; Moreover, DisplayFlags are now case insensitive but a warning is given.; The DisplayFlagsDataWidget is now fixed to correspond to the FlagTreeItem names. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/671
https://github.com/sofa-framework/sofa/pull/671:510,Testability,test,test,510,"This PR allows to add aliases in C++ in DisplayFlags.; Moreover, DisplayFlags are now case insensitive but a warning is given.; The DisplayFlagsDataWidget is now fixed to correspond to the FlagTreeItem names. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/671
https://github.com/sofa-framework/sofa/pull/672:396,Availability,failure,failures,396,Since #638 the PR breaks some #ifdef.; Here is fix for the #inclusion problem and a pattern to avoid this kind of problem to be repeated. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/672
https://github.com/sofa-framework/sofa/pull/672:446,Availability,failure,failures,446,Since #638 the PR breaks some #ifdef.; Here is fix for the #inclusion problem and a pattern to avoid this kind of problem to be repeated. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/672
https://github.com/sofa-framework/sofa/pull/672:239,Integrability,message,message,239,Since #638 the PR breaks some #ifdef.; Here is fix for the #inclusion problem and a pattern to avoid this kind of problem to be repeated. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/672
https://github.com/sofa-framework/sofa/pull/672:95,Safety,avoid,avoid,95,Since #638 the PR breaks some #ifdef.; Here is fix for the #inclusion problem and a pattern to avoid this kind of problem to be repeated. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/672
https://github.com/sofa-framework/sofa/pull/672:391,Testability,test,test,391,Since #638 the PR breaks some #ifdef.; Here is fix for the #inclusion problem and a pattern to avoid this kind of problem to be repeated. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/672
https://github.com/sofa-framework/sofa/pull/672:441,Testability,test,test,441,Since #638 the PR breaks some #ifdef.; Here is fix for the #inclusion problem and a pattern to avoid this kind of problem to be repeated. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/672
https://github.com/sofa-framework/sofa/issues/673:83,Availability,error,error-configure-sofa-in-cmake-gui-about-lpthreads,83,"It was first signalled [here](https://www.sofa-framework.org/community/forum/topic/error-configure-sofa-in-cmake-gui-about-lpthreads/#post-11140). The compilation of the master branch fails with GCC v8.1, which is the default version in fedora 28. The compilation passed with GCC v.7.3 (default in fedora 27). I did not checked at which GCC version between those two this starts to happen. ```; /home/vm-fedora-28/sofa/modules/SofaBoundaryCondition/FixedPlaneConstraint.cpp: In instantiation of ‘void sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::projectResponseT(const sofa::core::MechanicalParams*, DataDeriv&) [with DataDeriv = sofa::helper::vector<sofa::defaulttype::RigidDeriv<3, double>, sofa::helper::CPUMemoryManager<sofa::defaulttype::RigidDeriv<3, double> > >; DataTypes = sofa::defaulttype::StdRigidTypes<3, double>]’:; /home/vm-fedora-28/sofa/SofaGeneral/../modules/SofaBoundaryCondition/FixedPlaneConstraint.inl:173:31: required from ‘void sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::projectResponse(const sofa::core::MechanicalParams*, sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::DataVecDeriv&) [with DataTypes = sofa::defaulttype::StdRigidTypes<3, double>; sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::DataVecDeriv = sofa::core::objectmodel::Data<sofa::helper::vector<sofa::defaulttype::RigidDeriv<3, double>, sofa::helper::CPUMemoryManager<sofa::defaulttype::RigidDeriv<3, double> > > >; typename DataTypes::VecDeriv = sofa::helper::vector<sofa::defaulttype::RigidDeriv<3, double>, sofa::helper::CPUMemoryManager<sofa::defaulttype::RigidDeriv<3, double> > >]’; /home/vm-fedora-28/sofa/modules/SofaBoundaryCondition/FixedPlaneConstraint.cpp:58:44: required from here; /home/vm-fedora-28/sofa/modules/SofaBoundaryCondition/FixedPlaneConstraint.cpp:74:100: internal compiler error: in type_dependent_expression_p, at cp/pt.c:25100; ed int > ::const_iterator it = this",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/673
https://github.com/sofa-framework/sofa/issues/673:1909,Availability,error,error,1909,"compilation passed with GCC v.7.3 (default in fedora 27). I did not checked at which GCC version between those two this starts to happen. ```; /home/vm-fedora-28/sofa/modules/SofaBoundaryCondition/FixedPlaneConstraint.cpp: In instantiation of ‘void sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::projectResponseT(const sofa::core::MechanicalParams*, DataDeriv&) [with DataDeriv = sofa::helper::vector<sofa::defaulttype::RigidDeriv<3, double>, sofa::helper::CPUMemoryManager<sofa::defaulttype::RigidDeriv<3, double> > >; DataTypes = sofa::defaulttype::StdRigidTypes<3, double>]’:; /home/vm-fedora-28/sofa/SofaGeneral/../modules/SofaBoundaryCondition/FixedPlaneConstraint.inl:173:31: required from ‘void sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::projectResponse(const sofa::core::MechanicalParams*, sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::DataVecDeriv&) [with DataTypes = sofa::defaulttype::StdRigidTypes<3, double>; sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::DataVecDeriv = sofa::core::objectmodel::Data<sofa::helper::vector<sofa::defaulttype::RigidDeriv<3, double>, sofa::helper::CPUMemoryManager<sofa::defaulttype::RigidDeriv<3, double> > > >; typename DataTypes::VecDeriv = sofa::helper::vector<sofa::defaulttype::RigidDeriv<3, double>, sofa::helper::CPUMemoryManager<sofa::defaulttype::RigidDeriv<3, double> > >]’; /home/vm-fedora-28/sofa/modules/SofaBoundaryCondition/FixedPlaneConstraint.cpp:58:44: required from here; /home/vm-fedora-28/sofa/modules/SofaBoundaryCondition/FixedPlaneConstraint.cpp:74:100: internal compiler error: in type_dependent_expression_p, at cp/pt.c:25100; ed int > ::const_iterator it = this->indices.getValue().begin(); it != this->indices.getValue().end(); ++it); ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; ```. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/673
https://github.com/sofa-framework/sofa/issues/673:89,Modifiability,config,configure-sofa-in-cmake-gui-about-lpthreads,89,"It was first signalled [here](https://www.sofa-framework.org/community/forum/topic/error-configure-sofa-in-cmake-gui-about-lpthreads/#post-11140). The compilation of the master branch fails with GCC v8.1, which is the default version in fedora 28. The compilation passed with GCC v.7.3 (default in fedora 27). I did not checked at which GCC version between those two this starts to happen. ```; /home/vm-fedora-28/sofa/modules/SofaBoundaryCondition/FixedPlaneConstraint.cpp: In instantiation of ‘void sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::projectResponseT(const sofa::core::MechanicalParams*, DataDeriv&) [with DataDeriv = sofa::helper::vector<sofa::defaulttype::RigidDeriv<3, double>, sofa::helper::CPUMemoryManager<sofa::defaulttype::RigidDeriv<3, double> > >; DataTypes = sofa::defaulttype::StdRigidTypes<3, double>]’:; /home/vm-fedora-28/sofa/SofaGeneral/../modules/SofaBoundaryCondition/FixedPlaneConstraint.inl:173:31: required from ‘void sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::projectResponse(const sofa::core::MechanicalParams*, sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::DataVecDeriv&) [with DataTypes = sofa::defaulttype::StdRigidTypes<3, double>; sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::DataVecDeriv = sofa::core::objectmodel::Data<sofa::helper::vector<sofa::defaulttype::RigidDeriv<3, double>, sofa::helper::CPUMemoryManager<sofa::defaulttype::RigidDeriv<3, double> > > >; typename DataTypes::VecDeriv = sofa::helper::vector<sofa::defaulttype::RigidDeriv<3, double>, sofa::helper::CPUMemoryManager<sofa::defaulttype::RigidDeriv<3, double> > >]’; /home/vm-fedora-28/sofa/modules/SofaBoundaryCondition/FixedPlaneConstraint.cpp:58:44: required from here; /home/vm-fedora-28/sofa/modules/SofaBoundaryCondition/FixedPlaneConstraint.cpp:74:100: internal compiler error: in type_dependent_expression_p, at cp/pt.c:25100; ed int > ::const_iterator it = this",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/673
https://github.com/sofa-framework/sofa/pull/674:1059,Availability,failure,failures,1059,Create a Camera component so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement; your own 'application specific behavior' by using an external Controller (eg: PythonScriptController). Changes:; - the BaseCamera now has a link to a BackgroundSetting so multiple camera can have multiple background. ; - the BaseCamera now implement a draw() method. If you don't want to see what is drawn...then; restrict the rendering of your scene graph to only call drawVisuals() which is what it is supposed to do :) ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object. Update the caduceus example. NB: I know there is much more to refactor but I have not time for that. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/674
https://github.com/sofa-framework/sofa/pull/674:1109,Availability,failure,failures,1109,Create a Camera component so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement; your own 'application specific behavior' by using an external Controller (eg: PythonScriptController). Changes:; - the BaseCamera now has a link to a BackgroundSetting so multiple camera can have multiple background. ; - the BaseCamera now implement a draw() method. If you don't want to see what is drawn...then; restrict the rendering of your scene graph to only call drawVisuals() which is what it is supposed to do :) ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object. Update the caduceus example. NB: I know there is much more to refactor but I have not time for that. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/674
https://github.com/sofa-framework/sofa/pull/674:700,Deployability,Update,Update,700,Create a Camera component so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement; your own 'application specific behavior' by using an external Controller (eg: PythonScriptController). Changes:; - the BaseCamera now has a link to a BackgroundSetting so multiple camera can have multiple background. ; - the BaseCamera now implement a draw() method. If you don't want to see what is drawn...then; restrict the rendering of your scene graph to only call drawVisuals() which is what it is supposed to do :) ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object. Update the caduceus example. NB: I know there is much more to refactor but I have not time for that. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/674
https://github.com/sofa-framework/sofa/pull/674:902,Integrability,message,message,902,Create a Camera component so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement; your own 'application specific behavior' by using an external Controller (eg: PythonScriptController). Changes:; - the BaseCamera now has a link to a BackgroundSetting so multiple camera can have multiple background. ; - the BaseCamera now implement a draw() method. If you don't want to see what is drawn...then; restrict the rendering of your scene graph to only call drawVisuals() which is what it is supposed to do :) ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object. Update the caduceus example. NB: I know there is much more to refactor but I have not time for that. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/674
https://github.com/sofa-framework/sofa/pull/674:762,Modifiability,refactor,refactor,762,Create a Camera component so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement; your own 'application specific behavior' by using an external Controller (eg: PythonScriptController). Changes:; - the BaseCamera now has a link to a BackgroundSetting so multiple camera can have multiple background. ; - the BaseCamera now implement a draw() method. If you don't want to see what is drawn...then; restrict the rendering of your scene graph to only call drawVisuals() which is what it is supposed to do :) ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object. Update the caduceus example. NB: I know there is much more to refactor but I have not time for that. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/674
https://github.com/sofa-framework/sofa/pull/674:1054,Testability,test,test,1054,Create a Camera component so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement; your own 'application specific behavior' by using an external Controller (eg: PythonScriptController). Changes:; - the BaseCamera now has a link to a BackgroundSetting so multiple camera can have multiple background. ; - the BaseCamera now implement a draw() method. If you don't want to see what is drawn...then; restrict the rendering of your scene graph to only call drawVisuals() which is what it is supposed to do :) ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object. Update the caduceus example. NB: I know there is much more to refactor but I have not time for that. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/674
https://github.com/sofa-framework/sofa/pull/674:1104,Testability,test,test,1104,Create a Camera component so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement; your own 'application specific behavior' by using an external Controller (eg: PythonScriptController). Changes:; - the BaseCamera now has a link to a BackgroundSetting so multiple camera can have multiple background. ; - the BaseCamera now implement a draw() method. If you don't want to see what is drawn...then; restrict the rendering of your scene graph to only call drawVisuals() which is what it is supposed to do :) ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object. Update the caduceus example. NB: I know there is much more to refactor but I have not time for that. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/674
https://github.com/sofa-framework/sofa/pull/675:356,Availability,failure,failures,356,"I forgot one file in #586, leading to the disappearance of 14 tests. You didn't see it? Me neither. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/675
https://github.com/sofa-framework/sofa/pull/675:406,Availability,failure,failures,406,"I forgot one file in #586, leading to the disappearance of 14 tests. You didn't see it? Me neither. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/675
https://github.com/sofa-framework/sofa/pull/675:199,Integrability,message,message,199,"I forgot one file in #586, leading to the disappearance of 14 tests. You didn't see it? Me neither. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/675
https://github.com/sofa-framework/sofa/pull/675:62,Testability,test,tests,62,"I forgot one file in #586, leading to the disappearance of 14 tests. You didn't see it? Me neither. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/675
https://github.com/sofa-framework/sofa/pull/675:351,Testability,test,test,351,"I forgot one file in #586, leading to the disappearance of 14 tests. You didn't see it? Me neither. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/675
https://github.com/sofa-framework/sofa/pull/675:401,Testability,test,test,401,"I forgot one file in #586, leading to the disappearance of 14 tests. You didn't see it? Me neither. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/675
https://github.com/sofa-framework/sofa/pull/676:1037,Availability,failure,failures,1037,To prepare for runSofa2 i feel the need to refactor some aspects. . CHANGELOG:; - ADD a Camera object inheriting from BaseCamera so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement your own 'application specific behavior' by using an external Controller (eg: PythonScriptController).; - ADD a link in BaseCamera to a BackgroundSetting so different camera can have different background. ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object; - Update the caduceus example.; - Light object now have a drawSource so that it is possible to draw the source from without having to change the d_drawSource data field.; ; This PR replace #674 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/676
https://github.com/sofa-framework/sofa/pull/676:1087,Availability,failure,failures,1087,To prepare for runSofa2 i feel the need to refactor some aspects. . CHANGELOG:; - ADD a Camera object inheriting from BaseCamera so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement your own 'application specific behavior' by using an external Controller (eg: PythonScriptController).; - ADD a link in BaseCamera to a BackgroundSetting so different camera can have different background. ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object; - Update the caduceus example.; - Light object now have a drawSource so that it is possible to draw the source from without having to change the d_drawSource data field.; ; This PR replace #674 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/676
https://github.com/sofa-framework/sofa/pull/676:587,Deployability,Update,Update,587,To prepare for runSofa2 i feel the need to refactor some aspects. . CHANGELOG:; - ADD a Camera object inheriting from BaseCamera so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement your own 'application specific behavior' by using an external Controller (eg: PythonScriptController).; - ADD a link in BaseCamera to a BackgroundSetting so different camera can have different background. ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object; - Update the caduceus example.; - Light object now have a drawSource so that it is possible to draw the source from without having to change the d_drawSource data field.; ; This PR replace #674 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/676
https://github.com/sofa-framework/sofa/pull/676:880,Integrability,message,message,880,To prepare for runSofa2 i feel the need to refactor some aspects. . CHANGELOG:; - ADD a Camera object inheriting from BaseCamera so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement your own 'application specific behavior' by using an external Controller (eg: PythonScriptController).; - ADD a link in BaseCamera to a BackgroundSetting so different camera can have different background. ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object; - Update the caduceus example.; - Light object now have a drawSource so that it is possible to draw the source from without having to change the d_drawSource data field.; ; This PR replace #674 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/676
https://github.com/sofa-framework/sofa/pull/676:43,Modifiability,refactor,refactor,43,To prepare for runSofa2 i feel the need to refactor some aspects. . CHANGELOG:; - ADD a Camera object inheriting from BaseCamera so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement your own 'application specific behavior' by using an external Controller (eg: PythonScriptController).; - ADD a link in BaseCamera to a BackgroundSetting so different camera can have different background. ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object; - Update the caduceus example.; - Light object now have a drawSource so that it is possible to draw the source from without having to change the d_drawSource data field.; ; This PR replace #674 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/676
https://github.com/sofa-framework/sofa/pull/676:102,Modifiability,inherit,inheriting,102,To prepare for runSofa2 i feel the need to refactor some aspects. . CHANGELOG:; - ADD a Camera object inheriting from BaseCamera so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement your own 'application specific behavior' by using an external Controller (eg: PythonScriptController).; - ADD a link in BaseCamera to a BackgroundSetting so different camera can have different background. ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object; - Update the caduceus example.; - Light object now have a drawSource so that it is possible to draw the source from without having to change the d_drawSource data field.; ; This PR replace #674 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/676
https://github.com/sofa-framework/sofa/pull/676:1032,Testability,test,test,1032,To prepare for runSofa2 i feel the need to refactor some aspects. . CHANGELOG:; - ADD a Camera object inheriting from BaseCamera so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement your own 'application specific behavior' by using an external Controller (eg: PythonScriptController).; - ADD a link in BaseCamera to a BackgroundSetting so different camera can have different background. ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object; - Update the caduceus example.; - Light object now have a drawSource so that it is possible to draw the source from without having to change the d_drawSource data field.; ; This PR replace #674 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/676
https://github.com/sofa-framework/sofa/pull/676:1082,Testability,test,test,1082,To prepare for runSofa2 i feel the need to refactor some aspects. . CHANGELOG:; - ADD a Camera object inheriting from BaseCamera so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement your own 'application specific behavior' by using an external Controller (eg: PythonScriptController).; - ADD a link in BaseCamera to a BackgroundSetting so different camera can have different background. ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object; - Update the caduceus example.; - Light object now have a drawSource so that it is possible to draw the source from without having to change the d_drawSource data field.; ; This PR replace #674 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/676
https://github.com/sofa-framework/sofa/issues/678:176,Deployability,update,update,176,As pointe by @marques-bruno and @fredroy our Opengl rendering code is getting old and less and less compatible with modern architecture and OS. So it may be time for a serious update.; What is your opinion and suggestion that ?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678
https://github.com/sofa-framework/sofa/issues/679:373,Modifiability,refactor,refactoring,373,"There is a lot of commented code sine years. Is just ugly and pointless (as we have versioning system to keep old code) ...so we could spend some time to remove that during the coding spring. I know this is not a very challenging task, but it is like sweep your house...you fell so good when it is done. . (And making easy things is relaxing after hours of complex Sofa-NG refactoring). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/679
https://github.com/sofa-framework/sofa/pull/680:21,Availability,error,error,21,"Quick fix of compile error, quite self-explanatory I guess. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/680
https://github.com/sofa-framework/sofa/pull/680:316,Availability,failure,failures,316,"Quick fix of compile error, quite self-explanatory I guess. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/680
https://github.com/sofa-framework/sofa/pull/680:366,Availability,failure,failures,366,"Quick fix of compile error, quite self-explanatory I guess. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/680
https://github.com/sofa-framework/sofa/pull/680:159,Integrability,message,message,159,"Quick fix of compile error, quite self-explanatory I guess. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/680
https://github.com/sofa-framework/sofa/pull/680:311,Testability,test,test,311,"Quick fix of compile error, quite self-explanatory I guess. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/680
https://github.com/sofa-framework/sofa/pull/680:361,Testability,test,test,361,"Quick fix of compile error, quite self-explanatory I guess. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/680
https://github.com/sofa-framework/sofa/issues/683:135,Deployability,update,update,135,- BeamAdapter has objects that inherit from ConstraintResolution. ; The constructor now impose to have at least one parameter. You can update your code easily by using the new constructor. ; - The example scene in SofaPython keyboardController does not seems to work anymore. ; - ... Please share what you have seen with others so we can fix everything quickly; . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/683
https://github.com/sofa-framework/sofa/issues/683:31,Modifiability,inherit,inherit,31,- BeamAdapter has objects that inherit from ConstraintResolution. ; The constructor now impose to have at least one parameter. You can update your code easily by using the new constructor. ; - The example scene in SofaPython keyboardController does not seems to work anymore. ; - ... Please share what you have seen with others so we can fix everything quickly; . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/683
https://github.com/sofa-framework/sofa/pull/684:256,Availability,failure,failures,256,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/684
https://github.com/sofa-framework/sofa/pull/684:306,Availability,failure,failures,306,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/684
https://github.com/sofa-framework/sofa/pull/684:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/684
https://github.com/sofa-framework/sofa/pull/684:251,Testability,test,test,251,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/684
https://github.com/sofa-framework/sofa/pull/684:301,Testability,test,test,301,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/684
https://github.com/sofa-framework/sofa/issues/685:575,Performance,perform,performance,575,"Hi all,. In our branches @defrost we are adding more and more data field to get:; - filename/line where a component has been instanciated. ; - filename/line where the component is defined. . Both PSL & STLIB are using the same trick. . I remember of discussion with @matthieu-nesme on having less data field added because of the overhead. ; So currently we are only adding the fields when the component are instanciated dynamically (from a file) and not using the initData method. Now I wonder if we could do the same in createObject()/createNode() of course this would have performance impact...but given how slow python is anyway it may be totally unnoticeable on the ; run-time. Any opinion ?. DM. . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/685
https://github.com/sofa-framework/sofa/issues/686:230,Deployability,update,update,230,I am unable to follow the pendulum tutorial at step 4 because it is not possible to edit position Vector 1/2 from the GUI. Expected outcome: . Left click and typing of the number 2 in the X cell of the second position vector will update the X cell value from 1 to 2:. Actual outcome: It is not possible to edit any vector components in the GUI. Steps to reproduce: ; 1 load examples/Tutorials/StepByStep/Pendulum/3_Pendulum.scn in the modeler application of v17.12 build. ; 2 Double click on MechanicalObject Particles. Selcet Vector 1/2 tab of the GUI. ; 3 Left click and type the number 2 in the X cell of the second position vector will update the X cell value from 0 to 1:. Below is the dialog box that should be visible when trying to edit the vector component.; ![mechanicalobj scn](https://user-images.githubusercontent.com/20428997/41324725-19c31702-6e6b-11e8-98ca-268a77abe061.png). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/686
https://github.com/sofa-framework/sofa/issues/686:640,Deployability,update,update,640,I am unable to follow the pendulum tutorial at step 4 because it is not possible to edit position Vector 1/2 from the GUI. Expected outcome: . Left click and typing of the number 2 in the X cell of the second position vector will update the X cell value from 1 to 2:. Actual outcome: It is not possible to edit any vector components in the GUI. Steps to reproduce: ; 1 load examples/Tutorials/StepByStep/Pendulum/3_Pendulum.scn in the modeler application of v17.12 build. ; 2 Double click on MechanicalObject Particles. Selcet Vector 1/2 tab of the GUI. ; 3 Left click and type the number 2 in the X cell of the second position vector will update the X cell value from 0 to 1:. Below is the dialog box that should be visible when trying to edit the vector component.; ![mechanicalobj scn](https://user-images.githubusercontent.com/20428997/41324725-19c31702-6e6b-11e8-98ca-268a77abe061.png). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/686
https://github.com/sofa-framework/sofa/issues/686:369,Performance,load,load,369,I am unable to follow the pendulum tutorial at step 4 because it is not possible to edit position Vector 1/2 from the GUI. Expected outcome: . Left click and typing of the number 2 in the X cell of the second position vector will update the X cell value from 1 to 2:. Actual outcome: It is not possible to edit any vector components in the GUI. Steps to reproduce: ; 1 load examples/Tutorials/StepByStep/Pendulum/3_Pendulum.scn in the modeler application of v17.12 build. ; 2 Double click on MechanicalObject Particles. Selcet Vector 1/2 tab of the GUI. ; 3 Left click and type the number 2 in the X cell of the second position vector will update the X cell value from 0 to 1:. Below is the dialog box that should be visible when trying to edit the vector component.; ![mechanicalobj scn](https://user-images.githubusercontent.com/20428997/41324725-19c31702-6e6b-11e8-98ca-268a77abe061.png). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/686
https://github.com/sofa-framework/sofa/pull/687:461,Availability,failure,failures,461,This removes warnings that appear when running runSofa from a directory where it was installed from source. This should not affect compilation in any way (but not sure how it would affect packaging Sofa). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/687
https://github.com/sofa-framework/sofa/pull/687:511,Availability,failure,failures,511,This removes warnings that appear when running runSofa from a directory where it was installed from source. This should not affect compilation in any way (but not sure how it would affect packaging Sofa). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/687
https://github.com/sofa-framework/sofa/pull/687:85,Deployability,install,installed,85,This removes warnings that appear when running runSofa from a directory where it was installed from source. This should not affect compilation in any way (but not sure how it would affect packaging Sofa). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/687
https://github.com/sofa-framework/sofa/pull/687:304,Integrability,message,message,304,This removes warnings that appear when running runSofa from a directory where it was installed from source. This should not affect compilation in any way (but not sure how it would affect packaging Sofa). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/687
https://github.com/sofa-framework/sofa/pull/687:456,Testability,test,test,456,This removes warnings that appear when running runSofa from a directory where it was installed from source. This should not affect compilation in any way (but not sure how it would affect packaging Sofa). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/687
https://github.com/sofa-framework/sofa/pull/687:506,Testability,test,test,506,This removes warnings that appear when running runSofa from a directory where it was installed from source. This should not affect compilation in any way (but not sure how it would affect packaging Sofa). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/687
https://github.com/sofa-framework/sofa/issues/688:499,Availability,error,error,499,"Issue: Adding ""UniformMass"" To a Node before a ""MechanicalObject"" in Modeler leads to badly formatted .scn files that cannot be instantiated in SOFA. Expected Outcome: Adding Mechanical State and Mass to a node in an arbitrary order from the Modeler Gui will construct well formatted .scn files. Steps to Reproduce: Follow the Pendulum Step By step Tutorial (step 0). Add UniformMass before MechanicalObject. Save the .scn. This .scn will not instantiate the UniformMass and will instead output the error shown in the image below:; ![mechobjsofabug](https://user-images.githubusercontent.com/20428997/41388922-03487fca-6f43-11e8-991e-2108a2bba568.png). Alternatively, the problem can be demonstrated with this minimal .scn. If MechanicalObject and UniformMass tags are swapped, simulation is possible. `<?xml version=""1.0""?>`; `<Node 	 name=""Root"" dt=""0.01"" >`; `	<VisualStyle name=""visualStyle1"" displayFlags=""showVisual showBehavior hideCollision hideMapping hideOptions"" />`; `	<Node 	 name=""FirstObject"" >`; `		<UniformMass template=""Vec3d"" name=""Mass"" filename=""unused"" />`; `		<MechanicalObject template=""Vec3d"" name=""Particles"" position=""0 0 0"" velocity=""0 0 0"" force=""0 0 0"" externalForce=""0 0 0"" derivX=""0 0 0 0 0 0 0 0 0"" showObject=""1"" showObjectScale=""0.5"" size=""1"" />`; `	</Node>`; `</Node>`. . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/688
https://github.com/sofa-framework/sofa/issues/690:96,Deployability,release,release,96,"We should improve our packaging process to ease the creation/build of a plugin linked to a SOFA release. Now: CPack (Windows) + Bundle (MacOS) + install archive (Linux); Problems: Not unified, some libs not included (Qt); Future: One unified method for all platforms.; Ideas: Flatpak, CPack, vcpkg; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/690
https://github.com/sofa-framework/sofa/issues/690:145,Deployability,install,install,145,"We should improve our packaging process to ease the creation/build of a plugin linked to a SOFA release. Now: CPack (Windows) + Bundle (MacOS) + install archive (Linux); Problems: Not unified, some libs not included (Qt); Future: One unified method for all platforms.; Ideas: Flatpak, CPack, vcpkg; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/690
https://github.com/sofa-framework/sofa/issues/690:72,Modifiability,plugin,plugin,72,"We should improve our packaging process to ease the creation/build of a plugin linked to a SOFA release. Now: CPack (Windows) + Bundle (MacOS) + install archive (Linux); Problems: Not unified, some libs not included (Qt); Future: One unified method for all platforms.; Ideas: Flatpak, CPack, vcpkg; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/690
https://github.com/sofa-framework/sofa/pull/691:354,Availability,failure,failures,354,This is reopening one PR that was issued from SofaDefrost/master instead of a dedicated branch. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/691
https://github.com/sofa-framework/sofa/pull/691:404,Availability,failure,failures,404,This is reopening one PR that was issued from SofaDefrost/master instead of a dedicated branch. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/691
https://github.com/sofa-framework/sofa/pull/691:197,Integrability,message,message,197,This is reopening one PR that was issued from SofaDefrost/master instead of a dedicated branch. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/691
https://github.com/sofa-framework/sofa/pull/691:349,Testability,test,test,349,This is reopening one PR that was issued from SofaDefrost/master instead of a dedicated branch. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/691
https://github.com/sofa-framework/sofa/pull/691:399,Testability,test,test,399,This is reopening one PR that was issued from SofaDefrost/master instead of a dedicated branch. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/691
https://github.com/sofa-framework/sofa/pull/692:460,Availability,failure,failures,460,"This PR makes so that the user can activate an option to look for and use CCACHE for compilation.; If the option is activated, then CMake looks for ccache. If ccache is found, it is used for compilation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/692
https://github.com/sofa-framework/sofa/pull/692:510,Availability,failure,failures,510,"This PR makes so that the user can activate an option to look for and use CCACHE for compilation.; If the option is activated, then CMake looks for ccache. If ccache is found, it is used for compilation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/692
https://github.com/sofa-framework/sofa/pull/692:303,Integrability,message,message,303,"This PR makes so that the user can activate an option to look for and use CCACHE for compilation.; If the option is activated, then CMake looks for ccache. If ccache is found, it is used for compilation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/692
https://github.com/sofa-framework/sofa/pull/692:455,Testability,test,test,455,"This PR makes so that the user can activate an option to look for and use CCACHE for compilation.; If the option is activated, then CMake looks for ccache. If ccache is found, it is used for compilation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/692
https://github.com/sofa-framework/sofa/pull/692:505,Testability,test,test,505,"This PR makes so that the user can activate an option to look for and use CCACHE for compilation.; If the option is activated, then CMake looks for ccache. If ccache is found, it is used for compilation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/692
https://github.com/sofa-framework/sofa/pull/693:516,Availability,failure,failures,516,everything is in the title.; This PR: ; - clean some code commented.; - remove the HAVE_NEW_HEXA macro which was hardcoded to true since 2009; - change the NDEBUG topology test into a c++if condition so the code is compiled. work duplicated with STC#5 branch. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/693
https://github.com/sofa-framework/sofa/pull/693:566,Availability,failure,failures,566,everything is in the title.; This PR: ; - clean some code commented.; - remove the HAVE_NEW_HEXA macro which was hardcoded to true since 2009; - change the NDEBUG topology test into a c++if condition so the code is compiled. work duplicated with STC#5 branch. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/693
https://github.com/sofa-framework/sofa/pull/693:359,Integrability,message,message,359,everything is in the title.; This PR: ; - clean some code commented.; - remove the HAVE_NEW_HEXA macro which was hardcoded to true since 2009; - change the NDEBUG topology test into a c++if condition so the code is compiled. work duplicated with STC#5 branch. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/693
https://github.com/sofa-framework/sofa/pull/693:172,Testability,test,test,172,everything is in the title.; This PR: ; - clean some code commented.; - remove the HAVE_NEW_HEXA macro which was hardcoded to true since 2009; - change the NDEBUG topology test into a c++if condition so the code is compiled. work duplicated with STC#5 branch. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/693
https://github.com/sofa-framework/sofa/pull/693:511,Testability,test,test,511,everything is in the title.; This PR: ; - clean some code commented.; - remove the HAVE_NEW_HEXA macro which was hardcoded to true since 2009; - change the NDEBUG topology test into a c++if condition so the code is compiled. work duplicated with STC#5 branch. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/693
https://github.com/sofa-framework/sofa/pull/693:561,Testability,test,test,561,everything is in the title.; This PR: ; - clean some code commented.; - remove the HAVE_NEW_HEXA macro which was hardcoded to true since 2009; - change the NDEBUG topology test into a c++if condition so the code is compiled. work duplicated with STC#5 branch. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/693
https://github.com/sofa-framework/sofa/pull/696:297,Availability,failure,failures,297,Clean SofaBoundaryCondition during STC5; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/696
https://github.com/sofa-framework/sofa/pull/696:347,Availability,failure,failures,347,Clean SofaBoundaryCondition during STC5; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/696
https://github.com/sofa-framework/sofa/pull/696:140,Integrability,message,message,140,Clean SofaBoundaryCondition during STC5; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/696
https://github.com/sofa-framework/sofa/pull/696:292,Testability,test,test,292,Clean SofaBoundaryCondition during STC5; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/696
https://github.com/sofa-framework/sofa/pull/696:342,Testability,test,test,342,Clean SofaBoundaryCondition during STC5; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/696
https://github.com/sofa-framework/sofa/pull/699:280,Availability,failure,failures,280,Clean code during STC5. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/699
https://github.com/sofa-framework/sofa/pull/699:330,Availability,failure,failures,330,Clean code during STC5. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/699
https://github.com/sofa-framework/sofa/pull/699:123,Integrability,message,message,123,Clean code during STC5. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/699
https://github.com/sofa-framework/sofa/pull/699:275,Testability,test,test,275,Clean code during STC5. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/699
https://github.com/sofa-framework/sofa/pull/699:325,Testability,test,test,325,Clean code during STC5. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/699
https://github.com/sofa-framework/sofa/pull/700:1450,Availability,failure,failures,1450,"Hi guys,. This PR is a proof of concept to show an alternative implementation dynamic topologies and meshes using the CGOGN library. If you never heard about, CGOGN is a topological modeling kernel (see https://cgogn.github.io) implementing efficiently combinatorial maps to encode the topology and geometrical informations. . The current implementation is based on implementing new topology into new components. The PR introduce the following components: ; - VolumeTopologyContainer ; - CMTetrahedralCorotationalFEMForceField ; - MapTetrahedronSetTopologyContainer (wrapper that allows to use ""classical"" sofa components). The PR is not supposed to be merged in this state and we welcome any feedback on how to improve and generalize this work. EDIT: I (damien) changed the description of the PR trying to summary the discussion. . EDIT 2: ; Steps to compile:; - checkout the branch with a modularized version from [ (https://github.com/mimesis-inria/sofa/tree/cmtopology_module)](https://github.com/mimesis-inria/sofa/tree/cmtopology_module); - checkout CGoGN in a folder sofa/modules/SofaCombinatorialMaps/cgogn2; Compile and run the examples in sofa/modules/SofaCombinatorialMaps/examples. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700
https://github.com/sofa-framework/sofa/pull/700:1500,Availability,failure,failures,1500,"Hi guys,. This PR is a proof of concept to show an alternative implementation dynamic topologies and meshes using the CGOGN library. If you never heard about, CGOGN is a topological modeling kernel (see https://cgogn.github.io) implementing efficiently combinatorial maps to encode the topology and geometrical informations. . The current implementation is based on implementing new topology into new components. The PR introduce the following components: ; - VolumeTopologyContainer ; - CMTetrahedralCorotationalFEMForceField ; - MapTetrahedronSetTopologyContainer (wrapper that allows to use ""classical"" sofa components). The PR is not supposed to be merged in this state and we welcome any feedback on how to improve and generalize this work. EDIT: I (damien) changed the description of the PR trying to summary the discussion. . EDIT 2: ; Steps to compile:; - checkout the branch with a modularized version from [ (https://github.com/mimesis-inria/sofa/tree/cmtopology_module)](https://github.com/mimesis-inria/sofa/tree/cmtopology_module); - checkout CGoGN in a folder sofa/modules/SofaCombinatorialMaps/cgogn2; Compile and run the examples in sofa/modules/SofaCombinatorialMaps/examples. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700
https://github.com/sofa-framework/sofa/pull/700:241,Energy Efficiency,efficient,efficiently,241,"Hi guys,. This PR is a proof of concept to show an alternative implementation dynamic topologies and meshes using the CGOGN library. If you never heard about, CGOGN is a topological modeling kernel (see https://cgogn.github.io) implementing efficiently combinatorial maps to encode the topology and geometrical informations. . The current implementation is based on implementing new topology into new components. The PR introduce the following components: ; - VolumeTopologyContainer ; - CMTetrahedralCorotationalFEMForceField ; - MapTetrahedronSetTopologyContainer (wrapper that allows to use ""classical"" sofa components). The PR is not supposed to be merged in this state and we welcome any feedback on how to improve and generalize this work. EDIT: I (damien) changed the description of the PR trying to summary the discussion. . EDIT 2: ; Steps to compile:; - checkout the branch with a modularized version from [ (https://github.com/mimesis-inria/sofa/tree/cmtopology_module)](https://github.com/mimesis-inria/sofa/tree/cmtopology_module); - checkout CGoGN in a folder sofa/modules/SofaCombinatorialMaps/cgogn2; Compile and run the examples in sofa/modules/SofaCombinatorialMaps/examples. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700
https://github.com/sofa-framework/sofa/pull/700:567,Integrability,wrap,wrapper,567,"Hi guys,. This PR is a proof of concept to show an alternative implementation dynamic topologies and meshes using the CGOGN library. If you never heard about, CGOGN is a topological modeling kernel (see https://cgogn.github.io) implementing efficiently combinatorial maps to encode the topology and geometrical informations. . The current implementation is based on implementing new topology into new components. The PR introduce the following components: ; - VolumeTopologyContainer ; - CMTetrahedralCorotationalFEMForceField ; - MapTetrahedronSetTopologyContainer (wrapper that allows to use ""classical"" sofa components). The PR is not supposed to be merged in this state and we welcome any feedback on how to improve and generalize this work. EDIT: I (damien) changed the description of the PR trying to summary the discussion. . EDIT 2: ; Steps to compile:; - checkout the branch with a modularized version from [ (https://github.com/mimesis-inria/sofa/tree/cmtopology_module)](https://github.com/mimesis-inria/sofa/tree/cmtopology_module); - checkout CGoGN in a folder sofa/modules/SofaCombinatorialMaps/cgogn2; Compile and run the examples in sofa/modules/SofaCombinatorialMaps/examples. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700
https://github.com/sofa-framework/sofa/pull/700:1293,Integrability,message,message,1293,"Hi guys,. This PR is a proof of concept to show an alternative implementation dynamic topologies and meshes using the CGOGN library. If you never heard about, CGOGN is a topological modeling kernel (see https://cgogn.github.io) implementing efficiently combinatorial maps to encode the topology and geometrical informations. . The current implementation is based on implementing new topology into new components. The PR introduce the following components: ; - VolumeTopologyContainer ; - CMTetrahedralCorotationalFEMForceField ; - MapTetrahedronSetTopologyContainer (wrapper that allows to use ""classical"" sofa components). The PR is not supposed to be merged in this state and we welcome any feedback on how to improve and generalize this work. EDIT: I (damien) changed the description of the PR trying to summary the discussion. . EDIT 2: ; Steps to compile:; - checkout the branch with a modularized version from [ (https://github.com/mimesis-inria/sofa/tree/cmtopology_module)](https://github.com/mimesis-inria/sofa/tree/cmtopology_module); - checkout CGoGN in a folder sofa/modules/SofaCombinatorialMaps/cgogn2; Compile and run the examples in sofa/modules/SofaCombinatorialMaps/examples. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700
https://github.com/sofa-framework/sofa/pull/700:1445,Testability,test,test,1445,"Hi guys,. This PR is a proof of concept to show an alternative implementation dynamic topologies and meshes using the CGOGN library. If you never heard about, CGOGN is a topological modeling kernel (see https://cgogn.github.io) implementing efficiently combinatorial maps to encode the topology and geometrical informations. . The current implementation is based on implementing new topology into new components. The PR introduce the following components: ; - VolumeTopologyContainer ; - CMTetrahedralCorotationalFEMForceField ; - MapTetrahedronSetTopologyContainer (wrapper that allows to use ""classical"" sofa components). The PR is not supposed to be merged in this state and we welcome any feedback on how to improve and generalize this work. EDIT: I (damien) changed the description of the PR trying to summary the discussion. . EDIT 2: ; Steps to compile:; - checkout the branch with a modularized version from [ (https://github.com/mimesis-inria/sofa/tree/cmtopology_module)](https://github.com/mimesis-inria/sofa/tree/cmtopology_module); - checkout CGoGN in a folder sofa/modules/SofaCombinatorialMaps/cgogn2; Compile and run the examples in sofa/modules/SofaCombinatorialMaps/examples. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700
https://github.com/sofa-framework/sofa/pull/700:1495,Testability,test,test,1495,"Hi guys,. This PR is a proof of concept to show an alternative implementation dynamic topologies and meshes using the CGOGN library. If you never heard about, CGOGN is a topological modeling kernel (see https://cgogn.github.io) implementing efficiently combinatorial maps to encode the topology and geometrical informations. . The current implementation is based on implementing new topology into new components. The PR introduce the following components: ; - VolumeTopologyContainer ; - CMTetrahedralCorotationalFEMForceField ; - MapTetrahedronSetTopologyContainer (wrapper that allows to use ""classical"" sofa components). The PR is not supposed to be merged in this state and we welcome any feedback on how to improve and generalize this work. EDIT: I (damien) changed the description of the PR trying to summary the discussion. . EDIT 2: ; Steps to compile:; - checkout the branch with a modularized version from [ (https://github.com/mimesis-inria/sofa/tree/cmtopology_module)](https://github.com/mimesis-inria/sofa/tree/cmtopology_module); - checkout CGoGN in a folder sofa/modules/SofaCombinatorialMaps/cgogn2; Compile and run the examples in sofa/modules/SofaCombinatorialMaps/examples. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700
https://github.com/sofa-framework/sofa/pull/700:693,Usability,feedback,feedback,693,"Hi guys,. This PR is a proof of concept to show an alternative implementation dynamic topologies and meshes using the CGOGN library. If you never heard about, CGOGN is a topological modeling kernel (see https://cgogn.github.io) implementing efficiently combinatorial maps to encode the topology and geometrical informations. . The current implementation is based on implementing new topology into new components. The PR introduce the following components: ; - VolumeTopologyContainer ; - CMTetrahedralCorotationalFEMForceField ; - MapTetrahedronSetTopologyContainer (wrapper that allows to use ""classical"" sofa components). The PR is not supposed to be merged in this state and we welcome any feedback on how to improve and generalize this work. EDIT: I (damien) changed the description of the PR trying to summary the discussion. . EDIT 2: ; Steps to compile:; - checkout the branch with a modularized version from [ (https://github.com/mimesis-inria/sofa/tree/cmtopology_module)](https://github.com/mimesis-inria/sofa/tree/cmtopology_module); - checkout CGoGN in a folder sofa/modules/SofaCombinatorialMaps/cgogn2; Compile and run the examples in sofa/modules/SofaCombinatorialMaps/examples. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700
https://github.com/sofa-framework/sofa/pull/701:256,Availability,failure,failures,256,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701
https://github.com/sofa-framework/sofa/pull/701:306,Availability,failure,failures,306,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701
https://github.com/sofa-framework/sofa/pull/701:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701
https://github.com/sofa-framework/sofa/pull/701:251,Testability,test,test,251,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701
https://github.com/sofa-framework/sofa/pull/701:301,Testability,test,test,301,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701
https://github.com/sofa-framework/sofa/pull/702:447,Availability,failure,failures,447,This STC#5 sprint pull-request cleans the whole Scene Checking API.; It also adds a new SceneCheck that warns for alias uses: `SceneCheckUsingAlias`. It's a first step concerning #677 :+1: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/702
https://github.com/sofa-framework/sofa/pull/702:497,Availability,failure,failures,497,This STC#5 sprint pull-request cleans the whole Scene Checking API.; It also adds a new SceneCheck that warns for alias uses: `SceneCheckUsingAlias`. It's a first step concerning #677 :+1: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/702
https://github.com/sofa-framework/sofa/pull/702:290,Integrability,message,message,290,This STC#5 sprint pull-request cleans the whole Scene Checking API.; It also adds a new SceneCheck that warns for alias uses: `SceneCheckUsingAlias`. It's a first step concerning #677 :+1: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/702
https://github.com/sofa-framework/sofa/pull/702:442,Testability,test,test,442,This STC#5 sprint pull-request cleans the whole Scene Checking API.; It also adds a new SceneCheck that warns for alias uses: `SceneCheckUsingAlias`. It's a first step concerning #677 :+1: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/702
https://github.com/sofa-framework/sofa/pull/702:492,Testability,test,test,492,This STC#5 sprint pull-request cleans the whole Scene Checking API.; It also adds a new SceneCheck that warns for alias uses: `SceneCheckUsingAlias`. It's a first step concerning #677 :+1: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/702
https://github.com/sofa-framework/sofa/pull/704:401,Availability,failure,failures,401,Apply the use of drawTool in the open-source core of SOFA. This now makes SOFA a priori independent from OpenGL using the drawTools.; Fix #653 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/704
https://github.com/sofa-framework/sofa/pull/704:451,Availability,failure,failures,451,Apply the use of drawTool in the open-source core of SOFA. This now makes SOFA a priori independent from OpenGL using the drawTools.; Fix #653 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/704
https://github.com/sofa-framework/sofa/pull/704:244,Integrability,message,message,244,Apply the use of drawTool in the open-source core of SOFA. This now makes SOFA a priori independent from OpenGL using the drawTools.; Fix #653 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/704
https://github.com/sofa-framework/sofa/pull/704:396,Testability,test,test,396,Apply the use of drawTool in the open-source core of SOFA. This now makes SOFA a priori independent from OpenGL using the drawTools.; Fix #653 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/704
https://github.com/sofa-framework/sofa/pull/704:446,Testability,test,test,446,Apply the use of drawTool in the open-source core of SOFA. This now makes SOFA a priori independent from OpenGL using the drawTools.; Fix #653 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/704
https://github.com/sofa-framework/sofa/pull/705:351,Availability,failure,failures,351,"Not possible to compile because I don't have opencascade, only rely on visual intellisense.... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/705
https://github.com/sofa-framework/sofa/pull/705:401,Availability,failure,failures,401,"Not possible to compile because I don't have opencascade, only rely on visual intellisense.... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/705
https://github.com/sofa-framework/sofa/pull/705:194,Integrability,message,message,194,"Not possible to compile because I don't have opencascade, only rely on visual intellisense.... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/705
https://github.com/sofa-framework/sofa/pull/705:346,Testability,test,test,346,"Not possible to compile because I don't have opencascade, only rely on visual intellisense.... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/705
https://github.com/sofa-framework/sofa/pull/705:396,Testability,test,test,396,"Not possible to compile because I don't have opencascade, only rely on visual intellisense.... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/705
https://github.com/sofa-framework/sofa/pull/706:339,Availability,failure,failures,339,"Some work on cleaning, adding more check and test on sparseGridTopology component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/706
https://github.com/sofa-framework/sofa/pull/706:389,Availability,failure,failures,389,"Some work on cleaning, adding more check and test on sparseGridTopology component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/706
https://github.com/sofa-framework/sofa/pull/706:182,Integrability,message,message,182,"Some work on cleaning, adding more check and test on sparseGridTopology component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/706
https://github.com/sofa-framework/sofa/pull/706:45,Testability,test,test,45,"Some work on cleaning, adding more check and test on sparseGridTopology component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/706
https://github.com/sofa-framework/sofa/pull/706:334,Testability,test,test,334,"Some work on cleaning, adding more check and test on sparseGridTopology component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/706
https://github.com/sofa-framework/sofa/pull/706:384,Testability,test,test,384,"Some work on cleaning, adding more check and test on sparseGridTopology component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/706
https://github.com/sofa-framework/sofa/pull/707:560,Availability,failure,failures,560,As said in the title this PR puts the forcefield and mapping of beams into components (following the draft of sofa ng organization). CHANGELOG; - cleaning of the forcefield; - creation of the beamMassMatrix; - move of all files. TODO; - add comments to the code; - clean the mapping; - add a test scene. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707
https://github.com/sofa-framework/sofa/pull/707:610,Availability,failure,failures,610,As said in the title this PR puts the forcefield and mapping of beams into components (following the draft of sofa ng organization). CHANGELOG; - cleaning of the forcefield; - creation of the beamMassMatrix; - move of all files. TODO; - add comments to the code; - clean the mapping; - add a test scene. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707
https://github.com/sofa-framework/sofa/pull/707:403,Integrability,message,message,403,As said in the title this PR puts the forcefield and mapping of beams into components (following the draft of sofa ng organization). CHANGELOG; - cleaning of the forcefield; - creation of the beamMassMatrix; - move of all files. TODO; - add comments to the code; - clean the mapping; - add a test scene. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707
https://github.com/sofa-framework/sofa/pull/707:292,Testability,test,test,292,As said in the title this PR puts the forcefield and mapping of beams into components (following the draft of sofa ng organization). CHANGELOG; - cleaning of the forcefield; - creation of the beamMassMatrix; - move of all files. TODO; - add comments to the code; - clean the mapping; - add a test scene. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707
https://github.com/sofa-framework/sofa/pull/707:555,Testability,test,test,555,As said in the title this PR puts the forcefield and mapping of beams into components (following the draft of sofa ng organization). CHANGELOG; - cleaning of the forcefield; - creation of the beamMassMatrix; - move of all files. TODO; - add comments to the code; - clean the mapping; - add a test scene. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707
https://github.com/sofa-framework/sofa/pull/707:605,Testability,test,test,605,As said in the title this PR puts the forcefield and mapping of beams into components (following the draft of sofa ng organization). CHANGELOG; - cleaning of the forcefield; - creation of the beamMassMatrix; - move of all files. TODO; - add comments to the code; - clean the mapping; - add a test scene. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707
https://github.com/sofa-framework/sofa/pull/708:539,Availability,failure,failures,539,as promised since long time ago... There is still a lot of work to do but here is a first set of tests on the topology containers.; - Do not test yet the topological changes.; - Neither more complex algo like incision.; - Nor TopologicalData... it is just the beginning !. FIX #43 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708
https://github.com/sofa-framework/sofa/pull/708:589,Availability,failure,failures,589,as promised since long time ago... There is still a lot of work to do but here is a first set of tests on the topology containers.; - Do not test yet the topological changes.; - Neither more complex algo like incision.; - Nor TopologicalData... it is just the beginning !. FIX #43 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708
https://github.com/sofa-framework/sofa/pull/708:382,Integrability,message,message,382,as promised since long time ago... There is still a lot of work to do but here is a first set of tests on the topology containers.; - Do not test yet the topological changes.; - Neither more complex algo like incision.; - Nor TopologicalData... it is just the beginning !. FIX #43 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708
https://github.com/sofa-framework/sofa/pull/708:97,Testability,test,tests,97,as promised since long time ago... There is still a lot of work to do but here is a first set of tests on the topology containers.; - Do not test yet the topological changes.; - Neither more complex algo like incision.; - Nor TopologicalData... it is just the beginning !. FIX #43 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708
https://github.com/sofa-framework/sofa/pull/708:141,Testability,test,test,141,as promised since long time ago... There is still a lot of work to do but here is a first set of tests on the topology containers.; - Do not test yet the topological changes.; - Neither more complex algo like incision.; - Nor TopologicalData... it is just the beginning !. FIX #43 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708
https://github.com/sofa-framework/sofa/pull/708:534,Testability,test,test,534,as promised since long time ago... There is still a lot of work to do but here is a first set of tests on the topology containers.; - Do not test yet the topological changes.; - Neither more complex algo like incision.; - Nor TopologicalData... it is just the beginning !. FIX #43 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708
https://github.com/sofa-framework/sofa/pull/708:584,Testability,test,test,584,as promised since long time ago... There is still a lot of work to do but here is a first set of tests on the topology containers.; - Do not test yet the topological changes.; - Neither more complex algo like incision.; - Nor TopologicalData... it is just the beginning !. FIX #43 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708
https://github.com/sofa-framework/sofa/issues/709:699,Performance,optimiz,optimization,699,This is an open discussion: ; We have a lot of warning due to 'size_t' to 'unsigned int' / 'int' conversion.; For example: ; ```unsigned int nbdof = this->mstate->getSize();```; or; ``` for (int i=0; i<buffer.size(); ++i) ```. getSize() return a size_t which can be a:; typedef unsigned __int64 size_t; . and not a 32bit unsigned or signed int. So my question is: . Do we really need that sofa::helper::vector getSize return an _int64_ and thus we change to _size_t_ everywhere we access this method?; This means turning a lot of _int_ / _uint_ into _int64_ / _uint64_. Or do we stick to size in _int32_ ; Maybe this has not a big impact in nowadays computer? ; I'm not an expert in software memory optimization. . Or maybe another solution?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/709
https://github.com/sofa-framework/sofa/issues/709:481,Security,access,access,481,This is an open discussion: ; We have a lot of warning due to 'size_t' to 'unsigned int' / 'int' conversion.; For example: ; ```unsigned int nbdof = this->mstate->getSize();```; or; ``` for (int i=0; i<buffer.size(); ++i) ```. getSize() return a size_t which can be a:; typedef unsigned __int64 size_t; . and not a 32bit unsigned or signed int. So my question is: . Do we really need that sofa::helper::vector getSize return an _int64_ and thus we change to _size_t_ everywhere we access this method?; This means turning a lot of _int_ / _uint_ into _int64_ / _uint64_. Or do we stick to size in _int32_ ; Maybe this has not a big impact in nowadays computer? ; I'm not an expert in software memory optimization. . Or maybe another solution?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/709
https://github.com/sofa-framework/sofa/pull/710:444,Availability,failure,failures,444,"FIX: a bug which appeared when the simulation is restarted without restarting SOFA. There is a map-vector (mapOrient) which was not cleared properly (unlike his friend ""map"") which was. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/710
https://github.com/sofa-framework/sofa/pull/710:494,Availability,failure,failures,494,"FIX: a bug which appeared when the simulation is restarted without restarting SOFA. There is a map-vector (mapOrient) which was not cleared properly (unlike his friend ""map"") which was. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/710
https://github.com/sofa-framework/sofa/pull/710:287,Integrability,message,message,287,"FIX: a bug which appeared when the simulation is restarted without restarting SOFA. There is a map-vector (mapOrient) which was not cleared properly (unlike his friend ""map"") which was. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/710
https://github.com/sofa-framework/sofa/pull/710:439,Testability,test,test,439,"FIX: a bug which appeared when the simulation is restarted without restarting SOFA. There is a map-vector (mapOrient) which was not cleared properly (unlike his friend ""map"") which was. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/710
https://github.com/sofa-framework/sofa/pull/710:489,Testability,test,test,489,"FIX: a bug which appeared when the simulation is restarted without restarting SOFA. There is a map-vector (mapOrient) which was not cleared properly (unlike his friend ""map"") which was. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/710
https://github.com/sofa-framework/sofa/pull/710:132,Usability,clear,cleared,132,"FIX: a bug which appeared when the simulation is restarted without restarting SOFA. There is a map-vector (mapOrient) which was not cleared properly (unlike his friend ""map"") which was. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/710
https://github.com/sofa-framework/sofa/pull/711:278,Availability,failure,failures,278,2 more tests :wink: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/711
https://github.com/sofa-framework/sofa/pull/711:328,Availability,failure,failures,328,2 more tests :wink: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/711
https://github.com/sofa-framework/sofa/pull/711:121,Integrability,message,message,121,2 more tests :wink: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/711
https://github.com/sofa-framework/sofa/pull/711:7,Testability,test,tests,7,2 more tests :wink: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/711
https://github.com/sofa-framework/sofa/pull/711:273,Testability,test,test,273,2 more tests :wink: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/711
https://github.com/sofa-framework/sofa/pull/711:323,Testability,test,test,323,2 more tests :wink: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/711
https://github.com/sofa-framework/sofa/pull/712:475,Availability,failure,failures,475,- Fix and add more examples; - Add a carvingDistance parameter to be able to have real collision before carving.; - Add the possiblity to handle several collision models on the target object.; - Clean and Doc the code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/712
https://github.com/sofa-framework/sofa/pull/712:525,Availability,failure,failures,525,- Fix and add more examples; - Add a carvingDistance parameter to be able to have real collision before carving.; - Add the possiblity to handle several collision models on the target object.; - Clean and Doc the code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/712
https://github.com/sofa-framework/sofa/pull/712:318,Integrability,message,message,318,- Fix and add more examples; - Add a carvingDistance parameter to be able to have real collision before carving.; - Add the possiblity to handle several collision models on the target object.; - Clean and Doc the code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/712
https://github.com/sofa-framework/sofa/pull/712:470,Testability,test,test,470,- Fix and add more examples; - Add a carvingDistance parameter to be able to have real collision before carving.; - Add the possiblity to handle several collision models on the target object.; - Clean and Doc the code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/712
https://github.com/sofa-framework/sofa/pull/712:520,Testability,test,test,520,- Fix and add more examples; - Add a carvingDistance parameter to be able to have real collision before carving.; - Add the possiblity to handle several collision models on the target object.; - Clean and Doc the code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/712
https://github.com/sofa-framework/sofa/issues/713:505,Availability,ERROR,ERROR,505,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:639,Availability,ERROR,ERROR,639,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:776,Availability,ERROR,ERROR,776,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:43,Deployability,release,release,43,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:578,Deployability,Release,Release,578,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:712,Deployability,Release,Release,712,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:849,Deployability,Release,Release,849,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:61,Modifiability,plugin,plugins,61,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:157,Modifiability,plugin,plugin,157,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:239,Modifiability,Plugin,PluginManager,239,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:261,Modifiability,plugin,plugin,261,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:335,Modifiability,Plugin,PluginManager,335,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:357,Modifiability,plugin,plugin,357,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:425,Modifiability,Plugin,PluginManager,425,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:447,Modifiability,plugin,plugin,447,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:513,Modifiability,Plugin,PluginManager,513,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:528,Modifiability,Plugin,Plugin,528,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:647,Modifiability,Plugin,PluginManager,647,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:662,Modifiability,Plugin,Plugin,662,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:784,Modifiability,Plugin,PluginManager,784,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:799,Modifiability,Plugin,Plugin,799,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:135,Performance,Load,Loading,135,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:254,Performance,Load,Loaded,254,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:350,Performance,Load,Loaded,350,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:440,Performance,Load,Loaded,440,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:535,Performance,load,loading,535,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:669,Performance,load,loading,669,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/issues/713:806,Performance,load,loading,806,- Using Sofa (maybe it is only runSofa) in release with some plugins.; - Switching to Debug; - launch runSofa_d. ```; [INFO] [runSofa] Loading automatically plugin list in C:/projects/sofa-build/bin/Debug/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaMiscCollision_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/SofaCarving_d.dll; [INFO] [PluginManager] Loaded plugin: C:/projects/sofa-build/bin/Debug/Geomagic_d.dll; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/Geomagic.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaCarving.dll): Le module sp▒cifi▒ est introuvable.; [ERROR] [PluginManager] Plugin loading failed (C:/projects/sofa-build/bin/Release/SofaMiscCollision.dll): Le module sp▒cifi▒ est introuvable.; ```. But this doesn't seems to be blocking.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713
https://github.com/sofa-framework/sofa/pull/714:422,Availability,failure,failures,422,Work of clean further to PR #625 on WriteState and also done for ReadState with:; - check on all data at init and remove unused data; - export with msg; - add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/714
https://github.com/sofa-framework/sofa/pull/714:472,Availability,failure,failures,472,Work of clean further to PR #625 on WriteState and also done for ReadState with:; - check on all data at init and remove unused data; - export with msg; - add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/714
https://github.com/sofa-framework/sofa/pull/714:265,Integrability,message,message,265,Work of clean further to PR #625 on WriteState and also done for ReadState with:; - check on all data at init and remove unused data; - export with msg; - add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/714
https://github.com/sofa-framework/sofa/pull/714:159,Testability,test,tests,159,Work of clean further to PR #625 on WriteState and also done for ReadState with:; - check on all data at init and remove unused data; - export with msg; - add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/714
https://github.com/sofa-framework/sofa/pull/714:417,Testability,test,test,417,Work of clean further to PR #625 on WriteState and also done for ReadState with:; - check on all data at init and remove unused data; - export with msg; - add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/714
https://github.com/sofa-framework/sofa/pull/714:467,Testability,test,test,467,Work of clean further to PR #625 on WriteState and also done for ReadState with:; - check on all data at init and remove unused data; - export with msg; - add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/714
https://github.com/sofa-framework/sofa/pull/715:256,Availability,failure,failures,256,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/715
https://github.com/sofa-framework/sofa/pull/715:306,Availability,failure,failures,306,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/715
https://github.com/sofa-framework/sofa/pull/715:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/715
https://github.com/sofa-framework/sofa/pull/715:251,Testability,test,test,251,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/715
https://github.com/sofa-framework/sofa/pull/715:301,Testability,test,test,301,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/715
https://github.com/sofa-framework/sofa/pull/716:297,Availability,failure,failures,297,Fix the scene as reported in issue #681. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/716
https://github.com/sofa-framework/sofa/pull/716:347,Availability,failure,failures,347,Fix the scene as reported in issue #681. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/716
https://github.com/sofa-framework/sofa/pull/716:140,Integrability,message,message,140,Fix the scene as reported in issue #681. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/716
https://github.com/sofa-framework/sofa/pull/716:292,Testability,test,test,292,Fix the scene as reported in issue #681. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/716
https://github.com/sofa-framework/sofa/pull/716:342,Testability,test,test,342,Fix the scene as reported in issue #681. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/716
https://github.com/sofa-framework/sofa/pull/718:393,Availability,failure,failures,393,"This PR factorizes the code of PartialFixedConstraint by inheriting for most functions (init, draw) from the FixedConstraint; FIX #440 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718
https://github.com/sofa-framework/sofa/pull/718:443,Availability,failure,failures,443,"This PR factorizes the code of PartialFixedConstraint by inheriting for most functions (init, draw) from the FixedConstraint; FIX #440 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718
https://github.com/sofa-framework/sofa/pull/718:236,Integrability,message,message,236,"This PR factorizes the code of PartialFixedConstraint by inheriting for most functions (init, draw) from the FixedConstraint; FIX #440 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718
https://github.com/sofa-framework/sofa/pull/718:57,Modifiability,inherit,inheriting,57,"This PR factorizes the code of PartialFixedConstraint by inheriting for most functions (init, draw) from the FixedConstraint; FIX #440 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718
https://github.com/sofa-framework/sofa/pull/718:388,Testability,test,test,388,"This PR factorizes the code of PartialFixedConstraint by inheriting for most functions (init, draw) from the FixedConstraint; FIX #440 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718
https://github.com/sofa-framework/sofa/pull/718:438,Testability,test,test,438,"This PR factorizes the code of PartialFixedConstraint by inheriting for most functions (init, draw) from the FixedConstraint; FIX #440 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718
https://github.com/sofa-framework/sofa/pull/719:380,Availability,failure,failures,380,CI info: I disabled Defrost MacOS builder to force this PR to build on sofa-ci-dev-macos. To be merged asap (if CI agrees). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719
https://github.com/sofa-framework/sofa/pull/719:430,Availability,failure,failures,430,CI info: I disabled Defrost MacOS builder to force this PR to build on sofa-ci-dev-macos. To be merged asap (if CI agrees). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719
https://github.com/sofa-framework/sofa/pull/719:223,Integrability,message,message,223,CI info: I disabled Defrost MacOS builder to force this PR to build on sofa-ci-dev-macos. To be merged asap (if CI agrees). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719
https://github.com/sofa-framework/sofa/pull/719:375,Testability,test,test,375,CI info: I disabled Defrost MacOS builder to force this PR to build on sofa-ci-dev-macos. To be merged asap (if CI agrees). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719
https://github.com/sofa-framework/sofa/pull/719:425,Testability,test,test,425,CI info: I disabled Defrost MacOS builder to force this PR to build on sofa-ci-dev-macos. To be merged asap (if CI agrees). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719
https://github.com/sofa-framework/sofa/pull/720:460,Availability,failure,failures,460,"This commit adds a directive to instruct CMake to find/use XCode's framework lastly.; E.g if you have installed libpng with homebrew/macport, CMake will use those first instead of the Apple's (old) ones. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/720
https://github.com/sofa-framework/sofa/pull/720:510,Availability,failure,failures,510,"This commit adds a directive to instruct CMake to find/use XCode's framework lastly.; E.g if you have installed libpng with homebrew/macport, CMake will use those first instead of the Apple's (old) ones. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/720
https://github.com/sofa-framework/sofa/pull/720:102,Deployability,install,installed,102,"This commit adds a directive to instruct CMake to find/use XCode's framework lastly.; E.g if you have installed libpng with homebrew/macport, CMake will use those first instead of the Apple's (old) ones. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/720
https://github.com/sofa-framework/sofa/pull/720:303,Integrability,message,message,303,"This commit adds a directive to instruct CMake to find/use XCode's framework lastly.; E.g if you have installed libpng with homebrew/macport, CMake will use those first instead of the Apple's (old) ones. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/720
https://github.com/sofa-framework/sofa/pull/720:455,Testability,test,test,455,"This commit adds a directive to instruct CMake to find/use XCode's framework lastly.; E.g if you have installed libpng with homebrew/macport, CMake will use those first instead of the Apple's (old) ones. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/720
https://github.com/sofa-framework/sofa/pull/720:505,Testability,test,test,505,"This commit adds a directive to instruct CMake to find/use XCode's framework lastly.; E.g if you have installed libpng with homebrew/macport, CMake will use those first instead of the Apple's (old) ones. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/720
https://github.com/sofa-framework/sofa/pull/721:1154,Availability,failure,failures,1154,"This PR:; - adds the new component MechanicalMatrixMapper (formerly called MappedMatrixForceField); - suppress the Cmake option SOFA_WITH_EXPERIMENTAL_FEATURES (Was used for development and is useless now) added in https://github.com/sofa-framework/sofa/pull/276. The component MechanicalMatrixMapper allows to compute the mapped matrices computed by ForceFields under mappings, which are ignored by the SOFA animation loops.; Typical usage would be:; **Node**; MechanicalObject (MO) **q**; MechanicalMatrixMapper (NodeParsed = **MappedNode**) --> computes **J**^T.**K**.**J** and **J**^T.**M**.**J**; .....**MappedNode**; .....MappedMechanicalObject (MMO) **q_m**; .....Mapping (input = ../MO, output = MMO) -> Computes **J**.**q_m**; .....ForceField -> Computes stiffness matrix **K**; .....Mass -> Computes Mass Matrix **M**. Any comments welcome!; (Work with @VannesteFelix @ChristianDuriez ); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/721
https://github.com/sofa-framework/sofa/pull/721:1204,Availability,failure,failures,1204,"This PR:; - adds the new component MechanicalMatrixMapper (formerly called MappedMatrixForceField); - suppress the Cmake option SOFA_WITH_EXPERIMENTAL_FEATURES (Was used for development and is useless now) added in https://github.com/sofa-framework/sofa/pull/276. The component MechanicalMatrixMapper allows to compute the mapped matrices computed by ForceFields under mappings, which are ignored by the SOFA animation loops.; Typical usage would be:; **Node**; MechanicalObject (MO) **q**; MechanicalMatrixMapper (NodeParsed = **MappedNode**) --> computes **J**^T.**K**.**J** and **J**^T.**M**.**J**; .....**MappedNode**; .....MappedMechanicalObject (MMO) **q_m**; .....Mapping (input = ../MO, output = MMO) -> Computes **J**.**q_m**; .....ForceField -> Computes stiffness matrix **K**; .....Mass -> Computes Mass Matrix **M**. Any comments welcome!; (Work with @VannesteFelix @ChristianDuriez ); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/721
https://github.com/sofa-framework/sofa/pull/721:997,Integrability,message,message,997,"This PR:; - adds the new component MechanicalMatrixMapper (formerly called MappedMatrixForceField); - suppress the Cmake option SOFA_WITH_EXPERIMENTAL_FEATURES (Was used for development and is useless now) added in https://github.com/sofa-framework/sofa/pull/276. The component MechanicalMatrixMapper allows to compute the mapped matrices computed by ForceFields under mappings, which are ignored by the SOFA animation loops.; Typical usage would be:; **Node**; MechanicalObject (MO) **q**; MechanicalMatrixMapper (NodeParsed = **MappedNode**) --> computes **J**^T.**K**.**J** and **J**^T.**M**.**J**; .....**MappedNode**; .....MappedMechanicalObject (MMO) **q_m**; .....Mapping (input = ../MO, output = MMO) -> Computes **J**.**q_m**; .....ForceField -> Computes stiffness matrix **K**; .....Mass -> Computes Mass Matrix **M**. Any comments welcome!; (Work with @VannesteFelix @ChristianDuriez ); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/721
https://github.com/sofa-framework/sofa/pull/721:1149,Testability,test,test,1149,"This PR:; - adds the new component MechanicalMatrixMapper (formerly called MappedMatrixForceField); - suppress the Cmake option SOFA_WITH_EXPERIMENTAL_FEATURES (Was used for development and is useless now) added in https://github.com/sofa-framework/sofa/pull/276. The component MechanicalMatrixMapper allows to compute the mapped matrices computed by ForceFields under mappings, which are ignored by the SOFA animation loops.; Typical usage would be:; **Node**; MechanicalObject (MO) **q**; MechanicalMatrixMapper (NodeParsed = **MappedNode**) --> computes **J**^T.**K**.**J** and **J**^T.**M**.**J**; .....**MappedNode**; .....MappedMechanicalObject (MMO) **q_m**; .....Mapping (input = ../MO, output = MMO) -> Computes **J**.**q_m**; .....ForceField -> Computes stiffness matrix **K**; .....Mass -> Computes Mass Matrix **M**. Any comments welcome!; (Work with @VannesteFelix @ChristianDuriez ); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/721
https://github.com/sofa-framework/sofa/pull/721:1199,Testability,test,test,1199,"This PR:; - adds the new component MechanicalMatrixMapper (formerly called MappedMatrixForceField); - suppress the Cmake option SOFA_WITH_EXPERIMENTAL_FEATURES (Was used for development and is useless now) added in https://github.com/sofa-framework/sofa/pull/276. The component MechanicalMatrixMapper allows to compute the mapped matrices computed by ForceFields under mappings, which are ignored by the SOFA animation loops.; Typical usage would be:; **Node**; MechanicalObject (MO) **q**; MechanicalMatrixMapper (NodeParsed = **MappedNode**) --> computes **J**^T.**K**.**J** and **J**^T.**M**.**J**; .....**MappedNode**; .....MappedMechanicalObject (MMO) **q_m**; .....Mapping (input = ../MO, output = MMO) -> Computes **J**.**q_m**; .....ForceField -> Computes stiffness matrix **K**; .....Mass -> Computes Mass Matrix **M**. Any comments welcome!; (Work with @VannesteFelix @ChristianDuriez ); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/721
https://github.com/sofa-framework/sofa/pull/722:269,Availability,failure,failures,269,Fixes #717 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/722
https://github.com/sofa-framework/sofa/pull/722:319,Availability,failure,failures,319,Fixes #717 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/722
https://github.com/sofa-framework/sofa/pull/722:112,Integrability,message,message,112,Fixes #717 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/722
https://github.com/sofa-framework/sofa/pull/722:264,Testability,test,test,264,Fixes #717 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/722
https://github.com/sofa-framework/sofa/pull/722:314,Testability,test,test,314,Fixes #717 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/722
https://github.com/sofa-framework/sofa/issues/725:330,Availability,fault,fault,330,"I have a scene where I create MechanicalObjects after the init phase, from within the onBeginAnimationStep methods of a pythonScriptController. This would immediately spawn the following warning:; > [WARNING] [MechanicalObject(MecaObject)] Invalid vOp operation 1 (null(V_DERIV),0(0),null(V_DERIV),50). followed by a segmentation fault.; In order to show the problem in a simpler scene, I modified the fontain scene in SofaPython to spawn new particles on mouse clicks:. ```; import Sofa; import sys; import random. class Fontain(Sofa.PythonScriptController):. def createCube(self,parentNode,name,x,y,z,vx,vy,vz,color):; node = parentNode.createChild(name). node.createObject('EulerImplicit'); node.createObject('SparseLDLSolver', name=""precond""); object = node.createObject('MechanicalObject',name='MecaObject',template='Rigid'); node.createObject('UniformMass',totalMass=""1""); node.createObject('SphereModel',radius='0.5', group='1'). # VisualNode; VisuNode = node.createChild('Visu'); VisuNode.createObject('OglModel',name='Visual',fileMesh='mesh/PokeCube.obj',color=color); VisuNode.createObject('RigidMapping',input='@..',output='@Visual'). # apply wanted initial translation; #object.applyTranslation(x,y,z); object.findData('position').value=str(x)+' '+str(y)+' '+str(z)+' 0 0 0 1'; object.findData('velocity').value=str(vx)+' '+str(vy)+' '+str(vz)+' 0 0 0'; ; return node. ; # called once the script is loaded; def onLoaded(self,node):; print 'Fontain.onLoaded called from node '+node.name; self.rootNode = node; ; particleCount = 0; def spawnParticle(self):; # create the particle, with a random color; color='red'; colorRandom = random.randint(1,6); if colorRandom==1:; color = 'red'; if colorRandom==2:; color = 'green'; if colorRandom==3:; color = 'blue'; if colorRandom==4:; color = 'yellow'; if colorRandom==5:; color = 'cyan'; if colorRandom==6:; color = 'magenta'; node = self.createCube(self.rootNode,'particle'+str(self.particleCount),0,0,0,random.uniform(-10,10),random.uniform(10,3",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/725
https://github.com/sofa-framework/sofa/issues/725:2379,Availability,toler,tolerance,2379,")+' 0 0 0'; ; return node. ; # called once the script is loaded; def onLoaded(self,node):; print 'Fontain.onLoaded called from node '+node.name; self.rootNode = node; ; particleCount = 0; def spawnParticle(self):; # create the particle, with a random color; color='red'; colorRandom = random.randint(1,6); if colorRandom==1:; color = 'red'; if colorRandom==2:; color = 'green'; if colorRandom==3:; color = 'blue'; if colorRandom==4:; color = 'yellow'; if colorRandom==5:; color = 'cyan'; if colorRandom==6:; color = 'magenta'; node = self.createCube(self.rootNode,'particle'+str(self.particleCount),0,0,0,random.uniform(-10,10),random.uniform(10,30),random.uniform(-10,10),color); self.particleCount+=1; # add the controller script; node.createObject('PythonScriptController', filename='fontain.py', classname='Particle'); return node; ; # optionnally, script can create a graph...; def createGraph(self,node):; node.createObject('FreeMotionAnimationLoop'); node.createObject(""GenericConstraintSolver"", maxIterations=""1000"", tolerance=""0.003"", printLog=""false""); print 'Fontain.createGraph called from node '+node.name ; node = self.spawnParticle(); node.init(); return 0. def onMouseButtonLeft(self, x,y,pressed):; print ""pouet""; node = self.spawnParticle(); node.init(); return 0; ; def onScriptEvent(self,eventName, data, sender):; print 'onScriptEvent eventName='+eventName+' data='+str(data)+' sender='+sender.name; if eventName=='below_floor':; print ""REMOVE CHILD""; self.rootNode.removeChild(senderNode); self.spawnParticle(). class Particle(Sofa.PythonScriptController):; # called once the script is loaded; def onLoaded(self,node):; self.myNode = node; self.particleObject=node.getObject('MecaObject'); ; # called on each animation step; def onBeginAnimationStep(self,dt):; position = self.particleObject.findData('position').value; if position[0][1]<-5.0:; self.myNode.sendScriptEvent('below_floor', 0); return 0; ```. Running this scene does not crash on my machine, but does show the warni",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/725
https://github.com/sofa-framework/sofa/issues/725:1724,Energy Efficiency,green,green,1724,"bject('MechanicalObject',name='MecaObject',template='Rigid'); node.createObject('UniformMass',totalMass=""1""); node.createObject('SphereModel',radius='0.5', group='1'). # VisualNode; VisuNode = node.createChild('Visu'); VisuNode.createObject('OglModel',name='Visual',fileMesh='mesh/PokeCube.obj',color=color); VisuNode.createObject('RigidMapping',input='@..',output='@Visual'). # apply wanted initial translation; #object.applyTranslation(x,y,z); object.findData('position').value=str(x)+' '+str(y)+' '+str(z)+' 0 0 0 1'; object.findData('velocity').value=str(vx)+' '+str(vy)+' '+str(vz)+' 0 0 0'; ; return node. ; # called once the script is loaded; def onLoaded(self,node):; print 'Fontain.onLoaded called from node '+node.name; self.rootNode = node; ; particleCount = 0; def spawnParticle(self):; # create the particle, with a random color; color='red'; colorRandom = random.randint(1,6); if colorRandom==1:; color = 'red'; if colorRandom==2:; color = 'green'; if colorRandom==3:; color = 'blue'; if colorRandom==4:; color = 'yellow'; if colorRandom==5:; color = 'cyan'; if colorRandom==6:; color = 'magenta'; node = self.createCube(self.rootNode,'particle'+str(self.particleCount),0,0,0,random.uniform(-10,10),random.uniform(10,30),random.uniform(-10,10),color); self.particleCount+=1; # add the controller script; node.createObject('PythonScriptController', filename='fontain.py', classname='Particle'); return node; ; # optionnally, script can create a graph...; def createGraph(self,node):; node.createObject('FreeMotionAnimationLoop'); node.createObject(""GenericConstraintSolver"", maxIterations=""1000"", tolerance=""0.003"", printLog=""false""); print 'Fontain.createGraph called from node '+node.name ; node = self.spawnParticle(); node.init(); return 0. def onMouseButtonLeft(self, x,y,pressed):; print ""pouet""; node = self.spawnParticle(); node.init(); return 0; ; def onScriptEvent(self,eventName, data, sender):; print 'onScriptEvent eventName='+eventName+' data='+str(data)+' sender='+sender.n",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/725
https://github.com/sofa-framework/sofa/issues/725:1411,Performance,load,loaded,1411,"ofaPython to spawn new particles on mouse clicks:. ```; import Sofa; import sys; import random. class Fontain(Sofa.PythonScriptController):. def createCube(self,parentNode,name,x,y,z,vx,vy,vz,color):; node = parentNode.createChild(name). node.createObject('EulerImplicit'); node.createObject('SparseLDLSolver', name=""precond""); object = node.createObject('MechanicalObject',name='MecaObject',template='Rigid'); node.createObject('UniformMass',totalMass=""1""); node.createObject('SphereModel',radius='0.5', group='1'). # VisualNode; VisuNode = node.createChild('Visu'); VisuNode.createObject('OglModel',name='Visual',fileMesh='mesh/PokeCube.obj',color=color); VisuNode.createObject('RigidMapping',input='@..',output='@Visual'). # apply wanted initial translation; #object.applyTranslation(x,y,z); object.findData('position').value=str(x)+' '+str(y)+' '+str(z)+' 0 0 0 1'; object.findData('velocity').value=str(vx)+' '+str(vy)+' '+str(vz)+' 0 0 0'; ; return node. ; # called once the script is loaded; def onLoaded(self,node):; print 'Fontain.onLoaded called from node '+node.name; self.rootNode = node; ; particleCount = 0; def spawnParticle(self):; # create the particle, with a random color; color='red'; colorRandom = random.randint(1,6); if colorRandom==1:; color = 'red'; if colorRandom==2:; color = 'green'; if colorRandom==3:; color = 'blue'; if colorRandom==4:; color = 'yellow'; if colorRandom==5:; color = 'cyan'; if colorRandom==6:; color = 'magenta'; node = self.createCube(self.rootNode,'particle'+str(self.particleCount),0,0,0,random.uniform(-10,10),random.uniform(10,30),random.uniform(-10,10),color); self.particleCount+=1; # add the controller script; node.createObject('PythonScriptController', filename='fontain.py', classname='Particle'); return node; ; # optionnally, script can create a graph...; def createGraph(self,node):; node.createObject('FreeMotionAnimationLoop'); node.createObject(""GenericConstraintSolver"", maxIterations=""1000"", tolerance=""0.003"", printLog=""false""); pri",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/725
https://github.com/sofa-framework/sofa/issues/725:2962,Performance,load,loaded,2962,"with a random color; color='red'; colorRandom = random.randint(1,6); if colorRandom==1:; color = 'red'; if colorRandom==2:; color = 'green'; if colorRandom==3:; color = 'blue'; if colorRandom==4:; color = 'yellow'; if colorRandom==5:; color = 'cyan'; if colorRandom==6:; color = 'magenta'; node = self.createCube(self.rootNode,'particle'+str(self.particleCount),0,0,0,random.uniform(-10,10),random.uniform(10,30),random.uniform(-10,10),color); self.particleCount+=1; # add the controller script; node.createObject('PythonScriptController', filename='fontain.py', classname='Particle'); return node; ; # optionnally, script can create a graph...; def createGraph(self,node):; node.createObject('FreeMotionAnimationLoop'); node.createObject(""GenericConstraintSolver"", maxIterations=""1000"", tolerance=""0.003"", printLog=""false""); print 'Fontain.createGraph called from node '+node.name ; node = self.spawnParticle(); node.init(); return 0. def onMouseButtonLeft(self, x,y,pressed):; print ""pouet""; node = self.spawnParticle(); node.init(); return 0; ; def onScriptEvent(self,eventName, data, sender):; print 'onScriptEvent eventName='+eventName+' data='+str(data)+' sender='+sender.name; if eventName=='below_floor':; print ""REMOVE CHILD""; self.rootNode.removeChild(senderNode); self.spawnParticle(). class Particle(Sofa.PythonScriptController):; # called once the script is loaded; def onLoaded(self,node):; self.myNode = node; self.particleObject=node.getObject('MecaObject'); ; # called on each animation step; def onBeginAnimationStep(self,dt):; position = self.particleObject.findData('position').value; if position[0][1]<-5.0:; self.myNode.sendScriptEvent('below_floor', 0); return 0; ```. Running this scene does not crash on my machine, but does show the warning (probably because free_position is not set / modified by the scene. ; Seems like a major bug to me. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/725
https://github.com/sofa-framework/sofa/issues/725:372,Usability,simpl,simpler,372,"I have a scene where I create MechanicalObjects after the init phase, from within the onBeginAnimationStep methods of a pythonScriptController. This would immediately spawn the following warning:; > [WARNING] [MechanicalObject(MecaObject)] Invalid vOp operation 1 (null(V_DERIV),0(0),null(V_DERIV),50). followed by a segmentation fault.; In order to show the problem in a simpler scene, I modified the fontain scene in SofaPython to spawn new particles on mouse clicks:. ```; import Sofa; import sys; import random. class Fontain(Sofa.PythonScriptController):. def createCube(self,parentNode,name,x,y,z,vx,vy,vz,color):; node = parentNode.createChild(name). node.createObject('EulerImplicit'); node.createObject('SparseLDLSolver', name=""precond""); object = node.createObject('MechanicalObject',name='MecaObject',template='Rigid'); node.createObject('UniformMass',totalMass=""1""); node.createObject('SphereModel',radius='0.5', group='1'). # VisualNode; VisuNode = node.createChild('Visu'); VisuNode.createObject('OglModel',name='Visual',fileMesh='mesh/PokeCube.obj',color=color); VisuNode.createObject('RigidMapping',input='@..',output='@Visual'). # apply wanted initial translation; #object.applyTranslation(x,y,z); object.findData('position').value=str(x)+' '+str(y)+' '+str(z)+' 0 0 0 1'; object.findData('velocity').value=str(vx)+' '+str(vy)+' '+str(vz)+' 0 0 0'; ; return node. ; # called once the script is loaded; def onLoaded(self,node):; print 'Fontain.onLoaded called from node '+node.name; self.rootNode = node; ; particleCount = 0; def spawnParticle(self):; # create the particle, with a random color; color='red'; colorRandom = random.randint(1,6); if colorRandom==1:; color = 'red'; if colorRandom==2:; color = 'green'; if colorRandom==3:; color = 'blue'; if colorRandom==4:; color = 'yellow'; if colorRandom==5:; color = 'cyan'; if colorRandom==6:; color = 'magenta'; node = self.createCube(self.rootNode,'particle'+str(self.particleCount),0,0,0,random.uniform(-10,10),random.uniform(10,3",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/725
https://github.com/sofa-framework/sofa/pull/726:433,Availability,failure,failures,433,- use some size_t instead of int in the topology_test; - Change the update method from the mass to return the bool update as result.; - some small warning fix in other classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/726
https://github.com/sofa-framework/sofa/pull/726:483,Availability,failure,failures,483,- use some size_t instead of int in the topology_test; - Change the update method from the mass to return the bool update as result.; - some small warning fix in other classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/726
https://github.com/sofa-framework/sofa/pull/726:68,Deployability,update,update,68,- use some size_t instead of int in the topology_test; - Change the update method from the mass to return the bool update as result.; - some small warning fix in other classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/726
https://github.com/sofa-framework/sofa/pull/726:115,Deployability,update,update,115,- use some size_t instead of int in the topology_test; - Change the update method from the mass to return the bool update as result.; - some small warning fix in other classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/726
https://github.com/sofa-framework/sofa/pull/726:276,Integrability,message,message,276,- use some size_t instead of int in the topology_test; - Change the update method from the mass to return the bool update as result.; - some small warning fix in other classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/726
https://github.com/sofa-framework/sofa/pull/726:428,Testability,test,test,428,- use some size_t instead of int in the topology_test; - Change the update method from the mass to return the bool update as result.; - some small warning fix in other classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/726
https://github.com/sofa-framework/sofa/pull/726:478,Testability,test,test,478,- use some size_t instead of int in the topology_test; - Change the update method from the mass to return the bool update as result.; - some small warning fix in other classes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/726
https://github.com/sofa-framework/sofa/pull/727:369,Availability,failure,failures,369,No support of thread local vars in mac_Clang 3.5 compiler.; This looks like a mac_Clang 3.5 compiler limitation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727
https://github.com/sofa-framework/sofa/pull/727:419,Availability,failure,failures,419,No support of thread local vars in mac_Clang 3.5 compiler.; This looks like a mac_Clang 3.5 compiler limitation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727
https://github.com/sofa-framework/sofa/pull/727:212,Integrability,message,message,212,No support of thread local vars in mac_Clang 3.5 compiler.; This looks like a mac_Clang 3.5 compiler limitation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727
https://github.com/sofa-framework/sofa/pull/727:364,Testability,test,test,364,No support of thread local vars in mac_Clang 3.5 compiler.; This looks like a mac_Clang 3.5 compiler limitation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727
https://github.com/sofa-framework/sofa/pull/727:414,Testability,test,test,414,No support of thread local vars in mac_Clang 3.5 compiler.; This looks like a mac_Clang 3.5 compiler limitation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727
https://github.com/sofa-framework/sofa/pull/728:370,Availability,failure,failures,370,Capture::screenshot() does not work with anti-aliased (MSAA) OpenGL rendering.; Using instead built-in Qt method. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/728
https://github.com/sofa-framework/sofa/pull/728:420,Availability,failure,failures,420,Capture::screenshot() does not work with anti-aliased (MSAA) OpenGL rendering.; Using instead built-in Qt method. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/728
https://github.com/sofa-framework/sofa/pull/728:213,Integrability,message,message,213,Capture::screenshot() does not work with anti-aliased (MSAA) OpenGL rendering.; Using instead built-in Qt method. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/728
https://github.com/sofa-framework/sofa/pull/728:365,Testability,test,test,365,Capture::screenshot() does not work with anti-aliased (MSAA) OpenGL rendering.; Using instead built-in Qt method. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/728
https://github.com/sofa-framework/sofa/pull/728:415,Testability,test,test,415,Capture::screenshot() does not work with anti-aliased (MSAA) OpenGL rendering.; Using instead built-in Qt method. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/728
https://github.com/sofa-framework/sofa/pull/729:358,Availability,failure,failures,358,Only did some base classes that were generating multiple warnings.; And also the topology containers. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/729
https://github.com/sofa-framework/sofa/pull/729:408,Availability,failure,failures,408,Only did some base classes that were generating multiple warnings.; And also the topology containers. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/729
https://github.com/sofa-framework/sofa/pull/729:201,Integrability,message,message,201,Only did some base classes that were generating multiple warnings.; And also the topology containers. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/729
https://github.com/sofa-framework/sofa/pull/729:353,Testability,test,test,353,Only did some base classes that were generating multiple warnings.; And also the topology containers. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/729
https://github.com/sofa-framework/sofa/pull/729:403,Testability,test,test,403,Only did some base classes that were generating multiple warnings.; And also the topology containers. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/729
https://github.com/sofa-framework/sofa/pull/730:513,Availability,failure,failures,513,But default google test prints raw values when the tests cases are provided by GetParams. ; By adding a PrintTo function this behavior can be changed so that custom types are easier ; to read. . In the PR i adds a PrintTo for the Python_test_data object. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/730
https://github.com/sofa-framework/sofa/pull/730:563,Availability,failure,failures,563,But default google test prints raw values when the tests cases are provided by GetParams. ; By adding a PrintTo function this behavior can be changed so that custom types are easier ; to read. . In the PR i adds a PrintTo for the Python_test_data object. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/730
https://github.com/sofa-framework/sofa/pull/730:356,Integrability,message,message,356,But default google test prints raw values when the tests cases are provided by GetParams. ; By adding a PrintTo function this behavior can be changed so that custom types are easier ; to read. . In the PR i adds a PrintTo for the Python_test_data object. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/730
https://github.com/sofa-framework/sofa/pull/730:19,Testability,test,test,19,But default google test prints raw values when the tests cases are provided by GetParams. ; By adding a PrintTo function this behavior can be changed so that custom types are easier ; to read. . In the PR i adds a PrintTo for the Python_test_data object. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/730
https://github.com/sofa-framework/sofa/pull/730:51,Testability,test,tests,51,But default google test prints raw values when the tests cases are provided by GetParams. ; By adding a PrintTo function this behavior can be changed so that custom types are easier ; to read. . In the PR i adds a PrintTo for the Python_test_data object. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/730
https://github.com/sofa-framework/sofa/pull/730:508,Testability,test,test,508,But default google test prints raw values when the tests cases are provided by GetParams. ; By adding a PrintTo function this behavior can be changed so that custom types are easier ; to read. . In the PR i adds a PrintTo for the Python_test_data object. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/730
https://github.com/sofa-framework/sofa/pull/730:558,Testability,test,test,558,But default google test prints raw values when the tests cases are provided by GetParams. ; By adding a PrintTo function this behavior can be changed so that custom types are easier ; to read. . In the PR i adds a PrintTo for the Python_test_data object. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/730
https://github.com/sofa-framework/sofa/pull/731:345,Availability,failure,failures,345,This is very useful to implement any kind of 3D interaction in the python controllers. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/731
https://github.com/sofa-framework/sofa/pull/731:395,Availability,failure,failures,395,This is very useful to implement any kind of 3D interaction in the python controllers. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/731
https://github.com/sofa-framework/sofa/pull/731:188,Integrability,message,message,188,This is very useful to implement any kind of 3D interaction in the python controllers. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/731
https://github.com/sofa-framework/sofa/pull/731:340,Testability,test,test,340,This is very useful to implement any kind of 3D interaction in the python controllers. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/731
https://github.com/sofa-framework/sofa/pull/731:390,Testability,test,test,390,This is very useful to implement any kind of 3D interaction in the python controllers. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/731
https://github.com/sofa-framework/sofa/pull/732:421,Availability,failure,failures,421,"As in SofaNG we are calling the activable/deactivable 'plugins' modules; I added a macro that have the right ""name"" instead of hijacking the; sofa_add_plugin's one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732
https://github.com/sofa-framework/sofa/pull/732:471,Availability,failure,failures,471,"As in SofaNG we are calling the activable/deactivable 'plugins' modules; I added a macro that have the right ""name"" instead of hijacking the; sofa_add_plugin's one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732
https://github.com/sofa-framework/sofa/pull/732:264,Integrability,message,message,264,"As in SofaNG we are calling the activable/deactivable 'plugins' modules; I added a macro that have the right ""name"" instead of hijacking the; sofa_add_plugin's one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732
https://github.com/sofa-framework/sofa/pull/732:55,Modifiability,plugin,plugins,55,"As in SofaNG we are calling the activable/deactivable 'plugins' modules; I added a macro that have the right ""name"" instead of hijacking the; sofa_add_plugin's one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732
https://github.com/sofa-framework/sofa/pull/732:416,Testability,test,test,416,"As in SofaNG we are calling the activable/deactivable 'plugins' modules; I added a macro that have the right ""name"" instead of hijacking the; sofa_add_plugin's one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732
https://github.com/sofa-framework/sofa/pull/732:466,Testability,test,test,466,"As in SofaNG we are calling the activable/deactivable 'plugins' modules; I added a macro that have the right ""name"" instead of hijacking the; sofa_add_plugin's one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732
https://github.com/sofa-framework/sofa/pull/733:338,Availability,failure,failures,338,I had nothing to do in the past 10 minutes...so I did harmless cleaning to relax. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/733
https://github.com/sofa-framework/sofa/pull/733:388,Availability,failure,failures,388,I had nothing to do in the past 10 minutes...so I did harmless cleaning to relax. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/733
https://github.com/sofa-framework/sofa/pull/733:181,Integrability,message,message,181,I had nothing to do in the past 10 minutes...so I did harmless cleaning to relax. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/733
https://github.com/sofa-framework/sofa/pull/733:333,Testability,test,test,333,I had nothing to do in the past 10 minutes...so I did harmless cleaning to relax. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/733
https://github.com/sofa-framework/sofa/pull/733:383,Testability,test,test,383,I had nothing to do in the past 10 minutes...so I did harmless cleaning to relax. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/733
https://github.com/sofa-framework/sofa/pull/734:637,Availability,failure,failures,637,Cython is a de-facto standard to make ease binding between C++ and python. I use it to make 'per plugin' binding and will probably submit some in future PR. ; To ease the writing of cmake of these binding it is nice to detect if cython is installed what this file is doing. . The file is taken from (all credit should go to them):; https://github.com/thewtex/cython-cmake-example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/734
https://github.com/sofa-framework/sofa/pull/734:687,Availability,failure,failures,687,Cython is a de-facto standard to make ease binding between C++ and python. I use it to make 'per plugin' binding and will probably submit some in future PR. ; To ease the writing of cmake of these binding it is nice to detect if cython is installed what this file is doing. . The file is taken from (all credit should go to them):; https://github.com/thewtex/cython-cmake-example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/734
https://github.com/sofa-framework/sofa/pull/734:239,Deployability,install,installed,239,Cython is a de-facto standard to make ease binding between C++ and python. I use it to make 'per plugin' binding and will probably submit some in future PR. ; To ease the writing of cmake of these binding it is nice to detect if cython is installed what this file is doing. . The file is taken from (all credit should go to them):; https://github.com/thewtex/cython-cmake-example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/734
https://github.com/sofa-framework/sofa/pull/734:480,Integrability,message,message,480,Cython is a de-facto standard to make ease binding between C++ and python. I use it to make 'per plugin' binding and will probably submit some in future PR. ; To ease the writing of cmake of these binding it is nice to detect if cython is installed what this file is doing. . The file is taken from (all credit should go to them):; https://github.com/thewtex/cython-cmake-example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/734
https://github.com/sofa-framework/sofa/pull/734:97,Modifiability,plugin,plugin,97,Cython is a de-facto standard to make ease binding between C++ and python. I use it to make 'per plugin' binding and will probably submit some in future PR. ; To ease the writing of cmake of these binding it is nice to detect if cython is installed what this file is doing. . The file is taken from (all credit should go to them):; https://github.com/thewtex/cython-cmake-example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/734
https://github.com/sofa-framework/sofa/pull/734:219,Safety,detect,detect,219,Cython is a de-facto standard to make ease binding between C++ and python. I use it to make 'per plugin' binding and will probably submit some in future PR. ; To ease the writing of cmake of these binding it is nice to detect if cython is installed what this file is doing. . The file is taken from (all credit should go to them):; https://github.com/thewtex/cython-cmake-example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/734
https://github.com/sofa-framework/sofa/pull/734:632,Testability,test,test,632,Cython is a de-facto standard to make ease binding between C++ and python. I use it to make 'per plugin' binding and will probably submit some in future PR. ; To ease the writing of cmake of these binding it is nice to detect if cython is installed what this file is doing. . The file is taken from (all credit should go to them):; https://github.com/thewtex/cython-cmake-example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/734
https://github.com/sofa-framework/sofa/pull/734:682,Testability,test,test,682,Cython is a de-facto standard to make ease binding between C++ and python. I use it to make 'per plugin' binding and will probably submit some in future PR. ; To ease the writing of cmake of these binding it is nice to detect if cython is installed what this file is doing. . The file is taken from (all credit should go to them):; https://github.com/thewtex/cython-cmake-example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/734
https://github.com/sofa-framework/sofa/pull/735:2717,Availability,failure,failures,2717,"w():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:2767,Availability,failure,failures,2767,"w():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:1361,Deployability,install,installing,1361,">setSelectionFromPath({""/root/child1/object"", ""/root/child1/object2""}); ; //// This should be on the client side; SofaEditor::ID id = SofaEditor::getIdFromEditorName(""main"");; shared_ptr<SofaEditorState> s = SofaEditor::getState(id);; auto& v = s->getSelection(); ; ```. It is more common to have the client side in a PythonScriptController. To make that possible this module have a python binding which allows to write interesting editing interaction in python:; ```python; from SofaEditor import SofaEditor. def onDraw():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & s",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:1401,Deployability,install,install,1401,">setSelectionFromPath({""/root/child1/object"", ""/root/child1/object2""}); ; //// This should be on the client side; SofaEditor::ID id = SofaEditor::getIdFromEditorName(""main"");; shared_ptr<SofaEditorState> s = SofaEditor::getState(id);; auto& v = s->getSelection(); ; ```. It is more common to have the client side in a PythonScriptController. To make that possible this module have a python binding which allows to write interesting editing interaction in python:; ```python; from SofaEditor import SofaEditor. def onDraw():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & s",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:1757,Deployability,integrat,integrate,1757,"t possible this module have a python binding which allows to write interesting editing interaction in python:; ```python; from SofaEditor import SofaEditor. def onDraw():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test fa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:1757,Integrability,integrat,integrate,1757,"t possible this module have a python binding which allows to write interesting editing interaction in python:; ```python; from SofaEditor import SofaEditor. def onDraw():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test fa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:2121,Integrability,message,messages,2121,"w():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:2560,Integrability,message,message,2560,"w():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:1721,Modifiability,plugin,plugins,1721,"o& v = s->getSelection(); ; ```. It is more common to have the client side in a PythonScriptController. To make that possible this module have a python binding which allows to write interesting editing interaction in python:; ```python; from SofaEditor import SofaEditor. def onDraw():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:2112,Modifiability,flexible,flexible,2112,"w():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:2712,Testability,test,test,2712,"w():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:2762,Testability,test,test,2762,"w():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:2199,Usability,simpl,simpler,2199,"w():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:2211,Usability,simpl,simply,2211,"w():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:2373,Usability,simpl,simplest,2373,"w():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:2392,Usability,simpl,simpler,2392,"w():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/735:2415,Usability,simpl,simpler,2415,"w():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735
https://github.com/sofa-framework/sofa/pull/736:899,Availability,failure,failures,899,"This PR contains the code required to retrieve a component's bounding box in Python, and to manually call for a BaseObject's computeBBox method. This was necessary in my case to create a RegularGrid from a mesh, since contrary to the sparseGrid, the regularGrid does not look at the node's MechanicalObject to create the grid.; An example scene in this PR shows my specific use case. Concerning the bindings, I made the BoundingBox's minBBox and maxBBox read only since this should be computed by the component, and not set externally IMHO. Could be useful to bind the different methods of BoundingBox too, but this is not covered in this PR. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/736
https://github.com/sofa-framework/sofa/pull/736:949,Availability,failure,failures,949,"This PR contains the code required to retrieve a component's bounding box in Python, and to manually call for a BaseObject's computeBBox method. This was necessary in my case to create a RegularGrid from a mesh, since contrary to the sparseGrid, the regularGrid does not look at the node's MechanicalObject to create the grid.; An example scene in this PR shows my specific use case. Concerning the bindings, I made the BoundingBox's minBBox and maxBBox read only since this should be computed by the component, and not set externally IMHO. Could be useful to bind the different methods of BoundingBox too, but this is not covered in this PR. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/736
https://github.com/sofa-framework/sofa/pull/736:742,Integrability,message,message,742,"This PR contains the code required to retrieve a component's bounding box in Python, and to manually call for a BaseObject's computeBBox method. This was necessary in my case to create a RegularGrid from a mesh, since contrary to the sparseGrid, the regularGrid does not look at the node's MechanicalObject to create the grid.; An example scene in this PR shows my specific use case. Concerning the bindings, I made the BoundingBox's minBBox and maxBBox read only since this should be computed by the component, and not set externally IMHO. Could be useful to bind the different methods of BoundingBox too, but this is not covered in this PR. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/736
https://github.com/sofa-framework/sofa/pull/736:894,Testability,test,test,894,"This PR contains the code required to retrieve a component's bounding box in Python, and to manually call for a BaseObject's computeBBox method. This was necessary in my case to create a RegularGrid from a mesh, since contrary to the sparseGrid, the regularGrid does not look at the node's MechanicalObject to create the grid.; An example scene in this PR shows my specific use case. Concerning the bindings, I made the BoundingBox's minBBox and maxBBox read only since this should be computed by the component, and not set externally IMHO. Could be useful to bind the different methods of BoundingBox too, but this is not covered in this PR. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/736
https://github.com/sofa-framework/sofa/pull/736:944,Testability,test,test,944,"This PR contains the code required to retrieve a component's bounding box in Python, and to manually call for a BaseObject's computeBBox method. This was necessary in my case to create a RegularGrid from a mesh, since contrary to the sparseGrid, the regularGrid does not look at the node's MechanicalObject to create the grid.; An example scene in this PR shows my specific use case. Concerning the bindings, I made the BoundingBox's minBBox and maxBBox read only since this should be computed by the component, and not set externally IMHO. Could be useful to bind the different methods of BoundingBox too, but this is not covered in this PR. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/736
https://github.com/sofa-framework/sofa/pull/737:400,Availability,failure,failures,400,This PR fixes ShewchukPCGLinearSolver member `preconditioners` initialization.; Should fix the failing scene test `FEMBAR-PCGLinearSolver.scn`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/737
https://github.com/sofa-framework/sofa/pull/737:450,Availability,failure,failures,450,This PR fixes ShewchukPCGLinearSolver member `preconditioners` initialization.; Should fix the failing scene test `FEMBAR-PCGLinearSolver.scn`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/737
https://github.com/sofa-framework/sofa/pull/737:243,Integrability,message,message,243,This PR fixes ShewchukPCGLinearSolver member `preconditioners` initialization.; Should fix the failing scene test `FEMBAR-PCGLinearSolver.scn`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/737
https://github.com/sofa-framework/sofa/pull/737:109,Testability,test,test,109,This PR fixes ShewchukPCGLinearSolver member `preconditioners` initialization.; Should fix the failing scene test `FEMBAR-PCGLinearSolver.scn`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/737
https://github.com/sofa-framework/sofa/pull/737:395,Testability,test,test,395,This PR fixes ShewchukPCGLinearSolver member `preconditioners` initialization.; Should fix the failing scene test `FEMBAR-PCGLinearSolver.scn`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/737
https://github.com/sofa-framework/sofa/pull/737:445,Testability,test,test,445,This PR fixes ShewchukPCGLinearSolver member `preconditioners` initialization.; Should fix the failing scene test `FEMBAR-PCGLinearSolver.scn`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/737
https://github.com/sofa-framework/sofa/pull/738:411,Availability,failure,failures,411,"Warning specific to windows fixed for function specialization (class templated, set the specialization in cpp), fix some headers (Mapping & MultiMapping). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/738
https://github.com/sofa-framework/sofa/pull/738:461,Availability,failure,failures,461,"Warning specific to windows fixed for function specialization (class templated, set the specialization in cpp), fix some headers (Mapping & MultiMapping). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/738
https://github.com/sofa-framework/sofa/pull/738:254,Integrability,message,message,254,"Warning specific to windows fixed for function specialization (class templated, set the specialization in cpp), fix some headers (Mapping & MultiMapping). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/738
https://github.com/sofa-framework/sofa/pull/738:406,Testability,test,test,406,"Warning specific to windows fixed for function specialization (class templated, set the specialization in cpp), fix some headers (Mapping & MultiMapping). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/738
https://github.com/sofa-framework/sofa/pull/738:456,Testability,test,test,456,"Warning specific to windows fixed for function specialization (class templated, set the specialization in cpp), fix some headers (Mapping & MultiMapping). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/738
https://github.com/sofa-framework/sofa/pull/739:287,Availability,failure,failures,287,Minor PR fixing some warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/739
https://github.com/sofa-framework/sofa/pull/739:337,Availability,failure,failures,337,Minor PR fixing some warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/739
https://github.com/sofa-framework/sofa/pull/739:130,Integrability,message,message,130,Minor PR fixing some warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/739
https://github.com/sofa-framework/sofa/pull/739:282,Testability,test,test,282,Minor PR fixing some warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/739
https://github.com/sofa-framework/sofa/pull/739:332,Testability,test,test,332,Minor PR fixing some warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/739
https://github.com/sofa-framework/sofa/pull/740:365,Availability,failure,failures,365,Part 1 of #629 This PR creates more Sofa Types in the PSDEFactory and uses a cpp-style typename convention . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/740
https://github.com/sofa-framework/sofa/pull/740:415,Availability,failure,failures,415,Part 1 of #629 This PR creates more Sofa Types in the PSDEFactory and uses a cpp-style typename convention . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/740
https://github.com/sofa-framework/sofa/pull/740:208,Integrability,message,message,208,Part 1 of #629 This PR creates more Sofa Types in the PSDEFactory and uses a cpp-style typename convention . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/740
https://github.com/sofa-framework/sofa/pull/740:360,Testability,test,test,360,Part 1 of #629 This PR creates more Sofa Types in the PSDEFactory and uses a cpp-style typename convention . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/740
https://github.com/sofa-framework/sofa/pull/740:410,Testability,test,test,410,Part 1 of #629 This PR creates more Sofa Types in the PSDEFactory and uses a cpp-style typename convention . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/740
https://github.com/sofa-framework/sofa/pull/741:1634,Availability,failure,failures,1634,"Here it is! This PR adds a new NG component: Sofa.Helper.Bvh. How to reproduce:; 1. Checkout [sofa2ng](https://github.com/guparan/sofa2ng) in the `tools` folder of your SOFA; 2. cd into sofa2ng and run `deploy.sh recipes/Sofa.Helper.Bvh.rcpy`; 3. Integrate your new NG module into SOFA by hand. How to integrate (things not done by sofa2ng):; - Create all NG structure if needed (here I created Sofa.Helper); - `add_subdirectory` your module at the right place (here I did it in SofaFramework/CMakeLists.txt); - Link your module to SOFA old modules when needed; - Remove old file inclusions in CMake (here it was in sofa/helper/CMakeLists.txt). ***************; **Summary:**; - The recipe I used with sofa2ng is here: [Sofa.Helper.Bvh.rcpy](https://github.com/guparan/sofa2ng/blob/master/recipes/Sofa.Helper.Bvh.rcpy); - The result of recipe application is here: https://github.com/sofa-framework/sofa/pull/741/commits/2c729aa646866c2b01792069e95d47cc450edcca; - The changes I did by hand are here: https://github.com/sofa-framework/sofa/pull/741/commits/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6 (patch version [here](https://github.com/sofa-framework/sofa/commit/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6.patch)); ***************. This is the right place to discuss about SOFA-NG, do not hesitate to comment!. I let this here and I go to vacation, see you in two weeks :wink: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/741
https://github.com/sofa-framework/sofa/pull/741:1684,Availability,failure,failures,1684,"Here it is! This PR adds a new NG component: Sofa.Helper.Bvh. How to reproduce:; 1. Checkout [sofa2ng](https://github.com/guparan/sofa2ng) in the `tools` folder of your SOFA; 2. cd into sofa2ng and run `deploy.sh recipes/Sofa.Helper.Bvh.rcpy`; 3. Integrate your new NG module into SOFA by hand. How to integrate (things not done by sofa2ng):; - Create all NG structure if needed (here I created Sofa.Helper); - `add_subdirectory` your module at the right place (here I did it in SofaFramework/CMakeLists.txt); - Link your module to SOFA old modules when needed; - Remove old file inclusions in CMake (here it was in sofa/helper/CMakeLists.txt). ***************; **Summary:**; - The recipe I used with sofa2ng is here: [Sofa.Helper.Bvh.rcpy](https://github.com/guparan/sofa2ng/blob/master/recipes/Sofa.Helper.Bvh.rcpy); - The result of recipe application is here: https://github.com/sofa-framework/sofa/pull/741/commits/2c729aa646866c2b01792069e95d47cc450edcca; - The changes I did by hand are here: https://github.com/sofa-framework/sofa/pull/741/commits/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6 (patch version [here](https://github.com/sofa-framework/sofa/commit/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6.patch)); ***************. This is the right place to discuss about SOFA-NG, do not hesitate to comment!. I let this here and I go to vacation, see you in two weeks :wink: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/741
https://github.com/sofa-framework/sofa/pull/741:203,Deployability,deploy,deploy,203,"Here it is! This PR adds a new NG component: Sofa.Helper.Bvh. How to reproduce:; 1. Checkout [sofa2ng](https://github.com/guparan/sofa2ng) in the `tools` folder of your SOFA; 2. cd into sofa2ng and run `deploy.sh recipes/Sofa.Helper.Bvh.rcpy`; 3. Integrate your new NG module into SOFA by hand. How to integrate (things not done by sofa2ng):; - Create all NG structure if needed (here I created Sofa.Helper); - `add_subdirectory` your module at the right place (here I did it in SofaFramework/CMakeLists.txt); - Link your module to SOFA old modules when needed; - Remove old file inclusions in CMake (here it was in sofa/helper/CMakeLists.txt). ***************; **Summary:**; - The recipe I used with sofa2ng is here: [Sofa.Helper.Bvh.rcpy](https://github.com/guparan/sofa2ng/blob/master/recipes/Sofa.Helper.Bvh.rcpy); - The result of recipe application is here: https://github.com/sofa-framework/sofa/pull/741/commits/2c729aa646866c2b01792069e95d47cc450edcca; - The changes I did by hand are here: https://github.com/sofa-framework/sofa/pull/741/commits/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6 (patch version [here](https://github.com/sofa-framework/sofa/commit/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6.patch)); ***************. This is the right place to discuss about SOFA-NG, do not hesitate to comment!. I let this here and I go to vacation, see you in two weeks :wink: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/741
https://github.com/sofa-framework/sofa/pull/741:247,Deployability,Integrat,Integrate,247,"Here it is! This PR adds a new NG component: Sofa.Helper.Bvh. How to reproduce:; 1. Checkout [sofa2ng](https://github.com/guparan/sofa2ng) in the `tools` folder of your SOFA; 2. cd into sofa2ng and run `deploy.sh recipes/Sofa.Helper.Bvh.rcpy`; 3. Integrate your new NG module into SOFA by hand. How to integrate (things not done by sofa2ng):; - Create all NG structure if needed (here I created Sofa.Helper); - `add_subdirectory` your module at the right place (here I did it in SofaFramework/CMakeLists.txt); - Link your module to SOFA old modules when needed; - Remove old file inclusions in CMake (here it was in sofa/helper/CMakeLists.txt). ***************; **Summary:**; - The recipe I used with sofa2ng is here: [Sofa.Helper.Bvh.rcpy](https://github.com/guparan/sofa2ng/blob/master/recipes/Sofa.Helper.Bvh.rcpy); - The result of recipe application is here: https://github.com/sofa-framework/sofa/pull/741/commits/2c729aa646866c2b01792069e95d47cc450edcca; - The changes I did by hand are here: https://github.com/sofa-framework/sofa/pull/741/commits/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6 (patch version [here](https://github.com/sofa-framework/sofa/commit/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6.patch)); ***************. This is the right place to discuss about SOFA-NG, do not hesitate to comment!. I let this here and I go to vacation, see you in two weeks :wink: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/741
https://github.com/sofa-framework/sofa/pull/741:302,Deployability,integrat,integrate,302,"Here it is! This PR adds a new NG component: Sofa.Helper.Bvh. How to reproduce:; 1. Checkout [sofa2ng](https://github.com/guparan/sofa2ng) in the `tools` folder of your SOFA; 2. cd into sofa2ng and run `deploy.sh recipes/Sofa.Helper.Bvh.rcpy`; 3. Integrate your new NG module into SOFA by hand. How to integrate (things not done by sofa2ng):; - Create all NG structure if needed (here I created Sofa.Helper); - `add_subdirectory` your module at the right place (here I did it in SofaFramework/CMakeLists.txt); - Link your module to SOFA old modules when needed; - Remove old file inclusions in CMake (here it was in sofa/helper/CMakeLists.txt). ***************; **Summary:**; - The recipe I used with sofa2ng is here: [Sofa.Helper.Bvh.rcpy](https://github.com/guparan/sofa2ng/blob/master/recipes/Sofa.Helper.Bvh.rcpy); - The result of recipe application is here: https://github.com/sofa-framework/sofa/pull/741/commits/2c729aa646866c2b01792069e95d47cc450edcca; - The changes I did by hand are here: https://github.com/sofa-framework/sofa/pull/741/commits/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6 (patch version [here](https://github.com/sofa-framework/sofa/commit/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6.patch)); ***************. This is the right place to discuss about SOFA-NG, do not hesitate to comment!. I let this here and I go to vacation, see you in two weeks :wink: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/741
https://github.com/sofa-framework/sofa/pull/741:1097,Deployability,patch,patch,1097,"Here it is! This PR adds a new NG component: Sofa.Helper.Bvh. How to reproduce:; 1. Checkout [sofa2ng](https://github.com/guparan/sofa2ng) in the `tools` folder of your SOFA; 2. cd into sofa2ng and run `deploy.sh recipes/Sofa.Helper.Bvh.rcpy`; 3. Integrate your new NG module into SOFA by hand. How to integrate (things not done by sofa2ng):; - Create all NG structure if needed (here I created Sofa.Helper); - `add_subdirectory` your module at the right place (here I did it in SofaFramework/CMakeLists.txt); - Link your module to SOFA old modules when needed; - Remove old file inclusions in CMake (here it was in sofa/helper/CMakeLists.txt). ***************; **Summary:**; - The recipe I used with sofa2ng is here: [Sofa.Helper.Bvh.rcpy](https://github.com/guparan/sofa2ng/blob/master/recipes/Sofa.Helper.Bvh.rcpy); - The result of recipe application is here: https://github.com/sofa-framework/sofa/pull/741/commits/2c729aa646866c2b01792069e95d47cc450edcca; - The changes I did by hand are here: https://github.com/sofa-framework/sofa/pull/741/commits/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6 (patch version [here](https://github.com/sofa-framework/sofa/commit/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6.patch)); ***************. This is the right place to discuss about SOFA-NG, do not hesitate to comment!. I let this here and I go to vacation, see you in two weeks :wink: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/741
https://github.com/sofa-framework/sofa/pull/741:1205,Deployability,patch,patch,1205,"Here it is! This PR adds a new NG component: Sofa.Helper.Bvh. How to reproduce:; 1. Checkout [sofa2ng](https://github.com/guparan/sofa2ng) in the `tools` folder of your SOFA; 2. cd into sofa2ng and run `deploy.sh recipes/Sofa.Helper.Bvh.rcpy`; 3. Integrate your new NG module into SOFA by hand. How to integrate (things not done by sofa2ng):; - Create all NG structure if needed (here I created Sofa.Helper); - `add_subdirectory` your module at the right place (here I did it in SofaFramework/CMakeLists.txt); - Link your module to SOFA old modules when needed; - Remove old file inclusions in CMake (here it was in sofa/helper/CMakeLists.txt). ***************; **Summary:**; - The recipe I used with sofa2ng is here: [Sofa.Helper.Bvh.rcpy](https://github.com/guparan/sofa2ng/blob/master/recipes/Sofa.Helper.Bvh.rcpy); - The result of recipe application is here: https://github.com/sofa-framework/sofa/pull/741/commits/2c729aa646866c2b01792069e95d47cc450edcca; - The changes I did by hand are here: https://github.com/sofa-framework/sofa/pull/741/commits/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6 (patch version [here](https://github.com/sofa-framework/sofa/commit/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6.patch)); ***************. This is the right place to discuss about SOFA-NG, do not hesitate to comment!. I let this here and I go to vacation, see you in two weeks :wink: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/741
https://github.com/sofa-framework/sofa/pull/741:247,Integrability,Integrat,Integrate,247,"Here it is! This PR adds a new NG component: Sofa.Helper.Bvh. How to reproduce:; 1. Checkout [sofa2ng](https://github.com/guparan/sofa2ng) in the `tools` folder of your SOFA; 2. cd into sofa2ng and run `deploy.sh recipes/Sofa.Helper.Bvh.rcpy`; 3. Integrate your new NG module into SOFA by hand. How to integrate (things not done by sofa2ng):; - Create all NG structure if needed (here I created Sofa.Helper); - `add_subdirectory` your module at the right place (here I did it in SofaFramework/CMakeLists.txt); - Link your module to SOFA old modules when needed; - Remove old file inclusions in CMake (here it was in sofa/helper/CMakeLists.txt). ***************; **Summary:**; - The recipe I used with sofa2ng is here: [Sofa.Helper.Bvh.rcpy](https://github.com/guparan/sofa2ng/blob/master/recipes/Sofa.Helper.Bvh.rcpy); - The result of recipe application is here: https://github.com/sofa-framework/sofa/pull/741/commits/2c729aa646866c2b01792069e95d47cc450edcca; - The changes I did by hand are here: https://github.com/sofa-framework/sofa/pull/741/commits/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6 (patch version [here](https://github.com/sofa-framework/sofa/commit/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6.patch)); ***************. This is the right place to discuss about SOFA-NG, do not hesitate to comment!. I let this here and I go to vacation, see you in two weeks :wink: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/741
https://github.com/sofa-framework/sofa/pull/741:302,Integrability,integrat,integrate,302,"Here it is! This PR adds a new NG component: Sofa.Helper.Bvh. How to reproduce:; 1. Checkout [sofa2ng](https://github.com/guparan/sofa2ng) in the `tools` folder of your SOFA; 2. cd into sofa2ng and run `deploy.sh recipes/Sofa.Helper.Bvh.rcpy`; 3. Integrate your new NG module into SOFA by hand. How to integrate (things not done by sofa2ng):; - Create all NG structure if needed (here I created Sofa.Helper); - `add_subdirectory` your module at the right place (here I did it in SofaFramework/CMakeLists.txt); - Link your module to SOFA old modules when needed; - Remove old file inclusions in CMake (here it was in sofa/helper/CMakeLists.txt). ***************; **Summary:**; - The recipe I used with sofa2ng is here: [Sofa.Helper.Bvh.rcpy](https://github.com/guparan/sofa2ng/blob/master/recipes/Sofa.Helper.Bvh.rcpy); - The result of recipe application is here: https://github.com/sofa-framework/sofa/pull/741/commits/2c729aa646866c2b01792069e95d47cc450edcca; - The changes I did by hand are here: https://github.com/sofa-framework/sofa/pull/741/commits/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6 (patch version [here](https://github.com/sofa-framework/sofa/commit/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6.patch)); ***************. This is the right place to discuss about SOFA-NG, do not hesitate to comment!. I let this here and I go to vacation, see you in two weeks :wink: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/741
https://github.com/sofa-framework/sofa/pull/741:1477,Integrability,message,message,1477,"Here it is! This PR adds a new NG component: Sofa.Helper.Bvh. How to reproduce:; 1. Checkout [sofa2ng](https://github.com/guparan/sofa2ng) in the `tools` folder of your SOFA; 2. cd into sofa2ng and run `deploy.sh recipes/Sofa.Helper.Bvh.rcpy`; 3. Integrate your new NG module into SOFA by hand. How to integrate (things not done by sofa2ng):; - Create all NG structure if needed (here I created Sofa.Helper); - `add_subdirectory` your module at the right place (here I did it in SofaFramework/CMakeLists.txt); - Link your module to SOFA old modules when needed; - Remove old file inclusions in CMake (here it was in sofa/helper/CMakeLists.txt). ***************; **Summary:**; - The recipe I used with sofa2ng is here: [Sofa.Helper.Bvh.rcpy](https://github.com/guparan/sofa2ng/blob/master/recipes/Sofa.Helper.Bvh.rcpy); - The result of recipe application is here: https://github.com/sofa-framework/sofa/pull/741/commits/2c729aa646866c2b01792069e95d47cc450edcca; - The changes I did by hand are here: https://github.com/sofa-framework/sofa/pull/741/commits/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6 (patch version [here](https://github.com/sofa-framework/sofa/commit/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6.patch)); ***************. This is the right place to discuss about SOFA-NG, do not hesitate to comment!. I let this here and I go to vacation, see you in two weeks :wink: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/741
https://github.com/sofa-framework/sofa/pull/741:1629,Testability,test,test,1629,"Here it is! This PR adds a new NG component: Sofa.Helper.Bvh. How to reproduce:; 1. Checkout [sofa2ng](https://github.com/guparan/sofa2ng) in the `tools` folder of your SOFA; 2. cd into sofa2ng and run `deploy.sh recipes/Sofa.Helper.Bvh.rcpy`; 3. Integrate your new NG module into SOFA by hand. How to integrate (things not done by sofa2ng):; - Create all NG structure if needed (here I created Sofa.Helper); - `add_subdirectory` your module at the right place (here I did it in SofaFramework/CMakeLists.txt); - Link your module to SOFA old modules when needed; - Remove old file inclusions in CMake (here it was in sofa/helper/CMakeLists.txt). ***************; **Summary:**; - The recipe I used with sofa2ng is here: [Sofa.Helper.Bvh.rcpy](https://github.com/guparan/sofa2ng/blob/master/recipes/Sofa.Helper.Bvh.rcpy); - The result of recipe application is here: https://github.com/sofa-framework/sofa/pull/741/commits/2c729aa646866c2b01792069e95d47cc450edcca; - The changes I did by hand are here: https://github.com/sofa-framework/sofa/pull/741/commits/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6 (patch version [here](https://github.com/sofa-framework/sofa/commit/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6.patch)); ***************. This is the right place to discuss about SOFA-NG, do not hesitate to comment!. I let this here and I go to vacation, see you in two weeks :wink: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/741
https://github.com/sofa-framework/sofa/pull/741:1679,Testability,test,test,1679,"Here it is! This PR adds a new NG component: Sofa.Helper.Bvh. How to reproduce:; 1. Checkout [sofa2ng](https://github.com/guparan/sofa2ng) in the `tools` folder of your SOFA; 2. cd into sofa2ng and run `deploy.sh recipes/Sofa.Helper.Bvh.rcpy`; 3. Integrate your new NG module into SOFA by hand. How to integrate (things not done by sofa2ng):; - Create all NG structure if needed (here I created Sofa.Helper); - `add_subdirectory` your module at the right place (here I did it in SofaFramework/CMakeLists.txt); - Link your module to SOFA old modules when needed; - Remove old file inclusions in CMake (here it was in sofa/helper/CMakeLists.txt). ***************; **Summary:**; - The recipe I used with sofa2ng is here: [Sofa.Helper.Bvh.rcpy](https://github.com/guparan/sofa2ng/blob/master/recipes/Sofa.Helper.Bvh.rcpy); - The result of recipe application is here: https://github.com/sofa-framework/sofa/pull/741/commits/2c729aa646866c2b01792069e95d47cc450edcca; - The changes I did by hand are here: https://github.com/sofa-framework/sofa/pull/741/commits/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6 (patch version [here](https://github.com/sofa-framework/sofa/commit/6d6cd06fc34f6ae2ca53feed8af5b8a1cb452da6.patch)); ***************. This is the right place to discuss about SOFA-NG, do not hesitate to comment!. I let this here and I go to vacation, see you in two weeks :wink: ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/741
https://github.com/sofa-framework/sofa/pull/742:418,Availability,failure,failures,418,"Depends on #740 ; Part 2 of #629 This PR allows PSDEs to derive the type of their I/O datafields according the what they are linked to (position=""@../whatever""). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/742
https://github.com/sofa-framework/sofa/pull/742:468,Availability,failure,failures,468,"Depends on #740 ; Part 2 of #629 This PR allows PSDEs to derive the type of their I/O datafields according the what they are linked to (position=""@../whatever""). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/742
https://github.com/sofa-framework/sofa/pull/742:0,Integrability,Depend,Depends,0,"Depends on #740 ; Part 2 of #629 This PR allows PSDEs to derive the type of their I/O datafields according the what they are linked to (position=""@../whatever""). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/742
