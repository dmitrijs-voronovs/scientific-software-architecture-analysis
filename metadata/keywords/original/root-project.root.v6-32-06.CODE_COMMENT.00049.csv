id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:268,Testability,test,tests,268,"// The RooDataHit can be analytically integrated with the RooDataHist::sum(); // member functions. This functionality is used in the analytical; // integration capabilities of RooHistPdf and RooHistFunc. Therefore, to; // test these two classes at the same time, this tests validated; // RooDataHist::sum() via the RooHistPdf and RooHistFunc interfaces.; // The histograms for this example are kept simple such that one can easily; // calculate the expected values with a calculator.; // We first create an easy non-uniform histogram for the x variable so we; // can know what we expect as test results analytically. The histogram will; // have the following bins with contents:; // - bin1 [0.0, 1.0]: 3 counts (bin volume x counts = 3); // - bin2 [1.0, 3.0]: 1 count (bin volume x counts = 2); // - bin3 [3.0, 3.5]: 8 counts (bin volume x counts = 4)",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:590,Testability,test,test,590,"// The RooDataHit can be analytically integrated with the RooDataHist::sum(); // member functions. This functionality is used in the analytical; // integration capabilities of RooHistPdf and RooHistFunc. Therefore, to; // test these two classes at the same time, this tests validated; // RooDataHist::sum() via the RooHistPdf and RooHistFunc interfaces.; // The histograms for this example are kept simple such that one can easily; // calculate the expected values with a calculator.; // We first create an easy non-uniform histogram for the x variable so we; // can know what we expect as test results analytically. The histogram will; // have the following bins with contents:; // - bin1 [0.0, 1.0]: 3 counts (bin volume x counts = 3); // - bin2 [1.0, 3.0]: 1 count (bin volume x counts = 2); // - bin3 [3.0, 3.5]: 8 counts (bin volume x counts = 4)",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:399,Usability,simpl,simple,399,"// The RooDataHit can be analytically integrated with the RooDataHist::sum(); // member functions. This functionality is used in the analytical; // integration capabilities of RooHistPdf and RooHistFunc. Therefore, to; // test these two classes at the same time, this tests validated; // RooDataHist::sum() via the RooHistPdf and RooHistFunc interfaces.; // The histograms for this example are kept simple such that one can easily; // calculate the expected values with a calculator.; // We first create an easy non-uniform histogram for the x variable so we; // can know what we expect as test results analytically. The histogram will; // have the following bins with contents:; // - bin1 [0.0, 1.0]: 3 counts (bin volume x counts = 3); // - bin2 [1.0, 3.0]: 1 count (bin volume x counts = 2); // - bin3 [3.0, 3.5]: 8 counts (bin volume x counts = 4)",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:3,Testability,test,test,3,"// test the RooHistFunc",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:3,Testability,test,test,3,"// test the RooHistPdf",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:68,Modifiability,variab,variable,68,"// Now test the simple 2D case where there just an additional dummy variable y that is always in the first bin; // This should consistently give the same results as the 1D case.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:7,Testability,test,test,7,"// Now test the simple 2D case where there just an additional dummy variable y that is always in the first bin; // This should consistently give the same results as the 1D case.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:16,Usability,simpl,simple,16,"// Now test the simple 2D case where there just an additional dummy variable y that is always in the first bin; // This should consistently give the same results as the 1D case.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:3,Testability,test,test,3,"// test RooHistFunc",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:3,Testability,test,test,3,"// test RooHistPdf",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:45,Modifiability,variab,variable,45,"// Now test the complete 2D case where the y variable is also distributed; // with non-uniform binning. To make things simple, the histogram has only; // 2 bins.; //; // The x-histogram will have the following content for the entries where y; // is in the [0, 2.5] bin (12 entries):; //; // - bin1 [0.0, 1.0]: 3 counts (bin volume x counts = 3); // - bin2 [1.0, 3.0]: 1 count (bin volume x counts = 2); // - bin3 [3.0, 3.5]: 8 counts (bin volume x counts = 4); //; // Then, there are some more entries with y in the [2.5, 3.5] bin (4 entries);; //; // - bin6 [0.0, 1.0]: 1 counts (bin volume x counts = 1); // - bin7 [1.0, 3.0]: 2 counts (bin volume x counts = 4); // - bin8 [3.0, 3.5]: 1 counts (bin volume x counts = 0.5)",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:7,Testability,test,test,7,"// Now test the complete 2D case where the y variable is also distributed; // with non-uniform binning. To make things simple, the histogram has only; // 2 bins.; //; // The x-histogram will have the following content for the entries where y; // is in the [0, 2.5] bin (12 entries):; //; // - bin1 [0.0, 1.0]: 3 counts (bin volume x counts = 3); // - bin2 [1.0, 3.0]: 1 count (bin volume x counts = 2); // - bin3 [3.0, 3.5]: 8 counts (bin volume x counts = 4); //; // Then, there are some more entries with y in the [2.5, 3.5] bin (4 entries);; //; // - bin6 [0.0, 1.0]: 1 counts (bin volume x counts = 1); // - bin7 [1.0, 3.0]: 2 counts (bin volume x counts = 4); // - bin8 [3.0, 3.5]: 1 counts (bin volume x counts = 0.5)",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:119,Usability,simpl,simple,119,"// Now test the complete 2D case where the y variable is also distributed; // with non-uniform binning. To make things simple, the histogram has only; // 2 bins.; //; // The x-histogram will have the following content for the entries where y; // is in the [0, 2.5] bin (12 entries):; //; // - bin1 [0.0, 1.0]: 3 counts (bin volume x counts = 3); // - bin2 [1.0, 3.0]: 1 count (bin volume x counts = 2); // - bin3 [3.0, 3.5]: 8 counts (bin volume x counts = 4); //; // Then, there are some more entries with y in the [2.5, 3.5] bin (4 entries);; //; // - bin6 [0.0, 1.0]: 1 counts (bin volume x counts = 1); // - bin7 [1.0, 3.0]: 2 counts (bin volume x counts = 4); // - bin8 [3.0, 3.5]: 1 counts (bin volume x counts = 0.5)",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:3,Testability,test,test,3,"// test RooHistFunc",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:3,Testability,test,test,3,"// test RooHistPdf",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:16,Integrability,message,message,16,"// Change local message level to suppress unnecessary info",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:110,Availability,error,errors,110,"// Test that splitting a RooDataSet by index category does preserve the sum of; // weights squared and weight errors.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:3,Testability,Test,Test,3,"// Test that splitting a RooDataSet by index category does preserve the sum of; // weights squared and weight errors.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:3,Testability,Test,Tests,3,"// Tests for the RooDataSet; // Authors: Stephan Hageboeck, CERN 04/2020; // Jonas Rembser, CERN 04/2022",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:65,Modifiability,variab,variables,65,"/// ROOT-10676; /// The RooDataSet warns that it's not using all variables if the selection string doesn't; /// make use of all variables. Although true, the user has no way to suppress this.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:128,Modifiability,variab,variables,128,"/// ROOT-10676; /// The RooDataSet warns that it's not using all variables if the selection string doesn't; /// make use of all variables. Although true, the user has no way to suppress this.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:76,Energy Efficiency,adapt,adapted,76,"/// ROOT-3579 Binned clone seemed to create problems with chains.; /// Code adapted from example in JIRA.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:76,Modifiability,adapt,adapted,76,"/// ROOT-3579 Binned clone seemed to create problems with chains.; /// Code adapted from example in JIRA.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:3,Testability,Test,Test,3,"// Test Data hist and such.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:239,Testability,test,test,239,"// When using binned data, reducing and expecting the ame number of entries as in the unbinned case is not; // possible, since information is lost if entries to the left and right of the cut end up in the same bin.; // Therefore, can only test <=",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:3,Energy Efficiency,Reduce,Reduce,3,"// Reduce the dataset with the RooCompositeDataStore",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:106,Energy Efficiency,reduce,reduce,106,"// Make sure that CutRange() also considers the variables not selected by; // SelectVars() in RooAbsData::reduce().; //; // Covers JIRA issue ROOT-8040.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:48,Modifiability,variab,variables,48,"// Make sure that CutRange() also considers the variables not selected by; // SelectVars() in RooAbsData::reduce().; //; // Covers JIRA issue ROOT-8040.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:3,Testability,Test,Test,3,"// Test that importing a RooDataHist to a RooDataSet works and that it gives; // the right weight() and weightSquared().",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:83,Availability,error,errors,83,"// Test that splitting a RooDataSet by index category does preserve the weight; // errors. Covers GitHub issue #12453.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:3,Testability,Test,Test,3,"// Test that splitting a RooDataSet by index category does preserve the weight; // errors. Covers GitHub issue #12453.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:166,Availability,error,errors,166,"// The version number of the RooVectorDataStore::RealFullVector was increased; // in the 6.30 development cycle. The RealFullVector is used to store columns; // with errors, both symmetric and asymmetric.; //; // The reference file was created with the following code with ROOT 6.26.10:; //; // ```c++; // using namespace RooFit;; //; // RooRealVar x{""x"", ""x"", 0, 10};; // RooRealVar y{""y"", ""y"", 0, 10};; //; // RooDataSet data{""data"", ""data"", {x, y}, StoreError(x), StoreAsymError(y)};; //; // x.setVal(5.0);; // x.setError(2.0);; // y.setVal(9.0);; // y.setAsymError(-4.0, 3.0);; //; // data.add({x, y});; //; // x.setVal(7.0);; // x.setError(3.0);; // y.setVal(4.0);; // y.setAsymError(-2.0, 1.0);; //; // data.add({x, y});; //; // std::unique_ptr<TFile> file{TFile::Open(""dataSet_with_errors_6_26_10.root"", ""RECREATE"")};; //; // file->WriteObject(&data, data.GetName());; // ```",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooDataSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx:3,Testability,Test,Tests,3,"// Tests for the RooFormula; // Authors: Stephan Hageboeck, CERN 2020; // Jonas Rembser, CERN 2023",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx:72,Safety,safe,safety,72,"/// Since TFormula does very surprising things,; /// RooFit needs to do safety checks.; /// ```; /// TFormula form(""form"", ""x+y"");; /// form.Eval(3.);; /// ```; /// is, for example, legal, and silently uses an undefined; /// value for y. RooFit needs to detect this.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx:254,Safety,detect,detect,254,"/// Since TFormula does very surprising things,; /// RooFit needs to do safety checks.; /// ```; /// TFormula form(""form"", ""x+y"");; /// form.Eval(3.);; /// ```; /// is, for example, legal, and silently uses an undefined; /// value for y. RooFit needs to detect this.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx:205,Modifiability,variab,variable,205,"// In case of named arguments, the RooFormula will replace the argument names; // with x[0] to x[n]. There are two things that can go wrong if RooFormula is; // not implemented right. First, if there is a variable named ""x"" it should; // only be substituted if the matching substring is not followed by ""["", to not; // replace existing x[i]. Second, variables with integer names like ""0"" should; // only be substituted if the match is not followed by a ""]"", again to avoid; // replacing x[i]. This test checks that these cases are handled correctly.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx:350,Modifiability,variab,variables,350,"// In case of named arguments, the RooFormula will replace the argument names; // with x[0] to x[n]. There are two things that can go wrong if RooFormula is; // not implemented right. First, if there is a variable named ""x"" it should; // only be substituted if the matching substring is not followed by ""["", to not; // replace existing x[i]. Second, variables with integer names like ""0"" should; // only be substituted if the match is not followed by a ""]"", again to avoid; // replacing x[i]. This test checks that these cases are handled correctly.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx:467,Safety,avoid,avoid,467,"// In case of named arguments, the RooFormula will replace the argument names; // with x[0] to x[n]. There are two things that can go wrong if RooFormula is; // not implemented right. First, if there is a variable named ""x"" it should; // only be substituted if the matching substring is not followed by ""["", to not; // replace existing x[i]. Second, variables with integer names like ""0"" should; // only be substituted if the match is not followed by a ""]"", again to avoid; // replacing x[i]. This test checks that these cases are handled correctly.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx:498,Testability,test,test,498,"// In case of named arguments, the RooFormula will replace the argument names; // with x[0] to x[n]. There are two things that can go wrong if RooFormula is; // not implemented right. First, if there is a variable named ""x"" it should; // only be substituted if the matching substring is not followed by ""["", to not; // replace existing x[i]. Second, variables with integer names like ""0"" should; // only be substituted if the match is not followed by a ""]"", again to avoid; // replacing x[i]. This test checks that these cases are handled correctly.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx:35,Availability,error,error,35,"// Create the formula, triggers an error if the formula doesn't compile; // correctly because the dangerous variable names haven't been treated right.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx:108,Modifiability,variab,variable,108,"// Create the formula, triggers an error if the formula doesn't compile; // correctly because the dangerous variable names haven't been treated right.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx:80,Modifiability,variab,variables,80,"/// Check that the RooFormulaVar has the right number of servers when some; /// variables are unused.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFormula.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:97,Security,validat,validate,97,"// We don't use the RooFit::Evaluator for the nominal likelihood. Like this,; // we make sure to validate also the NLL values of the generated code.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:41,Availability,toler,tolerance,41,"// Compare minimization results; // Same tolerance for parameter values and error, don't compare correlations; // because for very small correlations it's usually not the same within the; // relative tolerance because you would compare two small values that are; // only different from zero because of noise.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:76,Availability,error,error,76,"// Compare minimization results; // Same tolerance for parameter values and error, don't compare correlations; // because for very small correlations it's usually not the same within the; // relative tolerance because you would compare two small values that are; // only different from zero because of noise.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:200,Availability,toler,tolerance,200,"// Compare minimization results; // Same tolerance for parameter values and error, don't compare correlations; // because for very small correlations it's usually not the same within the; // relative tolerance because you would compare two small values that are; // only different from zero because of noise.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:66,Testability,test,test,66,"/// Initial minimization that was not based on any other tutorial/test.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:4,Testability,Test,Test,4,"/// Test based on the rf301 tutorial.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:4,Testability,Test,Test,4,"/// Test based on the rf201 tutorial.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:4,Testability,Test,Test,4,"/// Test based on the rf604 tutorial.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:18,Testability,Test,Test,18,"// namespace; /// Test based on the simultaneous fit shown in CHEP'23 results",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:18,Testability,Test,Test,18,"// namespace; /// Test based on rf706 tutorial",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:12,Availability,toler,tolerance,12,// increase tolerance because the numeric integration algos are still different; /*randomizeParameters=*/,MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:42,Deployability,integrat,integration,42,// increase tolerance because the numeric integration algos are still different; /*randomizeParameters=*/,MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:42,Integrability,integrat,integration,42,// increase tolerance because the numeric integration algos are still different; /*randomizeParameters=*/,MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:46,Integrability,depend,depend,46,"// Test for the uniform pdf. Since it doesn't depend on any parameters, we need; // to add it to some other model like a Gaussian to get a meaningful fit model.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:3,Testability,Test,Test,3,"// Test for the uniform pdf. Since it doesn't depend on any parameters, we need; // to add it to some other model like a Gaussian to get a meaningful fit model.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:3,Testability,Test,Test,3,"// Test for RooRecursiveFraction.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:32,Deployability,configurat,configurations,32,"// We're testing several Landau configurations, because the underlying; // ROOT::Math::landau_cdf is defined piecewise. Like this, we're covering; // all possible code paths in the pullback.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:32,Modifiability,config,configurations,32,"// We're testing several Landau configurations, because the underlying; // ROOT::Math::landau_cdf is defined piecewise. Like this, we're covering; // all possible code paths in the pullback.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:9,Testability,test,testing,9,"// We're testing several Landau configurations, because the underlying; // ROOT::Math::landau_cdf is defined piecewise. Like this, we're covering; // all possible code paths in the pullback.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooFuncWrapper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooHist.cxx:3,Testability,Test,Tests,3,"// Tests for the RooHist; // Authors: Jonas Rembser, CERN 12/2022",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooHistPdf.cxx:3,Testability,Test,Tests,3,"// Tests for the RooHistPdf; // Authors: Jonas Rembser, CERN 03/2023",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooHistPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooHistPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooHistPdf.cxx:46,Deployability,integrat,integration,46,"// Verify that RooFit correctly uses analytic integration when having a; // RooLinearVar as the observable of a RooHistPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooHistPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooHistPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooHistPdf.cxx:46,Integrability,integrat,integration,46,"// Verify that RooFit correctly uses analytic integration when having a; // RooLinearVar as the observable of a RooHistPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooHistPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooHistPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooMinimizer.cxx:3,Testability,Test,Tests,3,"// Tests for the RooProdPdf; // Author: Jonas Rembser, CERN, October 2024",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooMinimizer.cxx:8,Testability,test,test,8,"// Unit test corresponding to the rf601 tutorial, but parametrized for the; // different evaluation backends.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooMinimizer.cxx:85,Safety,avoid,avoid,85,"// Reference fit results. We are building them manually in this code in; // order to avoid binary reference files.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooMinimizer.cxx:7,Availability,toler,tolerance,7,"// The tolerance parameter is necessary because not all backends give; // exaclty the same results: when using AD, the final result is slightly; // different.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooPolyFunc.cxx:3,Integrability,wrap,wrapped,3,"// wrapped pdf of RooPolyFunc should match RooPolynomial; // EXPECT_FLOAT_EQ(wrapperpdf.getVal(), pdf.getVal())",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooPolyFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooPolyFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooPolyFunc.cxx:77,Integrability,wrap,wrapperpdf,77,"// wrapped pdf of RooPolyFunc should match RooPolynomial; // EXPECT_FLOAT_EQ(wrapperpdf.getVal(), pdf.getVal())",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooPolyFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooPolyFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx:3,Testability,Test,Tests,3,"// Tests for the RooProdPdf; // Authors: Stephan Hageboeck, CERN 02/2019; // Jonas Rembser, CERN, June 2021",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooProdPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx:8,Testability,test,test,8,"// This test checks if RooProdPdf::getPartIntList factorizes the integrals; // as expected, for the example of a three dimensional RooProdPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooProdPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx:93,Testability,test,test,93,"// Factorize the product in one 1D and one 2D pdf to get a more complicated; // and complete test case.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooProdPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx:129,Integrability,depend,depend,129,"/// This test covers a potential problem with the custom normalization ranges; /// of PDFs: the value of a RooProdPdf should not depend on the normalization; /// ranges of its clients. TODO: this is still a problem! It needs to be fixed,; /// and then the test can be enabled and this note should be removed.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooProdPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx:9,Testability,test,test,9,"/// This test covers a potential problem with the custom normalization ranges; /// of PDFs: the value of a RooProdPdf should not depend on the normalization; /// ranges of its clients. TODO: this is still a problem! It needs to be fixed,; /// and then the test can be enabled and this note should be removed.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooProdPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx:256,Testability,test,test,256,"/// This test covers a potential problem with the custom normalization ranges; /// of PDFs: the value of a RooProdPdf should not depend on the normalization; /// ranges of its clients. TODO: this is still a problem! It needs to be fixed,; /// and then the test can be enabled and this note should be removed.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooProdPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx:65,Performance,cache,cache,65,"// Try different normalization sets to check if there is a false cache hit; // after changing the normalization range of the servers.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooProdPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx:90,Testability,test,test,90,"// The fit range needs to be a multi-range to trigger the problem that is covered by this test",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooProdPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:3,Testability,Test,Tests,3,"// Tests for RooRealIntegral; // Authors: Jonas Rembser, CERN 10/2022",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:27,Testability,test,test,27,"// This is the key in this test: the mathematically direct value server of; // the integral is the derived ""mu_mod"", and not the leaf of the computation; // graph ""mu"".",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:20,Integrability,wrap,wrapped,20,"// The Gaussian PDF wrapped in a RooGenericPdf should have exactly the same; // server structure, so let's check that:",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:25,Deployability,integrat,integrated,25,"// The 2nd server is the integrated function, which doesn't have the same; // name (it's ""gaussWrapped"" for the second integral instead of ""gauss"")",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:25,Integrability,integrat,integrated,25,"// The 2nd server is the integrated function, which doesn't have the same; // name (it's ""gaussWrapped"" for the second integral instead of ""gauss"")",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:16,Deployability,integrat,integrating,16,"/// Here we are integrating a function that has shape servers to verify that; /// they are correctly propagated as shape servers to the integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:16,Integrability,integrat,integrating,16,"/// Here we are integrating a function that has shape servers to verify that; /// they are correctly propagated as shape servers to the integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:3,Deployability,Integrat,Integrating,3,"// Integrating also over x, so both x and sigma should now be shape servers of the integral",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:3,Integrability,Integrat,Integrating,3,"// Integrating also over x, so both x and sigma should now be shape servers of the integral",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:48,Modifiability,variab,variables,48,"// Verify that using observable clones -- i.e., variables with the same names; // as the ones in the computation graph -- does not change the client-server; // structure of a RooRealIntegral. Covers GitHub issue #11637.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:40,Deployability,integrat,integration,40,"// More testing of observable clones as integration variables. This time; // hitting the more general case where the algorithm also needs to find clients; // of the original variable correctly (""xShifted"" in this test).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:40,Integrability,integrat,integration,40,"// More testing of observable clones as integration variables. This time; // hitting the more general case where the algorithm also needs to find clients; // of the original variable correctly (""xShifted"" in this test).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:52,Modifiability,variab,variables,52,"// More testing of observable clones as integration variables. This time; // hitting the more general case where the algorithm also needs to find clients; // of the original variable correctly (""xShifted"" in this test).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:174,Modifiability,variab,variable,174,"// More testing of observable clones as integration variables. This time; // hitting the more general case where the algorithm also needs to find clients; // of the original variable correctly (""xShifted"" in this test).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:8,Testability,test,testing,8,"// More testing of observable clones as integration variables. This time; // hitting the more general case where the algorithm also needs to find clients; // of the original variable correctly (""xShifted"" in this test).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:213,Testability,test,test,213,"// More testing of observable clones as integration variables. This time; // hitting the more general case where the algorithm also needs to find clients; // of the original variable correctly (""xShifted"" in this test).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:97,Deployability,integrat,integrating,97,"/// Make sure that the normalization set for a RooAddPdf is always defined when; /// numerically integrating a RooProdPdf where the RooAddPdf is one of the; /// factors. Covers GitHub #11476 and JIRA issue ROOT-9436.; ///; /// Disabled for now because the fix to the bug that is covered by this unit; /// test caused a severe performance problem and was reverted. The performance; /// regression is covered by another unit test in this file, called; /// ""ProjectConditional"".",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:97,Integrability,integrat,integrating,97,"/// Make sure that the normalization set for a RooAddPdf is always defined when; /// numerically integrating a RooProdPdf where the RooAddPdf is one of the; /// factors. Covers GitHub #11476 and JIRA issue ROOT-9436.; ///; /// Disabled for now because the fix to the bug that is covered by this unit; /// test caused a severe performance problem and was reverted. The performance; /// regression is covered by another unit test in this file, called; /// ""ProjectConditional"".",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:326,Performance,perform,performance,326,"/// Make sure that the normalization set for a RooAddPdf is always defined when; /// numerically integrating a RooProdPdf where the RooAddPdf is one of the; /// factors. Covers GitHub #11476 and JIRA issue ROOT-9436.; ///; /// Disabled for now because the fix to the bug that is covered by this unit; /// test caused a severe performance problem and was reverted. The performance; /// regression is covered by another unit test in this file, called; /// ""ProjectConditional"".",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:368,Performance,perform,performance,368,"/// Make sure that the normalization set for a RooAddPdf is always defined when; /// numerically integrating a RooProdPdf where the RooAddPdf is one of the; /// factors. Covers GitHub #11476 and JIRA issue ROOT-9436.; ///; /// Disabled for now because the fix to the bug that is covered by this unit; /// test caused a severe performance problem and was reverted. The performance; /// regression is covered by another unit test in this file, called; /// ""ProjectConditional"".",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:305,Testability,test,test,305,"/// Make sure that the normalization set for a RooAddPdf is always defined when; /// numerically integrating a RooProdPdf where the RooAddPdf is one of the; /// factors. Covers GitHub #11476 and JIRA issue ROOT-9436.; ///; /// Disabled for now because the fix to the bug that is covered by this unit; /// test caused a severe performance problem and was reverted. The performance; /// regression is covered by another unit test in this file, called; /// ""ProjectConditional"".",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:423,Testability,test,test,423,"/// Make sure that the normalization set for a RooAddPdf is always defined when; /// numerically integrating a RooProdPdf where the RooAddPdf is one of the; /// factors. Covers GitHub #11476 and JIRA issue ROOT-9436.; ///; /// Disabled for now because the fix to the bug that is covered by this unit; /// test caused a severe performance problem and was reverted. The performance; /// regression is covered by another unit test in this file, called; /// ""ProjectConditional"".",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:34,Deployability,integrat,integration,34,"// Silence the info about numeric integration because we don't care about it",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:34,Integrability,integrat,integration,34,"// Silence the info about numeric integration because we don't care about it",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:13,Testability,log,logged,13,"// Store the logged warnings for missing normalization sets",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:9,Deployability,integrat,integrate,9,"// If we integrate a model that uses RooLinearVar and should be able to get; // integrated analytically, this should also work if we integrate over variable; // clones because RooFit considers them identical. Covers GitHub issue #12646.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:80,Deployability,integrat,integrated,80,"// If we integrate a model that uses RooLinearVar and should be able to get; // integrated analytically, this should also work if we integrate over variable; // clones because RooFit considers them identical. Covers GitHub issue #12646.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:133,Deployability,integrat,integrate,133,"// If we integrate a model that uses RooLinearVar and should be able to get; // integrated analytically, this should also work if we integrate over variable; // clones because RooFit considers them identical. Covers GitHub issue #12646.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:9,Integrability,integrat,integrate,9,"// If we integrate a model that uses RooLinearVar and should be able to get; // integrated analytically, this should also work if we integrate over variable; // clones because RooFit considers them identical. Covers GitHub issue #12646.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:80,Integrability,integrat,integrated,80,"// If we integrate a model that uses RooLinearVar and should be able to get; // integrated analytically, this should also work if we integrate over variable; // clones because RooFit considers them identical. Covers GitHub issue #12646.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:133,Integrability,integrat,integrate,133,"// If we integrate a model that uses RooLinearVar and should be able to get; // integrated analytically, this should also work if we integrate over variable; // clones because RooFit considers them identical. Covers GitHub issue #12646.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:148,Modifiability,variab,variable,148,"// If we integrate a model that uses RooLinearVar and should be able to get; // integrated analytically, this should also work if we integrate over variable; // clones because RooFit considers them identical. Covers GitHub issue #12646.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:19,Deployability,integrat,integrate,19,"// RooGaussian can integrate over x or mu, but not both still, the issue is; // visible regardless",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:19,Integrability,integrat,integrate,19,"// RooGaussian can integrate over x or mu, but not both still, the issue is; // visible regardless",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:30,Deployability,integrat,integration,30,"// There should be no numeric integration happening",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:30,Integrability,integrat,integration,30,"// There should be no numeric integration happening",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:81,Deployability,integrat,integrated,81,"// Make sure that RooFit realizes that Gaussian(x, mu, sigma(x)) needs to be; // integrated analytically.; // Covers GitHub issue #14320.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:81,Integrability,integrat,integrated,81,"// Make sure that RooFit realizes that Gaussian(x, mu, sigma(x)) needs to be; // integrated analytically.; // Covers GitHub issue #14320.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:19,Deployability,integrat,integration,19,"// Force numerical integration for the reference value.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:19,Integrability,integrat,integration,19,"// Force numerical integration for the reference value.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealIntegral.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealVar.cxx:3,Testability,Test,Tests,3,"// Tests for the RooRealVar; // Authors: Stephan Hageboeck, CERN 07/2020",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealVar.cxx:119,Testability,test,test,119,"/// ROOT-10781; /// Searching binning in linked lists is slow, so these were replaced by unordered maps.; /// Here, we test that sharing alternative binning still works.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealVar.cxx:119,Testability,test,test,119,"/// ROOT-10781; /// Searching binning in linked lists is slow, so these were replaced by unordered maps.; /// Here, we test that sharing works also after writing to files.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRealVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:3,Testability,Test,Tests,3,"// Tests for the RooRombergIntegrator.; // Authors: Stephan Hageboeck, CERN 05/2020; // Jonas Rembser, CERN 08/2023",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:7,Deployability,integrat,integrators,7,"// The integrators will warn, since we let them run until maxSteps",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:7,Integrability,integrat,integrators,7,"// The integrators will warn, since we let them run until maxSteps",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:45,Deployability,integrat,integration,45,"// Test the recursion anchors of the Romberg integration",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:45,Integrability,integrat,integration,45,"// Test the recursion anchors of the Romberg integration",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:3,Testability,Test,Test,3,"// Test the recursion anchors of the Romberg integration",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:16,Deployability,integrat,integrations,16,"/// Run numeric integrations using RooRombergIntegrator and ROOT's adaptive integrator. Ensure that; /// they reach the requested precision.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:76,Deployability,integrat,integrator,76,"/// Run numeric integrations using RooRombergIntegrator and ROOT's adaptive integrator. Ensure that; /// they reach the requested precision.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:67,Energy Efficiency,adapt,adaptive,67,"/// Run numeric integrations using RooRombergIntegrator and ROOT's adaptive integrator. Ensure that; /// they reach the requested precision.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:16,Integrability,integrat,integrations,16,"/// Run numeric integrations using RooRombergIntegrator and ROOT's adaptive integrator. Ensure that; /// they reach the requested precision.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:76,Integrability,integrat,integrator,76,"/// Run numeric integrations using RooRombergIntegrator and ROOT's adaptive integrator. Ensure that; /// they reach the requested precision.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:67,Modifiability,adapt,adaptive,67,"/// Run numeric integrations using RooRombergIntegrator and ROOT's adaptive integrator. Ensure that; /// they reach the requested precision.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:34,Deployability,integrat,integrator,34,"// Depending on the function, the integrator precision doesn't reach the; // actual precisiosn parameter, so we give it some headroom.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:3,Integrability,Depend,Depending,3,"// Depending on the function, the integrator precision doesn't reach the; // actual precisiosn parameter, so we give it some headroom.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:34,Integrability,integrat,integrator,34,"// Depending on the function, the integrator precision doesn't reach the; // actual precisiosn parameter, so we give it some headroom.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:25,Deployability,integrat,integrator,25,"/// Disabled because the integrator doesn't reach the asked precision. If this; /// behavior gets changed, this can be enabled.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:25,Integrability,integrat,integrator,25,"/// Disabled because the integrator doesn't reach the asked precision. If this; /// behavior gets changed, this can be enabled.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:25,Deployability,integrat,integrator,25,"/// Disabled because the integrator doesn't reach the asked precision. If this; /// behavior gets changed, this can be enabled.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:25,Integrability,integrat,integrator,25,"/// Disabled because the integrator doesn't reach the asked precision. If this; /// behavior gets changed, this can be enabled.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:3,Availability,Error,Error,3,"// Error should go down faster than 0.5^nSteps because the integrator uses series acceleration,; // so test if it goes down faster than 0.333^nSteps",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:19,Availability,down,down,19,"// Error should go down faster than 0.5^nSteps because the integrator uses series acceleration,; // so test if it goes down faster than 0.333^nSteps",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:119,Availability,down,down,119,"// Error should go down faster than 0.5^nSteps because the integrator uses series acceleration,; // so test if it goes down faster than 0.333^nSteps",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:59,Deployability,integrat,integrator,59,"// Error should go down faster than 0.5^nSteps because the integrator uses series acceleration,; // so test if it goes down faster than 0.333^nSteps",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:59,Integrability,integrat,integrator,59,"// Error should go down faster than 0.5^nSteps because the integrator uses series acceleration,; // so test if it goes down faster than 0.333^nSteps",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:103,Testability,test,test,103,"// Error should go down faster than 0.5^nSteps because the integrator uses series acceleration,; // so test if it goes down faster than 0.333^nSteps",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:3,Availability,Error,Error,3,"// Error should go down faster than 2^nSteps because of series acceleration.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:19,Availability,down,down,19,"// Error should go down faster than 2^nSteps because of series acceleration.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooRombergIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:3,Testability,Test,Tests,3,"// Tests for the RooSimultaneous; // Authors: Jonas Rembser, CERN 06/2021",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooSimultaneous.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:30,Testability,Test,Test,30,"/// GitHub issue #11396.; /// Test whether the RooFit::SplitRange() command argument for simultaneous; /// fits is correctly considered in multi-range fits.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooSimultaneous.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:55,Integrability,wrap,wrapped,55,"/// GitHub issue #8307.; /// A likelihood with a model wrapped in a RooSimultaneous in one category; /// should give the same results as the likelihood with the model directly. We; /// also test that things go well if you wrap the simultaneous NLL again in; /// another class, which can happen in user frameworks.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooSimultaneous.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:222,Integrability,wrap,wrap,222,"/// GitHub issue #8307.; /// A likelihood with a model wrapped in a RooSimultaneous in one category; /// should give the same results as the likelihood with the model directly. We; /// also test that things go well if you wrap the simultaneous NLL again in; /// another class, which can happen in user frameworks.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooSimultaneous.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:190,Testability,test,test,190,"/// GitHub issue #8307.; /// A likelihood with a model wrapped in a RooSimultaneous in one category; /// should give the same results as the likelihood with the model directly. We; /// also test that things go well if you wrap the simultaneous NLL again in; /// another class, which can happen in user frameworks.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooSimultaneous.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:11,Testability,log,log,11,"// silence log output",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooSimultaneous.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:60,Integrability,depend,depend,60,"// Create the model with the RooWorkspace to not explicitly depend on; // non-RooFitCore classes like RooGaussian",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooSimultaneous.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:24,Deployability,configurat,configurations,24,"// Do fits in different configurations",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooSimultaneous.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:24,Modifiability,config,configurations,24,"// Do fits in different configurations",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooSimultaneous.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:3,Security,Validat,Validate,3,"// Validate the results",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooSimultaneous.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:102,Testability,test,test,102,"// It's important that there are different values for the first (inner); // category such that we can test that the different values are correctly; // picked up from the proto dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooSimultaneous.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSTLRefCountList.cxx:3,Testability,Test,Tests,3,"// Tests for the RooSTLRefCountList; // Author: Jonas Rembser, CERN 2021",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooSTLRefCountList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSTLRefCountList.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSTLRefCountList.cxx:3,Testability,Test,Test,3,"// Test whether the RooSTLRefCountList by RooAbsArg::namePtr() still works; // after renaming the arguments.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooSTLRefCountList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSTLRefCountList.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooTruthModel.cxx:3,Testability,Test,Tests,3,"// Tests for the RooTruthModel; // Authors: Jonas Rembser, CERN 11/2023",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooTruthModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooTruthModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooTruthModel.cxx:19,Deployability,integrat,integration,19,"/// Check that the integration over a subrange works when using an analytical; /// convolution with the RooTruthModel.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooTruthModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooTruthModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooTruthModel.cxx:19,Integrability,integrat,integration,19,"/// Check that the integration over a subrange works when using an analytical; /// convolution with the RooTruthModel.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooTruthModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooTruthModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooWrapperPdf.cxx:3,Testability,Test,Tests,3,"// Tests for the RooWrapperPdf; // Author: Stephan Hageboeck, CERN 09/2019",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooWrapperPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooWrapperPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooWrapperPdf.cxx:135,Testability,test,testWrapperPdf,135,"// auto frame = x.frame();; // pol.plotOn(frame);; // polPdf.plotOn(frame);; // TCanvas canv;; // frame->Draw();; // canv.SaveAs(""/tmp/testWrapperPdf.png"");",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testRooWrapperPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooWrapperPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSimple.cxx:3,Testability,Test,Tests,3,"// Tests ROOT-6378",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testSimple.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSimple.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx:3,Testability,Test,Tests,3,"// Tests for the SumW2Error correction; // Author: Jonas Rembser, CERN 10/2021",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testSumW2Error.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx:57,Availability,avail,available,57,"// These tests are disabled if the legacy backend is not available, because; // then we don't have any reference to compare to.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testSumW2Error.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx:9,Testability,test,tests,9,"// These tests are disabled if the legacy backend is not available, because; // then we don't have any reference to compare to.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testSumW2Error.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx:156,Availability,error,errors,156,"// We can't compare the covariance matrix in these next cases, because it is; // externally provided. Still, it's okay because the parameter values and; // errors are compared, where the errors are inferred from the external; // covariance matrix.; // Compare batch mode vs. scalar mode for SumW2 fits on UNWEIGHTED datasets",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testSumW2Error.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx:187,Availability,error,errors,187,"// We can't compare the covariance matrix in these next cases, because it is; // externally provided. Still, it's okay because the parameter values and; // errors are compared, where the errors are inferred from the external; // covariance matrix.; // Compare batch mode vs. scalar mode for SumW2 fits on UNWEIGHTED datasets",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testSumW2Error.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx:461,Modifiability,extend,extended,461,"// For this test, use a uniform non-unity weight of 1.5. It was set to 0.1; // in the past, but then there were fourth-digit differences between the; // scalar mode and the batch mode. However, this is most likeliy not; // pointing towards a flaw in the batch mode, which is why a value was; // handpicked for which the differences disappear. Any residual problems are; // most likely caused by the unnecessarily complicated implementation of the; // RooAddPdf extended term in the scalar mode: the coefficients are; // projected to the subrange by cached scale factors, while the batch mode; // just uses the same scaling factor as for the full likelihood.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testSumW2Error.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx:549,Performance,cache,cached,549,"// For this test, use a uniform non-unity weight of 1.5. It was set to 0.1; // in the past, but then there were fourth-digit differences between the; // scalar mode and the batch mode. However, this is most likeliy not; // pointing towards a flaw in the batch mode, which is why a value was; // handpicked for which the differences disappear. Any residual problems are; // most likely caused by the unnecessarily complicated implementation of the; // RooAddPdf extended term in the scalar mode: the coefficients are; // projected to the subrange by cached scale factors, while the batch mode; // just uses the same scaling factor as for the full likelihood.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testSumW2Error.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx:12,Testability,test,test,12,"// For this test, use a uniform non-unity weight of 1.5. It was set to 0.1; // in the past, but then there were fourth-digit differences between the; // scalar mode and the batch mode. However, this is most likeliy not; // pointing towards a flaw in the batch mode, which is why a value was; // handpicked for which the differences disappear. Any residual problems are; // most likely caused by the unnecessarily complicated implementation of the; // RooAddPdf extended term in the scalar mode: the coefficients are; // projected to the subrange by cached scale factors, while the batch mode; // just uses the same scaling factor as for the full likelihood.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testSumW2Error.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:3,Testability,Test,Tests,3,"// Tests for RooNLLVar and the other test statistics; // Authors: Stephan Hageboeck, CERN 10/2020; // Jonas Rembser, CERN 10/2022",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:37,Testability,test,test,37,"// Tests for RooNLLVar and the other test statistics; // Authors: Stephan Hageboeck, CERN 10/2020; // Jonas Rembser, CERN 10/2022",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:4,Testability,Test,Test,4,"/// Test the same, but now with RooDataHist. Here, the feature should switch on automatically.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:11,Deployability,Integrat,IntegrateBins,11,"// Disable IntegrateBins forcefully",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:11,Integrability,Integrat,IntegrateBins,11,"// Disable IntegrateBins forcefully",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:15,Deployability,Integrat,IntegrateBins,15,"// Auto-enable IntegrateBins for all RooDataHists.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:15,Integrability,Integrat,IntegrateBins,15,"// Auto-enable IntegrateBins for all RooDataHists.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:158,Security,validat,validate,158,"// Verify that fitting an empty RooDataSet or a RooDataHist with only empty; // bins does not do anything to the parameters. The point of this test is to; // validate that the new CPU backend behaves the same as the legacy evaluation; // backend for empty data objects.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:143,Testability,test,test,143,"// Verify that fitting an empty RooDataSet or a RooDataHist with only empty; // bins does not do anything to the parameters. The point of this test is to; // validate that the new CPU backend behaves the same as the legacy evaluation; // backend for empty data objects.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:64,Testability,test,test,64,"// This bug is related to the implementation details of the old test; // statistics, so the EvalBackend is forced to be Legacy",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:19,Deployability,Integrat,Integrate,19,"/// When using the Integrate() command argument in chi2FitTo, the result should; /// be identical to a fit without bin integration if the fit function is; /// linear. This is a good cross check to see if the integration works.; /// Inspired by the rf609_xychi2fit tutorial.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:119,Deployability,integrat,integration,119,"/// When using the Integrate() command argument in chi2FitTo, the result should; /// be identical to a fit without bin integration if the fit function is; /// linear. This is a good cross check to see if the integration works.; /// Inspired by the rf609_xychi2fit tutorial.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:208,Deployability,integrat,integration,208,"/// When using the Integrate() command argument in chi2FitTo, the result should; /// be identical to a fit without bin integration if the fit function is; /// linear. This is a good cross check to see if the integration works.; /// Inspired by the rf609_xychi2fit tutorial.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:19,Integrability,Integrat,Integrate,19,"/// When using the Integrate() command argument in chi2FitTo, the result should; /// be identical to a fit without bin integration if the fit function is; /// linear. This is a good cross check to see if the integration works.; /// Inspired by the rf609_xychi2fit tutorial.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:119,Integrability,integrat,integration,119,"/// When using the Integrate() command argument in chi2FitTo, the result should; /// be identical to a fit without bin integration if the fit function is; /// linear. This is a good cross check to see if the integration works.; /// Inspired by the rf609_xychi2fit tutorial.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:208,Integrability,integrat,integration,208,"/// When using the Integrate() command argument in chi2FitTo, the result should; /// be identical to a fit without bin integration if the fit function is; /// linear. This is a good cross check to see if the integration works.; /// Inspired by the rf609_xychi2fit tutorial.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:44,Availability,error,errors,44,"// Make weighted XY dataset with asymmetric errors stored The StoreError(); // argument is essential as it makes the dataset store the error in addition; // to the values of the observables. If errors on one or more observables; // are asymmetric, one can store the asymmetric error using the; // StoreAsymError() argument",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:135,Availability,error,error,135,"// Make weighted XY dataset with asymmetric errors stored The StoreError(); // argument is essential as it makes the dataset store the error in addition; // to the values of the observables. If errors on one or more observables; // are asymmetric, one can store the asymmetric error using the; // StoreAsymError() argument",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:194,Availability,error,errors,194,"// Make weighted XY dataset with asymmetric errors stored The StoreError(); // argument is essential as it makes the dataset store the error in addition; // to the values of the observables. If errors on one or more observables; // are asymmetric, one can store the asymmetric error using the; // StoreAsymError() argument",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:277,Availability,error,error,277,"// Make weighted XY dataset with asymmetric errors stored The StoreError(); // argument is essential as it makes the dataset store the error in addition; // to the values of the observables. If errors on one or more observables; // are asymmetric, one can store the asymmetric error using the; // StoreAsymError() argument",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:19,Availability,error,error,19,"// Set X value and error",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:19,Availability,error,error,19,"// Set Y value and error",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:27,Availability,error,errors,27,"// Fit chi^2 using X and Y errors",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:68,Availability,error,errors,68,"// Alternative: fit chi^2 integrating f(x) over ranges defined by X errors,; // rather than taking point at center of bin",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:26,Deployability,integrat,integrating,26,"// Alternative: fit chi^2 integrating f(x) over ranges defined by X errors,; // rather than taking point at center of bin",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:26,Integrability,integrat,integrating,26,"// Alternative: fit chi^2 integrating f(x) over ranges defined by X errors,; // rather than taking point at center of bin",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:72,Availability,error,error,72,"// Verify that the fit result is compatible with true values within the error",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:447,Availability,error,errors,447,"// Test the `Offset(""bin"")` feature of RooAbsPdf::createNLL. Doing the; // bin-by-bin offset is equivalent to calculating the likelihood ratio with the; // NLL of a template histogram that is based of the dataset, so we use this; // relation to do a cross check: if we create a template pdf from the fit data; // and fit this template to the data with the `Offset(""bin"")` option, the; // resulting NLL should always be zero (within some numerical errors).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:3,Testability,Test,Test,3,"// Test the `Offset(""bin"")` feature of RooAbsPdf::createNLL. Doing the; // bin-by-bin offset is equivalent to calculating the likelihood ratio with the; // NLL of a template histogram that is based of the dataset, so we use this; // relation to do a cross check: if we create a template pdf from the fit data; // and fit this template to the data with the `Offset(""bin"")` option, the; // resulting NLL should always be zero (within some numerical errors).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:10,Modifiability,extend,extended,10,"// Create extended PDF model",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:110,Testability,test,test,110,"// To make sure that the bin width is unity and we don't have to worry about; // bin width corrections in the test model.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:95,Availability,down,down,95,"// We have to generate double the number of events because in the next step; // we will weight down each event by a factor of two.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:147,Testability,test,test,147,"// Replace dataset with a clone where the weights are different from unity; // such that the effect of the SumW2Error option is not trivial and we test; // it correctly.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:39,Testability,test,test,39,"// Create weighted dataset and hist to test SumW2 feature",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:50,Modifiability,extend,extended,50,"// Create template PDF based on data.; // For the extended case, we use a RooExtendPdf, and for the non-extended; // case a RooRealSumPdf so we can also test the binned likelihood code path.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:104,Modifiability,extend,extended,104,"// Create template PDF based on data.; // For the extended case, we use a RooExtendPdf, and for the non-extended; // case a RooRealSumPdf so we can also test the binned likelihood code path.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:153,Testability,test,test,153,"// Create template PDF based on data.; // For the extended case, we use a RooExtendPdf, and for the non-extended; // case a RooRealSumPdf so we can also test the binned likelihood code path.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:33,Integrability,wrap,wraps,33,"// Create a RooSimultaneous that wraps this pdf",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:11,Deployability,configurat,configurations,11,"// For all configurations, the bin offset should have the effect of bringing; // the NLL to zero, modulo some numerical imprecisions:",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:11,Modifiability,config,configurations,11,"// For all configurations, the bin offset should have the effect of bringing; // the NLL to zero, modulo some numerical imprecisions:",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:37,Performance,optimiz,optimization,37,"// Verify that the binned likelihood optimization works also when fitting a; // single-channel RooRealSumPdf or RooProdPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:52,Security,validat,validate,52,"// Uniform RooDataHist, but with some empty bins to validate that empty; // bins are treated correctly.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:32,Performance,optimiz,optimization,32,"// Enable the binned likelihood optimization to avoid integrals; // (like in HistFactory).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:48,Safety,avoid,avoid,48,"// Enable the binned likelihood optimization to avoid integrals; // (like in HistFactory).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:3,Integrability,Wrap,Wrap,3,"// Wrap the channel pdf in a RooProdPdf to mimic HistFactory",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:146,Testability,test,tested,146,"// Make sure that the offset is correctly hidden for the likelihoods, even if; // we evaluated the same likelihood without hiding before. This is tested; // because it was fragile before: a change in offset hiding was not considered; // in the dirty state propagation in the new CPU backend.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:3,Modifiability,extend,extended,3,"// extended fit",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:3,Integrability,wrap,wrap,3,"// wrap in a RooSimultaneous",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:3,Modifiability,extend,extended,3,"// extended fit",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:3,Integrability,wrap,wrap,3,"// wrap in a RooSimultaneous",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:3,Testability,Test,Test,3,"// Test if the data can be correctly reset for both individual and simultaneous; // pdfs.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:9,Usability,simpl,simple,9,"// Build simple single-entry datasets so that it's easy to know the; // reference result.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:48,Deployability,update,updated,48,"// The dataset was built in such a way that the updated NLL is shifted by; // 0.5, so this is what we analytically expect.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:174,Testability,log,logic,174,"// In some frameworks like CMS combine, all constraints are contained in a; // single RooProdPdf, even if the constrained parameters are not used in this; // pdf. The RooFit logic to figure out constrained parameters should however; // now be confused by this, and not strip away these parameters from the list; // of constrained parameters.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:137,Testability,test,test,137,"// The RooProdPdf model_1 will contain all the constraints, also the one; // that applies to g_main_1. This is the corner case that this test is; // covering.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testTestStatistics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:3,Testability,Test,Tests,3,"// Tests for the RooWorkspace; // Authors: Stephan Hageboeck, CERN 01/2019",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:67,Deployability,update,updated,67,"/// ROOT-9777, cloning a RooWorkspace. The ModelConfig did not get updated; /// when a workspace was cloned, and was hence pointing to a non-existing workspace.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:24,Modifiability,config,config,24,"// now create the model config for this problem",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:40,Testability,test,tests,40,"/// Set up a simple workspace for later tests.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:13,Usability,simpl,simple,13,"/// Set up a simple workspace for later tests.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:24,Modifiability,config,config,24,"// now create the model config for this problem",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:4,Testability,Test,Test,4,"/// Test the string tokeniser that does all the string splitting for the RooWorkspace; /// implementation.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:4,Testability,Test,Test,4,"/// Test proper string handling when importing an object from a workspace; /// in a different file.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:16,Availability,failure,failures,16,"//Expect import failures:",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:3,Testability,Test,Test,3,"// Test the other code path in RooCustomizer::CustIFace::create.; // Edit the top-level pdf in-place, replacing all existing conflicting nodes in the workspace by <node>_orig",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:3,Testability,Test,Test,3,"// Test that the new model_constrained has been altered",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:3,Testability,Test,Test,3,"// Test that the old model still exists suffixed with _orig",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:70,Performance,perform,performed,70,"/// Test that things still work when hash lookup for elements; /// is performed.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:37,Security,hash,hash,37,"/// Test that things still work when hash lookup for elements; /// is performed.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:4,Testability,Test,Test,4,"/// Test that things still work when hash lookup for elements; /// is performed.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:3,Testability,Test,Test,3,"// Test the other code path in RooCustomizer::CustIFace::create.; // Edit the top-level pdf in-place, replacing all existing conflicting nodes in the workspace by <node>_orig",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:3,Testability,Test,Test,3,"// Test that the new model_constrained has been altered",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:3,Testability,Test,Test,3,"// Test that the old model still exists suffixed with _orig",MatchSource.CODE_COMMENT,roofit/roofitcore/test/testWorkspace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/test_lib.h:65,Integrability,depend,depend,65,"// create gaussians and also the observables and parameters they depend on",MatchSource.CODE_COMMENT,roofit/roofitcore/test/test_lib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/test_lib.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testInterface.cxx:67,Integrability,wrap,wrapped,67,"// Verifies that RooAbsPdf::createNLL() can create a valid RooAbsL wrapped in RooRealL",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testInterface.cxx:39,Integrability,interface,interface,39,"// Verifies that the fitTo parallelize interface creates a valid minimization",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testInterface.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testInterface.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:42,Testability,test,test,42,"// complete type in MultiBinnedConstraint test",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:27,Testability,test,test,27,"// complete type in Binned test",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:21,Testability,test,test,21,"// for MinuitFcnGrad test:",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:25,Testability,test,test,25,"// end for MinuitFcnGrad test",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:138,Modifiability,variab,variable,138,"// Previously, we just called AddGlobalTestEnvironment in global namespace, but this caused either a warning about an; // unused declared variable (the return value of the call) or a parsing problem that the compiler can't handle if you; // don't store the return value at all. The solution is to just define this manual main function. The default gtest; // main function does InitGoogleTest and RUN_ALL_TESTS, we add the environment call in the middle.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:196,Availability,error,errors,196,"// do a minimization, but now using GradMinimizer and its MP version; // in the 1D Gaussian tests, we suppress the positive definiteness; // warnings coming from Minuit2 with offsetting; they are errors both; // in serial RooFit and in the MultiProcess-enabled back-end",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:92,Testability,test,tests,92,"// do a minimization, but now using GradMinimizer and its MP version; // in the 1D Gaussian tests, we suppress the positive definiteness; // warnings coming from Minuit2 with offsetting; they are errors both; // in serial RooFit and in the MultiProcess-enabled back-end",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:54,Testability,test,testing,54,"// do multiple minimizations using MP::GradMinimizer, testing breakdown and rebuild; // parameters",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:12,Testability,test,test,12,"// original test:",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:210,Testability,log,log,210,"// This is a simultaneous fit, so its likelihood has multiple components. In that case, splitting over; // components is always preferable, since it is more precise, due to component offsets matching; // the (-log) function values better.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:16,Modifiability,variab,variables,16,"// reset static variables to automatic",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:196,Availability,error,errors,196,"// do a minimization, but now using GradMinimizer and its MP version; // in the 1D Gaussian tests, we suppress the positive definiteness; // warnings coming from Minuit2 with offsetting; they are errors both; // in serial RooFit and in the MultiProcess-enabled back-end",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:92,Testability,test,tests,92,"// do a minimization, but now using GradMinimizer and its MP version; // in the 1D Gaussian tests, we suppress the positive definiteness; // warnings coming from Minuit2 with offsetting; they are errors both; // in serial RooFit and in the MultiProcess-enabled back-end",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:334,Availability,error,errors,334,"// Note: we cannot expect exact equal results here in most cases when using; // event-based splitting (which is currently the default; THIS MAY CHANGE!).; // See LikelihoodJobTest, UnbinnedGaussian1DSelectedParameterValues for an; // example of where slight bit-wise differences can pop up in fits like this; // due to minor bit-wise errors in Kahan summation due to different split; // ups over the event range. We do expect pretty close results, though,; // because this fit only has 4 iterations and bit-wise differences should; // not add up too much.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:51,Testability,test,test,51,"// we want to split only over components so we can test component-offsets precisely; // (event-offsets give more variation)",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:16,Modifiability,variab,variables,16,"// reset static variables to automatic",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:68,Availability,error,errors,68,"// In this test, we setup a model that we know will give evaluation errors, because Minuit will try parameters; // outside of the physical range during line search. Using the error handling mechanism in RooMinimizerFcn and; // MinuitFcnGrad, Minuit should get sent out of this area again.; // Specifically, this test triggers the classic error handling mechanism (logEvalError).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:175,Availability,error,error,175,"// In this test, we setup a model that we know will give evaluation errors, because Minuit will try parameters; // outside of the physical range during line search. Using the error handling mechanism in RooMinimizerFcn and; // MinuitFcnGrad, Minuit should get sent out of this area again.; // Specifically, this test triggers the classic error handling mechanism (logEvalError).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:338,Availability,error,error,338,"// In this test, we setup a model that we know will give evaluation errors, because Minuit will try parameters; // outside of the physical range during line search. Using the error handling mechanism in RooMinimizerFcn and; // MinuitFcnGrad, Minuit should get sent out of this area again.; // Specifically, this test triggers the classic error handling mechanism (logEvalError).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:11,Testability,test,test,11,"// In this test, we setup a model that we know will give evaluation errors, because Minuit will try parameters; // outside of the physical range during line search. Using the error handling mechanism in RooMinimizerFcn and; // MinuitFcnGrad, Minuit should get sent out of this area again.; // Specifically, this test triggers the classic error handling mechanism (logEvalError).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:312,Testability,test,test,312,"// In this test, we setup a model that we know will give evaluation errors, because Minuit will try parameters; // outside of the physical range during line search. Using the error handling mechanism in RooMinimizerFcn and; // MinuitFcnGrad, Minuit should get sent out of this area again.; // Specifically, this test triggers the classic error handling mechanism (logEvalError).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:364,Testability,log,logEvalError,364,"// In this test, we setup a model that we know will give evaluation errors, because Minuit will try parameters; // outside of the physical range during line search. Using the error handling mechanism in RooMinimizerFcn and; // MinuitFcnGrad, Minuit should get sent out of this area again.; // Specifically, this test triggers the classic error handling mechanism (logEvalError).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:80,Availability,error,errors,80,"// if m0 were constant (i.e. setConstant(true)), the fit would converge without errors, because m0 outside of the; // physical area of the Argus distribution is what causes the errors in the line search phase of the fit",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:177,Availability,error,errors,177,"// if m0 were constant (i.e. setConstant(true)), the fit would converge without errors, because m0 outside of the; // physical area of the Argus distribution is what causes the errors in the line search phase of the fit",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:153,Availability,error,error,153,"// TODO: https://github.com/root-project/root/pull/12328 meenemen!; /// Fit a simple linear function, that starts in the negative. Triggers RooNaNPacker error handling.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:78,Usability,simpl,simple,78,"// TODO: https://github.com/root-project/root/pull/12328 meenemen!; /// Fit a simple linear function, that starts in the negative. Triggers RooNaNPacker error handling.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:13,Availability,error,error,13,"// TODO: add error handling tests that trigger the RooNaNPacker error handling paths (see testNaNPacker for example; // setups). In particular a fit of a simultaneous or constrained likelihood to trigger the RooSumL path which has; // additional handling of the packed NaNs that isn't tested now.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:64,Availability,error,error,64,"// TODO: add error handling tests that trigger the RooNaNPacker error handling paths (see testNaNPacker for example; // setups). In particular a fit of a simultaneous or constrained likelihood to trigger the RooSumL path which has; // additional handling of the packed NaNs that isn't tested now.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:28,Testability,test,tests,28,"// TODO: add error handling tests that trigger the RooNaNPacker error handling paths (see testNaNPacker for example; // setups). In particular a fit of a simultaneous or constrained likelihood to trigger the RooSumL path which has; // additional handling of the packed NaNs that isn't tested now.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:90,Testability,test,testNaNPacker,90,"// TODO: add error handling tests that trigger the RooNaNPacker error handling paths (see testNaNPacker for example; // setups). In particular a fit of a simultaneous or constrained likelihood to trigger the RooSumL path which has; // additional handling of the packed NaNs that isn't tested now.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:285,Testability,test,tested,285,"// TODO: add error handling tests that trigger the RooNaNPacker error handling paths (see testNaNPacker for example; // setups). In particular a fit of a simultaneous or constrained likelihood to trigger the RooSumL path which has; // additional handling of the packed NaNs that isn't tested now.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:51,Testability,test,test,51,"// we want to split only over components so we can test component-offsets precisely; // (event-offsets give more variation)",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:16,Modifiability,variab,variables,16,"// reset static variables to automatic",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:11,Availability,error,error,11,"// Trigger error condition by setting both sig and bkg; // to zero in bin zero, thus triggering a likelihood; // error since Poisson(N|0) is undefined",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:113,Availability,error,error,113,"// Trigger error condition by setting both sig and bkg; // to zero in bin zero, thus triggering a likelihood; // error since Poisson(N|0) is undefined",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:11,Availability,error,error,11,"// trigger error or don't",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:47,Performance,optimiz,optimization,47,"// Fixes for known features, binned likelihood optimization",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:3,Safety,sanity check,sanity check,3,"// sanity check",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:51,Testability,test,test,51,"// we want to split only over components so we can test component-offsets",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:16,Modifiability,variab,variables,16,"// reset static variables to automatic",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:27,Testability,test,test,27,"// complete type in Binned test",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:42,Testability,test,test,42,"// complete type in MultiBinnedConstraint test",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:138,Modifiability,variab,variable,138,"// Previously, we just called AddGlobalTestEnvironment in global namespace, but this caused either a warning about an; // unused declared variable (the return value of the call) or a parsing problem that the compiler can't handle if you; // don't store the return value at all. The solution is to just define this manual main function. The default gtest; // main function does InitGoogleTest and RUN_ALL_TESTS, we add the environment call in the middle.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:35,Testability,test,test,35,"// The parameter mu values in this test were selected because they were shown to generate deviant values; // for the LikelihoodJob in other tests.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:140,Testability,test,tests,140,"// The parameter mu values in this test were selected because they were shown to generate deviant values; // for the LikelihoodJob in other tests.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:16,Modifiability,variab,variables,16,"// reset static variables to automatic",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:8,Testability,test,test,8,"// This test was disabled because it was occasionally timing out on the CI.; // Evaluating the same likelihood twice should not be a problem anymore, and if; // it would be it would also manifest in other tests.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:205,Testability,test,tests,205,"// This test was disabled because it was occasionally timing out on the CI.; // Evaluating the same likelihood twice should not be a problem anymore, and if; // it would be it would also manifest in other tests.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:254,Testability,log,log,254,"// SIMULTANEOUS FIT OF 2 UNBINNED DATASETS; // This is a simultaneous fit, so its likelihood has multiple components. In that case, splitting over; // components is always preferable, since it is more precise, due to component offsets matching; // the (-log) function values better.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:16,Modifiability,variab,variables,16,"// reset static variables to automatic",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:12,Testability,test,test,12,"// original test:",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:18,Testability,test,test,18,"// A variation to test some additional parameters (ConstrainedParameters and offsetting); // The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:187,Testability,test,test,187,"// A variation to test some additional parameters (ConstrainedParameters and offsetting); // The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:287,Testability,test,test,287,"// A variation to test some additional parameters (ConstrainedParameters and offsetting); // The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:55,Integrability,Wrap,Wrapper,55,"// The RFTS classes used for minimization (RooAbsL and Wrapper derivatives) will return offset; // values, whereas RooNLLVar::getVal will always return the non-offset value, since that is the ""actual"" likelihood; // value. RooRealL will also give the non-offset value, so that can be directly compared to the RooNLLVar::getVal; // result (the nll0 vs nll2 comparison below). To compare to the raw RooAbsL/Wrapper value nll1, however, we need to; // manually add the offset.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:405,Integrability,Wrap,Wrapper,405,"// The RFTS classes used for minimization (RooAbsL and Wrapper derivatives) will return offset; // values, whereas RooNLLVar::getVal will always return the non-offset value, since that is the ""actual"" likelihood; // value. RooRealL will also give the non-offset value, so that can be directly compared to the RooNLLVar::getVal; // result (the nll0 vs nll2 comparison below). To compare to the raw RooAbsL/Wrapper value nll1, however, we need to; // manually add the offset.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:39,Testability,test,test,39,"// Based on ConstrainedAndOffset, this test tests different parallelization strategies; // The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:44,Testability,test,tests,44,"// Based on ConstrainedAndOffset, this test tests different parallelization strategies; // The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:185,Testability,test,test,185,"// Based on ConstrainedAndOffset, this test tests different parallelization strategies; // The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:285,Testability,test,test,285,"// Based on ConstrainedAndOffset, this test tests different parallelization strategies; // The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:55,Integrability,Wrap,Wrapper,55,"// The RFTS classes used for minimization (RooAbsL and Wrapper derivatives) will return offset; // values, whereas RooNLLVar::getVal will always return the non-offset value, since that is the ""actual"" likelihood; // value. RooRealL will also give the non-offset value, so that can be directly compared to the RooNLLVar::getVal; // result (the nll0 vs nll2 comparison below). To compare to the raw RooAbsL/Wrapper value nll1, however, we need to; // manually add the offset.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:405,Integrability,Wrap,Wrapper,405,"// The RFTS classes used for minimization (RooAbsL and Wrapper derivatives) will return offset; // values, whereas RooNLLVar::getVal will always return the non-offset value, since that is the ""actual"" likelihood; // value. RooRealL will also give the non-offset value, so that can be directly compared to the RooNLLVar::getVal; // result (the nll0 vs nll2 comparison below). To compare to the raw RooAbsL/Wrapper value nll1, however, we need to; // manually add the offset.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:16,Modifiability,variab,variables,16,"// reset static variables to automatic",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:53,Testability,test,test,53,"// the last value is larger than number of events to test that; // number of component tasks:",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx:27,Testability,test,test,27,"// complete type in Binned test",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx:42,Testability,test,test,42,"// complete type in MultiBinnedConstraint test",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx:138,Modifiability,variab,variable,138,"// Previously, we just called AddGlobalTestEnvironment in global namespace, but this caused either a warning about an; // unused declared variable (the return value of the call) or a parsing problem that the compiler can't handle if you; // don't store the return value at all. The solution is to just define this manual main function. The default gtest; // main function does InitGoogleTest and RUN_ALL_TESTS, we add the environment call in the middle.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx:12,Testability,test,test,12,"// original test:",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx:18,Testability,test,test,18,"// A variation to test some additional parameters (ConstrainedParameters and offsetting); // The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx:187,Testability,test,test,187,"// A variation to test some additional parameters (ConstrainedParameters and offsetting); // The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx:287,Testability,test,test,287,"// A variation to test some additional parameters (ConstrainedParameters and offsetting); // The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx:55,Integrability,Wrap,Wrapper,55,"// The RFTS classes used for minimization (RooAbsL and Wrapper derivatives) will return offset; // values, whereas RooNLLVar::getVal will always return the non-offset value, since that is the ""actual"" likelihood; // value. RooRealL will also give the non-offset value, so that can be directly compared to the RooNLLVar::getVal; // result (the nll0 vs nll2 comparison below). To compare to the raw RooAbsL/Wrapper value nll1, however, we need to; // manually add the offset.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx:405,Integrability,Wrap,Wrapper,405,"// The RFTS classes used for minimization (RooAbsL and Wrapper derivatives) will return offset; // values, whereas RooNLLVar::getVal will always return the non-offset value, since that is the ""actual"" likelihood; // value. RooRealL will also give the non-offset value, so that can be directly compared to the RooNLLVar::getVal; // result (the nll0 vs nll2 comparison below). To compare to the raw RooAbsL/Wrapper value nll1, however, we need to; // manually add the offset.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testPlot.cxx:27,Testability,assert,assert,27,"// Run the RooUnitTest and assert that it succeeds with gtest",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:27,Testability,test,test,27,"// complete type in Binned test",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:42,Testability,test,test,42,"// complete type in MultiBinnedConstraint test",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:138,Modifiability,variab,variable,138,"// Previously, we just called AddGlobalTestEnvironment in global namespace, but this caused either a warning about an; // unused declared variable (the return value of the call) or a parsing problem that the compiler can't handle if you; // don't store the return value at all. The solution is to just define this manual main function. The default gtest; // main function does InitGoogleTest and RUN_ALL_TESTS, we add the environment call in the middle.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:15,Testability,test,tests,15,"// Note: these tests could be simpler; the models were just copied; // from testLikelihoodSerial for convenience.; // Introspection tests",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:76,Testability,test,testLikelihoodSerial,76,"// Note: these tests could be simpler; the models were just copied; // from testLikelihoodSerial for convenience.; // Introspection tests",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:132,Testability,test,tests,132,"// Note: these tests could be simpler; the models were just copied; // from testLikelihoodSerial for convenience.; // Introspection tests",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:30,Usability,simpl,simpler,30,"// Note: these tests could be simpler; the models were just copied; // from testLikelihoodSerial for convenience.; // Introspection tests",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:3,Testability,Test,Test,3,"// Test whether the summed total of multiple sections gives the same result; // as an evaluation with a single section over the whole event range.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:219,Availability,error,errors,219,"// We cannot EXPECT_EQ in this test, because we compare actually different; // calculations. The multiple additions and FMA operations involved in the; // calculation of the multiple parts introduces different rounding errors; // on the CPU level than the single calculation over all events at once.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:31,Testability,test,test,31,"// We cannot EXPECT_EQ in this test, because we compare actually different; // calculations. The multiple additions and FMA operations involved in the; // calculation of the multiple parts introduces different rounding errors; // on the CPU level than the single calculation over all events at once.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:3,Testability,Test,Test,3,"// Test whether the summed total of multiple sections gives the same result; // as an evaluation with a single section over the whole event range.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:38,Testability,test,test,38,"// See comment in first EventSections test for explanation on why no EXPECT_EQ.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:38,Testability,test,test,38,"// See comment in first EventSections test for explanation on why no EXPECT_EQ.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:11,Testability,test,test,11,"// Here we test behavior when sections are smaller than a single event or; // generally speaking when they do not align perfectly with integer event; // boundaries. For instance, when we have 10 events, but 9 sections (one; // must contain two events, but which section?), or 11 (one must be empty,; // but which one?).",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:38,Testability,test,test,38,"// See comment in first EventSections test for explanation on why no EXPECT_EQ.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:38,Testability,test,test,38,"// See comment in first EventSections test for explanation on why no EXPECT_EQ.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:38,Testability,test,test,38,"// See comment in first EventSections test for explanation on why no EXPECT_EQ.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:308,Integrability,depend,depend,308,"// Like RooAbsLTest.SubEventSections, but here we can also check behavior; // for when component likelihoods of a top-level RooSumL have a different; // number (less) of events than the RooSumL itself. Moreover, this more; // complex likelihood has an extended term and a subsidiary component; // which also depend on section so will also be checked here.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:252,Modifiability,extend,extended,252,"// Like RooAbsLTest.SubEventSections, but here we can also check behavior; // for when component likelihoods of a top-level RooSumL have a different; // number (less) of events than the RooSumL itself. Moreover, this more; // complex likelihood has an extended term and a subsidiary component; // which also depend on section so will also be checked here.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:38,Testability,test,test,38,"// See comment in first EventSections test for explanation on why no EXPECT_EQ.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:72,Modifiability,config,configured,72,"// compare the value of the likelihood to that generated by a similarly configured RooNLLVar",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:72,Modifiability,config,configured,72,"// compare the value of the likelihood to that generated by a similarly configured RooNLLVar",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:72,Modifiability,config,configured,72,"// compare the value of the likelihood to that generated by a similarly configured RooNLLVar",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:13,Testability,test,tests,13,"// TODO: add tests covering all constOptimizeTestStatistic opcode cases.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx:13,Testability,test,test,13,"// Real-life test: calculate a NLL using event-based parallelization. This; // should replicate RooRealMPFE results.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooRealL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx:97,Testability,test,test,97,"// The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooRealL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx:197,Testability,test,test,197,"// The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooRealL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx:97,Testability,test,test,97,"// The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooRealL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx:197,Testability,test,test,197,"// The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooRealL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx:60,Testability,test,test,60,"// do a minimization (e.g. like in GradMinimizer_Gaussian1D test)",MatchSource.CODE_COMMENT,roofit/roofitcore/test/TestStatistics/testRooRealL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/inc/RooFitMoreLib.h:12,Performance,load,load,12,"// class to load RooFitMore library",MatchSource.CODE_COMMENT,roofit/roofitmore/inc/RooFitMoreLib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/inc/RooFitMoreLib.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/inc/RooHypatia2.h:29,Testability,test,testing,29,"/* Analytical integrals need testing. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=nullptr) const override;; double analyticalIntegral(Int_t code, const char* rangeName=nullptr) const override;. */",MatchSource.CODE_COMMENT,roofit/roofitmore/inc/RooHypatia2.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/inc/RooHypatia2.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/inc/RooLegendre.h:23,Security,access,access,23,"// allow RooSpHarmonic access...",MatchSource.CODE_COMMENT,roofit/roofitmore/inc/RooLegendre.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/inc/RooLegendre.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h:10,Energy Efficiency,adapt,adapter,10,"///Little adapter that gives a bracket operator to types that don't; ///have one. It completely ignores the index and returns a constant.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/BracketAdapters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h:10,Integrability,adapter,adapter,10,"///Little adapter that gives a bracket operator to types that don't; ///have one. It completely ignores the index and returns a constant.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/BracketAdapters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h:10,Modifiability,adapt,adapter,10,"///Little adapter that gives a bracket operator to types that don't; ///have one. It completely ignores the index and returns a constant.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/BracketAdapters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h:14,Energy Efficiency,adapt,adapter,14,"/// Construct adapter from a fallback value and a batch of values.; /// - If `batch.empty()`, always return `payload`.; /// - Else, return `batch[i]`.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/BracketAdapters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h:14,Integrability,adapter,adapter,14,"/// Construct adapter from a fallback value and a batch of values.; /// - If `batch.empty()`, always return `payload`.; /// - Else, return `batch[i]`.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/BracketAdapters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h:14,Modifiability,adapt,adapter,14,"/// Construct adapter from a fallback value and a batch of values.; /// - If `batch.empty()`, always return `payload`.; /// - Else, return `batch[i]`.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/BracketAdapters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h:14,Energy Efficiency,adapt,adapter,14,"/// Construct adapter from a batch of values.; /// - If `batch.size() == 1`, always return the value at `batch[0]`.; /// - Else, return `batch[i]`.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/BracketAdapters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h:14,Integrability,adapter,adapter,14,"/// Construct adapter from a batch of values.; /// - If `batch.size() == 1`, always return the value at `batch[0]`.; /// - Else, return `batch[i]`.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/BracketAdapters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h:14,Modifiability,adapt,adapter,14,"/// Construct adapter from a batch of values.; /// - If `batch.size() == 1`, always return the value at `batch[0]`.; /// - Else, return `batch[i]`.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/BracketAdapters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:939,Availability,error,error,939,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:841,Deployability,integrat,integration,841,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:917,Deployability,integrat,integration,917,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:1318,Deployability,integrat,integration,1318,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:1519,Deployability,integrat,integrator,1519,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:1645,Deployability,integrat,integration,1645,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:1695,Deployability,integrat,integrated,1695,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:867,Energy Efficiency,adapt,adaptive,867,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:1496,Energy Efficiency,adapt,adaptive,1496,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:841,Integrability,integrat,integration,841,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:917,Integrability,integrat,integration,917,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:1318,Integrability,integrat,integration,1318,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:1519,Integrability,integrat,integrator,1519,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:1645,Integrability,integrat,integration,1645,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:1695,Integrability,integrat,integrated,1695,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:867,Modifiability,adapt,adaptive,867,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:1496,Modifiability,adapt,adaptive,1496,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveGaussKronrodIntegrator1D.cxx; \class RooAdaptiveGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An adaptive Gaussian quadrature method for numerical integration in; which error is estimated based on evaluation at special points; known as the ""Kronrod points"". By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a \f$ x \rightarrow 1/x \f$ coordinate; transformation. This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached. For integrands with integrable singularities the Wynn epsilon rule; can be selected to speed up the convergence of these integrals.; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:110,Deployability,integrat,integrator,110,"//-------------------------------------------------------------------; /// \cond ROOFIT_INTERNAL; // register integrator class; // create a derived class in order to call the protected method of the; // RoodaptiveGaussKronrodIntegrator1D",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:110,Integrability,integrat,integrator,110,"//-------------------------------------------------------------------; /// \cond ROOFIT_INTERNAL; // register integrator class; // create a derived class in order to call the protected method of the; // RoodaptiveGaussKronrodIntegrator1D",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:26,Deployability,integrat,integrator,26,"// class used to register integrator at loafing time",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:26,Integrability,integrat,integrator,26,"// class used to register integrator at loafing time",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:194,Deployability,integrat,integrator,194,"// namespace RooFit_internal; ////////////////////////////////////////////////////////////////////////////////; /// Register this class with RooNumIntConfig as a possible choice of numeric; /// integrator for one-dimensional integrals over finite and infinite domains",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:194,Integrability,integrat,integrator,194,"// namespace RooFit_internal; ////////////////////////////////////////////////////////////////////////////////; /// Register this class with RooNumIntConfig as a possible choice of numeric; /// integrator for one-dimensional integrals over finite and infinite domains",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:130,Deployability,configurat,configuration,130,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking a function binding and a configuration object",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:130,Modifiability,config,configuration,130,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking a function binding and a configuration object",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:39,Deployability,integrat,integrate,39,"// Use this form of the constructor to integrate over the function's default range.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:39,Integrability,integrat,integrate,39,"// Use this form of the constructor to integrate over the function's default range.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:128,Deployability,integrat,integration,128,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking a function binding, an integration range and a configuration object",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:152,Deployability,configurat,configuration,152,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking a function binding, an integration range and a configuration object",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:128,Integrability,integrat,integration,128,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking a function binding, an integration range and a configuration object",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:152,Modifiability,config,configuration,152,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking a function binding, an integration range and a configuration object",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:39,Deployability,integrat,integrate,39,"// Use this form of the constructor to integrate over the function's default range.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:39,Integrability,integrat,integrate,39,"// Use this form of the constructor to integrate over the function's default range.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:97,Deployability,integrat,integrator,97,"////////////////////////////////////////////////////////////////////////////////; /// Initialize integrator allocate buffers and setup GSL workspace",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:108,Energy Efficiency,allocate,allocate,108,"////////////////////////////////////////////////////////////////////////////////; /// Initialize integrator allocate buffers and setup GSL workspace",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:97,Integrability,integrat,integrator,97,"////////////////////////////////////////////////////////////////////////////////; /// Initialize integrator allocate buffers and setup GSL workspace",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate coordinate buffer size after number of function dimensions",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:97,Deployability,integrat,integration,97,"////////////////////////////////////////////////////////////////////////////////; /// Change our integration limits. Return true if the new limits are; /// ok, or otherwise false. Always returns false and does nothing; /// if this object was constructed to always use our integrand's limits.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:97,Integrability,integrat,integration,97,"////////////////////////////////////////////////////////////////////////////////; /// Change our integration limits. Return true if the new limits are; /// ok, or otherwise false. Always returns false and does nothing; /// if this object was constructed to always use our integrand's limits.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:101,Deployability,integrat,integration,101,"////////////////////////////////////////////////////////////////////////////////; /// Check that our integration range is finite and otherwise return false.; /// Update the limits from the integrand if requested.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:162,Deployability,Update,Update,162,"////////////////////////////////////////////////////////////////////////////////; /// Check that our integration range is finite and otherwise return false.; /// Update the limits from the integrand if requested.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:101,Integrability,integrat,integration,101,"////////////////////////////////////////////////////////////////////////////////; /// Check that our integration range is finite and otherwise return false.; /// Update the limits from the integrand if requested.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:16,Availability,error,error,16,"/* input domain error, e.g sqrt(-1) */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:29,Availability,toler,tolerance,29,/* user specified an invalid tolerance */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:33,Availability,toler,tolerance,33,/* failed to reach the specified tolerance */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:78,Deployability,integrat,integrators,78,// INCLUDED BELOW #include <gsl/gsl_integration.h>; /* Workspace for adaptive integrators */; // WVE MOVED TO HEAD OF FILE; /* Definition of an integration rule */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:144,Deployability,integrat,integration,144,// INCLUDED BELOW #include <gsl/gsl_integration.h>; /* Workspace for adaptive integrators */; // WVE MOVED TO HEAD OF FILE; /* Definition of an integration rule */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:69,Energy Efficiency,adapt,adaptive,69,// INCLUDED BELOW #include <gsl/gsl_integration.h>; /* Workspace for adaptive integrators */; // WVE MOVED TO HEAD OF FILE; /* Definition of an integration rule */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:78,Integrability,integrat,integrators,78,// INCLUDED BELOW #include <gsl/gsl_integration.h>; /* Workspace for adaptive integrators */; // WVE MOVED TO HEAD OF FILE; /* Definition of an integration rule */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:144,Integrability,integrat,integration,144,// INCLUDED BELOW #include <gsl/gsl_integration.h>; /* Workspace for adaptive integrators */; // WVE MOVED TO HEAD OF FILE; /* Definition of an integration rule */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:69,Modifiability,adapt,adaptive,69,// INCLUDED BELOW #include <gsl/gsl_integration.h>; /* Workspace for adaptive integrators */; // WVE MOVED TO HEAD OF FILE; /* Definition of an integration rule */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:17,Deployability,integrat,integration,17,/* The low-level integration rules in QUADPACK are identified by small; integers (1-6). We'll use symbolic constants to refer to them. */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:17,Integrability,integrat,integration,17,/* The low-level integration rules in QUADPACK are identified by small; integers (1-6). We'll use symbolic constants to refer to them. */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:49,Availability,error,error,49,/* Check whether the list contains more than two error estimates */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:106,Availability,error,error,106,"/* This part of the routine is only executed if, due to a difficult; integrand, subdivision increased the error estimate. In the normal; case the insert procedure should start after the nrmax-th largest; error estimate. */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:204,Availability,error,error,204,"/* This part of the routine is only executed if, due to a difficult; integrand, subdivision increased the error estimate. In the normal; case the insert procedure should start after the nrmax-th largest; error estimate. */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:20,Integrability,rout,routine,20,"/* This part of the routine is only executed if, due to a difficult; integrand, subdivision increased the error estimate. In the normal; case the insert procedure should start after the nrmax-th largest; error estimate. */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:97,Integrability,depend,depends,97,/* Compute the number of elements in the list to be maintained in; descending order. This number depends on the number of; subdivisions still allowed. */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:44,Availability,down,down,44,"/* Insert errmax by traversing the list top-down, starting; comparison from the element elist(order(i_nrmax+1)). */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:88,Availability,fault,fault,88,/* The order of the tests in the following line is important to; prevent a segmentation fault */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:20,Testability,test,tests,20,/* The order of the tests in the following line is important to; prevent a segmentation fault */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:21,Deployability,integrat,integration,21,/* perform the first integration */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:21,Integrability,integrat,integration,21,/* perform the first integration */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:3,Performance,perform,perform,3,/* perform the first integration */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:3,Testability,Test,Test,3,/* Test on accuracy */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:43,Availability,error,error,43,/* Bisect the subinterval with the largest error estimate */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:13,Availability,error,error,13,/* round off error */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:7,Availability,error,error,7,/* set error flag in the case of bad integrand behaviour at; a point of the integration range */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:76,Deployability,integrat,integration,76,/* set error flag in the case of bad integrand behaviour at; a point of the integration range */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:76,Integrability,integrat,integration,76,/* set error flag in the case of bad integrand behaviour at; a point of the integration range */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:29,Deployability,integrat,integration,29,/* scale by the width of the integration region */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:29,Integrability,integrat,integration,29,/* scale by the width of the integration region */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:104,Modifiability,extend,extend,104,"/* xgk[1], xgk[3], ... abscissae of the 7-point gauss rule.; xgk[0], xgk[2], ... abscissae to optimally extend the 7-point gauss rule */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:105,Modifiability,extend,extend,105,"/* xgk[1], xgk[3], ... abscissae of the 10-point gauss rule.; xgk[0], xgk[2], ... abscissae to optimally extend the 10-point gauss rule */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:105,Modifiability,extend,extend,105,"/* xgk[1], xgk[3], ... abscissae of the 15-point gauss rule.; xgk[0], xgk[2], ... abscissae to optimally extend the 15-point gauss rule */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:105,Modifiability,extend,extend,105,"/* xgk[1], xgk[3], ... abscissae of the 20-point gauss rule.; xgk[0], xgk[2], ... abscissae to optimally extend the 20-point gauss rule */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:105,Modifiability,extend,extend,105,"/* xgk[1], xgk[3], ... abscissae of the 25-point gauss rule.; xgk[0], xgk[2], ... abscissae to optimally extend the 25-point gauss rule */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:105,Modifiability,extend,extend,105,"/* xgk[1], xgk[3], ... abscissae of the 30-point gauss rule.; xgk[0], xgk[2], ... abscissae to optimally extend the 30-point gauss rule */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:29,Safety,avoid,avoid,29,"/* exception in constructor, avoid memory leak */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:29,Safety,avoid,avoid,29,"/* exception in constructor, avoid memory leak */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:29,Safety,avoid,avoid,29,"/* exception in constructor, avoid memory leak */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:29,Safety,avoid,avoid,29,"/* exception in constructor, avoid memory leak */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:29,Safety,avoid,avoid,29,"/* exception in constructor, avoid memory leak */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:29,Safety,avoid,avoid,29,"/* exception in constructor, avoid memory leak */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:80,Availability,error,error,80,"// INCLUDED BELOW #include ""qpsrt2.c""; /* The smallest interval has the largest error. Before bisecting; decrease the sum of the errors over the larger intervals; (error_over_large_intervals) and perform extrapolation. */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:129,Availability,error,errors,129,"// INCLUDED BELOW #include ""qpsrt2.c""; /* The smallest interval has the largest error. Before bisecting; decrease the sum of the errors over the larger intervals; (error_over_large_intervals) and perform extrapolation. */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:196,Performance,perform,perform,196,"// INCLUDED BELOW #include ""qpsrt2.c""; /* The smallest interval has the largest error. Before bisecting; decrease the sum of the errors over the larger intervals; (error_over_large_intervals) and perform extrapolation. */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:11,Safety,detect,detect,11,"/* Test to detect irregular behaviour in the table, and; eventually omit a part of the table by adjusting the value of; n. */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:3,Testability,Test,Test,3,"/* Test to detect irregular behaviour in the table, and; eventually omit a part of the table by adjusting the value of; n. */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:11,Availability,error,error,11,/* Compute error estimate */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:214,Deployability,update,update,214,"/* In QUADPACK the variable table->nres is incremented at the top of; qelg, so it increases on every call. This leads to the array; res3la being accessed when its elements are still undefined, so I; have moved the update to this point so that its value more; useful. */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:19,Modifiability,variab,variable,19,"/* In QUADPACK the variable table->nres is incremented at the top of; qelg, so it increases on every call. This leads to the array; res3la being accessed when its elements are still undefined, so I; have moved the update to this point so that its value more; useful. */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:145,Security,access,accessed,145,"/* In QUADPACK the variable table->nres is incremented at the top of; qelg, so it increases on every call. This leads to the array; res3la being accessed when its elements are still undefined, so I; have moved the update to this point so that its value more; useful. */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:80,Deployability,integrat,integrate,80,"/* QAGI: evaluate an integral over an infinite range using the; transformation. integrate(f(x),-Inf,Inf) = integrate((f((1-t)/t) + f(-(1-t)/t))/t^2,0,1). */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:107,Deployability,integrat,integrate,107,"/* QAGI: evaluate an integral over an infinite range using the; transformation. integrate(f(x),-Inf,Inf) = integrate((f((1-t)/t) + f(-(1-t)/t))/t^2,0,1). */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:80,Integrability,integrat,integrate,80,"/* QAGI: evaluate an integral over an infinite range using the; transformation. integrate(f(x),-Inf,Inf) = integrate((f((1-t)/t) + f(-(1-t)/t))/t^2,0,1). */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:107,Integrability,integrat,integrate,107,"/* QAGI: evaluate an integral over an infinite range using the; transformation. integrate(f(x),-Inf,Inf) = integrate((f((1-t)/t) + f(-(1-t)/t))/t^2,0,1). */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:82,Deployability,integrat,integrate,82,"/* QAGIL: Evaluate an integral over an infinite range using the; transformation,. integrate(f(x),-Inf,b) = integrate(f(b-(1-t)/t)/t^2,0,1). */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:107,Deployability,integrat,integrate,107,"/* QAGIL: Evaluate an integral over an infinite range using the; transformation,. integrate(f(x),-Inf,b) = integrate(f(b-(1-t)/t)/t^2,0,1). */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:82,Integrability,integrat,integrate,82,"/* QAGIL: Evaluate an integral over an infinite range using the; transformation,. integrate(f(x),-Inf,b) = integrate(f(b-(1-t)/t)/t^2,0,1). */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:107,Integrability,integrat,integrate,107,"/* QAGIL: Evaluate an integral over an infinite range using the; transformation,. integrate(f(x),-Inf,b) = integrate(f(b-(1-t)/t)/t^2,0,1). */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:81,Deployability,integrat,integrate,81,"/* QAGIU: Evaluate an integral over an infinite range using the; transformation. integrate(f(x),a,Inf) = integrate(f(a+(1-t)/t)/t^2,0,1). */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:105,Deployability,integrat,integrate,105,"/* QAGIU: Evaluate an integral over an infinite range using the; transformation. integrate(f(x),a,Inf) = integrate(f(a+(1-t)/t)/t^2,0,1). */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:81,Integrability,integrat,integrate,81,"/* QAGIU: Evaluate an integral over an infinite range using the; transformation. integrate(f(x),a,Inf) = integrate(f(a+(1-t)/t)/t^2,0,1). */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:105,Integrability,integrat,integrate,105,"/* QAGIU: Evaluate an integral over an infinite range using the; transformation. integrate(f(x),a,Inf) = integrate(f(a+(1-t)/t)/t^2,0,1). */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:8,Deployability,integrat,integration,8,/* Main integration function */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:8,Integrability,integrat,integration,8,/* Main integration function */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:3,Testability,Test,Test,3,/* Test on accuracy */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:21,Deployability,integrat,integration,21,/* Perform the first integration */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:21,Integrability,integrat,integration,21,/* Perform the first integration */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:3,Performance,Perform,Perform,3,/* Perform the first integration */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:43,Availability,error,error,43,/* Bisect the subinterval with the largest error estimate */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:170,Availability,error,errors,170,"/* Improve previous approximations to the integral and test for; accuracy. We write these expressions in the same way as the original; QUADPACK code so that the rounding errors are the same, which; makes testing easier. */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:55,Testability,test,test,55,"/* Improve previous approximations to the integral and test for; accuracy. We write these expressions in the same way as the original; QUADPACK code so that the rounding errors are the same, which; makes testing easier. */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:204,Testability,test,testing,204,"/* Improve previous approximations to the integral and test for; accuracy. We write these expressions in the same way as the original; QUADPACK code so that the rounding errors are the same, which; makes testing easier. */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:40,Availability,error,error,40,/* Test for roundoff and eventually set error flag */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:3,Testability,Test,Test,3,/* Test for roundoff and eventually set error flag */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:13,Availability,error,error,13,/* round off error */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:7,Availability,error,error,7,/* set error flag in the case of bad integrand behaviour at; a point of the integration range */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:76,Deployability,integrat,integration,76,/* set error flag in the case of bad integrand behaviour at; a point of the integration range */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:76,Integrability,integrat,integration,76,/* set error flag in the case of bad integrand behaviour at; a point of the integration range */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:10,Modifiability,variab,variables,10,/* set up variables on first iteration */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:3,Testability,test,test,3,/* test whether the interval to be bisected next is the; smallest interval. */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:3,Performance,Perform,Perform,3,/* Perform extrapolation */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:33,Availability,error,error,33,/* work on interval with largest error */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:3,Testability,Test,Test,3,/* Test on divergence. */,MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h:20,Deployability,integrat,integration,20,"// If flag is true, integration limits are taken from definition in input function binding",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h:20,Integrability,integrat,integration,20,"// If flag is true, integration limits are taken from definition in input function binding",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h:10,Deployability,integrat,integration,10,"//! Lower integration bound",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h:10,Integrability,integrat,integration,10,"//! Lower integration bound",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h:10,Deployability,integrat,integration,10,"//! Upper integration bound",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h:10,Integrability,integrat,integration,10,"//! Upper integration bound",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooFitMoreLib.cxx:82,Deployability,integrat,integrator,82,"// Load automatically RooFitMore library that automatically will register the; // integrator classes",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooFitMoreLib.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooFitMoreLib.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooFitMoreLib.cxx:82,Integrability,integrat,integrator,82,"// Load automatically RooFitMore library that automatically will register the; // integrator classes",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooFitMoreLib.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooFitMoreLib.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooFitMoreLib.cxx:3,Performance,Load,Load,3,"// Load automatically RooFitMore library that automatically will register the; // integrator classes",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooFitMoreLib.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooFitMoreLib.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:914,Availability,error,error,914,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooGaussKronrodIntegrator1D.cxx; \class RooGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An Gaussian quadrature method for numerical integration in which; error is estimation based on evaluation at special points known as; ""Kronrod points."" By suitably picking these points, abscissas from; previous iterations can be reused as part of the new set of points,; whereas usual Gaussian quadrature would require recomputation of; all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a x -> 1/x coordinate; transformation. This class embeds the Gauss-Kronrod integrator from the GNU; Scientific Library version 1.5 and applies the 10-, 21-, 43- and; 87-point rule in succession until the required target precision is; reached; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:825,Deployability,integrat,integration,825,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooGaussKronrodIntegrator1D.cxx; \class RooGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An Gaussian quadrature method for numerical integration in which; error is estimation based on evaluation at special points known as; ""Kronrod points."" By suitably picking these points, abscissas from; previous iterations can be reused as part of the new set of points,; whereas usual Gaussian quadrature would require recomputation of; all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a x -> 1/x coordinate; transformation. This class embeds the Gauss-Kronrod integrator from the GNU; Scientific Library version 1.5 and applies the 10-, 21-, 43- and; 87-point rule in succession until the required target precision is; reached; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:892,Deployability,integrat,integration,892,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooGaussKronrodIntegrator1D.cxx; \class RooGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An Gaussian quadrature method for numerical integration in which; error is estimation based on evaluation at special points known as; ""Kronrod points."" By suitably picking these points, abscissas from; previous iterations can be reused as part of the new set of points,; whereas usual Gaussian quadrature would require recomputation of; all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a x -> 1/x coordinate; transformation. This class embeds the Gauss-Kronrod integrator from the GNU; Scientific Library version 1.5 and applies the 10-, 21-, 43- and; 87-point rule in succession until the required target precision is; reached; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:1290,Deployability,integrat,integration,1290,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooGaussKronrodIntegrator1D.cxx; \class RooGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An Gaussian quadrature method for numerical integration in which; error is estimation based on evaluation at special points known as; ""Kronrod points."" By suitably picking these points, abscissas from; previous iterations can be reused as part of the new set of points,; whereas usual Gaussian quadrature would require recomputation of; all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a x -> 1/x coordinate; transformation. This class embeds the Gauss-Kronrod integrator from the GNU; Scientific Library version 1.5 and applies the 10-, 21-, 43- and; 87-point rule in succession until the required target precision is; reached; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:1465,Deployability,integrat,integrator,1465,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooGaussKronrodIntegrator1D.cxx; \class RooGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An Gaussian quadrature method for numerical integration in which; error is estimation based on evaluation at special points known as; ""Kronrod points."" By suitably picking these points, abscissas from; previous iterations can be reused as part of the new set of points,; whereas usual Gaussian quadrature would require recomputation of; all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a x -> 1/x coordinate; transformation. This class embeds the Gauss-Kronrod integrator from the GNU; Scientific Library version 1.5 and applies the 10-, 21-, 43- and; 87-point rule in succession until the required target precision is; reached; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:825,Integrability,integrat,integration,825,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooGaussKronrodIntegrator1D.cxx; \class RooGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An Gaussian quadrature method for numerical integration in which; error is estimation based on evaluation at special points known as; ""Kronrod points."" By suitably picking these points, abscissas from; previous iterations can be reused as part of the new set of points,; whereas usual Gaussian quadrature would require recomputation of; all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a x -> 1/x coordinate; transformation. This class embeds the Gauss-Kronrod integrator from the GNU; Scientific Library version 1.5 and applies the 10-, 21-, 43- and; 87-point rule in succession until the required target precision is; reached; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:892,Integrability,integrat,integration,892,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooGaussKronrodIntegrator1D.cxx; \class RooGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An Gaussian quadrature method for numerical integration in which; error is estimation based on evaluation at special points known as; ""Kronrod points."" By suitably picking these points, abscissas from; previous iterations can be reused as part of the new set of points,; whereas usual Gaussian quadrature would require recomputation of; all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a x -> 1/x coordinate; transformation. This class embeds the Gauss-Kronrod integrator from the GNU; Scientific Library version 1.5 and applies the 10-, 21-, 43- and; 87-point rule in succession until the required target precision is; reached; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:1290,Integrability,integrat,integration,1290,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooGaussKronrodIntegrator1D.cxx; \class RooGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An Gaussian quadrature method for numerical integration in which; error is estimation based on evaluation at special points known as; ""Kronrod points."" By suitably picking these points, abscissas from; previous iterations can be reused as part of the new set of points,; whereas usual Gaussian quadrature would require recomputation of; all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a x -> 1/x coordinate; transformation. This class embeds the Gauss-Kronrod integrator from the GNU; Scientific Library version 1.5 and applies the 10-, 21-, 43- and; 87-point rule in succession until the required target precision is; reached; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:1465,Integrability,integrat,integrator,1465,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooGaussKronrodIntegrator1D.cxx; \class RooGaussKronrodIntegrator1D; \ingroup Roofitcore. Implements the Gauss-Kronrod integration algorithm. An Gaussian quadrature method for numerical integration in which; error is estimation based on evaluation at special points known as; ""Kronrod points."" By suitably picking these points, abscissas from; previous iterations can be reused as part of the new set of points,; whereas usual Gaussian quadrature would require recomputation of; all abscissas at each iteration. This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a x -> 1/x coordinate; transformation. This class embeds the Gauss-Kronrod integrator from the GNU; Scientific Library version 1.5 and applies the 10-, 21-, 43- and; 87-point rule in succession until the required target precision is; reached; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:39,Deployability,integrat,integrator,39,"/// \cond ROOFIT_INTERNAL; // register integrator class; // create a derived class in order to call the protected method of the; // RoodaptiveGaussKronrodIntegrator1D",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:39,Integrability,integrat,integrator,39,"/// \cond ROOFIT_INTERNAL; // register integrator class; // create a derived class in order to call the protected method of the; // RoodaptiveGaussKronrodIntegrator1D",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:26,Deployability,integrat,integrator,26,"// class used to register integrator at loafing time",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:26,Integrability,integrat,integrator,26,"// class used to register integrator at loafing time",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:131,Deployability,configurat,configuration,131,"////////////////////////////////////////////////////////////////////////////////; /// Construct integral on 'function' using given configuration object. The integration; /// range is taken from the definition in the function binding",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:157,Deployability,integrat,integration,157,"////////////////////////////////////////////////////////////////////////////////; /// Construct integral on 'function' using given configuration object. The integration; /// range is taken from the definition in the function binding",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:157,Integrability,integrat,integration,157,"////////////////////////////////////////////////////////////////////////////////; /// Construct integral on 'function' using given configuration object. The integration; /// range is taken from the definition in the function binding",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:131,Modifiability,config,configuration,131,"////////////////////////////////////////////////////////////////////////////////; /// Construct integral on 'function' using given configuration object. The integration; /// range is taken from the definition in the function binding",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:131,Deployability,configurat,configuration,131,"////////////////////////////////////////////////////////////////////////////////; /// Construct integral on 'function' using given configuration object in the given range",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:131,Modifiability,config,configuration,131,"////////////////////////////////////////////////////////////////////////////////; /// Construct integral on 'function' using given configuration object in the given range",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:121,Deployability,integrat,integrator,121,"////////////////////////////////////////////////////////////////////////////////; /// Perform one-time initialization of integrator",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:121,Integrability,integrat,integrator,121,"////////////////////////////////////////////////////////////////////////////////; /// Perform one-time initialization of integrator",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform one-time initialization of integrator",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate coordinate buffer size after number of function dimensions",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:97,Deployability,integrat,integration,97,"////////////////////////////////////////////////////////////////////////////////; /// Change our integration limits. Return true if the new limits are; /// ok, or otherwise false. Always returns false and does nothing; /// if this object was constructed to always use our integrand's limits.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:97,Integrability,integrat,integration,97,"////////////////////////////////////////////////////////////////////////////////; /// Change our integration limits. Return true if the new limits are; /// ok, or otherwise false. Always returns false and does nothing; /// if this object was constructed to always use our integrand's limits.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:101,Deployability,integrat,integration,101,"////////////////////////////////////////////////////////////////////////////////; /// Check that our integration range is finite and otherwise return false.; /// Update the limits from the integrand if requested.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:162,Deployability,Update,Update,162,"////////////////////////////////////////////////////////////////////////////////; /// Check that our integration range is finite and otherwise return false.; /// Update the limits from the integrand if requested.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx:101,Integrability,integrat,integration,101,"////////////////////////////////////////////////////////////////////////////////; /// Check that our integration range is finite and otherwise return false.; /// Update the limits from the integrand if requested.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.h:10,Deployability,integrat,integration,10,"//! Lower integration bound",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.h:10,Integrability,integrat,integration,10,"//! Lower integration bound",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.h:10,Deployability,integrat,integration,10,"//! Upper integration bound",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.h:10,Integrability,integrat,integration,10,"//! Upper integration bound",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooGaussKronrodIntegrator1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooGaussKronrodIntegrator1D.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:3283,Availability,error,errors,3283,"alytical Integration; * The Hypatia distribution can be integrated analytically if \f$ \beta = \zeta = 0 \f$ and; * \f$ \lambda < 0 \f$. An analytic integral will only be used, though, if the parameters are **constant**; * at zero, and if \f$ \lambda < 0 \f$. This can be ensured as follows:; * ```; * RooRealVar beta(""beta"", ""beta"", 0.); // NOT beta(""beta"", ""beta"", 0., -1., 1.) This would allow it to float.; * RooRealVar zeta(""zeta"", ""zeta"", 0.);; * RooRealVar lambda(""lambda"", ""lambda"", -1., -10., -0.00001);; * ```; * In all other cases, slower / less accurate numeric integration will be used.; * Note that including `0.` in the value range of lambda excludes using analytic integrals.; * \endif; *; * ### Concavity; * Note that unless the parameters \f$ a_l,\ a_r \f$ are very large, the function has non-hyperbolic tails. This requires; * \f$ G \f$ to be strictly concave, *i.e.*, peaked, as otherwise the tails would yield imaginary numbers. Choosing \f$ \lambda,; * \beta, \zeta \f$ inappropriately will therefore lead to evaluation errors.; *; * Further, the original paper establishes that to keep the tails from rising,; * \f[; * \begin{split}; * \beta^2 &< \alpha^2 \\; * \Leftrightarrow \beta^2 &< \frac{\zeta^2}{\delta^2} = \frac{\zeta^2}{\sigma^2 A_{\lambda}^2(\zeta)}; * \end{split}; * \f]; * needs to be satisfied, unless the fit range is very restricted, because otherwise, the function rises in the tails.; *; *; * In case of evaluation errors, it is advisable to choose very large values for \f$ a_l,\ a_r \f$, tweak the parameters of the core region to; * make it concave, and re-enable the tails. Especially \f$ \beta \f$ needs to be close to zero.; *; * ## Relation to RooIpatia2; * This implementation is largely based on RooIpatia2, https://gitlab.cern.ch/lhcb/Urania/-/blob/master/PhysFit/B2DXFitters/src/RooIpatia2.cxx,; * but there are differences:; * - At construction time, the Hypatia implementation checks if the range of parameters extends into regions where; * the",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:3698,Availability,error,errors,3698,"oRealVar zeta(""zeta"", ""zeta"", 0.);; * RooRealVar lambda(""lambda"", ""lambda"", -1., -10., -0.00001);; * ```; * In all other cases, slower / less accurate numeric integration will be used.; * Note that including `0.` in the value range of lambda excludes using analytic integrals.; * \endif; *; * ### Concavity; * Note that unless the parameters \f$ a_l,\ a_r \f$ are very large, the function has non-hyperbolic tails. This requires; * \f$ G \f$ to be strictly concave, *i.e.*, peaked, as otherwise the tails would yield imaginary numbers. Choosing \f$ \lambda,; * \beta, \zeta \f$ inappropriately will therefore lead to evaluation errors.; *; * Further, the original paper establishes that to keep the tails from rising,; * \f[; * \begin{split}; * \beta^2 &< \alpha^2 \\; * \Leftrightarrow \beta^2 &< \frac{\zeta^2}{\delta^2} = \frac{\zeta^2}{\sigma^2 A_{\lambda}^2(\zeta)}; * \end{split}; * \f]; * needs to be satisfied, unless the fit range is very restricted, because otherwise, the function rises in the tails.; *; *; * In case of evaluation errors, it is advisable to choose very large values for \f$ a_l,\ a_r \f$, tweak the parameters of the core region to; * make it concave, and re-enable the tails. Especially \f$ \beta \f$ needs to be close to zero.; *; * ## Relation to RooIpatia2; * This implementation is largely based on RooIpatia2, https://gitlab.cern.ch/lhcb/Urania/-/blob/master/PhysFit/B2DXFitters/src/RooIpatia2.cxx,; * but there are differences:; * - At construction time, the Hypatia implementation checks if the range of parameters extends into regions where; * the function might be undefined.; * - Hypatia supports I/O to ROOT files.; * - Hypatia will support faster batched function evaluations.; * - Hypatia might support analytical integration for the case \f$ \zeta = \beta = 0, \lambda < 1 \f$.; *; * Because of these differences, and to avoid name clashes for setups where RooFit is used in an environment that also has; * RooIpatia2, class names need to be different.; */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:2249,Deployability,Integrat,Integration,2249,"if } \frac{x-\mu}{\sigma} < -a_l \\; * \left( (x-\mu)^2 + A^2_\lambda(\zeta)\sigma^2 \right)^{\frac{1}{2}\lambda-\frac{1}{4}} e^{\beta(x-\mu)} K_{\lambda-\frac{1}{2}}; * \left( \zeta \sqrt{1+\left( \frac{x-\mu}{A_\lambda(\zeta)\sigma} \right)^2 } \right) \equiv G(x, \mu, \ldots); * & \text{otherwise} \\; * \frac{ G(\mu + a_r \sigma, \mu, \sigma, \lambda, \zeta, \beta) }; * { \left( 1 - \frac{x}{-n_r G(\ldots)/G'(\ldots) - a_r\sigma } \right)^{n_r} }; * & \text{if } \frac{x-\mu}{\sigma} > a_r \\; * \end{cases}; * \f]; * Here, \f$ K_\lambda \f$ are the modified Bessel functions of the second kind; * (""irregular modified cylindrical Bessel functions"" from the gsl,; * ""special Bessel functions of the third kind""),; * and \f$ A^2_\lambda(\zeta) \f$ is a ratio of these:; * \f[; * A_\lambda^{2}(\zeta) = \frac{\zeta K_\lambda(\zeta)}{K_{\lambda+1}(\zeta)}; * \f]; *; * \if false; * TODO Enable once analytic integrals work.; * ### Analytical Integration; * The Hypatia distribution can be integrated analytically if \f$ \beta = \zeta = 0 \f$ and; * \f$ \lambda < 0 \f$. An analytic integral will only be used, though, if the parameters are **constant**; * at zero, and if \f$ \lambda < 0 \f$. This can be ensured as follows:; * ```; * RooRealVar beta(""beta"", ""beta"", 0.); // NOT beta(""beta"", ""beta"", 0., -1., 1.) This would allow it to float.; * RooRealVar zeta(""zeta"", ""zeta"", 0.);; * RooRealVar lambda(""lambda"", ""lambda"", -1., -10., -0.00001);; * ```; * In all other cases, slower / less accurate numeric integration will be used.; * Note that including `0.` in the value range of lambda excludes using analytic integrals.; * \endif; *; * ### Concavity; * Note that unless the parameters \f$ a_l,\ a_r \f$ are very large, the function has non-hyperbolic tails. This requires; * \f$ G \f$ to be strictly concave, *i.e.*, peaked, as otherwise the tails would yield imaginary numbers. Choosing \f$ \lambda,; * \beta, \zeta \f$ inappropriately will therefore lead to evaluation errors.; *; * Furthe",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:2296,Deployability,integrat,integrated,2296,"if } \frac{x-\mu}{\sigma} < -a_l \\; * \left( (x-\mu)^2 + A^2_\lambda(\zeta)\sigma^2 \right)^{\frac{1}{2}\lambda-\frac{1}{4}} e^{\beta(x-\mu)} K_{\lambda-\frac{1}{2}}; * \left( \zeta \sqrt{1+\left( \frac{x-\mu}{A_\lambda(\zeta)\sigma} \right)^2 } \right) \equiv G(x, \mu, \ldots); * & \text{otherwise} \\; * \frac{ G(\mu + a_r \sigma, \mu, \sigma, \lambda, \zeta, \beta) }; * { \left( 1 - \frac{x}{-n_r G(\ldots)/G'(\ldots) - a_r\sigma } \right)^{n_r} }; * & \text{if } \frac{x-\mu}{\sigma} > a_r \\; * \end{cases}; * \f]; * Here, \f$ K_\lambda \f$ are the modified Bessel functions of the second kind; * (""irregular modified cylindrical Bessel functions"" from the gsl,; * ""special Bessel functions of the third kind""),; * and \f$ A^2_\lambda(\zeta) \f$ is a ratio of these:; * \f[; * A_\lambda^{2}(\zeta) = \frac{\zeta K_\lambda(\zeta)}{K_{\lambda+1}(\zeta)}; * \f]; *; * \if false; * TODO Enable once analytic integrals work.; * ### Analytical Integration; * The Hypatia distribution can be integrated analytically if \f$ \beta = \zeta = 0 \f$ and; * \f$ \lambda < 0 \f$. An analytic integral will only be used, though, if the parameters are **constant**; * at zero, and if \f$ \lambda < 0 \f$. This can be ensured as follows:; * ```; * RooRealVar beta(""beta"", ""beta"", 0.); // NOT beta(""beta"", ""beta"", 0., -1., 1.) This would allow it to float.; * RooRealVar zeta(""zeta"", ""zeta"", 0.);; * RooRealVar lambda(""lambda"", ""lambda"", -1., -10., -0.00001);; * ```; * In all other cases, slower / less accurate numeric integration will be used.; * Note that including `0.` in the value range of lambda excludes using analytic integrals.; * \endif; *; * ### Concavity; * Note that unless the parameters \f$ a_l,\ a_r \f$ are very large, the function has non-hyperbolic tails. This requires; * \f$ G \f$ to be strictly concave, *i.e.*, peaked, as otherwise the tails would yield imaginary numbers. Choosing \f$ \lambda,; * \beta, \zeta \f$ inappropriately will therefore lead to evaluation errors.; *; * Furthe",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:2814,Deployability,integrat,integration,2814,"} > a_r \\; * \end{cases}; * \f]; * Here, \f$ K_\lambda \f$ are the modified Bessel functions of the second kind; * (""irregular modified cylindrical Bessel functions"" from the gsl,; * ""special Bessel functions of the third kind""),; * and \f$ A^2_\lambda(\zeta) \f$ is a ratio of these:; * \f[; * A_\lambda^{2}(\zeta) = \frac{\zeta K_\lambda(\zeta)}{K_{\lambda+1}(\zeta)}; * \f]; *; * \if false; * TODO Enable once analytic integrals work.; * ### Analytical Integration; * The Hypatia distribution can be integrated analytically if \f$ \beta = \zeta = 0 \f$ and; * \f$ \lambda < 0 \f$. An analytic integral will only be used, though, if the parameters are **constant**; * at zero, and if \f$ \lambda < 0 \f$. This can be ensured as follows:; * ```; * RooRealVar beta(""beta"", ""beta"", 0.); // NOT beta(""beta"", ""beta"", 0., -1., 1.) This would allow it to float.; * RooRealVar zeta(""zeta"", ""zeta"", 0.);; * RooRealVar lambda(""lambda"", ""lambda"", -1., -10., -0.00001);; * ```; * In all other cases, slower / less accurate numeric integration will be used.; * Note that including `0.` in the value range of lambda excludes using analytic integrals.; * \endif; *; * ### Concavity; * Note that unless the parameters \f$ a_l,\ a_r \f$ are very large, the function has non-hyperbolic tails. This requires; * \f$ G \f$ to be strictly concave, *i.e.*, peaked, as otherwise the tails would yield imaginary numbers. Choosing \f$ \lambda,; * \beta, \zeta \f$ inappropriately will therefore lead to evaluation errors.; *; * Further, the original paper establishes that to keep the tails from rising,; * \f[; * \begin{split}; * \beta^2 &< \alpha^2 \\; * \Leftrightarrow \beta^2 &< \frac{\zeta^2}{\delta^2} = \frac{\zeta^2}{\sigma^2 A_{\lambda}^2(\zeta)}; * \end{split}; * \f]; * needs to be satisfied, unless the fit range is very restricted, because otherwise, the function rises in the tails.; *; *; * In case of evaluation errors, it is advisable to choose very large values for \f$ a_l,\ a_r \f$, tweak the parameter",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:4412,Deployability,integrat,integration,4412,"oRealVar zeta(""zeta"", ""zeta"", 0.);; * RooRealVar lambda(""lambda"", ""lambda"", -1., -10., -0.00001);; * ```; * In all other cases, slower / less accurate numeric integration will be used.; * Note that including `0.` in the value range of lambda excludes using analytic integrals.; * \endif; *; * ### Concavity; * Note that unless the parameters \f$ a_l,\ a_r \f$ are very large, the function has non-hyperbolic tails. This requires; * \f$ G \f$ to be strictly concave, *i.e.*, peaked, as otherwise the tails would yield imaginary numbers. Choosing \f$ \lambda,; * \beta, \zeta \f$ inappropriately will therefore lead to evaluation errors.; *; * Further, the original paper establishes that to keep the tails from rising,; * \f[; * \begin{split}; * \beta^2 &< \alpha^2 \\; * \Leftrightarrow \beta^2 &< \frac{\zeta^2}{\delta^2} = \frac{\zeta^2}{\sigma^2 A_{\lambda}^2(\zeta)}; * \end{split}; * \f]; * needs to be satisfied, unless the fit range is very restricted, because otherwise, the function rises in the tails.; *; *; * In case of evaluation errors, it is advisable to choose very large values for \f$ a_l,\ a_r \f$, tweak the parameters of the core region to; * make it concave, and re-enable the tails. Especially \f$ \beta \f$ needs to be close to zero.; *; * ## Relation to RooIpatia2; * This implementation is largely based on RooIpatia2, https://gitlab.cern.ch/lhcb/Urania/-/blob/master/PhysFit/B2DXFitters/src/RooIpatia2.cxx,; * but there are differences:; * - At construction time, the Hypatia implementation checks if the range of parameters extends into regions where; * the function might be undefined.; * - Hypatia supports I/O to ROOT files.; * - Hypatia will support faster batched function evaluations.; * - Hypatia might support analytical integration for the case \f$ \zeta = \beta = 0, \lambda < 1 \f$.; *; * Because of these differences, and to avoid name clashes for setups where RooFit is used in an environment that also has; * RooIpatia2, class names need to be different.; */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:2249,Integrability,Integrat,Integration,2249,"if } \frac{x-\mu}{\sigma} < -a_l \\; * \left( (x-\mu)^2 + A^2_\lambda(\zeta)\sigma^2 \right)^{\frac{1}{2}\lambda-\frac{1}{4}} e^{\beta(x-\mu)} K_{\lambda-\frac{1}{2}}; * \left( \zeta \sqrt{1+\left( \frac{x-\mu}{A_\lambda(\zeta)\sigma} \right)^2 } \right) \equiv G(x, \mu, \ldots); * & \text{otherwise} \\; * \frac{ G(\mu + a_r \sigma, \mu, \sigma, \lambda, \zeta, \beta) }; * { \left( 1 - \frac{x}{-n_r G(\ldots)/G'(\ldots) - a_r\sigma } \right)^{n_r} }; * & \text{if } \frac{x-\mu}{\sigma} > a_r \\; * \end{cases}; * \f]; * Here, \f$ K_\lambda \f$ are the modified Bessel functions of the second kind; * (""irregular modified cylindrical Bessel functions"" from the gsl,; * ""special Bessel functions of the third kind""),; * and \f$ A^2_\lambda(\zeta) \f$ is a ratio of these:; * \f[; * A_\lambda^{2}(\zeta) = \frac{\zeta K_\lambda(\zeta)}{K_{\lambda+1}(\zeta)}; * \f]; *; * \if false; * TODO Enable once analytic integrals work.; * ### Analytical Integration; * The Hypatia distribution can be integrated analytically if \f$ \beta = \zeta = 0 \f$ and; * \f$ \lambda < 0 \f$. An analytic integral will only be used, though, if the parameters are **constant**; * at zero, and if \f$ \lambda < 0 \f$. This can be ensured as follows:; * ```; * RooRealVar beta(""beta"", ""beta"", 0.); // NOT beta(""beta"", ""beta"", 0., -1., 1.) This would allow it to float.; * RooRealVar zeta(""zeta"", ""zeta"", 0.);; * RooRealVar lambda(""lambda"", ""lambda"", -1., -10., -0.00001);; * ```; * In all other cases, slower / less accurate numeric integration will be used.; * Note that including `0.` in the value range of lambda excludes using analytic integrals.; * \endif; *; * ### Concavity; * Note that unless the parameters \f$ a_l,\ a_r \f$ are very large, the function has non-hyperbolic tails. This requires; * \f$ G \f$ to be strictly concave, *i.e.*, peaked, as otherwise the tails would yield imaginary numbers. Choosing \f$ \lambda,; * \beta, \zeta \f$ inappropriately will therefore lead to evaluation errors.; *; * Furthe",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:2296,Integrability,integrat,integrated,2296,"if } \frac{x-\mu}{\sigma} < -a_l \\; * \left( (x-\mu)^2 + A^2_\lambda(\zeta)\sigma^2 \right)^{\frac{1}{2}\lambda-\frac{1}{4}} e^{\beta(x-\mu)} K_{\lambda-\frac{1}{2}}; * \left( \zeta \sqrt{1+\left( \frac{x-\mu}{A_\lambda(\zeta)\sigma} \right)^2 } \right) \equiv G(x, \mu, \ldots); * & \text{otherwise} \\; * \frac{ G(\mu + a_r \sigma, \mu, \sigma, \lambda, \zeta, \beta) }; * { \left( 1 - \frac{x}{-n_r G(\ldots)/G'(\ldots) - a_r\sigma } \right)^{n_r} }; * & \text{if } \frac{x-\mu}{\sigma} > a_r \\; * \end{cases}; * \f]; * Here, \f$ K_\lambda \f$ are the modified Bessel functions of the second kind; * (""irregular modified cylindrical Bessel functions"" from the gsl,; * ""special Bessel functions of the third kind""),; * and \f$ A^2_\lambda(\zeta) \f$ is a ratio of these:; * \f[; * A_\lambda^{2}(\zeta) = \frac{\zeta K_\lambda(\zeta)}{K_{\lambda+1}(\zeta)}; * \f]; *; * \if false; * TODO Enable once analytic integrals work.; * ### Analytical Integration; * The Hypatia distribution can be integrated analytically if \f$ \beta = \zeta = 0 \f$ and; * \f$ \lambda < 0 \f$. An analytic integral will only be used, though, if the parameters are **constant**; * at zero, and if \f$ \lambda < 0 \f$. This can be ensured as follows:; * ```; * RooRealVar beta(""beta"", ""beta"", 0.); // NOT beta(""beta"", ""beta"", 0., -1., 1.) This would allow it to float.; * RooRealVar zeta(""zeta"", ""zeta"", 0.);; * RooRealVar lambda(""lambda"", ""lambda"", -1., -10., -0.00001);; * ```; * In all other cases, slower / less accurate numeric integration will be used.; * Note that including `0.` in the value range of lambda excludes using analytic integrals.; * \endif; *; * ### Concavity; * Note that unless the parameters \f$ a_l,\ a_r \f$ are very large, the function has non-hyperbolic tails. This requires; * \f$ G \f$ to be strictly concave, *i.e.*, peaked, as otherwise the tails would yield imaginary numbers. Choosing \f$ \lambda,; * \beta, \zeta \f$ inappropriately will therefore lead to evaluation errors.; *; * Furthe",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:2814,Integrability,integrat,integration,2814,"} > a_r \\; * \end{cases}; * \f]; * Here, \f$ K_\lambda \f$ are the modified Bessel functions of the second kind; * (""irregular modified cylindrical Bessel functions"" from the gsl,; * ""special Bessel functions of the third kind""),; * and \f$ A^2_\lambda(\zeta) \f$ is a ratio of these:; * \f[; * A_\lambda^{2}(\zeta) = \frac{\zeta K_\lambda(\zeta)}{K_{\lambda+1}(\zeta)}; * \f]; *; * \if false; * TODO Enable once analytic integrals work.; * ### Analytical Integration; * The Hypatia distribution can be integrated analytically if \f$ \beta = \zeta = 0 \f$ and; * \f$ \lambda < 0 \f$. An analytic integral will only be used, though, if the parameters are **constant**; * at zero, and if \f$ \lambda < 0 \f$. This can be ensured as follows:; * ```; * RooRealVar beta(""beta"", ""beta"", 0.); // NOT beta(""beta"", ""beta"", 0., -1., 1.) This would allow it to float.; * RooRealVar zeta(""zeta"", ""zeta"", 0.);; * RooRealVar lambda(""lambda"", ""lambda"", -1., -10., -0.00001);; * ```; * In all other cases, slower / less accurate numeric integration will be used.; * Note that including `0.` in the value range of lambda excludes using analytic integrals.; * \endif; *; * ### Concavity; * Note that unless the parameters \f$ a_l,\ a_r \f$ are very large, the function has non-hyperbolic tails. This requires; * \f$ G \f$ to be strictly concave, *i.e.*, peaked, as otherwise the tails would yield imaginary numbers. Choosing \f$ \lambda,; * \beta, \zeta \f$ inappropriately will therefore lead to evaluation errors.; *; * Further, the original paper establishes that to keep the tails from rising,; * \f[; * \begin{split}; * \beta^2 &< \alpha^2 \\; * \Leftrightarrow \beta^2 &< \frac{\zeta^2}{\delta^2} = \frac{\zeta^2}{\sigma^2 A_{\lambda}^2(\zeta)}; * \end{split}; * \f]; * needs to be satisfied, unless the fit range is very restricted, because otherwise, the function rises in the tails.; *; *; * In case of evaluation errors, it is advisable to choose very large values for \f$ a_l,\ a_r \f$, tweak the parameter",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:4412,Integrability,integrat,integration,4412,"oRealVar zeta(""zeta"", ""zeta"", 0.);; * RooRealVar lambda(""lambda"", ""lambda"", -1., -10., -0.00001);; * ```; * In all other cases, slower / less accurate numeric integration will be used.; * Note that including `0.` in the value range of lambda excludes using analytic integrals.; * \endif; *; * ### Concavity; * Note that unless the parameters \f$ a_l,\ a_r \f$ are very large, the function has non-hyperbolic tails. This requires; * \f$ G \f$ to be strictly concave, *i.e.*, peaked, as otherwise the tails would yield imaginary numbers. Choosing \f$ \lambda,; * \beta, \zeta \f$ inappropriately will therefore lead to evaluation errors.; *; * Further, the original paper establishes that to keep the tails from rising,; * \f[; * \begin{split}; * \beta^2 &< \alpha^2 \\; * \Leftrightarrow \beta^2 &< \frac{\zeta^2}{\delta^2} = \frac{\zeta^2}{\sigma^2 A_{\lambda}^2(\zeta)}; * \end{split}; * \f]; * needs to be satisfied, unless the fit range is very restricted, because otherwise, the function rises in the tails.; *; *; * In case of evaluation errors, it is advisable to choose very large values for \f$ a_l,\ a_r \f$, tweak the parameters of the core region to; * make it concave, and re-enable the tails. Especially \f$ \beta \f$ needs to be close to zero.; *; * ## Relation to RooIpatia2; * This implementation is largely based on RooIpatia2, https://gitlab.cern.ch/lhcb/Urania/-/blob/master/PhysFit/B2DXFitters/src/RooIpatia2.cxx,; * but there are differences:; * - At construction time, the Hypatia implementation checks if the range of parameters extends into regions where; * the function might be undefined.; * - Hypatia supports I/O to ROOT files.; * - Hypatia will support faster batched function evaluations.; * - Hypatia might support analytical integration for the case \f$ \zeta = \beta = 0, \lambda < 1 \f$.; *; * Because of these differences, and to avoid name clashes for setups where RooFit is used in an environment that also has; * RooIpatia2, class names need to be different.; */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:4207,Modifiability,extend,extends,4207,"oRealVar zeta(""zeta"", ""zeta"", 0.);; * RooRealVar lambda(""lambda"", ""lambda"", -1., -10., -0.00001);; * ```; * In all other cases, slower / less accurate numeric integration will be used.; * Note that including `0.` in the value range of lambda excludes using analytic integrals.; * \endif; *; * ### Concavity; * Note that unless the parameters \f$ a_l,\ a_r \f$ are very large, the function has non-hyperbolic tails. This requires; * \f$ G \f$ to be strictly concave, *i.e.*, peaked, as otherwise the tails would yield imaginary numbers. Choosing \f$ \lambda,; * \beta, \zeta \f$ inappropriately will therefore lead to evaluation errors.; *; * Further, the original paper establishes that to keep the tails from rising,; * \f[; * \begin{split}; * \beta^2 &< \alpha^2 \\; * \Leftrightarrow \beta^2 &< \frac{\zeta^2}{\delta^2} = \frac{\zeta^2}{\sigma^2 A_{\lambda}^2(\zeta)}; * \end{split}; * \f]; * needs to be satisfied, unless the fit range is very restricted, because otherwise, the function rises in the tails.; *; *; * In case of evaluation errors, it is advisable to choose very large values for \f$ a_l,\ a_r \f$, tweak the parameters of the core region to; * make it concave, and re-enable the tails. Especially \f$ \beta \f$ needs to be close to zero.; *; * ## Relation to RooIpatia2; * This implementation is largely based on RooIpatia2, https://gitlab.cern.ch/lhcb/Urania/-/blob/master/PhysFit/B2DXFitters/src/RooIpatia2.cxx,; * but there are differences:; * - At construction time, the Hypatia implementation checks if the range of parameters extends into regions where; * the function might be undefined.; * - Hypatia supports I/O to ROOT files.; * - Hypatia will support faster batched function evaluations.; * - Hypatia might support analytical integration for the case \f$ \zeta = \beta = 0, \lambda < 1 \f$.; *; * Because of these differences, and to avoid name clashes for setups where RooFit is used in an environment that also has; * RooIpatia2, class names need to be different.; */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:4520,Safety,avoid,avoid,4520,"oRealVar zeta(""zeta"", ""zeta"", 0.);; * RooRealVar lambda(""lambda"", ""lambda"", -1., -10., -0.00001);; * ```; * In all other cases, slower / less accurate numeric integration will be used.; * Note that including `0.` in the value range of lambda excludes using analytic integrals.; * \endif; *; * ### Concavity; * Note that unless the parameters \f$ a_l,\ a_r \f$ are very large, the function has non-hyperbolic tails. This requires; * \f$ G \f$ to be strictly concave, *i.e.*, peaked, as otherwise the tails would yield imaginary numbers. Choosing \f$ \lambda,; * \beta, \zeta \f$ inappropriately will therefore lead to evaluation errors.; *; * Further, the original paper establishes that to keep the tails from rising,; * \f[; * \begin{split}; * \beta^2 &< \alpha^2 \\; * \Leftrightarrow \beta^2 &< \frac{\zeta^2}{\delta^2} = \frac{\zeta^2}{\sigma^2 A_{\lambda}^2(\zeta)}; * \end{split}; * \f]; * needs to be satisfied, unless the fit range is very restricted, because otherwise, the function rises in the tails.; *; *; * In case of evaluation errors, it is advisable to choose very large values for \f$ a_l,\ a_r \f$, tweak the parameters of the core region to; * make it concave, and re-enable the tails. Especially \f$ \beta \f$ needs to be close to zero.; *; * ## Relation to RooIpatia2; * This implementation is largely based on RooIpatia2, https://gitlab.cern.ch/lhcb/Urania/-/blob/master/PhysFit/B2DXFitters/src/RooIpatia2.cxx,; * but there are differences:; * - At construction time, the Hypatia implementation checks if the range of parameters extends into regions where; * the function might be undefined.; * - Hypatia supports I/O to ROOT files.; * - Hypatia will support faster batched function evaluations.; * - Hypatia might support analytical integration for the case \f$ \zeta = \beta = 0, \lambda < 1 \f$.; *; * Because of these differences, and to avoid name clashes for setups where RooFit is used in an environment that also has; * RooIpatia2, class names need to be different.; */",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:236,Modifiability,variab,variable,236,"///////////////////////////////////////////////////////////////////////////////////////////; /// Construct a new Hypatia2 PDF.; /// \param[in] name Name of this instance.; /// \param[in] title Title (for plotting); /// \param[in] x The variable of this distribution; /// \param[in] lambda Shape parameter. Note that \f$ \lambda < 0 \f$ is required if \f$ \zeta = 0 \f$.; /// \param[in] zeta Shape parameter (\f$ \zeta >= 0 \f$).; /// \param[in] beta Asymmetry parameter \f$ \beta \f$. Symmetric case is \f$ \beta = 0 \f$,; /// choose values close to zero.; /// \param[in] argSigma Width parameter. If \f$ \beta = 0, \ \sigma \f$ is the RMS width.; /// \param[in] mu Location parameter. Shifts the distribution left/right.; /// \param[in] a Start of the left tail (\f$ a \geq 0 \f$, to the left of the peak). Note that when setting \f$ a = \sigma = 1 \f$,; /// the tail region is to the left of \f$ x = \mu - 1 \f$, so a should be positive.; /// \param[in] n Shape parameter of left tail (\f$ n \ge 0 \f$). With \f$ n = 0 \f$, the function is constant.; /// \param[in] a2 Start of right tail.; /// \param[in] n2 Shape parameter of right tail (\f$ n2 \ge 0 \f$). With \f$ n2 = 0 \f$, the function is constant.",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:10,Testability,log,log,10,"// + std::log(std::abs(beta)+0.0001) );",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:12,Performance,perform,performance,12,"// Run high performance compute if only x has multiple values",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:477,Deployability,Integrat,Integration,477,"/* Analytical integrals need testing. Int_t RooHypatia2::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char*) const; {; if (matchArgs(allVars, analVars, _x); && _beta == 0. && _beta.arg().isConstant(); && _zeta == 0. && _zeta.arg().isConstant(); && _lambda.max() < 0.) return 1;; return 0 ;; }. double RooHypatia2::analyticalIntegral(Int_t code, const char* rangeName) const; {; if (_beta != 0. || _zeta != 0. || _lambda >= 0) {; auto& logstream = coutF(Integration) << ""When the PDF "" << GetName(); << "" was constructed, beta,zeta were 0, lambda<0 and all three were constant.\n""; << ""This allowed for analytic integration, but now, numeric integration would be required.\n""; << ""These parameters must either be kept constant, or be floating from the beginning. ""; << "" Terminating fit ...""; << std::endl;; RooArgSet vars;; vars.add(_beta.arg());; vars.add(_zeta.arg());; vars.add(_lambda.arg());; vars.printStream(logstream, vars.defaultPrintContents(nullptr), RooPrintable::kVerbose);; throw std::runtime_error(""RooHypatia2 cannot be integrated analytically since parameters changed."");; }. // The formulae to follow still use beta and zeta to facilitate comparisons with the; // evaluate function. Since beta and zeta are zero, all relevant terms will be disabled; // by defining these two constexpr:; constexpr double beta = 0.;; constexpr double cons1 = 1.;. if (code != 1) {; throw std::logic_error(""Trying to compute analytic integral with unknown configuration."");; }. const double asigma = _a * _sigma;; const double a2sigma = _a2 * _sigma;; const double d0 = _x.min(rangeName) - _mu;; const double d1 = _x.max(rangeName) - _mu;. double delta;; if (_lambda <= -1.0) {; delta = _sigma * sqrt(-2. + -2.*_lambda);; }; else {; delta = _sigma;; }; const double deltaSq = delta*delta;. if ((d0 > -asigma) && (d1 < a2sigma)) {; return stIntegral(d1, delta, _lambda) - stIntegral(d0, delta, _lambda);; }. if (d0 > a2sigma) {; const double phi = 1. + a2sigma*a2sigma/deltaSq;; ",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:635,Deployability,integrat,integration,635,"/* Analytical integrals need testing. Int_t RooHypatia2::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char*) const; {; if (matchArgs(allVars, analVars, _x); && _beta == 0. && _beta.arg().isConstant(); && _zeta == 0. && _zeta.arg().isConstant(); && _lambda.max() < 0.) return 1;; return 0 ;; }. double RooHypatia2::analyticalIntegral(Int_t code, const char* rangeName) const; {; if (_beta != 0. || _zeta != 0. || _lambda >= 0) {; auto& logstream = coutF(Integration) << ""When the PDF "" << GetName(); << "" was constructed, beta,zeta were 0, lambda<0 and all three were constant.\n""; << ""This allowed for analytic integration, but now, numeric integration would be required.\n""; << ""These parameters must either be kept constant, or be floating from the beginning. ""; << "" Terminating fit ...""; << std::endl;; RooArgSet vars;; vars.add(_beta.arg());; vars.add(_zeta.arg());; vars.add(_lambda.arg());; vars.printStream(logstream, vars.defaultPrintContents(nullptr), RooPrintable::kVerbose);; throw std::runtime_error(""RooHypatia2 cannot be integrated analytically since parameters changed."");; }. // The formulae to follow still use beta and zeta to facilitate comparisons with the; // evaluate function. Since beta and zeta are zero, all relevant terms will be disabled; // by defining these two constexpr:; constexpr double beta = 0.;; constexpr double cons1 = 1.;. if (code != 1) {; throw std::logic_error(""Trying to compute analytic integral with unknown configuration."");; }. const double asigma = _a * _sigma;; const double a2sigma = _a2 * _sigma;; const double d0 = _x.min(rangeName) - _mu;; const double d1 = _x.max(rangeName) - _mu;. double delta;; if (_lambda <= -1.0) {; delta = _sigma * sqrt(-2. + -2.*_lambda);; }; else {; delta = _sigma;; }; const double deltaSq = delta*delta;. if ((d0 > -asigma) && (d1 < a2sigma)) {; return stIntegral(d1, delta, _lambda) - stIntegral(d0, delta, _lambda);; }. if (d0 > a2sigma) {; const double phi = 1. + a2sigma*a2sigma/deltaSq;; ",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:665,Deployability,integrat,integration,665,"/* Analytical integrals need testing. Int_t RooHypatia2::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char*) const; {; if (matchArgs(allVars, analVars, _x); && _beta == 0. && _beta.arg().isConstant(); && _zeta == 0. && _zeta.arg().isConstant(); && _lambda.max() < 0.) return 1;; return 0 ;; }. double RooHypatia2::analyticalIntegral(Int_t code, const char* rangeName) const; {; if (_beta != 0. || _zeta != 0. || _lambda >= 0) {; auto& logstream = coutF(Integration) << ""When the PDF "" << GetName(); << "" was constructed, beta,zeta were 0, lambda<0 and all three were constant.\n""; << ""This allowed for analytic integration, but now, numeric integration would be required.\n""; << ""These parameters must either be kept constant, or be floating from the beginning. ""; << "" Terminating fit ...""; << std::endl;; RooArgSet vars;; vars.add(_beta.arg());; vars.add(_zeta.arg());; vars.add(_lambda.arg());; vars.printStream(logstream, vars.defaultPrintContents(nullptr), RooPrintable::kVerbose);; throw std::runtime_error(""RooHypatia2 cannot be integrated analytically since parameters changed."");; }. // The formulae to follow still use beta and zeta to facilitate comparisons with the; // evaluate function. Since beta and zeta are zero, all relevant terms will be disabled; // by defining these two constexpr:; constexpr double beta = 0.;; constexpr double cons1 = 1.;. if (code != 1) {; throw std::logic_error(""Trying to compute analytic integral with unknown configuration."");; }. const double asigma = _a * _sigma;; const double a2sigma = _a2 * _sigma;; const double d0 = _x.min(rangeName) - _mu;; const double d1 = _x.max(rangeName) - _mu;. double delta;; if (_lambda <= -1.0) {; delta = _sigma * sqrt(-2. + -2.*_lambda);; }; else {; delta = _sigma;; }; const double deltaSq = delta*delta;. if ((d0 > -asigma) && (d1 < a2sigma)) {; return stIntegral(d1, delta, _lambda) - stIntegral(d0, delta, _lambda);; }. if (d0 > a2sigma) {; const double phi = 1. + a2sigma*a2sigma/deltaSq;; ",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:1060,Deployability,integrat,integrated,1060,"ting. Int_t RooHypatia2::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char*) const; {; if (matchArgs(allVars, analVars, _x); && _beta == 0. && _beta.arg().isConstant(); && _zeta == 0. && _zeta.arg().isConstant(); && _lambda.max() < 0.) return 1;; return 0 ;; }. double RooHypatia2::analyticalIntegral(Int_t code, const char* rangeName) const; {; if (_beta != 0. || _zeta != 0. || _lambda >= 0) {; auto& logstream = coutF(Integration) << ""When the PDF "" << GetName(); << "" was constructed, beta,zeta were 0, lambda<0 and all three were constant.\n""; << ""This allowed for analytic integration, but now, numeric integration would be required.\n""; << ""These parameters must either be kept constant, or be floating from the beginning. ""; << "" Terminating fit ...""; << std::endl;; RooArgSet vars;; vars.add(_beta.arg());; vars.add(_zeta.arg());; vars.add(_lambda.arg());; vars.printStream(logstream, vars.defaultPrintContents(nullptr), RooPrintable::kVerbose);; throw std::runtime_error(""RooHypatia2 cannot be integrated analytically since parameters changed."");; }. // The formulae to follow still use beta and zeta to facilitate comparisons with the; // evaluate function. Since beta and zeta are zero, all relevant terms will be disabled; // by defining these two constexpr:; constexpr double beta = 0.;; constexpr double cons1 = 1.;. if (code != 1) {; throw std::logic_error(""Trying to compute analytic integral with unknown configuration."");; }. const double asigma = _a * _sigma;; const double a2sigma = _a2 * _sigma;; const double d0 = _x.min(rangeName) - _mu;; const double d1 = _x.max(rangeName) - _mu;. double delta;; if (_lambda <= -1.0) {; delta = _sigma * sqrt(-2. + -2.*_lambda);; }; else {; delta = _sigma;; }; const double deltaSq = delta*delta;. if ((d0 > -asigma) && (d1 < a2sigma)) {; return stIntegral(d1, delta, _lambda) - stIntegral(d0, delta, _lambda);; }. if (d0 > a2sigma) {; const double phi = 1. + a2sigma*a2sigma/deltaSq;; const double k1 = cons1*std::po",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:1479,Deployability,configurat,configuration,1479,"bda >= 0) {; auto& logstream = coutF(Integration) << ""When the PDF "" << GetName(); << "" was constructed, beta,zeta were 0, lambda<0 and all three were constant.\n""; << ""This allowed for analytic integration, but now, numeric integration would be required.\n""; << ""These parameters must either be kept constant, or be floating from the beginning. ""; << "" Terminating fit ...""; << std::endl;; RooArgSet vars;; vars.add(_beta.arg());; vars.add(_zeta.arg());; vars.add(_lambda.arg());; vars.printStream(logstream, vars.defaultPrintContents(nullptr), RooPrintable::kVerbose);; throw std::runtime_error(""RooHypatia2 cannot be integrated analytically since parameters changed."");; }. // The formulae to follow still use beta and zeta to facilitate comparisons with the; // evaluate function. Since beta and zeta are zero, all relevant terms will be disabled; // by defining these two constexpr:; constexpr double beta = 0.;; constexpr double cons1 = 1.;. if (code != 1) {; throw std::logic_error(""Trying to compute analytic integral with unknown configuration."");; }. const double asigma = _a * _sigma;; const double a2sigma = _a2 * _sigma;; const double d0 = _x.min(rangeName) - _mu;; const double d1 = _x.max(rangeName) - _mu;. double delta;; if (_lambda <= -1.0) {; delta = _sigma * sqrt(-2. + -2.*_lambda);; }; else {; delta = _sigma;; }; const double deltaSq = delta*delta;. if ((d0 > -asigma) && (d1 < a2sigma)) {; return stIntegral(d1, delta, _lambda) - stIntegral(d0, delta, _lambda);; }. if (d0 > a2sigma) {; const double phi = 1. + a2sigma*a2sigma/deltaSq;; const double k1 = cons1*std::pow(phi,_lambda-0.5);; const double k2 = beta*k1+ cons1*(_lambda-0.5)*std::pow(phi,_lambda-1.5)*2.*a2sigma/deltaSq;; const double B = -a2sigma - _n2*k1/k2;; const double A = k1*std::pow(B+a2sigma,_n2);; return A*(std::pow(B+d1,1-_n2)/(1-_n2) -std::pow(B+d0,1-_n2)/(1-_n2) ) ;. }. if (d1 < -asigma) {; const double phi = 1. + asigma*asigma/deltaSq;; const double k1 = cons1*std::pow(phi,_lambda-0.5);; const dou",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:477,Integrability,Integrat,Integration,477,"/* Analytical integrals need testing. Int_t RooHypatia2::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char*) const; {; if (matchArgs(allVars, analVars, _x); && _beta == 0. && _beta.arg().isConstant(); && _zeta == 0. && _zeta.arg().isConstant(); && _lambda.max() < 0.) return 1;; return 0 ;; }. double RooHypatia2::analyticalIntegral(Int_t code, const char* rangeName) const; {; if (_beta != 0. || _zeta != 0. || _lambda >= 0) {; auto& logstream = coutF(Integration) << ""When the PDF "" << GetName(); << "" was constructed, beta,zeta were 0, lambda<0 and all three were constant.\n""; << ""This allowed for analytic integration, but now, numeric integration would be required.\n""; << ""These parameters must either be kept constant, or be floating from the beginning. ""; << "" Terminating fit ...""; << std::endl;; RooArgSet vars;; vars.add(_beta.arg());; vars.add(_zeta.arg());; vars.add(_lambda.arg());; vars.printStream(logstream, vars.defaultPrintContents(nullptr), RooPrintable::kVerbose);; throw std::runtime_error(""RooHypatia2 cannot be integrated analytically since parameters changed."");; }. // The formulae to follow still use beta and zeta to facilitate comparisons with the; // evaluate function. Since beta and zeta are zero, all relevant terms will be disabled; // by defining these two constexpr:; constexpr double beta = 0.;; constexpr double cons1 = 1.;. if (code != 1) {; throw std::logic_error(""Trying to compute analytic integral with unknown configuration."");; }. const double asigma = _a * _sigma;; const double a2sigma = _a2 * _sigma;; const double d0 = _x.min(rangeName) - _mu;; const double d1 = _x.max(rangeName) - _mu;. double delta;; if (_lambda <= -1.0) {; delta = _sigma * sqrt(-2. + -2.*_lambda);; }; else {; delta = _sigma;; }; const double deltaSq = delta*delta;. if ((d0 > -asigma) && (d1 < a2sigma)) {; return stIntegral(d1, delta, _lambda) - stIntegral(d0, delta, _lambda);; }. if (d0 > a2sigma) {; const double phi = 1. + a2sigma*a2sigma/deltaSq;; ",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:635,Integrability,integrat,integration,635,"/* Analytical integrals need testing. Int_t RooHypatia2::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char*) const; {; if (matchArgs(allVars, analVars, _x); && _beta == 0. && _beta.arg().isConstant(); && _zeta == 0. && _zeta.arg().isConstant(); && _lambda.max() < 0.) return 1;; return 0 ;; }. double RooHypatia2::analyticalIntegral(Int_t code, const char* rangeName) const; {; if (_beta != 0. || _zeta != 0. || _lambda >= 0) {; auto& logstream = coutF(Integration) << ""When the PDF "" << GetName(); << "" was constructed, beta,zeta were 0, lambda<0 and all three were constant.\n""; << ""This allowed for analytic integration, but now, numeric integration would be required.\n""; << ""These parameters must either be kept constant, or be floating from the beginning. ""; << "" Terminating fit ...""; << std::endl;; RooArgSet vars;; vars.add(_beta.arg());; vars.add(_zeta.arg());; vars.add(_lambda.arg());; vars.printStream(logstream, vars.defaultPrintContents(nullptr), RooPrintable::kVerbose);; throw std::runtime_error(""RooHypatia2 cannot be integrated analytically since parameters changed."");; }. // The formulae to follow still use beta and zeta to facilitate comparisons with the; // evaluate function. Since beta and zeta are zero, all relevant terms will be disabled; // by defining these two constexpr:; constexpr double beta = 0.;; constexpr double cons1 = 1.;. if (code != 1) {; throw std::logic_error(""Trying to compute analytic integral with unknown configuration."");; }. const double asigma = _a * _sigma;; const double a2sigma = _a2 * _sigma;; const double d0 = _x.min(rangeName) - _mu;; const double d1 = _x.max(rangeName) - _mu;. double delta;; if (_lambda <= -1.0) {; delta = _sigma * sqrt(-2. + -2.*_lambda);; }; else {; delta = _sigma;; }; const double deltaSq = delta*delta;. if ((d0 > -asigma) && (d1 < a2sigma)) {; return stIntegral(d1, delta, _lambda) - stIntegral(d0, delta, _lambda);; }. if (d0 > a2sigma) {; const double phi = 1. + a2sigma*a2sigma/deltaSq;; ",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:665,Integrability,integrat,integration,665,"/* Analytical integrals need testing. Int_t RooHypatia2::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char*) const; {; if (matchArgs(allVars, analVars, _x); && _beta == 0. && _beta.arg().isConstant(); && _zeta == 0. && _zeta.arg().isConstant(); && _lambda.max() < 0.) return 1;; return 0 ;; }. double RooHypatia2::analyticalIntegral(Int_t code, const char* rangeName) const; {; if (_beta != 0. || _zeta != 0. || _lambda >= 0) {; auto& logstream = coutF(Integration) << ""When the PDF "" << GetName(); << "" was constructed, beta,zeta were 0, lambda<0 and all three were constant.\n""; << ""This allowed for analytic integration, but now, numeric integration would be required.\n""; << ""These parameters must either be kept constant, or be floating from the beginning. ""; << "" Terminating fit ...""; << std::endl;; RooArgSet vars;; vars.add(_beta.arg());; vars.add(_zeta.arg());; vars.add(_lambda.arg());; vars.printStream(logstream, vars.defaultPrintContents(nullptr), RooPrintable::kVerbose);; throw std::runtime_error(""RooHypatia2 cannot be integrated analytically since parameters changed."");; }. // The formulae to follow still use beta and zeta to facilitate comparisons with the; // evaluate function. Since beta and zeta are zero, all relevant terms will be disabled; // by defining these two constexpr:; constexpr double beta = 0.;; constexpr double cons1 = 1.;. if (code != 1) {; throw std::logic_error(""Trying to compute analytic integral with unknown configuration."");; }. const double asigma = _a * _sigma;; const double a2sigma = _a2 * _sigma;; const double d0 = _x.min(rangeName) - _mu;; const double d1 = _x.max(rangeName) - _mu;. double delta;; if (_lambda <= -1.0) {; delta = _sigma * sqrt(-2. + -2.*_lambda);; }; else {; delta = _sigma;; }; const double deltaSq = delta*delta;. if ((d0 > -asigma) && (d1 < a2sigma)) {; return stIntegral(d1, delta, _lambda) - stIntegral(d0, delta, _lambda);; }. if (d0 > a2sigma) {; const double phi = 1. + a2sigma*a2sigma/deltaSq;; ",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:1060,Integrability,integrat,integrated,1060,"ting. Int_t RooHypatia2::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char*) const; {; if (matchArgs(allVars, analVars, _x); && _beta == 0. && _beta.arg().isConstant(); && _zeta == 0. && _zeta.arg().isConstant(); && _lambda.max() < 0.) return 1;; return 0 ;; }. double RooHypatia2::analyticalIntegral(Int_t code, const char* rangeName) const; {; if (_beta != 0. || _zeta != 0. || _lambda >= 0) {; auto& logstream = coutF(Integration) << ""When the PDF "" << GetName(); << "" was constructed, beta,zeta were 0, lambda<0 and all three were constant.\n""; << ""This allowed for analytic integration, but now, numeric integration would be required.\n""; << ""These parameters must either be kept constant, or be floating from the beginning. ""; << "" Terminating fit ...""; << std::endl;; RooArgSet vars;; vars.add(_beta.arg());; vars.add(_zeta.arg());; vars.add(_lambda.arg());; vars.printStream(logstream, vars.defaultPrintContents(nullptr), RooPrintable::kVerbose);; throw std::runtime_error(""RooHypatia2 cannot be integrated analytically since parameters changed."");; }. // The formulae to follow still use beta and zeta to facilitate comparisons with the; // evaluate function. Since beta and zeta are zero, all relevant terms will be disabled; // by defining these two constexpr:; constexpr double beta = 0.;; constexpr double cons1 = 1.;. if (code != 1) {; throw std::logic_error(""Trying to compute analytic integral with unknown configuration."");; }. const double asigma = _a * _sigma;; const double a2sigma = _a2 * _sigma;; const double d0 = _x.min(rangeName) - _mu;; const double d1 = _x.max(rangeName) - _mu;. double delta;; if (_lambda <= -1.0) {; delta = _sigma * sqrt(-2. + -2.*_lambda);; }; else {; delta = _sigma;; }; const double deltaSq = delta*delta;. if ((d0 > -asigma) && (d1 < a2sigma)) {; return stIntegral(d1, delta, _lambda) - stIntegral(d0, delta, _lambda);; }. if (d0 > a2sigma) {; const double phi = 1. + a2sigma*a2sigma/deltaSq;; const double k1 = cons1*std::po",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:1479,Modifiability,config,configuration,1479,"bda >= 0) {; auto& logstream = coutF(Integration) << ""When the PDF "" << GetName(); << "" was constructed, beta,zeta were 0, lambda<0 and all three were constant.\n""; << ""This allowed for analytic integration, but now, numeric integration would be required.\n""; << ""These parameters must either be kept constant, or be floating from the beginning. ""; << "" Terminating fit ...""; << std::endl;; RooArgSet vars;; vars.add(_beta.arg());; vars.add(_zeta.arg());; vars.add(_lambda.arg());; vars.printStream(logstream, vars.defaultPrintContents(nullptr), RooPrintable::kVerbose);; throw std::runtime_error(""RooHypatia2 cannot be integrated analytically since parameters changed."");; }. // The formulae to follow still use beta and zeta to facilitate comparisons with the; // evaluate function. Since beta and zeta are zero, all relevant terms will be disabled; // by defining these two constexpr:; constexpr double beta = 0.;; constexpr double cons1 = 1.;. if (code != 1) {; throw std::logic_error(""Trying to compute analytic integral with unknown configuration."");; }. const double asigma = _a * _sigma;; const double a2sigma = _a2 * _sigma;; const double d0 = _x.min(rangeName) - _mu;; const double d1 = _x.max(rangeName) - _mu;. double delta;; if (_lambda <= -1.0) {; delta = _sigma * sqrt(-2. + -2.*_lambda);; }; else {; delta = _sigma;; }; const double deltaSq = delta*delta;. if ((d0 > -asigma) && (d1 < a2sigma)) {; return stIntegral(d1, delta, _lambda) - stIntegral(d0, delta, _lambda);; }. if (d0 > a2sigma) {; const double phi = 1. + a2sigma*a2sigma/deltaSq;; const double k1 = cons1*std::pow(phi,_lambda-0.5);; const double k2 = beta*k1+ cons1*(_lambda-0.5)*std::pow(phi,_lambda-1.5)*2.*a2sigma/deltaSq;; const double B = -a2sigma - _n2*k1/k2;; const double A = k1*std::pow(B+a2sigma,_n2);; return A*(std::pow(B+d1,1-_n2)/(1-_n2) -std::pow(B+d0,1-_n2)/(1-_n2) ) ;. }. if (d1 < -asigma) {; const double phi = 1. + asigma*asigma/deltaSq;; const double k1 = cons1*std::pow(phi,_lambda-0.5);; const dou",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:29,Testability,test,testing,29,"/* Analytical integrals need testing. Int_t RooHypatia2::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char*) const; {; if (matchArgs(allVars, analVars, _x); && _beta == 0. && _beta.arg().isConstant(); && _zeta == 0. && _zeta.arg().isConstant(); && _lambda.max() < 0.) return 1;; return 0 ;; }. double RooHypatia2::analyticalIntegral(Int_t code, const char* rangeName) const; {; if (_beta != 0. || _zeta != 0. || _lambda >= 0) {; auto& logstream = coutF(Integration) << ""When the PDF "" << GetName(); << "" was constructed, beta,zeta were 0, lambda<0 and all three were constant.\n""; << ""This allowed for analytic integration, but now, numeric integration would be required.\n""; << ""These parameters must either be kept constant, or be floating from the beginning. ""; << "" Terminating fit ...""; << std::endl;; RooArgSet vars;; vars.add(_beta.arg());; vars.add(_zeta.arg());; vars.add(_lambda.arg());; vars.printStream(logstream, vars.defaultPrintContents(nullptr), RooPrintable::kVerbose);; throw std::runtime_error(""RooHypatia2 cannot be integrated analytically since parameters changed."");; }. // The formulae to follow still use beta and zeta to facilitate comparisons with the; // evaluate function. Since beta and zeta are zero, all relevant terms will be disabled; // by defining these two constexpr:; constexpr double beta = 0.;; constexpr double cons1 = 1.;. if (code != 1) {; throw std::logic_error(""Trying to compute analytic integral with unknown configuration."");; }. const double asigma = _a * _sigma;; const double a2sigma = _a2 * _sigma;; const double d0 = _x.min(rangeName) - _mu;; const double d1 = _x.max(rangeName) - _mu;. double delta;; if (_lambda <= -1.0) {; delta = _sigma * sqrt(-2. + -2.*_lambda);; }; else {; delta = _sigma;; }; const double deltaSq = delta*delta;. if ((d0 > -asigma) && (d1 < a2sigma)) {; return stIntegral(d1, delta, _lambda) - stIntegral(d0, delta, _lambda);; }. if (d0 > a2sigma) {; const double phi = 1. + a2sigma*a2sigma/deltaSq;; ",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:459,Testability,log,logstream,459,"/* Analytical integrals need testing. Int_t RooHypatia2::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char*) const; {; if (matchArgs(allVars, analVars, _x); && _beta == 0. && _beta.arg().isConstant(); && _zeta == 0. && _zeta.arg().isConstant(); && _lambda.max() < 0.) return 1;; return 0 ;; }. double RooHypatia2::analyticalIntegral(Int_t code, const char* rangeName) const; {; if (_beta != 0. || _zeta != 0. || _lambda >= 0) {; auto& logstream = coutF(Integration) << ""When the PDF "" << GetName(); << "" was constructed, beta,zeta were 0, lambda<0 and all three were constant.\n""; << ""This allowed for analytic integration, but now, numeric integration would be required.\n""; << ""These parameters must either be kept constant, or be floating from the beginning. ""; << "" Terminating fit ...""; << std::endl;; RooArgSet vars;; vars.add(_beta.arg());; vars.add(_zeta.arg());; vars.add(_lambda.arg());; vars.printStream(logstream, vars.defaultPrintContents(nullptr), RooPrintable::kVerbose);; throw std::runtime_error(""RooHypatia2 cannot be integrated analytically since parameters changed."");; }. // The formulae to follow still use beta and zeta to facilitate comparisons with the; // evaluate function. Since beta and zeta are zero, all relevant terms will be disabled; // by defining these two constexpr:; constexpr double beta = 0.;; constexpr double cons1 = 1.;. if (code != 1) {; throw std::logic_error(""Trying to compute analytic integral with unknown configuration."");; }. const double asigma = _a * _sigma;; const double a2sigma = _a2 * _sigma;; const double d0 = _x.min(rangeName) - _mu;; const double d1 = _x.max(rangeName) - _mu;. double delta;; if (_lambda <= -1.0) {; delta = _sigma * sqrt(-2. + -2.*_lambda);; }; else {; delta = _sigma;; }; const double deltaSq = delta*delta;. if ((d0 > -asigma) && (d1 < a2sigma)) {; return stIntegral(d1, delta, _lambda) - stIntegral(d0, delta, _lambda);; }. if (d0 > a2sigma) {; const double phi = 1. + a2sigma*a2sigma/deltaSq;; ",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:939,Testability,log,logstream,939,"/* Analytical integrals need testing. Int_t RooHypatia2::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char*) const; {; if (matchArgs(allVars, analVars, _x); && _beta == 0. && _beta.arg().isConstant(); && _zeta == 0. && _zeta.arg().isConstant(); && _lambda.max() < 0.) return 1;; return 0 ;; }. double RooHypatia2::analyticalIntegral(Int_t code, const char* rangeName) const; {; if (_beta != 0. || _zeta != 0. || _lambda >= 0) {; auto& logstream = coutF(Integration) << ""When the PDF "" << GetName(); << "" was constructed, beta,zeta were 0, lambda<0 and all three were constant.\n""; << ""This allowed for analytic integration, but now, numeric integration would be required.\n""; << ""These parameters must either be kept constant, or be floating from the beginning. ""; << "" Terminating fit ...""; << std::endl;; RooArgSet vars;; vars.add(_beta.arg());; vars.add(_zeta.arg());; vars.add(_lambda.arg());; vars.printStream(logstream, vars.defaultPrintContents(nullptr), RooPrintable::kVerbose);; throw std::runtime_error(""RooHypatia2 cannot be integrated analytically since parameters changed."");; }. // The formulae to follow still use beta and zeta to facilitate comparisons with the; // evaluate function. Since beta and zeta are zero, all relevant terms will be disabled; // by defining these two constexpr:; constexpr double beta = 0.;; constexpr double cons1 = 1.;. if (code != 1) {; throw std::logic_error(""Trying to compute analytic integral with unknown configuration."");; }. const double asigma = _a * _sigma;; const double a2sigma = _a2 * _sigma;; const double d0 = _x.min(rangeName) - _mu;; const double d1 = _x.max(rangeName) - _mu;. double delta;; if (_lambda <= -1.0) {; delta = _sigma * sqrt(-2. + -2.*_lambda);; }; else {; delta = _sigma;; }; const double deltaSq = delta*delta;. if ((d0 > -asigma) && (d1 < a2sigma)) {; return stIntegral(d1, delta, _lambda) - stIntegral(d0, delta, _lambda);; }. if (d0 > a2sigma) {; const double phi = 1. + a2sigma*a2sigma/deltaSq;; ",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooHypatia2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooLegendre.cxx:171,Deployability,update,update,171,"// these combinations are odd under x -> -x; // from B.R. Wong, ""On the overlap integral of associated Legendre Polynomials"" 1998 J. Phys. A: Math. Gen. 31 1101; // TODO: update to the result of; // H. A. Mavromatis; // ""A single-sum expression for the overlap integral of two associated Legendre polynomials""; // 1999 J. Phys. A: Math. Gen. 32 2601; // http://iopscience.iop.org/0305-4470/32/13/011/pdf/0305-4470_32_13_011.pdf; // For that we need Wigner 3-j, which Lorenzo has added for Root 5.28... (note: check Condon-Shortly convention in this paper!)",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooLegendre.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooLegendre.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx:932,Availability,avail,available,932,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitModels *; * @(#)root/roofit:$Id: RooNonCentralChiSquare *; * Authors: *; * Kyle Cranmer; * *; *****************************************************************************/; /** \class RooNonCentralChiSquare; \ingroup Roofit. The PDF of the Non-Central Chi Square distribution for n degrees of freedom.; It is the asymptotic distribution of the profile likelihood ratio test q_mu; when a different mu' is true. It is Wald's generalization of Wilks' Theorem. See:. Asymptotic formulae for likelihood-based tests of new physics. By Glen Cowan, Kyle Cranmer, Eilam Gross, Ofer Vitells; http://arXiv.org/abs/arXiv:1007.1727. [Wikipedia](http://en.wikipedia.org/wiki/Noncentral_chi-square_distribution#Approximation). It requires MathMore to evaluate for non-integer degrees of freedom, k. When the Mathmore library is available we can use the MathMore libraries implemented using GSL.; It makes use of the modified Bessel function of the first kind (for k > 2). For k < 2 it uses; the hypergeometric function 0F1.; When is not available we use explicit summation of normal chi-squared distributions; The usage of the sum can be forced by calling SetForceSum(true);. This implementation could be improved. BOOST has a nice implementation:. http://live.boost.org/doc/libs/1_42_0/libs/math/doc/sf_and_dist/html/math_toolkit/dist/dist_ref/dists/nc_chi_squared_dist.html. http://wesnoth.repositoryhosting.com/trac/wesnoth_wesnoth/browser/trunk/include/boost/math/distributions/non_central_chi_squared.hpp?rev=6; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooNonCentralChiSquare.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx:1141,Availability,avail,available,1141,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitModels *; * @(#)root/roofit:$Id: RooNonCentralChiSquare *; * Authors: *; * Kyle Cranmer; * *; *****************************************************************************/; /** \class RooNonCentralChiSquare; \ingroup Roofit. The PDF of the Non-Central Chi Square distribution for n degrees of freedom.; It is the asymptotic distribution of the profile likelihood ratio test q_mu; when a different mu' is true. It is Wald's generalization of Wilks' Theorem. See:. Asymptotic formulae for likelihood-based tests of new physics. By Glen Cowan, Kyle Cranmer, Eilam Gross, Ofer Vitells; http://arXiv.org/abs/arXiv:1007.1727. [Wikipedia](http://en.wikipedia.org/wiki/Noncentral_chi-square_distribution#Approximation). It requires MathMore to evaluate for non-integer degrees of freedom, k. When the Mathmore library is available we can use the MathMore libraries implemented using GSL.; It makes use of the modified Bessel function of the first kind (for k > 2). For k < 2 it uses; the hypergeometric function 0F1.; When is not available we use explicit summation of normal chi-squared distributions; The usage of the sum can be forced by calling SetForceSum(true);. This implementation could be improved. BOOST has a nice implementation:. http://live.boost.org/doc/libs/1_42_0/libs/math/doc/sf_and_dist/html/math_toolkit/dist/dist_ref/dists/nc_chi_squared_dist.html. http://wesnoth.repositoryhosting.com/trac/wesnoth_wesnoth/browser/trunk/include/boost/math/distributions/non_central_chi_squared.hpp?rev=6; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooNonCentralChiSquare.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx:488,Testability,test,test,488,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitModels *; * @(#)root/roofit:$Id: RooNonCentralChiSquare *; * Authors: *; * Kyle Cranmer; * *; *****************************************************************************/; /** \class RooNonCentralChiSquare; \ingroup Roofit. The PDF of the Non-Central Chi Square distribution for n degrees of freedom.; It is the asymptotic distribution of the profile likelihood ratio test q_mu; when a different mu' is true. It is Wald's generalization of Wilks' Theorem. See:. Asymptotic formulae for likelihood-based tests of new physics. By Glen Cowan, Kyle Cranmer, Eilam Gross, Ofer Vitells; http://arXiv.org/abs/arXiv:1007.1727. [Wikipedia](http://en.wikipedia.org/wiki/Noncentral_chi-square_distribution#Approximation). It requires MathMore to evaluate for non-integer degrees of freedom, k. When the Mathmore library is available we can use the MathMore libraries implemented using GSL.; It makes use of the modified Bessel function of the first kind (for k > 2). For k < 2 it uses; the hypergeometric function 0F1.; When is not available we use explicit summation of normal chi-squared distributions; The usage of the sum can be forced by calling SetForceSum(true);. This implementation could be improved. BOOST has a nice implementation:. http://live.boost.org/doc/libs/1_42_0/libs/math/doc/sf_and_dist/html/math_toolkit/dist/dist_ref/dists/nc_chi_squared_dist.html. http://wesnoth.repositoryhosting.com/trac/wesnoth_wesnoth/browser/trunk/include/boost/math/distributions/non_central_chi_squared.hpp?rev=6; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooNonCentralChiSquare.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx:623,Testability,test,tests,623,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitModels *; * @(#)root/roofit:$Id: RooNonCentralChiSquare *; * Authors: *; * Kyle Cranmer; * *; *****************************************************************************/; /** \class RooNonCentralChiSquare; \ingroup Roofit. The PDF of the Non-Central Chi Square distribution for n degrees of freedom.; It is the asymptotic distribution of the profile likelihood ratio test q_mu; when a different mu' is true. It is Wald's generalization of Wilks' Theorem. See:. Asymptotic formulae for likelihood-based tests of new physics. By Glen Cowan, Kyle Cranmer, Eilam Gross, Ofer Vitells; http://arXiv.org/abs/arXiv:1007.1727. [Wikipedia](http://en.wikipedia.org/wiki/Noncentral_chi-square_distribution#Approximation). It requires MathMore to evaluate for non-integer degrees of freedom, k. When the Mathmore library is available we can use the MathMore libraries implemented using GSL.; It makes use of the modified Bessel function of the first kind (for k > 2). For k < 2 it uses; the hypergeometric function 0F1.; When is not available we use explicit summation of normal chi-squared distributions; The usage of the sum can be forced by calling SetForceSum(true);. This implementation could be improved. BOOST has a nice implementation:. http://live.boost.org/doc/libs/1_42_0/libs/math/doc/sf_and_dist/html/math_toolkit/dist/dist_ref/dists/nc_chi_squared_dist.html. http://wesnoth.repositoryhosting.com/trac/wesnoth_wesnoth/browser/trunk/include/boost/math/distributions/non_central_chi_squared.hpp?rev=6; **/",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooNonCentralChiSquare.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx:32,Modifiability,VARIAB,VARIABLE,32,"// ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE; // chi^2(0,k) gives inf and causes various problems; // truncate",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooNonCentralChiSquare.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx:43,Availability,error,error,43,"// for normalization allow slightly larger error",MatchSource.CODE_COMMENT,roofit/roofitmore/src/RooNonCentralChiSquare.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:7,Availability,recover,recoverable,7,"// not recoverable from here",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:7,Safety,recover,recoverable,7,"// not recoverable from here",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:54,Availability,error,errors,54,"// We retry send and receive only on EINTR, all other errors are either fatal, or can only; // be handled at the caller.",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:60,Availability,error,error,60,"// the actual work this function should do, all the rest is error handling:",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:8,Availability,recover,recoverable,8,"// only recoverable error",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:20,Availability,error,error,20,"// only recoverable error",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:8,Safety,recover,recoverable,8,"// only recoverable error",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:60,Availability,error,error,60,"// the actual work this function should do, all the rest is error handling:",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:8,Availability,recover,recoverable,8,"// only recoverable error",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:20,Availability,error,error,20,"// only recoverable error",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:8,Safety,recover,recoverable,8,"// only recoverable error",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:11,Availability,error,error,11,"// Note on error handling:; // Creating message_t can throw, but only when memory ran out (errno ENOMEM),; // and that is something only the caller can fix, so we don't catch it here.",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:11,Integrability,message,message,11,"/// decode message with ZMQ, POD version",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:15,Integrability,message,message,15,"/// decode ZMQ message, string version",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:12,Integrability,message,message,12,"/// receive message with ZMQ, general version; // FIXME: what to do with flags=nullptr.... more is a pointer, that might prevent conversion",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:11,Integrability,message,message,11,"// receive message",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:10,Integrability,message,message,10,"// decode message",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:12,Integrability,message,message,12,"/// receive message with ZMQ",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:11,Integrability,message,message,11,"// receive message",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:11,Integrability,message,message,11,"/// encode message to ZMQ",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:9,Integrability,message,message,9,"/// Send message with ZMQ",MatchSource.CODE_COMMENT,roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ppoll.cpp:4,Integrability,Wrap,Wrapper,4,"/// Wrapper around zmq_ppoll; /// This function can throw, so wrap in try-catch!",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ppoll.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ppoll.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ppoll.cpp:62,Integrability,wrap,wrap,62,"/// Wrapper around zmq_ppoll; /// This function can throw, so wrap in try-catch!",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ppoll.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ppoll.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ppoll.cpp:4,Integrability,Wrap,Wrapper,4,"/// Wrapper around zmq_ppoll; /// This function can throw, so wrap in try-catch!",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ppoll.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ppoll.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ppoll.cpp:62,Integrability,wrap,wrap,62,"/// Wrapper around zmq_ppoll; /// This function can throw, so wrap in try-catch!",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ppoll.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ppoll.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp:34,Integrability,Wrap,Wrapper,34,"/** \class ZeroMQPoller; * \brief Wrapper class for polling ZeroMQ sockets; *; * This class simplifies calls to poll or ppoll ZeroMQ sockets. It stores the; * list of sockets to be polled, which means they don't have to be separately; * carried around by the user. It also parses output and returns an easily; * digestible vector of events.; */; /**; * \brief Poll the sockets; *; * \param[in] timeo Timeout in milliseconds. 0 means return immediately. -1 means wait for an event indefinitely.; * \return A vector of pairs of index and flags; index is the index of the registered fd or socket and flags are 0 (no; * events), ZMQ_POLLIN or ZMQ_POLLOUT.; *; * \note This function can throw (from inside zmq::poll), so wrap in try-catch!; */",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQPoller.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp:716,Integrability,wrap,wrap,716,"/** \class ZeroMQPoller; * \brief Wrapper class for polling ZeroMQ sockets; *; * This class simplifies calls to poll or ppoll ZeroMQ sockets. It stores the; * list of sockets to be polled, which means they don't have to be separately; * carried around by the user. It also parses output and returns an easily; * digestible vector of events.; */; /**; * \brief Poll the sockets; *; * \param[in] timeo Timeout in milliseconds. 0 means return immediately. -1 means wait for an event indefinitely.; * \return A vector of pairs of index and flags; index is the index of the registered fd or socket and flags are 0 (no; * events), ZMQ_POLLIN or ZMQ_POLLOUT.; *; * \note This function can throw (from inside zmq::poll), so wrap in try-catch!; */",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQPoller.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp:400,Safety,Timeout,Timeout,400,"/** \class ZeroMQPoller; * \brief Wrapper class for polling ZeroMQ sockets; *; * This class simplifies calls to poll or ppoll ZeroMQ sockets. It stores the; * list of sockets to be polled, which means they don't have to be separately; * carried around by the user. It also parses output and returns an easily; * digestible vector of events.; */; /**; * \brief Poll the sockets; *; * \param[in] timeo Timeout in milliseconds. 0 means return immediately. -1 means wait for an event indefinitely.; * \return A vector of pairs of index and flags; index is the index of the registered fd or socket and flags are 0 (no; * events), ZMQ_POLLIN or ZMQ_POLLOUT.; *; * \note This function can throw (from inside zmq::poll), so wrap in try-catch!; */",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQPoller.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp:92,Usability,simpl,simplifies,92,"/** \class ZeroMQPoller; * \brief Wrapper class for polling ZeroMQ sockets; *; * This class simplifies calls to poll or ppoll ZeroMQ sockets. It stores the; * list of sockets to be polled, which means they don't have to be separately; * carried around by the user. It also parses output and returns an easily; * digestible vector of events.; */; /**; * \brief Poll the sockets; *; * \param[in] timeo Timeout in milliseconds. 0 means return immediately. -1 means wait for an event indefinitely.; * \return A vector of pairs of index and flags; index is the index of the registered fd or socket and flags are 0 (no; * events), ZMQ_POLLIN or ZMQ_POLLOUT.; *; * \note This function can throw (from inside zmq::poll), so wrap in try-catch!; */",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQPoller.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp:115,Availability,mask,mask,115,"/**; * \brief Poll the sockets with ppoll; *; * By polling with ppoll instead of poll, one can pass along a signal mask to; * handle POSIX signals properly. See the zmq_ppoll documentation for examples; * of when this is useful: http://api.zeromq.org/; *; * \param[in] timeo Timeout in milliseconds. 0 means return immediately. -1 means wait for an event indefinitely.; * \param[in] sigmask A non-nullptr pointer to a signal mask must be constructed and passed to 'sigmask'. See the man page; * of sigprocmask(2) for more details on this. \return A vector of pairs of index and flags; index is the index of the; * registered fd or socket and flags are 0 (no events), ZMQ_POLLIN or ZMQ_POLLOUT.; *; * \note This function can throw (from inside ZMQ::ppoll), so wrap in try-catch!; */",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQPoller.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp:425,Availability,mask,mask,425,"/**; * \brief Poll the sockets with ppoll; *; * By polling with ppoll instead of poll, one can pass along a signal mask to; * handle POSIX signals properly. See the zmq_ppoll documentation for examples; * of when this is useful: http://api.zeromq.org/; *; * \param[in] timeo Timeout in milliseconds. 0 means return immediately. -1 means wait for an event indefinitely.; * \param[in] sigmask A non-nullptr pointer to a signal mask must be constructed and passed to 'sigmask'. See the man page; * of sigprocmask(2) for more details on this. \return A vector of pairs of index and flags; index is the index of the; * registered fd or socket and flags are 0 (no events), ZMQ_POLLIN or ZMQ_POLLOUT.; *; * \note This function can throw (from inside ZMQ::ppoll), so wrap in try-catch!; */",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQPoller.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp:759,Integrability,wrap,wrap,759,"/**; * \brief Poll the sockets with ppoll; *; * By polling with ppoll instead of poll, one can pass along a signal mask to; * handle POSIX signals properly. See the zmq_ppoll documentation for examples; * of when this is useful: http://api.zeromq.org/; *; * \param[in] timeo Timeout in milliseconds. 0 means return immediately. -1 means wait for an event indefinitely.; * \param[in] sigmask A non-nullptr pointer to a signal mask must be constructed and passed to 'sigmask'. See the man page; * of sigprocmask(2) for more details on this. \return A vector of pairs of index and flags; index is the index of the; * registered fd or socket and flags are 0 (no events), ZMQ_POLLIN or ZMQ_POLLOUT.; *; * \note This function can throw (from inside ZMQ::ppoll), so wrap in try-catch!; */",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQPoller.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp:275,Safety,Timeout,Timeout,275,"/**; * \brief Poll the sockets with ppoll; *; * By polling with ppoll instead of poll, one can pass along a signal mask to; * handle POSIX signals properly. See the zmq_ppoll documentation for examples; * of when this is useful: http://api.zeromq.org/; *; * \param[in] timeo Timeout in milliseconds. 0 means return immediately. -1 means wait for an event indefinitely.; * \param[in] sigmask A non-nullptr pointer to a signal mask must be constructed and passed to 'sigmask'. See the man page; * of sigprocmask(2) for more details on this. \return A vector of pairs of index and flags; index is the index of the; * registered fd or socket and flags are 0 (no events), ZMQ_POLLIN or ZMQ_POLLOUT.; *; * \note This function can throw (from inside ZMQ::ppoll), so wrap in try-catch!; */",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQPoller.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp:92,Integrability,wrap,wrapped,92,"// NOTE: this uses the conversion-to-void* operator of; // zmq::socket_t, which returns the wrapped object",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQPoller.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp:50,Integrability,wrap,wrapped,50,"// We need to lookup by the pointer to the object wrapped by zmq::socket_t",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQPoller.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp:92,Integrability,wrap,wrapped,92,"// NOTE: this uses the conversion-to-void* operator of; // zmq::socket_t, which returns the wrapped object",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQPoller.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp:50,Integrability,wrap,wrapped,50,"// We need to lookup by the pointer to the object wrapped by zmq::socket_t",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQPoller.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp:82,Integrability,wrap,wrapped,82,"// Remove from m_sockets; // Can't search by the key of m_sockets, as that is the wrapped; // object, but have to use the pointer to the wrapper; // (zmq::socket_t)",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQPoller.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp:137,Integrability,wrap,wrapper,137,"// Remove from m_sockets; // Can't search by the key of m_sockets, as that is the wrapped; // object, but have to use the pointer to the wrapper; // (zmq::socket_t)",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQPoller.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQPoller.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:31,Integrability,Wrap,Wrapper,31,"/** \class ZeroMQSvc; * \brief Wrapper class for basic ZeroMQ context and socket management; *; * This singleton class wraps a couple of basic ZeroMQ tasks:; *; * 1. Creating, storing and eventually closing a ZeroMQ context.; * 2. Creating new sockets in the context.; * 3. Sending, receiving, encoding and decoding messages over sockets.; *; * For convenience, it offers a number of template overloads that automatically; * encode all kinds of data types in ZeroMQ message objects.; */; /**; * \brief Get singleton object of this class; */",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:119,Integrability,wrap,wraps,119,"/** \class ZeroMQSvc; * \brief Wrapper class for basic ZeroMQ context and socket management; *; * This singleton class wraps a couple of basic ZeroMQ tasks:; *; * 1. Creating, storing and eventually closing a ZeroMQ context.; * 2. Creating new sockets in the context.; * 3. Sending, receiving, encoding and decoding messages over sockets.; *; * For convenience, it offers a number of template overloads that automatically; * encode all kinds of data types in ZeroMQ message objects.; */; /**; * \brief Get singleton object of this class; */",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:316,Integrability,message,messages,316,"/** \class ZeroMQSvc; * \brief Wrapper class for basic ZeroMQ context and socket management; *; * This singleton class wraps a couple of basic ZeroMQ tasks:; *; * 1. Creating, storing and eventually closing a ZeroMQ context.; * 2. Creating new sockets in the context.; * 3. Sending, receiving, encoding and decoding messages over sockets.; *; * For convenience, it offers a number of template overloads that automatically; * encode all kinds of data types in ZeroMQ message objects.; */; /**; * \brief Get singleton object of this class; */",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:466,Integrability,message,message,466,"/** \class ZeroMQSvc; * \brief Wrapper class for basic ZeroMQ context and socket management; *; * This singleton class wraps a couple of basic ZeroMQ tasks:; *; * 1. Creating, storing and eventually closing a ZeroMQ context.; * 2. Creating new sockets in the context.; * 3. Sending, receiving, encoding and decoding messages over sockets.; *; * For convenience, it offers a number of template overloads that automatically; * encode all kinds of data types in ZeroMQ message objects.; */; /**; * \brief Get singleton object of this class; */",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:60,Availability,error,error,60,"// the actual work this function should do, all the rest is error handling:",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:11,Availability,error,errors,11,"// all zmq errors not recoverable from here, only at call site",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:22,Availability,recover,recoverable,22,"// all zmq errors not recoverable from here, only at call site",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:22,Safety,recover,recoverable,22,"// all zmq errors not recoverable from here, only at call site",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:60,Availability,error,error,60,"// the actual work this function should do, all the rest is error handling:",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:11,Availability,error,errors,11,"// all zmq errors not recoverable from here, only at call site",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:22,Availability,recover,recoverable,22,"// all zmq errors not recoverable from here, only at call site",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:22,Safety,recover,recoverable,22,"// all zmq errors not recoverable from here, only at call site",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:104,Integrability,message,message,104,/**; * \fn zmq::message_t ZeroMQSvc::encode(const char *item) const; * \brief Encode string as a ZeroMQ message object; *; * \param[in] item String.; */,MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:117,Integrability,message,message,117,"/**; * \fn bool ZeroMQSvc::send(zmq::socket_t &socket, const char *item, zmq::send_flags flags) const; * \brief Send message over a socket; *; * \param[in] socket Socket.; * \param[in] item Message to send over.; * \param[in] flags Flags to send. See http://api.zeromq.org/master:zmq-send for possible flags and the cppzmq API for; * the type-safe equivalents in the zmq::send_flags enum class.; * \return An optional of type zmq::send_result_t that contains the number of bytes sent if successful, and is empty if; * EAGAIN was received, which probably means you should try again.; */",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:190,Integrability,Message,Message,190,"/**; * \fn bool ZeroMQSvc::send(zmq::socket_t &socket, const char *item, zmq::send_flags flags) const; * \brief Send message over a socket; *; * \param[in] socket Socket.; * \param[in] item Message to send over.; * \param[in] flags Flags to send. See http://api.zeromq.org/master:zmq-send for possible flags and the cppzmq API for; * the type-safe equivalents in the zmq::send_flags enum class.; * \return An optional of type zmq::send_result_t that contains the number of bytes sent if successful, and is empty if; * EAGAIN was received, which probably means you should try again.; */",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp:343,Safety,safe,safe,343,"/**; * \fn bool ZeroMQSvc::send(zmq::socket_t &socket, const char *item, zmq::send_flags flags) const; * \brief Send message over a socket; *; * \param[in] socket Socket.; * \param[in] item Message to send over.; * \param[in] flags Flags to send. See http://api.zeromq.org/master:zmq-send for possible flags and the cppzmq API for; * the type-safe equivalents in the zmq::send_flags enum class.; * \return An optional of type zmq::send_result_t that contains the number of bytes sent if successful, and is empty if; * EAGAIN was received, which probably means you should try again.; */",MatchSource.CODE_COMMENT,roofit/roofitZMQ/src/ZeroMQSvc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/src/ZeroMQSvc.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_HWM.cxx:20,Testability,test,test,20,"// parent; // start test",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_HWM.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_HWM.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_polling.cxx:9,Testability,test,test,9,"// start test",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_polling.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_polling.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_polling.cxx:9,Testability,test,test,9,"// start test",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_polling.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_polling.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:95,Energy Efficiency,reduce,reduce,95,"// N.B.: wait_for_child is identically defined in RooFit::MultiProcess, but we copy it here to reduce module; // interdependencies. It also requires an extra include:",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:117,Availability,robust,robust,117,"// Sometimes, the socket from the previous test needs some time to close, so; // we introduce a latency here. A more robust and fast approach might be to; // do the following on the bind side:; // 1. first try another port, e.g. increase by one; // 2. if that doesn't work, do the latency and retry the original port; // The connect side then also needs to change, because it doesn't know which; // port the bind side will bind to. The connect side could try connecting to; // both options asynchronously, and then in a loop check both for signs of; // life. If one comes alive, transfer ownership of that pointer to the pointer; // you want to eventually use (`socket`) and that's it.",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:572,Availability,alive,alive,572,"// Sometimes, the socket from the previous test needs some time to close, so; // we introduce a latency here. A more robust and fast approach might be to; // do the following on the bind side:; // 1. first try another port, e.g. increase by one; // 2. if that doesn't work, do the latency and retry the original port; // The connect side then also needs to change, because it doesn't know which; // port the bind side will bind to. The connect side could try connecting to; // both options asynchronously, and then in a loop check both for signs of; // life. If one comes alive, transfer ownership of that pointer to the pointer; // you want to eventually use (`socket`) and that's it.",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:96,Performance,latency,latency,96,"// Sometimes, the socket from the previous test needs some time to close, so; // we introduce a latency here. A more robust and fast approach might be to; // do the following on the bind side:; // 1. first try another port, e.g. increase by one; // 2. if that doesn't work, do the latency and retry the original port; // The connect side then also needs to change, because it doesn't know which; // port the bind side will bind to. The connect side could try connecting to; // both options asynchronously, and then in a loop check both for signs of; // life. If one comes alive, transfer ownership of that pointer to the pointer; // you want to eventually use (`socket`) and that's it.",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:281,Performance,latency,latency,281,"// Sometimes, the socket from the previous test needs some time to close, so; // we introduce a latency here. A more robust and fast approach might be to; // do the following on the bind side:; // 1. first try another port, e.g. increase by one; // 2. if that doesn't work, do the latency and retry the original port; // The connect side then also needs to change, because it doesn't know which; // port the bind side will bind to. The connect side could try connecting to; // both options asynchronously, and then in a loop check both for signs of; // life. If one comes alive, transfer ownership of that pointer to the pointer; // you want to eventually use (`socket`) and that's it.",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:43,Testability,test,test,43,"// Sometimes, the socket from the previous test needs some time to close, so; // we introduce a latency here. A more robust and fast approach might be to; // do the following on the bind side:; // 1. first try another port, e.g. increase by one; // 2. if that doesn't work, do the latency and retry the original port; // The connect side then also needs to change, because it doesn't know which; // port the bind side will bind to. The connect side could try connecting to; // both options asynchronously, and then in a loop check both for signs of; // life. If one comes alive, transfer ownership of that pointer to the pointer; // you want to eventually use (`socket`) and that's it.",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:36,Safety,avoid,avoid,36,"// bind is on the master process to avoid zombie children to hold on to binds; // start test",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:88,Testability,test,test,88,"// bind is on the master process to avoid zombie children to hold on to binds; // start test",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:9,Testability,test,test,9,"// start test",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:36,Safety,avoid,avoid,36,"// bind is on the master process to avoid zombie children to hold on to binds; // start test: send 2 things, receive 1, send 1 more, finish",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:88,Testability,test,test,88,"// bind is on the master process to avoid zombie children to hold on to binds; // start test: send 2 things, receive 1, send 1 more, finish",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:60,Availability,down,down,60,"// NOTE: also in case of a throw, be sure to properly close down the connection!; // Otherwise, you may get zombies waiting for a reply.",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:9,Testability,test,test,9,"// start test, receive something",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:60,Availability,down,down,60,"// NOTE: also in case of a throw, be sure to properly close down the connection!; // Otherwise, you may get zombies waiting for a reply.",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:36,Safety,avoid,avoid,36,"// bind is on the master process to avoid zombie children to hold on to binds; // start test: send 2 things, receive 1, send 1 more, finish",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:88,Testability,test,test,88,"// bind is on the master process to avoid zombie children to hold on to binds; // start test: send 2 things, receive 1, send 1 more, finish",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:60,Availability,down,down,60,"// NOTE: also in case of a throw, be sure to properly close down the connection!; // Otherwise, you may get zombies waiting for a reply.",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:9,Testability,test,test,9,"// start test, receive first thing",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:31,Integrability,message,messages,31,"// ignore the rest of the sent messages, but give the other end a second to; // actually send its stuff, instead of hanging in retry_send because the; // connection has died; a better solution would be if retry_send (in; // ZeroMQSvc::send) had a callback mechanism that could be used to break; // out when a child has died, but ok",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx:9,Testability,test,test,9,"// start test",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx:166,Integrability,message,messages,166,"// wait a second so that all pull sockets are connected for round-robin distribution; // if you don't wait a second above, the push socket will ""round-robin"" all the messages to just one or two; // connected sockets",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx:102,Availability,avail,available,102,"/// This test shows how push-pull is unsuited for load balancing; messages are just sent to the first available pull; /// socket without any dynamic load balancing",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx:66,Integrability,message,messages,66,"/// This test shows how push-pull is unsuited for load balancing; messages are just sent to the first available pull; /// socket without any dynamic load balancing",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx:50,Performance,load,load,50,"/// This test shows how push-pull is unsuited for load balancing; messages are just sent to the first available pull; /// socket without any dynamic load balancing",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx:149,Performance,load,load,149,"/// This test shows how push-pull is unsuited for load balancing; messages are just sent to the first available pull; /// socket without any dynamic load balancing",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx:9,Testability,test,test,9,"/// This test shows how push-pull is unsuited for load balancing; messages are just sent to the first available pull; /// socket without any dynamic load balancing",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx:79,Performance,load,load,79,"/// This test tries to see whether push-pull can be made to work as a bit of a load balancer, using a low HWM at the; /// receiver",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx:9,Testability,test,test,9,"/// This test tries to see whether push-pull can be made to work as a bit of a load balancer, using a low HWM at the; /// receiver",MatchSource.CODE_COMMENT,roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ_load_balancing.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/LinkDef.h:12,Performance,load,loading,12,"// for auto-loading namespaces",MatchSource.CODE_COMMENT,roofit/roostats/inc/LinkDef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/LinkDef.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:33,Performance,perform,performing,33,"/// initialize the calculator by performing a global fit and make the Asimov data set",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:8,Testability,test,test,8,"/// set test statistic for one sided (upper limits)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:12,Testability,test,test,12,"/// set the test statistics for two sided (in case of upper limits; /// for discovery does not make really sense)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:12,Testability,test,test,12,"/// set the test statistics for one-sided discovery",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:6,Modifiability,config,configure,6,"// // configure TestStatSampler for the Null run; // int PreNullHook(RooArgSet *parameterPoint, double obsTestStat) const;; // // configure TestStatSampler for the Alt run; // int PreAltHook(RooArgSet *parameterPoint, double obsTestStat) const;",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:130,Modifiability,config,configure,130,"// // configure TestStatSampler for the Null run; // int PreNullHook(RooArgSet *parameterPoint, double obsTestStat) const;; // // configure TestStatSampler for the Alt run; // int PreAltHook(RooArgSet *parameterPoint, double obsTestStat) const;",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:16,Testability,Test,TestStatSampler,16,"// // configure TestStatSampler for the Null run; // int PreNullHook(RooArgSet *parameterPoint, double obsTestStat) const;; // // configure TestStatSampler for the Alt run; // int PreAltHook(RooArgSet *parameterPoint, double obsTestStat) const;",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:140,Testability,Test,TestStatSampler,140,"// // configure TestStatSampler for the Null run; // int PreNullHook(RooArgSet *parameterPoint, double obsTestStat) const;; // // configure TestStatSampler for the Alt run; // int PreAltHook(RooArgSet *parameterPoint, double obsTestStat) const;",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:22,Testability,test,test,22,"///< for one sided PL test statistic (upper limits)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:22,Testability,test,test,22,"///< for one sided PL test statistic (for discovery)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:45,Availability,error,error,45,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:24,Testability,test,test,24,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:49,Availability,error,error,49,"/// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:24,Testability,test,test,24,"/// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:37,Testability,test,test,37,"/// Get the Confidence level for the test",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:119,Deployability,integrat,integrating,119,"/// use directly the approximate posterior function obtained by binning it in nbins; /// by default the cdf is used by integrating the posterior; /// if a value of nbin <= 0 the cdf function will be used",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:119,Integrability,integrat,integrating,119,"/// use directly the approximate posterior function obtained by binning it in nbins; /// by default the cdf is used by integrating the posterior; /// if a value of nbin <= 0 the cdf function will be used",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:51,Deployability,integrat,integration,51,"/// set the number of iterations when running a MC integration algorithm; /// If not set use default algorithmic values; /// In case of ToyMC sampling of the nuisance the value is 100; /// In case of using the GSL MCintegrations types the default value is; /// defined in ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls()",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:284,Deployability,Integrat,IntegratorMultiDimOptions,284,"/// set the number of iterations when running a MC integration algorithm; /// If not set use default algorithmic values; /// In case of ToyMC sampling of the nuisance the value is 100; /// In case of using the GSL MCintegrations types the default value is; /// defined in ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls()",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:51,Integrability,integrat,integration,51,"/// set the number of iterations when running a MC integration algorithm; /// If not set use default algorithmic values; /// In case of ToyMC sampling of the nuisance the value is 100; /// In case of using the GSL MCintegrations types the default value is; /// defined in ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls()",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:284,Integrability,Integrat,IntegratorMultiDimOptions,284,"/// set the number of iterations when running a MC integration algorithm; /// If not set use default algorithmic values; /// In case of ToyMC sampling of the nuisance the value is 100; /// In case of using the GSL MCintegrations types the default value is; /// defined in ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls()",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:12,Deployability,integrat,integration,12,"/// set the integration type (possible type are) :",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:12,Integrability,integrat,integration,12,"/// set the integration type (possible type are) :",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:54,Deployability,integrat,integrating,54,"// plan to replace the above: return a SimpleInterval integrating; // over all other parameters except the one specified as argument; // virtual SimpleInterval* GetInterval( RooRealVar* parameter ) const { return 0; }",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:54,Integrability,integrat,integrating,54,"// plan to replace the above: return a SimpleInterval integrating; // over all other parameters except the one specified as argument; // virtual SimpleInterval* GetInterval( RooRealVar* parameter ) const { return 0; }",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:39,Usability,Simpl,SimpleInterval,39,"// plan to replace the above: return a SimpleInterval integrating; // over all other parameters except the one specified as argument; // virtual SimpleInterval* GetInterval( RooRealVar* parameter ) const { return 0; }",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:145,Usability,Simpl,SimpleInterval,145,"// plan to replace the above: return a SimpleInterval integrating; // over all other parameters except the one specified as argument; // virtual SimpleInterval* GetInterval( RooRealVar* parameter ) const { return 0; }",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:25,Testability,log,log,25,"///< internal pointer to log likelihood function",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:5,Deployability,integrat,integrated,5,"///< integrated likelihood function, i.e - unnormalized posterior function",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h:5,Integrability,integrat,integrated,5,"///< integrated likelihood function, i.e - unnormalized posterior function",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/BayesianCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/BayesianCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:1213,Deployability,integrat,integration,1213,"/** \class CombinedCalculator; \ingroup Roostats. CombinedCalculator is an interface class for a tools which can produce both RooStats; HypoTestResults and ConfIntervals. The interface currently assumes that any such; calculator can be configured by specifying:. - a model common model (eg. a family of specific models which includes both the null and alternate),; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status),; - a set of parameters of which specify the alternate (including values and const/non-const status),; - a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface also allows one to pass the model,; data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will; return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how; the nuisance parameters are dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem; in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:75,Integrability,interface,interface,75,"/** \class CombinedCalculator; \ingroup Roostats. CombinedCalculator is an interface class for a tools which can produce both RooStats; HypoTestResults and ConfIntervals. The interface currently assumes that any such; calculator can be configured by specifying:. - a model common model (eg. a family of specific models which includes both the null and alternate),; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status),; - a set of parameters of which specify the alternate (including values and const/non-const status),; - a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface also allows one to pass the model,; data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will; return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how; the nuisance parameters are dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem; in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:175,Integrability,interface,interface,175,"/** \class CombinedCalculator; \ingroup Roostats. CombinedCalculator is an interface class for a tools which can produce both RooStats; HypoTestResults and ConfIntervals. The interface currently assumes that any such; calculator can be configured by specifying:. - a model common model (eg. a family of specific models which includes both the null and alternate),; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status),; - a set of parameters of which specify the alternate (including values and const/non-const status),; - a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface also allows one to pass the model,; data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will; return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how; the nuisance parameters are dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem; in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:673,Integrability,interface,interface,673,"/** \class CombinedCalculator; \ingroup Roostats. CombinedCalculator is an interface class for a tools which can produce both RooStats; HypoTestResults and ConfIntervals. The interface currently assumes that any such; calculator can be configured by specifying:. - a model common model (eg. a family of specific models which includes both the null and alternate),; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status),; - a set of parameters of which specify the alternate (including values and const/non-const status),; - a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface also allows one to pass the model,; data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will; return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how; the nuisance parameters are dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem; in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:789,Integrability,interface,interface,789,"/** \class CombinedCalculator; \ingroup Roostats. CombinedCalculator is an interface class for a tools which can produce both RooStats; HypoTestResults and ConfIntervals. The interface currently assumes that any such; calculator can be configured by specifying:. - a model common model (eg. a family of specific models which includes both the null and alternate),; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status),; - a set of parameters of which specify the alternate (including values and const/non-const status),; - a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface also allows one to pass the model,; data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will; return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how; the nuisance parameters are dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem; in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:1122,Integrability,interface,interface,1122,"/** \class CombinedCalculator; \ingroup Roostats. CombinedCalculator is an interface class for a tools which can produce both RooStats; HypoTestResults and ConfIntervals. The interface currently assumes that any such; calculator can be configured by specifying:. - a model common model (eg. a family of specific models which includes both the null and alternate),; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status),; - a set of parameters of which specify the alternate (including values and const/non-const status),; - a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface also allows one to pass the model,; data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will; return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how; the nuisance parameters are dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem; in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:1213,Integrability,integrat,integration,1213,"/** \class CombinedCalculator; \ingroup Roostats. CombinedCalculator is an interface class for a tools which can produce both RooStats; HypoTestResults and ConfIntervals. The interface currently assumes that any such; calculator can be configured by specifying:. - a model common model (eg. a family of specific models which includes both the null and alternate),; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status),; - a set of parameters of which specify the alternate (including values and const/non-const status),; - a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface also allows one to pass the model,; data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will; return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how; the nuisance parameters are dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem; in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:1310,Integrability,interface,interface,1310,"/** \class CombinedCalculator; \ingroup Roostats. CombinedCalculator is an interface class for a tools which can produce both RooStats; HypoTestResults and ConfIntervals. The interface currently assumes that any such; calculator can be configured by specifying:. - a model common model (eg. a family of specific models which includes both the null and alternate),; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status),; - a set of parameters of which specify the alternate (including values and const/non-const status),; - a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface also allows one to pass the model,; data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will; return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how; the nuisance parameters are dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem; in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:1346,Integrability,interface,interface,1346,"/** \class CombinedCalculator; \ingroup Roostats. CombinedCalculator is an interface class for a tools which can produce both RooStats; HypoTestResults and ConfIntervals. The interface currently assumes that any such; calculator can be configured by specifying:. - a model common model (eg. a family of specific models which includes both the null and alternate),; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status),; - a set of parameters of which specify the alternate (including values and const/non-const status),; - a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface also allows one to pass the model,; data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will; return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how; the nuisance parameters are dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem; in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:236,Modifiability,config,configured,236,"/** \class CombinedCalculator; \ingroup Roostats. CombinedCalculator is an interface class for a tools which can produce both RooStats; HypoTestResults and ConfIntervals. The interface currently assumes that any such; calculator can be configured by specifying:. - a model common model (eg. a family of specific models which includes both the null and alternate),; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status),; - a set of parameters of which specify the alternate (including values and const/non-const status),; - a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface also allows one to pass the model,; data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will; return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how; the nuisance parameters are dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem; in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:913,Modifiability,config,configuring,913,"/** \class CombinedCalculator; \ingroup Roostats. CombinedCalculator is an interface class for a tools which can produce both RooStats; HypoTestResults and ConfIntervals. The interface currently assumes that any such; calculator can be configured by specifying:. - a model common model (eg. a family of specific models which includes both the null and alternate),; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status),; - a set of parameters of which specify the alternate (including values and const/non-const status),; - a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface also allows one to pass the model,; data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will; return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how; the nuisance parameters are dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem; in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:1250,Testability,test,test-statistic,1250,"/** \class CombinedCalculator; \ingroup Roostats. CombinedCalculator is an interface class for a tools which can produce both RooStats; HypoTestResults and ConfIntervals. The interface currently assumes that any such; calculator can be configured by specifying:. - a model common model (eg. a family of specific models which includes both the null and alternate),; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status),; - a set of parameters of which specify the alternate (including values and const/non-const status),; - a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface also allows one to pass the model,; data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will; return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how; the nuisance parameters are dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem; in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:36,Deployability,configurat,configuration,36,"/// constructor from data and model configuration",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:36,Modifiability,config,configuration,36,"/// constructor from data and model configuration",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:9,Integrability,interface,interface,9,"/// Main interface to get a ConfInterval, pure virtual",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:9,Integrability,interface,interface,9,"/// main interface to get a HypoTestResult, pure virtual",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:45,Availability,error,error,45,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:24,Testability,test,test,24,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:49,Availability,error,error,49,"/// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:24,Testability,test,test,24,"/// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:37,Testability,test,test,37,"/// Get the Confidence level for the test",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:52,Availability,error,error,52,"///< size of the test (eg. specified rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:17,Testability,test,test,17,"///< size of the test (eg. specified rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:57,Testability,test,test,57,"///< RooArgSet specifying null parameters for hypothesis test",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:62,Testability,test,test,62,"///< RooArgSet specifying alternate parameters for hypothesis test",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/CombinedCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfidenceBelt.h:5,Usability,simpl,simple,5,"// A simple class used by ConfidenceBelt",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ConfidenceBelt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfidenceBelt.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfidenceBelt.h:18,Testability,test,test,18,"// lower limit on test statistic",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ConfidenceBelt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfidenceBelt.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfidenceBelt.h:18,Testability,test,test,18,"// upper limit on test statistic",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ConfidenceBelt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfidenceBelt.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfidenceBelt.h:5,Usability,simpl,simple,5,"// A simple class for acceptance regions used for ConfidenceBelt",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ConfidenceBelt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfidenceBelt.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfInterval.h:63,Integrability,interface,interface,63,"/** \class ConfInterval; \ingroup Roostats. ConfInterval is an interface class for a generic interval in the RooStats framework.; Any tool inheriting from IntervalCalculator can return a ConfInterval.; There are many types of intervals, they may be a simple range [a,b] in 1 dimension,; or they may be disconnected regions in multiple dimensions.; So the common interface is simply to ask the interval if a given point ""IsInInterval"".; The Interval also knows what confidence level it was constructed at and the space of; parameters for which it was constructed.; Note, one could use the same class for a Bayesian ""credible interval"". */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ConfInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfInterval.h:362,Integrability,interface,interface,362,"/** \class ConfInterval; \ingroup Roostats. ConfInterval is an interface class for a generic interval in the RooStats framework.; Any tool inheriting from IntervalCalculator can return a ConfInterval.; There are many types of intervals, they may be a simple range [a,b] in 1 dimension,; or they may be disconnected regions in multiple dimensions.; So the common interface is simply to ask the interval if a given point ""IsInInterval"".; The Interval also knows what confidence level it was constructed at and the space of; parameters for which it was constructed.; Note, one could use the same class for a Bayesian ""credible interval"". */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ConfInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfInterval.h:139,Modifiability,inherit,inheriting,139,"/** \class ConfInterval; \ingroup Roostats. ConfInterval is an interface class for a generic interval in the RooStats framework.; Any tool inheriting from IntervalCalculator can return a ConfInterval.; There are many types of intervals, they may be a simple range [a,b] in 1 dimension,; or they may be disconnected regions in multiple dimensions.; So the common interface is simply to ask the interval if a given point ""IsInInterval"".; The Interval also knows what confidence level it was constructed at and the space of; parameters for which it was constructed.; Note, one could use the same class for a Bayesian ""credible interval"". */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ConfInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfInterval.h:251,Usability,simpl,simple,251,"/** \class ConfInterval; \ingroup Roostats. ConfInterval is an interface class for a generic interval in the RooStats framework.; Any tool inheriting from IntervalCalculator can return a ConfInterval.; There are many types of intervals, they may be a simple range [a,b] in 1 dimension,; or they may be disconnected regions in multiple dimensions.; So the common interface is simply to ask the interval if a given point ""IsInInterval"".; The Interval also knows what confidence level it was constructed at and the space of; parameters for which it was constructed.; Note, one could use the same class for a Bayesian ""credible interval"". */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ConfInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfInterval.h:375,Usability,simpl,simply,375,"/** \class ConfInterval; \ingroup Roostats. ConfInterval is an interface class for a generic interval in the RooStats framework.; Any tool inheriting from IntervalCalculator can return a ConfInterval.; There are many types of intervals, they may be a simple range [a,b] in 1 dimension,; or they may be disconnected regions in multiple dimensions.; So the common interface is simply to ask the interval if a given point ""IsInInterval"".; The Interval also knows what confidence level it was constructed at and the space of; parameters for which it was constructed.; Note, one could use the same class for a Bayesian ""credible interval"". */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ConfInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfInterval.h:3,Integrability,Interface,Interface,3,"// Interface for Confidence Intervals",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ConfInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:119,Integrability,interface,interface,119,"/** \class DebuggingSampler; \ingroup Roostats. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:284,Testability,test,tests,284,"/** \class DebuggingSampler; \ingroup Roostats. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:70,Usability,simpl,simple,70,"/** \class DebuggingSampler; \ingroup Roostats. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:9,Integrability,interface,interface,9,"/// Main interface to get a ConfInterval, pure virtual",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:3,Safety,avoid,avoid,3,"// avoid warning; // normally this method would be complex, but here it is simple for debugging",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:75,Usability,simpl,simple,75,"// avoid warning; // normally this method would be complex, but here it is simple for debugging",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:9,Integrability,interface,interface,9,"/// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:35,Testability,test,test,35,"/// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:19,Safety,avoid,avoid,19,"// data = data; // avoid warning; // paramsOfInterest = paramsOfInterest; // avoid warning",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:77,Safety,avoid,avoid,77,"// data = data; // avoid warning; // paramsOfInterest = paramsOfInterest; // avoid warning",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:12,Testability,Test,TestStatistic,12,"/// Get the TestStatistic",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:37,Testability,test,test,37,"/// Get the Confidence level for the test",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:3,Testability,test,testStatistic,3,/* testStatistic */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:58,Testability,test,test,58,"/// specify the values of parameters used when evaluating test statistic",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:45,Availability,error,error,45,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:24,Testability,test,test,24,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:12,Testability,Test,TestStatistic,12,"/// Set the TestStatistic (want the argument to be a function of the data & parameter points",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:2,Testability,test,testStatistic,2,/*testStatistic*/,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:54,Integrability,interface,interface,54,"// A simple implementation of the DistributionCreator interface",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:5,Usability,simpl,simple,5,"// A simple implementation of the DistributionCreator interface",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h:121,Integrability,interface,interface,121,"/** \class DebuggingTestStat; \ingroup Roostats. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h:286,Testability,test,tests,286,"/** \class DebuggingTestStat; \ingroup Roostats. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h:72,Usability,simpl,simple,72,"/** \class DebuggingTestStat; \ingroup Roostats. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h:9,Integrability,interface,interface,9,"/// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h:35,Testability,test,test,35,"/// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h:18,Safety,avoid,avoid,18,"//data = data; // avoid warning; //paramsOfInterest = paramsOfInterest; //avoid warning",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h:74,Safety,avoid,avoid,74,"//data = data; // avoid warning; //paramsOfInterest = paramsOfInterest; //avoid warning",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h:50,Integrability,interface,interface,50,"// A concrete implementation of the TestStatistic interface, useful for debugging.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h:36,Testability,Test,TestStatistic,36,"// A concrete implementation of the TestStatistic interface, useful for debugging.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DebuggingTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DetailedOutputAggregator.h:100,Modifiability,variab,variable,100,"/// Translate the given fit result to a RooArgSet in a generic way.; /// Prefix is prepended to all variable names.; /// Note that the returned set is managed by the user and the user must; /// explicitly delete all the set content (the returned set does not own the content)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DetailedOutputAggregator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DetailedOutputAggregator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DetailedOutputAggregator.h:13,Modifiability,variab,variable,13,"/// For each variable in aset, prepend prefix to its name and add; /// to the internal store. Note this will not appear in the produced; /// dataset unless CommitSet is called.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/DetailedOutputAggregator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DetailedOutputAggregator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:9,Integrability,interface,interface,9,"/// Main interface to get a ConfInterval (will be a PointSetInterval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:49,Availability,error,error,49,"/// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:24,Testability,test,test,24,"/// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:37,Testability,test,test,37,"/// Get the Confidence level for the test",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:34,Testability,test,test,34,"/// User-defined set of points to test",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:34,Testability,test,test,34,"/// User-defined set of points to test",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:45,Availability,error,error,45,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:24,Testability,test,test,24,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:24,Testability,Test,TestStatSampler,24,"/// Returns instance of TestStatSampler. Use to change properties of; /// TestStatSampler, e.g. GetTestStatSampler.SetTestSize(double size);",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:74,Testability,Test,TestStatSampler,74,"/// Returns instance of TestStatSampler. Use to change properties of; /// TestStatSampler, e.g. GetTestStatSampler.SetTestSize(double size);",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:52,Availability,error,error,52,"///< size of the test (eg. specified rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:17,Testability,test,test,17,"///< size of the test (eg. specified rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:9,Testability,test,test,9,"///< the test statistic sampler",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:15,Performance,perform,perform,15,"///< points to perform the construction",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:28,Performance,perform,perform,28,"///< value of POI points to perform the construction",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:21,Energy Efficiency,adapt,adaptive,21,"///< controls use of adaptive sampling algorithm",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:21,Modifiability,adapt,adaptive,21,"///< controls use of adaptive sampling algorithm",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:27,Modifiability,variab,variable,27,"///< number of samples per variable",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h:3,Integrability,Interface,Interface,3,"// Interface for tools setting limits (producing confidence intervals)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FeldmanCousins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FeldmanCousins.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h:4,Modifiability,config,configure,4,"/// configure TestStatSampler for the Null run",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FrequentistCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h:14,Testability,Test,TestStatSampler,14,"/// configure TestStatSampler for the Null run",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FrequentistCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h:4,Modifiability,config,configure,4,"/// configure TestStatSampler for the Alt run",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FrequentistCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h:14,Testability,Test,TestStatSampler,14,"/// configure TestStatSampler for the Alt run",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FrequentistCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h:3,Energy Efficiency,adapt,adaptive,3,"// adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FrequentistCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h:3,Modifiability,adapt,adaptive,3,"// adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/FrequentistCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h:34,Deployability,configurat,configuration,34,/// Dump the Workspace content as configuration file; /* It needs some workspace object list or something..*/,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HLFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h:34,Modifiability,config,configuration,34,/// Dump the Workspace content as configuration file; /* It needs some workspace object list or something..*/,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HLFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h:31,Deployability,configurat,configuration,31,"// Dump the factory content as configuration file; /// Get the combined signal plus background pdf",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HLFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h:31,Modifiability,config,configuration,31,"// Dump the factory content as configuration file; /// Get the combined signal plus background pdf",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HLFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h:72,Modifiability,variab,variables,72,"// Get the category; /// Get the RooWorkspace containing the models and variables",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HLFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h:48,Deployability,configurat,configuration,48,"// Expose the internal Workspace; /// Process a configuration file",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HLFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h:48,Modifiability,config,configuration,48,"// Expose the internal Workspace; /// Process a configuration file",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HLFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h:3,Security,Expose,Expose,3,"// Expose the internal Workspace; /// Process a configuration file",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HLFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h:48,Modifiability,variab,variables,48,"///< The RooWorkspace containing the models and variables",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HLFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridCalculator.h:4,Modifiability,config,configure,4,"/// configure TestStatSampler for the Null run",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridCalculator.h:14,Testability,Test,TestStatSampler,14,"/// configure TestStatSampler for the Null run",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridCalculator.h:4,Modifiability,config,configure,4,"/// configure TestStatSampler for the Alt run",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridCalculator.h:14,Testability,Test,TestStatSampler,14,"/// configure TestStatSampler for the Alt run",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridCalculator.h:3,Energy Efficiency,adapt,adaptive,3,"// adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridCalculator.h:3,Modifiability,adapt,adaptive,3,"// adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h:16,Deployability,integrat,integration,16,"/// Get B histo integration extremes to obtain the requested area fraction; /// call delete [] res to release memory",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h:102,Deployability,release,release,102,"/// Get B histo integration extremes to obtain the requested area fraction; /// call delete [] res to release memory",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h:16,Integrability,integrat,integration,16,"/// Get B histo integration extremes to obtain the requested area fraction; /// call delete [] res to release memory",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h:17,Deployability,integrat,integration,17,"/// Get SB histo integration extremes to obtain the requested area fraction; /// call delete [] res to release memory",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h:103,Deployability,release,release,103,"/// Get SB histo integration extremes to obtain the requested area fraction; /// call delete [] res to release memory",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h:17,Integrability,integrat,integration,17,"/// Get SB histo integration extremes to obtain the requested area fraction; /// call delete [] res to release memory",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h:67,Deployability,release,release,67,"/// Get the ""effective sigmas"" of the histo, call delete [] res to release memory",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h:40,Testability,test,test,40,"///< The line for the data value of the test statistic",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h:8,Testability,test,test,8,"/// Get test statistics values for the sb model",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h:8,Testability,test,test,8,"/// Get test statistics values for the b model",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h:8,Testability,test,test,8,"/// Get test statistics value for data",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h:8,Availability,error,error,8,"/// The error on the ""confidence level"" of the null hypothesis",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h:8,Availability,error,error,8,"/// The error on the ""confidence level"" of the alternative hypothesis",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h:8,Availability,error,error,8,"/// The error on the ratio \f$CL_{s+b}/CL_{b}\f$",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h:12,Testability,test,test,12,"// results (test statistics) evaluated for data",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h:25,Testability,test,testStat,25,"// p-value for velues of testStat >= testStat_data (or testStat <= testStat_data)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h:55,Testability,test,testStat,55,"// p-value for velues of testStat >= testStat_data (or testStat <= testStat_data)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HybridResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:953,Deployability,integrat,integration,953,"/** \class HypoTestCalculator; \ingroup Roostats. HypoTestCalculator is an interface class for a tools which produce RooStats; HypoTestResults. The interface currently assumes that any hypothesis test; calculator can be configured by specifying:. - a model for the null,; - a model for the alternate,; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status), and; - a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will; return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:75,Integrability,interface,interface,75,"/** \class HypoTestCalculator; \ingroup Roostats. HypoTestCalculator is an interface class for a tools which produce RooStats; HypoTestResults. The interface currently assumes that any hypothesis test; calculator can be configured by specifying:. - a model for the null,; - a model for the alternate,; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status), and; - a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will; return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:148,Integrability,interface,interface,148,"/** \class HypoTestCalculator; \ingroup Roostats. HypoTestCalculator is an interface class for a tools which produce RooStats; HypoTestResults. The interface currently assumes that any hypothesis test; calculator can be configured by specifying:. - a model for the null,; - a model for the alternate,; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status), and; - a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will; return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:521,Integrability,interface,interface,521,"/** \class HypoTestCalculator; \ingroup Roostats. HypoTestCalculator is an interface class for a tools which produce RooStats; HypoTestResults. The interface currently assumes that any hypothesis test; calculator can be configured by specifying:. - a model for the null,; - a model for the alternate,; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status), and; - a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will; return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:637,Integrability,interface,interface,637,"/** \class HypoTestCalculator; \ingroup Roostats. HypoTestCalculator is an interface class for a tools which produce RooStats; HypoTestResults. The interface currently assumes that any hypothesis test; calculator can be configured by specifying:. - a model for the null,; - a model for the alternate,; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status), and; - a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will; return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:862,Integrability,interface,interface,862,"/** \class HypoTestCalculator; \ingroup Roostats. HypoTestCalculator is an interface class for a tools which produce RooStats; HypoTestResults. The interface currently assumes that any hypothesis test; calculator can be configured by specifying:. - a model for the null,; - a model for the alternate,; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status), and; - a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will; return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:953,Integrability,integrat,integration,953,"/** \class HypoTestCalculator; \ingroup Roostats. HypoTestCalculator is an interface class for a tools which produce RooStats; HypoTestResults. The interface currently assumes that any hypothesis test; calculator can be configured by specifying:. - a model for the null,; - a model for the alternate,; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status), and; - a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will; return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:1051,Integrability,interface,interface,1051,"/** \class HypoTestCalculator; \ingroup Roostats. HypoTestCalculator is an interface class for a tools which produce RooStats; HypoTestResults. The interface currently assumes that any hypothesis test; calculator can be configured by specifying:. - a model for the null,; - a model for the alternate,; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status), and; - a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will; return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:1087,Integrability,interface,interface,1087,"/** \class HypoTestCalculator; \ingroup Roostats. HypoTestCalculator is an interface class for a tools which produce RooStats; HypoTestResults. The interface currently assumes that any hypothesis test; calculator can be configured by specifying:. - a model for the null,; - a model for the alternate,; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status), and; - a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will; return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:220,Modifiability,config,configured,220,"/** \class HypoTestCalculator; \ingroup Roostats. HypoTestCalculator is an interface class for a tools which produce RooStats; HypoTestResults. The interface currently assumes that any hypothesis test; calculator can be configured by specifying:. - a model for the null,; - a model for the alternate,; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status), and; - a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will; return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:655,Modifiability,extend,extended,655,"/** \class HypoTestCalculator; \ingroup Roostats. HypoTestCalculator is an interface class for a tools which produce RooStats; HypoTestResults. The interface currently assumes that any hypothesis test; calculator can be configured by specifying:. - a model for the null,; - a model for the alternate,; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status), and; - a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will; return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:717,Modifiability,config,configuring,717,"/** \class HypoTestCalculator; \ingroup Roostats. HypoTestCalculator is an interface class for a tools which produce RooStats; HypoTestResults. The interface currently assumes that any hypothesis test; calculator can be configured by specifying:. - a model for the null,; - a model for the alternate,; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status), and; - a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will; return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:196,Testability,test,test,196,"/** \class HypoTestCalculator; \ingroup Roostats. HypoTestCalculator is an interface class for a tools which produce RooStats; HypoTestResults. The interface currently assumes that any hypothesis test; calculator can be configured by specifying:. - a model for the null,; - a model for the alternate,; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status), and; - a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will; return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:991,Testability,test,test-statistic,991,"/** \class HypoTestCalculator; \ingroup Roostats. HypoTestCalculator is an interface class for a tools which produce RooStats; HypoTestResults. The interface currently assumes that any hypothesis test; calculator can be configured by specifying:. - a model for the null,; - a model for the alternate,; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status), and; - a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will; return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:9,Integrability,interface,interface,9,"/// main interface to get a HypoTestResult, pure virtual",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:3,Integrability,Interface,Interface,3,"// Interface for tools doing hypothesis tests",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:40,Testability,test,tests,40,"// Interface for tools doing hypothesis tests",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculatorGeneric.h:46,Integrability,interface,interface,46,"/// inherited methods from HypoTestCalculator interface",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculatorGeneric.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculatorGeneric.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculatorGeneric.h:4,Modifiability,inherit,inherited,4,"/// inherited methods from HypoTestCalculator interface",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculatorGeneric.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculatorGeneric.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculatorGeneric.h:24,Testability,Test,TestStatSampler,24,"/// Returns instance of TestStatSampler. Use to change properties of; /// TestStatSampler, e.g. GetTestStatSampler.SetTestSize(double size);",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculatorGeneric.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculatorGeneric.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculatorGeneric.h:74,Testability,Test,TestStatSampler,74,"/// Returns instance of TestStatSampler. Use to change properties of; /// TestStatSampler, e.g. GetTestStatSampler.SetTestSize(double size);",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestCalculatorGeneric.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculatorGeneric.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:14,Performance,perform,perform,14,"/// Set up to perform a fixed scan.; /// \param[in] nBins Number of points to scan.; /// \param[in] xMin Lower limit of range to be scanned.; /// \param[in] xMax Upper limit of range to be scanned.; /// \param[in] scanLog Run in logarithmic steps along x.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:229,Testability,log,logarithmic,229,"/// Set up to perform a fixed scan.; /// \param[in] nBins Number of points to scan.; /// \param[in] xMin Lower limit of range to be scanned.; /// \param[in] xMax Upper limit of range to be scanned.; /// \param[in] scanLog Run in logarithmic steps along x.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:33,Energy Efficiency,adapt,adaptive,33,"/// Use automatic scanning, i.e. adaptive",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:33,Modifiability,adapt,adaptive,33,"/// Use automatic scanning, i.e. adaptive",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:215,Testability,log,logarithmic,215,"/// Run a fixed scan.; /// \param[in] nBins Number of points to scan.; /// \param[in] xMin Lower limit of range to be scanned.; /// \param[in] xMax Upper limit of range to be scanned.; /// \param[in] scanLog Run in logarithmic steps along x.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:60,Availability,error,error,60,"// not needed; /// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:39,Testability,test,test,39,"// not needed; /// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:49,Availability,error,error,49,"/// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:24,Testability,test,test,24,"/// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:37,Testability,test,test,37,"/// Get the Confidence level for the test",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:12,Testability,test,test,12,"/// get the test statistic",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:12,Testability,test,test,12,"/// set the test statistic",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:18,Availability,error,error,18,"/// set numerical error in test statistic evaluation (default is zero)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:27,Testability,test,test,27,"/// set numerical error in test statistic evaluation (default is zero)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:25,Performance,perform,performance,25,"///<! plot of limits; // performance counter: remember how many toys have been thrown",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:32,Modifiability,variab,variable,32,"///< pointer to the constrained variable",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterPlot.h:140,Integrability,depend,depending,140,"/// return a TGraphErrors with the obtained observed p-values; /// resultinf from the scan; /// By default (Option = """") return CLs or CLsb depending if the flag UseCLs is set; /// If Option = ""CLb"" return CLb plot; /// = ""CLs+b"" return CLs+b plot independently of the flag; /// = ""CLs"" return CLs plot independently of the flag",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverterPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterPlot.h:281,Energy Efficiency,green,green,281,"/// Make the expected plot and the bands; /// nsig1 and nsig2 indicates the n-sigma value for the bands; /// if nsig1 = 0 no band is computed (only expected value); /// if nsig2 > nsig1 (default is nsig1=1 and nsig2=2) the second band is also done.; /// The first band is drawn in green while the second in yellow; /// The plot (expected value + bands) is returned as a TMultiGraph object",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverterPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterPlot.h:13,Testability,test,test,13,"/// Plot the test statistic distributions",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverterPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h:37,Availability,error,error,37,"/// function to return the estimated error on the value of the confidence level for the i^th entry in the results",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverterResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h:45,Availability,error,error,45,"/// set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverterResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h:24,Testability,test,test,24,"/// set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverterResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h:28,Availability,error,error,28,"/// rough estimation of the error on the computed bound of the confidence interval; /// Estimate of lower limit error; ///function evaluates only a rough error on the lower limit. Be careful when using this estimation",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverterResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h:112,Availability,error,error,112,"/// rough estimation of the error on the computed bound of the confidence interval; /// Estimate of lower limit error; ///function evaluates only a rough error on the lower limit. Be careful when using this estimation",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverterResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h:154,Availability,error,error,154,"/// rough estimation of the error on the computed bound of the confidence interval; /// Estimate of lower limit error; ///function evaluates only a rough error on the lower limit. Be careful when using this estimation",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverterResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h:28,Availability,error,error,28,"/// Estimate of lower limit error; ///function evaluates only a rough error on the lower limit. Be careful when using this estimation",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverterResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h:70,Availability,error,error,70,"/// Estimate of lower limit error; ///function evaluates only a rough error on the lower limit. Be careful when using this estimation",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestInverterResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverterResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:20,Usability,simpl,simply,20,"/// \f$CL_{s}\f$ is simply \f$CL_{s+b}/CL_{b}\f$ (not a method, but a quantity)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:8,Availability,error,error,8,"/// The error on the ""confidence level"" of the null hypothesis",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:8,Availability,error,error,8,"/// The error on the ""confidence level"" of the alternative hypothesis",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:8,Availability,error,error,8,"/// The error on the ratio \f$CL_{s+b}/CL_{b}\f$",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:8,Availability,error,error,8,"/// The error on the Null p-value",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:8,Availability,error,error,8,"/// The error on the significance, computed from NullPValueError via error propagation",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:69,Availability,error,error,69,"/// The error on the significance, computed from NullPValueError via error propagation",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:5,Availability,error,error,5,"///< error of p-value for the null hypothesis (small number means disfavoured)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:5,Availability,error,error,5,"///< error of p-value for the alternate hypothesis (small number means disfavoured)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:19,Testability,test,test,19,"///< result of the test statistic evaluated on data",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:30,Testability,test,test,30,"///< for the case of multiple test statistics, holds all the results",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:51,Testability,test,test,51,"// Base class to represent results of a hypothesis test",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/HypoTestResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:468,Availability,error,error,468,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:910,Deployability,integrat,integration,910,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:75,Integrability,interface,interface,75,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:146,Integrability,interface,interface,146,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:367,Integrability,depend,depends,367,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:480,Integrability,interface,interface,480,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:596,Integrability,interface,interface,596,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:819,Integrability,interface,interface,819,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:910,Integrability,integrat,integration,910,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:1008,Integrability,interface,interface,1008,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:1044,Integrability,interface,interface,1044,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:211,Modifiability,config,configured,211,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:614,Modifiability,extend,extended,614,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:676,Modifiability,config,configuring,676,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:443,Testability,test,test,443,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:948,Testability,test,test-statistic,948,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:9,Integrability,interface,interface,9,"/// Main interface to get a ConfInterval, pure virtual",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:49,Availability,error,error,49,"/// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:24,Testability,test,test,24,"/// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:37,Testability,test,test,37,"/// Get the Confidence level for the test",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:45,Availability,error,error,45,"/// set the size of the test (rate of Type I error) ( e.g. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:24,Testability,test,test,24,"/// set the size of the test (rate of Type I error) ( e.g. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:3,Integrability,Interface,Interface,3,"// Interface for tools setting limits (producing confidence intervals)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/IntervalCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodInterval.h:332,Availability,error,error,332,"/// return the 2D-contour points for the given subset of parameters; /// by default make the contour using 30 points. The User has to preallocate the x and y array which will return; /// the set of x and y points defining the contour.; /// The return value of the function specify the number of contour point found.; /// In case of error a zero is returned",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/LikelihoodInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodInterval.h:23,Testability,log,log-likelihood,23,"/// return the profile log-likelihood ratio function",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/LikelihoodInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodInterval.h:14,Performance,cache,cached,14,"/// reset the cached limit values",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/LikelihoodInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodInterval.h:14,Performance,cache,cached,14,"///< map with cached lower bound values",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/LikelihoodInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodInterval.h:14,Performance,cache,cached,14,"///< map with cached upper bound values",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/LikelihoodInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodIntervalPlot.h:111,Testability,Log,Log-Likelihood,111,"/// draw the likelihood interval or contour; /// for the 1D case a RooPlot is drawn by default of the profiled Log-Likelihood ratio; /// if option ""TF1"" is used the objects are drawn using a TF1 scanning the LL function in a; /// grid of the set points (by default; /// the TF1 can be customized by setting maximum and the number of points to scan",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/LikelihoodIntervalPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodIntervalPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodIntervalPlot.h:51,Integrability,depend,depends,51,"///< number of points used to scan the PL, default depends if 1D or 2D",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/LikelihoodIntervalPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodIntervalPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodIntervalPlot.h:55,Modifiability,variab,variable,55,"///< function maximum; // ranges for plots, default is variable range",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/LikelihoodIntervalPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/LikelihoodIntervalPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MarkovChain.h:160,Modifiability,variab,variables,160,"/// get this MarkovChain as a RooDataHist whose entries contain the values; /// of whichVars. Call with whichVars = nullptr (default) to get values of; /// all variables (including NLL value and weight);; /// Note: caller owns the returned data hist",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MarkovChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MarkovChain.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MarkovChain.h:27,Modifiability,variab,variable,27,"/// get a clone of the NLL variable",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MarkovChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MarkovChain.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MarkovChain.h:30,Modifiability,variab,variable,30,"/// get a clone of the weight variable",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MarkovChain.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MarkovChain.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MaxLikelihoodEstimateTestStat.h:92,Testability,Test,TestStatistic,92,/** \class MaxLikelihoodEstimateTestStat; \ingroup Roostats; MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood; estimate of a specified parameter.; */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MaxLikelihoodEstimateTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MaxLikelihoodEstimateTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MaxLikelihoodEstimateTestStat.h:60,Integrability,message,messages,60,"/*; // this is more straight forward, but produces a lot of messages; RooFitResult* res = fPdf.fitTo(data, RooFit::CloneData(false),RooFit::Minos(0),RooFit::Hesse(false), RooFit::Save(1),RooFit::PrintLevel(-1),RooFit::PrintEvalErrors(0));; RooRealVar* mle = (RooRealVar*) res->floatParsFinal().find(fParameter.GetName());; double ret = mle->getVal();; delete res;; return ret;; */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MaxLikelihoodEstimateTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MaxLikelihoodEstimateTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MaxLikelihoodEstimateTestStat.h:9,Performance,optimiz,optimizeConst,9,"// minim.optimizeConst(true);",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MaxLikelihoodEstimateTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MaxLikelihoodEstimateTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:30,Deployability,configurat,configuration,30,"/// Constructor for automatic configuration with basic settings and a; /// ModelConfig. Uses a UniformProposal, 10,000 iterations, 40 burn in; /// steps, 50 bins for each RooRealVar, determines interval by histogram,; /// and finds a 95% confidence interval. Any of these basic settings can; /// be overridden by calling one of the Set...() methods.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:30,Modifiability,config,configuration,30,"/// Constructor for automatic configuration with basic settings and a; /// ModelConfig. Uses a UniformProposal, 10,000 iterations, 40 burn in; /// steps, 50 bins for each RooRealVar, determines interval by histogram,; /// and finds a 95% confidence interval. Any of these basic settings can; /// be overridden by calling one of the Set...() methods.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:9,Integrability,interface,interface,9,"/// Main interface to get a ConfInterval",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:49,Availability,error,error,49,"/// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:24,Testability,test,test,24,"/// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:37,Testability,test,test,37,"/// Get the Confidence level for the test",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:45,Availability,error,error,45,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:24,Testability,test,test,24,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:14,Modifiability,variab,variables,14,"/// set which variables to put on each axis",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:221,Availability,error,error,221,"/// Set the left side tail fraction. This will automatically configure the; /// MCMCInterval to find a tail-fraction interval.; /// Note: that `a' must be in the range 0 <= a <= 1; /// or the user will be notified of the error",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:61,Modifiability,config,configure,61,"/// Set the left side tail fraction. This will automatically configure the; /// MCMCInterval to find a tail-fraction interval.; /// Note: that `a' must be in the range 0 <= a <= 1; /// or the user will be notified of the error",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:438,Deployability,integrat,integration,438,"/// Set the desired level of confidence-level accuracy for Keys interval; /// determination.; //; /// When determining the cutoff PDF height that gives the; /// desired confidence level (C_d), the algorithm will consider acceptable; /// any found confidence level c such that Abs(c - C_d) < epsilon.; ///; /// Any value of this ""epsilon"" > 0 is considered acceptable, though it is; /// advisable to not use a value too small, because the integration of the; /// Keys PDF sometimes does not have extremely high accuracy.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:438,Integrability,integrat,integration,438,"/// Set the desired level of confidence-level accuracy for Keys interval; /// determination.; //; /// When determining the cutoff PDF height that gives the; /// desired confidence level (C_d), the algorithm will consider acceptable; /// any found confidence level c such that Abs(c - C_d) < epsilon.; ///; /// Any value of this ""epsilon"" > 0 is considered acceptable, though it is; /// advisable to not use a value too small, because the integration of the; /// Keys PDF sometimes does not have extremely high accuracy.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:417,Availability,error,error,417,"/// When the shortest interval using Keys PDF could not be found to have; /// the desired confidence level +/- the accuracy (see; /// SetKeysConfidenceAccuracy()), the interval determination algorithm; /// will have to terminate with an unsatisfactory confidence level when; /// the bottom and top of the cutoff search range are very close to being; /// equal. This scenario comes into play when there seems to be an error; /// in the accuracy of the Keys PDF integration, so the search range; /// continues to shrink without converging to a cutoff value that will; /// give an acceptable confidence level. To choose how small to allow the; /// search range to be before terminating, set the fraction delta such; /// that the search will terminate when topCutoff (a) and bottomCutoff (b); /// satisfy this condition:; ///; /// std::abs(a - b) < std::abs(delta * (a + b)/2)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:460,Deployability,integrat,integration,460,"/// When the shortest interval using Keys PDF could not be found to have; /// the desired confidence level +/- the accuracy (see; /// SetKeysConfidenceAccuracy()), the interval determination algorithm; /// will have to terminate with an unsatisfactory confidence level when; /// the bottom and top of the cutoff search range are very close to being; /// equal. This scenario comes into play when there seems to be an error; /// in the accuracy of the Keys PDF integration, so the search range; /// continues to shrink without converging to a cutoff value that will; /// give an acceptable confidence level. To choose how small to allow the; /// search range to be before terminating, set the fraction delta such; /// that the search will terminate when topCutoff (a) and bottomCutoff (b); /// satisfy this condition:; ///; /// std::abs(a - b) < std::abs(delta * (a + b)/2)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:460,Integrability,integrat,integration,460,"/// When the shortest interval using Keys PDF could not be found to have; /// the desired confidence level +/- the accuracy (see; /// SetKeysConfidenceAccuracy()), the interval determination algorithm; /// will have to terminate with an unsatisfactory confidence level when; /// the bottom and top of the cutoff search range are very close to being; /// equal. This scenario comes into play when there seems to be an error; /// in the accuracy of the Keys PDF integration, so the search range; /// continues to shrink without converging to a cutoff value that will; /// give an acceptable confidence level. To choose how small to allow the; /// search range to be before terminating, set the fraction delta such; /// that the search will terminate when topCutoff (a) and bottomCutoff (b); /// satisfy this condition:; ///; /// std::abs(a - b) < std::abs(delta * (a + b)/2)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:52,Availability,error,error,52,"///< size of the test (eg. specified rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:17,Testability,test,test,17,"///< size of the test (eg. specified rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:32,Deployability,integrat,integration,32,"///< Proposal function for MCMC integration",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:32,Integrability,integrat,integration,32,"///< Proposal function for MCMC integration",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:11,Modifiability,variab,variables,11,"///< which variables to put on each axis",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:16,Availability,error,error,16,"///< acceptable error for Keys interval determination",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:16,Availability,error,error,16,"///< acceptable error for Keys cutoffs being equal; ///< topCutoff (a) considered == bottomCutoff (b) iff; ///< (std::abs(a - b) < std::abs(fDelta * (a + b)/2));; ///< Theoretically, the Abs is not needed here, but; ///< floating-point arithmetic does not always work; ///< perfectly, and the Abs doesn't hurt",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h:27,Modifiability,variab,variable,27,"/// Get a clone of the NLL variable from the markov chain",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h:30,Modifiability,variab,variable,30,"/// Get a clone of the weight variable from the markov chain",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h:32,Availability,error,error,32,"/// set the acceptable level or error for Keys interval determination",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h:67,Security,expose,exposed,67,"/// kbelasco: The inner-workings of the class really should not be exposed; /// like this in a comment, but it seems to be the only way to give; /// the user any control over this process, if they desire it; ///; /// Set the fraction delta such that; /// topCutoff (a) is considered == bottomCutoff (b) iff; /// (std::abs(a - b) < std::abs(fDelta * (a + b)/2)); /// when determining the confidence interval by Keys",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h:32,Deployability,integrat,integrating,32,"///< cutoff variable to use for integrating keys pdf",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h:32,Integrability,integrat,integrating,32,"///< cutoff variable to use for integrating keys pdf",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h:12,Modifiability,variab,variable,12,"///< cutoff variable to use for integrating keys pdf",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h:15,Modifiability,variab,variables,15,"///< number of variables",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h:16,Availability,error,error,16,"///< acceptable error for Keys interval determination",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MCMCInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MetropolisHastings.h:32,Deployability,integrat,integration,32,"///< Proposal function for MCMC integration",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MetropolisHastings.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MetropolisHastings.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MetropolisHastings.h:32,Integrability,integrat,integration,32,"///< Proposal function for MCMC integration",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MetropolisHastings.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MetropolisHastings.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MetropolisHastings.h:45,Testability,log,log,45,"///< whether the likelihood is on a regular, log, (or other) scale; // whether we should take the step, based on the value of d, fSign, fType",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MetropolisHastings.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MetropolisHastings.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h:103,Integrability,interface,interface,103,/** \class MinNLLTestStat; \ingroup Roostats. MinNLLTestStat is an implementation of the TestStatistic interface that; calculates the minimum value of the negative log likelihood; function and returns it as a test statistic.; Internally it operates by delegating to a MinNLLTestStat object. */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MinNLLTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h:89,Testability,Test,TestStatistic,89,/** \class MinNLLTestStat; \ingroup Roostats. MinNLLTestStat is an implementation of the TestStatistic interface that; calculates the minimum value of the negative log likelihood; function and returns it as a test statistic.; Internally it operates by delegating to a MinNLLTestStat object. */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MinNLLTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h:164,Testability,log,log,164,/** \class MinNLLTestStat; \ingroup Roostats. MinNLLTestStat is an implementation of the TestStatistic interface that; calculates the minimum value of the negative log likelihood; function and returns it as a test statistic.; Internally it operates by delegating to a MinNLLTestStat object. */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MinNLLTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h:209,Testability,test,test,209,/** \class MinNLLTestStat; \ingroup Roostats. MinNLLTestStat is an implementation of the TestStatistic interface that; calculates the minimum value of the negative log likelihood; function and returns it as a test statistic.; Internally it operates by delegating to a MinNLLTestStat object. */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MinNLLTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h:8,Integrability,interface,interface,8,"// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MinNLLTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h:34,Testability,test,test,34,"// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MinNLLTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h:288,Availability,error,error,288,"// Returns detailed output. The value returned by this function is updated after each call to Evaluate().; // The returned RooArgSet contains the following:; //; // - the minimum nll, fitstatus and convergence quality for each fit </li>; // - for all non-constant parameters their value, error and pull </li>",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MinNLLTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h:67,Deployability,update,updated,67,"// Returns detailed output. The value returned by this function is updated after each call to Evaluate().; // The returned RooArgSet contains the following:; //; // - the minimum nll, fitstatus and convergence quality for each fit </li>; // - for all non-constant parameters their value, error and pull </li>",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MinNLLTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h:35,Testability,test,test,35,"// implements the minimum NLL as a test statistic to be used with several tools",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/MinNLLTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:9,Integrability,interface,interface,9,"/// Main interface to get a ConfInterval (will be a PointSetInterval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:19,Integrability,interface,interface,19,"/// in addition to interface we also need:; /// Set the TestStatSampler (eg. ToyMC or FFT, includes choice of TestStatistic)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:56,Testability,Test,TestStatSampler,56,"/// in addition to interface we also need:; /// Set the TestStatSampler (eg. ToyMC or FFT, includes choice of TestStatistic)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:110,Testability,Test,TestStatistic,110,"/// in addition to interface we also need:; /// Set the TestStatSampler (eg. ToyMC or FFT, includes choice of TestStatistic)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:162,Integrability,depend,depends,162,"/// fLeftSideTailFraction*fSize defines lower edge of acceptance region.; /// Unified limits use 0, central limits use 0.5,; /// for upper/lower limits it is 0/1 depends on sign of test statistic w.r.t. parameter",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:181,Testability,test,test,181,"/// fLeftSideTailFraction*fSize defines lower edge of acceptance region.; /// Unified limits use 0, central limits use 0.5,; /// for upper/lower limits it is 0/1 depends on sign of test statistic w.r.t. parameter",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:34,Testability,test,test,34,"/// User-defined set of points to test",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:451,Availability,error,error,451,"/// This class can make regularly spaced scans based on range stored in RooRealVars.; /// Choose number of steps for a rastor scan (common for each dimension); /// void SetNumSteps(Int_t);; /// This class can make regularly spaced scans based on range stored in RooRealVars.; /// Choose number of steps for a rastor scan (specific for each dimension); /// void SetNumSteps(std::map<RooAbsArg, Int_t>); /// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:426,Testability,test,test,426,"/// This class can make regularly spaced scans based on range stored in RooRealVars.; /// Choose number of steps for a rastor scan (common for each dimension); /// void SetNumSteps(Int_t);; /// This class can make regularly spaced scans based on range stored in RooRealVars.; /// Choose number of steps for a rastor scan (specific for each dimension); /// void SetNumSteps(std::map<RooAbsArg, Int_t>); /// Get the size of the test (eg. rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:37,Testability,test,test,37,"/// Get the Confidence level for the test",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:45,Availability,error,error,45,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:24,Testability,test,test,24,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:4,Energy Efficiency,adapt,adaptive,4,"/// adaptive sampling algorithm to speed up interval calculation",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:4,Modifiability,adapt,adaptive,4,"/// adaptive sampling algorithm to speed up interval calculation",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:24,Testability,Test,TestStatSampler,24,"/// Returns instance of TestStatSampler. Use to change properties of; /// TestStatSampler, e.g. GetTestStatSampler.SetTestSize(double size);",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:74,Testability,Test,TestStatSampler,74,"/// Returns instance of TestStatSampler. Use to change properties of; /// TestStatSampler, e.g. GetTestStatSampler.SetTestSize(double size);",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:52,Availability,error,error,52,"///< size of the test (eg. specified rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:17,Testability,test,test,17,"///< size of the test (eg. specified rate of Type I error)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:21,Energy Efficiency,adapt,adaptive,21,"///< controls use of adaptive sampling algorithm",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:21,Modifiability,adapt,adaptive,21,"///< controls use of adaptive sampling algorithm",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h:5,Integrability,Interface,Interface,5,"///< Interface for tools setting limits (producing confidence intervals)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NeymanConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NeymanConstruction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumberCountingUtils.h:269,Testability,test,test,269,"/*! \namespace NumberCountingUtils; \brief RooStats standalone utilities. These are RooStats standalone utilities; that calculate the p-value or Z value (eg. significance in; 1-sided Gaussian standard deviations) for a number counting experiment.; This is a hypothesis test between background only and signal-plus-background.; The background estimate has uncertainty derived from an auxiliary or sideband; measurement. This is based on code and comments from Bob Cousins; and on the following papers:. - Evaluation of three methods for calculating statistical significance when incorporating a; systematic uncertainty into a test of the background-only hypothesis for a Poisson process<br>; Authors: Robert D. Cousins, James T. Linnemann, Jordan Tucker<br>; http://arxiv.org/abs/physics/0702156<br>; NIM A 595 (2008) 480--501<br>. - Statistical Challenges for Searches for New Physics at the LHC<br>; Authors: Kyle Cranmer<br>; http://arxiv.org/abs/physics/0511028. - Measures of Significance in HEP and Astrophysics<br>; Authors: J. T. Linnemann<br>; http://arxiv.org/abs/physics/0312059. The problem is treated in a fully frequentist fashion by; interpreting the relative background uncertainty as; being due to an auxiliary or sideband observation; that is also Poisson distributed with only background.; Finally, one considers the test as a ratio of Poisson means; where an interval is well known based on the conditioning on the total; number of events and the binomial distribution. In short, this is an exact frequentist solution to the problem of; a main measurement x distributed as a Poisson around s+b and a sideband or; auxiliary measurement y distributed as a Poisson around tau*b. Eg. \f[ L(x,y|s,b,\tau) = Pois(x|s+b) Pois(y|\tau b) \f]. ```; Naming conventions:; Exp = Expected; Obs = Observed; P = p-value; Z = Z-value or significance in sigma (one-sided convention); ```; */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NumberCountingUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumberCountingUtils.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumberCountingUtils.h:625,Testability,test,test,625,"/*! \namespace NumberCountingUtils; \brief RooStats standalone utilities. These are RooStats standalone utilities; that calculate the p-value or Z value (eg. significance in; 1-sided Gaussian standard deviations) for a number counting experiment.; This is a hypothesis test between background only and signal-plus-background.; The background estimate has uncertainty derived from an auxiliary or sideband; measurement. This is based on code and comments from Bob Cousins; and on the following papers:. - Evaluation of three methods for calculating statistical significance when incorporating a; systematic uncertainty into a test of the background-only hypothesis for a Poisson process<br>; Authors: Robert D. Cousins, James T. Linnemann, Jordan Tucker<br>; http://arxiv.org/abs/physics/0702156<br>; NIM A 595 (2008) 480--501<br>. - Statistical Challenges for Searches for New Physics at the LHC<br>; Authors: Kyle Cranmer<br>; http://arxiv.org/abs/physics/0511028. - Measures of Significance in HEP and Astrophysics<br>; Authors: J. T. Linnemann<br>; http://arxiv.org/abs/physics/0312059. The problem is treated in a fully frequentist fashion by; interpreting the relative background uncertainty as; being due to an auxiliary or sideband observation; that is also Poisson distributed with only background.; Finally, one considers the test as a ratio of Poisson means; where an interval is well known based on the conditioning on the total; number of events and the binomial distribution. In short, this is an exact frequentist solution to the problem of; a main measurement x distributed as a Poisson around s+b and a sideband or; auxiliary measurement y distributed as a Poisson around tau*b. Eg. \f[ L(x,y|s,b,\tau) = Pois(x|s+b) Pois(y|\tau b) \f]. ```; Naming conventions:; Exp = Expected; Obs = Observed; P = p-value; Z = Z-value or significance in sigma (one-sided convention); ```; */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NumberCountingUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumberCountingUtils.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumberCountingUtils.h:1335,Testability,test,test,1335,"/*! \namespace NumberCountingUtils; \brief RooStats standalone utilities. These are RooStats standalone utilities; that calculate the p-value or Z value (eg. significance in; 1-sided Gaussian standard deviations) for a number counting experiment.; This is a hypothesis test between background only and signal-plus-background.; The background estimate has uncertainty derived from an auxiliary or sideband; measurement. This is based on code and comments from Bob Cousins; and on the following papers:. - Evaluation of three methods for calculating statistical significance when incorporating a; systematic uncertainty into a test of the background-only hypothesis for a Poisson process<br>; Authors: Robert D. Cousins, James T. Linnemann, Jordan Tucker<br>; http://arxiv.org/abs/physics/0702156<br>; NIM A 595 (2008) 480--501<br>. - Statistical Challenges for Searches for New Physics at the LHC<br>; Authors: Kyle Cranmer<br>; http://arxiv.org/abs/physics/0511028. - Measures of Significance in HEP and Astrophysics<br>; Authors: J. T. Linnemann<br>; http://arxiv.org/abs/physics/0312059. The problem is treated in a fully frequentist fashion by; interpreting the relative background uncertainty as; being due to an auxiliary or sideband observation; that is also Poisson distributed with only background.; Finally, one considers the test as a ratio of Poisson means; where an interval is well known based on the conditioning on the total; number of events and the binomial distribution. In short, this is an exact frequentist solution to the problem of; a main measurement x distributed as a Poisson around s+b and a sideband or; auxiliary measurement y distributed as a Poisson around tau*b. Eg. \f[ L(x,y|s,b,\tau) = Pois(x|s+b) Pois(y|\tau b) \f]. ```; Naming conventions:; Exp = Expected; Obs = Observed; P = p-value; Z = Z-value or significance in sigma (one-sided convention); ```; */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NumberCountingUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumberCountingUtils.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h:71,Integrability,interface,interface,71,/**. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. \ingroup Roostats; */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NumEventsTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h:57,Testability,Test,TestStatistic,57,/**. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. \ingroup Roostats; */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NumEventsTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h:28,Usability,simpl,simple,28,/**. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. \ingroup Roostats; */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NumEventsTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h:90,Usability,simpl,simple,90,/**. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. \ingroup Roostats; */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NumEventsTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h:142,Usability,simpl,simple,142,/**. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. \ingroup Roostats; */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NumEventsTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h:8,Integrability,interface,interface,8,"// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NumEventsTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h:34,Testability,test,test,34,"// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NumEventsTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h:73,Modifiability,extend,extended,73,"// if no pdf is given in the constructor, we assume by default it can be extended",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NumEventsTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h:41,Modifiability,extend,extended,41,"// data is not weighted as pdf cannot be extended",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NumEventsTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h:11,Testability,Test,TestStatistic,11,"// Get the TestStatistic",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/NumEventsTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h:183,Deployability,update,update,183,"/// specify a mapping between a parameter of the proposal function and; /// a parameter of interest. this mapping is used to set the value of; /// proposalParam equal to the value of update to determine the; /// proposal function.; /// proposalParam is a parameter of the proposal function that must; /// be set to the value of update (from the current point) in order to; /// propose a new point.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/PdfProposal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h:328,Deployability,update,update,328,"/// specify a mapping between a parameter of the proposal function and; /// a parameter of interest. this mapping is used to set the value of; /// proposalParam equal to the value of update to determine the; /// proposal function.; /// proposalParam is a parameter of the proposal function that must; /// be set to the value of update (from the current point) in order to; /// propose a new point.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/PdfProposal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h:28,Deployability,update,update,28,"/// map of values in pdf to update",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/PdfProposal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h:24,Performance,cache,cached,24,"/// our position in the cached proposal data set",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/PdfProposal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h:8,Performance,cache,cached,8,"/// the cached proposal data set",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/PdfProposal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h:44,Deployability,update,updates,44,"/// pointers to master variables needed for updates",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/PdfProposal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h:23,Modifiability,variab,variables,23,"/// pointers to master variables needed for updates",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/PdfProposal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h:4,Integrability,Interface,Interface,4,"/// Interface for tools setting limits (producing confidence intervals)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/PdfProposal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PdfProposal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PointSetInterval.h:47,Usability,simpl,simple,47,"// Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/PointSetInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/PointSetInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h:319,Performance,perform,performing,319,"/// Constructor from data, from a full model pdf describing both parameter of interest and nuisance parameters; /// and from the set specifying the parameter of interest (POI).; /// There is no need to specify the nuisance parameters since they are all other parameters of the model.; /// When using the calculator for performing an hypothesis test one needs to provide also a snapshot (a copy); /// defining the null parameters and their value. There is no need to pass the alternate parameters. These; /// will be obtained by the value maximizing the likelihood function",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h:344,Testability,test,test,344,"/// Constructor from data, from a full model pdf describing both parameter of interest and nuisance parameters; /// and from the set specifying the parameter of interest (POI).; /// There is no need to specify the nuisance parameters since they are all other parameters of the model.; /// When using the calculator for performing an hypothesis test one needs to provide also a snapshot (a copy); /// defining the null parameters and their value. There is no need to pass the alternate parameters. These; /// will be obtained by the value maximizing the likelihood function",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h:38,Deployability,configurat,configuration,38,"/// Constructor from data and a model configuration; /// If the ModelConfig defines a prior pdf for any of the parameters those will be included as constrained terms in the; /// likelihood function",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h:38,Modifiability,config,configuration,38,"/// Constructor from data and a model configuration; /// If the ModelConfig defines a prior pdf for any of the parameters those will be included as constrained terms in the; /// likelihood function",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h:68,Performance,perform,performed,68,"/// Return a likelihood interval. A global fit to the likelihood is performed and; /// the interval is constructed using the profile likelihood ratio function of the POI.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h:26,Testability,test,test,26,"/// Return the hypothesis test result obtained from the likelihood ratio of the; /// maximum likelihood value with the null parameters fixed to their values, with respect to keeping all parameters; /// floating (global maximum likelihood value).",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h:4,Usability,clear,clear,4,"/// clear internal fit result",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h:4,Performance,perform,perform,4,"/// perform a global fit",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h:17,Availability,toler,tolerance,17,"// avoid default tolerance to be too small (1. is default in RooMinimizer)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h:3,Safety,avoid,avoid,3,"// avoid default tolerance to be too small (1. is default in RooMinimizer)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h:9,Integrability,interface,interface,9,"/// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h:35,Testability,test,test,35,"/// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h:303,Availability,error,error,303,"/// Returns detailed output. The value returned by this function is updated after each call to Evaluate().; /// The returned RooArgSet contains the following:; ///; /// - the minimum nll, fitstatus and convergence quality for each fit; /// - for each fit and for each non-constant parameter, the value, error and pull of the parameter are stored; ///",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h:68,Deployability,update,updated,68,"/// Returns detailed output. The value returned by this function is updated after each call to Evaluate().; /// The returned RooArgSet contains the following:; ///; /// - the minimum nll, fitstatus and convergence quality for each fit; /// - for each fit and for each non-constant parameter, the value, error and pull of the parameter are stored; ///",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h:48,Testability,test,test,48,"// implements the profile likelihood ratio as a test statistic to be used with several tools",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h:49,Deployability,configurat,configuration,49,"/** \class ProofConfig; \ingroup Roostats. Holds configuration options for proof and proof-lite. This class will be expanded in the future to hold more specific configuration; options for the tools in RooStats. Access to TProof::Mgr for configuration is still possible as usual; (e.g. to set Root Version to be used on workers). You can do:. ~~~ {.cpp}; TProof::Mgr(""my.server.url"")->ShowROOTVersions(); TProof::Mgr(""my.server.url"")->SetROOTVersion(""v5-27-06_dbg""); ~~~. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProofConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h:161,Deployability,configurat,configuration,161,"/** \class ProofConfig; \ingroup Roostats. Holds configuration options for proof and proof-lite. This class will be expanded in the future to hold more specific configuration; options for the tools in RooStats. Access to TProof::Mgr for configuration is still possible as usual; (e.g. to set Root Version to be used on workers). You can do:. ~~~ {.cpp}; TProof::Mgr(""my.server.url"")->ShowROOTVersions(); TProof::Mgr(""my.server.url"")->SetROOTVersion(""v5-27-06_dbg""); ~~~. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProofConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h:237,Deployability,configurat,configuration,237,"/** \class ProofConfig; \ingroup Roostats. Holds configuration options for proof and proof-lite. This class will be expanded in the future to hold more specific configuration; options for the tools in RooStats. Access to TProof::Mgr for configuration is still possible as usual; (e.g. to set Root Version to be used on workers). You can do:. ~~~ {.cpp}; TProof::Mgr(""my.server.url"")->ShowROOTVersions(); TProof::Mgr(""my.server.url"")->SetROOTVersion(""v5-27-06_dbg""); ~~~. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProofConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h:49,Modifiability,config,configuration,49,"/** \class ProofConfig; \ingroup Roostats. Holds configuration options for proof and proof-lite. This class will be expanded in the future to hold more specific configuration; options for the tools in RooStats. Access to TProof::Mgr for configuration is still possible as usual; (e.g. to set Root Version to be used on workers). You can do:. ~~~ {.cpp}; TProof::Mgr(""my.server.url"")->ShowROOTVersions(); TProof::Mgr(""my.server.url"")->SetROOTVersion(""v5-27-06_dbg""); ~~~. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProofConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h:161,Modifiability,config,configuration,161,"/** \class ProofConfig; \ingroup Roostats. Holds configuration options for proof and proof-lite. This class will be expanded in the future to hold more specific configuration; options for the tools in RooStats. Access to TProof::Mgr for configuration is still possible as usual; (e.g. to set Root Version to be used on workers). You can do:. ~~~ {.cpp}; TProof::Mgr(""my.server.url"")->ShowROOTVersions(); TProof::Mgr(""my.server.url"")->SetROOTVersion(""v5-27-06_dbg""); ~~~. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProofConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h:237,Modifiability,config,configuration,237,"/** \class ProofConfig; \ingroup Roostats. Holds configuration options for proof and proof-lite. This class will be expanded in the future to hold more specific configuration; options for the tools in RooStats. Access to TProof::Mgr for configuration is still possible as usual; (e.g. to set Root Version to be used on workers). You can do:. ~~~ {.cpp}; TProof::Mgr(""my.server.url"")->ShowROOTVersions(); TProof::Mgr(""my.server.url"")->SetROOTVersion(""v5-27-06_dbg""); ~~~. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProofConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h:211,Security,Access,Access,211,"/** \class ProofConfig; \ingroup Roostats. Holds configuration options for proof and proof-lite. This class will be expanded in the future to hold more specific configuration; options for the tools in RooStats. Access to TProof::Mgr for configuration is still possible as usual; (e.g. to set Root Version to be used on workers). You can do:. ~~~ {.cpp}; TProof::Mgr(""my.server.url"")->ShowROOTVersions(); TProof::Mgr(""my.server.url"")->SetROOTVersion(""v5-27-06_dbg""); ~~~. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProofConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h:4,Modifiability,config,configure,4,"/// configure proof with number of experiments and host session; /// in case of Prooflite, it is better to define the number of workers as ""worker=n"" in the host string",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProofConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h:51,Integrability,interface,interface,51,"// get the default value of the machine - use CINT interface until we have a poper PROOF interface that we can call",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProofConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h:89,Integrability,interface,interface,89,"// get the default value of the machine - use CINT interface until we have a poper PROOF interface that we can call",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProofConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h:3,Deployability,Configurat,Configuration,3,"// Configuration options for proof.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProofConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h:3,Modifiability,Config,Configuration,3,"// Configuration options for proof.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProofConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProposalFunction.h:71,Integrability,interface,interface,71,"/** \class ProposalFunction; \ingroup Roostats; ProposalFunction is an interface for all proposal functions that would be used; with a Markov Chain Monte Carlo algorithm.; Given a current point in the parameter space it proposes a new point.; Proposal functions may or may not be symmetric, in the sense that the; probability to propose X1 given we are at X2; need not be the same as the probability to propose X2 given that we are at X1.; In this case, the IsSymmetric method; should return false, and the Metropolis algorithm will need to take into account; the proposal density to maintain detailed balance.; */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProposalFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProposalFunction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProposalFunction.h:4,Integrability,Interface,Interface,4,"/// Interface for the proposal function used with Markov Chain Monte Carlo",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProposalFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProposalFunction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProposalHelper.h:62,Modifiability,variab,variable,62,"/// set what divisor we will use when dividing the range of a variable to; /// determine the width of the proposal function for each dimension; /// e.g. divisor = 6 for sigma = 1/6th",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProposalHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProposalHelper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProposalHelper.h:41,Modifiability,variab,variable,41,"///< range divisor to get sigma for each variable",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProposalHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProposalHelper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProposalHelper.h:20,Deployability,update,updates,20,"///< whether to set updates for proposal params in PdfProposal",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ProposalHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProposalHelper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h:13,Testability,log,logL,13,"/// returns -logL(poi, conditional MLE of nuisance params); /// it does not subtract off the global MLE; /// because nuisance parameters of null and alternate may not; /// be the same.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h:338,Availability,error,error,338,"/// Returns detailed output. The value returned by this function is updated after each call to Evaluate().; /// The returned RooArgSet contains the following for the alternative and null hypotheses:; /// - the minimum nll, fitstatus and convergence quality for each fit; /// - for each fit and for each non-constant parameter, the value, error and pull of the parameter are stored",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h:68,Deployability,update,updated,68,"/// Returns detailed output. The value returned by this function is updated after each call to Evaluate().; /// The returned RooArgSet contains the following for the alternative and null hypotheses:; /// - the minimum nll, fitstatus and convergence quality for each fit; /// - for each fit and for each non-constant parameter, the value, error and pull of the parameter are stored",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h:50,Testability,test,test,50,"// implements the ratio of profiled likelihood as test statistic",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h:13,Availability,error,error,13,"///< Use the error wall RooFit::EvalErrorWall to drive the fitter away from disallowed parameter values.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/RooStatsUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h:122,Availability,error,error,122,"/// Retrieve the config object which can be used to set flags for things like offsetting the likelihood; /// or using the error wall for the minimiser.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/RooStatsUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h:17,Modifiability,config,config,17,"/// Retrieve the config object which can be used to set flags for things like offsetting the likelihood; /// or using the error wall for the minimiser.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/RooStatsUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h:32,Modifiability,variab,variable,32,"/// utility function to set all variable constant in a collection; /// (from G. Petrucciani)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/RooStatsUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h:18,Safety,avoid,avoid,18,"// repeat loop to avoid calling isConstant for nothing",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/RooStatsUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h:21,Modifiability,variab,variables,21,"// exclude constants variables",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/RooStatsUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h:69,Performance,perform,performing,69,"/// function to set a global flag in RooStats to use NLL offset when performing nll computations; /// Note that not all ROoStats tools implement this capabilities",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/RooStatsUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistPlot.h:87,Security,Access,Access,87,"/// Returns the TH1F associated with the give SamplingDistribution.; /// Intended use: Access to member functions of TH1F like GetMean(),; /// GetRMS() etc.; /// The return objects is managed by SamplingDistPlot",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/SamplingDistPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistPlot.h:20,Testability,log,log,20,"/// changes plot to log scale on x axis",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/SamplingDistPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistPlot.h:20,Testability,log,log,20,"/// changes plot to log scale on y axis",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/SamplingDistPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistribution.h:8,Testability,test,test,8,"/// Get test statistics values",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/SamplingDistribution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistribution.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistribution.h:49,Availability,error,error,49,"/// numerical integral in these limits including error estimation",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/SamplingDistribution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistribution.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistribution.h:6,Performance,Cache,Cached,6,"///<! Cached vector with sum of the weight used to compute integral",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/SamplingDistribution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistribution.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistribution.h:68,Availability,error,error,68,"///<! Cached vector with sum of the weight used to compute integral error",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/SamplingDistribution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistribution.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistribution.h:6,Performance,Cache,Cached,6,"///<! Cached vector with sum of the weight used to compute integral error",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/SamplingDistribution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistribution.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SimpleInterval.h:47,Usability,Simpl,Simple,47,"/// set the confidence level for the interval. Simple interval is defined at construction time so this function; /// has no effect",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/SimpleInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SimpleInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SimpleInterval.h:47,Usability,simpl,simple,47,"// Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/SimpleInterval.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SimpleInterval.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:75,Integrability,interface,interface,75,/** \class RooStats::TestStatistic; \ingroup Roostats. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class.; */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:218,Modifiability,inherit,inherit,218,/** \class RooStats::TestStatistic; \ingroup Roostats. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class.; */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:21,Testability,Test,TestStatistic,21,/** \class RooStats::TestStatistic; \ingroup Roostats. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class.; */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:55,Testability,Test,TestStatistic,55,/** \class RooStats::TestStatistic; \ingroup Roostats. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class.; */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:130,Testability,test,test,130,/** \class RooStats::TestStatistic; \ingroup Roostats. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class.; */,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:2,Testability,Test,TestStatistic,2,"//TestStatistic();",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:9,Integrability,interface,interface,9,"/// Main interface to evaluate the test statistic on a dataset given the; /// values for the Null Parameters Of Interest.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:35,Testability,test,test,35,"/// Main interface to evaluate the test statistic on a dataset given the; /// values for the Null Parameters Of Interest.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:39,Testability,test,test,39,"/// Defines the sign convention of the test statistic. Overwrite function if necessary.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:4,Integrability,interface,interface,4,"/// interface to set conditional observables. If a test statistics needs them it will re-implement this function",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:51,Testability,test,test,51,"/// interface to set conditional observables. If a test statistics needs them it will re-implement this function",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:4,Integrability,interface,interface,4,"/// interface to set global observables. If a test statistics needs them it will re-implement this function",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:46,Testability,test,test,46,"/// interface to set global observables. If a test statistics needs them it will re-implement this function",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:3,Integrability,Interface,Interface,3,"// Interface for a TestStatistic",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:19,Testability,Test,TestStatistic,19,"// Interface for a TestStatistic",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:79,Integrability,interface,interface,79,"/** \class RooStats::TestStatSampler; \ingroup Roostats. TestStatSampler is an interface class for a tools which produce RooStats; SamplingDistributions. Tools that implement this interface are expected to be; used for coverage studies, the Neyman Construction, etc. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:180,Integrability,interface,interface,180,"/** \class RooStats::TestStatSampler; \ingroup Roostats. TestStatSampler is an interface class for a tools which produce RooStats; SamplingDistributions. Tools that implement this interface are expected to be; used for coverage studies, the Neyman Construction, etc. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:21,Testability,Test,TestStatSampler,21,"/** \class RooStats::TestStatSampler; \ingroup Roostats. TestStatSampler is an interface class for a tools which produce RooStats; SamplingDistributions. Tools that implement this interface are expected to be; used for coverage studies, the Neyman Construction, etc. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:57,Testability,Test,TestStatSampler,57,"/** \class RooStats::TestStatSampler; \ingroup Roostats. TestStatSampler is an interface class for a tools which produce RooStats; SamplingDistributions. Tools that implement this interface are expected to be; used for coverage studies, the Neyman Construction, etc. */",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:9,Integrability,interface,interface,9,"/// Main interface to get a ConfInterval, pure virtual",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:9,Integrability,interface,interface,9,"/// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:35,Testability,test,test,35,"/// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:12,Testability,Test,TestStatistic,12,"/// Get the TestStatistic",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:37,Testability,test,test,37,"/// Get the Confidence level for the test",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:58,Testability,test,test,58,"/// specify the values of parameters used when evaluating test statistic",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:67,Testability,test,test,67,"/// specify the observables in the dataset (needed to evaluate the test statistic)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:45,Availability,error,error,45,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:24,Testability,test,test,24,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:12,Testability,Test,TestStatistic,12,"/// Set the TestStatistic (want the argument to be a function of the data & parameter points",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:3,Integrability,Interface,Interface,3,"// Interface for tools setting limits (producing confidence intervals)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/TestStatSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCImportanceSampler.h:98,Testability,Test,TestStatistic,98,"/// The pdf can be nullptr in which case the density from SetPdf(); /// is used. The snapshot and TestStatistic is also optional.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCImportanceSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCImportanceSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCImportanceSampler.h:35,Performance,cache,cache,35,"/// helper method for clearing the cache",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCImportanceSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCImportanceSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCImportanceSampler.h:22,Usability,clear,clearing,22,"/// helper method for clearing the cache",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCImportanceSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCImportanceSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:9,Integrability,interface,interface,9,"/// main interface",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:98,Testability,Test,TestStatistic,98,"/// The pdf can be nullptr in which case the density from SetPdf(); /// is used. The snapshot and TestStatistic is also optional.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:9,Integrability,interface,interface,9,"/// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:35,Testability,test,test,35,"/// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:2,Testability,test,testStatistic,2,/*testStatistic*/,MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:57,Modifiability,extend,extended,57,"/// Forces the generation of exactly `n` events even for extended PDFs. Set to 0 to; /// use the Poisson-distributed events from the extended PDF.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:133,Modifiability,extend,extended,133,"/// Forces the generation of exactly `n` events even for extended PDFs. Set to 0 to; /// use the Poisson-distributed events from the extended PDF.",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:67,Testability,test,test,67,"/// specify the observables in the dataset (needed to evaluate the test statistic)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:45,Availability,error,error,45,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:24,Testability,test,test,24,"/// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:12,Testability,Test,TestStatistic,12,"/// Set the TestStatistic (want the argument to be a function of the data & parameter points",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:35,Performance,cache,cache,35,"/// helper method for clearing the cache",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:22,Usability,clear,clearing,22,"/// helper method for clearing the cache",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:30,Testability,test,test,30,"/// densities, snapshots, and test statistics to reweight to",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:46,Integrability,depend,depending,46,"///< number of events per toy (may be ignored depending on settings)",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:36,Energy Efficiency,adapt,adaptive,36,"/// minimum no of toys in tails for adaptive sampling; /// (taking weights into account, therefore double); /// Default: 0.0 which means no adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:140,Energy Efficiency,adapt,adaptive,140,"/// minimum no of toys in tails for adaptive sampling; /// (taking weights into account, therefore double); /// Default: 0.0 which means no adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:36,Modifiability,adapt,adaptive,36,"/// minimum no of toys in tails for adaptive sampling; /// (taking weights into account, therefore double); /// Default: 0.0 which means no adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:140,Modifiability,adapt,adaptive,140,"/// minimum no of toys in tails for adaptive sampling; /// (taking weights into account, therefore double); /// Default: 0.0 which means no adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:24,Performance,cache,cache,24,"///<!; // objects below cache information and are mutable and non-persistent",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:50,Integrability,interface,interface,50,"// A simple implementation of the TestStatSampler interface",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:34,Testability,Test,TestStatSampler,34,"// A simple implementation of the TestStatSampler interface",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:5,Usability,simpl,simple,5,"// A simple implementation of the TestStatSampler interface",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCSampler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCStudy.h:15,Integrability,interface,interfaces,15,"// RooAbsStudy interfaces",MatchSource.CODE_COMMENT,roofit/roostats/inc/RooStats/ToyMCStudy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCStudy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:1807,Modifiability,Extend,Extended,1807,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::AsymptoticCalculator; \ingroup Roostats. Hypothesis Test Calculator based on the asymptotic formulae for the profile; likelihood ratio. It performs hypothesis tests using the asymptotic formula for the profile likelihood, and; uses the Asimov data set to compute expected significances or limits. See G. Cowan, K. Cranmer, E. Gross and O. Vitells: Asymptotic formulae for; likelihood- based tests of new physics. Eur. Phys. J., C71:1–19, 2011.; It provides methods to perform hypothesis tests using the likelihood function,; and computes the \f$p\f$-values for the null and the alternate hypothesis using the asymptotic; formulae for the profile likelihood ratio described in the given paper. The calculator provides methods to produce the Asimov dataset, *i.e.* a dataset; generated where the observed values are equal to the expected ones.; The Asimov data set is then used to compute the observed asymptotic \f$p\f$-value for; the alternate hypothesis and the asymptotic expected \f$p\f$-values. The asymptotic formulae are valid only for one POI (parameter of interest). So; the calculator works only for one-dimensional (one POI) models.; If more than one POI exists, only the first one is used. The calculator can generate Asimov datasets from two kinds of PDFs:; - ""Counting"" distributions: RooPoisson, RooGaussian, or products of RooPoissons.; - Extended, *i.e.* number of events can be read off from extended likelihood term.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:1862,Modifiability,extend,extended,1862,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::AsymptoticCalculator; \ingroup Roostats. Hypothesis Test Calculator based on the asymptotic formulae for the profile; likelihood ratio. It performs hypothesis tests using the asymptotic formula for the profile likelihood, and; uses the Asimov data set to compute expected significances or limits. See G. Cowan, K. Cranmer, E. Gross and O. Vitells: Asymptotic formulae for; likelihood- based tests of new physics. Eur. Phys. J., C71:1–19, 2011.; It provides methods to perform hypothesis tests using the likelihood function,; and computes the \f$p\f$-values for the null and the alternate hypothesis using the asymptotic; formulae for the profile likelihood ratio described in the given paper. The calculator provides methods to produce the Asimov dataset, *i.e.* a dataset; generated where the observed values are equal to the expected ones.; The Asimov data set is then used to compute the observed asymptotic \f$p\f$-value for; the alternate hypothesis and the asymptotic expected \f$p\f$-values. The asymptotic formulae are valid only for one POI (parameter of interest). So; the calculator works only for one-dimensional (one POI) models.; If more than one POI exists, only the first one is used. The calculator can generate Asimov datasets from two kinds of PDFs:; - ""Counting"" distributions: RooPoisson, RooGaussian, or products of RooPoissons.; - Extended, *i.e.* number of events can be read off from extended likelihood term.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:592,Performance,perform,performs,592,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::AsymptoticCalculator; \ingroup Roostats. Hypothesis Test Calculator based on the asymptotic formulae for the profile; likelihood ratio. It performs hypothesis tests using the asymptotic formula for the profile likelihood, and; uses the Asimov data set to compute expected significances or limits. See G. Cowan, K. Cranmer, E. Gross and O. Vitells: Asymptotic formulae for; likelihood- based tests of new physics. Eur. Phys. J., C71:1–19, 2011.; It provides methods to perform hypothesis tests using the likelihood function,; and computes the \f$p\f$-values for the null and the alternate hypothesis using the asymptotic; formulae for the profile likelihood ratio described in the given paper. The calculator provides methods to produce the Asimov dataset, *i.e.* a dataset; generated where the observed values are equal to the expected ones.; The Asimov data set is then used to compute the observed asymptotic \f$p\f$-value for; the alternate hypothesis and the asymptotic expected \f$p\f$-values. The asymptotic formulae are valid only for one POI (parameter of interest). So; the calculator works only for one-dimensional (one POI) models.; If more than one POI exists, only the first one is used. The calculator can generate Asimov datasets from two kinds of PDFs:; - ""Counting"" distributions: RooPoisson, RooGaussian, or products of RooPoissons.; - Extended, *i.e.* number of events can be read off from extended likelihood term.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:921,Performance,perform,perform,921,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::AsymptoticCalculator; \ingroup Roostats. Hypothesis Test Calculator based on the asymptotic formulae for the profile; likelihood ratio. It performs hypothesis tests using the asymptotic formula for the profile likelihood, and; uses the Asimov data set to compute expected significances or limits. See G. Cowan, K. Cranmer, E. Gross and O. Vitells: Asymptotic formulae for; likelihood- based tests of new physics. Eur. Phys. J., C71:1–19, 2011.; It provides methods to perform hypothesis tests using the likelihood function,; and computes the \f$p\f$-values for the null and the alternate hypothesis using the asymptotic; formulae for the profile likelihood ratio described in the given paper. The calculator provides methods to produce the Asimov dataset, *i.e.* a dataset; generated where the observed values are equal to the expected ones.; The Asimov data set is then used to compute the observed asymptotic \f$p\f$-value for; the alternate hypothesis and the asymptotic expected \f$p\f$-values. The asymptotic formulae are valid only for one POI (parameter of interest). So; the calculator works only for one-dimensional (one POI) models.; If more than one POI exists, only the first one is used. The calculator can generate Asimov datasets from two kinds of PDFs:; - ""Counting"" distributions: RooPoisson, RooGaussian, or products of RooPoissons.; - Extended, *i.e.* number of events can be read off from extended likelihood term.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:505,Testability,Test,Test,505,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::AsymptoticCalculator; \ingroup Roostats. Hypothesis Test Calculator based on the asymptotic formulae for the profile; likelihood ratio. It performs hypothesis tests using the asymptotic formula for the profile likelihood, and; uses the Asimov data set to compute expected significances or limits. See G. Cowan, K. Cranmer, E. Gross and O. Vitells: Asymptotic formulae for; likelihood- based tests of new physics. Eur. Phys. J., C71:1–19, 2011.; It provides methods to perform hypothesis tests using the likelihood function,; and computes the \f$p\f$-values for the null and the alternate hypothesis using the asymptotic; formulae for the profile likelihood ratio described in the given paper. The calculator provides methods to produce the Asimov dataset, *i.e.* a dataset; generated where the observed values are equal to the expected ones.; The Asimov data set is then used to compute the observed asymptotic \f$p\f$-value for; the alternate hypothesis and the asymptotic expected \f$p\f$-values. The asymptotic formulae are valid only for one POI (parameter of interest). So; the calculator works only for one-dimensional (one POI) models.; If more than one POI exists, only the first one is used. The calculator can generate Asimov datasets from two kinds of PDFs:; - ""Counting"" distributions: RooPoisson, RooGaussian, or products of RooPoissons.; - Extended, *i.e.* number of events can be read off from extended likelihood term.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:612,Testability,test,tests,612,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::AsymptoticCalculator; \ingroup Roostats. Hypothesis Test Calculator based on the asymptotic formulae for the profile; likelihood ratio. It performs hypothesis tests using the asymptotic formula for the profile likelihood, and; uses the Asimov data set to compute expected significances or limits. See G. Cowan, K. Cranmer, E. Gross and O. Vitells: Asymptotic formulae for; likelihood- based tests of new physics. Eur. Phys. J., C71:1–19, 2011.; It provides methods to perform hypothesis tests using the likelihood function,; and computes the \f$p\f$-values for the null and the alternate hypothesis using the asymptotic; formulae for the profile likelihood ratio described in the given paper. The calculator provides methods to produce the Asimov dataset, *i.e.* a dataset; generated where the observed values are equal to the expected ones.; The Asimov data set is then used to compute the observed asymptotic \f$p\f$-value for; the alternate hypothesis and the asymptotic expected \f$p\f$-values. The asymptotic formulae are valid only for one POI (parameter of interest). So; the calculator works only for one-dimensional (one POI) models.; If more than one POI exists, only the first one is used. The calculator can generate Asimov datasets from two kinds of PDFs:; - ""Counting"" distributions: RooPoisson, RooGaussian, or products of RooPoissons.; - Extended, *i.e.* number of events can be read off from extended likelihood term.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:844,Testability,test,tests,844,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::AsymptoticCalculator; \ingroup Roostats. Hypothesis Test Calculator based on the asymptotic formulae for the profile; likelihood ratio. It performs hypothesis tests using the asymptotic formula for the profile likelihood, and; uses the Asimov data set to compute expected significances or limits. See G. Cowan, K. Cranmer, E. Gross and O. Vitells: Asymptotic formulae for; likelihood- based tests of new physics. Eur. Phys. J., C71:1–19, 2011.; It provides methods to perform hypothesis tests using the likelihood function,; and computes the \f$p\f$-values for the null and the alternate hypothesis using the asymptotic; formulae for the profile likelihood ratio described in the given paper. The calculator provides methods to produce the Asimov dataset, *i.e.* a dataset; generated where the observed values are equal to the expected ones.; The Asimov data set is then used to compute the observed asymptotic \f$p\f$-value for; the alternate hypothesis and the asymptotic expected \f$p\f$-values. The asymptotic formulae are valid only for one POI (parameter of interest). So; the calculator works only for one-dimensional (one POI) models.; If more than one POI exists, only the first one is used. The calculator can generate Asimov datasets from two kinds of PDFs:; - ""Counting"" distributions: RooPoisson, RooGaussian, or products of RooPoissons.; - Extended, *i.e.* number of events can be read off from extended likelihood term.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:940,Testability,test,tests,940,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::AsymptoticCalculator; \ingroup Roostats. Hypothesis Test Calculator based on the asymptotic formulae for the profile; likelihood ratio. It performs hypothesis tests using the asymptotic formula for the profile likelihood, and; uses the Asimov data set to compute expected significances or limits. See G. Cowan, K. Cranmer, E. Gross and O. Vitells: Asymptotic formulae for; likelihood- based tests of new physics. Eur. Phys. J., C71:1–19, 2011.; It provides methods to perform hypothesis tests using the likelihood function,; and computes the \f$p\f$-values for the null and the alternate hypothesis using the asymptotic; formulae for the profile likelihood ratio described in the given paper. The calculator provides methods to produce the Asimov dataset, *i.e.* a dataset; generated where the observed values are equal to the expected ones.; The Asimov data set is then used to compute the observed asymptotic \f$p\f$-value for; the alternate hypothesis and the asymptotic expected \f$p\f$-values. The asymptotic formulae are valid only for one POI (parameter of interest). So; the calculator works only for one-dimensional (one POI) models.; If more than one POI exists, only the first one is used. The calculator can generate Asimov datasets from two kinds of PDFs:; - ""Counting"" distributions: RooPoisson, RooGaussian, or products of RooPoissons.; - Extended, *i.e.* number of events can be read off from extended likelihood term.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:24,Deployability,configurat,configuration,24,"// try to guess default configuration; // (this part should be only in constructor because the null snapshot might change during HypoTestInversion",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:24,Modifiability,config,configuration,24,"// try to guess default configuration; // (this part should be only in constructor because the null snapshot might change during HypoTestInversion",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:141,Performance,perform,perform,141,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the calculator; /// The initialization will perform a global fit of the model to the data; /// and build an Asimov data set.; /// It will then also fit the model to the Asimov data set to find the likelihood value; /// of the Asimov data set; /// nominalAsimov is an option for using Asimov data set obtained using nominal nuisance parameter values; /// By default the nuisance parameters are fitted to the data; /// NOTE: If a fit has been done before, one for speeding up could set all the initial parameters; /// to the fit value and in addition set the null snapshot to the best fit",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:122,Modifiability,variab,variables,122,"// GetNullModel()->Print();; // printf(""ASymptotic calc: null snapshot\n"");; // nullSnapshot->Print(""v"");; // printf(""PDF variables "" );; // nullPdf->getVariables()->Print(""v"");; // keep snapshot for the initial parameter values (need for nominal Asimov)",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:7,Availability,toler,tolerance,7,"// use tolerance - but never smaller than 1 (default in RooMinimizer)",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:10,Availability,error,errors,10,"// ignore errors in Hesse or in Improve and also when matrix was made pos def (status returned = 1)",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:89,Performance,perform,performs,89,"////////////////////////////////////////////////////////////////////////////////; /// It performs an hypothesis tests using the likelihood function; /// and computes the p values for the null and the alternate using the asymptotic; /// formulae for the profile likelihood ratio.; /// See G. Cowan, K. Cranmer, E. Gross and O. Vitells.; /// Asymptotic formulae for likelihood- based tests of new physics. Eur. Phys. J., C71:1–19, 2011.; /// The formulae are valid only for one POI. If more than one POI exists consider as POI only the; /// first one",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:112,Testability,test,tests,112,"////////////////////////////////////////////////////////////////////////////////; /// It performs an hypothesis tests using the likelihood function; /// and computes the p values for the null and the alternate using the asymptotic; /// formulae for the profile likelihood ratio.; /// See G. Cowan, K. Cranmer, E. Gross and O. Vitells.; /// Asymptotic formulae for likelihood- based tests of new physics. Eur. Phys. J., C71:1–19, 2011.; /// The formulae are valid only for one POI. If more than one POI exists consider as POI only the; /// first one",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:382,Testability,test,tests,382,"////////////////////////////////////////////////////////////////////////////////; /// It performs an hypothesis tests using the likelihood function; /// and computes the p values for the null and the alternate using the asymptotic; /// formulae for the profile likelihood ratio.; /// See G. Cowan, K. Cranmer, E. Gross and O. Vitells.; /// Asymptotic formulae for likelihood- based tests of new physics. Eur. Phys. J., C71:1–19, 2011.; /// The formulae are valid only for one POI. If more than one POI exists consider as POI only the; /// first one",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:8,Availability,toler,tolerance,8,"// this tolerance is used to avoid having negative qmu due to numerical errors",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:72,Availability,error,errors,72,"// this tolerance is used to avoid having negative qmu due to numerical errors",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:29,Safety,avoid,avoid,29,"// this tolerance is used to avoid having negative qmu due to numerical errors",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:3,Deployability,update,update,3,"// update values",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:3,Deployability,update,update,3,"// update values",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:29,Testability,test,test,29,"// qtilde is not a discovery test",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:48,Availability,error,errors,48,"// fix for negative qmu values due to numerical errors",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:188,Testability,test,test,188,"// asymptotic formula for pnull and from paper Eur.Phys.J C 2011 71:1554; // we have 4 different cases:; // t(mu), t_tilde(mu) for the 2-sided; // q(mu) and q_tilde(mu) for the one -sided test statistics",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:6,Safety,avoid,avoid,6,"// to avoid case 0/0",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:23,Testability,test,test,23,"// for 2 sided bounded test statistic (N.B there is no one sided discovery qtilde); // t_mu_tilde: equations 43,44 in asymptotic paper",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:19,Testability,test,test,19,"// case of 2 sided test statistic; // need to compute numerically",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:26,Testability,log,lognormal,26,"// should try to add also lognormal case ?",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:242,Integrability,depend,depending,242,"////////////////////////////////////////////////////////////////////////////////; /// set observed value to the expected one; /// works for Gaussian, Poisson or LogNormal; /// assumes mean parameter value is the argument not constant and not depending on observables; /// (if more than two arguments are not constant will use first one but print a warning !); /// need to iterate on the components of the Poisson to get n and nu (nu can be a RooAbsReal); /// (code from G. Petrucciani and extended by L.M.)",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:489,Modifiability,extend,extended,489,"////////////////////////////////////////////////////////////////////////////////; /// set observed value to the expected one; /// works for Gaussian, Poisson or LogNormal; /// assumes mean parameter value is the argument not constant and not depending on observables; /// (if more than two arguments are not constant will use first one but print a warning !); /// need to iterate on the components of the Poisson to get n and nu (nu can be a RooAbsReal); /// (code from G. Petrucciani and extended by L.M.)",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:161,Testability,Log,LogNormal,161,"////////////////////////////////////////////////////////////////////////////////; /// set observed value to the expected one; /// works for Gaussian, Poisson or LogNormal; /// assumes mean parameter value is the argument not constant and not depending on observables; /// (if more than two arguments are not constant will use first one but print a warning !); /// need to iterate on the components of the Poisson to get n and nu (nu can be a RooAbsReal); /// (code from G. Petrucciani and extended by L.M.)",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:152,Modifiability,extend,extended,152,"////////////////////////////////////////////////////////////////////////////////; /// Generate counting Asimov data for the case when the pdf cannot be extended.; /// This function assumes that the pdf is a RooPoisson or can be decomposed in a product of RooPoisson,; /// or is a RooGaussian. Otherwise, we cannot know how to make the Asimov data sets.",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:283,Deployability,integrat,integration,283,"////////////////////////////////////////////////////////////////////////////////; /// Compute the asimov data set for an observable of a pdf.; /// It generates binned data following the binning of the observables.; // TODO: (possibility to change number of bins); // TODO: implement integration over bin content",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:283,Integrability,integrat,integration,283,"////////////////////////////////////////////////////////////////////////////////; /// Compute the asimov data set for an observable of a pdf.; /// It generates binned data following the binning of the observables.; // TODO: (possibility to change number of bins); // TODO: implement integration over bin content",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:20,Modifiability,extend,extended,20,"// if pdf cannot be extended assume is then a counting experiment",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:394,Safety,Detect,Detected,394,"// for (int iobs = 0; iobs < obsList.size(); ++iobs) {; // RooRealVar * thisObs = dynamic_cast<RooRealVar*> &obsList[i];; // if (thisObs == 0) continue;; // // loop on the bin contents; // for(int ibin=0; ibin<thisObs->numBins(); ++ibin){; // thisObs->setBin(ibin);; // thisNorm=pdftmp->getVal(obstmp)*thisObs->getBinWidth(jj);; // if (thisNorm*expectedEvents <= 0); // {; // cout << ""WARNING::Detected bin with zero expected events! Please check your inputs."" << endl;; // }; // // have a cut off for overflows ??; // obsDataUnbinned->add(*mc->GetObservables(), thisNorm*expectedEvents);; // }",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:199,Modifiability,config,config,199,"////////////////////////////////////////////////////////////////////////////////; /// Make the Asimov data from the ModelConfig and list of poi; /// \param realData Real data; /// \param model Model config defining the pdf and the parameters; /// \param paramValues The snapshot of POI and parameters used for finding the best nuisance parameter values (conditioned at these values); /// \param[out] asimovGlobObs Global observables set to values satisfying the constraints; /// \param genPoiValues Optional. A different set of POI values used for generating. By default the same POI are used for generating and for finding the nuisance parameters; /// given an observed data set, a model and a snapshot of the poi.; /// \return The asimov data set. The user takes ownership.; ///",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:612,Integrability,depend,dependence,612,"// Now need to have in ASIMOV the data sets also the global observables; // Their values must be the one satisfying the constraint.; // to do it make a nuisance pdf with all product of constraints and then; // assign to each constraint a glob observable value = to the current fitted nuisance parameter value; // IN general one should solve in general the system of equations f( gobs| nuispar ) = 0 where f are the; // derivatives of the constraint with respect the nuisance parameter and they are evaluated at the best fit nuisance; // parameter points; // As simple solution assume that constrain has a direct dependence on the nuisance parameter, i.e.; // Constraint (gobs, func( nuispar) ) and the condition is satisfied for; // gobs = func( nuispar) where nunispar is at the MLE value",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:561,Usability,simpl,simple,561,"// Now need to have in ASIMOV the data sets also the global observables; // Their values must be the one satisfying the constraint.; // to do it make a nuisance pdf with all product of constraints and then; // assign to each constraint a glob observable value = to the current fitted nuisance parameter value; // IN general one should solve in general the system of equations f( gobs| nuispar ) = 0 where f are the; // derivatives of the constraint with respect the nuisance parameter and they are evaluated at the best fit nuisance; // parameter points; // As simple solution assume that constrain has a direct dependence on the nuisance parameter, i.e.; // Constraint (gobs, func( nuispar) ) and the condition is satisfied for; // gobs = func( nuispar) where nunispar is at the MLE value",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:7,Modifiability,variab,variable,7,"// the variable representing the global observable",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:177,Integrability,depend,dependency,177,"// special case is for the Gamma where one might define the global observable n and you have a Gamma(b, n+1, ...._; // in this case n+1 is the server and we don;t have a direct dependency, but we want to set n to the b value; // so in case of the Gamma ignore this test",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:265,Testability,test,test,265,"// special case is for the Gamma where one might define the global observable n and you have a Gamma(b, n+1, ...._; // in this case n+1 is the server and we don;t have a direct dependency, but we want to set n to the b value; // so in case of the Gamma ignore this test",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:16,Integrability,depend,depending,16,"// found server depending on nuisance",MatchSource.CODE_COMMENT,roofit/roostats/src/AsymptoticCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:2444,Availability,robust,robust,2444,"tion of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; this method). Calculator estimating a credible interval using the Bayesian procedure.; The calculator computes given the model the posterior distribution and estimates the; credible interval from the given function.; */; // include other header files",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:731,Deployability,integrat,integrates,731,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::BayesianCalculator; \ingroup Roostats. BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation; of a credible interval using a Bayesian method.; The class works only for one single parameter of interest and it integrates the likelihood function with the given prior; probability density function to compute the posterior probability. The result of the class is a one dimensional interval; (class SimpleInterval ), which is obtained from inverting the cumulative posterior distribution.; This calculator works then only for model with a single parameter of interest.; The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval objec",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1153,Deployability,integrat,integrated,1153,"********************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::BayesianCalculator; \ingroup Roostats. BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation; of a credible interval using a Bayesian method.; The class works only for one single parameter of interest and it integrates the likelihood function with the given prior; probability density function to compute the posterior probability. The result of the class is a one dimensional interval; (class SimpleInterval ), which is obtained from inverting the cumulative posterior distribution.; This calculator works then only for model with a single parameter of interest.; The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterio",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1230,Deployability,integrat,integration,1230,"nsing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::BayesianCalculator; \ingroup Roostats. BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation; of a credible interval using a Bayesian method.; The class works only for one single parameter of interest and it integrates the likelihood function with the given prior; probability density function to compute the posterior probability. The result of the class is a one dimensional interval; (class SimpleInterval ), which is obtained from inverting the cumulative posterior distribution.; This calculator works then only for model with a single parameter of interest.; The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1305,Deployability,integrat,integration,1305,"nsing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::BayesianCalculator; \ingroup Roostats. BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation; of a credible interval using a Bayesian method.; The class works only for one single parameter of interest and it integrates the likelihood function with the given prior; probability density function to compute the posterior probability. The result of the class is a one dimensional interval; (class SimpleInterval ), which is obtained from inverting the cumulative posterior distribution.; This calculator works then only for model with a single parameter of interest.; The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:2319,Deployability,integrat,integration,2319,"tion of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; this method). Calculator estimating a credible interval using the Bayesian procedure.; The calculator computes given the model the posterior distribution and estimates the; credible interval from the given function.; */; // include other header files",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:2729,Deployability,integrat,integration,2729,"tion of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; this method). Calculator estimating a credible interval using the Bayesian procedure.; The calculator computes given the model the posterior distribution and estimates the; credible interval from the given function.; */; // include other header files",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:2753,Deployability,integrat,integrating,2753,"tion of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; this method). Calculator estimating a credible interval using the Bayesian procedure.; The calculator computes given the model the posterior distribution and estimates the; credible interval from the given function.; */; // include other header files",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:2833,Deployability,integrat,integration,2833,"tion of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; this method). Calculator estimating a credible interval using the Bayesian procedure.; The calculator computes given the model the posterior distribution and estimates the; credible interval from the given function.; */; // include other header files",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:731,Integrability,integrat,integrates,731,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::BayesianCalculator; \ingroup Roostats. BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation; of a credible interval using a Bayesian method.; The class works only for one single parameter of interest and it integrates the likelihood function with the given prior; probability density function to compute the posterior probability. The result of the class is a one dimensional interval; (class SimpleInterval ), which is obtained from inverting the cumulative posterior distribution.; This calculator works then only for model with a single parameter of interest.; The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval objec",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1153,Integrability,integrat,integrated,1153,"********************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::BayesianCalculator; \ingroup Roostats. BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation; of a credible interval using a Bayesian method.; The class works only for one single parameter of interest and it integrates the likelihood function with the given prior; probability density function to compute the posterior probability. The result of the class is a one dimensional interval; (class SimpleInterval ), which is obtained from inverting the cumulative posterior distribution.; This calculator works then only for model with a single parameter of interest.; The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterio",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1230,Integrability,integrat,integration,1230,"nsing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::BayesianCalculator; \ingroup Roostats. BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation; of a credible interval using a Bayesian method.; The class works only for one single parameter of interest and it integrates the likelihood function with the given prior; probability density function to compute the posterior probability. The result of the class is a one dimensional interval; (class SimpleInterval ), which is obtained from inverting the cumulative posterior distribution.; This calculator works then only for model with a single parameter of interest.; The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1305,Integrability,integrat,integration,1305,"nsing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::BayesianCalculator; \ingroup Roostats. BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation; of a credible interval using a Bayesian method.; The class works only for one single parameter of interest and it integrates the likelihood function with the given prior; probability density function to compute the posterior probability. The result of the class is a one dimensional interval; (class SimpleInterval ), which is obtained from inverting the cumulative posterior distribution.; This calculator works then only for model with a single parameter of interest.; The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1419,Integrability,interface,interface,1419,"oup Roostats. BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation; of a credible interval using a Bayesian method.; The class works only for one single parameter of interest and it integrates the likelihood function with the given prior; probability density function to compute the posterior probability. The result of the class is a one dimensional interval; (class SimpleInterval ), which is obtained from inverting the cumulative posterior distribution.; This calculator works then only for model with a single parameter of interest.; The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. The class can also return the posterior function (met",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:2319,Integrability,integrat,integration,2319,"tion of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; this method). Calculator estimating a credible interval using the Bayesian procedure.; The calculator computes given the model the posterior distribution and estimates the; credible interval from the given function.; */; // include other header files",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:2729,Integrability,integrat,integration,2729,"tion of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; this method). Calculator estimating a credible interval using the Bayesian procedure.; The calculator computes given the model the posterior distribution and estimates the; credible interval from the given function.; */; // include other header files",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:2753,Integrability,integrat,integrating,2753,"tion of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; this method). Calculator estimating a credible interval using the Bayesian procedure.; The calculator computes given the model the posterior distribution and estimates the; credible interval from the given function.; */; // include other header files",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:2833,Integrability,integrat,integration,2833,"tion of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; this method). Calculator estimating a credible interval using the Bayesian procedure.; The calculator computes given the model the posterior distribution and estimates the; credible interval from the given function.; */; // include other header files",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1894,Modifiability,config,configuring,1894,"btained from inverting the cumulative posterior distribution.; This calculator works then only for model with a single parameter of interest.; The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; thi",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:917,Usability,Simpl,SimpleInterval,917,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::BayesianCalculator; \ingroup Roostats. BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation; of a credible interval using a Bayesian method.; The class works only for one single parameter of interest and it integrates the likelihood function with the given prior; probability density function to compute the posterior probability. The result of the class is a one dimensional interval; (class SimpleInterval ), which is obtained from inverting the cumulative posterior distribution.; This calculator works then only for model with a single parameter of interest.; The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval objec",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1981,Usability,Simpl,SimpleInterval,1981,"btained from inverting the cumulative posterior distribution.; This calculator works then only for model with a single parameter of interest.; The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; thi",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:3,Deployability,integrat,integrator,3,"// integrator",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:3,Integrability,integrat,integrator,3,"// integrator",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:87,Deployability,integrat,integrator,87,"// copy constructor (needed for Cloning the object); // need special treatment because integrator; // has no copy constructor",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:87,Integrability,integrat,integrator,87,"// copy constructor (needed for Cloning the object); // need special treatment because integrator; // has no copy constructor",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:3,Deployability,integrat,integrator,3,"// integrator",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:3,Integrability,integrat,integrator,3,"// integrator",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:34,Deployability,integrat,integrating,34,"// evaluate cdf at poi value x by integrating poi from [xmin,x] and all the nuisances",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:34,Integrability,integrat,integrating,34,"// evaluate cdf at poi value x by integrating poi from [xmin,x] and all the nuisances",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:14,Safety,avoid,avoid,14,"// could also avoid a function evaluation at maximum",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:3,Deployability,integrat,integrator,3,"// integrator (mutable because Integral() is not const",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:3,Integrability,integrat,integrator,3,"// integrator (mutable because Integral() is not const",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:17,Availability,error,error,17,"// normalization error value (computed in constructor)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:46,Availability,error,error,46,"// flag to indicate if a numerical evaluation error occurred",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:151,Deployability,integrat,integrated,151,"//__________________________________________________________________; // Posterior Function class; // 1-Dim function as function of the poi; // and it integrated all the nuisance parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:151,Integrability,integrat,integrated,151,"//__________________________________________________________________; // Posterior Function class; // 1-Dim function as function of the poi; // and it integrated all the nuisance parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:31,Availability,toler,tolerance,31,"// interested only in relative tolerance; //fIntegratorOneDim->SetAbsTolerance(1.E-300);",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:34,Deployability,integrat,integrator,34,"// cannot clone this function for integrator",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:34,Integrability,integrat,integrator,34,"// cannot clone this function for integrator",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:51,Deployability,integrat,integrating,51,"// evaluate posterior function at a poi value x by integrating all nuisance parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:51,Integrability,integrat,integrating,51,"// evaluate posterior function at a poi value x by integrating all nuisance parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:6,Deployability,integrat,integration,6,"// no integration to be done",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:6,Integrability,integrat,integration,6,"// no integration to be done",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:51,Deployability,integrat,integrating,51,"// evaluate posterior function at a poi value x by integrating all nuisance parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:51,Integrability,integrat,integrating,51,"// evaluate posterior function at a poi value x by integrating all nuisance parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:212,Deployability,integrat,integrated,212,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from data set, model pdf, parameter of interests and prior pdf; /// If nuisance parameters are given they will be integrated according either to the prior or; /// their constraint term included in the model",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:212,Integrability,integrat,integrated,212,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from data set, model pdf, parameter of interests and prior pdf; /// If nuisance parameters are given they will be integrated according either to the prior or; /// their constraint term included in the model",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:96,Performance,cache,cached,96,"////////////////////////////////////////////////////////////////////////////////; /// clear all cached pdf objects",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:86,Usability,clear,clear,86,"////////////////////////////////////////////////////////////////////////////////; /// clear all cached pdf objects",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:18,Performance,cache,cached,18,"// invalidate the cached pointers",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:271,Deployability,integrat,integrated,271,"////////////////////////////////////////////////////////////////////////////////; /// Build and return the posterior function (not normalized) as a RooAbsReal; /// the posterior is obtained from the product of the likelihood function and the; /// prior pdf which is then integrated in the nuisance parameters (if existing).; /// A prior function for the nuisance can be specified either in the prior pdf object; /// or in the model itself. If no prior nuisance is specified, but prior parameters are then; /// the integration is performed assuming a flat prior for the nuisance parameters.; ///; /// NOTE: the return object is managed by the BayesianCalculator class, users do not need to delete it,; /// but the object will be deleted when the BayesiabCalculator object is deleted",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:514,Deployability,integrat,integration,514,"////////////////////////////////////////////////////////////////////////////////; /// Build and return the posterior function (not normalized) as a RooAbsReal; /// the posterior is obtained from the product of the likelihood function and the; /// prior pdf which is then integrated in the nuisance parameters (if existing).; /// A prior function for the nuisance can be specified either in the prior pdf object; /// or in the model itself. If no prior nuisance is specified, but prior parameters are then; /// the integration is performed assuming a flat prior for the nuisance parameters.; ///; /// NOTE: the return object is managed by the BayesianCalculator class, users do not need to delete it,; /// but the object will be deleted when the BayesiabCalculator object is deleted",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:271,Integrability,integrat,integrated,271,"////////////////////////////////////////////////////////////////////////////////; /// Build and return the posterior function (not normalized) as a RooAbsReal; /// the posterior is obtained from the product of the likelihood function and the; /// prior pdf which is then integrated in the nuisance parameters (if existing).; /// A prior function for the nuisance can be specified either in the prior pdf object; /// or in the model itself. If no prior nuisance is specified, but prior parameters are then; /// the integration is performed assuming a flat prior for the nuisance parameters.; ///; /// NOTE: the return object is managed by the BayesianCalculator class, users do not need to delete it,; /// but the object will be deleted when the BayesiabCalculator object is deleted",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:514,Integrability,integrat,integration,514,"////////////////////////////////////////////////////////////////////////////////; /// Build and return the posterior function (not normalized) as a RooAbsReal; /// the posterior is obtained from the product of the likelihood function and the; /// prior pdf which is then integrated in the nuisance parameters (if existing).; /// A prior function for the nuisance can be specified either in the prior pdf object; /// or in the model itself. If no prior nuisance is specified, but prior parameters are then; /// the integration is performed assuming a flat prior for the nuisance parameters.; ///; /// NOTE: the return object is managed by the BayesianCalculator class, users do not need to delete it,; /// but the object will be deleted when the BayesiabCalculator object is deleted",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:529,Performance,perform,performed,529,"////////////////////////////////////////////////////////////////////////////////; /// Build and return the posterior function (not normalized) as a RooAbsReal; /// the posterior is obtained from the product of the likelihood function and the; /// prior pdf which is then integrated in the nuisance parameters (if existing).; /// A prior function for the nuisance can be specified either in the prior pdf object; /// or in the model itself. If no prior nuisance is specified, but prior parameters are then; /// the integration is performed assuming a flat prior for the nuisance parameters.; ///; /// NOTE: the return object is managed by the BayesianCalculator class, users do not need to delete it,; /// but the object will be deleted when the BayesiabCalculator object is deleted",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:12,Safety,sanity check,sanity checks,12,"// run some sanity checks",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:96,Availability,error,errors,96,"// need do find minimum of log-likelihood in the range to shift function; // to avoid numerical errors when we compute the likelihood (overflows in the exponent); // N.B.: this works for only 1 parameter of interest otherwise Minuit should be used for finding the minimum",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:80,Safety,avoid,avoid,80,"// need do find minimum of log-likelihood in the range to shift function; // to avoid numerical errors when we compute the likelihood (overflows in the exponent); // N.B.: this works for only 1 parameter of interest otherwise Minuit should be used for finding the minimum",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:27,Testability,log,log-likelihood,27,"// need do find minimum of log-likelihood in the range to shift function; // to avoid numerical errors when we compute the likelihood (overflows in the exponent); // N.B.: this works for only 1 parameter of interest otherwise Minuit should be used for finding the minimum",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:22,Availability,error,error,22,"// try to reduce some error messages; //bool silentMode = (RooMsgService::instance().globalKillBelow() >= RooFit::ERROR || RooMsgService::instance().silentMode()) ;",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:114,Availability,ERROR,ERROR,114,"// try to reduce some error messages; //bool silentMode = (RooMsgService::instance().globalKillBelow() >= RooFit::ERROR || RooMsgService::instance().silentMode()) ;",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:10,Energy Efficiency,reduce,reduce,10,"// try to reduce some error messages; //bool silentMode = (RooMsgService::instance().globalKillBelow() >= RooFit::ERROR || RooMsgService::instance().silentMode()) ;",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:28,Integrability,message,messages,28,"// try to reduce some error messages; //bool silentMode = (RooMsgService::instance().globalKillBelow() >= RooFit::ERROR || RooMsgService::instance().silentMode()) ;",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:8,Usability,clear,clear,8,"// (not clear why this does not work); // need to make in this case a likelihood from the nll and make the product with the prior",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:32,Deployability,integrat,integration,32,"// case of using RooFit for the integration",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:32,Integrability,integrat,integration,32,"// case of using RooFit for the integration",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:12,Deployability,integrat,integration,12,"// use ROOT integration method if there are nuisance parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:12,Integrability,integrat,integration,12,"// use ROOT integration method if there are nuisance parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:201,Deployability,integrat,integration,201,"////////////////////////////////////////////////////////////////////////////////; /// Build and return the posterior pdf (i.e posterior function normalized to all range of poi); /// Note that an extra integration in the POI is required for the normalization; /// NOTE: user must delete the returned object",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:201,Integrability,integrat,integration,201,"////////////////////////////////////////////////////////////////////////////////; /// Build and return the posterior pdf (i.e posterior function normalized to all range of poi); /// Note that an extra integration in the POI is required for the normalization; /// NOTE: user must delete the returned object",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:22,Availability,error,error,22,"// try to reduce some error messages",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:10,Energy Efficiency,reduce,reduce,10,"// try to reduce some error messages",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:28,Integrability,message,messages,28,"// try to reduce some error messages",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:520,Availability,toler,tolerance,520,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:94,Deployability,integrat,integration,94,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:148,Deployability,integrat,integration,148,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:314,Deployability,integrat,integration,314,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:454,Deployability,integrat,integration,454,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:546,Deployability,integrat,integration,546,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:677,Deployability,Integrat,IntegratorMultiDimOptions,677,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:725,Deployability,integrat,integration,725,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:895,Deployability,integrat,integration,895,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1006,Deployability,integrat,integration,1006,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1138,Deployability,integrat,integration,1138,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1800,Deployability,integrat,integration,1800,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:231,Energy Efficiency,adapt,adaptive,231,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:285,Energy Efficiency,ADAPT,ADAPTIVE,285,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:295,Energy Efficiency,adapt,adaptive,295,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:434,Energy Efficiency,reduce,reduced,434,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1286,Energy Efficiency,efficient,efficient,1286,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:94,Integrability,integrat,integration,94,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:148,Integrability,integrat,integration,148,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:314,Integrability,integrat,integration,314,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:454,Integrability,integrat,integration,454,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:546,Integrability,integrat,integration,546,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:677,Integrability,Integrat,IntegratorMultiDimOptions,677,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:725,Integrability,integrat,integration,725,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:895,Integrability,integrat,integration,895,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1006,Integrability,integrat,integration,1006,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1138,Integrability,integrat,integration,1138,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1800,Integrability,integrat,integration,1800,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:231,Modifiability,adapt,adaptive,231,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:285,Modifiability,ADAPT,ADAPTIVE,285,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:295,Modifiability,adapt,adaptive,295,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:885,Usability,simpl,simple,885,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:47,Deployability,Integrat,IntegratorMultiDimOptions,47,"// if type = 0 use default specified via class IntegratorMultiDimOptions::SetDefaultIntegrator",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:47,Integrability,Integrat,IntegratorMultiDimOptions,47,"// if type = 0 use default specified via class IntegratorMultiDimOptions::SetDefaultIntegrator",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:175,Usability,Simpl,SimpleInterval,175,"////////////////////////////////////////////////////////////////////////////////; /// Compute the interval. By Default a central interval is computed; /// and the result is a SimpleInterval object.; ///; /// Using the method (to be called before SetInterval) SetLeftSideTailFraction the user can choose the type of interval.; /// By default the returned interval is a central interval with the confidence level specified; /// previously in the constructor ( LeftSideTailFraction = 0.5).; /// - For lower limit use SetLeftSideTailFraction = 1; /// - For upper limit use SetLeftSideTailFraction = 0; /// - for shortest intervals use SetLeftSideTailFraction = -1 or call the method SetShortestInterval(); ///; /// NOTE: The BayesianCalculator covers only the case with one; /// single parameter of interest; ///; /// NOTE: User takes ownership of the returned object",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:7,Deployability,integrat,integrated,7,"// get integrated likelihood (posterior function)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:7,Integrability,integrat,integrated,7,"// get integrated likelihood (posterior function)",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:76,Availability,ERROR,ERROR,76,"//bool silentMode = (RooMsgService::instance().globalKillBelow() >= RooFit::ERROR || RooMsgService::instance().silentMode()) ;",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:7,Deployability,integrat,integration,7,"// use integration method if there are nuisance parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:7,Integrability,integrat,integration,7,"// use integration method if there are nuisance parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:3,Deployability,patch,patch,3,"// patch used because findRoot changes the value of poi",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:3,Deployability,patch,patch,3,"// patch: restore the original value of poi",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:135,Deployability,integrat,integration,135,"////////////////////////////////////////////////////////////////////////////////; /// internal function compute the interval using Cdf integration",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:135,Integrability,integrat,integration,135,"////////////////////////////////////////////////////////////////////////////////; /// internal function compute the interval using Cdf integration",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:286,Deployability,integrat,integrating,286,"////////////////////////////////////////////////////////////////////////////////; /// approximate posterior in nbins using a TF1; /// scan the poi values and evaluate the posterior at each point; /// and save the result in a cloned TF1; /// For each point the posterior is evaluated by integrating the nuisance; /// parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:286,Integrability,integrat,integrating,286,"////////////////////////////////////////////////////////////////////////////////; /// approximate posterior in nbins using a TF1; /// scan the poi values and evaluate the posterior at each point; /// and save the result in a cloned TF1; /// For each point the posterior is evaluated by integrating the nuisance; /// parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:19,Testability,test,test,19,"// find cut off as test size",MatchSource.CODE_COMMENT,roofit/roostats/src/BayesianCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:2017,Availability,error,error,2017,"tic variations to the nominal PDF.; The Bernstein basis polynomials are particularly appropriate because they are positive definite. This tool was inspired by the work of Glen Cowan together with Stephan Horner, Sascha Caron,; Eilam Gross, and others.; The initial implementation is independent work. The major step forward in the approach was; to provide a well defined algorithm that specifies the order of polynomial to be included; in the correction. This is an empirical algorithm, so in addition to the nominal model it; needs either a real data set or a simulated one. In the early work, the nominal model was taken; to be a histogram from Monte Carlo simulations, but in this implementation it is generalized to an; arbitrary PDF (which includes a RooHistPdf). The algorithm basically consists of a; hypothesis test of an nth-order correction (null) against a n+1-th order correction (alternate).; The quantity q = -2 log LR is used to determine whether the n+1-th order correction is a major; improvement to the n-th order correction. The distribution of q is expected to be roughly; \f$\chi^2\f$ with one degree of freedom if the n-th order correction is a good model for the data.; Thus, one only moves to the n+1-th order correction of q is relatively large. The chance that; one moves from the n-th to the n+1-th order correction when the n-th order correction; (eg. a type 1 error) is sufficient is given by the Prob(\f$\chi^2_1\f$ > threshold). The constructor; of this class allows you to directly set this tolerance (in terms of probability that the n+1-th; term is added unnecessarily). To do:; Add another method to the utility that will make the sampling distribution for -2 log lambda; for various m vs. m+1 order corrections using a nominal model and perhaps having two ways of; generating the toys (either via a histogram or via an independent model that is supposed to; reflect reality). That will allow one to make plots like Glen has at the end of his DRAFT; very easily. */",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:2151,Availability,toler,tolerance,2151,"tic variations to the nominal PDF.; The Bernstein basis polynomials are particularly appropriate because they are positive definite. This tool was inspired by the work of Glen Cowan together with Stephan Horner, Sascha Caron,; Eilam Gross, and others.; The initial implementation is independent work. The major step forward in the approach was; to provide a well defined algorithm that specifies the order of polynomial to be included; in the correction. This is an empirical algorithm, so in addition to the nominal model it; needs either a real data set or a simulated one. In the early work, the nominal model was taken; to be a histogram from Monte Carlo simulations, but in this implementation it is generalized to an; arbitrary PDF (which includes a RooHistPdf). The algorithm basically consists of a; hypothesis test of an nth-order correction (null) against a n+1-th order correction (alternate).; The quantity q = -2 log LR is used to determine whether the n+1-th order correction is a major; improvement to the n-th order correction. The distribution of q is expected to be roughly; \f$\chi^2\f$ with one degree of freedom if the n-th order correction is a good model for the data.; Thus, one only moves to the n+1-th order correction of q is relatively large. The chance that; one moves from the n-th to the n+1-th order correction when the n-th order correction; (eg. a type 1 error) is sufficient is given by the Prob(\f$\chi^2_1\f$ > threshold). The constructor; of this class allows you to directly set this tolerance (in terms of probability that the n+1-th; term is added unnecessarily). To do:; Add another method to the utility that will make the sampling distribution for -2 log lambda; for various m vs. m+1 order corrections using a nominal model and perhaps having two ways of; generating the toys (either via a histogram or via an independent model that is supposed to; reflect reality). That will allow one to make plots like Glen has at the end of his DRAFT; very easily. */",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:1447,Testability,test,test,1447,"ingroup Roostats. BernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial; correction term. This is useful for incorporating systematic variations to the nominal PDF.; The Bernstein basis polynomials are particularly appropriate because they are positive definite. This tool was inspired by the work of Glen Cowan together with Stephan Horner, Sascha Caron,; Eilam Gross, and others.; The initial implementation is independent work. The major step forward in the approach was; to provide a well defined algorithm that specifies the order of polynomial to be included; in the correction. This is an empirical algorithm, so in addition to the nominal model it; needs either a real data set or a simulated one. In the early work, the nominal model was taken; to be a histogram from Monte Carlo simulations, but in this implementation it is generalized to an; arbitrary PDF (which includes a RooHistPdf). The algorithm basically consists of a; hypothesis test of an nth-order correction (null) against a n+1-th order correction (alternate).; The quantity q = -2 log LR is used to determine whether the n+1-th order correction is a major; improvement to the n-th order correction. The distribution of q is expected to be roughly; \f$\chi^2\f$ with one degree of freedom if the n-th order correction is a good model for the data.; Thus, one only moves to the n+1-th order correction of q is relatively large. The chance that; one moves from the n-th to the n+1-th order correction when the n-th order correction; (eg. a type 1 error) is sufficient is given by the Prob(\f$\chi^2_1\f$ > threshold). The constructor; of this class allows you to directly set this tolerance (in terms of probability that the n+1-th; term is added unnecessarily). To do:; Add another method to the utility that will make the sampling distribution for -2 log lambda; for various m vs. m+1 order corrections using a nominal model and perhaps having two ways of; generating the toys (either via a h",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:1554,Testability,log,log,1554,"l for incorporating systematic variations to the nominal PDF.; The Bernstein basis polynomials are particularly appropriate because they are positive definite. This tool was inspired by the work of Glen Cowan together with Stephan Horner, Sascha Caron,; Eilam Gross, and others.; The initial implementation is independent work. The major step forward in the approach was; to provide a well defined algorithm that specifies the order of polynomial to be included; in the correction. This is an empirical algorithm, so in addition to the nominal model it; needs either a real data set or a simulated one. In the early work, the nominal model was taken; to be a histogram from Monte Carlo simulations, but in this implementation it is generalized to an; arbitrary PDF (which includes a RooHistPdf). The algorithm basically consists of a; hypothesis test of an nth-order correction (null) against a n+1-th order correction (alternate).; The quantity q = -2 log LR is used to determine whether the n+1-th order correction is a major; improvement to the n-th order correction. The distribution of q is expected to be roughly; \f$\chi^2\f$ with one degree of freedom if the n-th order correction is a good model for the data.; Thus, one only moves to the n+1-th order correction of q is relatively large. The chance that; one moves from the n-th to the n+1-th order correction when the n-th order correction; (eg. a type 1 error) is sufficient is given by the Prob(\f$\chi^2_1\f$ > threshold). The constructor; of this class allows you to directly set this tolerance (in terms of probability that the n+1-th; term is added unnecessarily). To do:; Add another method to the utility that will make the sampling distribution for -2 log lambda; for various m vs. m+1 order corrections using a nominal model and perhaps having two ways of; generating the toys (either via a histogram or via an independent model that is supposed to; reflect reality). That will allow one to make plots like Glen has at the end of ",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:2323,Testability,log,log,2323,"tic variations to the nominal PDF.; The Bernstein basis polynomials are particularly appropriate because they are positive definite. This tool was inspired by the work of Glen Cowan together with Stephan Horner, Sascha Caron,; Eilam Gross, and others.; The initial implementation is independent work. The major step forward in the approach was; to provide a well defined algorithm that specifies the order of polynomial to be included; in the correction. This is an empirical algorithm, so in addition to the nominal model it; needs either a real data set or a simulated one. In the early work, the nominal model was taken; to be a histogram from Monte Carlo simulations, but in this implementation it is generalized to an; arbitrary PDF (which includes a RooHistPdf). The algorithm basically consists of a; hypothesis test of an nth-order correction (null) against a n+1-th order correction (alternate).; The quantity q = -2 log LR is used to determine whether the n+1-th order correction is a major; improvement to the n-th order correction. The distribution of q is expected to be roughly; \f$\chi^2\f$ with one degree of freedom if the n-th order correction is a good model for the data.; Thus, one only moves to the n+1-th order correction of q is relatively large. The chance that; one moves from the n-th to the n+1-th order correction when the n-th order correction; (eg. a type 1 error) is sufficient is given by the Prob(\f$\chi^2_1\f$ > threshold). The constructor; of this class allows you to directly set this tolerance (in terms of probability that the n+1-th; term is added unnecessarily). To do:; Add another method to the utility that will make the sampling distribution for -2 log lambda; for various m vs. m+1 order corrections using a nominal model and perhaps having two ways of; generating the toys (either via a histogram or via an independent model that is supposed to; reflect reality). That will allow one to make plots like Glen has at the end of his DRAFT; very easily. */",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:11,Testability,log,log,11,"// setup a log",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:9,Modifiability,variab,variables,9,"// Local variables that we want to keep in scope after loop",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:14,Testability,test,test,14,"// Hypothesis test between previous correction (null); // and this one (alternate). Use -2 log LR for test statistic",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:91,Testability,log,log,91,"// Hypothesis test between previous correction (null); // and this one (alternate). Use -2 log LR for test statistic",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:102,Testability,test,test,102,"// Hypothesis test between previous correction (null); // and this one (alternate). Use -2 log LR for test statistic",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:101,Availability,error,error,101,"// -2 log lambda, goes like significance^2; // check if we should keep going based on rate of Type I error",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:6,Testability,log,log,6,"// -2 log lambda, goes like significance^2; // check if we should keep going based on rate of Type I error",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:11,Testability,log,log,11,"// for the log",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:3,Deployability,update,update,3,"// update last result for next iteration in loop",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:11,Testability,log,log,11,"// setup a log",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:9,Modifiability,variab,variables,9,"// Local variables that we want to keep in scope after loop",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:14,Testability,test,test,14,"// Hypothesis test between previous correction (null); // and this one (alternate). Use -2 log LR for test statistic",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:91,Testability,log,log,91,"// Hypothesis test between previous correction (null); // and this one (alternate). Use -2 log LR for test statistic",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:102,Testability,test,test,102,"// Hypothesis test between previous correction (null); // and this one (alternate). Use -2 log LR for test statistic",MatchSource.CODE_COMMENT,roofit/roostats/src/BernsteinCorrection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ConfidenceBelt.cxx:922,Integrability,interface,interface,922,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*****************************************************************************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Original Author: Kyle Cranmer; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; *; *****************************************************************************/; /** \class RooStats::ConfidenceBelt; \ingroup Roostats. ConfidenceBelt is a concrete implementation of the ConfInterval interface.; It implements simple general purpose interval of arbitrary dimensions and shape.; It does not assume the interval is connected.; It uses either a RooDataSet (eg. a list of parameter points in the interval) or; a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to; store the interval. */",MatchSource.CODE_COMMENT,roofit/roostats/src/ConfidenceBelt.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ConfidenceBelt.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ConfidenceBelt.cxx:948,Usability,simpl,simple,948,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*****************************************************************************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Original Author: Kyle Cranmer; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; *; *****************************************************************************/; /** \class RooStats::ConfidenceBelt; \ingroup Roostats. ConfidenceBelt is a concrete implementation of the ConfInterval interface.; It implements simple general purpose interval of arbitrary dimensions and shape.; It does not assume the interval is connected.; It uses either a RooDataSet (eg. a list of parameter points in the interval) or; a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to; store the interval. */",MatchSource.CODE_COMMENT,roofit/roostats/src/ConfidenceBelt.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ConfidenceBelt.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ConfidenceBelt.cxx:63,Energy Efficiency,allocate,allocate,63,"// get index; // cout << ""hist index = "" << index << endl;; // allocate memory if necessary. numEntries is overkill?",MatchSource.CODE_COMMENT,roofit/roostats/src/ConfidenceBelt.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ConfidenceBelt.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ConfidenceBelt.cxx:49,Energy Efficiency,allocate,allocate,49,"// cout << ""tree index = "" << index << endl;; // allocate memory if necessary. numEntries is overkill?",MatchSource.CODE_COMMENT,roofit/roostats/src/ConfidenceBelt.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ConfidenceBelt.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ConfidenceBelt.cxx:17,Energy Efficiency,allocate,allocate,17,"// get index; // allocate memory if necessary. numEntries is overkill?",MatchSource.CODE_COMMENT,roofit/roostats/src/ConfidenceBelt.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ConfidenceBelt.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ConfidenceBelt.cxx:56,Energy Efficiency,allocate,allocate,56,"//check that last point added has index nEntries -1; // allocate memory if necessary. numEntries is overkill?",MatchSource.CODE_COMMENT,roofit/roostats/src/ConfidenceBelt.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ConfidenceBelt.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/DetailedOutputAggregator.cxx:201,Modifiability,variab,variable,201,"////////////////////////////////////////////////////////////////////////////////; /// static function to translate the given fit result to a RooArgSet in a generic way.; /// Prefix is prepended to all variable names.; /// LM: caller is responsible to delete the returned list and eventually also the content of the list; /// Note that the returned list is not owning the returned content",MatchSource.CODE_COMMENT,roofit/roostats/src/DetailedOutputAggregator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/DetailedOutputAggregator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/DetailedOutputAggregator.cxx:3,Energy Efficiency,monitor,monitor,3,"// monitor a few more variables",MatchSource.CODE_COMMENT,roofit/roostats/src/DetailedOutputAggregator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/DetailedOutputAggregator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/DetailedOutputAggregator.cxx:22,Modifiability,variab,variables,22,"// monitor a few more variables",MatchSource.CODE_COMMENT,roofit/roostats/src/DetailedOutputAggregator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/DetailedOutputAggregator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/DetailedOutputAggregator.cxx:95,Modifiability,variab,variable,95,"////////////////////////////////////////////////////////////////////////////////; /// For each variable in aset, prepend prefix to its name and add; /// to the internal store. Note this will not appear in the produced; /// dataset unless CommitSet is called.",MatchSource.CODE_COMMENT,roofit/roostats/src/DetailedOutputAggregator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/DetailedOutputAggregator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/DetailedOutputAggregator.cxx:19,Availability,error,errors,19,"// copy values and errors",MatchSource.CODE_COMMENT,roofit/roostats/src/DetailedOutputAggregator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/DetailedOutputAggregator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:145,Deployability,configurat,configuration,145,"/** \class RooStats::FeldmanCousins; \ingroup Roostats. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a; specific configuration of the more general NeymanConstruction. It is a concrete; implementation of the IntervalCalculator interface that, which uses the; NeymanConstruction in a particular way. As the name suggests, it returns a; ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval,; which is a concrete implementation of the ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually encoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval. In the case of the Feldman-Cousins approach, the ordering principle is the; likelihood ratio -- motivated by the Neyman-Pearson lemma. When nuisance; parameters are involved, the profile likelihood ratio is the natural; generalization. One may either choose to perform the construction over the full; space of the nuisance parameters, or restrict the nuisance parameters to their; conditional MLE (eg. profiled values). */",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:731,Deployability,integrat,integration,731,"/** \class RooStats::FeldmanCousins; \ingroup Roostats. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a; specific configuration of the more general NeymanConstruction. It is a concrete; implementation of the IntervalCalculator interface that, which uses the; NeymanConstruction in a particular way. As the name suggests, it returns a; ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval,; which is a concrete implementation of the ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually encoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval. In the case of the Feldman-Cousins approach, the ordering principle is the; likelihood ratio -- motivated by the Neyman-Pearson lemma. When nuisance; parameters are involved, the profile likelihood ratio is the natural; generalization. One may either choose to perform the construction over the full; space of the nuisance parameters, or restrict the nuisance parameters to their; conditional MLE (eg. profiled values). */",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:258,Integrability,interface,interface,258,"/** \class RooStats::FeldmanCousins; \ingroup Roostats. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a; specific configuration of the more general NeymanConstruction. It is a concrete; implementation of the IntervalCalculator interface that, which uses the; NeymanConstruction in a particular way. As the name suggests, it returns a; ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval,; which is a concrete implementation of the ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually encoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval. In the case of the Feldman-Cousins approach, the ordering principle is the; likelihood ratio -- motivated by the Neyman-Pearson lemma. When nuisance; parameters are involved, the profile likelihood ratio is the natural; generalization. One may either choose to perform the construction over the full; space of the nuisance parameters, or restrict the nuisance parameters to their; conditional MLE (eg. profiled values). */",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:499,Integrability,interface,interface,499,"/** \class RooStats::FeldmanCousins; \ingroup Roostats. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a; specific configuration of the more general NeymanConstruction. It is a concrete; implementation of the IntervalCalculator interface that, which uses the; NeymanConstruction in a particular way. As the name suggests, it returns a; ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval,; which is a concrete implementation of the ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually encoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval. In the case of the Feldman-Cousins approach, the ordering principle is the; likelihood ratio -- motivated by the Neyman-Pearson lemma. When nuisance; parameters are involved, the profile likelihood ratio is the natural; generalization. One may either choose to perform the construction over the full; space of the nuisance parameters, or restrict the nuisance parameters to their; conditional MLE (eg. profiled values). */",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:731,Integrability,integrat,integration,731,"/** \class RooStats::FeldmanCousins; \ingroup Roostats. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a; specific configuration of the more general NeymanConstruction. It is a concrete; implementation of the IntervalCalculator interface that, which uses the; NeymanConstruction in a particular way. As the name suggests, it returns a; ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval,; which is a concrete implementation of the ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually encoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval. In the case of the Feldman-Cousins approach, the ordering principle is the; likelihood ratio -- motivated by the Neyman-Pearson lemma. When nuisance; parameters are involved, the profile likelihood ratio is the natural; generalization. One may either choose to perform the construction over the full; space of the nuisance parameters, or restrict the nuisance parameters to their; conditional MLE (eg. profiled values). */",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:145,Modifiability,config,configuration,145,"/** \class RooStats::FeldmanCousins; \ingroup Roostats. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a; specific configuration of the more general NeymanConstruction. It is a concrete; implementation of the IntervalCalculator interface that, which uses the; NeymanConstruction in a particular way. As the name suggests, it returns a; ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval,; which is a concrete implementation of the ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually encoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval. In the case of the Feldman-Cousins approach, the ordering principle is the; likelihood ratio -- motivated by the Neyman-Pearson lemma. When nuisance; parameters are involved, the profile likelihood ratio is the natural; generalization. One may either choose to perform the construction over the full; space of the nuisance parameters, or restrict the nuisance parameters to their; conditional MLE (eg. profiled values). */",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:824,Modifiability,config,configured,824,"/** \class RooStats::FeldmanCousins; \ingroup Roostats. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a; specific configuration of the more general NeymanConstruction. It is a concrete; implementation of the IntervalCalculator interface that, which uses the; NeymanConstruction in a particular way. As the name suggests, it returns a; ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval,; which is a concrete implementation of the ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually encoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval. In the case of the Feldman-Cousins approach, the ordering principle is the; likelihood ratio -- motivated by the Neyman-Pearson lemma. When nuisance; parameters are involved, the profile likelihood ratio is the natural; generalization. One may either choose to perform the construction over the full; space of the nuisance parameters, or restrict the nuisance parameters to their; conditional MLE (eg. profiled values). */",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:1166,Performance,perform,perform,1166,"/** \class RooStats::FeldmanCousins; \ingroup Roostats. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a; specific configuration of the more general NeymanConstruction. It is a concrete; implementation of the IntervalCalculator interface that, which uses the; NeymanConstruction in a particular way. As the name suggests, it returns a; ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval,; which is a concrete implementation of the ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually encoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval. In the case of the Feldman-Cousins approach, the ordering principle is the; likelihood ratio -- motivated by the Neyman-Pearson lemma. When nuisance; parameters are involved, the profile likelihood ratio is the natural; generalization. One may either choose to perform the construction over the full; space of the nuisance parameters, or restrict the nuisance parameters to their; conditional MLE (eg. profiled values). */",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:702,Testability,test,test,702,"/** \class RooStats::FeldmanCousins; \ingroup Roostats. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a; specific configuration of the more general NeymanConstruction. It is a concrete; implementation of the IntervalCalculator interface that, which uses the; NeymanConstruction in a particular way. As the name suggests, it returns a; ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval,; which is a concrete implementation of the ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually encoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval. In the case of the Feldman-Cousins approach, the ordering principle is the; likelihood ratio -- motivated by the Neyman-Pearson lemma. When nuisance; parameters are involved, the profile likelihood ratio is the natural; generalization. One may either choose to perform the construction over the full; space of the nuisance parameters, or restrict the nuisance parameters to their; conditional MLE (eg. profiled values). */",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:98,Testability,Test,Test,98,"////////////////////////////////////////////////////////////////////////////////; /// specify the Test Statistic and create a ToyMC test statistic sampler",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:132,Testability,test,test,132,"////////////////////////////////////////////////////////////////////////////////; /// specify the Test Statistic and create a ToyMC test statistic sampler",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:43,Testability,test,test,43,"// use the profile likelihood ratio as the test statistic",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:20,Testability,test,test,20,"// create the ToyMC test statistic sampler",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:118,Performance,perform,perform,118,"////////////////////////////////////////////////////////////////////////////////; /// specify the parameter points to perform the construction.; /// allow ability to profile on some nuisance parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:91,Integrability,interface,interface,91,"////////////////////////////////////////////////////////////////////////////////; /// Main interface to get a RooStats::ConfInterval.; /// It constructs a RooStats::PointSetInterval.",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:9,Modifiability,variab,variables,9,"// local variables; // RooAbsData* data = fData; //fWS->data(fDataName);; // fill in implied variables given data",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:93,Modifiability,variab,variables,93,"// local variables; // RooAbsData* data = fData; //fWS->data(fDataName);; // fill in implied variables given data",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:14,Testability,test,test,14,"// create the test statistic sampler (private data member fTestStatSampler)",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:30,Performance,perform,perform,30,"// create parameter points to perform construction (private data member fPointsToTest)",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:3,Modifiability,config,configure,3,"// configure it",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:15,Testability,test,test,15,"// set size of test; // nc.SetParameters( fModel.GetParametersOfInterest);",MatchSource.CODE_COMMENT,roofit/roostats/src/FeldmanCousins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:93,Testability,test,test,93,/** \class RooStats::FrequentistCalculator; \ingroup Roostats. Does a frequentist hypothesis test. Hypothesis Test Calculator using a full frequentist procedure for sampling the; test statistic distribution.; The nuisance parameters are fixed to their MLEs.; The use of ToyMCSampler as the TestStatSampler is assumed. */,MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:110,Testability,Test,Test,110,/** \class RooStats::FrequentistCalculator; \ingroup Roostats. Does a frequentist hypothesis test. Hypothesis Test Calculator using a full frequentist procedure for sampling the; test statistic distribution.; The nuisance parameters are fixed to their MLEs.; The use of ToyMCSampler as the TestStatSampler is assumed. */,MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:179,Testability,test,test,179,/** \class RooStats::FrequentistCalculator; \ingroup Roostats. Does a frequentist hypothesis test. Hypothesis Test Calculator using a full frequentist procedure for sampling the; test statistic distribution.; The nuisance parameters are fixed to their MLEs.; The use of ToyMCSampler as the TestStatSampler is assumed. */,MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:290,Testability,Test,TestStatSampler,290,/** \class RooStats::FrequentistCalculator; \ingroup Roostats. Does a frequentist hypothesis test. Hypothesis Test Calculator using a full frequentist procedure for sampling the; test statistic distribution.; The nuisance parameters are fixed to their MLEs.; The use of ToyMCSampler as the TestStatSampler is assumed. */,MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:14,Testability,Test,TestStatSampler,14,"// ****** any TestStatSampler ********; // create profile keeping everything but nuisance parameters fixed",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:37,Modifiability,variab,variables,37,"// note: making nll or profile class variables can only be done in the constructor; // as all other hooks are const (which has to be because GetHypoTest is const). However,; // when setting it only in constructor, they would have to be changed every time SetNullModel; // or SetAltModel is called. Simply put, converting them into class variables breaks; // encapsulation.",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:337,Modifiability,variab,variables,337,"// note: making nll or profile class variables can only be done in the constructor; // as all other hooks are const (which has to be because GetHypoTest is const). However,; // when setting it only in constructor, they would have to be changed every time SetNullModel; // or SetAltModel is called. Simply put, converting them into class variables breaks; // encapsulation.",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:298,Usability,Simpl,Simply,298,"// note: making nll or profile class variables can only be done in the constructor; // as all other hooks are const (which has to be because GetHypoTest is const). However,; // when setting it only in constructor, they would have to be changed every time SetNullModel; // or SetAltModel is called. Simply put, converting them into class variables breaks; // encapsulation.",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:69,Availability,error,error,69,"// LM: fConditionalMLEsNull must be nuisance parameters otherwise an error message will be printed",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:75,Integrability,message,message,75,"// LM: fConditionalMLEsNull must be nuisance parameters otherwise an error message will be printed",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:10,Testability,test,test,10,"// set in test statistics conditional and global observables; // (needed to get correct model likelihood)",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:57,Testability,Test,TestStatSampler,57,"// ***** ToyMCSampler specific *******; // check whether TestStatSampler is a ToyMCSampler",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:3,Modifiability,variab,variable,3,"// variable number of toys",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:3,Energy Efficiency,adapt,adaptive,3,"// adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:3,Modifiability,adapt,adaptive,3,"// adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:11,Energy Efficiency,adapt,adaptive,11,"// disable adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:11,Modifiability,adapt,adaptive,11,"// disable adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:14,Testability,Test,TestStatSampler,14,"// ****** any TestStatSampler ********; // create profile keeping everything but nuisance parameters fixed",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:68,Availability,error,error,68,"// LM: fConditionalMLEsAlt must be nuisance parameters otherwise an error message will be printed",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:74,Integrability,message,message,74,"// LM: fConditionalMLEsAlt must be nuisance parameters otherwise an error message will be printed",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:10,Testability,test,test,10,"// set in test statistics conditional and global observables; // (needed to get correct model likelihood)",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:57,Testability,Test,TestStatSampler,57,"// ***** ToyMCSampler specific *******; // check whether TestStatSampler is a ToyMCSampler",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:3,Modifiability,variab,variable,3,"// variable number of toys",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:3,Energy Efficiency,adapt,adaptive,3,"// adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:3,Modifiability,adapt,adaptive,3,"// adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:11,Energy Efficiency,adapt,adaptive,11,"// disable adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:11,Modifiability,adapt,adaptive,11,"// disable adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/FrequentistCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/Heaviside.cxx:32,Modifiability,VARIAB,VARIABLE,32,"// ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE",MatchSource.CODE_COMMENT,roofit/roostats/src/Heaviside.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/Heaviside.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:133,Deployability,configurat,configuration,133,/** \class RooStats::HLFactory; \ingroup Roostats. HLFactory is an High Level model Factory allows you to; describe your models in a configuration file; (_datacards_) acting as an interface with the RooFactoryWSTool.; Moreover it provides tools for the combination of models and datasets. */,MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:180,Integrability,interface,interface,180,/** \class RooStats::HLFactory; \ingroup Roostats. HLFactory is an High Level model Factory allows you to; describe your models in a configuration file; (_datacards_) acting as an interface with the RooFactoryWSTool.; Moreover it provides tools for the combination of models and datasets. */,MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:133,Modifiability,config,configuration,133,/** \class RooStats::HLFactory; \ingroup Roostats. HLFactory is an High Level model Factory allows you to; describe your models in a configuration file; (_datacards_) acting as an interface with the RooFactoryWSTool.; Moreover it provides tools for the combination of models and datasets. */,MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:119,Modifiability,config,config,119,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with the name of the config file to interpret and the; /// verbosity flag. The extension for the config files is assumed to; /// be "".rs"".",MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:195,Modifiability,config,config,195,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with the name of the config file to interpret and the; /// verbosity flag. The extension for the config files is assumed to; /// be "".rs"".",MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:108,Deployability,configurat,configuration,108,"////////////////////////////////////////////////////////////////////////////////; /// Process an additional configuration file",MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:108,Modifiability,config,configuration,108,"////////////////////////////////////////////////////////////////////////////////; /// Process an additional configuration file",MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:1121,Availability,echo,echo,1121,"////////////////////////////////////////////////////////////////////////////////; /// Parses the configuration file. The objects can be specified following; /// the rules of the RooFactoryWSTool, plus some more flexibility.; ///; /// The official format for the datacards is "".rs"".; ///; /// All the instructions end with a "";"" (like in C++).; ///; /// Carriage returns and white lines are irrelevant but advised since they; /// improve readability (like in C++).; ///; /// The `(Roo)ClassName::objname(description)` can be replaced with the more; /// ""pythonic"" `objname = (Roo)ClassName(description)`.; ///; /// The comments can be specified with a ""//"" if on a single line or with; /// ""multiple lines"" in C/C++ like comments.; ///; /// The `""#include path/to/file.rs""` statement triggers the inclusion of a; /// configuration fragment.; ///; /// The `""import myobject:myworkspace:myrootfile""` will add to the Workspace; /// the object myobject located in myworkspace recorded in myrootfile.; /// Alternatively, one could choose the `""import myobject:myrootfile""` in case; /// no Workspace is present.; ///; /// The `""echo""` statement prompts a message on screen.",MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:97,Deployability,configurat,configuration,97,"////////////////////////////////////////////////////////////////////////////////; /// Parses the configuration file. The objects can be specified following; /// the rules of the RooFactoryWSTool, plus some more flexibility.; ///; /// The official format for the datacards is "".rs"".; ///; /// All the instructions end with a "";"" (like in C++).; ///; /// Carriage returns and white lines are irrelevant but advised since they; /// improve readability (like in C++).; ///; /// The `(Roo)ClassName::objname(description)` can be replaced with the more; /// ""pythonic"" `objname = (Roo)ClassName(description)`.; ///; /// The comments can be specified with a ""//"" if on a single line or with; /// ""multiple lines"" in C/C++ like comments.; ///; /// The `""#include path/to/file.rs""` statement triggers the inclusion of a; /// configuration fragment.; ///; /// The `""import myobject:myworkspace:myrootfile""` will add to the Workspace; /// the object myobject located in myworkspace recorded in myrootfile.; /// Alternatively, one could choose the `""import myobject:myrootfile""` in case; /// no Workspace is present.; ///; /// The `""echo""` statement prompts a message on screen.",MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:816,Deployability,configurat,configuration,816,"////////////////////////////////////////////////////////////////////////////////; /// Parses the configuration file. The objects can be specified following; /// the rules of the RooFactoryWSTool, plus some more flexibility.; ///; /// The official format for the datacards is "".rs"".; ///; /// All the instructions end with a "";"" (like in C++).; ///; /// Carriage returns and white lines are irrelevant but advised since they; /// improve readability (like in C++).; ///; /// The `(Roo)ClassName::objname(description)` can be replaced with the more; /// ""pythonic"" `objname = (Roo)ClassName(description)`.; ///; /// The comments can be specified with a ""//"" if on a single line or with; /// ""multiple lines"" in C/C++ like comments.; ///; /// The `""#include path/to/file.rs""` statement triggers the inclusion of a; /// configuration fragment.; ///; /// The `""import myobject:myworkspace:myrootfile""` will add to the Workspace; /// the object myobject located in myworkspace recorded in myrootfile.; /// Alternatively, one could choose the `""import myobject:myrootfile""` in case; /// no Workspace is present.; ///; /// The `""echo""` statement prompts a message on screen.",MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:1148,Integrability,message,message,1148,"////////////////////////////////////////////////////////////////////////////////; /// Parses the configuration file. The objects can be specified following; /// the rules of the RooFactoryWSTool, plus some more flexibility.; ///; /// The official format for the datacards is "".rs"".; ///; /// All the instructions end with a "";"" (like in C++).; ///; /// Carriage returns and white lines are irrelevant but advised since they; /// improve readability (like in C++).; ///; /// The `(Roo)ClassName::objname(description)` can be replaced with the more; /// ""pythonic"" `objname = (Roo)ClassName(description)`.; ///; /// The comments can be specified with a ""//"" if on a single line or with; /// ""multiple lines"" in C/C++ like comments.; ///; /// The `""#include path/to/file.rs""` statement triggers the inclusion of a; /// configuration fragment.; ///; /// The `""import myobject:myworkspace:myrootfile""` will add to the Workspace; /// the object myobject located in myworkspace recorded in myrootfile.; /// Alternatively, one could choose the `""import myobject:myrootfile""` in case; /// no Workspace is present.; ///; /// The `""echo""` statement prompts a message on screen.",MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:97,Modifiability,config,configuration,97,"////////////////////////////////////////////////////////////////////////////////; /// Parses the configuration file. The objects can be specified following; /// the rules of the RooFactoryWSTool, plus some more flexibility.; ///; /// The official format for the datacards is "".rs"".; ///; /// All the instructions end with a "";"" (like in C++).; ///; /// Carriage returns and white lines are irrelevant but advised since they; /// improve readability (like in C++).; ///; /// The `(Roo)ClassName::objname(description)` can be replaced with the more; /// ""pythonic"" `objname = (Roo)ClassName(description)`.; ///; /// The comments can be specified with a ""//"" if on a single line or with; /// ""multiple lines"" in C/C++ like comments.; ///; /// The `""#include path/to/file.rs""` statement triggers the inclusion of a; /// configuration fragment.; ///; /// The `""import myobject:myworkspace:myrootfile""` will add to the Workspace; /// the object myobject located in myworkspace recorded in myrootfile.; /// Alternatively, one could choose the `""import myobject:myrootfile""` in case; /// no Workspace is present.; ///; /// The `""echo""` statement prompts a message on screen.",MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:816,Modifiability,config,configuration,816,"////////////////////////////////////////////////////////////////////////////////; /// Parses the configuration file. The objects can be specified following; /// the rules of the RooFactoryWSTool, plus some more flexibility.; ///; /// The official format for the datacards is "".rs"".; ///; /// All the instructions end with a "";"" (like in C++).; ///; /// Carriage returns and white lines are irrelevant but advised since they; /// improve readability (like in C++).; ///; /// The `(Roo)ClassName::objname(description)` can be replaced with the more; /// ""pythonic"" `objname = (Roo)ClassName(description)`.; ///; /// The comments can be specified with a ""//"" if on a single line or with; /// ""multiple lines"" in C/C++ like comments.; ///; /// The `""#include path/to/file.rs""` statement triggers the inclusion of a; /// configuration fragment.; ///; /// The `""import myobject:myworkspace:myrootfile""` will add to the Workspace; /// the object myobject located in myworkspace recorded in myrootfile.; /// Alternatively, one could choose the `""import myobject:myrootfile""` in case; /// no Workspace is present.; ///; /// The `""echo""` statement prompts a message on screen.",MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:12,Modifiability,config,config,12,"// open the config file and go through it",MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:17,Availability,echo,echo,17,"// Do we have an echo statement? ""A la RooFit""",MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:185,Availability,error,error,185,"////////////////////////////////////////////////////////////////////////////////; /// Check the number of entries in each list. If not the same and the list; /// is not empty prompt an error.",MatchSource.CODE_COMMENT,roofit/roostats/src/HLFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:599,Testability,test,test,599,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HybridCalculator; \ingroup Roostats. Same purpose as HybridCalculatorOriginal, but different implementation. This class implements the Hypothesis test calculation using an hybrid; (frequentist/bayesian) procedure.A frequentist sampling of the test statistic; distribution is obtained but with marginalization of the nuisance parameters.; The toys are generated by sampling the nuisance parameters according to their; prior distribution. The use of the of ToyMCSampler as the TestStatSampler is assumed. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:696,Testability,test,test,696,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HybridCalculator; \ingroup Roostats. Same purpose as HybridCalculatorOriginal, but different implementation. This class implements the Hypothesis test calculation using an hybrid; (frequentist/bayesian) procedure.A frequentist sampling of the test statistic; distribution is obtained but with marginalization of the nuisance parameters.; The toys are generated by sampling the nuisance parameters according to their; prior distribution. The use of the of ToyMCSampler as the TestStatSampler is assumed. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:928,Testability,Test,TestStatSampler,928,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HybridCalculator; \ingroup Roostats. Same purpose as HybridCalculatorOriginal, but different implementation. This class implements the Hypothesis test calculation using an hybrid; (frequentist/bayesian) procedure.A frequentist sampling of the test statistic; distribution is obtained but with marginalization of the nuisance parameters.; The toys are generated by sampling the nuisance parameters according to their; prior distribution. The use of the of ToyMCSampler as the TestStatSampler is assumed. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:3,Availability,error,error,3,"// error",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:3,Availability,error,error,3,"// error",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:14,Testability,Test,TestStatSampler,14,"// ****** any TestStatSampler ********",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:57,Testability,Test,TestStatSampler,57,"// ***** ToyMCSampler specific *******; // check whether TestStatSampler is a ToyMCSampler",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:3,Modifiability,variab,variable,3,"// variable number of toys",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:3,Energy Efficiency,adapt,adaptive,3,"// adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:3,Modifiability,adapt,adaptive,3,"// adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:11,Energy Efficiency,adapt,adaptive,11,"// disable adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:11,Modifiability,adapt,adaptive,11,"// disable adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:14,Testability,Test,TestStatSampler,14,"// ****** any TestStatSampler ********",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:57,Testability,Test,TestStatSampler,57,"// ***** ToyMCSampler specific *******; // check whether TestStatSampler is a ToyMCSampler",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:3,Modifiability,variab,variable,3,"// variable number of toys",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:3,Energy Efficiency,adapt,adaptive,3,"// adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:3,Modifiability,adapt,adaptive,3,"// adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:11,Energy Efficiency,adapt,adaptive,11,"// disable adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:11,Modifiability,adapt,adaptive,11,"// disable adaptive sampling",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridPlot.cxx:258,Availability,avail,available,258,"// @(#)root/hist:$Id$; /** \class RooStats::HybridPlot; \ingroup Roostats. This class provides the plots for the result of a study performed with the; HybridCalculatorOriginal class. Authors: D. Piparo, G. Schott - Universitaet Karlsruhe. An example plot is available here:; http://www-ekp.physik.uni-karlsruhe.de/~schott/roostats/hybridplot_example.png; */",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridPlot.cxx:131,Performance,perform,performed,131,"// @(#)root/hist:$Id$; /** \class RooStats::HybridPlot; \ingroup Roostats. This class provides the plots for the result of a study performed with the; HybridCalculatorOriginal class. Authors: D. Piparo, G. Schott - Universitaet Karlsruhe. An example plot is available here:; http://www-ekp.physik.uni-karlsruhe.de/~schott/roostats/hybridplot_example.png; */",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridPlot.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform 2 times a gaussian fit to fetch the center of the histo.; /// To get the second fit range get an interval that tries to keep into account; /// the skewness of the distribution.",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridPlot.cxx:114,Availability,down,down,114,"////////////////////////////////////////////////////////////////////////////////; /// We let an horizontal bar go down and we stop when we have the integral; /// equal to the desired one.",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:890,Availability,error,error,890,"// @(#)root/roostats:$Id$; /*************************************************************************; * Project: RooStats *; * Package: RooFit/RooStats *; * Authors: *; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke *; *************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HybridResult; \ingroup Roostats. Class encapsulating the result of the HybridCalculatorOriginal.; This class is a fresh rewrite in RooStats of; RooStatsCms/LimitResults developed by D. Piparo and G. Schott; New contributions to this class have been written by Matthias Wolf (error estimation). The objects of this class store and access with lightweight methods the; information calculated by LimitResults through a Lent calculation using; MC toy experiments.; In some ways can be considered an extended and extensible implementation of; TConfidenceLevel.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:735,Modifiability,rewrite,rewrite,735,"// @(#)root/roostats:$Id$; /*************************************************************************; * Project: RooStats *; * Package: RooFit/RooStats *; * Authors: *; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke *; *************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HybridResult; \ingroup Roostats. Class encapsulating the result of the HybridCalculatorOriginal.; This class is a fresh rewrite in RooStats of; RooStatsCms/LimitResults developed by D. Piparo and G. Schott; New contributions to this class have been written by Matthias Wolf (error estimation). The objects of this class store and access with lightweight methods the; information calculated by LimitResults through a Lent calculation using; MC toy experiments.; In some ways can be considered an extended and extensible implementation of; TConfidenceLevel.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:1110,Modifiability,extend,extended,1110,"// @(#)root/roostats:$Id$; /*************************************************************************; * Project: RooStats *; * Package: RooFit/RooStats *; * Authors: *; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke *; *************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HybridResult; \ingroup Roostats. Class encapsulating the result of the HybridCalculatorOriginal.; This class is a fresh rewrite in RooStats of; RooStatsCms/LimitResults developed by D. Piparo and G. Schott; New contributions to this class have been written by Matthias Wolf (error estimation). The objects of this class store and access with lightweight methods the; information calculated by LimitResults through a Lent calculation using; MC toy experiments.; In some ways can be considered an extended and extensible implementation of; TConfidenceLevel.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:945,Security,access,access,945,"// @(#)root/roostats:$Id$; /*************************************************************************; * Project: RooStats *; * Package: RooFit/RooStats *; * Authors: *; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke *; *************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HybridResult; \ingroup Roostats. Class encapsulating the result of the HybridCalculatorOriginal.; This class is a fresh rewrite in RooStats of; RooStatsCms/LimitResults developed by D. Piparo and G. Schott; New contributions to this class have been written by Matthias Wolf (error estimation). The objects of this class store and access with lightweight methods the; information calculated by LimitResults through a Lent calculation using; MC toy experiments.; In some ways can be considered an extended and extensible implementation of; TConfidenceLevel.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:15,Modifiability,Extend,Extended,15,"// for RooFit::Extended()",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:107,Testability,test,test,107,"////////////////////////////////////////////////////////////////////////////////; /// set the value of the test statistics on data",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:113,Availability,error,error,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns an estimate of the error on \f$CL_{b}\f$ assuming a binomial; /// error on \f$CL_{b}\f$:; /// \f[; /// \sigma_{CL_{b}} = \sqrt{CL_{b} \left( 1 - CL_{b} \right) / n_{toys}}; /// \f]",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:160,Availability,error,error,160,"////////////////////////////////////////////////////////////////////////////////; /// Returns an estimate of the error on \f$CL_{b}\f$ assuming a binomial; /// error on \f$CL_{b}\f$:; /// \f[; /// \sigma_{CL_{b}} = \sqrt{CL_{b} \left( 1 - CL_{b} \right) / n_{toys}}; /// \f]",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:113,Availability,error,error,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns an estimate of the error on \f$CL_{s+b}\f$ assuming a binomial; /// error on \f$CL_{s+b}\f$:; /// \f[; /// \sigma_{CL_{s+b}} = \sqrt{CL_{s+b} \left( 1 - CL_{s+b} \right) / n_{toys}}; /// \f]",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:162,Availability,error,error,162,"////////////////////////////////////////////////////////////////////////////////; /// Returns an estimate of the error on \f$CL_{s+b}\f$ assuming a binomial; /// error on \f$CL_{s+b}\f$:; /// \f[; /// \sigma_{CL_{s+b}} = \sqrt{CL_{s+b} \left( 1 - CL_{s+b} \right) / n_{toys}}; /// \f]",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:113,Availability,error,error,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns an estimate of the error on \f$CL_{s}\f$ through combination; /// of the errors on \f$CL_{b}\f$ and \f$CL_{s+b}\f$:; /// \f[; /// \sigma_{CL_s} = CL_s \sqrt{\left( \frac{\sigma_{CL_{s+b}}}{CL_{s+b}} \right)^2 + \left( \frac{\sigma_{CL_{b}}}{CL_{b}} \right)^2}; /// \f]",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:167,Availability,error,errors,167,"////////////////////////////////////////////////////////////////////////////////; /// Returns an estimate of the error on \f$CL_{s}\f$ through combination; /// of the errors on \f$CL_{b}\f$ and \f$CL_{s+b}\f$:; /// \f[; /// \sigma_{CL_s} = CL_s \sqrt{\left( \frac{\sigma_{CL_{s+b}}}{CL_{s+b}} \right)^2 + \left( \frac{\sigma_{CL_{b}}}{CL_{b}} \right)^2}; /// \f]",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:161,Testability,test,test,161,"////////////////////////////////////////////////////////////////////////////////; /// add additional toy-MC experiments to the current results; /// use the data test statistics of the added object if none is already present; /// (otherwise, ignore the new one)",MatchSource.CODE_COMMENT,roofit/roostats/src/HybridResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:536,Testability,Test,Test,536,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestCalculatorGeneric; \ingroup Roostats. Common base class for the Hypothesis Test Calculators.; It is not designed to use directly but via its derived classes. Same purpose as HybridCalculatorOriginal, but different implementation. This is the ""generic"" version that works with any TestStatSampler. The; HybridCalculator derives from this class but explicitly uses the; ToyMCSampler as its TestStatSampler. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:741,Testability,Test,TestStatSampler,741,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestCalculatorGeneric; \ingroup Roostats. Common base class for the Hypothesis Test Calculators.; It is not designed to use directly but via its derived classes. Same purpose as HybridCalculatorOriginal, but different implementation. This is the ""generic"" version that works with any TestStatSampler. The; HybridCalculator derives from this class but explicitly uses the; ToyMCSampler as its TestStatSampler. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:849,Testability,Test,TestStatSampler,849,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestCalculatorGeneric; \ingroup Roostats. Common base class for the Hypothesis Test Calculators.; It is not designed to use directly but via its derived classes. Same purpose as HybridCalculatorOriginal, but different implementation. This is the ""generic"" version that works with any TestStatSampler. The; HybridCalculator derives from this class but explicitly uses the; ToyMCSampler as its TestStatSampler. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:104,Testability,test,test,104,"////////////////////////////////////////////////////////////////////////////////; /// Constructor. When test stat sampler is not provided; /// uses ToyMCSampler and RatioOfProfiledLikelihoodsTestStat; /// and nToys = 1000.; /// User can : GetTestStatSampler()->SetNToys( # )",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:223,Availability,error,error,223,"////////////////////////////////////////////////////////////////////////////////; /// several possibilities:; /// no prior nuisance given and no nuisance parameters: ok; /// no prior nuisance given but nuisance parameters: error; /// prior nuisance given for some nuisance parameters:; /// - nuisance parameters are constant, so they don't float in test statistic; /// - nuisance parameters are floating, so they do float in test statistic",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:349,Testability,test,test,349,"////////////////////////////////////////////////////////////////////////////////; /// several possibilities:; /// no prior nuisance given and no nuisance parameters: ok; /// no prior nuisance given but nuisance parameters: error; /// prior nuisance given for some nuisance parameters:; /// - nuisance parameters are constant, so they don't float in test statistic; /// - nuisance parameters are floating, so they do float in test statistic",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:425,Testability,test,test,425,"////////////////////////////////////////////////////////////////////////////////; /// several possibilities:; /// no prior nuisance given and no nuisance parameters: ok; /// no prior nuisance given but nuisance parameters: error; /// prior nuisance given for some nuisance parameters:; /// - nuisance parameters are constant, so they don't float in test statistic; /// - nuisance parameters are floating, so they do float in test statistic",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:25,Modifiability,variab,variables,25,"// get a big list of all variables for convenient switching",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:12,Testability,test,test,12,"// evaluate test statistic on data",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:38,Testability,Test,Test,38,"//oocoutP(nullptr,Generation) << ""All Test Statistics on data: "" << endl;; //allTS->Print(""v"");",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:57,Testability,test,test,57,"// set parameters back ... in case the evaluation of the test statistic; // modified something (e.g. a nuisance parameter that is not randomized; // must be set here)",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:11,Safety,avoid,avoid,11,"// want to avoid zero value",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:981,Integrability,interface,interface,981,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; // Contributions: Giovanni Petrucciani and Annapaola Decosa; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverter; \ingroup Roostats. A class for performing a hypothesis test inversion by scanning; the hypothesis test results of a HypoTestCalculator for various values of the; parameter of interest. By looking at the confidence level curve of the result, an; upper limit can be derived by computing the intersection of the confidence level curve with the desired confidence level.; The class implements the RooStats::IntervalCalculator interface, and returns a; RooStats::HypoTestInverterResult. The result is a SimpleInterval, which; via the method UpperLimit() returns to the user the upper limit value. ## Scanning options; The HypoTestInverter implements various options for performing the scan.; - HypoTestInverter::RunFixedScan will scan the parameter of interest using a fixed grid.; - HypoTestInverter::SetAutoScan will perform an automatic scan to find; optimally the curve. It will stop when the desired precision is obtained.; - HypoTestInverter::RunOnePoint computes the confidence level at a given point. ### CLs presciption; The class can scan the CLs+b values or alternatively CLs. For the latter,; call HypoTestInverter::UseCLs().; */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:590,Performance,perform,performing,590,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; // Contributions: Giovanni Petrucciani and Annapaola Decosa; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverter; \ingroup Roostats. A class for performing a hypothesis test inversion by scanning; the hypothesis test results of a HypoTestCalculator for various values of the; parameter of interest. By looking at the confidence level curve of the result, an; upper limit can be derived by computing the intersection of the confidence level curve with the desired confidence level.; The class implements the RooStats::IntervalCalculator interface, and returns a; RooStats::HypoTestInverterResult. The result is a SimpleInterval, which; via the method UpperLimit() returns to the user the upper limit value. ## Scanning options; The HypoTestInverter implements various options for performing the scan.; - HypoTestInverter::RunFixedScan will scan the parameter of interest using a fixed grid.; - HypoTestInverter::SetAutoScan will perform an automatic scan to find; optimally the curve. It will stop when the desired precision is obtained.; - HypoTestInverter::RunOnePoint computes the confidence level at a given point. ### CLs presciption; The class can scan the CLs+b values or alternatively CLs. For the latter,; call HypoTestInverter::UseCLs().; */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:1224,Performance,perform,performing,1224,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; // Contributions: Giovanni Petrucciani and Annapaola Decosa; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverter; \ingroup Roostats. A class for performing a hypothesis test inversion by scanning; the hypothesis test results of a HypoTestCalculator for various values of the; parameter of interest. By looking at the confidence level curve of the result, an; upper limit can be derived by computing the intersection of the confidence level curve with the desired confidence level.; The class implements the RooStats::IntervalCalculator interface, and returns a; RooStats::HypoTestInverterResult. The result is a SimpleInterval, which; via the method UpperLimit() returns to the user the upper limit value. ## Scanning options; The HypoTestInverter implements various options for performing the scan.; - HypoTestInverter::RunFixedScan will scan the parameter of interest using a fixed grid.; - HypoTestInverter::SetAutoScan will perform an automatic scan to find; optimally the curve. It will stop when the desired precision is obtained.; - HypoTestInverter::RunOnePoint computes the confidence level at a given point. ### CLs presciption; The class can scan the CLs+b values or alternatively CLs. For the latter,; call HypoTestInverter::UseCLs().; */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:1373,Performance,perform,perform,1373,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; // Contributions: Giovanni Petrucciani and Annapaola Decosa; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverter; \ingroup Roostats. A class for performing a hypothesis test inversion by scanning; the hypothesis test results of a HypoTestCalculator for various values of the; parameter of interest. By looking at the confidence level curve of the result, an; upper limit can be derived by computing the intersection of the confidence level curve with the desired confidence level.; The class implements the RooStats::IntervalCalculator interface, and returns a; RooStats::HypoTestInverterResult. The result is a SimpleInterval, which; via the method UpperLimit() returns to the user the upper limit value. ## Scanning options; The HypoTestInverter implements various options for performing the scan.; - HypoTestInverter::RunFixedScan will scan the parameter of interest using a fixed grid.; - HypoTestInverter::SetAutoScan will perform an automatic scan to find; optimally the curve. It will stop when the desired precision is obtained.; - HypoTestInverter::RunOnePoint computes the confidence level at a given point. ### CLs presciption; The class can scan the CLs+b values or alternatively CLs. For the latter,; call HypoTestInverter::UseCLs().; */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:614,Testability,test,test,614,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; // Contributions: Giovanni Petrucciani and Annapaola Decosa; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverter; \ingroup Roostats. A class for performing a hypothesis test inversion by scanning; the hypothesis test results of a HypoTestCalculator for various values of the; parameter of interest. By looking at the confidence level curve of the result, an; upper limit can be derived by computing the intersection of the confidence level curve with the desired confidence level.; The class implements the RooStats::IntervalCalculator interface, and returns a; RooStats::HypoTestInverterResult. The result is a SimpleInterval, which; via the method UpperLimit() returns to the user the upper limit value. ## Scanning options; The HypoTestInverter implements various options for performing the scan.; - HypoTestInverter::RunFixedScan will scan the parameter of interest using a fixed grid.; - HypoTestInverter::SetAutoScan will perform an automatic scan to find; optimally the curve. It will stop when the desired precision is obtained.; - HypoTestInverter::RunOnePoint computes the confidence level at a given point. ### CLs presciption; The class can scan the CLs+b values or alternatively CLs. For the latter,; call HypoTestInverter::UseCLs().; */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:657,Testability,test,test,657,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; // Contributions: Giovanni Petrucciani and Annapaola Decosa; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverter; \ingroup Roostats. A class for performing a hypothesis test inversion by scanning; the hypothesis test results of a HypoTestCalculator for various values of the; parameter of interest. By looking at the confidence level curve of the result, an; upper limit can be derived by computing the intersection of the confidence level curve with the desired confidence level.; The class implements the RooStats::IntervalCalculator interface, and returns a; RooStats::HypoTestInverterResult. The result is a SimpleInterval, which; via the method UpperLimit() returns to the user the upper limit value. ## Scanning options; The HypoTestInverter implements various options for performing the scan.; - HypoTestInverter::RunFixedScan will scan the parameter of interest using a fixed grid.; - HypoTestInverter::SetAutoScan will perform an automatic scan to find; optimally the curve. It will stop when the desired precision is obtained.; - HypoTestInverter::RunOnePoint computes the confidence level at a given point. ### CLs presciption; The class can scan the CLs+b values or alternatively CLs. For the latter,; call HypoTestInverter::UseCLs().; */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:1057,Usability,Simpl,SimpleInterval,1057,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; // Contributions: Giovanni Petrucciani and Annapaola Decosa; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverter; \ingroup Roostats. A class for performing a hypothesis test inversion by scanning; the hypothesis test results of a HypoTestCalculator for various values of the; parameter of interest. By looking at the confidence level curve of the result, an; upper limit can be derived by computing the intersection of the confidence level curve with the desired confidence level.; The class implements the RooStats::IntervalCalculator interface, and returns a; RooStats::HypoTestInverterResult. The result is a SimpleInterval, which; via the method UpperLimit() returns to the user the upper limit value. ## Scanning options; The HypoTestInverter implements various options for performing the scan.; - HypoTestInverter::RunFixedScan will scan the parameter of interest using a fixed grid.; - HypoTestInverter::SetAutoScan will perform an automatic scan to find; optimally the curve. It will stop when the desired precision is obtained.; - HypoTestInverter::RunOnePoint computes the confidence level at a given point. ### CLs presciption; The class can scan the CLs+b values or alternatively CLs. For the latter,; call HypoTestInverter::UseCLs().; */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:10,Modifiability,variab,variable,10,"// static variable definitions",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:19,Integrability,wrap,wrap,19,"// helper class to wrap the functionality of the various HypoTestCalculators",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:94,Modifiability,variab,variable,94,"////////////////////////////////////////////////////////////////////////////////; /// get the variable to scan; /// try first with null model if not go to alternate model",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:390,Modifiability,variab,variable,390,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a HypoTestCalculatorGeneric; /// The HypoTest calculator must be a FrequentistCalculator or HybridCalculator type; /// Other type of calculators are not supported.; /// The calculator must be created before by using the S+B model for the null and; /// the B model for the alt; /// If no variable to scan are given they are assumed to be the first variable; /// from the parameter of interests of the null model",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:450,Modifiability,variab,variable,450,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a HypoTestCalculatorGeneric; /// The HypoTest calculator must be a FrequentistCalculator or HybridCalculator type; /// Other type of calculators are not supported.; /// The calculator must be created before by using the S+B model for the null and; /// the B model for the alt; /// If no variable to scan are given they are assumed to be the first variable; /// from the parameter of interests of the null model",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:260,Modifiability,variab,variable,260,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a reference to a HybridCalculator; /// The calculator must be created before by using the S+B model for the null and; /// the B model for the alt; /// If no variable to scan are given they are assumed to be the first variable; /// from the parameter of interests of the null model",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:320,Modifiability,variab,variable,320,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a reference to a HybridCalculator; /// The calculator must be created before by using the S+B model for the null and; /// the B model for the alt; /// If no variable to scan are given they are assumed to be the first variable; /// from the parameter of interests of the null model",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:265,Modifiability,variab,variable,265,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a reference to a FrequentistCalculator; /// The calculator must be created before by using the S+B model for the null and; /// the B model for the alt; /// If no variable to scan are given they are assumed to be the first variable; /// from the parameter of interests of the null model",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:325,Modifiability,variab,variable,325,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a reference to a FrequentistCalculator; /// The calculator must be created before by using the S+B model for the null and; /// the B model for the alt; /// If no variable to scan are given they are assumed to be the first variable; /// from the parameter of interests of the null model",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:264,Modifiability,variab,variable,264,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a reference to a AsymptoticCalculator; /// The calculator must be created before by using the S+B model for the null and; /// the B model for the alt; /// If no variable to scan are given they are assumed to be the first variable; /// from the parameter of interests of the null model",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:324,Modifiability,variab,variable,324,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a reference to a AsymptoticCalculator; /// The calculator must be created before by using the S+B model for the null and; /// the B model for the alt; /// If no variable to scan are given they are assumed to be the first variable; /// from the parameter of interests of the null model",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:291,Modifiability,variab,variable,291,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a model for B model and a model for S+B.; /// An HypoTestCalculator (Hybrid of Frequentis) will be created using the; /// S+B model as the null and the B model as the alternate; /// If no variable to scan are given they are assumed to be the first variable; /// from the parameter of interests of the null model",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:351,Modifiability,variab,variable,351,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a model for B model and a model for S+B.; /// An HypoTestCalculator (Hybrid of Frequentis) will be created using the; /// S+B model as the null and the B model as the alternate; /// If no variable to scan are given they are assumed to be the first variable; /// from the parameter of interests of the null model",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:15,Modifiability,variab,variable,15,"// get scanned variable",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:255,Availability,alive,alive,255,"////////////////////////////////////////////////////////////////////////////////; /// copy-constructor; /// NOTE: this class does not copy the contained result and; /// the HypoTestCalculator, but only the pointers; /// It requires the original HTI to be alive",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:258,Availability,alive,alive,258,"////////////////////////////////////////////////////////////////////////////////; /// assignment operator; /// NOTE: this class does not copy the contained result and; /// the HypoTestCalculator, but only the pointers; /// It requires the original HTI to be alive",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// return the test statistic which is or will be used by the class",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:94,Testability,test,test,94,"////////////////////////////////////////////////////////////////////////////////; /// set the test statistic to use",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:142,Deployability,configurat,configuration,142,"////////////////////////////////////////////////////////////////////////////////; /// Run a fixed scan or the automatic scan depending on the configuration.; /// Return if needed a copy of the result object which will be managed by the user.",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:125,Integrability,depend,depending,125,"////////////////////////////////////////////////////////////////////////////////; /// Run a fixed scan or the automatic scan depending on the configuration.; /// Return if needed a copy of the result object which will be managed by the user.",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:142,Modifiability,config,configuration,142,"////////////////////////////////////////////////////////////////////////////////; /// Run a fixed scan or the automatic scan depending on the configuration.; /// Return if needed a copy of the result object which will be managed by the user.",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:124,Modifiability,config,configured,124,"////////////////////////////////////////////////////////////////////////////////; /// Run the Hypothesis test at a previous configured point; /// (internal function called by RunOnePoint)",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:105,Testability,test,test,105,"////////////////////////////////////////////////////////////////////////////////; /// Run the Hypothesis test at a previous configured point; /// (internal function called by RunOnePoint)",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:480,Testability,test,test,480,"//for debug; // std::cout << "">>>>>>>>>>> "" << std::endl;; // std::cout << ""alternate model "" << std::endl;; // hc.GetAlternateModel()->GetNuisanceParameters()->Print(""V"");; // hc.GetAlternateModel()->GetParametersOfInterest()->Print(""V"");; // std::cout << ""Null model "" << std::endl;; // hc.GetNullModel()->GetNuisanceParameters()->Print(""V"");; // hc.GetNullModel()->GetParametersOfInterest()->Print(""V"");; // std::cout << ""<<<<<<<<<<<<<<< "" << std::endl;; // run the hypothesis test",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:150,Availability,error,error,150,"// bool flipPvalue = false;; // if (flipPValues); // hcResult->SetPValueIsRightTail(!hcResult->GetPValueIsRightTail());; // adjust for some numerical error in discrete models and == is not anymore",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:3,Safety,safe,safety,3,"// safety checks",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:3,Safety,avoid,avoids,3,"// avoids case of nBins = 1",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:11,Testability,log,log,11,"// scan in log x",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:11,Integrability,message,message,11,"// print a message when you have a significative difference since rval is computed",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:530,Availability,error,error,530,"////////////////////////////////////////////////////////////////////////////////; /// Run an automatic scan until the desired accuracy is reached.; /// Start by default from the full interval (min,max) of the POI and then via bisection find the line crossing; /// the target line.; /// Optionally, a hint can be provided and the scan will be done closer to that value.; /// If by bisection the desired accuracy will not be reached, a fit to the points is performed.; /// \param[out] limit The limit.; /// \param[out] limitErr The error of the limit.; /// \param[in] absAccuracy Desired absolute accuracy.; /// \param[in] relAccuracy Desired relative accuracy.; /// \param[in] hint Hint to start from or nullptr for no hint.",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:455,Performance,perform,performed,455,"////////////////////////////////////////////////////////////////////////////////; /// Run an automatic scan until the desired accuracy is reached.; /// Start by default from the full interval (min,max) of the POI and then via bisection find the line crossing; /// the target line.; /// Optionally, a hint can be provided and the scan will be done closer to that value.; /// If by bisection the desired accuracy will not be reached, a fit to the points is performed.; /// \param[out] limit The limit.; /// \param[out] limitErr The error of the limit.; /// \param[in] absAccuracy Desired absolute accuracy.; /// \param[in] relAccuracy Desired relative accuracy.; /// \param[in] hint Hint to start from or nullptr for no hint.",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:3,Integrability,rout,routine,3,"// routine from G. Petrucciani (from HiggsCombination CMS package)",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:10,Energy Efficiency,reduce,reduce,10,"// try to reduce the size of the interval",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:3,Safety,sanity check,sanity check,3,"// sanity check fit result",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:531,Integrability,depend,depending,531,"////////////////////////////////////////////////////////////////////////////////; /// rebuild the sampling distributions by; /// generating some toys and find for each of them a new upper limit; /// Return the upper limit distribution and optionally also the pValue distributions for Cls, Clsb and Clbxs; /// as a TList for each scanned point; /// The method uses the present parameter value. It is user responsibility to give the current parameters to rebuild the distributions; /// It returns a upper or lower limit distribution depending on the isUpper flag, however it computes also the lower limit distribution and it is saved in the; /// output file as an histogram",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:10,Testability,test,test,10,"// set up test stat sampler in case of asymptotic calculator",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:36,Performance,cache,cache,36,"// need to set th epdf to clear the cache in ToyMCSampler; // pdf we must use is background pdf",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:26,Usability,clear,clear,26,"// need to set th epdf to clear the cache in ToyMCSampler; // pdf we must use is background pdf",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx:714,Testability,test,test,714,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverterPlot; \ingroup Roostats. Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. It can be used to plot the obtained p-values ( CLb, CLs+b or CLs) for each scanned point, as well as; the test statistic distributions (when a calculator based on pseudo-experiments is used) for the two; hypotheses. */; // include header file of this class",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx:184,Integrability,depend,depending,184,"////////////////////////////////////////////////////////////////////////////////; /// Make the plot of the result of the scan using the observed data.; /// By default plot CLs or CLsb depending if the flag UseCLs is set for the results; /// that are passed to this instance.; ///; /// \param opt Options according to following list:; /// - Empty: Return CLs or CLs+b depending on the value of UseCLs.ƒ; /// - ""CLB"": return CLb plot; /// - ""CLS+B"" / ""CLSPLUSB"": return CLs+b plot independently of the flag; /// - ""CLS"": return CLs plot independently of the flag",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx:367,Integrability,depend,depending,367,"////////////////////////////////////////////////////////////////////////////////; /// Make the plot of the result of the scan using the observed data.; /// By default plot CLs or CLsb depending if the flag UseCLs is set for the results; /// that are passed to this instance.; ///; /// \param opt Options according to following list:; /// - Empty: Return CLs or CLs+b depending on the value of UseCLs.ƒ; /// - ""CLB"": return CLb plot; /// - ""CLS+B"" / ""CLSPLUSB"": return CLs+b plot independently of the flag; /// - ""CLS"": return CLs plot independently of the flag",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx:360,Energy Efficiency,green,green,360,"////////////////////////////////////////////////////////////////////////////////; /// Make the expected plot and the bands; /// nsig1 and nsig2 indicates the n-sigma value for the bands; /// if nsig1 = 0 no band is drawn (only expected value); /// if nsig2 > nsig1 (default is nsig1=1 and nsig2=2) the second band is also drawn; /// The first band is drawn in green while the second in yellow; /// THe return result is a TMultiGraph object",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx:12,Availability,error,error,12,"// -1 sigma error",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx:11,Availability,error,error,11,"//+1 sigma error",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx:18,Availability,error,error,18,"// -2 -- -1 sigma error",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx:40,Safety,avoid,avoid,40,"// add object to top-level directory to avoid mem leak",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx:38,Safety,avoid,avoid,38,"// add object to current directory to avoid mem leak",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx:181,Testability,test,test,181,"////////////////////////////////////////////////////////////////////////////////; /// \param index Index of the result stored in HypoTestInverterResult; /// \param type Type of the test (see below); /// \param nbins Number of bins; /// - type =0 null and alt; /// - type = 1 only null (S+B); /// - type = 2 only alt (B)",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:661,Availability,avail,available,661,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverterResult; \ingroup Roostats. HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval.; Based on the RatioFinder code available in the RooStatsCms package developed by Gregory Schott and Danilo Piparo; Ported and adapted to RooStats by Gregory Schott; Some contributions to this class have been written by Matthias Wolf (error estimation). */; // include header file of this class",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:864,Availability,error,error,864,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverterResult; \ingroup Roostats. HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval.; Based on the RatioFinder code available in the RooStatsCms package developed by Gregory Schott and Danilo Piparo; Ported and adapted to RooStats by Gregory Schott; Some contributions to this class have been written by Matthias Wolf (error estimation). */; // include header file of this class",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:756,Energy Efficiency,adapt,adapted,756,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverterResult; \ingroup Roostats. HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval.; Based on the RatioFinder code available in the RooStatsCms package developed by Gregory Schott and Danilo Piparo; Ported and adapted to RooStats by Gregory Schott; Some contributions to this class have been written by Matthias Wolf (error estimation). */; // include header file of this class",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:756,Modifiability,adapt,adapted,756,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverterResult; \ingroup Roostats. HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval.; Based on the RatioFinder code available in the RooStatsCms package developed by Gregory Schott and Danilo Piparo; Ported and adapted to RooStats by Gregory Schott; Some contributions to this class have been written by Matthias Wolf (error estimation). */; // include header file of this class",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:582,Testability,test,test,582,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverterResult; \ingroup Roostats. HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval.; Based on the RatioFinder code available in the RooStatsCms package developed by Gregory Schott and Danilo Piparo; Ported and adapted to RooStats by Gregory Schott; Some contributions to this class have been written by Matthias Wolf (error estimation). */; // include header file of this class",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:32,Modifiability,variab,variable,32,"// put a cloned copy of scanned variable to set in the interval; // to avoid I/O problem of the Result class -; // make the set owning the cloned copy (use clone instead of Clone to not copying all links)",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:71,Safety,avoid,avoid,71,"// put a cloned copy of scanned variable to set in the interval; // to avoid I/O problem of the Result class -; // make the set owning the cloned copy (use clone instead of Clone to not copying all links)",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:837,Integrability,message,message,837,"////////////////////////////////////////////////////////////////////////////////; /// Merge this HypoTestInverterResult with another; /// HypoTestInverterResult passed as argument; /// The merge is done by combining the HypoTestResult when the same point value exist in both results.; /// If results exist at different points these are added in the new result; /// NOTE: Merging of the expected p-values obtained with pseudo-data.; /// When expected p-values exist in the result (i.e. when rebuild option is used when getting the expected; /// limit distribution in the HYpoTestInverter) then the expected p-values are also merged. This is equivalent; /// at merging the pseudo-data. However there can be an inconsistency if the expected p-values have been; /// obtained with different toys. In this case the merge is done but a warning message is printed.",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:48,Usability,simpl,simple,48,"// case current result is empty; // just make a simple copy of the other result",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:45,Testability,test,test,45,"// check if same toys have been used for the test statistic distribution",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:9,Performance,cache,cached,9,"// reset cached limit values",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:9,Performance,cache,cached,9,"// reset cached limit values",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:119,Availability,error,error,119,"////////////////////////////////////////////////////////////////////////////////; /// function to return the estimated error on the value of the confidence level for the i^th entry in the results",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:109,Availability,error,error,109,"////////////////////////////////////////////////////////////////////////////////; /// function to return the error on the observed CLb value for the i-th entry",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:109,Availability,error,error,109,"////////////////////////////////////////////////////////////////////////////////; /// function to return the error on the observed CLs+b value for the i-th entry",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:109,Availability,error,error,109,"////////////////////////////////////////////////////////////////////////////////; /// function to return the error on the observed CLs value for the i-th entry",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:193,Availability,toler,tolerance,193,"////////////////////////////////////////////////////////////////////////////////; /// find the index corresponding at the poi value xvalue; /// If no points is found return -1; /// Note that a tolerance is used of 10^-12 to find the closest point",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:109,Modifiability,variab,variable,109,"// distinguish the case we have lower /upper limits; // check if a possible crossing exists otherwise return variable min/max; // do lower extrapolation",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:164,Integrability,depend,depending,164,"////////////////////////////////////////////////////////////////////////////////; /// interpolate to find a limit value; /// Use a linear or a spline interpolation depending on the interpolation option",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:3,Modifiability,variab,variable,3,"// variable minimum and maximum",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:83,Integrability,rout,routine,83,"// now come here if I have already found a lower/upper limit; // i.e. I am calling routine for the second time",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:57,Integrability,rout,routine,57,"// compute now the limit using the TGraph interpolations routine",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:16,Availability,error,error,16,"// estimate the error",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:228,Performance,perform,perform,228,"// if (lowSearch && !TMath::IsNaN(fUpperLimit)) return fLowerLimit;; // if (!lowSearch && !TMath::IsNaN(fLowerLimit)) return fUpperLimit;; // // is this needed ?; // // we call again the function for the upper limits; // // now perform the opposite search on the complement interval; // if (lowSearch) {; // xmin = xmax;; // xmax = varmax;; // } else {; // xmax = xmin;; // xmin = varmin;; // }; // double limit2 = GetGraphX(graph, target, !lowSearch, xmin, xmax);; // if (!lowSearch) fLowerLimit = limit2;; // else fUpperLimit = limit2;; // CalculateEstimatedError( target, !lowSearch, xmin, xmax);; // #ifdef DO_DEBUG; // std::cout << ""other limit is "" << limit2 << std::endl;; // #endif; // return (lowSearch) ? fLowerLimit : fUpperLimit;",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:227,Availability,error,error,227,"////////////////////////////////////////////////////////////////////////////////; /// - if mode = 0; /// find closest point to target in Y, the object closest to the target which is 3 sigma from the target; /// and has smaller error; /// - if mode = 1; /// find 2 closest point to target in X and between these two take the one closer to the target; /// - if mode = 2 as in mode = 1 but return the lower point not the closest one; /// - if mode = 3 as in mode = 1 but return the upper point not the closest one",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:3,Availability,error,error,3,"// error must be < 1",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:96,Availability,error,error,96,"////////////////////////////////////////////////////////////////////////////////; /// Return an error estimate on the upper(lower) limit. This is the error on; /// either CLs or CLsplusb divided by an estimate of the slope at this; /// point.",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:150,Availability,error,error,150,"////////////////////////////////////////////////////////////////////////////////; /// Return an error estimate on the upper(lower) limit. This is the error on; /// either CLs or CLsplusb divided by an estimate of the slope at this; /// point.",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:72,Availability,error,errors,72,"// it does not make sense in case of asymptotic which do not have point errors",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:17,Availability,Error,Errors,17,"// make a TGraph Errors with the sorted points",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:42,Availability,error,errors,42,"// exclude points with zero or very small errors",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:24,Availability,error,error,24,"// try to recompute the error",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:24,Availability,error,error,24,"// try to recompute the error",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:105,Testability,test,test,105,"////////////////////////////////////////////////////////////////////////////////; /// get the background test statistic distribution",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:116,Testability,test,test,116,"////////////////////////////////////////////////////////////////////////////////; /// get the signal and background test statistic distribution",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:126,Integrability,depend,depending,126,"////////////////////////////////////////////////////////////////////////////////; /// get the limit distribution (lower/upper depending on the flag); /// by interpolating the expected p values for each point",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:119,Integrability,depend,depending,119,"////////////////////////////////////////////////////////////////////////////////; /// get expected limit (lower/upper) depending on the flag; /// for asymptotic is a special case (the distribution is generated an step in sigma values); /// distinguish asymptotic looking at the hypotest results; /// if option = ""P"" get expected limit using directly quantiles of p value distribution; /// else (default) find expected limit by obtaining first a full limit distributions; /// The last one is in general more correct",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestInverterResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestPlot.cxx:529,Performance,perform,performed,529,"// @(#)root/roostats:$Id$; // Author: Sven Kreiss June 2010; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestPlot; \ingroup Roostats. This class provides the plots for the result of a study performed with any of the; HypoTestCalculatorGeneric (e.g. HybridCalculator or FrequentistCalculator) class. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:2288,Energy Efficiency,power,powerful,2288,"****************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; *; *****************************************************************************/; /** \class RooStats::HypoTestResult; \ingroup Roostats. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only); and an alternate hypothesis (eg. signal+background).; The p-values can also be transformed into confidence levels; (\f$CL_{b}\f$, \f$CL_{s+b}\f$) in a trivial way.; The ratio of the \f$CL_{s+b}\f$ to \f$CL_{b}\f$ is often called; \f$CL_{s}\f$, and is considered useful, though it is not a probability.; Finally, the p-value of the null can be transformed into a number of; equivalent Gaussian sigma using the Significance method. The p-value of the null for a given test statistic is rigorously defined and; this is the starting point for the following conventions. ### Conventions used in this class. The p-value for the null and alternate are on the **same side** of the; observed value of the test statistic. This is the more standard; convention and avoids confusion when doing inverted tests. For exclusion, we also want the formula \f$CL_{s} = CL_{s+b} / CL_{b}\f$; to hold which therefore defines our conventions for \f$CL_{s+b}\f$ and; \f$CL_{b}\f$. \f$CL_{s}\f$ was specifically invented for exclusion; and therefore all quantities need be related through the assignments; as they are for exclusion: \f$CL_{s+b} = p_{s+b}\f$; \f$CL_{b} = p_{b}\f$. This; is derived by considering the scenarios of a powerful and not powerful; inverted test, where for the not so powerful test, \f$CL_{s}\f$ must be; close to one. For results of Hypothesis tests,; \f$CL_{s}\f$ has no similar direct interpretation as for exclusion and can; be larger than one. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:2305,Energy Efficiency,power,powerful,2305,"****************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; *; *****************************************************************************/; /** \class RooStats::HypoTestResult; \ingroup Roostats. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only); and an alternate hypothesis (eg. signal+background).; The p-values can also be transformed into confidence levels; (\f$CL_{b}\f$, \f$CL_{s+b}\f$) in a trivial way.; The ratio of the \f$CL_{s+b}\f$ to \f$CL_{b}\f$ is often called; \f$CL_{s}\f$, and is considered useful, though it is not a probability.; Finally, the p-value of the null can be transformed into a number of; equivalent Gaussian sigma using the Significance method. The p-value of the null for a given test statistic is rigorously defined and; this is the starting point for the following conventions. ### Conventions used in this class. The p-value for the null and alternate are on the **same side** of the; observed value of the test statistic. This is the more standard; convention and avoids confusion when doing inverted tests. For exclusion, we also want the formula \f$CL_{s} = CL_{s+b} / CL_{b}\f$; to hold which therefore defines our conventions for \f$CL_{s+b}\f$ and; \f$CL_{b}\f$. \f$CL_{s}\f$ was specifically invented for exclusion; and therefore all quantities need be related through the assignments; as they are for exclusion: \f$CL_{s+b} = p_{s+b}\f$; \f$CL_{b} = p_{b}\f$. This; is derived by considering the scenarios of a powerful and not powerful; inverted test, where for the not so powerful test, \f$CL_{s}\f$ must be; close to one. For results of Hypothesis tests,; \f$CL_{s}\f$ has no similar direct interpretation as for exclusion and can; be larger than one. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:2351,Energy Efficiency,power,powerful,2351,"****************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; *; *****************************************************************************/; /** \class RooStats::HypoTestResult; \ingroup Roostats. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only); and an alternate hypothesis (eg. signal+background).; The p-values can also be transformed into confidence levels; (\f$CL_{b}\f$, \f$CL_{s+b}\f$) in a trivial way.; The ratio of the \f$CL_{s+b}\f$ to \f$CL_{b}\f$ is often called; \f$CL_{s}\f$, and is considered useful, though it is not a probability.; Finally, the p-value of the null can be transformed into a number of; equivalent Gaussian sigma using the Significance method. The p-value of the null for a given test statistic is rigorously defined and; this is the starting point for the following conventions. ### Conventions used in this class. The p-value for the null and alternate are on the **same side** of the; observed value of the test statistic. This is the more standard; convention and avoids confusion when doing inverted tests. For exclusion, we also want the formula \f$CL_{s} = CL_{s+b} / CL_{b}\f$; to hold which therefore defines our conventions for \f$CL_{s+b}\f$ and; \f$CL_{b}\f$. \f$CL_{s}\f$ was specifically invented for exclusion; and therefore all quantities need be related through the assignments; as they are for exclusion: \f$CL_{s+b} = p_{s+b}\f$; \f$CL_{b} = p_{b}\f$. This; is derived by considering the scenarios of a powerful and not powerful; inverted test, where for the not so powerful test, \f$CL_{s}\f$ must be; close to one. For results of Hypothesis tests,; \f$CL_{s}\f$ has no similar direct interpretation as for exclusion and can; be larger than one. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:939,Modifiability,inherit,inheriting,939,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*****************************************************************************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; *; *****************************************************************************/; /** \class RooStats::HypoTestResult; \ingroup Roostats. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only); and an alternate hypothesis (eg. signal+background).; The p-values can also be transformed into confidence levels; (\f$CL_{b}\f$, \f$CL_{s+b}\f$) in a trivial way.; The ratio of the \f$CL_{s+b}\f$ to \f$CL_{b}\f$ is often called; \f$CL_{s}\f$, and is considered useful, though it is not a probability.; Finally, the p-value of the null can be transformed into a number of; equivalent Gaussian sigma using the Significance method. The p-value of the null for a given test statistic is rigorously defined and; this is the starting point for the following conventions. ### Conventions used in this class. The p-value for the null and alternate are on the **same side** of the; observed value of the test statistic. This is the more standard; convention and avoids confusion when doing inverted tests. For exclusion, we also want the formula \f$CL_{s} = CL_{s+b} / CL_{b}\f$; to hold which therefore defines our conventions f",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:1834,Safety,avoid,avoids,1834,"****************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; *; *****************************************************************************/; /** \class RooStats::HypoTestResult; \ingroup Roostats. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only); and an alternate hypothesis (eg. signal+background).; The p-values can also be transformed into confidence levels; (\f$CL_{b}\f$, \f$CL_{s+b}\f$) in a trivial way.; The ratio of the \f$CL_{s+b}\f$ to \f$CL_{b}\f$ is often called; \f$CL_{s}\f$, and is considered useful, though it is not a probability.; Finally, the p-value of the null can be transformed into a number of; equivalent Gaussian sigma using the Significance method. The p-value of the null for a given test statistic is rigorously defined and; this is the starting point for the following conventions. ### Conventions used in this class. The p-value for the null and alternate are on the **same side** of the; observed value of the test statistic. This is the more standard; convention and avoids confusion when doing inverted tests. For exclusion, we also want the formula \f$CL_{s} = CL_{s+b} / CL_{b}\f$; to hold which therefore defines our conventions for \f$CL_{s+b}\f$ and; \f$CL_{b}\f$. \f$CL_{s}\f$ was specifically invented for exclusion; and therefore all quantities need be related through the assignments; as they are for exclusion: \f$CL_{s+b} = p_{s+b}\f$; \f$CL_{b} = p_{b}\f$. This; is derived by considering the scenarios of a powerful and not powerful; inverted test, where for the not so powerful test, \f$CL_{s}\f$ must be; close to one. For results of Hypothesis tests,; \f$CL_{s}\f$ has no similar direct interpretation as for exclusion and can; be larger than one. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:922,Testability,test,tests,922,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*****************************************************************************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; *; *****************************************************************************/; /** \class RooStats::HypoTestResult; \ingroup Roostats. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only); and an alternate hypothesis (eg. signal+background).; The p-values can also be transformed into confidence levels; (\f$CL_{b}\f$, \f$CL_{s+b}\f$) in a trivial way.; The ratio of the \f$CL_{s+b}\f$ to \f$CL_{b}\f$ is often called; \f$CL_{s}\f$, and is considered useful, though it is not a probability.; Finally, the p-value of the null can be transformed into a number of; equivalent Gaussian sigma using the Significance method. The p-value of the null for a given test statistic is rigorously defined and; this is the starting point for the following conventions. ### Conventions used in this class. The p-value for the null and alternate are on the **same side** of the; observed value of the test statistic. This is the more standard; convention and avoids confusion when doing inverted tests. For exclusion, we also want the formula \f$CL_{s} = CL_{s+b} / CL_{b}\f$; to hold which therefore defines our conventions f",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:1546,Testability,test,test,1546,"****************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; *; *****************************************************************************/; /** \class RooStats::HypoTestResult; \ingroup Roostats. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only); and an alternate hypothesis (eg. signal+background).; The p-values can also be transformed into confidence levels; (\f$CL_{b}\f$, \f$CL_{s+b}\f$) in a trivial way.; The ratio of the \f$CL_{s+b}\f$ to \f$CL_{b}\f$ is often called; \f$CL_{s}\f$, and is considered useful, though it is not a probability.; Finally, the p-value of the null can be transformed into a number of; equivalent Gaussian sigma using the Significance method. The p-value of the null for a given test statistic is rigorously defined and; this is the starting point for the following conventions. ### Conventions used in this class. The p-value for the null and alternate are on the **same side** of the; observed value of the test statistic. This is the more standard; convention and avoids confusion when doing inverted tests. For exclusion, we also want the formula \f$CL_{s} = CL_{s+b} / CL_{b}\f$; to hold which therefore defines our conventions for \f$CL_{s+b}\f$ and; \f$CL_{b}\f$. \f$CL_{s}\f$ was specifically invented for exclusion; and therefore all quantities need be related through the assignments; as they are for exclusion: \f$CL_{s+b} = p_{s+b}\f$; \f$CL_{b} = p_{b}\f$. This; is derived by considering the scenarios of a powerful and not powerful; inverted test, where for the not so powerful test, \f$CL_{s}\f$ must be; close to one. For results of Hypothesis tests,; \f$CL_{s}\f$ has no similar direct interpretation as for exclusion and can; be larger than one. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:1776,Testability,test,test,1776,"****************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; *; *****************************************************************************/; /** \class RooStats::HypoTestResult; \ingroup Roostats. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only); and an alternate hypothesis (eg. signal+background).; The p-values can also be transformed into confidence levels; (\f$CL_{b}\f$, \f$CL_{s+b}\f$) in a trivial way.; The ratio of the \f$CL_{s+b}\f$ to \f$CL_{b}\f$ is often called; \f$CL_{s}\f$, and is considered useful, though it is not a probability.; Finally, the p-value of the null can be transformed into a number of; equivalent Gaussian sigma using the Significance method. The p-value of the null for a given test statistic is rigorously defined and; this is the starting point for the following conventions. ### Conventions used in this class. The p-value for the null and alternate are on the **same side** of the; observed value of the test statistic. This is the more standard; convention and avoids confusion when doing inverted tests. For exclusion, we also want the formula \f$CL_{s} = CL_{s+b} / CL_{b}\f$; to hold which therefore defines our conventions for \f$CL_{s+b}\f$ and; \f$CL_{b}\f$. \f$CL_{s}\f$ was specifically invented for exclusion; and therefore all quantities need be related through the assignments; as they are for exclusion: \f$CL_{s+b} = p_{s+b}\f$; \f$CL_{b} = p_{b}\f$. This; is derived by considering the scenarios of a powerful and not powerful; inverted test, where for the not so powerful test, \f$CL_{s}\f$ must be; close to one. For results of Hypothesis tests,; \f$CL_{s}\f$ has no similar direct interpretation as for exclusion and can; be larger than one. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:1871,Testability,test,tests,1871,"****************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; *; *****************************************************************************/; /** \class RooStats::HypoTestResult; \ingroup Roostats. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only); and an alternate hypothesis (eg. signal+background).; The p-values can also be transformed into confidence levels; (\f$CL_{b}\f$, \f$CL_{s+b}\f$) in a trivial way.; The ratio of the \f$CL_{s+b}\f$ to \f$CL_{b}\f$ is often called; \f$CL_{s}\f$, and is considered useful, though it is not a probability.; Finally, the p-value of the null can be transformed into a number of; equivalent Gaussian sigma using the Significance method. The p-value of the null for a given test statistic is rigorously defined and; this is the starting point for the following conventions. ### Conventions used in this class. The p-value for the null and alternate are on the **same side** of the; observed value of the test statistic. This is the more standard; convention and avoids confusion when doing inverted tests. For exclusion, we also want the formula \f$CL_{s} = CL_{s+b} / CL_{b}\f$; to hold which therefore defines our conventions for \f$CL_{s+b}\f$ and; \f$CL_{b}\f$. \f$CL_{s}\f$ was specifically invented for exclusion; and therefore all quantities need be related through the assignments; as they are for exclusion: \f$CL_{s+b} = p_{s+b}\f$; \f$CL_{b} = p_{b}\f$. This; is derived by considering the scenarios of a powerful and not powerful; inverted test, where for the not so powerful test, \f$CL_{s}\f$ must be; close to one. For results of Hypothesis tests,; \f$CL_{s}\f$ has no similar direct interpretation as for exclusion and can; be larger than one. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:2324,Testability,test,test,2324,"****************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; *; *****************************************************************************/; /** \class RooStats::HypoTestResult; \ingroup Roostats. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only); and an alternate hypothesis (eg. signal+background).; The p-values can also be transformed into confidence levels; (\f$CL_{b}\f$, \f$CL_{s+b}\f$) in a trivial way.; The ratio of the \f$CL_{s+b}\f$ to \f$CL_{b}\f$ is often called; \f$CL_{s}\f$, and is considered useful, though it is not a probability.; Finally, the p-value of the null can be transformed into a number of; equivalent Gaussian sigma using the Significance method. The p-value of the null for a given test statistic is rigorously defined and; this is the starting point for the following conventions. ### Conventions used in this class. The p-value for the null and alternate are on the **same side** of the; observed value of the test statistic. This is the more standard; convention and avoids confusion when doing inverted tests. For exclusion, we also want the formula \f$CL_{s} = CL_{s+b} / CL_{b}\f$; to hold which therefore defines our conventions for \f$CL_{s+b}\f$ and; \f$CL_{b}\f$. \f$CL_{s}\f$ was specifically invented for exclusion; and therefore all quantities need be related through the assignments; as they are for exclusion: \f$CL_{s+b} = p_{s+b}\f$; \f$CL_{b} = p_{b}\f$. This; is derived by considering the scenarios of a powerful and not powerful; inverted test, where for the not so powerful test, \f$CL_{s}\f$ must be; close to one. For results of Hypothesis tests,; \f$CL_{s}\f$ has no similar direct interpretation as for exclusion and can; be larger than one. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:2360,Testability,test,test,2360,"****************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; *; *****************************************************************************/; /** \class RooStats::HypoTestResult; \ingroup Roostats. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only); and an alternate hypothesis (eg. signal+background).; The p-values can also be transformed into confidence levels; (\f$CL_{b}\f$, \f$CL_{s+b}\f$) in a trivial way.; The ratio of the \f$CL_{s+b}\f$ to \f$CL_{b}\f$ is often called; \f$CL_{s}\f$, and is considered useful, though it is not a probability.; Finally, the p-value of the null can be transformed into a number of; equivalent Gaussian sigma using the Significance method. The p-value of the null for a given test statistic is rigorously defined and; this is the starting point for the following conventions. ### Conventions used in this class. The p-value for the null and alternate are on the **same side** of the; observed value of the test statistic. This is the more standard; convention and avoids confusion when doing inverted tests. For exclusion, we also want the formula \f$CL_{s} = CL_{s+b} / CL_{b}\f$; to hold which therefore defines our conventions for \f$CL_{s+b}\f$ and; \f$CL_{b}\f$. \f$CL_{s}\f$ was specifically invented for exclusion; and therefore all quantities need be related through the assignments; as they are for exclusion: \f$CL_{s+b} = p_{s+b}\f$; \f$CL_{b} = p_{b}\f$. This; is derived by considering the scenarios of a powerful and not powerful; inverted test, where for the not so powerful test, \f$CL_{s}\f$ must be; close to one. For results of Hypothesis tests,; \f$CL_{s}\f$ has no similar direct interpretation as for exclusion and can; be larger than one. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:2428,Testability,test,tests,2428,"****************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; *; *****************************************************************************/; /** \class RooStats::HypoTestResult; \ingroup Roostats. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only); and an alternate hypothesis (eg. signal+background).; The p-values can also be transformed into confidence levels; (\f$CL_{b}\f$, \f$CL_{s+b}\f$) in a trivial way.; The ratio of the \f$CL_{s+b}\f$ to \f$CL_{b}\f$ is often called; \f$CL_{s}\f$, and is considered useful, though it is not a probability.; Finally, the p-value of the null can be transformed into a number of; equivalent Gaussian sigma using the Significance method. The p-value of the null for a given test statistic is rigorously defined and; this is the starting point for the following conventions. ### Conventions used in this class. The p-value for the null and alternate are on the **same side** of the; observed value of the test statistic. This is the more standard; convention and avoids confusion when doing inverted tests. For exclusion, we also want the formula \f$CL_{s} = CL_{s+b} / CL_{b}\f$; to hold which therefore defines our conventions for \f$CL_{s+b}\f$ and; \f$CL_{b}\f$. \f$CL_{s}\f$ was specifically invented for exclusion; and therefore all quantities need be related through the assignments; as they are for exclusion: \f$CL_{s+b} = p_{s+b}\f$; \f$CL_{b} = p_{b}\f$. This; is derived by considering the scenarios of a powerful and not powerful; inverted test, where for the not so powerful test, \f$CL_{s}\f$ must be; close to one. For results of Hypothesis tests,; \f$CL_{s}\f$ has no similar direct interpretation as for exclusion and can; be larger than one. */",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:162,Testability,test,test,162,"////////////////////////////////////////////////////////////////////////////////; /// Add additional toy-MC experiments to the current results.; /// Use the data test statistics of the added object if it is not already; /// set (otherwise, ignore the new one).",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:11,Availability,error,error,11,"// compute error on Null pvalue",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:107,Availability,error,error,107,"////////////////////////////////////////////////////////////////////////////////; /// compute \f$CL_{b}\f$ error; /// \f$CL_{b}\f$ = 1 - NullPValue(); /// must use opposite condition that routine above",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:188,Integrability,rout,routine,188,"////////////////////////////////////////////////////////////////////////////////; /// compute \f$CL_{b}\f$ error; /// \f$CL_{b}\f$ = 1 - NullPValue(); /// must use opposite condition that routine above",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:148,Availability,error,error,148,"////////////////////////////////////////////////////////////////////////////////; /// Taylor expansion series approximation for standard deviation (error propagation)",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:113,Availability,error,error,113,"////////////////////////////////////////////////////////////////////////////////; /// Returns an estimate of the error on \f$CL_{s}\f$ through combination of the; /// errors on \f$CL_{b}\f$ and \f$CL_{s+b}\f$:; /// \f[; /// \sigma_{CL_s} = CL_s; /// \sqrt{\left( \frac{\sigma_{CL_{s+b}}}{CL_{s+b}} \right)^2 + \left( \frac{\sigma_{CL_{b}}}{CL_{b}} \right)^2}; /// \f]",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:167,Availability,error,errors,167,"////////////////////////////////////////////////////////////////////////////////; /// Returns an estimate of the error on \f$CL_{s}\f$ through combination of the; /// errors on \f$CL_{b}\f$ and \f$CL_{s+b}\f$:; /// \f[; /// \sigma_{CL_s} = CL_s; /// \sqrt{\left( \frac{\sigma_{CL_{s+b}}}{CL_{s+b}} \right)^2 + \left( \frac{\sigma_{CL_{b}}}{CL_{b}} \right)^2}; /// \f]",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:191,Availability,error,error,191,"// unsigned const int n_b = fNullDistr->GetSamplingDistribution().size();; // unsigned const int n_sb = fAltDistr->GetSamplingDistribution().size();; // if CLb() == 0 CLs = -1 so return a -1 error",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:127,Availability,avail,available,127,"////////////////////////////////////////////////////////////////////////////////; /// updates the pvalue if sufficient data is available",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:86,Deployability,update,updates,86,"////////////////////////////////////////////////////////////////////////////////; /// updates the pvalue if sufficient data is available",MatchSource.CODE_COMMENT,roofit/roostats/src/HypoTestResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:1204,Availability,error,error,1204,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*****************************************************************************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; *; *****************************************************************************/; /** \class RooStats::LikelihoodInterval; \ingroup Roostats. LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface.; It implements a connected N-dimensional intervals based on the contour of a likelihood ratio.; The boundary of the interval is equivalent to a MINUIT/MINOS contour about the maximum likelihood estimator. The interval does not need to be an ellipse (eg. it is not the HESSE error matrix).; The level used to make the contour is the same as that used in MINOS, eg. it uses Wilks' theorem,; which states that under certain regularity conditions the function -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 with N-dof, where; N is the number of parameters of interest. Note, a boundary on the parameter space (eg. s>= 0) or a degeneracy (eg. mass of signal if Nsig = 0) can lead to violations of the conditions necessary for Wilks'; theorem to be true. Also note, one can use any RooAbsReal as the function that will be used in the contour; however, the level of the contour; is based on Wilks' theorem as stated above. #### References. * 1. F. James., Minuit.Long writeup D506, CERN, 1998. */",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:919,Integrability,interface,interface,919,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*****************************************************************************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; *; *****************************************************************************/; /** \class RooStats::LikelihoodInterval; \ingroup Roostats. LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface.; It implements a connected N-dimensional intervals based on the contour of a likelihood ratio.; The boundary of the interval is equivalent to a MINUIT/MINOS contour about the maximum likelihood estimator. The interval does not need to be an ellipse (eg. it is not the HESSE error matrix).; The level used to make the contour is the same as that used in MINOS, eg. it uses Wilks' theorem,; which states that under certain regularity conditions the function -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 with N-dof, where; N is the number of parameters of interest. Note, a boundary on the parameter space (eg. s>= 0) or a degeneracy (eg. mass of signal if Nsig = 0) can lead to violations of the conditions necessary for Wilks'; theorem to be true. Also note, one can use any RooAbsReal as the function that will be used in the contour; however, the level of the contour; is based on Wilks' theorem as stated above. #### References. * 1. F. James., Minuit.Long writeup D506, CERN, 1998. */",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:1390,Testability,log,log,1390,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*****************************************************************************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; *; *****************************************************************************/; /** \class RooStats::LikelihoodInterval; \ingroup Roostats. LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface.; It implements a connected N-dimensional intervals based on the contour of a likelihood ratio.; The boundary of the interval is equivalent to a MINUIT/MINOS contour about the maximum likelihood estimator. The interval does not need to be an ellipse (eg. it is not the HESSE error matrix).; The level used to make the contour is the same as that used in MINOS, eg. it uses Wilks' theorem,; which states that under certain regularity conditions the function -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 with N-dof, where; N is the number of parameters of interest. Note, a boundary on the parameter space (eg. s>= 0) or a degeneracy (eg. mass of signal if Nsig = 0) can lead to violations of the conditions necessary for Wilks'; theorem to be true. Also note, one can use any RooAbsReal as the function that will be used in the contour; however, the level of the contour; is based on Wilks' theorem as stated above. #### References. * 1. F. James., Minuit.Long writeup D506, CERN, 1998. */",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:148,Integrability,interface,interface,148,"////////////////////////////////////////////////////////////////////////////////; /// This is the main method to satisfy the RooStats::ConfInterval interface.; /// It returns true if the parameter point is in the interval.",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:213,Availability,error,error,213,"////////////////////////////////////////////////////////////////////////////////; /// Compute lower limit, check first if limit has been computed; /// status is a boolean flag which will b set to false in case of error; /// and is true if calculation is successful; /// in case of error return also a lower limit value of zero",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:281,Availability,error,error,281,"////////////////////////////////////////////////////////////////////////////////; /// Compute lower limit, check first if limit has been computed; /// status is a boolean flag which will b set to false in case of error; /// and is true if calculation is successful; /// in case of error return also a lower limit value of zero",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:213,Availability,error,error,213,"////////////////////////////////////////////////////////////////////////////////; /// Compute upper limit, check first if limit has been computed; /// status is a boolean flag which will b set to false in case of error; /// and is true if calculation is successful; /// in case of error return also a lower limit value of zero",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:281,Availability,error,error,281,"////////////////////////////////////////////////////////////////////////////////; /// Compute upper limit, check first if limit has been computed; /// status is a boolean flag which will b set to false in case of error; /// and is true if calculation is successful; /// in case of error return also a lower limit value of zero",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:18,Performance,cache,cached,18,"// reset map with cached limits - called every time the test size or CL has been changed",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:56,Testability,test,test,56,"// reset map with cached limits - called every time the test size or CL has been changed",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:38,Integrability,interface,interface,38,"// bind the nll function in the right interface for the Minimizer class; // as a function of only the parameters (poi + nuisance parameters)",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:30,Availability,error,errors,30,"// need to restore values and errors for POI",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:241,Availability,failure,failure,241,"// Method to find both lower and upper limits using MINOS; // If cached values exist (limits have been already found) return them in that case; // check first if limit has been computed; // otherwise compute limit using MINOS; // in case of failure lower and upper will maintain previous value (will not be modified)",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:65,Performance,cache,cached,65,"// Method to find both lower and upper limits using MINOS; // If cached values exist (limits have been already found) return them in that case; // check first if limit has been computed; // otherwise compute limit using MINOS; // in case of failure lower and upper will maintain previous value (will not be modified)",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:23,Testability,log,log,23,"// since we are using -log LR",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:8,Availability,error,error,8,"// WHEN error is zero normally is at limit",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:44,Availability,error,error,44,"// store limits in the map; // minos return error limit = minValue +/- error",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:71,Availability,error,error,71,"// store limits in the map; // minos return error limit = minValue +/- error",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:108,Modifiability,variab,variable,108,"// use Minuit to find the contour of the likelihood function at the desired CL; // check the parameters; // variable index in minimizer; // is index in the RooArgList obtained from the profileLL variables",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:195,Modifiability,variab,variables,195,"// use Minuit to find the contour of the likelihood function at the desired CL; // check the parameters; // variable index in minimizer; // is index in the RooArgList obtained from the profileLL variables",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:23,Testability,log,log,23,"// since we are using -log LR",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx:678,Usability,simpl,simple,678,"// @(#)root/roostats:$Id$; /*************************************************************************; * Project: RooStats *; * Package: RooFit/RooStats *; * Authors: *; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke *; *************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::LikelihoodIntervalPlot; \ingroup Roostats. This class provides simple and straightforward utilities to plot a LikelihoodInterval; object. */",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodIntervalPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx:95,Testability,log,log,95,"////////////////////////////////////////////////////////////////////////////////; /// draw the log of the profiled likelihood function in 1D with the interval or; /// as a 2D plot with the contours.; /// Higher dimensional intervals cannot be drawn. One needs to call; /// SetPlotParameters to project interval in 1 or 2dim; ///; /// ### Options for drawing 1D intervals; ///; /// For 1D problem the log of the profiled likelihood function is drawn by default in a RooPlot as a; /// RooCurve; /// The plotting range (default is the full parameter range) and the precision of the RooCurve; /// can be specified by using SetRange(x1,x2) and SetPrecision(eps).; /// SetNPoints(npoints) can also be used (default is npoints=100); /// Optionally the function can be drawn as a TF1 (option=""tf1"") obtained by sampling the given npoints; /// in the given range; ///; /// ### Options for drawing 2D intervals; ///; /// For 2D case, a contour and optionally the profiled likelihood function is drawn by sampling npoints in; /// the given range. A 2d histogram of nbinsX=nbinsY = sqrt(npoints) is used for sampling the profiled likelihood.; /// The contour can be obtained by using Minuit or by the sampled histogram,; /// If using Minuit, the number of points specifies the number of contour points. If using an histogram the number of; /// points is approximately the total number of bins of the histogram.; /// Possible options:; /// - minuit/nominuit: use minuit for computing the contour; /// - hist/nohist : sample in an histogram the profiled likelihood; ///; /// Note that one can have both a drawing of the sampled likelihood and of the contour using minuit.; /// The default options is ""minuit nohist""; /// The sampled histogram is drawn first by default using the option ""colz"" and then 8 probability contours at; /// these CL are drawn: { 0.1,0.3,0.5,0.683,0.95,0.9973,0.9999366575,0.9999994267} re-drawing the histogram with the; /// option ""cont3""; ///; /// The drawn object (RooPlot or sampled hi",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodIntervalPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx:400,Testability,log,log,400,"////////////////////////////////////////////////////////////////////////////////; /// draw the log of the profiled likelihood function in 1D with the interval or; /// as a 2D plot with the contours.; /// Higher dimensional intervals cannot be drawn. One needs to call; /// SetPlotParameters to project interval in 1 or 2dim; ///; /// ### Options for drawing 1D intervals; ///; /// For 1D problem the log of the profiled likelihood function is drawn by default in a RooPlot as a; /// RooCurve; /// The plotting range (default is the full parameter range) and the precision of the RooCurve; /// can be specified by using SetRange(x1,x2) and SetPrecision(eps).; /// SetNPoints(npoints) can also be used (default is npoints=100); /// Optionally the function can be drawn as a TF1 (option=""tf1"") obtained by sampling the given npoints; /// in the given range; ///; /// ### Options for drawing 2D intervals; ///; /// For 2D case, a contour and optionally the profiled likelihood function is drawn by sampling npoints in; /// the given range. A 2d histogram of nbinsX=nbinsY = sqrt(npoints) is used for sampling the profiled likelihood.; /// The contour can be obtained by using Minuit or by the sampled histogram,; /// If using Minuit, the number of points specifies the number of contour points. If using an histogram the number of; /// points is approximately the total number of bins of the histogram.; /// Possible options:; /// - minuit/nominuit: use minuit for computing the contour; /// - hist/nohist : sample in an histogram the profiled likelihood; ///; /// Note that one can have both a drawing of the sampled likelihood and of the contour using minuit.; /// The default options is ""minuit nohist""; /// The sampled histogram is drawn first by default using the option ""colz"" and then 8 probability contours at; /// these CL are drawn: { 0.1,0.3,0.5,0.683,0.95,0.9973,0.9999366575,0.9999994267} re-drawing the histogram with the; /// option ""cont3""; ///; /// The drawn object (RooPlot or sampled hi",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodIntervalPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx:43,Testability,log,log,43,"// if (title.Length() == 0); // title = ""- log profile likelihood ratio"";",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodIntervalPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx:25,Safety,avoid,avoid,25,"// clone the function to avoid later to sample it",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodIntervalPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx:34,Testability,log,log,34,"// frame->GetYaxis()->SetTitle(""- log profile likelihood ratio"");; // plot",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodIntervalPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx:26,Testability,log,log,26,"// since we are plotting -log LR",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodIntervalPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx:18,Availability,error,error,18,"// set values and error for the POI to the best fit values",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodIntervalPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx:6,Safety,avoid,avoid,6,"// to avoid problem with subsequents draws",MatchSource.CODE_COMMENT,roofit/roostats/src/LikelihoodIntervalPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MarkovChain.cxx:574,Security,access,access,574,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MarkovChain; \ingroup Roostats. Stores the steps in a Markov Chain of points. Allows user to access the; weight and NLL value (if applicable) with which a point was added to the; MarkovChain. */",MatchSource.CODE_COMMENT,roofit/roostats/src/MarkovChain.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MarkovChain.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MarkovChain.cxx:111,Modifiability,variab,variables,111,"// kbelasco: consider setting fDataEntry = fChain->get(); // to see if that makes it possible to get values of variables without; // doing string comparison",MatchSource.CODE_COMMENT,roofit/roostats/src/MarkovChain.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MarkovChain.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MarkovChain.cxx:105,Energy Efficiency,reduce,reduce,105,"/// \deprecated Will be removed in ROOT 6.36. Please implement this functionality by calling RooAbsData::reduce on the Markov Chain's RooDataSet*; /// (obtained using MarkovChain::GetAsConstDataSet)",MatchSource.CODE_COMMENT,roofit/roostats/src/MarkovChain.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MarkovChain.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MarkovChain.cxx:105,Energy Efficiency,reduce,reduce,105,"/// \deprecated Will be removed in ROOT 6.36. Please implement this functionality by calling RooAbsData::reduce on the Markov Chain's RooDataSet*; /// (obtained using MarkovChain::GetAsConstDataSet), and then obtaining its binned clone.",MatchSource.CODE_COMMENT,roofit/roostats/src/MarkovChain.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MarkovChain.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx:626,Deployability,integrat,integrate,626,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MCMCCalculator; \ingroup Roostats. Bayesian Calculator estimating an interval or a credible region using the; Markov-Chain Monte Carlo method to integrate the likelihood function with the; prior to obtain the posterior function. By using the Markov-Chain Monte Carlo methods this calculator can work with; model which require the integration of a large number of parameters. MCMCCalculator is a concrete implementation of IntervalCalculator. It uses a; MetropolisHastings object to construct a Markov Chain of data points in the; parameter space. From this Markov Chain, this class can generate a; MCMCInterval as per user specification. The interface allows one to pass the model, data, and parameters via a; workspace and then specify them with names. After configuring the calculator, one only needs to ask GetInterval(), which; will return an ConfInterval (MCMCInterval in this case).; */",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx:811,Deployability,integrat,integration,811,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MCMCCalculator; \ingroup Roostats. Bayesian Calculator estimating an interval or a credible region using the; Markov-Chain Monte Carlo method to integrate the likelihood function with the; prior to obtain the posterior function. By using the Markov-Chain Monte Carlo methods this calculator can work with; model which require the integration of a large number of parameters. MCMCCalculator is a concrete implementation of IntervalCalculator. It uses a; MetropolisHastings object to construct a Markov Chain of data points in the; parameter space. From this Markov Chain, this class can generate a; MCMCInterval as per user specification. The interface allows one to pass the model, data, and parameters via a; workspace and then specify them with names. After configuring the calculator, one only needs to ask GetInterval(), which; will return an ConfInterval (MCMCInterval in this case).; */",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx:626,Integrability,integrat,integrate,626,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MCMCCalculator; \ingroup Roostats. Bayesian Calculator estimating an interval or a credible region using the; Markov-Chain Monte Carlo method to integrate the likelihood function with the; prior to obtain the posterior function. By using the Markov-Chain Monte Carlo methods this calculator can work with; model which require the integration of a large number of parameters. MCMCCalculator is a concrete implementation of IntervalCalculator. It uses a; MetropolisHastings object to construct a Markov Chain of data points in the; parameter space. From this Markov Chain, this class can generate a; MCMCInterval as per user specification. The interface allows one to pass the model, data, and parameters via a; workspace and then specify them with names. After configuring the calculator, one only needs to ask GetInterval(), which; will return an ConfInterval (MCMCInterval in this case).; */",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx:811,Integrability,integrat,integration,811,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MCMCCalculator; \ingroup Roostats. Bayesian Calculator estimating an interval or a credible region using the; Markov-Chain Monte Carlo method to integrate the likelihood function with the; prior to obtain the posterior function. By using the Markov-Chain Monte Carlo methods this calculator can work with; model which require the integration of a large number of parameters. MCMCCalculator is a concrete implementation of IntervalCalculator. It uses a; MetropolisHastings object to construct a Markov Chain of data points in the; parameter space. From this Markov Chain, this class can generate a; MCMCInterval as per user specification. The interface allows one to pass the model, data, and parameters via a; workspace and then specify them with names. After configuring the calculator, one only needs to ask GetInterval(), which; will return an ConfInterval (MCMCInterval in this case).; */",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx:1123,Integrability,interface,interface,1123,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MCMCCalculator; \ingroup Roostats. Bayesian Calculator estimating an interval or a credible region using the; Markov-Chain Monte Carlo method to integrate the likelihood function with the; prior to obtain the posterior function. By using the Markov-Chain Monte Carlo methods this calculator can work with; model which require the integration of a large number of parameters. MCMCCalculator is a concrete implementation of IntervalCalculator. It uses a; MetropolisHastings object to construct a Markov Chain of data points in the; parameter space. From this Markov Chain, this class can generate a; MCMCInterval as per user specification. The interface allows one to pass the model, data, and parameters via a; workspace and then specify them with names. After configuring the calculator, one only needs to ask GetInterval(), which; will return an ConfInterval (MCMCInterval in this case).; */",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx:1241,Modifiability,config,configuring,1241,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MCMCCalculator; \ingroup Roostats. Bayesian Calculator estimating an interval or a credible region using the; Markov-Chain Monte Carlo method to integrate the likelihood function with the; prior to obtain the posterior function. By using the Markov-Chain Monte Carlo methods this calculator can work with; model which require the integration of a large number of parameters. MCMCCalculator is a concrete implementation of IntervalCalculator. It uses a; MetropolisHastings object to construct a Markov Chain of data points in the; parameter space. From this Markov Chain, this class can generate a; MCMCInterval as per user specification. The interface allows one to pass the model, data, and parameters via a; workspace and then specify them with names. After configuring the calculator, one only needs to ask GetInterval(), which; will return an ConfInterval (MCMCInterval in this case).; */",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx:111,Modifiability,Config,Config,111,"////////////////////////////////////////////////////////////////////////////////; /// constructor from a Model Config with a basic settings package configured; /// by SetupBasicUsage()",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx:148,Modifiability,config,configured,148,"////////////////////////////////////////////////////////////////////////////////; /// constructor from a Model Config with a basic settings package configured; /// by SetupBasicUsage()",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx:112,Deployability,configurat,configuration,112,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for automatic configuration with basic settings. Uses a; /// UniformProposal, 10,000 iterations, 40 burn in steps, 50 bins for each; /// RooRealVar, determines interval by histogram. Finds a 95% confidence; /// interval.",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx:112,Modifiability,config,configuration,112,"////////////////////////////////////////////////////////////////////////////////; /// Constructor for automatic configuration with basic settings. Uses a; /// UniformProposal, 10,000 iterations, 40 burn in steps, 50 bins for each; /// RooRealVar, determines interval by histogram. Finds a 95% confidence; /// interval.",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx:91,Integrability,interface,interface,91,"////////////////////////////////////////////////////////////////////////////////; /// Main interface to get a RooStats::ConfInterval.",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:978,Deployability,integrat,integrate,978,"Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MCMCInterval; \ingroup Roostats. MCMCInterval is a concrete implementation of the RooStats::ConfInterval; interface. It takes as input Markov Chain of data points in the parameter; space generated by Monte Carlo using the Metropolis algorithm. From the Markov; Chain, the confidence interval can be determined in two ways:. #### Using a Kernel-Estimated PDF: (not the default method). A RooNDKeysPdf is constructed from the data set using adaptive kernel width.; With this RooNDKeysPdf F, we then integrate over the most likely domain in the; parameter space (tallest points in the posterior RooNDKeysPdf) until the target; confidence level is reached within an acceptable neighborhood as defined by; SetEpsilon(). More specifically: we calculate the following for different; cutoff values C until we reach the target confidence level: \f$\int_{ F >= C } F; d{normset} \f$.; Important note: this is not the default method because of a bug in constructing; the RooNDKeysPdf from a weighted data set. Configure to use this method by; calling SetUseKeys(true), and the data set will be interpreted without weights. #### Using a binned data set: (the default method). This is the binned analog of the continuous integrative method that uses the; kernel-estimated PDF. The points in the Markov Chain are put into a binned; data set and the interval is then calculated by adding the heights of the bins; in decreasing order until the desired level of confidence has been reached.; Note that this means the actual confidence level is >= the confidence level; prescribed by the client (unless the",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:1678,Deployability,continuous,continuous,1678,"sing the Metropolis algorithm. From the Markov; Chain, the confidence interval can be determined in two ways:. #### Using a Kernel-Estimated PDF: (not the default method). A RooNDKeysPdf is constructed from the data set using adaptive kernel width.; With this RooNDKeysPdf F, we then integrate over the most likely domain in the; parameter space (tallest points in the posterior RooNDKeysPdf) until the target; confidence level is reached within an acceptable neighborhood as defined by; SetEpsilon(). More specifically: we calculate the following for different; cutoff values C until we reach the target confidence level: \f$\int_{ F >= C } F; d{normset} \f$.; Important note: this is not the default method because of a bug in constructing; the RooNDKeysPdf from a weighted data set. Configure to use this method by; calling SetUseKeys(true), and the data set will be interpreted without weights. #### Using a binned data set: (the default method). This is the binned analog of the continuous integrative method that uses the; kernel-estimated PDF. The points in the Markov Chain are put into a binned; data set and the interval is then calculated by adding the heights of the bins; in decreasing order until the desired level of confidence has been reached.; Note that this means the actual confidence level is >= the confidence level; prescribed by the client (unless the user calls SetHistStrict(false)). This; method is the default but may not remain as such in future releases, so you may; wish to explicitly configure to use this method by calling SetUseKeys(false). These are not the only ways for the confidence interval to be determined, and; other possibilities are being considered being added, especially for the; 1-dimensional case. One can ask an MCMCInterval for the lower and upper limits on a specific; parameter of interest in the interval. Note that this works better for some; distributions (ones with exactly one local maximum) than others, and sometimes; has little value.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:1689,Deployability,integrat,integrative,1689,"sing the Metropolis algorithm. From the Markov; Chain, the confidence interval can be determined in two ways:. #### Using a Kernel-Estimated PDF: (not the default method). A RooNDKeysPdf is constructed from the data set using adaptive kernel width.; With this RooNDKeysPdf F, we then integrate over the most likely domain in the; parameter space (tallest points in the posterior RooNDKeysPdf) until the target; confidence level is reached within an acceptable neighborhood as defined by; SetEpsilon(). More specifically: we calculate the following for different; cutoff values C until we reach the target confidence level: \f$\int_{ F >= C } F; d{normset} \f$.; Important note: this is not the default method because of a bug in constructing; the RooNDKeysPdf from a weighted data set. Configure to use this method by; calling SetUseKeys(true), and the data set will be interpreted without weights. #### Using a binned data set: (the default method). This is the binned analog of the continuous integrative method that uses the; kernel-estimated PDF. The points in the Markov Chain are put into a binned; data set and the interval is then calculated by adding the heights of the bins; in decreasing order until the desired level of confidence has been reached.; Note that this means the actual confidence level is >= the confidence level; prescribed by the client (unless the user calls SetHistStrict(false)). This; method is the default but may not remain as such in future releases, so you may; wish to explicitly configure to use this method by calling SetUseKeys(false). These are not the only ways for the confidence interval to be determined, and; other possibilities are being considered being added, especially for the; 1-dimensional case. One can ask an MCMCInterval for the lower and upper limits on a specific; parameter of interest in the interval. Note that this works better for some; distributions (ones with exactly one local maximum) than others, and sometimes; has little value.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:2169,Deployability,release,releases,2169,"sing the Metropolis algorithm. From the Markov; Chain, the confidence interval can be determined in two ways:. #### Using a Kernel-Estimated PDF: (not the default method). A RooNDKeysPdf is constructed from the data set using adaptive kernel width.; With this RooNDKeysPdf F, we then integrate over the most likely domain in the; parameter space (tallest points in the posterior RooNDKeysPdf) until the target; confidence level is reached within an acceptable neighborhood as defined by; SetEpsilon(). More specifically: we calculate the following for different; cutoff values C until we reach the target confidence level: \f$\int_{ F >= C } F; d{normset} \f$.; Important note: this is not the default method because of a bug in constructing; the RooNDKeysPdf from a weighted data set. Configure to use this method by; calling SetUseKeys(true), and the data set will be interpreted without weights. #### Using a binned data set: (the default method). This is the binned analog of the continuous integrative method that uses the; kernel-estimated PDF. The points in the Markov Chain are put into a binned; data set and the interval is then calculated by adding the heights of the bins; in decreasing order until the desired level of confidence has been reached.; Note that this means the actual confidence level is >= the confidence level; prescribed by the client (unless the user calls SetHistStrict(false)). This; method is the default but may not remain as such in future releases, so you may; wish to explicitly configure to use this method by calling SetUseKeys(false). These are not the only ways for the confidence interval to be determined, and; other possibilities are being considered being added, especially for the; 1-dimensional case. One can ask an MCMCInterval for the lower and upper limits on a specific; parameter of interest in the interval. Note that this works better for some; distributions (ones with exactly one local maximum) than others, and sometimes; has little value.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:920,Energy Efficiency,adapt,adaptive,920,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MCMCInterval; \ingroup Roostats. MCMCInterval is a concrete implementation of the RooStats::ConfInterval; interface. It takes as input Markov Chain of data points in the parameter; space generated by Monte Carlo using the Metropolis algorithm. From the Markov; Chain, the confidence interval can be determined in two ways:. #### Using a Kernel-Estimated PDF: (not the default method). A RooNDKeysPdf is constructed from the data set using adaptive kernel width.; With this RooNDKeysPdf F, we then integrate over the most likely domain in the; parameter space (tallest points in the posterior RooNDKeysPdf) until the target; confidence level is reached within an acceptable neighborhood as defined by; SetEpsilon(). More specifically: we calculate the following for different; cutoff values C until we reach the target confidence level: \f$\int_{ F >= C } F; d{normset} \f$.; Important note: this is not the default method because of a bug in constructing; the RooNDKeysPdf from a weighted data set. Configure to use this method by; calling SetUseKeys(true), and the data set will be interpreted without weights. #### Using a binned data set: (the default method). This is the binned analog of the continuous integrative method that uses the; kernel-estimated PDF. The points in the Markov Chain are put into a binned; data set and the interval is then calculated by adding the heights of the bins; in decreasing order until the desired level of confidence has been reached.; Note that this means the actual confidence le",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:587,Integrability,interface,interface,587,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MCMCInterval; \ingroup Roostats. MCMCInterval is a concrete implementation of the RooStats::ConfInterval; interface. It takes as input Markov Chain of data points in the parameter; space generated by Monte Carlo using the Metropolis algorithm. From the Markov; Chain, the confidence interval can be determined in two ways:. #### Using a Kernel-Estimated PDF: (not the default method). A RooNDKeysPdf is constructed from the data set using adaptive kernel width.; With this RooNDKeysPdf F, we then integrate over the most likely domain in the; parameter space (tallest points in the posterior RooNDKeysPdf) until the target; confidence level is reached within an acceptable neighborhood as defined by; SetEpsilon(). More specifically: we calculate the following for different; cutoff values C until we reach the target confidence level: \f$\int_{ F >= C } F; d{normset} \f$.; Important note: this is not the default method because of a bug in constructing; the RooNDKeysPdf from a weighted data set. Configure to use this method by; calling SetUseKeys(true), and the data set will be interpreted without weights. #### Using a binned data set: (the default method). This is the binned analog of the continuous integrative method that uses the; kernel-estimated PDF. The points in the Markov Chain are put into a binned; data set and the interval is then calculated by adding the heights of the bins; in decreasing order until the desired level of confidence has been reached.; Note that this means the actual confidence le",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:978,Integrability,integrat,integrate,978,"Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MCMCInterval; \ingroup Roostats. MCMCInterval is a concrete implementation of the RooStats::ConfInterval; interface. It takes as input Markov Chain of data points in the parameter; space generated by Monte Carlo using the Metropolis algorithm. From the Markov; Chain, the confidence interval can be determined in two ways:. #### Using a Kernel-Estimated PDF: (not the default method). A RooNDKeysPdf is constructed from the data set using adaptive kernel width.; With this RooNDKeysPdf F, we then integrate over the most likely domain in the; parameter space (tallest points in the posterior RooNDKeysPdf) until the target; confidence level is reached within an acceptable neighborhood as defined by; SetEpsilon(). More specifically: we calculate the following for different; cutoff values C until we reach the target confidence level: \f$\int_{ F >= C } F; d{normset} \f$.; Important note: this is not the default method because of a bug in constructing; the RooNDKeysPdf from a weighted data set. Configure to use this method by; calling SetUseKeys(true), and the data set will be interpreted without weights. #### Using a binned data set: (the default method). This is the binned analog of the continuous integrative method that uses the; kernel-estimated PDF. The points in the Markov Chain are put into a binned; data set and the interval is then calculated by adding the heights of the bins; in decreasing order until the desired level of confidence has been reached.; Note that this means the actual confidence level is >= the confidence level; prescribed by the client (unless the",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:1689,Integrability,integrat,integrative,1689,"sing the Metropolis algorithm. From the Markov; Chain, the confidence interval can be determined in two ways:. #### Using a Kernel-Estimated PDF: (not the default method). A RooNDKeysPdf is constructed from the data set using adaptive kernel width.; With this RooNDKeysPdf F, we then integrate over the most likely domain in the; parameter space (tallest points in the posterior RooNDKeysPdf) until the target; confidence level is reached within an acceptable neighborhood as defined by; SetEpsilon(). More specifically: we calculate the following for different; cutoff values C until we reach the target confidence level: \f$\int_{ F >= C } F; d{normset} \f$.; Important note: this is not the default method because of a bug in constructing; the RooNDKeysPdf from a weighted data set. Configure to use this method by; calling SetUseKeys(true), and the data set will be interpreted without weights. #### Using a binned data set: (the default method). This is the binned analog of the continuous integrative method that uses the; kernel-estimated PDF. The points in the Markov Chain are put into a binned; data set and the interval is then calculated by adding the heights of the bins; in decreasing order until the desired level of confidence has been reached.; Note that this means the actual confidence level is >= the confidence level; prescribed by the client (unless the user calls SetHistStrict(false)). This; method is the default but may not remain as such in future releases, so you may; wish to explicitly configure to use this method by calling SetUseKeys(false). These are not the only ways for the confidence interval to be determined, and; other possibilities are being considered being added, especially for the; 1-dimensional case. One can ask an MCMCInterval for the lower and upper limits on a specific; parameter of interest in the interval. Note that this works better for some; distributions (ones with exactly one local maximum) than others, and sometimes; has little value.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:920,Modifiability,adapt,adaptive,920,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MCMCInterval; \ingroup Roostats. MCMCInterval is a concrete implementation of the RooStats::ConfInterval; interface. It takes as input Markov Chain of data points in the parameter; space generated by Monte Carlo using the Metropolis algorithm. From the Markov; Chain, the confidence interval can be determined in two ways:. #### Using a Kernel-Estimated PDF: (not the default method). A RooNDKeysPdf is constructed from the data set using adaptive kernel width.; With this RooNDKeysPdf F, we then integrate over the most likely domain in the; parameter space (tallest points in the posterior RooNDKeysPdf) until the target; confidence level is reached within an acceptable neighborhood as defined by; SetEpsilon(). More specifically: we calculate the following for different; cutoff values C until we reach the target confidence level: \f$\int_{ F >= C } F; d{normset} \f$.; Important note: this is not the default method because of a bug in constructing; the RooNDKeysPdf from a weighted data set. Configure to use this method by; calling SetUseKeys(true), and the data set will be interpreted without weights. #### Using a binned data set: (the default method). This is the binned analog of the continuous integrative method that uses the; kernel-estimated PDF. The points in the Markov Chain are put into a binned; data set and the interval is then calculated by adding the heights of the bins; in decreasing order until the desired level of confidence has been reached.; Note that this means the actual confidence le",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:1480,Modifiability,Config,Configure,1480,"crete implementation of the RooStats::ConfInterval; interface. It takes as input Markov Chain of data points in the parameter; space generated by Monte Carlo using the Metropolis algorithm. From the Markov; Chain, the confidence interval can be determined in two ways:. #### Using a Kernel-Estimated PDF: (not the default method). A RooNDKeysPdf is constructed from the data set using adaptive kernel width.; With this RooNDKeysPdf F, we then integrate over the most likely domain in the; parameter space (tallest points in the posterior RooNDKeysPdf) until the target; confidence level is reached within an acceptable neighborhood as defined by; SetEpsilon(). More specifically: we calculate the following for different; cutoff values C until we reach the target confidence level: \f$\int_{ F >= C } F; d{normset} \f$.; Important note: this is not the default method because of a bug in constructing; the RooNDKeysPdf from a weighted data set. Configure to use this method by; calling SetUseKeys(true), and the data set will be interpreted without weights. #### Using a binned data set: (the default method). This is the binned analog of the continuous integrative method that uses the; kernel-estimated PDF. The points in the Markov Chain are put into a binned; data set and the interval is then calculated by adding the heights of the bins; in decreasing order until the desired level of confidence has been reached.; Note that this means the actual confidence level is >= the confidence level; prescribed by the client (unless the user calls SetHistStrict(false)). This; method is the default but may not remain as such in future releases, so you may; wish to explicitly configure to use this method by calling SetUseKeys(false). These are not the only ways for the confidence interval to be determined, and; other possibilities are being considered being added, especially for the; 1-dimensional case. One can ask an MCMCInterval for the lower and upper limits on a specific; parameter of interes",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:2210,Modifiability,config,configure,2210,"sing the Metropolis algorithm. From the Markov; Chain, the confidence interval can be determined in two ways:. #### Using a Kernel-Estimated PDF: (not the default method). A RooNDKeysPdf is constructed from the data set using adaptive kernel width.; With this RooNDKeysPdf F, we then integrate over the most likely domain in the; parameter space (tallest points in the posterior RooNDKeysPdf) until the target; confidence level is reached within an acceptable neighborhood as defined by; SetEpsilon(). More specifically: we calculate the following for different; cutoff values C until we reach the target confidence level: \f$\int_{ F >= C } F; d{normset} \f$.; Important note: this is not the default method because of a bug in constructing; the RooNDKeysPdf from a weighted data set. Configure to use this method by; calling SetUseKeys(true), and the data set will be interpreted without weights. #### Using a binned data set: (the default method). This is the binned analog of the continuous integrative method that uses the; kernel-estimated PDF. The points in the Markov Chain are put into a binned; data set and the interval is then calculated by adding the heights of the bins; in decreasing order until the desired level of confidence has been reached.; Note that this means the actual confidence level is >= the confidence level; prescribed by the client (unless the user calls SetHistStrict(false)). This; method is the default but may not remain as such in future releases, so you may; wish to explicitly configure to use this method by calling SetUseKeys(false). These are not the only ways for the confidence interval to be determined, and; other possibilities are being considered being added, especially for the; 1-dimensional case. One can ask an MCMCInterval for the lower and upper limits on a specific; parameter of interest in the interval. Note that this works better for some; distributions (ones with exactly one local maximum) than others, and sometimes; has little value.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:46,Availability,error,errors,46,"// kbelasco: check here for memory management errors",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:427,Availability,Error,Error,427,"// kbelasco: update this or just take it out; // kbelasco: consider keeping this around but changing the implementation; // to set the number of bins for each RooRealVar and then recreating the; // histograms; //void MCMCInterval::SetNumBins(Int_t numBins); //{; // if (numBins > 0) {; // fPreferredNumBins = numBins;; // for (Int_t d = 0; d < fDimension; d++); // fNumBins[d] = numBins;; // }; // else {; // coutE(Eval) << ""* Error in MCMCInterval::SetNumBins: "" <<; // ""Negative number of bins given: "" << numBins << endl;; // return;; // }; //; // // If the histogram already exists, recreate it with the new bin numbers; // if (fHist != nullptr); // CreateHist();; //}; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:13,Deployability,update,update,13,"// kbelasco: update this or just take it out; // kbelasco: consider keeping this around but changing the implementation; // to set the number of bins for each RooRealVar and then recreating the; // histograms; //void MCMCInterval::SetNumBins(Int_t numBins); //{; // if (numBins > 0) {; // fPreferredNumBins = numBins;; // for (Int_t d = 0; d < fDimension; d++); // fNumBins[d] = numBins;; // }; // else {; // coutE(Eval) << ""* Error in MCMCInterval::SetNumBins: "" <<; // ""Negative number of bins given: "" << numBins << endl;; // return;; // }; //; // // If the histogram already exists, recreate it with the new bin numbers; // if (fHist != nullptr); // CreateHist();; //}; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:119,Availability,error,error,119,"// if size is still 0, then creation failed.; // if fVecWeight == 0, then there are no entries (indicates the same; // error as fVector.empty() because that only happens when; // fNumBurnInSteps >= fChain->Size()); // either way, reset and return",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:62,Performance,optimiz,optimize,62,"// save a lot of GetName() calls if compiler does not already optimize this",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:75,Usability,clear,clear,75,"// if fKeysPdf is still nullptr, then it means CreateKeysPdf failed; // so clear all the data members this function would normally determine; // and return",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:59,Deployability,integrat,integrating,59,"// need to use WithinDeltaFraction() because sometimes the integrating the; // posterior in this binary search seems to not have enough granularity to; // find an acceptable conf level (small no. of strange cases).; // WithinDeltaFraction causes the search to terminate when; // topCutoff is essentially equal to bottomCutoff (compared to the magnitude; // of their mean).",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:59,Integrability,integrat,integrating,59,"// need to use WithinDeltaFraction() because sometimes the integrating the; // posterior in this binary search seems to not have enough granularity to; // find an acceptable conf level (small no. of strange cases).; // WithinDeltaFraction causes the search to terminate when; // topCutoff is essentially equal to bottomCutoff (compared to the magnitude; // of their mean).",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:3,Availability,failure,failure,3,"// failure in determination of cutoff and/or creation of histogram",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:3,Availability,failure,failure,3,"// failure in determination of cutoff and/or creation of histogram",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:3,Availability,failure,failure,3,"// failure in determination of cutoff and/or creation of histogram",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:195,Availability,error,error,195,"// kbelasco: if fFull hasn't been set (because Keys creation failed because; // fNumBurnInSteps >= fChain->Size()) then this will return infinity, which; // seems ok to me since it will indicate error",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx:549,Availability,error,error,549,"// kbelasco: Note - the accuracy is only increased here if the binning for; // each RooRealVar is uniform; // kbelasco: look into why saving the binnings and replacing them doesn't; // work (replaces with 1 bin always).; // Note: this code modifies the binning for the parameters (if they are; // uniform) and sets them back to what they were. If the binnings are not; // uniform, this code does nothing.; // first scan through fAxes to make sure all binnings are uniform, or else; // we can't change the number of bins because there seems to be an error; // when setting the binning itself rather than just the number of bins",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx:666,Usability,simpl,simple,666,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Project: RooStats *; * Package: RooFit/RooStats *; *************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MCMCIntervalPlot; \ingroup Roostats. This class provides simple and straightforward utilities to plot a MCMCInterval; object. Basic use only requires a few lines once you have an MCMCInterval*:. ~~~ {.cpp}; MCMCIntervalPlot plot(*interval);; plot.Draw();; ~~~. The standard Draw() function will currently draw the confidence interval; range with bars if 1-D and a contour if 2-D. The MCMC posterior will also be; plotted for the 1-D case. */",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCIntervalPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx:80,Modifiability,config,configures,80,"// hack - this is drawn twice now:; // once by DrawPosteriorKeysPdf (which also configures things and sets; // the title), and once again here so the shading shows up behind.",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCIntervalPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx:42,Modifiability,variab,variable,42,"// kbelasco: figure out how to set TGraph variable ranges",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCIntervalPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx:14,Deployability,Update,Update,14,"//walkCanvas->Update();",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCIntervalPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx:8,Deployability,Update,Update,8,"//gPad->Update();",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCIntervalPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx:8,Deployability,Update,Update,8,"//gPad->Update();",MatchSource.CODE_COMMENT,roofit/roostats/src/MCMCIntervalPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:1516,Deployability,configurat,configuration,1516,"#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MetropolisHastings; \ingroup Roostats. This class uses the Metropolis-Hastings algorithm to construct a Markov Chain; of data points using Monte Carlo. In the main algorithm, new points in the; parameter space are proposed and then visited based on their relative; likelihoods. This class can use any implementation of the ProposalFunction,; including non-symmetric proposal functions, to propose parameter points and; still maintain detailed balance when constructing the chain. The ""Likelihood"" function that is sampled when deciding what steps to take in; the chain has been given a very generic implementation. The user can create; any RooAbsReal based on the parameters and pass it to a MetropolisHastings; object with the method SetFunction(RooAbsReal&). Be sure to tell; MetropolisHastings whether your RooAbsReal is on a (+/-) regular or log scale,; so that it knows what logic to use when sampling your RooAbsReal. For example,; a common use is to sample from a -log(Likelihood) distribution (NLL), for which; the appropriate configuration calls are SetType(MetropolisHastings::kLog);; SetSign(MetropolisHastings::kNegative);; If you're using a traditional likelihood function:; SetType(MetropolisHastings::kRegular); SetSign(MetropolisHastings::kPositive);; You must set these type and sign flags or MetropolisHastings will not construct; a MarkovChain. Also note that in ConstructChain(), the values of the variables are randomized; uniformly over their intervals before construction of the MarkovChain begins. */",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:1516,Modifiability,config,configuration,1516,"#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MetropolisHastings; \ingroup Roostats. This class uses the Metropolis-Hastings algorithm to construct a Markov Chain; of data points using Monte Carlo. In the main algorithm, new points in the; parameter space are proposed and then visited based on their relative; likelihoods. This class can use any implementation of the ProposalFunction,; including non-symmetric proposal functions, to propose parameter points and; still maintain detailed balance when constructing the chain. The ""Likelihood"" function that is sampled when deciding what steps to take in; the chain has been given a very generic implementation. The user can create; any RooAbsReal based on the parameters and pass it to a MetropolisHastings; object with the method SetFunction(RooAbsReal&). Be sure to tell; MetropolisHastings whether your RooAbsReal is on a (+/-) regular or log scale,; so that it knows what logic to use when sampling your RooAbsReal. For example,; a common use is to sample from a -log(Likelihood) distribution (NLL), for which; the appropriate configuration calls are SetType(MetropolisHastings::kLog);; SetSign(MetropolisHastings::kNegative);; If you're using a traditional likelihood function:; SetType(MetropolisHastings::kRegular); SetSign(MetropolisHastings::kPositive);; You must set these type and sign flags or MetropolisHastings will not construct; a MarkovChain. Also note that in ConstructChain(), the values of the variables are randomized; uniformly over their intervals before construction of the MarkovChain begins. */",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:1899,Modifiability,variab,variables,1899,"#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MetropolisHastings; \ingroup Roostats. This class uses the Metropolis-Hastings algorithm to construct a Markov Chain; of data points using Monte Carlo. In the main algorithm, new points in the; parameter space are proposed and then visited based on their relative; likelihoods. This class can use any implementation of the ProposalFunction,; including non-symmetric proposal functions, to propose parameter points and; still maintain detailed balance when constructing the chain. The ""Likelihood"" function that is sampled when deciding what steps to take in; the chain has been given a very generic implementation. The user can create; any RooAbsReal based on the parameters and pass it to a MetropolisHastings; object with the method SetFunction(RooAbsReal&). Be sure to tell; MetropolisHastings whether your RooAbsReal is on a (+/-) regular or log scale,; so that it knows what logic to use when sampling your RooAbsReal. For example,; a common use is to sample from a -log(Likelihood) distribution (NLL), for which; the appropriate configuration calls are SetType(MetropolisHastings::kLog);; SetSign(MetropolisHastings::kNegative);; If you're using a traditional likelihood function:; SetType(MetropolisHastings::kRegular); SetSign(MetropolisHastings::kPositive);; You must set these type and sign flags or MetropolisHastings will not construct; a MarkovChain. Also note that in ConstructChain(), the values of the variables are randomized; uniformly over their intervals before construction of the MarkovChain begins. */",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:1327,Testability,log,log,1327,"#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MetropolisHastings; \ingroup Roostats. This class uses the Metropolis-Hastings algorithm to construct a Markov Chain; of data points using Monte Carlo. In the main algorithm, new points in the; parameter space are proposed and then visited based on their relative; likelihoods. This class can use any implementation of the ProposalFunction,; including non-symmetric proposal functions, to propose parameter points and; still maintain detailed balance when constructing the chain. The ""Likelihood"" function that is sampled when deciding what steps to take in; the chain has been given a very generic implementation. The user can create; any RooAbsReal based on the parameters and pass it to a MetropolisHastings; object with the method SetFunction(RooAbsReal&). Be sure to tell; MetropolisHastings whether your RooAbsReal is on a (+/-) regular or log scale,; so that it knows what logic to use when sampling your RooAbsReal. For example,; a common use is to sample from a -log(Likelihood) distribution (NLL), for which; the appropriate configuration calls are SetType(MetropolisHastings::kLog);; SetSign(MetropolisHastings::kNegative);; If you're using a traditional likelihood function:; SetType(MetropolisHastings::kRegular); SetSign(MetropolisHastings::kPositive);; You must set these type and sign flags or MetropolisHastings will not construct; a MarkovChain. Also note that in ConstructChain(), the values of the variables are randomized; uniformly over their intervals before construction of the MarkovChain begins. */",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:1361,Testability,log,logic,1361,"#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MetropolisHastings; \ingroup Roostats. This class uses the Metropolis-Hastings algorithm to construct a Markov Chain; of data points using Monte Carlo. In the main algorithm, new points in the; parameter space are proposed and then visited based on their relative; likelihoods. This class can use any implementation of the ProposalFunction,; including non-symmetric proposal functions, to propose parameter points and; still maintain detailed balance when constructing the chain. The ""Likelihood"" function that is sampled when deciding what steps to take in; the chain has been given a very generic implementation. The user can create; any RooAbsReal based on the parameters and pass it to a MetropolisHastings; object with the method SetFunction(RooAbsReal&). Be sure to tell; MetropolisHastings whether your RooAbsReal is on a (+/-) regular or log scale,; so that it knows what logic to use when sampling your RooAbsReal. For example,; a common use is to sample from a -log(Likelihood) distribution (NLL), for which; the appropriate configuration calls are SetType(MetropolisHastings::kLog);; SetSign(MetropolisHastings::kNegative);; If you're using a traditional likelihood function:; SetType(MetropolisHastings::kRegular); SetSign(MetropolisHastings::kPositive);; You must set these type and sign flags or MetropolisHastings will not construct; a MarkovChain. Also note that in ConstructChain(), the values of the variables are randomized; uniformly over their intervals before construction of the MarkovChain begins. */",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:1453,Testability,log,log,1453,"#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MetropolisHastings; \ingroup Roostats. This class uses the Metropolis-Hastings algorithm to construct a Markov Chain; of data points using Monte Carlo. In the main algorithm, new points in the; parameter space are proposed and then visited based on their relative; likelihoods. This class can use any implementation of the ProposalFunction,; including non-symmetric proposal functions, to propose parameter points and; still maintain detailed balance when constructing the chain. The ""Likelihood"" function that is sampled when deciding what steps to take in; the chain has been given a very generic implementation. The user can create; any RooAbsReal based on the parameters and pass it to a MetropolisHastings; object with the method SetFunction(RooAbsReal&). Be sure to tell; MetropolisHastings whether your RooAbsReal is on a (+/-) regular or log scale,; so that it knows what logic to use when sampling your RooAbsReal. For example,; a common use is to sample from a -log(Likelihood) distribution (NLL), for which; the appropriate configuration calls are SetType(MetropolisHastings::kLog);; SetSign(MetropolisHastings::kNegative);; If you're using a traditional likelihood function:; SetType(MetropolisHastings::kRegular); SetSign(MetropolisHastings::kPositive);; You must set these type and sign flags or MetropolisHastings will not construct; a MarkovChain. Also note that in ConstructChain(), the values of the variables are randomized; uniformly over their intervals before construction of the MarkovChain begins. */",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:75,Integrability,message,message,75,"// ibucur: i think the user should have the possibility to display all the message; // levels should they want to; maybe a setPrintLevel would be appropriate; // (maybe for the other classes that use this approach as well)?",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:62,Availability,error,error,62,"// We will need to check if log-likelihood evaluation left an error status.; // Now using faster eval error logging with CountErrors.",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:102,Availability,error,error,102,"// We will need to check if log-likelihood evaluation left an error status.; // Now using faster eval error logging with CountErrors.",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:28,Testability,log,log-likelihood,28,"// We will need to check if log-likelihood evaluation left an error status.; // Now using faster eval error logging with CountErrors.",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:108,Testability,log,logging,108,"// We will need to check if log-likelihood evaluation left an error status.; // Now using faster eval error logging with CountErrors.",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:51,Availability,error,errors,51,"//N.B: need to clear the count in case of previous errors !; // the clear needs also to be done after calling setEvalErrorLoggingMode",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:15,Usability,clear,clear,15,"//N.B: need to clear the count in case of previous errors !; // the clear needs also to be done after calling setEvalErrorLoggingMode",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:68,Usability,clear,clear,68,"//N.B: need to clear the count in case of previous errors !; // the clear needs also to be done after calling setEvalErrorLoggingMode",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:120,Availability,error,error,120,"// get a good starting point for x; // for fType == kLog, this means that fFunction->getVal() did not cause; // an eval error; // for fType == kRegular this means fFunction->getVal() != 0; //; // kbelasco: i < 1000 is sort of arbitrary, but way higher than the number of; // steps we should have to take for any reasonable (log) likelihood function",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:324,Testability,log,log,324,"// get a good starting point for x; // for fType == kLog, this means that fFunction->getVal() did not cause; // an eval error; // for fType == kRegular this means fFunction->getVal() != 0; //; // kbelasco: i < 1000 is sort of arbitrary, but way higher than the number of; // steps we should have to take for any reasonable (log) likelihood function",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:9,Availability,error,error,9,"// reset error handling flag",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:45,Availability,error,error,45,"// check if log-likelihood for xprime had an error status",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:12,Testability,log,log-likelihood,12,"// check if log-likelihood for xprime had an error status",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:47,Performance,cache,cache,47,"// why evaluate the last point again, can't we cache it?; // kbelasco: commenting out lines below to add/test caching support; //RooStats::SetParameters(&x, &fParameters);; //xL = fFunction->getVal();",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:105,Testability,test,test,105,"// why evaluate the last point again, can't we cache it?; // kbelasco: commenting out lines below to add/test caching support; //RooStats::SetParameters(&x, &fParameters);; //xL = fFunction->getVal();",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:25,Testability,log,log,25,"// generate numbers on a log distribution to decide; // whether to go to xPrime or stay at x; //double rand = fGen.Uniform(1.0);",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:60,Testability,log,logical,60,"// kbelasco: should this be changed to just (-rand > a) for logical; // consistency with below test when fType == kRegular?",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:95,Testability,test,test,95,"// kbelasco: should this be changed to just (-rand > a) for logical; // consistency with below test when fType == kRegular?",MatchSource.CODE_COMMENT,roofit/roostats/src/MetropolisHastings.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:958,Deployability,integrat,integration,958,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer January 2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::NeymanConstruction; \ingroup Roostats. NeymanConstruction is a concrete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to c",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:1140,Deployability,configurat,configurations,1140," Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::NeymanConstruction; \ingroup Roostats. NeymanConstruction is a concrete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to create the SamplingDistribution of a user-; defined test statistic for each parameter point of interest,; - defining the acceptance region in the data by finding the thresholds on the; t",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:2314,Deployability,integrat,integration,2314,"crete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to create the SamplingDistribution of a user-; defined test statistic for each parameter point of interest,; - defining the acceptance region in the data by finding the thresholds on the; test statistic such that the integral of the sampling distribution is of the; appropriate size and consistent with the limits of integration; (eg. upper/lower/central limits),; - and finally updating the PointSetInterval based on whether the value of the; test statistic evaluated on the data are in the acceptance region. */",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:558,Integrability,interface,interface,558,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer January 2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::NeymanConstruction; \ingroup Roostats. NeymanConstruction is a concrete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to c",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:726,Integrability,interface,interface,726,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer January 2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::NeymanConstruction; \ingroup Roostats. NeymanConstruction is a concrete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to c",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:958,Integrability,integrat,integration,958,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer January 2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::NeymanConstruction; \ingroup Roostats. NeymanConstruction is a concrete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to c",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:1886,Integrability,interface,interface,1886,"crete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to create the SamplingDistribution of a user-; defined test statistic for each parameter point of interest,; - defining the acceptance region in the data by finding the thresholds on the; test statistic such that the integral of the sampling distribution is of the; appropriate size and consistent with the limits of integration; (eg. upper/lower/central limits),; - and finally updating the PointSetInterval based on whether the value of the; test statistic evaluated on the data are in the acceptance region. */",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:2314,Integrability,integrat,integration,2314,"crete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to create the SamplingDistribution of a user-; defined test statistic for each parameter point of interest,; - defining the acceptance region in the data by finding the thresholds on the; test statistic such that the integral of the sampling distribution is of the; appropriate size and consistent with the limits of integration; (eg. upper/lower/central limits),; - and finally updating the PointSetInterval based on whether the value of the; test statistic evaluated on the data are in the acceptance region. */",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:1051,Modifiability,config,configured,1051,"*****************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::NeymanConstruction; \ingroup Roostats. NeymanConstruction is a concrete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to create the SamplingDistribution of a user-; defined test statistic for eac",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:1140,Modifiability,config,configurations,1140," Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::NeymanConstruction; \ingroup Roostats. NeymanConstruction is a concrete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to create the SamplingDistribution of a user-; defined test statistic for each parameter point of interest,; - defining the acceptance region in the data by finding the thresholds on the; t",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:596,Performance,perform,performs,596,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer January 2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::NeymanConstruction; \ingroup Roostats. NeymanConstruction is a concrete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to c",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:1540,Performance,perform,perform,1540,"crete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to create the SamplingDistribution of a user-; defined test statistic for each parameter point of interest,; - defining the acceptance region in the data by finding the thresholds on the; test statistic such that the integral of the sampling distribution is of the; appropriate size and consistent with the limits of integration; (eg. upper/lower/central limits),; - and finally updating the PointSetInterval based on whether the value of the; test statistic evaluated on the data are in the acceptance region. */",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:929,Testability,test,test,929,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer January 2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::NeymanConstruction; \ingroup Roostats. NeymanConstruction is a concrete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to c",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:1798,Testability,test,test,1798,"crete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to create the SamplingDistribution of a user-; defined test statistic for each parameter point of interest,; - defining the acceptance region in the data by finding the thresholds on the; test statistic such that the integral of the sampling distribution is of the; appropriate size and consistent with the limits of integration; (eg. upper/lower/central limits),; - and finally updating the PointSetInterval based on whether the value of the; test statistic evaluated on the data are in the acceptance region. */",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:2052,Testability,test,test,2052,"crete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to create the SamplingDistribution of a user-; defined test statistic for each parameter point of interest,; - defining the acceptance region in the data by finding the thresholds on the; test statistic such that the integral of the sampling distribution is of the; appropriate size and consistent with the limits of integration; (eg. upper/lower/central limits),; - and finally updating the PointSetInterval based on whether the value of the; test statistic evaluated on the data are in the acceptance region. */",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:2185,Testability,test,test,2185,"crete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to create the SamplingDistribution of a user-; defined test statistic for each parameter point of interest,; - defining the acceptance region in the data by finding the thresholds on the; test statistic such that the integral of the sampling distribution is of the; appropriate size and consistent with the limits of integration; (eg. upper/lower/central limits),; - and finally updating the PointSetInterval based on whether the value of the; test statistic evaluated on the data are in the acceptance region. */",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:2441,Testability,test,test,2441,"crete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to create the SamplingDistribution of a user-; defined test statistic for each parameter point of interest,; - defining the acceptance region in the data by finding the thresholds on the; test statistic such that the integral of the sampling distribution is of the; appropriate size and consistent with the limits of integration; (eg. upper/lower/central limits),; - and finally updating the PointSetInterval based on whether the value of the; test statistic evaluated on the data are in the acceptance region. */",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:91,Integrability,interface,interface,91,"////////////////////////////////////////////////////////////////////////////////; /// Main interface to get a RooStats::ConfInterval.; /// It constructs a RooStats::SetInterval.",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:23,Testability,test,test,23,"// loop over points to test",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:52,Testability,test,test,52,"// get a parameter point from the list of points to test.",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:7,Testability,test,test,7,"// set test stat sampler to use this point",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:24,Testability,test,test,24,"// get the value of the test statistic for this data set",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:201,Testability,test,test,201,"/*; cout << ""NC CHECK: "" << i << endl;; point->Print();; fPOI->Print(""v"");; fData.Print();; cout <<""thisTestStatistic = "" << thisTestStatistic << endl;; */; // find the lower & upper thresholds on the test statistic that; // define the acceptance region in the data",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:7,Energy Efficiency,adapt,adaptive,7,"// the adaptive sampling algorithm wants at least one toy event to be outside; // of the requested pvalue including the sampling variation. That leads to an equation; // N-1 = (1-alpha)N + Z sqrt(N - (1-alpha)N) // for upper limit and; // 1 = alpha N - Z sqrt(alpha N) // for lower limit; //; // solving for N gives:; // N = 1/alpha * [3/2 + sqrt(5)] for Z = 1 (which is used currently); // thus, a good guess for the first iteration of events is N=3.73/alpha~4/alpha; // should replace alpha here by smaller tail probability: eg. alpha*Min(leftsideFrac, 1.-leftsideFrac); // totalMC will be incremented by 2 before first call, so initiated it at half the value",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:7,Modifiability,adapt,adaptive,7,"// the adaptive sampling algorithm wants at least one toy event to be outside; // of the requested pvalue including the sampling variation. That leads to an equation; // N-1 = (1-alpha)N + Z sqrt(N - (1-alpha)N) // for upper limit and; // 1 = alpha N - Z sqrt(alpha N) // for lower limit; //; // solving for N gives:; // N = 1/alpha * [3/2 + sqrt(5)] for Z = 1 (which is used currently); // thus, a good guess for the first iteration of events is N=3.73/alpha~4/alpha; // should replace alpha here by smaller tail probability: eg. alpha*Min(leftsideFrac, 1.-leftsideFrac); // totalMC will be incremented by 2 before first call, so initiated it at half the value",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:200,Testability,test,test,200,"// this will be executed first, then while conditioned checked; // as an exit condition for the loop.; // the next line is where most of the time will be spent; // generating the sampling dist of the test statistic.",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:97,Testability,test,test,97,"// the next line is where most of the time will be spent; // generating the sampling dist of the test statistic.",MatchSource.CODE_COMMENT,roofit/roostats/src/NeymanConstruction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx:1003,Energy Efficiency,power,powerful,1003,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer 28/07/2008; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::NumberCountingPdfFactory; \ingroup Roostats. A factory for building PDFs and data for a number counting combination.; The factory produces a PDF for N channels with uncorrelated background; uncertainty. Correlations can be added by extending this PDF with additional terms.; The factory relates the signal in each channel to a master signal strength times the; expected signal in each channel. Thus, the final test is performed on the master signal strength.; This yields a more powerful test than letting signal in each channel be independent. The problem has been studied in these references:. - http://arxiv.org/abs/physics/0511028; - http://arxiv.org/abs/physics/0702156; - http://cdsweb.cern.ch/record/1099969?ln=en. One can incorporate uncertainty on the expected signal by adding additional terms.; For the future, perhaps this factory should be extended to include the efficiency terms automatically. */",MatchSource.CODE_COMMENT,roofit/roostats/src/NumberCountingPdfFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx:756,Modifiability,extend,extending,756,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer 28/07/2008; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::NumberCountingPdfFactory; \ingroup Roostats. A factory for building PDFs and data for a number counting combination.; The factory produces a PDF for N channels with uncorrelated background; uncertainty. Correlations can be added by extending this PDF with additional terms.; The factory relates the signal in each channel to a master signal strength times the; expected signal in each channel. Thus, the final test is performed on the master signal strength.; This yields a more powerful test than letting signal in each channel be independent. The problem has been studied in these references:. - http://arxiv.org/abs/physics/0511028; - http://arxiv.org/abs/physics/0702156; - http://cdsweb.cern.ch/record/1099969?ln=en. One can incorporate uncertainty on the expected signal by adding additional terms.; For the future, perhaps this factory should be extended to include the efficiency terms automatically. */",MatchSource.CODE_COMMENT,roofit/roostats/src/NumberCountingPdfFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx:1377,Modifiability,extend,extended,1377,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer 28/07/2008; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::NumberCountingPdfFactory; \ingroup Roostats. A factory for building PDFs and data for a number counting combination.; The factory produces a PDF for N channels with uncorrelated background; uncertainty. Correlations can be added by extending this PDF with additional terms.; The factory relates the signal in each channel to a master signal strength times the; expected signal in each channel. Thus, the final test is performed on the master signal strength.; This yields a more powerful test than letting signal in each channel be independent. The problem has been studied in these references:. - http://arxiv.org/abs/physics/0511028; - http://arxiv.org/abs/physics/0702156; - http://cdsweb.cern.ch/record/1099969?ln=en. One can incorporate uncertainty on the expected signal by adding additional terms.; For the future, perhaps this factory should be extended to include the efficiency terms automatically. */",MatchSource.CODE_COMMENT,roofit/roostats/src/NumberCountingPdfFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx:942,Performance,perform,performed,942,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer 28/07/2008; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::NumberCountingPdfFactory; \ingroup Roostats. A factory for building PDFs and data for a number counting combination.; The factory produces a PDF for N channels with uncorrelated background; uncertainty. Correlations can be added by extending this PDF with additional terms.; The factory relates the signal in each channel to a master signal strength times the; expected signal in each channel. Thus, the final test is performed on the master signal strength.; This yields a more powerful test than letting signal in each channel be independent. The problem has been studied in these references:. - http://arxiv.org/abs/physics/0511028; - http://arxiv.org/abs/physics/0702156; - http://cdsweb.cern.ch/record/1099969?ln=en. One can incorporate uncertainty on the expected signal by adding additional terms.; For the future, perhaps this factory should be extended to include the efficiency terms automatically. */",MatchSource.CODE_COMMENT,roofit/roostats/src/NumberCountingPdfFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx:934,Testability,test,test,934,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer 28/07/2008; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::NumberCountingPdfFactory; \ingroup Roostats. A factory for building PDFs and data for a number counting combination.; The factory produces a PDF for N channels with uncorrelated background; uncertainty. Correlations can be added by extending this PDF with additional terms.; The factory relates the signal in each channel to a master signal strength times the; expected signal in each channel. Thus, the final test is performed on the master signal strength.; This yields a more powerful test than letting signal in each channel be independent. The problem has been studied in these references:. - http://arxiv.org/abs/physics/0511028; - http://arxiv.org/abs/physics/0702156; - http://cdsweb.cern.ch/record/1099969?ln=en. One can incorporate uncertainty on the expected signal by adding additional terms.; For the future, perhaps this factory should be extended to include the efficiency terms automatically. */",MatchSource.CODE_COMMENT,roofit/roostats/src/NumberCountingPdfFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx:1012,Testability,test,test,1012,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer 28/07/2008; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::NumberCountingPdfFactory; \ingroup Roostats. A factory for building PDFs and data for a number counting combination.; The factory produces a PDF for N channels with uncorrelated background; uncertainty. Correlations can be added by extending this PDF with additional terms.; The factory relates the signal in each channel to a master signal strength times the; expected signal in each channel. Thus, the final test is performed on the master signal strength.; This yields a more powerful test than letting signal in each channel be independent. The problem has been studied in these references:. - http://arxiv.org/abs/physics/0511028; - http://arxiv.org/abs/physics/0702156; - http://cdsweb.cern.ch/record/1099969?ln=en. One can incorporate uncertainty on the expected signal by adding additional terms.; For the future, perhaps this factory should be extended to include the efficiency terms automatically. */",MatchSource.CODE_COMMENT,roofit/roostats/src/NumberCountingPdfFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx:345,Modifiability,extend,extended,345,"////////////////////////////////////////////////////////////////////////////////; /// This method produces a PDF for N channels with uncorrelated background; /// uncertainty. It relates the signal in each channel to a master signal strength times the; /// expected signal in each channel.; ///; /// For the future, perhaps this method should be extended to include the efficiency terms automatically.",MatchSource.CODE_COMMENT,roofit/roostats/src/NumberCountingPdfFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx:52,Modifiability,variab,variables,52,"// double MaxSigma = 8; // Needed to set ranges for variables.",MatchSource.CODE_COMMENT,roofit/roostats/src/NumberCountingPdfFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx:20,Modifiability,variab,variables,20,"// need to name the variables dynamically, so please forgive the string manipulation and focus on values & ranges.",MatchSource.CODE_COMMENT,roofit/roostats/src/NumberCountingPdfFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx:28,Modifiability,variab,variables,28,"// Needed to set ranges for variables.",MatchSource.CODE_COMMENT,roofit/roostats/src/NumberCountingPdfFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx:28,Modifiability,variab,variables,28,"// Needed to set ranges for variables.",MatchSource.CODE_COMMENT,roofit/roostats/src/NumberCountingPdfFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:1357,Deployability,update,updated,1357,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::PdfProposal; \ingroup Roostats. PdfProposal is a concrete implementation of the ProposalFunction interface.; It proposes points across the parameter space in the distribution of the; given PDF. To make Propose(xPrime, x) dependent on x, configure with; PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:. ~~~{.cpp}; // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);. // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);. // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime. // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);; ~~~. PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works; for future versions.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:1763,Energy Efficiency,Adapt,Adaptive,1763,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::PdfProposal; \ingroup Roostats. PdfProposal is a concrete implementation of the ProposalFunction interface.; It proposes points across the parameter space in the distribution of the; given PDF. To make Propose(xPrime, x) dependent on x, configure with; PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:. ~~~{.cpp}; // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);. // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);. // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime. // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);; ~~~. PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works; for future versions.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:660,Integrability,interface,interface,660,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::PdfProposal; \ingroup Roostats. PdfProposal is a concrete implementation of the ProposalFunction interface.; It proposes points across the parameter space in the distribution of the; given PDF. To make Propose(xPrime, x) dependent on x, configure with; PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:. ~~~{.cpp}; // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);. // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);. // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime. // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);; ~~~. PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works; for future versions.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:784,Integrability,depend,dependent,784,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::PdfProposal; \ingroup Roostats. PdfProposal is a concrete implementation of the ProposalFunction interface.; It proposes points across the parameter space in the distribution of the; given PDF. To make Propose(xPrime, x) dependent on x, configure with; PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:. ~~~{.cpp}; // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);. // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);. // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime. // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);; ~~~. PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works; for future versions.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:800,Modifiability,config,configure,800,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::PdfProposal; \ingroup Roostats. PdfProposal is a concrete implementation of the ProposalFunction interface.; It proposes points across the parameter space in the distribution of the; given PDF. To make Propose(xPrime, x) dependent on x, configure with; PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:. ~~~{.cpp}; // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);. // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);. // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime. // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);; ~~~. PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works; for future versions.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:1178,Modifiability,config,configure,1178,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::PdfProposal; \ingroup Roostats. PdfProposal is a concrete implementation of the ProposalFunction interface.; It proposes points across the parameter space in the distribution of the; given PDF. To make Propose(xPrime, x) dependent on x, configure with; PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:. ~~~{.cpp}; // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);. // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);. // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime. // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);; ~~~. PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works; for future versions.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:1763,Modifiability,Adapt,Adaptive,1763,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::PdfProposal; \ingroup Roostats. PdfProposal is a concrete implementation of the ProposalFunction interface.; It proposes points across the parameter space in the distribution of the; given PDF. To make Propose(xPrime, x) dependent on x, configure with; PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:. ~~~{.cpp}; // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);. // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);. // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime. // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);; ~~~. PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works; for future versions.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:1493,Performance,perform,performance,1493,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::PdfProposal; \ingroup Roostats. PdfProposal is a concrete implementation of the ProposalFunction interface.; It proposes points across the parameter space in the distribution of the; given PDF. To make Propose(xPrime, x) dependent on x, configure with; PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:. ~~~{.cpp}; // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);. // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);. // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime. // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);; ~~~. PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works; for future versions.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:1537,Performance,cache,cache,1537,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::PdfProposal; \ingroup Roostats. PdfProposal is a concrete implementation of the ProposalFunction interface.; It proposes points across the parameter space in the distribution of the; given PDF. To make Propose(xPrime, x) dependent on x, configure with; PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:. ~~~{.cpp}; // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);. // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);. // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime. // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);; ~~~. PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works; for future versions.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:1625,Performance,cache,cache,1625,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::PdfProposal; \ingroup Roostats. PdfProposal is a concrete implementation of the ProposalFunction interface.; It proposes points across the parameter space in the distribution of the; given PDF. To make Propose(xPrime, x) dependent on x, configure with; PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:. ~~~{.cpp}; // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);. // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);. // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime. // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);; ~~~. PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works; for future versions.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:1751,Performance,cache,cache,1751,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::PdfProposal; \ingroup Roostats. PdfProposal is a concrete implementation of the ProposalFunction interface.; It proposes points across the parameter space in the distribution of the; given PDF. To make Propose(xPrime, x) dependent on x, configure with; PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:. ~~~{.cpp}; // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);. // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);. // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime. // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);; ~~~. PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works; for future versions.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:20,Performance,cache,cache,20,"// generate initial cache",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:41,Modifiability,variab,variables,41,"// if we've moved, set the values of the variables in the PDF to the; // corresponding values of the variables in x, according to the; // mappings (i.e. let the variables in x set the given values for the; // PDF that will generate xPrime)",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:101,Modifiability,variab,variables,101,"// if we've moved, set the values of the variables in the PDF to the; // corresponding values of the variables in x, according to the; // mappings (i.e. let the variables in x set the given values for the; // PDF that will generate xPrime)",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:161,Modifiability,variab,variables,161,"// if we've moved, set the values of the variables in the PDF to the; // corresponding values of the variables in x, according to the; // mappings (i.e. let the variables in x set the given values for the; // PDF that will generate xPrime)",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:3,Deployability,update,update,3,"// update the pdf parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:16,Performance,cache,cache,16,"// generate new cache if necessary",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:265,Deployability,update,update,265,"////////////////////////////////////////////////////////////////////////////////; /// specify a mapping between a parameter of the proposal function and; /// a parameter of interest. this mapping is used to set the value of; /// proposalParam equal to the value of update to determine the; /// proposal function.; /// proposalParam is a parameter of the proposal function that must; /// be set to the value of update (from the current point) in order to; /// propose a new point.",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:410,Deployability,update,update,410,"////////////////////////////////////////////////////////////////////////////////; /// specify a mapping between a parameter of the proposal function and; /// a parameter of interest. this mapping is used to set the value of; /// proposalParam equal to the value of update to determine the; /// proposal function.; /// proposalParam is a parameter of the proposal function that must; /// be set to the value of update (from the current point) in order to; /// propose a new point.",MatchSource.CODE_COMMENT,roofit/roostats/src/PdfProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PointSetInterval.cxx:926,Integrability,interface,interface,926,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*****************************************************************************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Original Author: Kyle Cranmer; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; *; *****************************************************************************/; /** \class RooStats::PointSetInterval; \ingroup Roostats. PointSetInterval is a concrete implementation of the ConfInterval interface.; It implements simple general purpose interval of arbitrary dimensions and shape.; It does not assume the interval is connected.; It uses either a RooDataSet (eg. a list of parameter points in the interval) or; a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to; store the interval. */",MatchSource.CODE_COMMENT,roofit/roostats/src/PointSetInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PointSetInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PointSetInterval.cxx:952,Usability,simpl,simple,952,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*****************************************************************************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Original Author: Kyle Cranmer; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; *; *****************************************************************************/; /** \class RooStats::PointSetInterval; \ingroup Roostats. PointSetInterval is a concrete implementation of the ConfInterval interface.; It implements simple general purpose interval of arbitrary dimensions and shape.; It does not assume the interval is connected.; It uses either a RooDataSet (eg. a list of parameter points in the interval) or; a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to; store the interval. */",MatchSource.CODE_COMMENT,roofit/roostats/src/PointSetInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PointSetInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:579,Integrability,interface,interface,579,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer 28/07/2008; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::ProfileLikelihoodCalculator; \ingroup Roostats. The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator; (the interface class for tools which can produce both a RooStats HypoTestResult; and ConfInterval). The tool uses the profile likelihood ratio as a test statistic,; and assumes that Wilks' theorem is valid. Wilks' theorem states that \f$ -2 \cdot \ln(\lambda) \f$; (profile likelihood ratio) is asymptotically distributed as a \f$ \chi^2 \f$ distribution; with \f$ N \f$ degrees of freedom. Thus, \f$p\f$-values can be; constructed, and the profile likelihood ratio can be used to construct a; LikelihoodInterval. (In the future, this class could be extended to use toy; Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be; configured by specifying:. - A model common model (*e.g.* a family of specific models, which includes both; the null and alternate); - A data set; - A set of parameters of interest. The nuisance parameters will be all other; parameters of the model.; - A set of parameters which specify the null hypothesis (including values; and const/non-const status). The interface allows one to pass the model, data, and parameters either directly; or via a ModelConfig class. The alternate hypothesis leaves the parameter free; to take any value other than those specified by the null hypothesis. There is; therefore no need to specify the alternate parameters. After configuring the calculator, one only needs to call GetHypo",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:1230,Integrability,interface,interface,1230,"$ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::ProfileLikelihoodCalculator; \ingroup Roostats. The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator; (the interface class for tools which can produce both a RooStats HypoTestResult; and ConfInterval). The tool uses the profile likelihood ratio as a test statistic,; and assumes that Wilks' theorem is valid. Wilks' theorem states that \f$ -2 \cdot \ln(\lambda) \f$; (profile likelihood ratio) is asymptotically distributed as a \f$ \chi^2 \f$ distribution; with \f$ N \f$ degrees of freedom. Thus, \f$p\f$-values can be; constructed, and the profile likelihood ratio can be used to construct a; LikelihoodInterval. (In the future, this class could be extended to use toy; Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be; configured by specifying:. - A model common model (*e.g.* a family of specific models, which includes both; the null and alternate); - A data set; - A set of parameters of interest. The nuisance parameters will be all other; parameters of the model.; - A set of parameters which specify the null hypothesis (including values; and const/non-const status). The interface allows one to pass the model, data, and parameters either directly; or via a ModelConfig class. The alternate hypothesis leaves the parameter free; to take any value other than those specified by the null hypothesis. There is; therefore no need to specify the alternate parameters. After configuring the calculator, one only needs to call GetHypoTest() (which; will return a HypoTestResult pointer) or GetInterval() (which will return a; ConfInterval pointer). This calculator can work with both one-dimensional intervals or multi-; dimensional ones (contours). Note that for hypothesis tests, it is often ",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:1645,Integrability,interface,interface,1645,"******************************/; /** \class RooStats::ProfileLikelihoodCalculator; \ingroup Roostats. The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator; (the interface class for tools which can produce both a RooStats HypoTestResult; and ConfInterval). The tool uses the profile likelihood ratio as a test statistic,; and assumes that Wilks' theorem is valid. Wilks' theorem states that \f$ -2 \cdot \ln(\lambda) \f$; (profile likelihood ratio) is asymptotically distributed as a \f$ \chi^2 \f$ distribution; with \f$ N \f$ degrees of freedom. Thus, \f$p\f$-values can be; constructed, and the profile likelihood ratio can be used to construct a; LikelihoodInterval. (In the future, this class could be extended to use toy; Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be; configured by specifying:. - A model common model (*e.g.* a family of specific models, which includes both; the null and alternate); - A data set; - A set of parameters of interest. The nuisance parameters will be all other; parameters of the model.; - A set of parameters which specify the null hypothesis (including values; and const/non-const status). The interface allows one to pass the model, data, and parameters either directly; or via a ModelConfig class. The alternate hypothesis leaves the parameter free; to take any value other than those specified by the null hypothesis. There is; therefore no need to specify the alternate parameters. After configuring the calculator, one only needs to call GetHypoTest() (which; will return a HypoTestResult pointer) or GetInterval() (which will return a; ConfInterval pointer). This calculator can work with both one-dimensional intervals or multi-; dimensional ones (contours). Note that for hypothesis tests, it is often better to use the; AsymptoticCalculator, which can compute in addition the expected; \f$p\f$-value using an Asimov data set. */",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:1124,Modifiability,extend,extended,1124,"ht (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::ProfileLikelihoodCalculator; \ingroup Roostats. The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator; (the interface class for tools which can produce both a RooStats HypoTestResult; and ConfInterval). The tool uses the profile likelihood ratio as a test statistic,; and assumes that Wilks' theorem is valid. Wilks' theorem states that \f$ -2 \cdot \ln(\lambda) \f$; (profile likelihood ratio) is asymptotically distributed as a \f$ \chi^2 \f$ distribution; with \f$ N \f$ degrees of freedom. Thus, \f$p\f$-values can be; constructed, and the profile likelihood ratio can be used to construct a; LikelihoodInterval. (In the future, this class could be extended to use toy; Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be; configured by specifying:. - A model common model (*e.g.* a family of specific models, which includes both; the null and alternate); - A data set; - A set of parameters of interest. The nuisance parameters will be all other; parameters of the model.; - A set of parameters which specify the null hypothesis (including values; and const/non-const status). The interface allows one to pass the model, data, and parameters either directly; or via a ModelConfig class. The alternate hypothesis leaves the parameter free; to take any value other than those specified by the null hypothesis. There is; therefore no need to specify the alternate parameters. After configuring the calculator, one only needs to call GetHypoTest() (which; will return a HypoTestResult pointer) or GetInterval() (which will return a; ConfInterval pointer). This calculator can work with bot",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:1286,Modifiability,config,configured,1286,"$ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::ProfileLikelihoodCalculator; \ingroup Roostats. The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator; (the interface class for tools which can produce both a RooStats HypoTestResult; and ConfInterval). The tool uses the profile likelihood ratio as a test statistic,; and assumes that Wilks' theorem is valid. Wilks' theorem states that \f$ -2 \cdot \ln(\lambda) \f$; (profile likelihood ratio) is asymptotically distributed as a \f$ \chi^2 \f$ distribution; with \f$ N \f$ degrees of freedom. Thus, \f$p\f$-values can be; constructed, and the profile likelihood ratio can be used to construct a; LikelihoodInterval. (In the future, this class could be extended to use toy; Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be; configured by specifying:. - A model common model (*e.g.* a family of specific models, which includes both; the null and alternate); - A data set; - A set of parameters of interest. The nuisance parameters will be all other; parameters of the model.; - A set of parameters which specify the null hypothesis (including values; and const/non-const status). The interface allows one to pass the model, data, and parameters either directly; or via a ModelConfig class. The alternate hypothesis leaves the parameter free; to take any value other than those specified by the null hypothesis. There is; therefore no need to specify the alternate parameters. After configuring the calculator, one only needs to call GetHypoTest() (which; will return a HypoTestResult pointer) or GetInterval() (which will return a; ConfInterval pointer). This calculator can work with both one-dimensional intervals or multi-; dimensional ones (contours). Note that for hypothesis tests, it is often ",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:1943,Modifiability,config,configuring,1943,"******************************/; /** \class RooStats::ProfileLikelihoodCalculator; \ingroup Roostats. The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator; (the interface class for tools which can produce both a RooStats HypoTestResult; and ConfInterval). The tool uses the profile likelihood ratio as a test statistic,; and assumes that Wilks' theorem is valid. Wilks' theorem states that \f$ -2 \cdot \ln(\lambda) \f$; (profile likelihood ratio) is asymptotically distributed as a \f$ \chi^2 \f$ distribution; with \f$ N \f$ degrees of freedom. Thus, \f$p\f$-values can be; constructed, and the profile likelihood ratio can be used to construct a; LikelihoodInterval. (In the future, this class could be extended to use toy; Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be; configured by specifying:. - A model common model (*e.g.* a family of specific models, which includes both; the null and alternate); - A data set; - A set of parameters of interest. The nuisance parameters will be all other; parameters of the model.; - A set of parameters which specify the null hypothesis (including values; and const/non-const status). The interface allows one to pass the model, data, and parameters either directly; or via a ModelConfig class. The alternate hypothesis leaves the parameter free; to take any value other than those specified by the null hypothesis. There is; therefore no need to specify the alternate parameters. After configuring the calculator, one only needs to call GetHypoTest() (which; will return a HypoTestResult pointer) or GetInterval() (which will return a; ConfInterval pointer). This calculator can work with both one-dimensional intervals or multi-; dimensional ones (contours). Note that for hypothesis tests, it is often better to use the; AsymptoticCalculator, which can compute in addition the expected; \f$p\f$-value using an Asimov data set. */",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:722,Testability,test,test,722,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer 28/07/2008; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::ProfileLikelihoodCalculator; \ingroup Roostats. The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator; (the interface class for tools which can produce both a RooStats HypoTestResult; and ConfInterval). The tool uses the profile likelihood ratio as a test statistic,; and assumes that Wilks' theorem is valid. Wilks' theorem states that \f$ -2 \cdot \ln(\lambda) \f$; (profile likelihood ratio) is asymptotically distributed as a \f$ \chi^2 \f$ distribution; with \f$ N \f$ degrees of freedom. Thus, \f$p\f$-values can be; constructed, and the profile likelihood ratio can be used to construct a; LikelihoodInterval. (In the future, this class could be extended to use toy; Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be; configured by specifying:. - A model common model (*e.g.* a family of specific models, which includes both; the null and alternate); - A data set; - A set of parameters of interest. The nuisance parameters will be all other; parameters of the model.; - A set of parameters which specify the null hypothesis (including values; and const/non-const status). The interface allows one to pass the model, data, and parameters either directly; or via a ModelConfig class. The alternate hypothesis leaves the parameter free; to take any value other than those specified by the null hypothesis. There is; therefore no need to specify the alternate parameters. After configuring the calculator, one only needs to call GetHypo",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:1194,Testability,test,test,1194,"ht (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::ProfileLikelihoodCalculator; \ingroup Roostats. The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator; (the interface class for tools which can produce both a RooStats HypoTestResult; and ConfInterval). The tool uses the profile likelihood ratio as a test statistic,; and assumes that Wilks' theorem is valid. Wilks' theorem states that \f$ -2 \cdot \ln(\lambda) \f$; (profile likelihood ratio) is asymptotically distributed as a \f$ \chi^2 \f$ distribution; with \f$ N \f$ degrees of freedom. Thus, \f$p\f$-values can be; constructed, and the profile likelihood ratio can be used to construct a; LikelihoodInterval. (In the future, this class could be extended to use toy; Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be; configured by specifying:. - A model common model (*e.g.* a family of specific models, which includes both; the null and alternate); - A data set; - A set of parameters of interest. The nuisance parameters will be all other; parameters of the model.; - A set of parameters which specify the null hypothesis (including values; and const/non-const status). The interface allows one to pass the model, data, and parameters either directly; or via a ModelConfig class. The alternate hypothesis leaves the parameter free; to take any value other than those specified by the null hypothesis. There is; therefore no need to specify the alternate parameters. After configuring the calculator, one only needs to call GetHypoTest() (which; will return a HypoTestResult pointer) or GetInterval() (which will return a; ConfInterval pointer). This calculator can work with bot",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:2242,Testability,test,tests,2242,"******************************/; /** \class RooStats::ProfileLikelihoodCalculator; \ingroup Roostats. The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator; (the interface class for tools which can produce both a RooStats HypoTestResult; and ConfInterval). The tool uses the profile likelihood ratio as a test statistic,; and assumes that Wilks' theorem is valid. Wilks' theorem states that \f$ -2 \cdot \ln(\lambda) \f$; (profile likelihood ratio) is asymptotically distributed as a \f$ \chi^2 \f$ distribution; with \f$ N \f$ degrees of freedom. Thus, \f$p\f$-values can be; constructed, and the profile likelihood ratio can be used to construct a; LikelihoodInterval. (In the future, this class could be extended to use toy; Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be; configured by specifying:. - A model common model (*e.g.* a family of specific models, which includes both; the null and alternate); - A data set; - A set of parameters of interest. The nuisance parameters will be all other; parameters of the model.; - A set of parameters which specify the null hypothesis (including values; and const/non-const status). The interface allows one to pass the model, data, and parameters either directly; or via a ModelConfig class. The alternate hypothesis leaves the parameter free; to take any value other than those specified by the null hypothesis. There is; therefore no need to specify the alternate parameters. After configuring the calculator, one only needs to call GetHypoTest() (which; will return a HypoTestResult pointer) or GetInterval() (which will return a; ConfInterval pointer). This calculator can work with both one-dimensional intervals or multi-; dimensional ones (contours). Note that for hypothesis tests, it is often better to use the; AsymptoticCalculator, which can compute in addition the expected; \f$p\f$-value using an Asimov data set. */",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:13,Usability,clear,clear,13,"// reset and clear fit result; // to be called when a new model or data are set in the calculator",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:3,Performance,perform,perform,3,"// perform a global fit of the likelihood letting with all parameter of interest and; // nuisance parameters; // keep the list of fitted parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:6,Performance,optimiz,optimize,6,"// to optimize likelihood calculations",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:10,Availability,error,errors,10,"// ignore errors from Improve",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:91,Integrability,interface,interface,91,"////////////////////////////////////////////////////////////////////////////////; /// Main interface to get a RooStats::ConfInterval.; /// It constructs a profile likelihood ratio, and uses that to construct a RooStats::LikelihoodInterval.",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:56,Modifiability,Extend,Extended,56,"/*; RooNLLVar* nll = new RooNLLVar(""nll"","""",*pdf,*data, Extended(),Constrain(*constrainedParams));; RooProfileLL* profile = new RooProfileLL(""pll"","""",*nll, *fPOI);; profile->addOwnedComponents(*nll) ; // to avoid memory leak; */; // do a global fit cloning the data",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:207,Safety,avoid,avoid,207,"/*; RooNLLVar* nll = new RooNLLVar(""nll"","""",*pdf,*data, Extended(),Constrain(*constrainedParams));; RooProfileLL* profile = new RooProfileLL(""pll"","""",*nll, *fPOI);; profile->addOwnedComponents(*nll) ; // to avoid memory leak; */; // do a global fit cloning the data",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:6,Safety,avoid,avoid,6,"// to avoid memory leak; // t.b.f. "" RooProfileLL should keep and provide possibility to query on global minimum; // set POI to fit value (this will speed up profileLL calculation of global minimum)",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:27,Performance,cache,cache,27,"// do this so profile will cache inside the absolute minimum and; // minimum values of nuisance parameters; // (no need to this here); // profile->getVal();; //RooMsgService::instance().setGlobalKillBelow(RooFit::DEBUG) ;; // profile->Print();",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:91,Integrability,interface,interface,91,"////////////////////////////////////////////////////////////////////////////////; /// Main interface to get a HypoTestResult.; /// It does two fits:; /// 1. The first lets the null parameters float, so it's a maximum likelihood estimate.; /// 2. The second is to the null model (fixing null parameters to their specified values): *e.g.* a conditional maximum likelihood.; /// Since not all parameters are floating, this likelihood will be lower than the unconditional model.; ///; /// The ratio of the likelihood obtained from the conditional MLE to the MLE is the profile likelihood ratio.; /// Wilks' theorem is used to get \f$p\f$-values.",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:51,Availability,avail,available,51,"// perform the fit only if nuisance parameters are available; // get nuisance parameters; // nuisance parameters are the non const parameters from the likelihood parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:3,Performance,perform,perform,3,"// perform the fit only if nuisance parameters are available; // get nuisance parameters; // nuisance parameters are the non const parameters from the likelihood parameters",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:19,Modifiability,variab,variable,19,"// check there are variable parameter in order to do a fit",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:38,Testability,log,log,38,"// Use Wilks' theorem to translate -2 log lambda into a significance/p-value",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:645,Integrability,interface,interface,645,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; // Additional Contributions: Giovanni Petrucciani; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::ProfileLikelihoodTestStat; \ingroup Roostats. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface; that calculates the profile likelihood ratio at a particular parameter point; given a dataset. It does not constitute a statistical test, for that one may; either use:. - the ProfileLikelihoodCalculator that relies on asymptotic properties of the; Profile Likelihood Ratio; - the NeymanConstruction class with this class as a test statistic; - the HybridCalculator class with this class as a test statistic. */",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:631,Testability,Test,TestStatistic,631,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; // Additional Contributions: Giovanni Petrucciani; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::ProfileLikelihoodTestStat; \ingroup Roostats. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface; that calculates the profile likelihood ratio at a particular parameter point; given a dataset. It does not constitute a statistical test, for that one may; either use:. - the ProfileLikelihoodCalculator that relies on asymptotic properties of the; Profile Likelihood Ratio; - the NeymanConstruction class with this class as a test statistic; - the HybridCalculator class with this class as a test statistic. */",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:788,Testability,test,test,788,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; // Additional Contributions: Giovanni Petrucciani; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::ProfileLikelihoodTestStat; \ingroup Roostats. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface; that calculates the profile likelihood ratio at a particular parameter point; given a dataset. It does not constitute a statistical test, for that one may; either use:. - the ProfileLikelihoodCalculator that relies on asymptotic properties of the; Profile Likelihood Ratio; - the NeymanConstruction class with this class as a test statistic; - the HybridCalculator class with this class as a test statistic. */",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:982,Testability,test,test,982,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; // Additional Contributions: Giovanni Petrucciani; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::ProfileLikelihoodTestStat; \ingroup Roostats. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface; that calculates the profile likelihood ratio at a particular parameter point; given a dataset. It does not constitute a statistical test, for that one may; either use:. - the ProfileLikelihoodCalculator that relies on asymptotic properties of the; Profile Likelihood Ratio; - the NeymanConstruction class with this class as a test statistic; - the HybridCalculator class with this class as a test statistic. */",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:1048,Testability,test,test,1048,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; // Additional Contributions: Giovanni Petrucciani; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::ProfileLikelihoodTestStat; \ingroup Roostats. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface; that calculates the profile likelihood ratio at a particular parameter point; given a dataset. It does not constitute a statistical test, for that one may; either use:. - the ProfileLikelihoodCalculator that relies on asymptotic properties of the; Profile Likelihood Ratio; - the NeymanConstruction class with this class as a test statistic; - the HybridCalculator class with this class as a test statistic. */",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:144,Integrability,depend,depending,144,"////////////////////////////////////////////////////////////////////////////////; /// internal function to evaluate test statistics; /// can do depending on type:; /// - type = 0 standard evaluation,; /// - type = 1 find only unconditional NLL minimum,; /// - type = 2 conditional MLL",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:116,Testability,test,test,116,"////////////////////////////////////////////////////////////////////////////////; /// internal function to evaluate test statistics; /// can do depending on type:; /// - type = 0 standard evaluation,; /// - type = 1 find only unconditional NLL minimum,; /// - type = 2 conditional MLL",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:3,Usability,simpl,simple,3,"// simple",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:42,Usability,simpl,simple,42,"// print data in case of number counting (simple data sets)",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:24,Modifiability,variab,variables,24,"// make sure we set the variables attached to this nll",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:27,Availability,error,errors,27,"// minimize and count eval errors",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:79,Testability,test,test,79,"// skip the conditional ML (the numerator) only when fit value is smaller than test value",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:10,Availability,error,errors,10,"// ignore errors from Improve",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:8,Performance,optimiz,optimizeConst,8,"//minim.optimizeConst(false);",MatchSource.CODE_COMMENT,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx:535,Testability,Test,TestStatistic,535,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::RatioOfProfiledLikelihoodsTestStat; \ingroup Roostats. TestStatistic that returns the ratio of profiled likelihoods. By default the calculation is:. \f[; \log{ \frac{ \lambda(\mu_{alt} , {conditional \: MLE \: for \: alt \: nuisance}) }; { \lambda(\mu_{null} , {conditional \: MLE \: for \: null \: nuisance}) } }; \f]. where \f$ \lambda \f$ is the profile likelihood ratio, so the; MLE for the null and alternate are subtracted off. If `SetSubtractMLE(false)` then it calculates:. \f[; \log{ \frac{ L(\mu_{alt} , {conditional \: MLE \: for \: alt \: nuisance}) }; { L(\mu_{null} , {conditional \: MLE \: for \: null \: nuisance}) } }; \f]. where \f$ L \f$ is the Likelihood function. The values of the parameters of interest for the alternative; hypothesis are taken at the time of the construction.; If empty, it treats all free parameters as nuisance parameters. The value of the parameters of interest for the null hypotheses; are given at each call of Evaluate. This test statistic is often called the Tevatron test statistic, because it has; been used by the Tevatron experiments.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx:635,Testability,log,log,635,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::RatioOfProfiledLikelihoodsTestStat; \ingroup Roostats. TestStatistic that returns the ratio of profiled likelihoods. By default the calculation is:. \f[; \log{ \frac{ \lambda(\mu_{alt} , {conditional \: MLE \: for \: alt \: nuisance}) }; { \lambda(\mu_{null} , {conditional \: MLE \: for \: null \: nuisance}) } }; \f]. where \f$ \lambda \f$ is the profile likelihood ratio, so the; MLE for the null and alternate are subtracted off. If `SetSubtractMLE(false)` then it calculates:. \f[; \log{ \frac{ L(\mu_{alt} , {conditional \: MLE \: for \: alt \: nuisance}) }; { L(\mu_{null} , {conditional \: MLE \: for \: null \: nuisance}) } }; \f]. where \f$ L \f$ is the Likelihood function. The values of the parameters of interest for the alternative; hypothesis are taken at the time of the construction.; If empty, it treats all free parameters as nuisance parameters. The value of the parameters of interest for the null hypotheses; are given at each call of Evaluate. This test statistic is often called the Tevatron test statistic, because it has; been used by the Tevatron experiments.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx:968,Testability,log,log,968,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::RatioOfProfiledLikelihoodsTestStat; \ingroup Roostats. TestStatistic that returns the ratio of profiled likelihoods. By default the calculation is:. \f[; \log{ \frac{ \lambda(\mu_{alt} , {conditional \: MLE \: for \: alt \: nuisance}) }; { \lambda(\mu_{null} , {conditional \: MLE \: for \: null \: nuisance}) } }; \f]. where \f$ \lambda \f$ is the profile likelihood ratio, so the; MLE for the null and alternate are subtracted off. If `SetSubtractMLE(false)` then it calculates:. \f[; \log{ \frac{ L(\mu_{alt} , {conditional \: MLE \: for \: alt \: nuisance}) }; { L(\mu_{null} , {conditional \: MLE \: for \: null \: nuisance}) } }; \f]. where \f$ L \f$ is the Likelihood function. The values of the parameters of interest for the alternative; hypothesis are taken at the time of the construction.; If empty, it treats all free parameters as nuisance parameters. The value of the parameters of interest for the null hypotheses; are given at each call of Evaluate. This test statistic is often called the Tevatron test statistic, because it has; been used by the Tevatron experiments.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx:1452,Testability,test,test,1452,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::RatioOfProfiledLikelihoodsTestStat; \ingroup Roostats. TestStatistic that returns the ratio of profiled likelihoods. By default the calculation is:. \f[; \log{ \frac{ \lambda(\mu_{alt} , {conditional \: MLE \: for \: alt \: nuisance}) }; { \lambda(\mu_{null} , {conditional \: MLE \: for \: null \: nuisance}) } }; \f]. where \f$ \lambda \f$ is the profile likelihood ratio, so the; MLE for the null and alternate are subtracted off. If `SetSubtractMLE(false)` then it calculates:. \f[; \log{ \frac{ L(\mu_{alt} , {conditional \: MLE \: for \: alt \: nuisance}) }; { L(\mu_{null} , {conditional \: MLE \: for \: null \: nuisance}) } }; \f]. where \f$ L \f$ is the Likelihood function. The values of the parameters of interest for the alternative; hypothesis are taken at the time of the construction.; If empty, it treats all free parameters as nuisance parameters. The value of the parameters of interest for the null hypotheses; are given at each call of Evaluate. This test statistic is often called the Tevatron test statistic, because it has; been used by the Tevatron experiments.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx:1496,Testability,test,test,1496,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::RatioOfProfiledLikelihoodsTestStat; \ingroup Roostats. TestStatistic that returns the ratio of profiled likelihoods. By default the calculation is:. \f[; \log{ \frac{ \lambda(\mu_{alt} , {conditional \: MLE \: for \: alt \: nuisance}) }; { \lambda(\mu_{null} , {conditional \: MLE \: for \: null \: nuisance}) } }; \f]. where \f$ \lambda \f$ is the profile likelihood ratio, so the; MLE for the null and alternate are subtracted off. If `SetSubtractMLE(false)` then it calculates:. \f[; \log{ \frac{ L(\mu_{alt} , {conditional \: MLE \: for \: alt \: nuisance}) }; { L(\mu_{null} , {conditional \: MLE \: for \: null \: nuisance}) } }; \f]. where \f$ L \f$ is the Likelihood function. The values of the parameters of interest for the alternative; hypothesis are taken at the time of the construction.; If empty, it treats all free parameters as nuisance parameters. The value of the parameters of interest for the null hypotheses; are given at each call of Evaluate. This test statistic is often called the Tevatron test statistic, because it has; been used by the Tevatron experiments.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx:181,Integrability,depend,depending,181,"////////////////////////////////////////////////////////////////////////////////; /// returns -logL(poi, conditional MLE of nuisance params); /// subtract off the global MLE or not depending on the option; /// It is the numerator or the denominator of the ratio (depending on the pdf); ///; /// L.M. : not sure why this method is needed now",MatchSource.CODE_COMMENT,roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx:263,Integrability,depend,depending,263,"////////////////////////////////////////////////////////////////////////////////; /// returns -logL(poi, conditional MLE of nuisance params); /// subtract off the global MLE or not depending on the option; /// It is the numerator or the denominator of the ratio (depending on the pdf); ///; /// L.M. : not sure why this method is needed now",MatchSource.CODE_COMMENT,roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx:95,Testability,log,logL,95,"////////////////////////////////////////////////////////////////////////////////; /// returns -logL(poi, conditional MLE of nuisance params); /// subtract off the global MLE or not depending on the option; /// It is the numerator or the denominator of the ratio (depending on the pdf); ///; /// L.M. : not sure why this method is needed now",MatchSource.CODE_COMMENT,roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx:11,Modifiability,variab,variables,11,/*; // set variables back to where they were; nullParamsOfInterest = *saveNullPOI;; *allVars = *saveAll;; delete saveAll;; delete allVars;; */,MatchSource.CODE_COMMENT,roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx:29,Availability,error,error,29,"// formula below has a large error when sigma_b becomes zero; // better to use the approximation for sigma_b=0 for very small values",MatchSource.CODE_COMMENT,roofit/roostats/src/RooStatsUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx:4,Testability,Test,Test,4,"/// Test of RooStats should by default offset NLL calculations.",MatchSource.CODE_COMMENT,roofit/roostats/src/RooStatsUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx:35,Modifiability,extend,extended,35,"// extract underlying pdf which is extended; first server is the pdf; second server is the number of events variable",MatchSource.CODE_COMMENT,roofit/roostats/src/RooStatsUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx:108,Modifiability,variab,variable,108,"// extract underlying pdf which is extended; first server is the pdf; second server is the number of events variable",MatchSource.CODE_COMMENT,roofit/roostats/src/RooStatsUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx:35,Modifiability,extend,extended,35,"// extract underlying pdf which is extended; first server is the pdf; second server is the number of events variable",MatchSource.CODE_COMMENT,roofit/roostats/src/RooStatsUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx:108,Modifiability,variab,variable,108,"// extract underlying pdf which is extended; first server is the pdf; second server is the number of events variable",MatchSource.CODE_COMMENT,roofit/roostats/src/RooStatsUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistPlot.cxx:573,Usability,simpl,simple,573,"// @(#)root/roostats:$Id$; // Authors: Sven Kreiss June 2010; // Authors: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::SamplingDistPlot; \ingroup Roostats. This class provides simple and straightforward utilities to plot SamplingDistribution; objects.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/SamplingDistPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistPlot.cxx:63,Safety,avoid,avoid,63,"//obj->Draw(fIterator->GetOption());; // add cloned objects to avoid mem leaks",MatchSource.CODE_COMMENT,roofit/roostats/src/SamplingDistPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistPlot.cxx:91,Testability,test,test,91,"////////////////////////////////////////////////////////////////////////////////; /// TODO test",MatchSource.CODE_COMMENT,roofit/roostats/src/SamplingDistPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx:712,Testability,test,test,712,"// @(#)root/roostats:$Id$; /*************************************************************************; * Project: RooStats *; * Package: RooFit/RooStats *; * Authors: *; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke *; *************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::SamplingDistribution; \ingroup Roostats. This class simply holds a sampling distribution of some test statistic.; The distribution can either be an empirical distribution (eg. the samples themselves) or; a weighted set of points (eg. for the FFT method).; The class supports merging.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/SamplingDistribution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx:667,Usability,simpl,simply,667,"// @(#)root/roostats:$Id$; /*************************************************************************; * Project: RooStats *; * Package: RooFit/RooStats *; * Authors: *; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke *; *************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::SamplingDistribution; \ingroup Roostats. This class simply holds a sampling distribution of some test statistic.; The distribution can either be an empirical distribution (eg. the samples themselves) or; a weighted set of points (eg. for the FFT method).; The class supports merging.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/SamplingDistribution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx:417,Modifiability,variab,variables,417,"////////////////////////////////////////////////////////////////////////////////; /// Creates a SamplingDistribution from a RooDataSet for debugging; /// purposes; e.g. if you need a Gaussian type SamplingDistribution; /// you can generate it from a Gaussian pdf and use the resulting; /// RooDataSet with this constructor.; ///; /// The result is the projected distribution onto varName; /// marginalizing the other variables.; ///; /// If varName is not given, the first variable will be used.; /// This is useful mostly for RooDataSets with only one observable.",MatchSource.CODE_COMMENT,roofit/roostats/src/SamplingDistribution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx:473,Modifiability,variab,variable,473,"////////////////////////////////////////////////////////////////////////////////; /// Creates a SamplingDistribution from a RooDataSet for debugging; /// purposes; e.g. if you need a Gaussian type SamplingDistribution; /// you can generate it from a Gaussian pdf and use the resulting; /// RooDataSet with this constructor.; ///; /// The result is the projected distribution onto varName; /// marginalizing the other variables.; ///; /// If varName is not given, the first variable will be used.; /// This is useful mostly for RooDataSets with only one observable.",MatchSource.CODE_COMMENT,roofit/roostats/src/SamplingDistribution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx:158,Modifiability,variab,variable,158,"////////////////////////////////////////////////////////////////////////////////; /// Merge SamplingDistributions (does nothing if nullptr is given).; /// If variable name was not set before, it is copied from the added; /// SamplingDistribution.",MatchSource.CODE_COMMENT,roofit/roostats/src/SamplingDistribution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx:33,Performance,cache,cache,33,"// compute the empirical CDF and cache in a vector",MatchSource.CODE_COMMENT,roofit/roostats/src/SamplingDistribution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx:234,Availability,error,error,234,"////////////////////////////////////////////////////////////////////////////////; /// Returns the integral in the open/closed/mixed interval. Default is [low,high) interval.; /// Normalization can be turned off.; /// compute also the error on the integral",MatchSource.CODE_COMMENT,roofit/roostats/src/SamplingDistribution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx:28,Availability,error,error,28,"// use formula for binomial error in case of weighted events; // expression can be derived using a MLE for a weighted binomial likelihood",MatchSource.CODE_COMMENT,roofit/roostats/src/SamplingDistribution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx:163,Integrability,depend,depending,163,"////////////////////////////////////////////////////////////////////////////////; /// returns the inverse of the cumulative distribution function, with variations depending on number of samples",MatchSource.CODE_COMMENT,roofit/roostats/src/SamplingDistribution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx:586,Availability,down,down,586,"// Acceptance regions are meant to be inclusive of (1-\alpha) of the probability; // so the returned values of the CDF should make this easy.; // in particular:; // if finding the critical value for a lower bound; // when p_i < p < p_j, one should return the value associated with i; // if i=0, then one should return -infinity; // if finding the critical value for an upper bound; // when p_i < p < p_j, one should return the value associated with j; // if i = size-1, then one should return +infinity; // use pvalue < 0.5 to indicate a lower bound is requested; // casting will round down, eg. give i",MatchSource.CODE_COMMENT,roofit/roostats/src/SamplingDistribution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx:22,Availability,down,down,22,"// casting will round down, eg. give i",MatchSource.CODE_COMMENT,roofit/roostats/src/SamplingDistribution.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleInterval.cxx:901,Integrability,interface,interface,901,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*****************************************************************************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; *; *****************************************************************************/; /** \class RooStats::SimpleInterval; \ingroup Roostats. SimpleInterval is a concrete implementation of the ConfInterval interface.; It implements simple 1-dimensional intervals in a range [a,b].; In addition, you can ask it for the upper- or lower-bound.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/SimpleInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleInterval.cxx:802,Usability,Simpl,SimpleInterval,802,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*****************************************************************************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; *; *****************************************************************************/; /** \class RooStats::SimpleInterval; \ingroup Roostats. SimpleInterval is a concrete implementation of the ConfInterval interface.; It implements simple 1-dimensional intervals in a range [a,b].; In addition, you can ask it for the upper- or lower-bound.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/SimpleInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleInterval.cxx:837,Usability,Simpl,SimpleInterval,837,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*****************************************************************************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; *; *****************************************************************************/; /** \class RooStats::SimpleInterval; \ingroup Roostats. SimpleInterval is a concrete implementation of the ConfInterval interface.; It implements simple 1-dimensional intervals in a range [a,b].; In addition, you can ask it for the upper- or lower-bound.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/SimpleInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleInterval.cxx:927,Usability,simpl,simple,927,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*****************************************************************************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; *; *****************************************************************************/; /** \class RooStats::SimpleInterval; \ingroup Roostats. SimpleInterval is a concrete implementation of the ConfInterval interface.; It implements simple 1-dimensional intervals in a range [a,b].; In addition, you can ask it for the upper- or lower-bound.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/SimpleInterval.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleInterval.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx:530,Testability,Test,TestStatistic,530,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::SimpleLikelihoodRatioTestStat; \ingroup Roostats. TestStatistic class that returns -log(L[null] / L[alt]) where; L is the likelihood.; It is often called as the LEP Test statistic. */",MatchSource.CODE_COMMENT,roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx:564,Testability,log,log,564,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::SimpleLikelihoodRatioTestStat; \ingroup Roostats. TestStatistic class that returns -log(L[null] / L[alt]) where; L is the likelihood.; It is often called as the LEP Test statistic. */",MatchSource.CODE_COMMENT,roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx:645,Testability,Test,Test,645,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::SimpleLikelihoodRatioTestStat; \ingroup Roostats. TestStatistic class that returns -log(L[null] / L[alt]) where; L is the likelihood.; It is often called as the LEP Test statistic. */",MatchSource.CODE_COMMENT,roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx:480,Usability,Simpl,SimpleLikelihoodRatioTestStat,480,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::SimpleLikelihoodRatioTestStat; \ingroup Roostats. TestStatistic class that returns -log(L[null] / L[alt]) where; L is the likelihood.; It is often called as the LEP Test statistic. */",MatchSource.CODE_COMMENT,roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx:113,Availability,error,errors,113,"// strip pdfs of constraints (which cancel out in the ratio) to avoid unnecessary computations and computational errors",MatchSource.CODE_COMMENT,roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx:64,Safety,avoid,avoid,64,"// strip pdfs of constraints (which cancel out in the ratio) to avoid unnecessary computations and computational errors",MatchSource.CODE_COMMENT,roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx:24,Modifiability,variab,variables,24,"// make sure we set the variables attached to this nll",MatchSource.CODE_COMMENT,roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx:24,Modifiability,variab,variables,24,"// make sure we set the variables attached to this nll",MatchSource.CODE_COMMENT,roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:2871,Modifiability,variab,variable,2871,"ed on; ``SPlot: A statistical tool to unfold data distributions,''; Nucl. Instrum. Meth. A 555, 356 (2005) [arXiv:physics/0402083]. ### Creating an SPlot; To use this class, you first must have a pdf that includes; yield parameters for (possibly several) different species, for example a signal and background; yield. Those yields must be of type RooRealVar / RooLinearVar (or anything that derives from; RooAbsRealLValue). This is necessary because; RooStats needs to be able to set the yields to 0 and 1 to probe the PDF. After; constructing the s weights, the yields will be restored to their original values. To create an instance of the SPlot, supply a data set, the pdf to analyse,; and a list which parameters of the pdf are yields. The SPlot will calculate SWeights, and; include these as columns in the RooDataSet. The dataset will have two additional columns; for every yield with name ""`<varname>`"":; - `L_<varname>` is the likelihood for each event, *i.e.*, the pdf evaluated for the given value of the variable ""varname"".; - `<varname>_sw` is the value of the sWeight for the variable ""varname"" for each event. In SPlot::SPlot(), one can choose whether columns should be added to an existing dataset or whether a copy of the dataset; should be created. ### Plotting s-weighted data; After computing the s weights, create a new dataset that uses the s weights of the variable of interest for weighting.; If the yield parameter for signal was e.g. ""signalYield"", the dataset can be constructed as follows:; ~~~{.cpp}; RooDataSet data_signal(""<name>"", ""<title>"", <dataWithSWeights>, <variables>, 0, ""signalYield_sw"");; ~~~. A complete tutorial with an extensive model is rs301_splot.C. #### Using ratios as yield parameters; As mentioned, RooStats needs to be able to modify the yield parameters. That means that they have to be a RooRealVar; of a RooLinearVar. This allows using ratio parameters as in the following example:; ~~~{.cpp}; RooRealVar x(""x"", ""observable"", 0, 0, 20);; RooRealVa",MatchSource.CODE_COMMENT,roofit/roostats/src/SPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:2945,Modifiability,variab,variable,2945,"rum. Meth. A 555, 356 (2005) [arXiv:physics/0402083]. ### Creating an SPlot; To use this class, you first must have a pdf that includes; yield parameters for (possibly several) different species, for example a signal and background; yield. Those yields must be of type RooRealVar / RooLinearVar (or anything that derives from; RooAbsRealLValue). This is necessary because; RooStats needs to be able to set the yields to 0 and 1 to probe the PDF. After; constructing the s weights, the yields will be restored to their original values. To create an instance of the SPlot, supply a data set, the pdf to analyse,; and a list which parameters of the pdf are yields. The SPlot will calculate SWeights, and; include these as columns in the RooDataSet. The dataset will have two additional columns; for every yield with name ""`<varname>`"":; - `L_<varname>` is the likelihood for each event, *i.e.*, the pdf evaluated for the given value of the variable ""varname"".; - `<varname>_sw` is the value of the sWeight for the variable ""varname"" for each event. In SPlot::SPlot(), one can choose whether columns should be added to an existing dataset or whether a copy of the dataset; should be created. ### Plotting s-weighted data; After computing the s weights, create a new dataset that uses the s weights of the variable of interest for weighting.; If the yield parameter for signal was e.g. ""signalYield"", the dataset can be constructed as follows:; ~~~{.cpp}; RooDataSet data_signal(""<name>"", ""<title>"", <dataWithSWeights>, <variables>, 0, ""signalYield_sw"");; ~~~. A complete tutorial with an extensive model is rs301_splot.C. #### Using ratios as yield parameters; As mentioned, RooStats needs to be able to modify the yield parameters. That means that they have to be a RooRealVar; of a RooLinearVar. This allows using ratio parameters as in the following example:; ~~~{.cpp}; RooRealVar x(""x"", ""observable"", 0, 0, 20);; RooRealVar m(""m"", ""mean"", 5., -10, 10);; RooRealVar s(""s"", ""sigma"", 2., 0, 10);; RooGau",MatchSource.CODE_COMMENT,roofit/roostats/src/SPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:3235,Modifiability,variab,variable,3235,"of type RooRealVar / RooLinearVar (or anything that derives from; RooAbsRealLValue). This is necessary because; RooStats needs to be able to set the yields to 0 and 1 to probe the PDF. After; constructing the s weights, the yields will be restored to their original values. To create an instance of the SPlot, supply a data set, the pdf to analyse,; and a list which parameters of the pdf are yields. The SPlot will calculate SWeights, and; include these as columns in the RooDataSet. The dataset will have two additional columns; for every yield with name ""`<varname>`"":; - `L_<varname>` is the likelihood for each event, *i.e.*, the pdf evaluated for the given value of the variable ""varname"".; - `<varname>_sw` is the value of the sWeight for the variable ""varname"" for each event. In SPlot::SPlot(), one can choose whether columns should be added to an existing dataset or whether a copy of the dataset; should be created. ### Plotting s-weighted data; After computing the s weights, create a new dataset that uses the s weights of the variable of interest for weighting.; If the yield parameter for signal was e.g. ""signalYield"", the dataset can be constructed as follows:; ~~~{.cpp}; RooDataSet data_signal(""<name>"", ""<title>"", <dataWithSWeights>, <variables>, 0, ""signalYield_sw"");; ~~~. A complete tutorial with an extensive model is rs301_splot.C. #### Using ratios as yield parameters; As mentioned, RooStats needs to be able to modify the yield parameters. That means that they have to be a RooRealVar; of a RooLinearVar. This allows using ratio parameters as in the following example:; ~~~{.cpp}; RooRealVar x(""x"", ""observable"", 0, 0, 20);; RooRealVar m(""m"", ""mean"", 5., -10, 10);; RooRealVar s(""s"", ""sigma"", 2., 0, 10);; RooGaussian gauss(""gauss"", ""gauss"", x, m, s);. RooRealVar a(""a"", ""exp"", -0.2, -10., 0.);; RooExponential ex(""ex"", ""ex"", x, a);. RooRealVar common(""common"", ""common scale"", 3., 0, 10);; RooRealVar r1(""r1"", ""ratio of signal events"", 0.3, 0, 10);; RooRealVar r2(""r2"", ""r",MatchSource.CODE_COMMENT,roofit/roostats/src/SPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:3450,Modifiability,variab,variables,3450,"restored to their original values. To create an instance of the SPlot, supply a data set, the pdf to analyse,; and a list which parameters of the pdf are yields. The SPlot will calculate SWeights, and; include these as columns in the RooDataSet. The dataset will have two additional columns; for every yield with name ""`<varname>`"":; - `L_<varname>` is the likelihood for each event, *i.e.*, the pdf evaluated for the given value of the variable ""varname"".; - `<varname>_sw` is the value of the sWeight for the variable ""varname"" for each event. In SPlot::SPlot(), one can choose whether columns should be added to an existing dataset or whether a copy of the dataset; should be created. ### Plotting s-weighted data; After computing the s weights, create a new dataset that uses the s weights of the variable of interest for weighting.; If the yield parameter for signal was e.g. ""signalYield"", the dataset can be constructed as follows:; ~~~{.cpp}; RooDataSet data_signal(""<name>"", ""<title>"", <dataWithSWeights>, <variables>, 0, ""signalYield_sw"");; ~~~. A complete tutorial with an extensive model is rs301_splot.C. #### Using ratios as yield parameters; As mentioned, RooStats needs to be able to modify the yield parameters. That means that they have to be a RooRealVar; of a RooLinearVar. This allows using ratio parameters as in the following example:; ~~~{.cpp}; RooRealVar x(""x"", ""observable"", 0, 0, 20);; RooRealVar m(""m"", ""mean"", 5., -10, 10);; RooRealVar s(""s"", ""sigma"", 2., 0, 10);; RooGaussian gauss(""gauss"", ""gauss"", x, m, s);. RooRealVar a(""a"", ""exp"", -0.2, -10., 0.);; RooExponential ex(""ex"", ""ex"", x, a);. RooRealVar common(""common"", ""common scale"", 3., 0, 10);; RooRealVar r1(""r1"", ""ratio of signal events"", 0.3, 0, 10);; RooRealVar r2(""r2"", ""ratio of background events"", 0.5, 0, 10);; RooLinearVar c1(""c1"", ""c1"", r1, common, RooFit::RooConst(0.));; RooLinearVar c2(""c2"", ""c2"", r2, common, RooFit::RooConst(0.));. RooAddPdf sum(""sum"", ""sum"", RooArgSet(gauss, ex), RooArgSet(c1, c2))",MatchSource.CODE_COMMENT,roofit/roostats/src/SPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:132,Modifiability,variab,variables,132,"////////////////////////////////////////////////////////////////////////////////; ///Constructor from a RooDataSet; ///No sWeighted variables are present",MatchSource.CODE_COMMENT,roofit/roostats/src/SPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:174,Modifiability,variab,variables,174,"////////////////////////////////////////////////////////////////////////////////; /// Method which adds the sWeights to the dataset.; ///; /// The SPlot will contain two new variables for each yield parameter:; /// - `L_<varname>` is the likelihood for each event, i.e., the pdf evaluated for the a given value of the variable ""varname"".; /// - `<varname>_sw` is the value of the sWeight for the variable ""varname"" for each event.; ///; /// Find Parameters in the PDF to be considered fixed when calculating the SWeights; /// and be sure to NOT include the yields in that list.; ///; /// After fixing non-yield parameters, this function will start a fit by calling; /// ```; /// pdf->fitTo(*fSData, RooFit::Extended(true), RooFit::SumW2Error(true), RooFit::PrintLevel(-1), RooFit::PrintEvalErrors(-1)).; /// ```; /// One can pass additional arguments to `fitTo`, such as `RooFit::Range(""fitrange"")`, as `arg5`, `arg6`, `arg7`, `arg8`.; ///; /// \note A `RooFit::Range` may be necessary to get expected results if you initially fit in a range; /// and/or called `pdf->fixCoefRange(""fitrange"")` on `pdf`.; /// Pass `arg5`, `arg6`, `arg7`, `arg8` AT YOUR OWN RISK.; ///; /// \param[in] pdf PDF to fit to data to compute s weights.; /// \param[in] yieldsTmp Yields to use to compute s weights.; /// \param[in] projDeps These will not be normalized over when calculating the sWeights,; /// and will be considered parameters, not observables.; /// \param[in] includeWeights Include weights of the input data in calculation of s weights.; /// \param[in] arg5,arg6,arg7,arg8 Optional additional arguments for the fitting step.",MatchSource.CODE_COMMENT,roofit/roostats/src/SPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:318,Modifiability,variab,variable,318,"////////////////////////////////////////////////////////////////////////////////; /// Method which adds the sWeights to the dataset.; ///; /// The SPlot will contain two new variables for each yield parameter:; /// - `L_<varname>` is the likelihood for each event, i.e., the pdf evaluated for the a given value of the variable ""varname"".; /// - `<varname>_sw` is the value of the sWeight for the variable ""varname"" for each event.; ///; /// Find Parameters in the PDF to be considered fixed when calculating the SWeights; /// and be sure to NOT include the yields in that list.; ///; /// After fixing non-yield parameters, this function will start a fit by calling; /// ```; /// pdf->fitTo(*fSData, RooFit::Extended(true), RooFit::SumW2Error(true), RooFit::PrintLevel(-1), RooFit::PrintEvalErrors(-1)).; /// ```; /// One can pass additional arguments to `fitTo`, such as `RooFit::Range(""fitrange"")`, as `arg5`, `arg6`, `arg7`, `arg8`.; ///; /// \note A `RooFit::Range` may be necessary to get expected results if you initially fit in a range; /// and/or called `pdf->fixCoefRange(""fitrange"")` on `pdf`.; /// Pass `arg5`, `arg6`, `arg7`, `arg8` AT YOUR OWN RISK.; ///; /// \param[in] pdf PDF to fit to data to compute s weights.; /// \param[in] yieldsTmp Yields to use to compute s weights.; /// \param[in] projDeps These will not be normalized over when calculating the sWeights,; /// and will be considered parameters, not observables.; /// \param[in] includeWeights Include weights of the input data in calculation of s weights.; /// \param[in] arg5,arg6,arg7,arg8 Optional additional arguments for the fitting step.",MatchSource.CODE_COMMENT,roofit/roostats/src/SPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:396,Modifiability,variab,variable,396,"////////////////////////////////////////////////////////////////////////////////; /// Method which adds the sWeights to the dataset.; ///; /// The SPlot will contain two new variables for each yield parameter:; /// - `L_<varname>` is the likelihood for each event, i.e., the pdf evaluated for the a given value of the variable ""varname"".; /// - `<varname>_sw` is the value of the sWeight for the variable ""varname"" for each event.; ///; /// Find Parameters in the PDF to be considered fixed when calculating the SWeights; /// and be sure to NOT include the yields in that list.; ///; /// After fixing non-yield parameters, this function will start a fit by calling; /// ```; /// pdf->fitTo(*fSData, RooFit::Extended(true), RooFit::SumW2Error(true), RooFit::PrintLevel(-1), RooFit::PrintEvalErrors(-1)).; /// ```; /// One can pass additional arguments to `fitTo`, such as `RooFit::Range(""fitrange"")`, as `arg5`, `arg6`, `arg7`, `arg8`.; ///; /// \note A `RooFit::Range` may be necessary to get expected results if you initially fit in a range; /// and/or called `pdf->fixCoefRange(""fitrange"")` on `pdf`.; /// Pass `arg5`, `arg6`, `arg7`, `arg8` AT YOUR OWN RISK.; ///; /// \param[in] pdf PDF to fit to data to compute s weights.; /// \param[in] yieldsTmp Yields to use to compute s weights.; /// \param[in] projDeps These will not be normalized over when calculating the sWeights,; /// and will be considered parameters, not observables.; /// \param[in] includeWeights Include weights of the input data in calculation of s weights.; /// \param[in] arg5,arg6,arg7,arg8 Optional additional arguments for the fitting step.",MatchSource.CODE_COMMENT,roofit/roostats/src/SPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:707,Modifiability,Extend,Extended,707,"////////////////////////////////////////////////////////////////////////////////; /// Method which adds the sWeights to the dataset.; ///; /// The SPlot will contain two new variables for each yield parameter:; /// - `L_<varname>` is the likelihood for each event, i.e., the pdf evaluated for the a given value of the variable ""varname"".; /// - `<varname>_sw` is the value of the sWeight for the variable ""varname"" for each event.; ///; /// Find Parameters in the PDF to be considered fixed when calculating the SWeights; /// and be sure to NOT include the yields in that list.; ///; /// After fixing non-yield parameters, this function will start a fit by calling; /// ```; /// pdf->fitTo(*fSData, RooFit::Extended(true), RooFit::SumW2Error(true), RooFit::PrintLevel(-1), RooFit::PrintEvalErrors(-1)).; /// ```; /// One can pass additional arguments to `fitTo`, such as `RooFit::Range(""fitrange"")`, as `arg5`, `arg6`, `arg7`, `arg8`.; ///; /// \note A `RooFit::Range` may be necessary to get expected results if you initially fit in a range; /// and/or called `pdf->fixCoefRange(""fitrange"")` on `pdf`.; /// Pass `arg5`, `arg6`, `arg7`, `arg8` AT YOUR OWN RISK.; ///; /// \param[in] pdf PDF to fit to data to compute s weights.; /// \param[in] yieldsTmp Yields to use to compute s weights.; /// \param[in] projDeps These will not be normalized over when calculating the sWeights,; /// and will be considered parameters, not observables.; /// \param[in] includeWeights Include weights of the input data in calculation of s weights.; /// \param[in] arg5,arg6,arg7,arg8 Optional additional arguments for the fitting step.",MatchSource.CODE_COMMENT,roofit/roostats/src/SPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:1156,Safety,RISK,RISK,1156,"////////////////////////////////////////////////////////////////////////////////; /// Method which adds the sWeights to the dataset.; ///; /// The SPlot will contain two new variables for each yield parameter:; /// - `L_<varname>` is the likelihood for each event, i.e., the pdf evaluated for the a given value of the variable ""varname"".; /// - `<varname>_sw` is the value of the sWeight for the variable ""varname"" for each event.; ///; /// Find Parameters in the PDF to be considered fixed when calculating the SWeights; /// and be sure to NOT include the yields in that list.; ///; /// After fixing non-yield parameters, this function will start a fit by calling; /// ```; /// pdf->fitTo(*fSData, RooFit::Extended(true), RooFit::SumW2Error(true), RooFit::PrintLevel(-1), RooFit::PrintEvalErrors(-1)).; /// ```; /// One can pass additional arguments to `fitTo`, such as `RooFit::Range(""fitrange"")`, as `arg5`, `arg6`, `arg7`, `arg8`.; ///; /// \note A `RooFit::Range` may be necessary to get expected results if you initially fit in a range; /// and/or called `pdf->fixCoefRange(""fitrange"")` on `pdf`.; /// Pass `arg5`, `arg6`, `arg7`, `arg8` AT YOUR OWN RISK.; ///; /// \param[in] pdf PDF to fit to data to compute s weights.; /// \param[in] yieldsTmp Yields to use to compute s weights.; /// \param[in] projDeps These will not be normalized over when calculating the sWeights,; /// and will be considered parameters, not observables.; /// \param[in] includeWeights Include weights of the input data in calculation of s weights.; /// \param[in] arg5,arg6,arg7,arg8 Optional additional arguments for the fitting step.",MatchSource.CODE_COMMENT,roofit/roostats/src/SPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:41,Modifiability,variab,variables,41,"// Fit yields to the data with all other variables held constant; // This is necessary because SPlot assumes the yields minimise -Log(likelihood)",MatchSource.CODE_COMMENT,roofit/roostats/src/SPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:130,Testability,Log,Log,130,"// Fit yields to the data with all other variables held constant; // This is necessary because SPlot assumes the yields minimise -Log(likelihood)",MatchSource.CODE_COMMENT,roofit/roostats/src/SPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:15,Modifiability,variab,variables,15,"// The list of variables to normalize over when calculating PDF values.",MatchSource.CODE_COMMENT,roofit/roostats/src/SPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:24,Modifiability,variab,variables,24,"// Create and label the variables; // used to store the SWeights",MatchSource.CODE_COMMENT,roofit/roostats/src/SPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:11,Modifiability,variab,variables,11,"//Make any variables that were forced to constant no longer constant",MatchSource.CODE_COMMENT,roofit/roostats/src/SPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx:294,Modifiability,variab,variables,294,"////////////////////////////////////////////////////////////////////////////////; /// This method generates a toy data set for importance sampling for the given parameter point taking; /// global observables into account.; /// The values of the generated global observables remain in the pdf's variables.; /// They have to have those values for the subsequent evaluation of the; /// test statistics.",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCImportanceSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx:383,Testability,test,test,383,"////////////////////////////////////////////////////////////////////////////////; /// This method generates a toy data set for importance sampling for the given parameter point taking; /// global observables into account.; /// The values of the generated global observables remain in the pdf's variables.; /// They have to have those values for the subsequent evaluation of the; /// test statistics.",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCImportanceSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx:61,Usability,clear,clear,61,"// paramPoint used to be given as parameter; // situation is clear when there is only one null.; // WHAT TO DO FOR MANY nullptr DENSITIES?",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCImportanceSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx:46,Modifiability,variab,variables,46,"//oocoutI(nullptr,InputArguments) << ""Setting variables to nullSnapshot[""<<i<<""]""<<endl;; //fNullSnapshots[i]->Print(""v"");",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCImportanceSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx:46,Modifiability,variab,variables,46,"//oocoutI(nullptr,InputArguments) << ""Setting variables to impSnapshot[""<<i<<""]""<<endl;; //fImportanceSnapshots[i]->Print(""v"");",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCImportanceSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx:17,Availability,error,error,17,"// check whether error is trustworthy",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCImportanceSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCImportanceSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:857,Integrability,interface,interface,857,"// @(#)root/roostats:$Id$; // Author: Sven Kreiss June 2010; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::NuisanceParametersSampler; \ingroup Roostats. Helper class for ToyMCSampler. Handles all of the nuisance parameter related; functions. Once instantiated, it gives a new nuisance parameter point; at each call to nextPoint(...).; */; /** \class RooStats::ToyMCSampler; \ingroup Roostats. ToyMCSampler is an implementation of the TestStatSampler interface.; It generates Toy Monte Carlo for a given parameter point and evaluates a; TestStatistic. For parallel runs, ToyMCSampler can be given an instance of ProofConfig; and then run in parallel using proof or proof-lite. Internally, it uses; ToyMCStudy with the RooStudyManager.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:841,Testability,Test,TestStatSampler,841,"// @(#)root/roostats:$Id$; // Author: Sven Kreiss June 2010; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::NuisanceParametersSampler; \ingroup Roostats. Helper class for ToyMCSampler. Handles all of the nuisance parameter related; functions. Once instantiated, it gives a new nuisance parameter point; at each call to nextPoint(...).; */; /** \class RooStats::ToyMCSampler; \ingroup Roostats. ToyMCSampler is an implementation of the TestStatSampler interface.; It generates Toy Monte Carlo for a given parameter point and evaluates a; TestStatistic. For parallel runs, ToyMCSampler can be given an instance of ProofConfig; and then run in parallel using proof or proof-lite. Internally, it uses; ToyMCStudy with the RooStudyManager.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:943,Testability,Test,TestStatistic,943,"// @(#)root/roostats:$Id$; // Author: Sven Kreiss June 2010; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::NuisanceParametersSampler; \ingroup Roostats. Helper class for ToyMCSampler. Handles all of the nuisance parameter related; functions. Once instantiated, it gives a new nuisance parameter point; at each call to nextPoint(...).; */; /** \class RooStats::ToyMCSampler; \ingroup Roostats. ToyMCSampler is an implementation of the TestStatSampler interface.; It generates Toy Monte Carlo for a given parameter point and evaluates a; TestStatistic. For parallel runs, ToyMCSampler can be given an instance of ProofConfig; and then run in parallel using proof or proof-lite. Internally, it uses; ToyMCStudy with the RooStudyManager.; */",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:238,Energy Efficiency,adapt,adaptive,238,"////////////////////////////////////////////////////////////////////////////////; /// Creates the initial set of nuisance parameter points. It also refills the; /// set with new parameter points if called repeatedly. This helps with; /// adaptive sampling as the required number of nuisance parameter points; /// might increase during the run.",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:238,Modifiability,adapt,adaptive,238,"////////////////////////////////////////////////////////////////////////////////; /// Creates the initial set of nuisance parameter points. It also refills the; /// set with new parameter points if called repeatedly. This helps with; /// adaptive sampling as the required number of nuisance parameter points; /// might increase during the run.",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:28,Deployability,integrat,integration,28,"//suppress messages for num integration of Roofit",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:11,Integrability,message,messages,11,"//suppress messages for num integration of Roofit",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:28,Integrability,integrat,integration,28,"//suppress messages for num integration of Roofit",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:28,Deployability,integrat,integration,28,"//suppress messages for num integration of Roofit",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:11,Integrability,message,messages,11,"//suppress messages for num integration of Roofit",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:28,Integrability,integrat,integration,28,"//suppress messages for num integration of Roofit",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:99,Testability,test,test,99,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate all test statistics, returning result and any detailed output.; /// PDF parameter values are saved in case they are modified by; /// TestStatistic::Evaluate (eg. SimpleLikelihoodRatioTestStat).",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:228,Testability,Test,TestStatistic,228,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate all test statistics, returning result and any detailed output.; /// PDF parameter values are saved in case they are modified by; /// TestStatistic::Evaluate (eg. SimpleLikelihoodRatioTestStat).",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:257,Usability,Simpl,SimpleLikelihoodRatioTestStat,257,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate all test statistics, returning result and any detailed output.; /// PDF parameter values are saved in case they are modified by; /// TestStatistic::Evaluate (eg. SimpleLikelihoodRatioTestStat).",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:8,Energy Efficiency,adapt,adaptive,8,"// turn adaptive sampling off if given",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:8,Modifiability,adapt,adaptive,8,"// turn adaptive sampling off if given",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:36,Safety,avoid,avoid,36,"// temporary workspace for proof to avoid messing with TRef",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:17,Performance,cache,cache,17,"// Make sure the cache is clear. It is important to clear it here, because; // the cache might be invalid even when just the firstPOI was changed, for which; // no accessor has to be called. (Fixes a bug when ToyMCSampler is; // used with the Neyman Construction)",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:83,Performance,cache,cache,83,"// Make sure the cache is clear. It is important to clear it here, because; // the cache might be invalid even when just the firstPOI was changed, for which; // no accessor has to be called. (Fixes a bug when ToyMCSampler is; // used with the Neyman Construction)",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:164,Security,access,accessor,164,"// Make sure the cache is clear. It is important to clear it here, because; // the cache might be invalid even when just the firstPOI was changed, for which; // no accessor has to be called. (Fixes a bug when ToyMCSampler is; // used with the Neyman Construction)",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:26,Usability,clear,clear,26,"// Make sure the cache is clear. It is important to clear it here, because; // the cache might be invalid even when just the firstPOI was changed, for which; // no accessor has to be called. (Fixes a bug when ToyMCSampler is; // used with the Neyman Construction)",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:52,Usability,clear,clear,52,"// Make sure the cache is clear. It is important to clear it here, because; // the cache might be invalid even when just the firstPOI was changed, for which; // no accessor has to be called. (Fixes a bug when ToyMCSampler is; // used with the Neyman Construction)",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:16,Performance,cache,cache,16,"// important to cache the paramPoint b/c test statistic might; // modify it from event to event",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:41,Testability,test,test,41,"// important to cache the paramPoint b/c test statistic might; // modify it from event to event",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:51,Energy Efficiency,adapt,adaptive,51,"// counts the number of toys in the limits set for adaptive sampling; // (taking weights into account; always on first test statistic)",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:51,Modifiability,adapt,adaptive,51,"// counts the number of toys in the limits set for adaptive sampling; // (taking weights into account; always on first test statistic)",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:119,Testability,test,test,119,"// counts the number of toys in the limits set for adaptive sampling; // (taking weights into account; always on first test statistic)",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:10,Deployability,update,update,10,"// status update",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:89,Energy Efficiency,adapt,adaptive,89,"// TODO: change this treatment to keep track of all values so that the threshold; // for adaptive sampling is counted for all distributions and not just the; // first one.",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:89,Modifiability,adapt,adaptive,89,"// TODO: change this treatment to keep track of all values so that the threshold; // for adaptive sampling is counted for all distributions and not just the; // first one.",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:7,Modifiability,variab,variables,7,"// set variables to requested parameter point",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:29,Usability,Simpl,SimpleLikelihoodRatioTestStat,29,"// important for example for SimpleLikelihoodRatioTestStat",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:3,Energy Efficiency,adapt,adaptive,3,"// adaptive sampling checks",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:3,Modifiability,adapt,adaptive,3,"// adaptive sampling checks",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:270,Modifiability,variab,variables,270,"////////////////////////////////////////////////////////////////////////////////; /// This method generates a toy data set for the given parameter point taking; /// global observables into account.; /// The values of the generated global observables remain in the pdf's variables.; /// They have to have those values for the subsequent evaluation of the; /// test statistics.",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:359,Testability,test,test,359,"////////////////////////////////////////////////////////////////////////////////; /// This method generates a toy data set for the given parameter point taking; /// global observables into account.; /// The values of the generated global observables remain in the pdf's variables.; /// They have to have those values for the subsequent evaluation of the; /// test statistics.",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:95,Integrability,interface,interface,95,"////////////////////////////////////////////////////////////////////////////////; /// Extended interface to append to sampling distribution more samples",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:86,Modifiability,Extend,Extended,86,"////////////////////////////////////////////////////////////////////////////////; /// Extended interface to append to sampling distribution more samples",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:96,Performance,cache,cache,96,"////////////////////////////////////////////////////////////////////////////////; /// clear the cache obtained from the pdf used for speeding the toy and global observables generation; /// needs to be called every time the model pdf (fPdf) changes",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:86,Usability,clear,clear,86,"////////////////////////////////////////////////////////////////////////////////; /// clear the cache obtained from the pdf used for speeding the toy and global observables generation; /// needs to be called every time the model pdf (fPdf) changes",MatchSource.CODE_COMMENT,roofit/roostats/src/ToyMCSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/UniformProposal.cxx:586,Integrability,interface,interface,586,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::UniformProposal; \ingroup Roostats. UniformProposal is a concrete implementation of the ProposalFunction interface; for use with a Markov Chain Monte Carlo algorithm. This proposal function is; a uniformly random distribution over the parameter space. The proposal; ignores the current point when it proposes a new point. The proposal; function is symmetric, though it may not cause a MetropolisHastings run to; converge as quickly as other proposal functions. */",MatchSource.CODE_COMMENT,roofit/roostats/src/UniformProposal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/UniformProposal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/UpperLimitMCSModule.cxx:134,Testability,log,log,134,"////////////////////////////////////////////////////////////////////////////////; /// Return auxiliary dataset with results of delta(-log(L)); /// calculations of this module so that it is merged with; /// RooMCStudy::fitParDataSet() by RooMCStudy",MatchSource.CODE_COMMENT,roofit/roostats/src/UpperLimitMCSModule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/UpperLimitMCSModule.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/UpperLimitMCSModule.cxx:54,Testability,test,testsize,54,"//PLC calculates intervals. for one sided ul multiply testsize by two",MatchSource.CODE_COMMENT,roofit/roostats/src/UpperLimitMCSModule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/UpperLimitMCSModule.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/UpperLimitMCSModule.cxx:232,Safety,abort,abort,232,"// if (_ul->getVal()<1){; // RooStats::LikelihoodIntervalPlot plotpll((RooStats::LikelihoodInterval*) pllint);; // TCanvas c1;; // plotpll.Draw();; // c1.Print(""test.ps"");; // std::cout<<"" UL<1 whats going on here?""<<std::endl;; // abort();; // }",MatchSource.CODE_COMMENT,roofit/roostats/src/UpperLimitMCSModule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/UpperLimitMCSModule.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/UpperLimitMCSModule.cxx:161,Testability,test,test,161,"// if (_ul->getVal()<1){; // RooStats::LikelihoodIntervalPlot plotpll((RooStats::LikelihoodInterval*) pllint);; // TCanvas c1;; // plotpll.Draw();; // c1.Print(""test.ps"");; // std::cout<<"" UL<1 whats going on here?""<<std::endl;; // abort();; // }",MatchSource.CODE_COMMENT,roofit/roostats/src/UpperLimitMCSModule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/UpperLimitMCSModule.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:3,Testability,Test,Tests,3,"// Tests file",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:105,Testability,Test,Test,105,"//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // RooStats Unit Test S.T.R.E.S.S. Suite //; // Authors: Ioan Gabriel Bucur, Lorenzo Moneta, Wouter Verkerke //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; ////////////////////////////////////////////////////////////////////////////////; /// Print test program number and its title",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:381,Testability,test,test,381,"//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // RooStats Unit Test S.T.R.E.S.S. Suite //; // Authors: Ioan Gabriel Bucur, Lorenzo Moneta, Wouter Verkerke //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; ////////////////////////////////////////////////////////////////////////////////; /// Print test program number and its title",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:115,Testability,test,test,115,"////////////////////////////////////////////////////////////////////////////////; /// width of lines when printing test results",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:36,Availability,error,errors,36,"// Add dedicated logging stream for errors that will remain active in silent mode",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:17,Testability,log,logging,17,"// Add dedicated logging stream for errors that will remain active in silent mode",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:7,Testability,TEST,TEST,7,"// 1-5 TEST PLC CONFINT SIMPLE GAUSSIAN : Confidence Level range is (0,1)",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:24,Usability,SIMPL,SIMPLE,24,"// 1-5 TEST PLC CONFINT SIMPLE GAUSSIAN : Confidence Level range is (0,1)",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:34,Testability,TEST,TEST,34,"// boundary case CL -> 0; // 6-10 TEST PLC CONFINT SIMPLE POISSON : Observed value range is [0,1000]",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:51,Usability,SIMPL,SIMPLE,51,"// boundary case CL -> 0; // 6-10 TEST PLC CONFINT SIMPLE POISSON : Observed value range is [0,1000]",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:36,Testability,TEST,TEST,36,"// boundary Poisson value; // 11-13 TEST PLC CONFINT PRODUCT POISSON : Observed value range is [0,30] for x=s+b and [0,80] for y=2*s*1.2^beta",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:6,Testability,TEST,TEST,6,"// 14 TEST PLC HYPOTEST ON/OFF MODEL",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:9,Testability,TEST,TEST,9,"// 15-18 TEST BC CONFINT CENTRAL SIMPLE POISSON : Observed value range is [0,100]",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:33,Usability,SIMPL,SIMPLE,33,"// 15-18 TEST BC CONFINT CENTRAL SIMPLE POISSON : Observed value range is [0,100]",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:6,Testability,TEST,TEST,6,"// 19 TEST BC CONFINT SHORTEST SIMPLE POISSON",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:31,Usability,SIMPL,SIMPLE,31,"// 19 TEST BC CONFINT SHORTEST SIMPLE POISSON",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:9,Testability,TEST,TEST,9,"// 20-22 TEST BC CONFINT CENTRAL PRODUCT POISSON : Observed value range is [0,30] for x=s+b and [0,80] for; // y=2*s*1.2^beta",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:9,Testability,TEST,TEST,9,"// 23-25 TEST MCMCC CONFINT PRODUCT POISSON : Observed value range is [0,30] for x=s+b and [0,80] for y=2*s*1.2^beta",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:6,Testability,TEST,TEST,6,"// 26 TEST ZBI SIGNIFICANCE",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:9,Testability,TEST,TEST,9,"// 27-31 TEST PLC VS AC SIGNIFICANCE : Observed value range is [0,300] for on source and [0,1100] for off-source; tau; // has the range [0.1,5.0]",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:9,Testability,TEST,TEST,9,"// 32-36 TEST HTC SIGNIFICANCE",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:9,Testability,TEST,TEST,9,"// 37-43 TEST HTI PRODUCT POISSON : Observed value range is [0,30] for x=s+b and [0,80] for y=2*s*1.2^beta",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:9,Testability,TEST,TEST,9,"// 44-48 TEST HTI S+B+E POISSON : Observed value range is [0,50] for x = e*s+b",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:3,Testability,test,testList,3,"// testList.push_back(new TestHypoTestInverter2(fref, writeRef, verbose, kFrequentist, kSimpleLR, 10));; // testList.push_back(new TestHypoTestInverter2(fref, writeRef, verbose, kFrequentist, kSimpleLR, 20));",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:108,Testability,test,testList,108,"// testList.push_back(new TestHypoTestInverter2(fref, writeRef, verbose, kFrequentist, kSimpleLR, 10));; // testList.push_back(new TestHypoTestInverter2(fref, writeRef, verbose, kFrequentist, kSimpleLR, 20));",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:28,Testability,test,tests,28,"// do not count the skipped tests",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:50,Performance,Perform,Perform,50,"R""(usage: stressRooStats [ options ]. -b <mode> : Perform every fit in the tests with the EvalBackend(<mode>) command argument, where <mode> is a string; -f <file> : use given reference file instead of default (""stressRooStats_ref.root""); -w : write reference file, instead of reading file and running comparison tests; -n N : only run test with sequential number N; -a : run full suite of tests (default is basic suite); this overrides the -n single test option; -c : dump file stressRooStats_DEBUG.root to which results of both current result and reference for each failed test are written; -mc : memory check mode, no regression test are performed. Set this flag when running with valgrind; -min <name> : minimizer name (default is Minuit, not Minuit2); -vs : use vector-based storage for all datasets (default is tree-based storage); -v/-vv : set verbose mode (show result of each regression test) or very verbose mode (show all roofit output as well); -d N : set ROOT gDebug flag to N; )""",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:641,Performance,perform,performed,641,"R""(usage: stressRooStats [ options ]. -b <mode> : Perform every fit in the tests with the EvalBackend(<mode>) command argument, where <mode> is a string; -f <file> : use given reference file instead of default (""stressRooStats_ref.root""); -w : write reference file, instead of reading file and running comparison tests; -n N : only run test with sequential number N; -a : run full suite of tests (default is basic suite); this overrides the -n single test option; -c : dump file stressRooStats_DEBUG.root to which results of both current result and reference for each failed test are written; -mc : memory check mode, no regression test are performed. Set this flag when running with valgrind; -min <name> : minimizer name (default is Minuit, not Minuit2); -vs : use vector-based storage for all datasets (default is tree-based storage); -v/-vv : set verbose mode (show result of each regression test) or very verbose mode (show all roofit output as well); -d N : set ROOT gDebug flag to N; )""",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:75,Testability,test,tests,75,"R""(usage: stressRooStats [ options ]. -b <mode> : Perform every fit in the tests with the EvalBackend(<mode>) command argument, where <mode> is a string; -f <file> : use given reference file instead of default (""stressRooStats_ref.root""); -w : write reference file, instead of reading file and running comparison tests; -n N : only run test with sequential number N; -a : run full suite of tests (default is basic suite); this overrides the -n single test option; -c : dump file stressRooStats_DEBUG.root to which results of both current result and reference for each failed test are written; -mc : memory check mode, no regression test are performed. Set this flag when running with valgrind; -min <name> : minimizer name (default is Minuit, not Minuit2); -vs : use vector-based storage for all datasets (default is tree-based storage); -v/-vv : set verbose mode (show result of each regression test) or very verbose mode (show all roofit output as well); -d N : set ROOT gDebug flag to N; )""",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:313,Testability,test,tests,313,"R""(usage: stressRooStats [ options ]. -b <mode> : Perform every fit in the tests with the EvalBackend(<mode>) command argument, where <mode> is a string; -f <file> : use given reference file instead of default (""stressRooStats_ref.root""); -w : write reference file, instead of reading file and running comparison tests; -n N : only run test with sequential number N; -a : run full suite of tests (default is basic suite); this overrides the -n single test option; -c : dump file stressRooStats_DEBUG.root to which results of both current result and reference for each failed test are written; -mc : memory check mode, no regression test are performed. Set this flag when running with valgrind; -min <name> : minimizer name (default is Minuit, not Minuit2); -vs : use vector-based storage for all datasets (default is tree-based storage); -v/-vv : set verbose mode (show result of each regression test) or very verbose mode (show all roofit output as well); -d N : set ROOT gDebug flag to N; )""",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:336,Testability,test,test,336,"R""(usage: stressRooStats [ options ]. -b <mode> : Perform every fit in the tests with the EvalBackend(<mode>) command argument, where <mode> is a string; -f <file> : use given reference file instead of default (""stressRooStats_ref.root""); -w : write reference file, instead of reading file and running comparison tests; -n N : only run test with sequential number N; -a : run full suite of tests (default is basic suite); this overrides the -n single test option; -c : dump file stressRooStats_DEBUG.root to which results of both current result and reference for each failed test are written; -mc : memory check mode, no regression test are performed. Set this flag when running with valgrind; -min <name> : minimizer name (default is Minuit, not Minuit2); -vs : use vector-based storage for all datasets (default is tree-based storage); -v/-vv : set verbose mode (show result of each regression test) or very verbose mode (show all roofit output as well); -d N : set ROOT gDebug flag to N; )""",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:390,Testability,test,tests,390,"R""(usage: stressRooStats [ options ]. -b <mode> : Perform every fit in the tests with the EvalBackend(<mode>) command argument, where <mode> is a string; -f <file> : use given reference file instead of default (""stressRooStats_ref.root""); -w : write reference file, instead of reading file and running comparison tests; -n N : only run test with sequential number N; -a : run full suite of tests (default is basic suite); this overrides the -n single test option; -c : dump file stressRooStats_DEBUG.root to which results of both current result and reference for each failed test are written; -mc : memory check mode, no regression test are performed. Set this flag when running with valgrind; -min <name> : minimizer name (default is Minuit, not Minuit2); -vs : use vector-based storage for all datasets (default is tree-based storage); -v/-vv : set verbose mode (show result of each regression test) or very verbose mode (show all roofit output as well); -d N : set ROOT gDebug flag to N; )""",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:451,Testability,test,test,451,"R""(usage: stressRooStats [ options ]. -b <mode> : Perform every fit in the tests with the EvalBackend(<mode>) command argument, where <mode> is a string; -f <file> : use given reference file instead of default (""stressRooStats_ref.root""); -w : write reference file, instead of reading file and running comparison tests; -n N : only run test with sequential number N; -a : run full suite of tests (default is basic suite); this overrides the -n single test option; -c : dump file stressRooStats_DEBUG.root to which results of both current result and reference for each failed test are written; -mc : memory check mode, no regression test are performed. Set this flag when running with valgrind; -min <name> : minimizer name (default is Minuit, not Minuit2); -vs : use vector-based storage for all datasets (default is tree-based storage); -v/-vv : set verbose mode (show result of each regression test) or very verbose mode (show all roofit output as well); -d N : set ROOT gDebug flag to N; )""",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:575,Testability,test,test,575,"R""(usage: stressRooStats [ options ]. -b <mode> : Perform every fit in the tests with the EvalBackend(<mode>) command argument, where <mode> is a string; -f <file> : use given reference file instead of default (""stressRooStats_ref.root""); -w : write reference file, instead of reading file and running comparison tests; -n N : only run test with sequential number N; -a : run full suite of tests (default is basic suite); this overrides the -n single test option; -c : dump file stressRooStats_DEBUG.root to which results of both current result and reference for each failed test are written; -mc : memory check mode, no regression test are performed. Set this flag when running with valgrind; -min <name> : minimizer name (default is Minuit, not Minuit2); -vs : use vector-based storage for all datasets (default is tree-based storage); -v/-vv : set verbose mode (show result of each regression test) or very verbose mode (show all roofit output as well); -d N : set ROOT gDebug flag to N; )""",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:632,Testability,test,test,632,"R""(usage: stressRooStats [ options ]. -b <mode> : Perform every fit in the tests with the EvalBackend(<mode>) command argument, where <mode> is a string; -f <file> : use given reference file instead of default (""stressRooStats_ref.root""); -w : write reference file, instead of reading file and running comparison tests; -n N : only run test with sequential number N; -a : run full suite of tests (default is basic suite); this overrides the -n single test option; -c : dump file stressRooStats_DEBUG.root to which results of both current result and reference for each failed test are written; -mc : memory check mode, no regression test are performed. Set this flag when running with valgrind; -min <name> : minimizer name (default is Minuit, not Minuit2); -vs : use vector-based storage for all datasets (default is tree-based storage); -v/-vv : set verbose mode (show result of each regression test) or very verbose mode (show all roofit output as well); -d N : set ROOT gDebug flag to N; )""",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:896,Testability,test,test,896,"R""(usage: stressRooStats [ options ]. -b <mode> : Perform every fit in the tests with the EvalBackend(<mode>) command argument, where <mode> is a string; -f <file> : use given reference file instead of default (""stressRooStats_ref.root""); -w : write reference file, instead of reading file and running comparison tests; -n N : only run test with sequential number N; -a : run full suite of tests (default is basic suite); this overrides the -n single test option; -c : dump file stressRooStats_DEBUG.root to which results of both current result and reference for each failed test are written; -mc : memory check mode, no regression test are performed. Set this flag when running with valgrind; -min <name> : minimizer name (default is Minuit, not Minuit2); -vs : use vector-based storage for all datasets (default is tree-based storage); -v/-vv : set verbose mode (show result of each regression test) or very verbose mode (show all roofit output as well); -d N : set ROOT gDebug flag to N; )""",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:92,Deployability,update,update,92,"// if (doWrite && refFileName.find(""http:"") == 0) {; // // Locate file name part in URL and update refFileName accordingly; // char* buf = new char[refFileName.size() + 1];; // strcpy(buf, refFileName.c_str());; // char *ptr = strrchr(buf, '/');; // if (!ptr) ptr = strrchr(buf, ':');; // refFileName = ptr + 1;; // delete[] buf;; // cout << ""stressRooStats: WARNING running in write mode, but reference file is web file, writing local file; // instead: ""; // << refFileName << endl;; // }; // set minimizer",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:45,Deployability,configurat,configuration,45,"// create combined signal + background model configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_models.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:45,Modifiability,config,configuration,45,"// create combined signal + background model configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_models.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:36,Deployability,configurat,configuration,36,"// create combined background model configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_models.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:36,Modifiability,config,configuration,36,"// create combined background model configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_models.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:36,Deployability,configurat,configuration,36,"// create signal + background model configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_models.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:36,Modifiability,config,configuration,36,"// create signal + background model configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_models.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:27,Deployability,configurat,configuration,27,"// create background model configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_models.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:27,Modifiability,config,configuration,27,"// create background model configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_models.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:36,Deployability,configurat,configuration,36,"// create signal + background model configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_models.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:36,Modifiability,config,configuration,36,"// create signal + background model configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_models.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:27,Deployability,configurat,configuration,27,"// create background model configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_models.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:27,Modifiability,config,configuration,27,"// create background model configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_models.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:16,Deployability,configurat,configuration,16,"// create model configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_models.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:16,Modifiability,config,configuration,16,"// create model configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_models.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:3,Testability,test,testStatType,3,"// testStatType = 0 Simple Likelihood Ratio (the LEP TestStat); // = 1 Ratio of Profiled Likelihood Ratios (the Tevatron TestStat); // = 2 Profile Likelihood Ratio (the LHC TestStat); // = 3 Profile Likelihood One Sided (pll = 0 if mu < mu_hat); // = 4 Profile Likelihood Signed (pll = -pll if mu < mu_hat); // = 5 Max Likelihood Estimate as test statistic; // = 6 Number of Observed Events as test statistic",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:53,Testability,Test,TestStat,53,"// testStatType = 0 Simple Likelihood Ratio (the LEP TestStat); // = 1 Ratio of Profiled Likelihood Ratios (the Tevatron TestStat); // = 2 Profile Likelihood Ratio (the LHC TestStat); // = 3 Profile Likelihood One Sided (pll = 0 if mu < mu_hat); // = 4 Profile Likelihood Signed (pll = -pll if mu < mu_hat); // = 5 Max Likelihood Estimate as test statistic; // = 6 Number of Observed Events as test statistic",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:121,Testability,Test,TestStat,121,"// testStatType = 0 Simple Likelihood Ratio (the LEP TestStat); // = 1 Ratio of Profiled Likelihood Ratios (the Tevatron TestStat); // = 2 Profile Likelihood Ratio (the LHC TestStat); // = 3 Profile Likelihood One Sided (pll = 0 if mu < mu_hat); // = 4 Profile Likelihood Signed (pll = -pll if mu < mu_hat); // = 5 Max Likelihood Estimate as test statistic; // = 6 Number of Observed Events as test statistic",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:173,Testability,Test,TestStat,173,"// testStatType = 0 Simple Likelihood Ratio (the LEP TestStat); // = 1 Ratio of Profiled Likelihood Ratios (the Tevatron TestStat); // = 2 Profile Likelihood Ratio (the LHC TestStat); // = 3 Profile Likelihood One Sided (pll = 0 if mu < mu_hat); // = 4 Profile Likelihood Signed (pll = -pll if mu < mu_hat); // = 5 Max Likelihood Estimate as test statistic; // = 6 Number of Observed Events as test statistic",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:342,Testability,test,test,342,"// testStatType = 0 Simple Likelihood Ratio (the LEP TestStat); // = 1 Ratio of Profiled Likelihood Ratios (the Tevatron TestStat); // = 2 Profile Likelihood Ratio (the LHC TestStat); // = 3 Profile Likelihood One Sided (pll = 0 if mu < mu_hat); // = 4 Profile Likelihood Signed (pll = -pll if mu < mu_hat); // = 5 Max Likelihood Estimate as test statistic; // = 6 Number of Observed Events as test statistic",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:394,Testability,test,test,394,"// testStatType = 0 Simple Likelihood Ratio (the LEP TestStat); // = 1 Ratio of Profiled Likelihood Ratios (the Tevatron TestStat); // = 2 Profile Likelihood Ratio (the LHC TestStat); // = 3 Profile Likelihood One Sided (pll = 0 if mu < mu_hat); // = 4 Profile Likelihood Signed (pll = -pll if mu < mu_hat); // = 5 Max Likelihood Estimate as test statistic; // = 6 Number of Observed Events as test statistic",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:20,Usability,Simpl,Simple,20,"// testStatType = 0 Simple Likelihood Ratio (the LEP TestStat); // = 1 Ratio of Profiled Likelihood Ratios (the Tevatron TestStat); // = 2 Profile Likelihood Ratio (the LHC TestStat); // = 3 Profile Likelihood One Sided (pll = 0 if mu < mu_hat); // = 4 Profile Likelihood Signed (pll = -pll if mu < mu_hat); // = 5 Max Likelihood Estimate as test statistic; // = 6 Number of Observed Events as test statistic",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:57,Usability,Simpl,Simple,57,"// static const char * const kETestStatTypeString[] = { ""Simple Likelihood Ratio"", ""Ratio Of Profiled Likelihoods"",; // ""Profile Likelihood Ratio"", ""Profile Likelihood One-Sided"", ""Profile Likelihood One-Sided Discovery"",; // ""Profile Likelihood Signed"", ""Max Likelihood Estimate"", ""Number Of Observed Events"" };",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:299,Testability,TEST,TESTS,299,"//_____________________________________________________________________________; ///////////////////////////////////////////////////////////////////////////////; ///////////////////////////////////////////////////////////////////////////////; //; // PART ONE:; // PROFILE LIKELIHOOD CALCULATOR UNIT TESTS; //; ///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR - LIKELIHOOD INTERVAL - GAUSSIAN DISTRIBUTION; //; // Test the likelihood interval computed by the profile likelihood calculator; // on a Gaussian distribution. Reference interval limits are computed via; // analytic methods: solve equation 2*(ln(LL(xMax))-ln(LL(x)) = q, where q =; // normal_quantile_c(testSize/2, 1). In the case of a Gaussian distribution, the; // interval limits are equal to: mean +- normal_quantile_c(testSize/2, sigma/sqrt(N)).; //; // ModelConfig (implicit) :; // Observable -> x; // Parameter of Interest -> mean; // Nuisance parameter (Constant !) -> sigma; //; // Input Parameters:; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 03/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:482,Testability,Test,Test,482,"//_____________________________________________________________________________; ///////////////////////////////////////////////////////////////////////////////; ///////////////////////////////////////////////////////////////////////////////; //; // PART ONE:; // PROFILE LIKELIHOOD CALCULATOR UNIT TESTS; //; ///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR - LIKELIHOOD INTERVAL - GAUSSIAN DISTRIBUTION; //; // Test the likelihood interval computed by the profile likelihood calculator; // on a Gaussian distribution. Reference interval limits are computed via; // analytic methods: solve equation 2*(ln(LL(xMax))-ln(LL(x)) = q, where q =; // normal_quantile_c(testSize/2, 1). In the case of a Gaussian distribution, the; // interval limits are equal to: mean +- normal_quantile_c(testSize/2, sigma/sqrt(N)).; //; // ModelConfig (implicit) :; // Observable -> x; // Parameter of Interest -> mean; // Nuisance parameter (Constant !) -> sigma; //; // Input Parameters:; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 03/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:732,Testability,test,testSize,732,"//_____________________________________________________________________________; ///////////////////////////////////////////////////////////////////////////////; ///////////////////////////////////////////////////////////////////////////////; //; // PART ONE:; // PROFILE LIKELIHOOD CALCULATOR UNIT TESTS; //; ///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR - LIKELIHOOD INTERVAL - GAUSSIAN DISTRIBUTION; //; // Test the likelihood interval computed by the profile likelihood calculator; // on a Gaussian distribution. Reference interval limits are computed via; // analytic methods: solve equation 2*(ln(LL(xMax))-ln(LL(x)) = q, where q =; // normal_quantile_c(testSize/2, 1). In the case of a Gaussian distribution, the; // interval limits are equal to: mean +- normal_quantile_c(testSize/2, sigma/sqrt(N)).; //; // ModelConfig (implicit) :; // Observable -> x; // Parameter of Interest -> mean; // Nuisance parameter (Constant !) -> sigma; //; // Input Parameters:; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 03/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:852,Testability,test,testSize,852,"//_____________________________________________________________________________; ///////////////////////////////////////////////////////////////////////////////; ///////////////////////////////////////////////////////////////////////////////; //; // PART ONE:; // PROFILE LIKELIHOOD CALCULATOR UNIT TESTS; //; ///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR - LIKELIHOOD INTERVAL - GAUSSIAN DISTRIBUTION; //; // Test the likelihood interval computed by the profile likelihood calculator; // on a Gaussian distribution. Reference interval limits are computed via; // analytic methods: solve equation 2*(ln(LL(xMax))-ln(LL(x)) = q, where q =; // normal_quantile_c(testSize/2, 1). In the case of a Gaussian distribution, the; // interval limits are equal to: mean +- normal_quantile_c(testSize/2, sigma/sqrt(N)).; //; // ModelConfig (implicit) :; // Observable -> x; // Parameter of Interest -> mean; // Nuisance parameter (Constant !) -> sigma; //; // Input Parameters:; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 03/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:49,Testability,test,test,49,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:118,Testability,test,test,118,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:171,Testability,Test,Test,171,"///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR - LIKELIHOOD INTERVAL - POISSON DISTRIBUTION; //; // Test the 68% likelihood interval computed by the profile likelihood calculator; // on a Poisson distribution, from only one observed value. Reference values are; // computed via analytic methods: solve equation 2*[ln(LL(xMax)) - ln(LL(x))] = 1.; //; // ModelConfig (implicit) :; // Observable -> x; // Parameter of Interest -> mean; //; // Input Parameters:; // obsValue -> observed value in experiment; //; // 03/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:49,Testability,test,test,49,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:118,Testability,test,test,118,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:38,Testability,log,log,38,"// Special case fObsValue = 0 because log(0) not computable, the limit of n * log(n), n->0 must be taken",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:78,Testability,log,log,78,"// Special case fObsValue = 0 because log(0) not computable, the limit of n * log(n), n->0 must be taken",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:172,Testability,Test,Test,172,"///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR - LIKELIHOOD INTERVAL - POISSON PRODUCT MODEL; //; // Test the 68% likelihood interval computed by the ProfileLikelihoodCalculator; // on a complex model. Reference values and test values are both computed with; // the ProfileLikelihoodCalculator. As such, this test can only confirm if the; // ProfileLikelihoodCalculator has the same behaviour across different computer; // platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:294,Testability,test,test,294,"///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR - LIKELIHOOD INTERVAL - POISSON PRODUCT MODEL; //; // Test the 68% likelihood interval computed by the ProfileLikelihoodCalculator; // on a complex model. Reference values and test values are both computed with; // the ProfileLikelihoodCalculator. As such, this test can only confirm if the; // ProfileLikelihoodCalculator has the same behaviour across different computer; // platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:380,Testability,test,test,380,"///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR - LIKELIHOOD INTERVAL - POISSON PRODUCT MODEL; //; // Test the 68% likelihood interval computed by the ProfileLikelihoodCalculator; // on a complex model. Reference values and test values are both computed with; // the ProfileLikelihoodCalculator. As such, this test can only confirm if the; // ProfileLikelihoodCalculator has the same behaviour across different computer; // platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:49,Testability,test,test,49,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:118,Testability,test,test,118,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:159,Performance,Perform,Perform,159,"///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR HYPOTHESIS TEST - ON / OFF MODEL; //; // Perform a hypothesis test using the ProfileLikelihoodCalculator on the; // on/off model. Reference values and test values are both computed with the; // ProfileLikelihoodCalculator. As such, this test can only confirm if the; // ProfileLikelihoodCalculator has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; //; // For a detailed description of the on/off model, see the paper: ""Evaluation; // of three methods for calculating statistical significance when incorporating; // a systematic uncertainty into a test of the background-only hypothesis for; // a Poisson process"" by Robert D. Cousins, James T. Linnemann, Jordan Tucker; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:129,Testability,TEST,TEST,129,"///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR HYPOTHESIS TEST - ON / OFF MODEL; //; // Perform a hypothesis test using the ProfileLikelihoodCalculator on the; // on/off model. Reference values and test values are both computed with the; // ProfileLikelihoodCalculator. As such, this test can only confirm if the; // ProfileLikelihoodCalculator has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; //; // For a detailed description of the on/off model, see the paper: ""Evaluation; // of three methods for calculating statistical significance when incorporating; // a systematic uncertainty into a test of the background-only hypothesis for; // a Poisson process"" by Robert D. Cousins, James T. Linnemann, Jordan Tucker; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:180,Testability,test,test,180,"///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR HYPOTHESIS TEST - ON / OFF MODEL; //; // Perform a hypothesis test using the ProfileLikelihoodCalculator on the; // on/off model. Reference values and test values are both computed with the; // ProfileLikelihoodCalculator. As such, this test can only confirm if the; // ProfileLikelihoodCalculator has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; //; // For a detailed description of the on/off model, see the paper: ""Evaluation; // of three methods for calculating statistical significance when incorporating; // a systematic uncertainty into a test of the background-only hypothesis for; // a Poisson process"" by Robert D. Cousins, James T. Linnemann, Jordan Tucker; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:269,Testability,test,test,269,"///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR HYPOTHESIS TEST - ON / OFF MODEL; //; // Perform a hypothesis test using the ProfileLikelihoodCalculator on the; // on/off model. Reference values and test values are both computed with the; // ProfileLikelihoodCalculator. As such, this test can only confirm if the; // ProfileLikelihoodCalculator has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; //; // For a detailed description of the on/off model, see the paper: ""Evaluation; // of three methods for calculating statistical significance when incorporating; // a systematic uncertainty into a test of the background-only hypothesis for; // a Poisson process"" by Robert D. Cousins, James T. Linnemann, Jordan Tucker; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:355,Testability,test,test,355,"///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR HYPOTHESIS TEST - ON / OFF MODEL; //; // Perform a hypothesis test using the ProfileLikelihoodCalculator on the; // on/off model. Reference values and test values are both computed with the; // ProfileLikelihoodCalculator. As such, this test can only confirm if the; // ProfileLikelihoodCalculator has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; //; // For a detailed description of the on/off model, see the paper: ""Evaluation; // of three methods for calculating statistical significance when incorporating; // a systematic uncertainty into a test of the background-only hypothesis for; // a Poisson process"" by Robert D. Cousins, James T. Linnemann, Jordan Tucker; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:798,Testability,test,test,798,"///////////////////////////////////////////////////////////////////////////////; //; // PROFILE LIKELIHOOD CALCULATOR HYPOTHESIS TEST - ON / OFF MODEL; //; // Perform a hypothesis test using the ProfileLikelihoodCalculator on the; // on/off model. Reference values and test values are both computed with the; // ProfileLikelihoodCalculator. As such, this test can only confirm if the; // ProfileLikelihoodCalculator has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; //; // For a detailed description of the on/off model, see the paper: ""Evaluation; // of three methods for calculating statistical significance when incorporating; // a systematic uncertainty into a test of the background-only hypothesis for; // a Poisson process"" by Robert D. Cousins, James T. Linnemann, Jordan Tucker; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:23,Availability,toler,tolerance,23,"// Override test value tolerance; // A larger tolerance is needed since the values in the Cousins paper are given with 1e-2 precision",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:46,Availability,toler,tolerance,46,"// Override test value tolerance; // A larger tolerance is needed since the values in the Cousins paper are given with 1e-2 precision",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:12,Testability,test,test,12,"// Override test value tolerance; // A larger tolerance is needed since the values in the Cousins paper are given with 1e-2 precision",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:7,Testability,test,testing,7,"// For testing purposes, we consider four special cases for which the values are known from; // the Cousins et al. paper mentioned above. The inputs for each of these cases are (using; // the notations from the paper): n_on, n_off and Z_PL. We provide a certain fixed input set; // for each case.",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:560,Testabilityest the Bayesian central interval computed by the BayesianCalculator on a; // Poisson distribution, using different priors. The parameter of interest is; // the mean of the Poisson distribution, and there are no nuisance parameters.; // The priors used are:; // 1. constant / uniform; // 2. inverse of the mean; // 3. square root of the inverse of the mean; // 4. gamma distribution; // The posterior distribution is easily obtained analytically for these cases.; // Therefore, the reference interval limits will be computed analytically.; //; // ModelConfig (implicit) :; // Observable -> x; // Parameter of Interest -> mean; //; // Input Parameters:; // obsValue -> observed value in experiment; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:708,Testability,Test,Testest the Bayesian central interval computed by the BayesianCalculator on a; // Poisson distribution, using different priors. The parameter of interest is; // the mean of the Poisson distribution, and there are no nuisance parameters.; // The priors used are:; // 1. constant / uniform; // 2. inverse of the mean; // 3. square root of the inverse of the mean; // 4. gamma distribution; // The posterior distribution is easily obtained analytically for these cases.; // Therefore, the reference interval limits will be computed analytically.; //; // ModelConfig (implicit) :; // Observable -> x; // Parameter of Interest -> mean; //; // Input Parameters:; // obsValue -> observed value in experiment; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:687,Usabilityest the Bayesian central interval computed by the BayesianCalculator on a; // Poisson distribution, using different priors. The parameter of interest is; // the mean of the Poisson distribution, and there are no nuisance parameters.; // The priors used are:; // 1. constant / uniform; // 2. inverse of the mean; // 3. square root of the inverse of the mean; // 4. gamma distribution; // The posterior distribution is easily obtained analytically for these cases.; // Therefore, the reference interval limits will be computed analytically.; //; // ModelConfig (implicit) :; // Observable -> x; // Parameter of Interest -> mean; //; // Input Parameters:; // obsValue -> observed value in experiment; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:49,Testability,test,test,49,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:118,Testability,test,test,118,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:86,Modifiability,variab,variables,86,"// tested to be sufficient for the scan of the Bayesian posterior; // names of tested variables must be the same in write / comparison modes",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:3,Testability,test,tested,3,"// tested to be sufficient for the scan of the Bayesian posterior; // names of tested variables must be the same in write / comparison modes",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:79,Testability,test,tested,79,"// tested to be sufficient for the scan of the Bayesian posterior; // names of tested variables must be the same in write / comparison modes",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:3,Deployability,integrat,integrate,3,"// integrate to 16%",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:3,Integrability,integrat,integrate,3,"// integrate to 16%",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:3,Deployability,integrat,integrate,3,"// integrate to 84%",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:3,Integrability,integrat,integrate,3,"// integrate to 84%",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:146,Testability,Test,Test,146,"///////////////////////////////////////////////////////////////////////////////; //; // BAYESIAN SHORTEST INTERVAL - SIMPLE POISSON MODEL; //; // Test the Bayesian shortest interval computed by the BayesianCalculator on a; // Poisson distribution, using different priors. The parameter of interest is; // the mean of the Poisson distribution, and there are no nuisance parameters.; // The priors used are:; // 1. constant / uniform; // 2. inverse of the mean; // The reference interval limits are taken from the paper: ""Why isn't every; // physicist a Bayesian?"" by Robert D. Cousins.; //; // ModelConfig (implicit) :; // Observable -> x; // Parameter of Interest -> mean; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:117,Usability,SIMPL,SIMPLE,117,"///////////////////////////////////////////////////////////////////////////////; //; // BAYESIAN SHORTEST INTERVAL - SIMPLE POISSON MODEL; //; // Test the Bayesian shortest interval computed by the BayesianCalculator on a; // Poisson distribution, using different priors. The parameter of interest is; // the mean of the Poisson distribution, and there are no nuisance parameters.; // The priors used are:; // 1. constant / uniform; // 2. inverse of the mean; // The reference interval limits are taken from the paper: ""Why isn't every; // physicist a Bayesian?"" by Robert D. Cousins.; //; // ModelConfig (implicit) :; // Observable -> x; // Parameter of Interest -> mean; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:148,Availability,toler,tolerance,148,"// the references values in the paper have a precision of only two decimal points; // in such a situation, it is natural that we increase the value tolerance",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:50,Modifiability,variab,variables,50,"// sufficient number of scans; // names of tested variables must be the same in write / comparison modes",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:43,Testability,test,tested,43,"// sufficient number of scans; // names of tested variables must be the same in write / comparison modes",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:146,Testability,Test,Test,146,"///////////////////////////////////////////////////////////////////////////////; //; // BAYESIAN CENTRAL INTERVAL - POISSON PRODUCT MODEL; //; // Test the validity of the central interval computed by the BayesianCalculator; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the BayesianCalculator. As such, this test can only; // confirm if the BayesianCalculator has the same behaviour across different; // computing platforms or RooStats revisions. A uniform prior PDF is used for the; // parameter of interest (""sig"").; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:289,Testability,test,test,289,"///////////////////////////////////////////////////////////////////////////////; //; // BAYESIAN CENTRAL INTERVAL - POISSON PRODUCT MODEL; //; // Test the validity of the central interval computed by the BayesianCalculator; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the BayesianCalculator. As such, this test can only; // confirm if the BayesianCalculator has the same behaviour across different; // computing platforms or RooStats revisions. A uniform prior PDF is used for the; // parameter of interest (""sig"").; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:366,Testability,test,test,366,"///////////////////////////////////////////////////////////////////////////////; //; // BAYESIAN CENTRAL INTERVAL - POISSON PRODUCT MODEL; //; // Test the validity of the central interval computed by the BayesianCalculator; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the BayesianCalculator. As such, this test can only; // confirm if the BayesianCalculator has the same behaviour across different; // computing platforms or RooStats revisions. A uniform prior PDF is used for the; // parameter of interest (""sig"").; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:49,Testability,test,test,49,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:118,Testability,test,test,118,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:578,Testability,TEST,TESTS,578,"//; // END OF PART TWO; //; ///////////////////////////////////////////////////////////////////////////////; ///////////////////////////////////////////////////////////////////////////////; //_____________________________________________________________________________; //_____________________________________________________________________________; ///////////////////////////////////////////////////////////////////////////////; ///////////////////////////////////////////////////////////////////////////////; //; // PART THREE:; // MARKOV CHAIN MONTE CARLO CALCULATOR UNIT TESTS; //; ///////////////////////////////////////////////////////////////////////////////; //; // MCMC INTERVAL CALCULATOR - POISSON PRODUCT MODEL; //; // Test the validity of the confidence interval computed by the MCMCCalculator; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the MCMCCalculator. As such, this test can only; // confirm if the MCMCCalculator has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:734,Testability,Test,Testest the validity of the confidence interval computed by the MCMCCalculator; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the MCMCCalculator. As such, this test can only; // confirm if the MCMCCalculator has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:876,Testability,test,test,876,"//; // END OF PART TWO; //; ///////////////////////////////////////////////////////////////////////////////; ///////////////////////////////////////////////////////////////////////////////; //_____________________________________________________________________________; //_____________________________________________________________________________; ///////////////////////////////////////////////////////////////////////////////; ///////////////////////////////////////////////////////////////////////////////; //; // PART THREE:; // MARKOV CHAIN MONTE CARLO CALCULATOR UNIT TESTS; //; ///////////////////////////////////////////////////////////////////////////////; //; // MCMC INTERVAL CALCULATOR - POISSON PRODUCT MODEL; //; // Test the validity of the confidence interval computed by the MCMCCalculator; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the MCMCCalculator. As such, this test can only; // confirm if the MCMCCalculator has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:949,Testability,test,testest the validity of the confidence interval computed by the MCMCCalculator; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the MCMCCalculator. As such, this test can only; // confirm if the MCMCCalculator has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:49,Testability,test,test,49,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:118,Testability,test,test,118,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:14,Modifiability,config,configure,14,"// create and configure MCMC calculator",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:549,Testability,TEST,TEST,549,"//; // END OF PART THREE; //; ///////////////////////////////////////////////////////////////////////////////; ///////////////////////////////////////////////////////////////////////////////; //_____________________________________________________________________________; //_____________________________________________________________________________; ///////////////////////////////////////////////////////////////////////////////; ///////////////////////////////////////////////////////////////////////////////; //; // PART FOUR:; // HYPOTHESIS TEST CALCULATOR UNIT TESTS; //; /////////////////////////////////////////////////////////////////////////; //; // ZBI - ON / OFF MODEL; //; // Evaluate the functionality of the top level functions in RooStats; // called NumberCountingUtils::BinomialWithTauObsZ. This function; // computes the significance of a hypothesis test via a frequentist; // solution. This significance, called ZBi, is detailed in the article; // ""Evaluation of three methods for calculating statistical significance; // when incorporating a systematic uncertainty into a test of the; // background-only hypothesis for a Poisson process"" by Robert D. Cousins,; // James T. Linnemann, Jordan Tucker. The reference values are taken; // from the paper, as well as the On / Off model on which the test is; // evaluated.; //; // ModelConfig (implicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; // implicit in NumberCountingUtils::BinomialWithTauObsZ; //; // 05/2012 - Wouter Verkerke, Lorenzo Moneta, Ioan Gabriel Bucur; //; /////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:570,Testabilityvaluate the functionality of the top level functions in RooStats; // called NumberCountingUtils::BinomialWithTauObsZ. This function; // computes the significance of a hypothesis test via a frequentist; // solution. This significance, called ZBi, is detailed in the article; // ""Evaluation of three methods for calculating statistical significance; // when incorporating a systematic uncertainty into a test of the; // background-only hypothesis for a Poisson process"" by Robert D. Cousins,; // James T. Linnemann, Jordan Tucker. The reference values are taken; // from the paper, as well as the On / Off model on which the test is; // evaluated.; //; // ModelConfig (implicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; // implicit in NumberCountingUtils::BinomialWithTauObsZ; //; // 05/2012 - Wouter Verkerke, Lorenzo Moneta, Ioan Gabriel Bucur; //; /////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:871,Testability,test,testvaluate the functionality of the top level functions in RooStats; // called NumberCountingUtils::BinomialWithTauObsZ. This function; // computes the significance of a hypothesis test via a frequentist; // solution. This significance, called ZBi, is detailed in the article; // ""Evaluation of three methods for calculating statistical significance; // when incorporating a systematic uncertainty into a test of the; // background-only hypothesis for a Poisson process"" by Robert D. Cousins,; // James T. Linnemann, Jordan Tucker. The reference values are taken; // from the paper, as well as the On / Off model on which the test is; // evaluated.; //; // ModelConfig (implicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; // implicit in NumberCountingUtils::BinomialWithTauObsZ; //; // 05/2012 - Wouter Verkerke, Lorenzo Moneta, Ioan Gabriel Bucur; //; /////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:1095,Testability,test,testvaluate the functionality of the top level functions in RooStats; // called NumberCountingUtils::BinomialWithTauObsZ. This function; // computes the significance of a hypothesis test via a frequentist; // solution. This significance, called ZBi, is detailed in the article; // ""Evaluation of three methods for calculating statistical significance; // when incorporating a systematic uncertainty into a test of the; // background-only hypothesis for a Poisson process"" by Robert D. Cousins,; // James T. Linnemann, Jordan Tucker. The reference values are taken; // from the paper, as well as the On / Off model on which the test is; // evaluated.; //; // ModelConfig (implicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; // implicit in NumberCountingUtils::BinomialWithTauObsZ; //; // 05/2012 - Wouter Verkerke, Lorenzo Moneta, Ioan Gabriel Bucur; //; /////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:1316,Testability,test,testvaluate the functionality of the top level functions in RooStats; // called NumberCountingUtils::BinomialWithTauObsZ. This function; // computes the significance of a hypothesis test via a frequentist; // solution. This significance, called ZBi, is detailed in the article; // ""Evaluation of three methods for calculating statistical significance; // when incorporating a systematic uncertainty into a test of the; // background-only hypothesis for a Poisson process"" by Robert D. Cousins,; // James T. Linnemann, Jordan Tucker. The reference values are taken; // from the paper, as well as the On / Off model on which the test is; // evaluated.; //; // ModelConfig (implicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; // implicit in NumberCountingUtils::BinomialWithTauObsZ; //; // 05/2012 - Wouter Verkerke, Lorenzo Moneta, Ioan Gabriel Bucur; //; /////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:23,Availability,toler,tolerance,23,"// Override test value tolerance; // A larger tolerance is needed since the values in the Cousins paper are given with 1e-2 precision",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:46,Availability,toler,tolerance,46,"// Override test value tolerance; // A larger tolerance is needed since the values in the Cousins paper are given with 1e-2 precision",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:12,Testability,test,test,12,"// Override test value tolerance; // A larger tolerance is needed since the values in the Cousins paper are given with 1e-2 precision",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:7,Testability,test,testing,7,"// For testing purposes, we consider four special cases for which the values are known from; // the Cousins et al. paper mentioned above. The inputs for each of these cases are (using; // the notations from the paper): n_on, n_off and Z_PL. We provide a certain fixed input set; // for each case.",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:839,Deployability,integrat,integration,839,"///////////////////////////////////////////////////////////////////////////////; //; // ASYMPTOTIC CALCULATOR VS PROFILE LIKELIHOOD CALCULATOR HYPOTHESIS TEST; //; // This test evaluates the functionality of the AsymptoticCalculator by; // comparing the significance given from a hypothesis test on the on/off model; // with the significance given by the ProfileLikelihoodCalculator. The validity; // of the PLC hypothesis test is evaluated in TestProfileLikelihoodCalculator4.; // If working properly, the two methods should yield identical results.; //; // ModelConfig (explicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueOn -> observed value ""n_on"" of sig + bkg; // obsValueOff -> observed value ""n_off"" of tau * bkg; // tau -> parameter of the model (constant with regard to integration); //; // 05/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:839,Integrability,integrat,integration,839,"///////////////////////////////////////////////////////////////////////////////; //; // ASYMPTOTIC CALCULATOR VS PROFILE LIKELIHOOD CALCULATOR HYPOTHESIS TEST; //; // This test evaluates the functionality of the AsymptoticCalculator by; // comparing the significance given from a hypothesis test on the on/off model; // with the significance given by the ProfileLikelihoodCalculator. The validity; // of the PLC hypothesis test is evaluated in TestProfileLikelihoodCalculator4.; // If working properly, the two methods should yield identical results.; //; // ModelConfig (explicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueOn -> observed value ""n_on"" of sig + bkg; // obsValueOff -> observed value ""n_off"" of tau * bkg; // tau -> parameter of the model (constant with regard to integration); //; // 05/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:154,Testability,TEST,TEST,154,"///////////////////////////////////////////////////////////////////////////////; //; // ASYMPTOTIC CALCULATOR VS PROFILE LIKELIHOOD CALCULATOR HYPOTHESIS TEST; //; // This test evaluates the functionality of the AsymptoticCalculator by; // comparing the significance given from a hypothesis test on the on/off model; // with the significance given by the ProfileLikelihoodCalculator. The validity; // of the PLC hypothesis test is evaluated in TestProfileLikelihoodCalculator4.; // If working properly, the two methods should yield identical results.; //; // ModelConfig (explicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueOn -> observed value ""n_on"" of sig + bkg; // obsValueOff -> observed value ""n_off"" of tau * bkg; // tau -> parameter of the model (constant with regard to integration); //; // 05/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:172,Testability,test,test,172,"///////////////////////////////////////////////////////////////////////////////; //; // ASYMPTOTIC CALCULATOR VS PROFILE LIKELIHOOD CALCULATOR HYPOTHESIS TEST; //; // This test evaluates the functionality of the AsymptoticCalculator by; // comparing the significance given from a hypothesis test on the on/off model; // with the significance given by the ProfileLikelihoodCalculator. The validity; // of the PLC hypothesis test is evaluated in TestProfileLikelihoodCalculator4.; // If working properly, the two methods should yield identical results.; //; // ModelConfig (explicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueOn -> observed value ""n_on"" of sig + bkg; // obsValueOff -> observed value ""n_off"" of tau * bkg; // tau -> parameter of the model (constant with regard to integration); //; // 05/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:291,Testability,test,test,291,"///////////////////////////////////////////////////////////////////////////////; //; // ASYMPTOTIC CALCULATOR VS PROFILE LIKELIHOOD CALCULATOR HYPOTHESIS TEST; //; // This test evaluates the functionality of the AsymptoticCalculator by; // comparing the significance given from a hypothesis test on the on/off model; // with the significance given by the ProfileLikelihoodCalculator. The validity; // of the PLC hypothesis test is evaluated in TestProfileLikelihoodCalculator4.; // If working properly, the two methods should yield identical results.; //; // ModelConfig (explicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueOn -> observed value ""n_on"" of sig + bkg; // obsValueOff -> observed value ""n_off"" of tau * bkg; // tau -> parameter of the model (constant with regard to integration); //; // 05/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:423,Testability,test,test,423,"///////////////////////////////////////////////////////////////////////////////; //; // ASYMPTOTIC CALCULATOR VS PROFILE LIKELIHOOD CALCULATOR HYPOTHESIS TEST; //; // This test evaluates the functionality of the AsymptoticCalculator by; // comparing the significance given from a hypothesis test on the on/off model; // with the significance given by the ProfileLikelihoodCalculator. The validity; // of the PLC hypothesis test is evaluated in TestProfileLikelihoodCalculator4.; // If working properly, the two methods should yield identical results.; //; // ModelConfig (explicit) : Poisson On / Off Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // obsValueOn -> observed value ""n_on"" of sig + bkg; // obsValueOff -> observed value ""n_off"" of tau * bkg; // tau -> parameter of the model (constant with regard to integration); //; // 05/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:49,Testability,test,test,49,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:118,Testability,test,test,118,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:19,Modifiability,variab,variables,19,"// names of tested variables must be the same in write / comparison modes",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:12,Testability,test,tested,12,"// names of tested variables must be the same in write / comparison modes",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:17,Testability,test,test,17,"// Do hypothesis test with ProfileLikelihoodCalculator",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:17,Testability,test,test,17,"// Do hypothesis test with AsymptoticCalculator",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:99,Testability,TEST,TEST,99,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTHESIS TEST CALCULATOR TEST - SIMULTANEOUS PDF MODEL; //; // This test evaluates the functionality of the HypoTestCalculator by; // calculating the significance of the signal on a simple Simultaneous Pdf; // model with two channels. Reference values and test values are both computed; // with the HypoTestCalculator. As such, this test can only confirm if the; // HypoTestCalculator has the same behaviour across different computing; // platforms or RooStats revisions.; //; // ModelConfig (explicit) : Simultaneous Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; //; // 06/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:115,Testability,TEST,TEST,115,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTHESIS TEST CALCULATOR TEST - SIMULTANEOUS PDF MODEL; //; // This test evaluates the functionality of the HypoTestCalculator by; // calculating the significance of the signal on a simple Simultaneous Pdf; // model with two channels. Reference values and test values are both computed; // with the HypoTestCalculator. As such, this test can only confirm if the; // HypoTestCalculator has the same behaviour across different computing; // platforms or RooStats revisions.; //; // ModelConfig (explicit) : Simultaneous Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; //; // 06/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:158,Testability,test,test,158,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTHESIS TEST CALCULATOR TEST - SIMULTANEOUS PDF MODEL; //; // This test evaluates the functionality of the HypoTestCalculator by; // calculating the significance of the signal on a simple Simultaneous Pdf; // model with two channels. Reference values and test values are both computed; // with the HypoTestCalculator. As such, this test can only confirm if the; // HypoTestCalculator has the same behaviour across different computing; // platforms or RooStats revisions.; //; // ModelConfig (explicit) : Simultaneous Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; //; // 06/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:346,Testability,test,test,346,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTHESIS TEST CALCULATOR TEST - SIMULTANEOUS PDF MODEL; //; // This test evaluates the functionality of the HypoTestCalculator by; // calculating the significance of the signal on a simple Simultaneous Pdf; // model with two channels. Reference values and test values are both computed; // with the HypoTestCalculator. As such, this test can only confirm if the; // HypoTestCalculator has the same behaviour across different computing; // platforms or RooStats revisions.; //; // ModelConfig (explicit) : Simultaneous Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; //; // 06/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:423,Testability,test,test,423,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTHESIS TEST CALCULATOR TEST - SIMULTANEOUS PDF MODEL; //; // This test evaluates the functionality of the HypoTestCalculator by; // calculating the significance of the signal on a simple Simultaneous Pdf; // model with two channels. Reference values and test values are both computed; // with the HypoTestCalculator. As such, this test can only confirm if the; // HypoTestCalculator has the same behaviour across different computing; // platforms or RooStats revisions.; //; // ModelConfig (explicit) : Simultaneous Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; //; // 06/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:739,Testability,test,testStatType,739,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTHESIS TEST CALCULATOR TEST - SIMULTANEOUS PDF MODEL; //; // This test evaluates the functionality of the HypoTestCalculator by; // calculating the significance of the signal on a simple Simultaneous Pdf; // model with two channels. Reference values and test values are both computed; // with the HypoTestCalculator. As such, this test can only confirm if the; // HypoTestCalculator has the same behaviour across different computing; // platforms or RooStats revisions.; //; // ModelConfig (explicit) : Simultaneous Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; //; // 06/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:272,Usability,simpl,simple,272,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTHESIS TEST CALCULATOR TEST - SIMULTANEOUS PDF MODEL; //; // This test evaluates the functionality of the HypoTestCalculator by; // calculating the significance of the signal on a simple Simultaneous Pdf; // model with two channels. Reference values and test values are both computed; // with the HypoTestCalculator. As such, this test can only confirm if the; // HypoTestCalculator has the same behaviour across different computing; // platforms or RooStats revisions.; //; // ModelConfig (explicit) : Simultaneous Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; //; // 06/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:781,Usability,Simpl,Simple,781,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTHESIS TEST CALCULATOR TEST - SIMULTANEOUS PDF MODEL; //; // This test evaluates the functionality of the HypoTestCalculator by; // calculating the significance of the signal on a simple Simultaneous Pdf; // model with two channels. Reference values and test values are both computed; // with the HypoTestCalculator. As such, this test can only confirm if the; // HypoTestCalculator has the same behaviour across different computing; // platforms or RooStats revisions.; //; // ModelConfig (explicit) : Simultaneous Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; //; // 06/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:16,Deployability,configurat,configuration,16,"// ToyMCSampler configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:16,Modifiability,config,configuration,16,"// ToyMCSampler configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:32,Testability,test,test,32,"// speedup; // Register result (test significance)",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:548,Testabilityest the validity of the confidence interval computed by the HypoTestInverter; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the HypoTestInverter. As such, this test can only; // confirm if the HypoTestInverter has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:567,Testabilityest the validity of the confidence interval computed by the HypoTestInverter; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the HypoTestInverter. As such, this test can only; // confirm if the HypoTestInverter has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:724,Testability,Test,Testest the validity of the confidence interval computed by the HypoTestInverter; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the HypoTestInverter. As such, this test can only; // confirm if the HypoTestInverter has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:868,Testability,test,testest the validity of the confidence interval computed by the HypoTestInverter; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the HypoTestInverter. As such, this test can only; // confirm if the HypoTestInverter has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:943,Testability,test,testest the validity of the confidence interval computed by the HypoTestInverter; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the HypoTestInverter. As such, this test can only; // confirm if the HypoTestInverter has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:1260,Testability,test,testStatTypeest the validity of the confidence interval computed by the HypoTestInverter; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the HypoTestInverter. As such, this test can only; // confirm if the HypoTestInverter has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:1302,Usability,Simpl,Simpleest the validity of the confidence interval computed by the HypoTestInverter; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the HypoTestInverter. As such, this test can only; // confirm if the HypoTestInverter has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:49,Testability,test,test,49,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:118,Testability,test,test,118,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:21,Availability,toler,tolerance,21,"// larger value test tolerance especially when using toys (difference of <~ 0.1 observed between using Minuit or; // Minuit2); // (inherited default value is 1e-3)",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:131,Modifiability,inherit,inherited,131,"// larger value test tolerance especially when using toys (difference of <~ 0.1 observed between using Minuit or; // Minuit2); // (inherited default value is 1e-3)",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:16,Testability,test,test,16,"// larger value test tolerance especially when using toys (difference of <~ 0.1 observed between using Minuit or; // Minuit2); // (inherited default value is 1e-3)",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:13,Modifiability,config,configure,13,"// build and configure HypoTestInverter",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:40,Deployability,configurat,configuration,40,"// significant speedup; // ToyMCSampler configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:40,Modifiability,config,configuration,40,"// significant speedup; // ToyMCSampler configuration",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:35,Modifiability,extend,extended,35,"// needed because we don't have an extended pdf",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:166,Testability,Test,Test,166,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTESTINVERTER UPPER LIMIT - SIGNAL + BACKGROUND + EFFICIENCY MODEL; //; // Test the validity of the upper limit computed by the HypoTestInverter; // on a complex model distribution with signal, background and efficiency.; // Reference values and test values are both computed with the HypoTestInverter.; // As such, this test can only confirm if the HypoTestInverter has the same; // behaviour across different computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Signal + Background + Efficiency; // built in stressRooStats_models.cxx; //; /// Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig * eff + bkg; // confidenceLevel -> Confidence Level of the upper limit we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:337,Testability,test,test,337,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTESTINVERTER UPPER LIMIT - SIGNAL + BACKGROUND + EFFICIENCY MODEL; //; // Test the validity of the upper limit computed by the HypoTestInverter; // on a complex model distribution with signal, background and efficiency.; // Reference values and test values are both computed with the HypoTestInverter.; // As such, this test can only confirm if the HypoTestInverter has the same; // behaviour across different computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Signal + Background + Efficiency; // built in stressRooStats_models.cxx; //; /// Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig * eff + bkg; // confidenceLevel -> Confidence Level of the upper limit we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:412,Testability,test,test,412,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTESTINVERTER UPPER LIMIT - SIGNAL + BACKGROUND + EFFICIENCY MODEL; //; // Test the validity of the upper limit computed by the HypoTestInverter; // on a complex model distribution with signal, background and efficiency.; // Reference values and test values are both computed with the HypoTestInverter.; // As such, this test can only confirm if the HypoTestInverter has the same; // behaviour across different computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Signal + Background + Efficiency; // built in stressRooStats_models.cxx; //; /// Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig * eff + bkg; // confidenceLevel -> Confidence Level of the upper limit we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:745,Testability,test,testStatType,745,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTESTINVERTER UPPER LIMIT - SIGNAL + BACKGROUND + EFFICIENCY MODEL; //; // Test the validity of the upper limit computed by the HypoTestInverter; // on a complex model distribution with signal, background and efficiency.; // Reference values and test values are both computed with the HypoTestInverter.; // As such, this test can only confirm if the HypoTestInverter has the same; // behaviour across different computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Signal + Background + Efficiency; // built in stressRooStats_models.cxx; //; /// Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig * eff + bkg; // confidenceLevel -> Confidence Level of the upper limit we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:787,Usability,Simpl,Simple,787,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTESTINVERTER UPPER LIMIT - SIGNAL + BACKGROUND + EFFICIENCY MODEL; //; // Test the validity of the upper limit computed by the HypoTestInverter; // on a complex model distribution with signal, background and efficiency.; // Reference values and test values are both computed with the HypoTestInverter.; // As such, this test can only confirm if the HypoTestInverter has the same; // behaviour across different computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Signal + Background + Efficiency; // built in stressRooStats_models.cxx; //; /// Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig * eff + bkg; // confidenceLevel -> Confidence Level of the upper limit we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:21,Availability,toler,tolerance,21,"// larger value test tolerance especially when using toys (difference of <~ 0.1 observed between using Minuit or; // Minuit2); // (inherited default value is 1e-3)",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:131,Modifiability,inherit,inherited,131,"// larger value test tolerance especially when using toys (difference of <~ 0.1 observed between using Minuit or; // Minuit2); // (inherited default value is 1e-3)",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:16,Testability,test,test,16,"// larger value test tolerance especially when using toys (difference of <~ 0.1 observed between using Minuit or; // Minuit2); // (inherited default value is 1e-3)",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:49,Testability,test,test,49,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:118,Testability,test,test,118,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:110,Availability,error,error,110,"// significant speedup; // needed because we have no extended pdf and the ToyMC Sampler evaluation returns an error",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:53,Modifiability,extend,extended,53,"// significant speedup; // needed because we have no extended pdf and the ToyMC Sampler evaluation returns an error",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:281,Testability,test,tests,281,"//; // END OF PART FIVE; //; ///////////////////////////////////////////////////////////////////////////////; ///////////////////////////////////////////////////////////////////////////////; //_____________________________________________________________________________; // Other tests currently not included in any suite",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:18,Modifiability,variab,variables,18,"// define sets of variables obs={x} and poi={sig}; // x is the only observable in the main measurement and y is treated as a separate measurement,; // which is used to produce the prior that will be used in the calculation to randomize the nuisance parameters",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:9,Testability,test,test,9,"// build test statistic",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:3,Safety,sanity check,sanity check,3,"// sanity check - should never happen",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:3,Safety,sanity check,sanity check,3,"// sanity check - should never happen",MatchSource.CODE_COMMENT,roofit/roostats/test/stressRooStats_tests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/testHypoTestInvResult.cxx:4,Testability,Test,Test,4,"/// Test that we can correctly read a HypoTestInverterResult",MatchSource.CODE_COMMENT,roofit/roostats/test/testHypoTestInvResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/testHypoTestInvResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/testHypoTestInvResult.cxx:31,Availability,toler,tolerance,31,"// Here, we need to loosen the tolerance because the estimated error is determined on-the-fly with a fit",MatchSource.CODE_COMMENT,roofit/roostats/test/testHypoTestInvResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/testHypoTestInvResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/testHypoTestInvResult.cxx:63,Availability,error,error,63,"// Here, we need to loosen the tolerance because the estimated error is determined on-the-fly with a fit",MatchSource.CODE_COMMENT,roofit/roostats/test/testHypoTestInvResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/testHypoTestInvResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/testHypoTestInvResult.cxx:8,Security,access,accesses,8,"// This accesses the sampling distribution",MatchSource.CODE_COMMENT,roofit/roostats/test/testHypoTestInvResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/testHypoTestInvResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/testHypoTestInvResult.cxx:8,Testability,test,test,8,"// Also test that HypoTestResults are coming back correctly",MatchSource.CODE_COMMENT,roofit/roostats/test/testHypoTestInvResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/testHypoTestInvResult.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/Config.h:8,Deployability,configurat,configuration,8,"// ROOT configuration: all of xRooFit is placed into a detail namespace",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/Config.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/Config.h:8,Modifiability,config,configuration,8,"// ROOT configuration: all of xRooFit is placed into a detail namespace",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/Config.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h:91,Security,access,access,91,/**; * This is the main include for the xRooFit project.; * Including this should give you access to all xRooFit features; */,MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h:15,Testability,test,test,15,"// upper limit test statistics",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h:13,Testability,test,test,13,"// discovery test statistics",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h:234,Modifiability,parameteriz,parameterized,234,"// The incompatibility function (taking mu_hat as an input) is defined by its transitions; // it takes values of -1, 0, or 1 ... when it 0 that means mu_hat is compatible with the hypothesis; // Standard incompatibility functions are parameterized by mu; // Note: the default value is taken to be 1, so an empty vector is function=1",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h:129,Availability,error,error,129,"// converts pvalues to significances and finds where they equal the target pvalue; // return is x-axis value with potentially an error on that value if input pVals had errors; // static RooRealVar FindLimit(TGraph *pVals, double target_pVal = 0.05);",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h:168,Availability,error,errors,168,"// converts pvalues to significances and finds where they equal the target pvalue; // return is x-axis value with potentially an error on that value if input pVals had errors; // static RooRealVar FindLimit(TGraph *pVals, double target_pVal = 0.05);",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h:18,Testability,test,test,18,"// Run hypothesis test(s) on the given pdf; // Uses hypoPoint binning on model parameters to determine points to scan; // if hypoPoint binning has nBins==0 then will auto-scan (assumes CL=95%, can override with setStringAttribute); // TODO: specifying number of null and alt toys per point",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:13,Availability,error,error,13,"// calculate error on poi conditional on the given NPs being held constant at their post-fit values; // The conditional error is often presented as the difference in quadrature to the total error i.e.; // error contribution due to conditional NPs = sqrt( pow(totError,2) - pow(condError,2) )",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:120,Availability,error,error,120,"// calculate error on poi conditional on the given NPs being held constant at their post-fit values; // The conditional error is often presented as the difference in quadrature to the total error i.e.; // error contribution due to conditional NPs = sqrt( pow(totError,2) - pow(condError,2) )",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:190,Availability,error,error,190,"// calculate error on poi conditional on the given NPs being held constant at their post-fit values; // The conditional error is often presented as the difference in quadrature to the total error i.e.; // error contribution due to conditional NPs = sqrt( pow(totError,2) - pow(condError,2) )",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:205,Availability,error,error,205,"// calculate error on poi conditional on the given NPs being held constant at their post-fit values; // The conditional error is often presented as the difference in quadrature to the total error i.e.; // error contribution due to conditional NPs = sqrt( pow(totError,2) - pow(condError,2) )",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:96,Availability,avail,available,96,"// rank all the np based on impact ... will use the covariance approximation if full impact not available; // the approxThreshold sets the level below which the approximation will be returned; // e.g. set it to 0 to not do approximation",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:15,Modifiability,config,config,15,"// returns fit config, or creates a default one if not existing",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:69,Modifiability,config,config,69,"// return pointer to non-const version of the options inside the fit config",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:25,Availability,avail,available,25,"// status bitmask of the available fit results; // 0 = all ok",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:12,Testability,test,test,12,"// observed test statistic value",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:3,Testability,test,test,3,"// test statistic value",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:189,Availability,down,down,189,"// double up = (null.first + null.second == 0) ? 0 : ((alt.first-alt.second<=0) ?; // std::numeric_limits<double>::infinity() : (null.first + null.second)/(alt.first - alt.second)); double down; // = (null.first - null.second == 0) ? 0 : (null.first - null.second)/(alt.first + alt.second);; // old way ... now doing like in pCLs_asymp by calculating the two variations ... but this is pessimistic; // assumes p-values are anticorrelated!; // so reverting to old",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:62,Availability,down,down,62,"// return std::pair(nom,std::max(std::abs(up - nom), std::abs(down - nom)));",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:3,Testability,test,test,3,"// test statistic value; // Create a HypoTestResult representing the current state of this hypoPoint",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:32,Availability,avail,available,32,"// throws exception if ufit not available",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:262,Availability,avail,available,262,"// build a TGraphErrors of pValues over the existing points; // opt should include any of the following:; // cls: do pCLs, otherwise do pNull; // expX: do expected, X sigma (use +X or -X for contour, otherwise will return band unless X=0); // toys: pvalues from available toys; // readonly: don't compute anything, just return available values",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:327,Availability,avail,available,327,"// build a TGraphErrors of pValues over the existing points; // opt should include any of the following:; // cls: do pCLs, otherwise do pNull; // expX: do expected, X sigma (use +X or -X for contour, otherwise will return band unless X=0); // toys: pvalues from available toys; // readonly: don't compute anything, just return available values",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:17,Availability,avail,available,17,"// get currently available limit, with error. Use nSigma = nan for observed limit",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:39,Availability,error,error,39,"// get currently available limit, with error. Use nSigma = nan for observed limit",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:150,Availability,error,error,150,"// estimates where corresponding pValues graph becomes equal to 0.05; // linearly interpolates log(pVal) when obtaining limits.; // returns value and error",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:95,Testability,log,log,95,"// estimates where corresponding pValues graph becomes equal to 0.05; // linearly interpolates log(pVal) when obtaining limits.; // returns value and error",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:69,Modifiability,extend,extendedTerm,69,"// NLL = mainTerm + constraintTerm; // mainTerm = sum( entryVals ) + extendedTerm + simTerm [+ binnedDataTerm if activated binnedL option]; // this is what it should be, at least; // total nll should be all these values + constraint term + extended term + simTerm [+binnedDataTerm if activated; // binnedL option]",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:240,Modifiability,extend,extended,240,"// NLL = mainTerm + constraintTerm; // mainTerm = sum( entryVals ) + extendedTerm + simTerm [+ binnedDataTerm if activated binnedL option]; // this is what it should be, at least; // total nll should be all these values + constraint term + extended term + simTerm [+binnedDataTerm if activated; // binnedL option]",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:86,Usability,clear,clear,86,"// using shared ptrs everywhere, even for RooLinkedList which needs custom deleter to clear itself; // but still work ok for assignment operations",MatchSource.CODE_COMMENT,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx:12,Testability,test,test,12,"// uncapped test statistic is equal to onesidednegative when k is positive, and equal to 1.0 - difference between; // twosided and onesidednegative when k is negative ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/Asymptotics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx:80,Testability,test,tests,80,"// case to catch the delta function that ends up at exactly 0 for the one-sided tests",MatchSource.CODE_COMMENT,roofit/xroofit/src/Asymptotics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx:38,Testability,test,test,38,"// get the poi value that defines the test statistic, and the poi_prime hypothesis we are testing; // when setting limits, these are often the same value",MatchSource.CODE_COMMENT,roofit/xroofit/src/Asymptotics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx:90,Testability,test,testing,90,"// get the poi value that defines the test statistic, and the poi_prime hypothesis we are testing; // when setting limits, these are often the same value",MatchSource.CODE_COMMENT,roofit/xroofit/src/Asymptotics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx:301,Testability,test,testing,301,"/*out += ROOT::Math::gaussian_cdf((k-Lambda_low)/sigma_low) +; 2*Phi_m(poiVal,poi_primeVal,(Lambda_low - k_low)==0 ? 0 : ((Lambda_low -; k_low)/sigma_low),sigma,compatRegions); - Phi_m(poiVal,poi_primeVal,(Lambda_low - k)/sigma_low,sigma,compatFunc);; */; // handle case where poiVal = lowBound (e.g. testing mu=0 when lower bound is mu=0).; // sigma_low will be 0 and gaussian_cdf will end up being 1, but we need it to converge instead; // to 0.5 so that pValue(k=0) converges to 1 rather than 0.5.; // handle this by 'adding' back in the lower bound; // TODO: Think more about this?; /*if (sigma_low == 0) {; out -= 0.5;; }*/",MatchSource.CODE_COMMENT,roofit/xroofit/src/Asymptotics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx:3,Safety,avoid,avoid,3,"// avoid nans if sigma is 0; // want to evaluate gaussian integral in regions where IncompatFunc = 0",MatchSource.CODE_COMMENT,roofit/xroofit/src/Asymptotics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx:499,Availability,avail,available,499,"/*; * Project: xRooFit; * Author:; * Will Buttinger, RAL 2022; *; * Copyright (c) 2022, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class ROOT::Experimental::XRooFit::xRooBrowser; \ingroup xroofit. \image html RooBrowser.png width=50%. \brief A version of the TBrowser that can be used to interact with RooFit models and datasets. Also available under the ROOT::Experimental::RooBrowser alias. To get started with the xRooBrowser, open any ROOT file containing a workspace; and then create an instance of the xRooBrowser just like; creating an instance of a `TBrowser`. A window will be displayed with a navigable; tree structure on the left that lets you explore the content of the workspaces; present in the loaded file. Note that additional files, <b>including json workspace files</b>,; can be loaded through the `Browser --> Open` menu in the top left corner. The context menu for each node (access by right clicking on the node) in the tree structure can be used to get more; information about the node. In particular, the `Draw` command can be selected on many of the nodes that are part of a; statistical model, which will visualize that part of the model in the browser window. A number of options are available; for the `Draw` command, including (some options can be combined):. - ""e"" : calculate and visualize propagated model uncertainty; - ""auxratio"" : Draw a ratio auxiliary plot below the main plot; - ""auxsignif"" : Draw a significance auxiliary plot below the main plot; - ""pull"" : show panel of current parameter values, which can be dragged in order to change the values and visualize the; effect on the model (very experimental feature). Once a node has been drawn, the styling of subsequent draws can be controlled through `TStyle` objects; that will now appear in the `objects` folder in the workspace. A model can be",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooBrowser.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx:1374,Availability,avail,available,1374,"brief A version of the TBrowser that can be used to interact with RooFit models and datasets. Also available under the ROOT::Experimental::RooBrowser alias. To get started with the xRooBrowser, open any ROOT file containing a workspace; and then create an instance of the xRooBrowser just like; creating an instance of a `TBrowser`. A window will be displayed with a navigable; tree structure on the left that lets you explore the content of the workspaces; present in the loaded file. Note that additional files, <b>including json workspace files</b>,; can be loaded through the `Browser --> Open` menu in the top left corner. The context menu for each node (access by right clicking on the node) in the tree structure can be used to get more; information about the node. In particular, the `Draw` command can be selected on many of the nodes that are part of a; statistical model, which will visualize that part of the model in the browser window. A number of options are available; for the `Draw` command, including (some options can be combined):. - ""e"" : calculate and visualize propagated model uncertainty; - ""auxratio"" : Draw a ratio auxiliary plot below the main plot; - ""auxsignif"" : Draw a significance auxiliary plot below the main plot; - ""pull"" : show panel of current parameter values, which can be dragged in order to change the values and visualize the; effect on the model (very experimental feature). Once a node has been drawn, the styling of subsequent draws can be controlled through `TStyle` objects; that will now appear in the `objects` folder in the workspace. A model can be fit to a dataset from the workspace using the `fitTo` context menu command and specifying; the name of a dataset in the workspace (if no name is given, an expected dataset corresponding to the; current state of the model will be used). A dialog will display the fit result status code when the; fit completes and then a `fits` folder will be found under the workspace (the workspace may need to; be",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooBrowser.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx:2911,Availability,avail,available,2911,"istical model, which will visualize that part of the model in the browser window. A number of options are available; for the `Draw` command, including (some options can be combined):. - ""e"" : calculate and visualize propagated model uncertainty; - ""auxratio"" : Draw a ratio auxiliary plot below the main plot; - ""auxsignif"" : Draw a significance auxiliary plot below the main plot; - ""pull"" : show panel of current parameter values, which can be dragged in order to change the values and visualize the; effect on the model (very experimental feature). Once a node has been drawn, the styling of subsequent draws can be controlled through `TStyle` objects; that will now appear in the `objects` folder in the workspace. A model can be fit to a dataset from the workspace using the `fitTo` context menu command and specifying; the name of a dataset in the workspace (if no name is given, an expected dataset corresponding to the; current state of the model will be used). A dialog will display the fit result status code when the; fit completes and then a `fits` folder will be found under the workspace (the workspace may need to; be collapsed and re-expanded to make it appear) where the fit result can be found, selected, and visualized.; In multi-channel models the channels that are included in the fit can be controlled with the checkboxes; in the browser. Clicking the checkbox will cycle through three states: checked, unchecked with; grey-underline, and checked with grey-underline. The grey-underline indicates that channel wont be; included in the fit (and will appear greyed out when the model is visualized). Many more features are available in the xRooBrowser, and further documentation and development can be found at; the <a href=""https://gitlab.cern.ch/will/xroofit"">xRooFit</a> repository, which is the library where the browser has; been originally developed. The author (Will Buttinger) is also very happy to be contacted with questions or; feedback about this new functionality. */",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooBrowser.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx:873,Performance,load,loaded,873,"/*; * Project: xRooFit; * Author:; * Will Buttinger, RAL 2022; *; * Copyright (c) 2022, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class ROOT::Experimental::XRooFit::xRooBrowser; \ingroup xroofit. \image html RooBrowser.png width=50%. \brief A version of the TBrowser that can be used to interact with RooFit models and datasets. Also available under the ROOT::Experimental::RooBrowser alias. To get started with the xRooBrowser, open any ROOT file containing a workspace; and then create an instance of the xRooBrowser just like; creating an instance of a `TBrowser`. A window will be displayed with a navigable; tree structure on the left that lets you explore the content of the workspaces; present in the loaded file. Note that additional files, <b>including json workspace files</b>,; can be loaded through the `Browser --> Open` menu in the top left corner. The context menu for each node (access by right clicking on the node) in the tree structure can be used to get more; information about the node. In particular, the `Draw` command can be selected on many of the nodes that are part of a; statistical model, which will visualize that part of the model in the browser window. A number of options are available; for the `Draw` command, including (some options can be combined):. - ""e"" : calculate and visualize propagated model uncertainty; - ""auxratio"" : Draw a ratio auxiliary plot below the main plot; - ""auxsignif"" : Draw a significance auxiliary plot below the main plot; - ""pull"" : show panel of current parameter values, which can be dragged in order to change the values and visualize the; effect on the model (very experimental feature). Once a node has been drawn, the styling of subsequent draws can be controlled through `TStyle` objects; that will now appear in the `objects` folder in the workspace. A model can be",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooBrowser.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx:961,Performance,load,loaded,961,"/*; * Project: xRooFit; * Author:; * Will Buttinger, RAL 2022; *; * Copyright (c) 2022, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class ROOT::Experimental::XRooFit::xRooBrowser; \ingroup xroofit. \image html RooBrowser.png width=50%. \brief A version of the TBrowser that can be used to interact with RooFit models and datasets. Also available under the ROOT::Experimental::RooBrowser alias. To get started with the xRooBrowser, open any ROOT file containing a workspace; and then create an instance of the xRooBrowser just like; creating an instance of a `TBrowser`. A window will be displayed with a navigable; tree structure on the left that lets you explore the content of the workspaces; present in the loaded file. Note that additional files, <b>including json workspace files</b>,; can be loaded through the `Browser --> Open` menu in the top left corner. The context menu for each node (access by right clicking on the node) in the tree structure can be used to get more; information about the node. In particular, the `Draw` command can be selected on many of the nodes that are part of a; statistical model, which will visualize that part of the model in the browser window. A number of options are available; for the `Draw` command, including (some options can be combined):. - ""e"" : calculate and visualize propagated model uncertainty; - ""auxratio"" : Draw a ratio auxiliary plot below the main plot; - ""auxsignif"" : Draw a significance auxiliary plot below the main plot; - ""pull"" : show panel of current parameter values, which can be dragged in order to change the values and visualize the; effect on the model (very experimental feature). Once a node has been drawn, the styling of subsequent draws can be controlled through `TStyle` objects; that will now appear in the `objects` folder in the workspace. A model can be",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooBrowser.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx:1060,Security,access,access,1060,"Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class ROOT::Experimental::XRooFit::xRooBrowser; \ingroup xroofit. \image html RooBrowser.png width=50%. \brief A version of the TBrowser that can be used to interact with RooFit models and datasets. Also available under the ROOT::Experimental::RooBrowser alias. To get started with the xRooBrowser, open any ROOT file containing a workspace; and then create an instance of the xRooBrowser just like; creating an instance of a `TBrowser`. A window will be displayed with a navigable; tree structure on the left that lets you explore the content of the workspaces; present in the loaded file. Note that additional files, <b>including json workspace files</b>,; can be loaded through the `Browser --> Open` menu in the top left corner. The context menu for each node (access by right clicking on the node) in the tree structure can be used to get more; information about the node. In particular, the `Draw` command can be selected on many of the nodes that are part of a; statistical model, which will visualize that part of the model in the browser window. A number of options are available; for the `Draw` command, including (some options can be combined):. - ""e"" : calculate and visualize propagated model uncertainty; - ""auxratio"" : Draw a ratio auxiliary plot below the main plot; - ""auxsignif"" : Draw a significance auxiliary plot below the main plot; - ""pull"" : show panel of current parameter values, which can be dragged in order to change the values and visualize the; effect on the model (very experimental feature). Once a node has been drawn, the styling of subsequent draws can be controlled through `TStyle` objects; that will now appear in the `objects` folder in the workspace. A model can be fit to a dataset from the workspace using the `fitTo` context menu command and specifying; the nam",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooBrowser.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx:3227,Usability,feedback,feedback,3227,"istical model, which will visualize that part of the model in the browser window. A number of options are available; for the `Draw` command, including (some options can be combined):. - ""e"" : calculate and visualize propagated model uncertainty; - ""auxratio"" : Draw a ratio auxiliary plot below the main plot; - ""auxsignif"" : Draw a significance auxiliary plot below the main plot; - ""pull"" : show panel of current parameter values, which can be dragged in order to change the values and visualize the; effect on the model (very experimental feature). Once a node has been drawn, the styling of subsequent draws can be controlled through `TStyle` objects; that will now appear in the `objects` folder in the workspace. A model can be fit to a dataset from the workspace using the `fitTo` context menu command and specifying; the name of a dataset in the workspace (if no name is given, an expected dataset corresponding to the; current state of the model will be used). A dialog will display the fit result status code when the; fit completes and then a `fits` folder will be found under the workspace (the workspace may need to; be collapsed and re-expanded to make it appear) where the fit result can be found, selected, and visualized.; In multi-channel models the channels that are included in the fit can be controlled with the checkboxes; in the browser. Clicking the checkbox will cycle through three states: checked, unchecked with; grey-underline, and checked with grey-underline. The grey-underline indicates that channel wont be; included in the fit (and will appear greyed out when the model is visualized). Many more features are available in the xRooBrowser, and further documentation and development can be found at; the <a href=""https://gitlab.cern.ch/will/xroofit"">xRooFit</a> repository, which is the library where the browser has; been originally developed. The author (Will Buttinger) is also very happy to be contacted with questions or; feedback about this new functionality. */",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooBrowser.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:122,Availability,error,error,122,"// std::unique_ptr<RooArgSet> _obs(_pdf->getParameters(*pars)); // using this ""trick"" to get observables can; // produce 'error' msg because of RooProdPdf trying to setup partial integrals",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:128,Usability,Simpl,SimpleGaussianConstraint,128,"// note : this will work only for this type of constraints; // expressed as RooPoisson, RooGaussian, RooLognormal, RooGamma; // SimpleGaussianConstraint is CMS's own version of a RooGaussian, which also works.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:177,Integrability,depend,dependency,177,"// special case is for the Gamma where one might define the global observable n and you have a; // Gamma(b, n+1, ...._ in this case n+1 is the server and we don;t have a direct dependency, but; // we want to set n to the b value so in case of the Gamma ignore this test",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:265,Testability,test,test,265,"// special case is for the Gamma where one might define the global observable n and you have a; // Gamma(b, n+1, ...._ in this case n+1 is the server and we don;t have a direct dependency, but; // we want to set n to the b value so in case of the Gamma ignore this test",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:20,Integrability,depend,depending,20,"// found server not depending on the gob",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:12,Modifiability,variab,variable,12,"// range of variable in dataset may be less than in the workspace; // if e.g. generate for a specific channel. So need to expand ranges to match",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:357,Performance,cache,caches,357,"// June2023: Added this because found that generation was otherwise getting progressively slower; // the RooAbsPdf::generate does a clone, and it seems that the RooCacheManager of the original pdf; // is getting polluted on each generate call, causing it to grow larger and therefore the clone of it; // to take longer and longer. So sterilize to clear the caches of all components",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:347,Usability,clear,clear,347,"// June2023: Added this because found that generation was otherwise getting progressively slower; // the RooAbsPdf::generate does a clone, and it seems that the RooCacheManager of the original pdf; // is getting polluted on each generate call, causing it to grow larger and therefore the clone of it; // to take longer and longer. So sterilize to clear the caches of all components",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:26,Security,access,accessing,26,"// nullptr needed because accessing Clone via TObject base class puts; // """" instead, so doesnt copy names",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:17,Performance,optimiz,optimization,17,"// disable const-optimization at the construction step ... can happen in the minimization though",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:11,Availability,error,errors,11,"// ensures errors are +/- 1 sigma ..IMPORTANT",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:23,Availability,error,errors,23,"// computes asymmetric errors on any parameter with the ""minos"" attribute set",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:35,Performance,optimiz,optimization,35,"// if 0 will disable constant term optimization and cache-and-track of the; // NLL. 1 = just caching, 2 = cache and track",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:52,Performance,cache,cache-and-track,52,"// if 0 will disable constant term optimization and cache-and-track of the; // NLL. 1 = just caching, 2 = cache and track",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:106,Performance,cache,cache,106,"// if 0 will disable constant term optimization and cache-and-track of the; // NLL. 1 = just caching, 2 = cache and track",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:13,Testability,log,log,13,"// length of log to capture and save",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:29,Testability,log,log,29,"// seconds between output to log of evaluation progress",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:35,Testability,log,logging,35,"// not really options but here for logging purposes; // extraOpts->SetValue(""ROOTVersion"",ROOT_VERSION_CODE); - not needed as should by part of the ROOT TFile definition; // extraOpts->SetValue(""HessianStepTolerance"",0.);; // extraOpts->SetValue(""HessianG2Tolerance"",0.);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:32,Performance,load,loading,32,"// add here so checked for when loading from cache",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:45,Performance,cache,cache,45,"// add here so checked for when loading from cache",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:55,Availability,toler,tolerances,55,"// uses most precise hesse settings (step sizes and g2 tolerances)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:55,Availability,toler,tolerances,55,"// uses most precise hesse settings (step sizes and g2 tolerances)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:17,Performance,Load,Loaded,17,"// std::cout << ""Loaded "" << nllDir->GetPath() << ""/"" << k->GetName() << "" : "" << k->GetTitle(); // << std::endl;",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:40,Performance,cache,cachedFit,40,"// return std::shared_ptr<RooFitResult>(cachedFit,[](RooFitResult*){}); // dir owns the; // fitResult - this means dir needs to stay open for fits to be valid return; // std::make_shared<RooFitResult>(*cachedFit); // return a copy ... dir doesn't need to stay; // open, but fit result isn't shared",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:202,Performance,cache,cachedFit,202,"// return std::shared_ptr<RooFitResult>(cachedFit,[](RooFitResult*){}); // dir owns the; // fitResult - this means dir needs to stay open for fits to be valid return; // std::make_shared<RooFitResult>(*cachedFit); // return a copy ... dir doesn't need to stay; // open, but fit result isn't shared",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:10,Performance,cache,cachedFit,10,"// delete cachedFit;",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:58,Availability,toler,tolerance,58,"// Note: AsymptoticCalculator enforces not less than 1 on tolerance - should we do so too?",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:63,Performance,load,loading,63,"// if(fitConfig.MinimizerOptions().ExtraOptions()) {; // //for loading hesse options; // double a;; // if(fitConfig.MinimizerOptions().ExtraOptions()->GetValue(""HessianStepTolerance"",a)) {; // ROOT::Math::MinimizerOptions::Default(""Minuit2"").SetValue(""HessianStepTolerance"",a);; // }; // if(fitConfig.MinimizerOptions().ExtraOptions()->GetValue(""HessianG2Tolerance"",a)) {; // ROOT::Math::MinimizerOptions::Default(""Minuit2"").SetValue(""HessianG2Tolerance"",a);; // }; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:704,Deployability,update,update,704,"// for safety force a refresh of the cache (and tracking) in the nll; // DO NOT do a ConfigChange ... this is just a deactivate-reactivate of caching; // but it seems like doing this breaks the const optimization and function is badly behaved; // so once its turned on never turn it off.; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track; // the next line seems safe to do but wont bother doing it because not bothering with above; // need to understand why turning the cache off and on again breaks it??; // nll.constOptimizeTestStatistic(RooAbsArg::ValueChange, constOptimize>1); // update the cache values -- is; // this needed??",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:85,Modifiability,Config,ConfigChange,85,"// for safety force a refresh of the cache (and tracking) in the nll; // DO NOT do a ConfigChange ... this is just a deactivate-reactivate of caching; // but it seems like doing this breaks the const optimization and function is badly behaved; // so once its turned on never turn it off.; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track; // the next line seems safe to do but wont bother doing it because not bothering with above; // need to understand why turning the cache off and on again breaks it??; // nll.constOptimizeTestStatistic(RooAbsArg::ValueChange, constOptimize>1); // update the cache values -- is; // this needed??",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:334,Modifiability,Config,ConfigChange,334,"// for safety force a refresh of the cache (and tracking) in the nll; // DO NOT do a ConfigChange ... this is just a deactivate-reactivate of caching; // but it seems like doing this breaks the const optimization and function is badly behaved; // so once its turned on never turn it off.; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track; // the next line seems safe to do but wont bother doing it because not bothering with above; // need to understand why turning the cache off and on again breaks it??; // nll.constOptimizeTestStatistic(RooAbsArg::ValueChange, constOptimize>1); // update the cache values -- is; // this needed??",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:37,Performance,cache,cache,37,"// for safety force a refresh of the cache (and tracking) in the nll; // DO NOT do a ConfigChange ... this is just a deactivate-reactivate of caching; // but it seems like doing this breaks the const optimization and function is badly behaved; // so once its turned on never turn it off.; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track; // the next line seems safe to do but wont bother doing it because not bothering with above; // need to understand why turning the cache off and on again breaks it??; // nll.constOptimizeTestStatistic(RooAbsArg::ValueChange, constOptimize>1); // update the cache values -- is; // this needed??",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:200,Performance,optimiz,optimization,200,"// for safety force a refresh of the cache (and tracking) in the nll; // DO NOT do a ConfigChange ... this is just a deactivate-reactivate of caching; // but it seems like doing this breaks the const optimization and function is badly behaved; // so once its turned on never turn it off.; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track; // the next line seems safe to do but wont bother doing it because not bothering with above; // need to understand why turning the cache off and on again breaks it??; // nll.constOptimizeTestStatistic(RooAbsArg::ValueChange, constOptimize>1); // update the cache values -- is; // this needed??",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:441,Performance,cache,cache-and-track,441,"// for safety force a refresh of the cache (and tracking) in the nll; // DO NOT do a ConfigChange ... this is just a deactivate-reactivate of caching; // but it seems like doing this breaks the const optimization and function is badly behaved; // so once its turned on never turn it off.; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track; // the next line seems safe to do but wont bother doing it because not bothering with above; // need to understand why turning the cache off and on again breaks it??; // nll.constOptimizeTestStatistic(RooAbsArg::ValueChange, constOptimize>1); // update the cache values -- is; // this needed??",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:589,Performance,cache,cache,589,"// for safety force a refresh of the cache (and tracking) in the nll; // DO NOT do a ConfigChange ... this is just a deactivate-reactivate of caching; // but it seems like doing this breaks the const optimization and function is badly behaved; // so once its turned on never turn it off.; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track; // the next line seems safe to do but wont bother doing it because not bothering with above; // need to understand why turning the cache off and on again breaks it??; // nll.constOptimizeTestStatistic(RooAbsArg::ValueChange, constOptimize>1); // update the cache values -- is; // this needed??",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:715,Performance,cache,cache,715,"// for safety force a refresh of the cache (and tracking) in the nll; // DO NOT do a ConfigChange ... this is just a deactivate-reactivate of caching; // but it seems like doing this breaks the const optimization and function is badly behaved; // so once its turned on never turn it off.; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track; // the next line seems safe to do but wont bother doing it because not bothering with above; // need to understand why turning the cache off and on again breaks it??; // nll.constOptimizeTestStatistic(RooAbsArg::ValueChange, constOptimize>1); // update the cache values -- is; // this needed??",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:7,Safety,safe,safety,7,"// for safety force a refresh of the cache (and tracking) in the nll; // DO NOT do a ConfigChange ... this is just a deactivate-reactivate of caching; // but it seems like doing this breaks the const optimization and function is badly behaved; // so once its turned on never turn it off.; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track; // the next line seems safe to do but wont bother doing it because not bothering with above; // need to understand why turning the cache off and on again breaks it??; // nll.constOptimizeTestStatistic(RooAbsArg::ValueChange, constOptimize>1); // update the cache values -- is; // this needed??",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:481,Safety,safe,safe,481,"// for safety force a refresh of the cache (and tracking) in the nll; // DO NOT do a ConfigChange ... this is just a deactivate-reactivate of caching; // but it seems like doing this breaks the const optimization and function is badly behaved; // so once its turned on never turn it off.; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track; // the next line seems safe to do but wont bother doing it because not bothering with above; // need to understand why turning the cache off and on again breaks it??; // nll.constOptimizeTestStatistic(RooAbsArg::ValueChange, constOptimize>1); // update the cache values -- is; // this needed??",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:17,Performance,optimiz,optimization,17,"// disable const optimization; // warning - if the nll was previously activated then it seems like deactivating may break it.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:16,Availability,failure,failure,16,"// note: Minuit failure is status code 4, minuit2 that is edm above max",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:38,Availability,toler,tolerance,38,"// NOTE: minuit2 seems to distort the tolerance in a weird way, so that tol becomes 1000 times smaller than; // specified Also note that if fits are failing because of edm over max, it can be a good idea to activate the; // Offset option when building nll",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:209,Availability,failure,failure,209,"/* Minuit2 status codes:; * status = 0 : OK; status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. For Minuit its basically 0 is OK, 4 is failure, I think?; */",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:257,Availability,failure,failure,257,"/* Minuit2 status codes:; * status = 0 : OK; status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. For Minuit its basically 0 is OK, 4 is failure, I think?; */",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:32,Security,access,access,32,"// currently dont have a way to access the covariance ""dcovar"" which is a metric from iterative; // covariance method that is used by minuit2 to say if the covariance is accurate or not; // See MinimumError.h: IsAccurate if Dcovar < 0.1; // Note that if strategy>=2 or (strategy=1 and Dcovar>0.05) then hesse will be forced to be run (see; // VariadicMetricBuilder) So only in Strategy=0 can you skip hesse (even if SetParabErrors false).",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:178,Availability,Error,Error,178,"// if(auto _minuit2 = dynamic_cast<ROOT::Minuit2::Minuit2Minimizer*>(_minimizer.fitter()->GetMinimizer());; // _minuit2 && _minuit2->fMinimum) {; // dCovar = _minuit2->fMinimum->Error().Dcovar();; // }; // only do hesse if was a valid min and not full accurate cov matrix already (can happen if e.g. ran strat2)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:214,Availability,error,error,214,"// Note: minima where the covariance was made posdef are deemed 'valid' ...; // remove limits on pars before calculation - CURRENTLY HAS NO EFFECT, minuit still holds the state as; // transformed interesting note: error on pars before hesse can be significantly smaller than after hesse ...; // what is the pre-hesse error corresponding to? - corresponds to approximation of covariance matrix calculated; // with iterative method; /*auto parSettings = _minimizer.fitter()->Config().ParamsSettings();; for (auto &ss : _minimizer.fitter()->Config().ParamsSettings()) {; ss.RemoveLimits();; }. for(auto f : *floatPars) {; auto v = dynamic_cast<RooRealVar*>(f);; if(v->hasRange(nullptr)) v->setRange(""backup"",v->getMin(),v->getMax());; v->removeRange();; }*/; // std::cout << ""nIterations = "" << _minimizer.fitter()->GetMinimizer()->NIterations() << std::endl;; // std::cout << ""covQual before hesse = "" << _minimizer.fitter()->GetMinimizer()->CovMatrixStatus() <<; // std::endl;",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:317,Availability,error,error,317,"// Note: minima where the covariance was made posdef are deemed 'valid' ...; // remove limits on pars before calculation - CURRENTLY HAS NO EFFECT, minuit still holds the state as; // transformed interesting note: error on pars before hesse can be significantly smaller than after hesse ...; // what is the pre-hesse error corresponding to? - corresponds to approximation of covariance matrix calculated; // with iterative method; /*auto parSettings = _minimizer.fitter()->Config().ParamsSettings();; for (auto &ss : _minimizer.fitter()->Config().ParamsSettings()) {; ss.RemoveLimits();; }. for(auto f : *floatPars) {; auto v = dynamic_cast<RooRealVar*>(f);; if(v->hasRange(nullptr)) v->setRange(""backup"",v->getMin(),v->getMax());; v->removeRange();; }*/; // std::cout << ""nIterations = "" << _minimizer.fitter()->GetMinimizer()->NIterations() << std::endl;; // std::cout << ""covQual before hesse = "" << _minimizer.fitter()->GetMinimizer()->CovMatrixStatus() <<; // std::endl;",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:473,Modifiability,Config,Config,473,"// Note: minima where the covariance was made posdef are deemed 'valid' ...; // remove limits on pars before calculation - CURRENTLY HAS NO EFFECT, minuit still holds the state as; // transformed interesting note: error on pars before hesse can be significantly smaller than after hesse ...; // what is the pre-hesse error corresponding to? - corresponds to approximation of covariance matrix calculated; // with iterative method; /*auto parSettings = _minimizer.fitter()->Config().ParamsSettings();; for (auto &ss : _minimizer.fitter()->Config().ParamsSettings()) {; ss.RemoveLimits();; }. for(auto f : *floatPars) {; auto v = dynamic_cast<RooRealVar*>(f);; if(v->hasRange(nullptr)) v->setRange(""backup"",v->getMin(),v->getMax());; v->removeRange();; }*/; // std::cout << ""nIterations = "" << _minimizer.fitter()->GetMinimizer()->NIterations() << std::endl;; // std::cout << ""covQual before hesse = "" << _minimizer.fitter()->GetMinimizer()->CovMatrixStatus() <<; // std::endl;",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:538,Modifiability,Config,Config,538,"// Note: minima where the covariance was made posdef are deemed 'valid' ...; // remove limits on pars before calculation - CURRENTLY HAS NO EFFECT, minuit still holds the state as; // transformed interesting note: error on pars before hesse can be significantly smaller than after hesse ...; // what is the pre-hesse error corresponding to? - corresponds to approximation of covariance matrix calculated; // with iterative method; /*auto parSettings = _minimizer.fitter()->Config().ParamsSettings();; for (auto &ss : _minimizer.fitter()->Config().ParamsSettings()) {; ss.RemoveLimits();; }. for(auto f : *floatPars) {; auto v = dynamic_cast<RooRealVar*>(f);; if(v->hasRange(nullptr)) v->setRange(""backup"",v->getMin(),v->getMax());; v->removeRange();; }*/; // std::cout << ""nIterations = "" << _minimizer.fitter()->GetMinimizer()->NIterations() << std::endl;; // std::cout << ""covQual before hesse = "" << _minimizer.fitter()->GetMinimizer()->CovMatrixStatus() <<; // std::endl;",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:58,Modifiability,Config,Config,58,"// const_cast<ROOT::Math::IOptions*>(_minimizer.fitter()->Config().MinimizerOptions().ExtraOptions())->SetValue(""HessianStepTolerance"",0.1);; // const_cast<ROOT::Math::IOptions*>(_minimizer.fitter()->Config().MinimizerOptions().ExtraOptions())->SetValue(""HessianG2Tolerance"",0.02);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:200,Modifiability,Config,Config,200,"// const_cast<ROOT::Math::IOptions*>(_minimizer.fitter()->Config().MinimizerOptions().ExtraOptions())->SetValue(""HessianStepTolerance"",0.1);; // const_cast<ROOT::Math::IOptions*>(_minimizer.fitter()->Config().MinimizerOptions().ExtraOptions())->SetValue(""HessianG2Tolerance"",0.02);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:340,Availability,Failure,Failure,340,"// note: I have seen that you can get 'full covariance quality' without; // running hesse ... is that expected?; // note: hesse status will be -1 if hesse failed (no covariance matrix); // otherwise the status appears to be whatever was the status before; // note that hesse succeeds even if the cov matrix it calculates is forced pos def. Failure is only; // if it cannot calculate a cov matrix at all.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:277,Modifiability,Config,Config,277,"// mark as hesse succeeded, although need to look at covQual to see if was any good; /*for(auto f : *floatPars) {; auto v = dynamic_cast<RooRealVar*>(f);; if(v->hasRange(""backup"")) {; v->setRange(v->getMin(),v->getMax());; v->removeRange(""backup"");; }; }; _minimizer.fitter()->Config().SetParamsSettings(parSettings);*/; /*for (auto &ss : _minimizer.fitter()->Config().ParamsSettings()) {; if( ss.HasLowerLimit() || ss.HasUpperLimit() ) std::cout << ss.Name() << "" limit restored "" <<; ss.LowerLimit() << "" - "" << ss.UpperLimit() << std::endl;; }*/",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:360,Modifiability,Config,Config,360,"// mark as hesse succeeded, although need to look at covQual to see if was any good; /*for(auto f : *floatPars) {; auto v = dynamic_cast<RooRealVar*>(f);; if(v->hasRange(""backup"")) {; v->setRange(v->getMin(),v->getMax());; v->removeRange(""backup"");; }; }; _minimizer.fitter()->Config().SetParamsSettings(parSettings);*/; /*for (auto &ss : _minimizer.fitter()->Config().ParamsSettings()) {; if( ss.HasLowerLimit() || ss.HasUpperLimit() ) std::cout << ss.Name() << "" limit restored "" <<; ss.LowerLimit() << "" - "" << ss.UpperLimit() << std::endl;; }*/",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:81,Performance,cache,cache,81,"// DO NOT DO THIS - seems to mess with the NLL function in a way that breaks the cache - reactivating wont fix; // if(constOptimize) { _minimizer.optimizeConst(0); } // doing this because saw happens in RooAbsPdf::minimizeNLL; // method; // signal(SIGINT,gOldHandlerr);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:146,Performance,optimiz,optimizeConst,146,"// DO NOT DO THIS - seems to mess with the NLL function in a way that breaks the cache - reactivating wont fix; // if(constOptimize) { _minimizer.optimizeConst(0); } // doing this because saw happens in RooAbsPdf::minimizeNLL; // method; // signal(SIGINT,gOldHandlerr);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:100,Availability,error,errors,100,"// check if any of the parameters are at their limits (potentially a problem with fit); // or their errors go over their limits (just a warning)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:52,Availability,error,errors,52,"// // automatic parameter range adjustment based on errors; // for(auto a : *floatPars) {; // RooRealVar *v = dynamic_cast<RooRealVar *>(a);; // if(v->getMin() > v->getVal() - 3.*v->getError()) {; // v->setMin(v->getVal() - 3.1*v->getError());; // }; // if(v->getMax() < v->getVal() + 3.*v->getError()) {; // v->setMax(v->getVal() + 3.1*v->getError());; // }; // // also make sure the range isn't too big (fits can struggle); // if(v->getMin() < v->getVal() - 10.*v->getError()) {; // v->setMin(v->getVal() - 9.9*v->getError());; // }; // if(v->getMax() > v->getVal() + 10.*v->getError()) {; // v->setMax(v->getVal() + 9.9*v->getError());; // }; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:19,Availability,error,errors,19,"// ensure no asymm errors on any pars unless had minuitMinos",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:89,Deployability,update,update,89,"// minimizer may have slightly altered the fitConfig (e.g. unavailable minimizer etc) so update for that ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:8,Testability,log,logs,8,"// save logs to StringVar in constPars list",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:24,Availability,error,errors,24,"// calculate asymmetric errors, if required, on the named parameter that was floating in the fit; // returns status code. 0 = all good, 1 = failure, ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:140,Availability,failure,failure,140,"// calculate asymmetric errors, if required, on the named parameter that was floating in the fit; // returns status code. 0 = all good, 1 = failure, ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:9,Availability,Error,Error,9,"// msg().Error(""findSigma"",""%s at upper limit of %g .. error may be underestimated; // (t=%g)"",par->GetName(),par->getMax(),tmu);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:55,Availability,error,error,55,"// msg().Error(""findSigma"",""%s at upper limit of %g .. error may be underestimated; // (t=%g)"",par->GetName(),par->getMax(),tmu);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:9,Availability,Error,Error,9,"// msg().Error(""findSigma"",""%s at lower limit of %g .. error may be underestimated; // (t=%g)"",par->GetName(),par->getMin(),tmu);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:55,Availability,error,error,55,"// msg().Error(""findSigma"",""%s at lower limit of %g .. error may be underestimated; // (t=%g)"",par->GetName(),par->getMin(),tmu);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:21,Availability,error,error,21,"// determine if asym error defined by temporarily setting error to nan ... will then return non-nan if defined",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:58,Availability,error,error,58,"// determine if asym error defined by temporarily setting error to nan ... will then return non-nan if defined",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:7,Availability,error,error,7,"// put error wrt par_hat value, even if found better min",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:7,Availability,error,error,7,"// put error wrt par_hat value, even if found better min",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:14,Modifiability,config,configurable,14,"// TODO: make configurable; // 2. Determine the data (including globs). if more than 1 then exit and tell user they need to flag",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:8,Availability,alive,alive,8,"// keep alive because may own the globs",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:10,Availability,error,error,10,"// rounds error to 1 or 2 sig fig and round value to match that precision",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:33,Modifiability,variab,variable,33,"// set the first poi as the axis variable to scan",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:28,Modifiability,variab,variable,28,"// will scan the first axes variable ... if there is none, specify the first poi as the axis var",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:33,Modifiability,variab,variable,33,"// set the first poi as the axis variable to scan",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:26,Testability,test,test,26,"// force use of two-sided test statistic for any new points",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:21,Performance,load,loaded,21,"// this happens when loaded hypoSpace from a hypoSpaceInverterResult; // set relUncert to infinity so that we don't test any new points",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:116,Testability,test,test,116,"// this happens when loaded hypoSpace from a hypoSpaceInverterResult; // set relUncert to infinity so that we don't test any new points",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:10,Availability,avail,available,10,"// no NLL available so just get whatever limit we can; // if any of the defined points are 'expected' data don't do obs; // for(auto& hp : *this) {; // if(hp.isExpected) {; // doObs = false; break;; // }; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:21,Performance,load,loaded,21,"// this happens when loaded hypoSpace from a hypoSpaceInverterResult; // set relUncert to infinity so that we don't test any new points",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:116,Testability,test,test,116,"// this happens when loaded hypoSpace from a hypoSpaceInverterResult; // set relUncert to infinity so that we don't test any new points",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:10,Availability,avail,available,10,"// no NLL available so just get whatever limit we can",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:8,Availability,error,errors,8,"// make errors positive for this method",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:17,Security,access,access,17,"// TODO: need to access the genfit of the data and add that to the point, somehow ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:103,Security,hash,hash,103,"// and now remove anything that's marked floating; // do to bug in remove have to ensure not using the hash map otherwise will be doing an invalid read after the; // deletion of the owned pars",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:290,Availability,avail,available,290,"// assume for now all fits in given path will have the same pars; // so can just look at the float and const pars of first fit result to get all of them; // tuple is: parName, parValue, parAltValue (blank if nan); // key represents the ufit values, value represents the sets of poi for the available cfits (subfits of the ufit)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:18,Performance,cache,cachedFit,18,"// usual case ... cachedFit has more constPars than one of the fits we have already encountered; // (the ufit); // => cachedFit is a cfit of key fr ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:118,Performance,cache,cachedFit,118,"// usual case ... cachedFit has more constPars than one of the fits we have already encountered; // (the ufit); // => cachedFit is a cfit of key fr ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:16,Performance,cache,cachedFit,16,"// std::cout << cachedFit->GetName() << "" "";; // for(auto ff: constPars) std::cout << ff.first << ""="" <<; // ff.second << "" ""; std::cout << std::endl;",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:261,Performance,cache,cachedFit,261,"/* FOR NOW we will skip cases where we encounter the cfit before the ufit - usually should eval the; ufit first; * else if (std::includes(key.begin(), key.end(), constPars.begin(), constPars.end())) {; // constPars are subset of key; // => key is a ufit of the cachedFit; // add all par names of key that aren't in constPars ... these are the poi; std::set<std::string> pois;; for (auto &&par: key) {; if (constPars.find(par) == constPars.end()) {; pois.insert(std::get<0>(par));; allpois.insert(std::get<0>(par));; }; }; if (!pois.empty()) {; std::cout << ""found cfit BEFORE ufit??"" << std::endl;; value.insert(pois);; }; } */",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:52,Availability,alive,alive,52,"// this is ok provided fPars (i.e. hypoSpace) stays alive as long as the hypoPoint ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:56,Availability,down,down,56,"// reverse sort second half; // now populate the up and down values",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:24,Testability,test,tested,24,"// use line to indicate tested points",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:14,Testability,log,log,14,"// convert to log ....",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:3,Usability,simpl,simple,3,"// simple linear extrapolation to critical value ... return nan if problem",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:29,Availability,error,error,29,"// use points either side as error",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:41,Availability,error,error,41,"// give err negative sign to indicate if error due to negative side",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:89,Testability,log,log,89,"// extrapolating above based on last two points; // in fact, if 2nd last point is a p=1 (log(p)=0) then go back",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:68,Usability,clear,clear,68,"// in 6.28 DrawClone wont make the gPad defined :( ... so Draw then clear and Draw Clone",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:269,Availability,error,error,269,"// can approximate expected limit using; // mu_hat + sigma_mu*ROOT::Math::gaussian_quantile(1.-alpha/2.,1) for cls; // or mu_hat + sigma_mu*ROOT::Math::gaussian_quantile((1.-alpha),1) for cls+b; // get a very first estimate of sigma_mu from ufit to expected data, take error on mu as sigma_mu",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:100,Testability,test,test,100,"// if done an expected limit, assume data is like expected and choose expected limit point as first test point",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:42,Availability,avail,available,42,"// prefer extrapolation with sigma_mu, if available, if it takes us further; // as shape of p-value curve is usually",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:96,Availability,error,error,96,"// got here need a new point .... evaluate the estimated lim location +/- the relUncert (signed error takes care of; // direction)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:20,Safety,avoid,avoid,20,"// access member to avoid unnecessarily creating fit result if wasnt needed; // create a new subpad and draw fitResult on it",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:3,Security,access,access,3,"// access member to avoid unnecessarily creating fit result if wasnt needed; // create a new subpad and draw fitResult on it",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooHypoSpace.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:53,Safety,avoid,avoid,53,"// commented out code was attempt to speed up things avoid unnecessarily reinitializing things over and over; // if (!fNll->kReuseNLL) {; // // can be faster just by putting back in old nll; // fNll->std::shared_ptr<RooAbsReal>::operator=(fOldNll);; // fNll->fData = fOldData.first;; // fNll->fGlobs = fOldData.second;; // } else {; // fNll->setData(fOldData);; // fNll->get()->SetName(fOldName);; // fNll->get()->setStringAttribute(""fitresultTitle"", (fOldTitle == """") ? nullptr : fOldTitle);; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:26,Security,access,accessing,26,"// nullptr needed because accessing Clone via TObject base class puts; // """" instead, so doesnt copy names",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:70,Energy Efficiency,reduce,reduce,70,"// if fit range specified, and pdf is a RooSimultaneous, may need to 'reduce' the model if some of the pdfs are in; // range and others are not",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:3,Energy Efficiency,reduce,reduce,3,"// reduce the data here for convenience, not really necessary because will happen inside RooNLLVar but still; // fData.reset( fData->reduce(RooFit::SelectVars(*fData->get()),RooFit::CutRange(rangeName)) );",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:133,Energy Efficiency,reduce,reduce,133,"// reduce the data here for convenience, not really necessary because will happen inside RooNLLVar but still; // fData.reset( fData->reduce(RooFit::SelectVars(*fData->get()),RooFit::CutRange(rangeName)) );",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:8,Energy Efficiency,reduce,reduce,8,"// must reduce because category var has one of the ranges",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:204,Integrability,depend,depend,204,"// if (fGlobs) {; // // must check GlobalObservables is in the list; // }; //; // if (auto globs = dynamic_cast<RooCmdArg*>(fOpts->find(""GlobalObservables""))) {; // // first remove any obs the pdf doesnt depend on; // auto _vars = std::unique_ptr<RooAbsCollection>( fPdf->getVariables() );; // auto _funcGlobs = std::unique_ptr<RooAbsCollection>(_vars->selectCommon(*globs->getSet(0)));; // fGlobs.reset( std::unique_ptr<RooAbsCollection>(globs->getSet(0)->selectCommon(*_funcGlobs))->snapshot() );; // globs->setSet(0,dynamic_cast<const RooArgSet&>(*_funcGlobs)); // globs in linked list has its own argset; // but args need to live as long as the func; // /*RooArgSet toRemove;; // for(auto a : *globs->getSet(0)) {; // if (!_vars->find(*a)) toRemove.add(*a);; // }; // const_cast<RooArgSet*>(globs->getSet(0))->remove(toRemove);; // fGlobs.reset( globs->getSet(0)->snapshot() );; // fGlobs->setAttribAll(""Constant"",true);; // const_cast<RooArgSet*>(globs->getSet(0))->replace(*fGlobs);*/; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:45,Availability,avail,available,45,"// since RooNLLVar will assume binBoundaries available (not null), we should check bin boundaries; // available",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:102,Availability,avail,available,102,"// since RooNLLVar will assume binBoundaries available (not null), we should check bin boundaries; // available",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:31,Performance,cache,caches,31,"// before creating, clear away caches if any if pdf is in ws",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:20,Usability,clear,clear,20,"// before creating, clear away caches if any if pdf is in ws",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:33,Safety,avoid,avoid,33,"// create parent on next line to avoid triggering workspace initialization code in constructor of xRooNode",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:61,Performance,cache,cache,61,"// there seems to be a nasty bug somewhere that can make the cache become invalid, so clear it here",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:86,Usability,clear,clear,86,"// there seems to be a nasty bug somewhere that can make the cache become invalid, so clear it here",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:14,Energy Efficiency,reduce,reduced,14,"// keeping in reduced cov matrix",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:67,Availability,avail,available,67,"// first do with the covariance approximation, since that's always available",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:103,Performance,optimiz,optimized,103,"// add any pars that are const here that aren't in constPars list because they may have been; // const-optimized and their values cached with the dataset, so if subsequently floated the; // nll wont evaluate correctly; // fConstVars.reset( fFuncVars->selectByAttrib(""Constant"",true) );; // before returning, flag which of the constPars were actually global observables",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:130,Performance,cache,cached,130,"// add any pars that are const here that aren't in constPars list because they may have been; // const-optimized and their values cached with the dataset, so if subsequently floated the; // nll wont evaluate correctly; // fConstVars.reset( fFuncVars->selectByAttrib(""Constant"",true) );; // before returning, flag which of the constPars were actually global observables",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:3,Integrability,depend,dependsOn,3,"// dependsOn check needed until ParamHistFunc binBoundaries method fixed",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:68,Availability,avail,available,68,"// note that if evaluating this for a single channel, until 6.30 is available if you are using Binned mode the pdf; // will need to be part of a Simultaneous",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:190,Modifiability,extend,extendedTerm,190,"// for binned case each entry is: -(-N + Nlog(N) - std::lgamma(N+1)); // for unbinned case each entry is: -(N*log(N/(sumN*binW))) = -N*logN + N*log(sumN) + N*log(binW); // but unbinned gets extendedTerm = sumN - sumN*log(sumN); // so resulting sum is just sumN - sum[ N*logN - N*log(binW) ]; // which is the same as the binned case without the LnGamma part and with the extra sum[N*log(binW)] part",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:110,Testability,log,log,110,"// for binned case each entry is: -(-N + Nlog(N) - std::lgamma(N+1)); // for unbinned case each entry is: -(N*log(N/(sumN*binW))) = -N*logN + N*log(sumN) + N*log(binW); // but unbinned gets extendedTerm = sumN - sumN*log(sumN); // so resulting sum is just sumN - sum[ N*logN - N*log(binW) ]; // which is the same as the binned case without the LnGamma part and with the extra sum[N*log(binW)] part",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:135,Testability,log,logN,135,"// for binned case each entry is: -(-N + Nlog(N) - std::lgamma(N+1)); // for unbinned case each entry is: -(N*log(N/(sumN*binW))) = -N*logN + N*log(sumN) + N*log(binW); // but unbinned gets extendedTerm = sumN - sumN*log(sumN); // so resulting sum is just sumN - sum[ N*logN - N*log(binW) ]; // which is the same as the binned case without the LnGamma part and with the extra sum[N*log(binW)] part",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:144,Testability,log,log,144,"// for binned case each entry is: -(-N + Nlog(N) - std::lgamma(N+1)); // for unbinned case each entry is: -(N*log(N/(sumN*binW))) = -N*logN + N*log(sumN) + N*log(binW); // but unbinned gets extendedTerm = sumN - sumN*log(sumN); // so resulting sum is just sumN - sum[ N*logN - N*log(binW) ]; // which is the same as the binned case without the LnGamma part and with the extra sum[N*log(binW)] part",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:158,Testability,log,log,158,"// for binned case each entry is: -(-N + Nlog(N) - std::lgamma(N+1)); // for unbinned case each entry is: -(N*log(N/(sumN*binW))) = -N*logN + N*log(sumN) + N*log(binW); // but unbinned gets extendedTerm = sumN - sumN*log(sumN); // so resulting sum is just sumN - sum[ N*logN - N*log(binW) ]; // which is the same as the binned case without the LnGamma part and with the extra sum[N*log(binW)] part",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:217,Testability,log,log,217,"// for binned case each entry is: -(-N + Nlog(N) - std::lgamma(N+1)); // for unbinned case each entry is: -(N*log(N/(sumN*binW))) = -N*logN + N*log(sumN) + N*log(binW); // but unbinned gets extendedTerm = sumN - sumN*log(sumN); // so resulting sum is just sumN - sum[ N*logN - N*log(binW) ]; // which is the same as the binned case without the LnGamma part and with the extra sum[N*log(binW)] part",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:270,Testability,log,logN,270,"// for binned case each entry is: -(-N + Nlog(N) - std::lgamma(N+1)); // for unbinned case each entry is: -(N*log(N/(sumN*binW))) = -N*logN + N*log(sumN) + N*log(binW); // but unbinned gets extendedTerm = sumN - sumN*log(sumN); // so resulting sum is just sumN - sum[ N*logN - N*log(binW) ]; // which is the same as the binned case without the LnGamma part and with the extra sum[N*log(binW)] part",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:279,Testability,log,log,279,"// for binned case each entry is: -(-N + Nlog(N) - std::lgamma(N+1)); // for unbinned case each entry is: -(N*log(N/(sumN*binW))) = -N*logN + N*log(sumN) + N*log(binW); // but unbinned gets extendedTerm = sumN - sumN*log(sumN); // so resulting sum is just sumN - sum[ N*logN - N*log(binW) ]; // which is the same as the binned case without the LnGamma part and with the extra sum[N*log(binW)] part",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:382,Testability,log,log,382,"// for binned case each entry is: -(-N + Nlog(N) - std::lgamma(N+1)); // for unbinned case each entry is: -(N*log(N/(sumN*binW))) = -N*logN + N*log(sumN) + N*log(binW); // but unbinned gets extendedTerm = sumN - sumN*log(sumN); // so resulting sum is just sumN - sum[ N*logN - N*log(binW) ]; // which is the same as the binned case without the LnGamma part and with the extra sum[N*log(binW)] part",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:22,Availability,alive,alive,22,"// done to keep globs alive while NLL might still be alive.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:53,Availability,alive,alive,53,"// done to keep globs alive while NLL might still be alive.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:7,Performance,load,loaded,7,"// not loaded yet so nothing to do",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:30,Availability,alive,alive,30,"// do this just to keep fData alive while killing previous NLLVar; // (can't kill data while NLL constructed with it)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:93,Testability,test,test,93,"// replace just in mainTerm ... note to self: why not just replace in all like above? should test!",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:30,Availability,alive,alive,30,"// do this just to keep fData alive while killing previous NLLVar; // (can't kill data while NLL constructed with it)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:65,Performance,optimiz,optimization,65,"// have to reinitialize if const par values have changed - const optimization forces this; // TODO: currently changes to globs also triggers this since the vars includes globs (vars are the non-obs pars); // std::cout << ""Reinitializing because of change of const parameters:"" << f->contentsString() << std::endl;",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:294,Deployability,update,update,294,"// note ... it may be sufficient here to do:; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track nll.constOptimizeTestStatistic(RooAbsArg::ValueChange,; // constOptimize>1); // update the cache values -- is this needed??; // this forces the optimization to be redone; // for now leave as a reinitialize though, until had a chance to test this properly",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:91,Modifiability,Config,ConfigChange,91,"// note ... it may be sufficient here to do:; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track nll.constOptimizeTestStatistic(RooAbsArg::ValueChange,; // constOptimize>1); // update the cache values -- is this needed??; // this forces the optimization to be redone; // for now leave as a reinitialize though, until had a chance to test this properly",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:198,Performance,cache,cache-and-track,198,"// note ... it may be sufficient here to do:; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track nll.constOptimizeTestStatistic(RooAbsArg::ValueChange,; // constOptimize>1); // update the cache values -- is this needed??; // this forces the optimization to be redone; // for now leave as a reinitialize though, until had a chance to test this properly",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:305,Performance,cache,cache,305,"// note ... it may be sufficient here to do:; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track nll.constOptimizeTestStatistic(RooAbsArg::ValueChange,; // constOptimize>1); // update the cache values -- is this needed??; // this forces the optimization to be redone; // for now leave as a reinitialize though, until had a chance to test this properly",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:358,Performance,optimiz,optimization,358,"// note ... it may be sufficient here to do:; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track nll.constOptimizeTestStatistic(RooAbsArg::ValueChange,; // constOptimize>1); // update the cache values -- is this needed??; // this forces the optimization to be redone; // for now leave as a reinitialize though, until had a chance to test this properly",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:450,Testability,test,test,450,"// note ... it may be sufficient here to do:; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track nll.constOptimizeTestStatistic(RooAbsArg::ValueChange,; // constOptimize>1); // update the cache values -- is this needed??; // this forces the optimization to be redone; // for now leave as a reinitialize though, until had a chance to test this properly",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:23,Testability,log,log,23,"// returns Nexp - Nobs*log(Nexp)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:138,Testability,log,log,138,"// this is only relevant if BinnedLikelihood active; // = sum[ N_i! ] since LnGamma(N_i+1) ~= N_i!; // need to also subtract off sum[ N_i*log(width_i) ] in order to have formula: binnedLL = unbinnedLL + binnedDataTerm; // note this is 0 if all the bin widths are 1",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:3,Performance,load,load,3,"// load the pllType",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:3,Performance,load,load,3,"// load the toys",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:3,Performance,load,load,3,"// load coords from the nullDist globs list",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:29,Availability,avail,available,29,"// use pre-retrieved fits if available",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:40,Performance,load,load,40,"// can try to do a readOnly in case can load from cache",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:50,Performance,cache,cache,50,"// can try to do a readOnly in case can load from cache",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:17,Performance,cache,cache,17,"// retrieve from cache worked, no need to generate dataset",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:45,Performance,cache,cache,45,"// rename nll so if caching fit results will cache into subdir",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:40,Performance,load,load,40,"// can try to do a readOnly in case can load from cache",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:50,Performance,cache,cache,50,"// can try to do a readOnly in case can load from cache",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:17,Performance,cache,cache,17,"// retrieve from cache worked, no need to generate dataset",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:40,Performance,load,load,40,"// can try to do a readOnly in case can load from cache",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:50,Performance,cache,cache,50,"// can try to do a readOnly in case can load from cache",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:17,Performance,cache,cache,17,"// retrieve from cache worked, no need to generate dataset",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:40,Performance,load,load,40,"// can try to do a readOnly in case can load from cache",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:50,Performance,cache,cache,50,"// can try to do a readOnly in case can load from cache",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:17,Performance,cache,cache,17,"// retrieve from cache worked, no need to generate dataset",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:18,Availability,error,error,18,"// symmetrize the error",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:47,Deployability,update,update,47,"// decide which type we'd want to generate and update alt flag",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:11,Availability,error,error,11,"// stop if error gets too small",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:648,Availability,error,error,648,"//; // auto condition = [&](bool doingAlt=false) { // returns true if need more toys; // if(std::isnan(target)) return false;; // auto pval = pCLs_toys(target_nSigma);; // if (!std::isnan(pval.first)) {; // double diff = std::abs(pval.first - target);; // double err = pval.second;; // if (err > 1e-4 && diff <= 2 * pval.second) {; // return true; // more toys needed; // // decide which type we'd want to generate; // // if it matches the type we are generating, then return true; // auto pNull = pNull_toys(target_nSigma);; // auto pAlt = pAlt_toys(target_nSigma);; // if ((doingAlt ? pAlt.second : pNull.second) < 1e-4) return false; // stop if error gets too small; // bool doAlt = (pAlt.second * pNull.first > pNull.second * pAlt.first);; // return doAlt == doingAlt;; // }; // }; // return false;; // };; // while(condition()) {; // bool doAlt = false;; // double relErrThreshold = 2;; // if(nullToys.size()<size_t(nToys)) {; // addToys(false,nToys);continue;; // } else if(altToys.size()<size_t(nToys)) {; // addToys(true,nToys);continue;; // } else {; // // see which have bigger errors ... generate more of that ...; // auto pNull = pNull_toys(target_nSigma);; // auto pAlt = pAlt_toys(target_nSigma);; // doAlt = (pAlt.second*pNull.first > pNull.second*pAlt.first);; // if( (doAlt ? pAlt.second : pNull.second) < 1e-4 ) break; // stop if error gets too small; // auto pCLs = pCLs_toys(target_nSigma);; // relErrThreshold = (doAlt) ? (pNull.second/pNull.first) : (pAlt.second/pAlt.first);; // relErrThreshold = std::min(2.,std::abs(relErrThreshold));; // std::cout << ""Current pCLs = "" << pCLs.first << "" +/- "" << pCLs.second; // << "" (pNull = "" << pNull.first << "" +/- "" << pNull.second; // << "" , pAlt = "" << pAlt.first << "" +/- "" << pAlt.second << "") ... generating more "" << (doAlt ?; // ""alt"" : ""null"") << "" toys "" << relErrThreshold << std::endl;; //; // }; // if( addToys(doAlt, nToys/*, seed, -1, target_nSigma,relErrThreshold*/) == 0) {; // break; // no toys got added, so stop loopi",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:1088,Availability,error,errors,1088,"ition = [&](bool doingAlt=false) { // returns true if need more toys; // if(std::isnan(target)) return false;; // auto pval = pCLs_toys(target_nSigma);; // if (!std::isnan(pval.first)) {; // double diff = std::abs(pval.first - target);; // double err = pval.second;; // if (err > 1e-4 && diff <= 2 * pval.second) {; // return true; // more toys needed; // // decide which type we'd want to generate; // // if it matches the type we are generating, then return true; // auto pNull = pNull_toys(target_nSigma);; // auto pAlt = pAlt_toys(target_nSigma);; // if ((doingAlt ? pAlt.second : pNull.second) < 1e-4) return false; // stop if error gets too small; // bool doAlt = (pAlt.second * pNull.first > pNull.second * pAlt.first);; // return doAlt == doingAlt;; // }; // }; // return false;; // };; // while(condition()) {; // bool doAlt = false;; // double relErrThreshold = 2;; // if(nullToys.size()<size_t(nToys)) {; // addToys(false,nToys);continue;; // } else if(altToys.size()<size_t(nToys)) {; // addToys(true,nToys);continue;; // } else {; // // see which have bigger errors ... generate more of that ...; // auto pNull = pNull_toys(target_nSigma);; // auto pAlt = pAlt_toys(target_nSigma);; // doAlt = (pAlt.second*pNull.first > pNull.second*pAlt.first);; // if( (doAlt ? pAlt.second : pNull.second) < 1e-4 ) break; // stop if error gets too small; // auto pCLs = pCLs_toys(target_nSigma);; // relErrThreshold = (doAlt) ? (pNull.second/pNull.first) : (pAlt.second/pAlt.first);; // relErrThreshold = std::min(2.,std::abs(relErrThreshold));; // std::cout << ""Current pCLs = "" << pCLs.first << "" +/- "" << pCLs.second; // << "" (pNull = "" << pNull.first << "" +/- "" << pNull.second; // << "" , pAlt = "" << pAlt.first << "" +/- "" << pAlt.second << "") ... generating more "" << (doAlt ?; // ""alt"" : ""null"") << "" toys "" << relErrThreshold << std::endl;; //; // }; // if( addToys(doAlt, nToys/*, seed, -1, target_nSigma,relErrThreshold*/) == 0) {; // break; // no toys got added, so stop looping; // }; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:1348,Availability,error,error,1348,"ition = [&](bool doingAlt=false) { // returns true if need more toys; // if(std::isnan(target)) return false;; // auto pval = pCLs_toys(target_nSigma);; // if (!std::isnan(pval.first)) {; // double diff = std::abs(pval.first - target);; // double err = pval.second;; // if (err > 1e-4 && diff <= 2 * pval.second) {; // return true; // more toys needed; // // decide which type we'd want to generate; // // if it matches the type we are generating, then return true; // auto pNull = pNull_toys(target_nSigma);; // auto pAlt = pAlt_toys(target_nSigma);; // if ((doingAlt ? pAlt.second : pNull.second) < 1e-4) return false; // stop if error gets too small; // bool doAlt = (pAlt.second * pNull.first > pNull.second * pAlt.first);; // return doAlt == doingAlt;; // }; // }; // return false;; // };; // while(condition()) {; // bool doAlt = false;; // double relErrThreshold = 2;; // if(nullToys.size()<size_t(nToys)) {; // addToys(false,nToys);continue;; // } else if(altToys.size()<size_t(nToys)) {; // addToys(true,nToys);continue;; // } else {; // // see which have bigger errors ... generate more of that ...; // auto pNull = pNull_toys(target_nSigma);; // auto pAlt = pAlt_toys(target_nSigma);; // doAlt = (pAlt.second*pNull.first > pNull.second*pAlt.first);; // if( (doAlt ? pAlt.second : pNull.second) < 1e-4 ) break; // stop if error gets too small; // auto pCLs = pCLs_toys(target_nSigma);; // relErrThreshold = (doAlt) ? (pNull.second/pNull.first) : (pAlt.second/pAlt.first);; // relErrThreshold = std::min(2.,std::abs(relErrThreshold));; // std::cout << ""Current pCLs = "" << pCLs.first << "" +/- "" << pCLs.second; // << "" (pNull = "" << pNull.first << "" +/- "" << pNull.second; // << "" , pAlt = "" << pAlt.first << "" +/- "" << pAlt.second << "") ... generating more "" << (doAlt ?; // ""alt"" : ""null"") << "" toys "" << relErrThreshold << std::endl;; //; // }; // if( addToys(doAlt, nToys/*, seed, -1, target_nSigma,relErrThreshold*/) == 0) {; // break; // no toys got added, so stop looping; // }; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:18,Availability,down,down,18,"// these are used down below to add obs p-values to legend, but up here because can trigger fits that create asimov",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:16,Availability,alive,alive,16,"// need to keep alive as alt_poi owns its contents",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:43,Testability,Test,TestStatistic,43,"// catches case where pyROOT has converted TestStatistic enum to int",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:22,Availability,error,error,22,"// overrides binomial error used in SamplingDistribution::IntegralAndError",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:22,Availability,error,error,22,"// overrides binomial error used in SamplingDistribution::IntegralAndError",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:22,Availability,error,error,22,"// overrides binomial error used in SamplingDistribution::IntegralAndError",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:22,Availability,error,error,22,"// overrides binomial error used in SamplingDistribution::IntegralAndError",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNLLVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:392,Integrability,wrap,wrap,392,"/*; * Project: xRooFit; * Author:; * Will Buttinger, RAL 2022; *; * Copyright (c) 2022, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class ROOT::Experimental::XRooFit::xRooNode; \ingroup xroofit. The xRooNode class is designed to wrap over a TObject and provide functionality to aid with interacting with that; object, particularly in the case where the object is a RooFit class instance. It is a smart pointer to the object, so; you have access to all the methods of the object too. xRooNode is designed to work in both python and C++, but examples below are given in python because that is imagined; be the most common way to use the xRooFit API. -# [Exploring workspaces](\ref exploring-workspaces). \anchor exploring-workspaces; ## Exploring workspaces. An existing workspace file (either a ROOT file containing a RooWorkspace, or a json HS3 file) can be opened using; xRooNode like this:. \code{.py}; from ROOT.Experimental import XRooFit; w = XRooFit.xRooNode(""workspace.root"") # or can use workspace.json for HS3; \endcode. You can explore the content of the workspace somewhat like you would a file system: each node contains sub-nodes,; which you can interact with to explore ever deeper. The most relevant methods for navigating the workspace and; exploring the content are:. */",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:601,Security,access,access,601,"/*; * Project: xRooFit; * Author:; * Will Buttinger, RAL 2022; *; * Copyright (c) 2022, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class ROOT::Experimental::XRooFit::xRooNode; \ingroup xroofit. The xRooNode class is designed to wrap over a TObject and provide functionality to aid with interacting with that; object, particularly in the case where the object is a RooFit class instance. It is a smart pointer to the object, so; you have access to all the methods of the object too. xRooNode is designed to work in both python and C++, but examples below are given in python because that is imagined; be the most common way to use the xRooFit API. -# [Exploring workspaces](\ref exploring-workspaces). \anchor exploring-workspaces; ## Exploring workspaces. An existing workspace file (either a ROOT file containing a RooWorkspace, or a json HS3 file) can be opened using; xRooNode like this:. \code{.py}; from ROOT.Experimental import XRooFit; w = XRooFit.xRooNode(""workspace.root"") # or can use workspace.json for HS3; \endcode. You can explore the content of the workspace somewhat like you would a file system: each node contains sub-nodes,; which you can interact with to explore ever deeper. The most relevant methods for navigating the workspace and; exploring the content are:. */",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:158,Integrability,wrap,wrap,158,"////////////////////////////////////////////////////////////////////////////////; /// Create new object of type classname, with given name and title, and own-wrap it; /// i.e. the xRooNode will delete the object when the node (and any that reference it) is destroyed; ///; /// \param classname : the type of the object to create; /// \param name : the name to give the object; /// \param title : the title to give the object",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:161,Performance,load,loaded,161,"// acquire<TFile>(name); // acquire file to ensure stays open while we have the workspace; // actually it appears we don't need to keep the file open once we've loaded the workspace, but should be; // no harm doing so; // otherwise the workspace doesn't saveas",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:56,Usability,clear,cleared,56,"// memory leak in workspace, some RooLinkedLists aren't cleared, fixed in ROOT 6.28",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:13,Availability,alive,alive,13,"// keep file alive - seems necessary to save workspace again in some cases",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:13,Integrability,message,message,13,"// stop info message every time; // check if any of the open files have version numbers greater than our major version; // may not read correctly",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:36,Availability,error,errors,36,"// now check if any pars don't have errors defined (not same as error=0) ... if so, use the first pdf (if there is; // one) to try setting values from",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:64,Availability,error,error,64,"// now check if any pars don't have errors defined (not same as error=0) ... if so, use the first pdf (if there is; // one) to try setting values from",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:9,Availability,error,errors,9,"// infer errors on all floating non-poi parameters",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:28,Modifiability,Inherit,InheritsFrom,28,"/*[](const TObject& c) {; c.InheritsFrom(""RooAbsArg"");; if (s) {; return (s->getStringAttribute(""alias"")) ? s->getStringAttribute(""alias"") : c.GetName();; }; return c.GetName();; }(comp)*/",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:10,Testability,Test,TestBit,10,"// if (o->TestBit(1<<20)==val) return; // do nothing",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Deployability,update,update,3,"// update check marks on siblings",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:38,Deployability,update,update,38,"// no need to rebrowse if closing; // update check marks on any child items",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:60,Deployability,update,update,60,"// decided not to show const values until figure out how to update if value changes; /*if (TString(_type)==""Const"") _name += TString::Format("" [%s=%g]"",_type,v->get<RooConstVar>()->getVal());; else*/",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:27,Deployability,update,update,27,"// check if num bins needs update or not",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:23,Integrability,depend,dependent,23,"// need to choose from dependent fundamentals, in following order:; // parentX (if not a glob), robs, globs, vars, args",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:28,Usability,clear,clear,28,"// doesn't have binning, so clear binning attribute; // this can happen after Combine of models because binning don't get combined yet (should fix this)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:34,Safety,avoid,avoid,34,"// add this binning to the var to avoid recalling ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:16,Performance,load,load,16,"// TODO have to load current state of bin labels if was a category (sadly not a virtual method)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:9,Modifiability,Inherit,InheritsFrom,9,"// if(o->InheritsFrom(""RooProduct"")) return ""TH1D"";",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:160,Modifiability,Inherit,InheritsFrom,160,"// following is commented out while still considering, but idea is to include category in coords; /*if (auto s = _p->get<RooSimultaneous>(); s && s->indexCat().InheritsFrom(""RooCategory"") &&; !out.find(s->indexCat().GetName())) { auto cat = const_cast<RooCategory*>(dynamic_cast<const; RooCategory*>(&s->indexCat()));; // check if we have a pdf for every category ... if not then add to cut; cat->clearRange(""coordRange"",true);; bool hasMissing = false;; std::string includedStates;; for (auto state : *cat) {; if (!s->getPdf(state.first.c_str())) {; hasMissing = true;; } else {; if (!includedStates.empty()) {; includedStates += "","";; }; includedStates += state.first;; }; }; if (hasMissing) {; if(includedStates.find("","") != std::string::npos) {; cat->addToRange(""coordRange"",includedStates.c_str());; } else {; cat->setLabel(includedStates);; }; out.emplace_back(std::make_shared<xRooNode>(cat->GetName(),_p->getObject<RooAbsArg>(cat->GetName()),_p));; }; } else*/",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:397,Usability,clear,clearRange,397,"// following is commented out while still considering, but idea is to include category in coords; /*if (auto s = _p->get<RooSimultaneous>(); s && s->indexCat().InheritsFrom(""RooCategory"") &&; !out.find(s->indexCat().GetName())) { auto cat = const_cast<RooCategory*>(dynamic_cast<const; RooCategory*>(&s->indexCat()));; // check if we have a pdf for every category ... if not then add to cut; cat->clearRange(""coordRange"",true);; bool hasMissing = false;; std::string includedStates;; for (auto state : *cat) {; if (!s->getPdf(state.first.c_str())) {; hasMissing = true;; } else {; if (!includedStates.empty()) {; includedStates += "","";; }; includedStates += state.first;; }; }; if (hasMissing) {; if(includedStates.find("","") != std::string::npos) {; cat->addToRange(""coordRange"",includedStates.c_str());; } else {; cat->setLabel(includedStates);; }; out.emplace_back(std::make_shared<xRooNode>(cat->GetName(),_p->getObject<RooAbsArg>(cat->GetName()),_p));; }; } else*/",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:50,Modifiability,Extend,Extend,50,"// adding a channel (should adding a 'bin' be an 'Extend' operation?)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:25,Availability,alive,alive,25,"// may own globs so keep alive",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:79,Modifiability,extend,extend,79,"// check if ws already has a dataset with this name, if it does we may need to extend columns",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:31,Modifiability,extend,extended,31,"// don't add a coef if in 'all-extended' mode and this pdf is extendable",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:62,Modifiability,extend,extendable,62,"// don't add a coef if in 'all-extended' mode and this pdf is extendable",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:208,Availability,down,down,208,"// if extended, use an extended binding as the coef; // otherwise e.g. if adding a RooRealSumPdf the stacked histograms will be above the; // actual pdf histogram because the pdf histogram is just normalized down",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:6,Modifiability,extend,extended,6,"// if extended, use an extended binding as the coef; // otherwise e.g. if adding a RooRealSumPdf the stacked histograms will be above the; // actual pdf histogram because the pdf histogram is just normalized down",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:23,Modifiability,extend,extended,23,"// if extended, use an extended binding as the coef; // otherwise e.g. if adding a RooRealSumPdf the stacked histograms will be above the; // actual pdf histogram because the pdf histogram is just normalized down",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:10,Modifiability,Extend,ExtendedBinding,10,"// FIXME: ExtendedBinding needs the obs list passing to it ... should be fixed in RooFit; // until then, this will return ""1"" and so the pdf's histograms wont be normalized properly in relation; // to stacks of its comps",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:120,Modifiability,extend,extended,120,"// adding a pdf to a RooRealSumPdf will replace it with a RooAddPdf and put the RooRealSumPdf inside that; // if pdf is extended will use in the ""no coefficients"" state, where the expectedEvents are taking from; // the pdf integrals",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:17,Modifiability,extend,extended,17,"// require to be extended to be in coefficient-free mode ...; // otherwise would lose the integral of the sumPdf (can't think of way to have a coef be the integral)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:185,Deployability,integrat,integrate,185,"// todo: if adding a pdf, should actually replace RooRealSumPdf with a RooAddPdf and put; // the sumPdf and *this* pdf inside that pdf; // only exception is the binSamplingPdf below to integrate unbinned functions across bins",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:185,Integrability,integrat,integrate,185,"// todo: if adding a pdf, should actually replace RooRealSumPdf with a RooAddPdf and put; // the sumPdf and *this* pdf inside that pdf; // only exception is the binSamplingPdf below to integrate unbinned functions across bins",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Modifiability,inherit,inherit,3,"// inherit binning if we dont have one yet",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:33,Deployability,update,update,33,"// clear children for reload and update shared axis",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Usability,clear,clear,3,"// clear children for reload and update shared axis",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Usability,clear,clear,3,"// clear our x-axis to re-evaluate",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:30,Integrability,depend,dependent,30,"// interpret 'adding' here as dependent on the object type ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:390,Deployability,update,update,390,"// Nov 2022 - removed ability to add placeholders ... could bring back if rediscover need for them; // if (!child.get() && child.empty() && strlen(child.GetName())) {; // // can add a 'placeholder' node, note it will be deleted at the next browse; // xRooNode out(child.GetName(),nullptr,*this);; // out.SetTitle(child.GetTitle());; // emplace_back(std::make_shared<xRooNode>(out));; // // update the parent in the out node so that it's copy of the parent knows it has itself in it; // // actually maybe not want this :-/; // //out.fParent = std::make_shared<Node2>(*this);; // for(auto o : *gROOT->GetListOfBrowsers()) {; // if(auto b = dynamic_cast<TBrowser*>(o); b && b->GetBrowserImp()){; // if(auto _b = dynamic_cast<TGFileBrowser*>(; // dynamic_cast<TRootBrowser*>(b->GetBrowserImp())->fActBrowser ); _b) {; // auto _root = _b->fRootDir;; // if (!_root) _root = _b->fListTree->GetFirstItem();; // if (auto item = _b->fListTree->FindItemByObj(_root,this); item) {; // _b->fListTree->AddItem(item,back()->GetName(),back().get());; // }; // }; // }; // }; // return out;; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:97,Usability,Clear,ClearColor,97,"// if(auto item = GetTreeItem(nullptr); item) {; // if(set) item->SetColor(kRed);; // else item->ClearColor();; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:60,Deployability,update,update,60,"// decided not to show const values until figure out how to update if value changes; /*if (TString(_type)==""Const"") _name += TString::Format(""; [%s=%g]"",_type,v->get<RooConstVar>()->getVal()); else*/",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:60,Deployability,update,update,60,"// decided not to show const values until figure out how to update if value changes; /*if (TString(_type)==""Const"") _name += TString::Format(""; [%s=%g]"",_type,v->get<RooConstVar>()->getVal()); else*/",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:47,Integrability,inject,inject,47,"// no captureStr has the string to display; // inject line breaks to avoid msgbox being too wide",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:69,Safety,avoid,avoid,69,"// no captureStr has the string to display; // inject line breaks to avoid msgbox being too wide",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:47,Security,inject,inject,47,"// no captureStr has the string to display; // inject line breaks to avoid msgbox being too wide",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:66,Availability,error,error,66,"// extract parameters from the variable; // use current value and error on v as constraint",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:31,Modifiability,variab,variable,31,"// extract parameters from the variable; // use current value and error on v as constraint",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:25,Availability,error,error,25,"// use current value and error on v as constraint",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:129,Safety,avoid,avoid,129,"// then scale the relevant bin ... if the relevant bin is a ""1"" then just drop in our factor (inside a; // RooProduct though, to avoid it getting modified by subsequent multiplies)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:6,Safety,avoid,avoid,6,"// to avoid infinite loop",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:293,Safety,avoid,avoids,293,"// } else {else if(_bin->get<RooProduct>()) {; // // multiply the element which will just add it as a factor in the rooproduct; // return _bin->Multiply(child,opt);; // } else {; // // not a rooproduct in this bin yet ... so need to replace with a rooproduct and; // multiply that; // // this avoids the undesired behaviour of shared binFactors getting all impacted by; // mulitplies RooArgList all; auto new_p =; // acquireNew<RooProduct>(TString::Format(""%s_bin%d"",binFactors->get()->GetName(),fBinNumber),TString::Format(""binFactors; // of bin %d"",fBinNumber),RooArgList(*_bin->get<RooAbsArg>()));; // new_p->setStringAttribute(""alias"",""""); // for (int i = 0; i < phf->_paramSet.size(); i++) {; // if (i != fBinNumber - 1) all.add(*phf->_paramSet.at(i));; // else all.add(*new_p);; // }; // phf->_paramSet.removeAll();; // phf->_paramSet.add(all);; // // now multiply that bin having converted it to RooProduct; // return binFactors->bins().at(fBinNumber - 1)->Multiply(child,opt);; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:83,Testability,log,logic,83,"// have to protect bin case where get() is null (could change but then must change logic above too)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:26,Integrability,depend,dependencies,26,"// need to get way to get dependencies .. can't pass all as causes circular dependencies issues.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:76,Integrability,depend,dependencies,76,"// need to get way to get dependencies .. can't pass all as causes circular dependencies issues.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:85,Availability,error,errors,85,"// child may be a histfunc or a rooproduct of a histfunc and a paramhist if has stat errors",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:63,Integrability,rout,route,63,"// if multiple clients, see if only one client is in parentage route; // if so, then assume thats the only client we should replace in",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:63,Integrability,rout,route,63,"// if multiple clients, see if only one client is in parentage route; // if so, then assume thats the only client we should replace in",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:33,Deployability,update,update,33,"// clear children for reload and update shared axis",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Usability,clear,clear,3,"// clear children for reload and update shared axis",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Integrability,inject,inject,3,"// inject a FlexibleInterpVar ...; // get the list of clients BEFORE creating the new interpolation ... seems list of clients is inaccurate after",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:12,Modifiability,Flexible,FlexibleInterpVar,12,"// inject a FlexibleInterpVar ...; // get the list of clients BEFORE creating the new interpolation ... seems list of clients is inaccurate after",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Security,inject,inject,3,"// inject a FlexibleInterpVar ...; // get the list of clients BEFORE creating the new interpolation ... seems list of clients is inaccurate after",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:63,Integrability,rout,route,63,"// if multiple clients, see if only one client is in parentage route; // if so, then assume thats the only client we should replace in",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Integrability,inject,inject,3,"// inject an interpolation node; // get the list of clients BEFORE creating the new interpolation ... seems list of clients is inaccurate after",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Security,inject,inject,3,"// inject an interpolation node; // get the list of clients BEFORE creating the new interpolation ... seems list of clients is inaccurate after",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:63,Integrability,rout,route,63,"// if multiple clients, see if only one client is in parentage route; // if so, then assume thats the only client we should replace in",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:67,Availability,failure,failure,67,"/*. if (fParent && !fParent->mk()) {; throw std::runtime_error(""mk failure"");; }. if (fComp) return *this;. if (o.InheritsFrom(""RooAbsArg"")) {; fComp = acquire(std::shared_ptr<TObject>(const_cast<TObject*>(&o),[](TObject* o){}));; std::dynamic_pointer_cast<RooAbsArg>(fComp)->setStringAttribute(""alias"",GetName());; }. if (fComp && fParent) {; fParent->incorporate(fComp);; }. return *this;; */",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:114,Modifiability,Inherit,InheritsFrom,114,"/*. if (fParent && !fParent->mk()) {; throw std::runtime_error(""mk failure"");; }. if (fComp) return *this;. if (o.InheritsFrom(""RooAbsArg"")) {; fComp = acquire(std::shared_ptr<TObject>(const_cast<TObject*>(&o),[](TObject* o){}));; std::dynamic_pointer_cast<RooAbsArg>(fComp)->setStringAttribute(""alias"",GetName());; }. if (fComp && fParent) {; fParent->incorporate(fComp);; }. return *this;; */",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:79,Availability,alive,alive,79,"// note: if we ever changed coords to return clones, would need to keep coords alive",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:79,Availability,alive,alive,79,"// note: if we ever changed coords to return clones, would need to keep coords alive",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:17,Safety,avoid,avoid,17,"// doing this to avoid complaints about unused vars",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:54,Energy Efficiency,reduce,reduce,54,"// can skip over the bin we will be setting to save a reduce step below",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:86,Integrability,inject,inject,86,"// need to create the variation : note - if no variations existed up to now this will inject a new node; // so we should redirect ourself to the new node; // TODO: Do we need to redirect parents?",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:86,Security,inject,inject,86,"// need to create the variation : note - if no variations existed up to now this will inject a new node; // so we should redirect ourself to the new node; // TODO: Do we need to redirect parents?",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:18,Modifiability,Flexible,FlexibleInterpVar,18,"// if parent is a FlexibleInterpVar, change the value in that .",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:23,Deployability,update,update,23,"// broken symmetry, so update flags ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:85,Integrability,inject,inject,85,"// need to swap out var for newVar; // replace ith element in list with new func, or inject into RooProduct",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:85,Security,inject,inject,85,"// need to swap out var for newVar; // replace ith element in list with new func, or inject into RooProduct",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:9,Deployability,Update,Update,9,"// TODO: Update any globs snapshots that are designed to match the nominal",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:36,Availability,error,error,36,"// set const if sumw2 is 0 (i.e. no error)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:42,Integrability,depend,depending,42,"// reached a workspace, check for any pdf depending on parameter that isnt the ignore",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:45,Performance,load,loaded,45,"// paramhistfunc requires the binnings to be loaded as default at construction time; // so load binning temporarily",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:91,Performance,load,load,91,"// paramhistfunc requires the binnings to be loaded as default at construction time; // so load binning temporarily",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:15,Deployability,upgrade,upgrade,15,"// in case got upgrade to a RooProduct",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:15,Availability,alive,alive,15,"// use to keep alive for access from GetStyle below, in case getObject has decided to; // return the owning ptr (for some reason)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:25,Security,access,access,25,"// use to keep alive for access from GetStyle below, in case getObject has decided to; // return the owning ptr (for some reason)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Performance,load,loaded,3,"// loaded style (from workspace?) so put in list and use that",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:31,Performance,cache,caches,31,"// sanitizeWS(); // clears the caches that might exist up to now, as well interfere with getParameters calls",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Security,sanitiz,sanitizeWS,3,"// sanitizeWS(); // clears the caches that might exist up to now, as well interfere with getParameters calls",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:20,Usability,clear,clears,20,"// sanitizeWS(); // clears the caches that might exist up to now, as well interfere with getParameters calls",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:15,Integrability,depend,dependents,15,"// if have any dependents and name isn't one of them then stop",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:99,Integrability,depend,depend,99,"/*if(!_deps.empty() && !_deps.find(name)) {; throw std::runtime_error(TString::Format(""%s Does not depend on %s"",GetName(),name));; }*/; // object will need to exist",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:14,Modifiability,variab,variable,14,"// creating a variable for a pdf we will assume it should be an observable",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:168,Deployability,update,updateable,168,"// if (get<RooAbsPdf>() && ((fParent && fParent->get<RooWorkspace>()) || !fParent)) {; // // top-level pdfs will also list the "".vars"" property for -- should make this updateable; // //if (auto x = find(""!.vars""); !x) { // this is slower because it triggers a browse of !.vars; // if(!contains(""!.vars"")) {; // emplace_back(std::make_shared<Node2>(""!.vars"",nullptr,*this));; // } /*else {; // x->fTimes++;; // }*/; // }; // go through components factors and variations, adding all as children if required",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:50,Availability,alive,alive,50,"// ensure all hypoTestResults are flagged as keep-alive",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:12,Testability,test,tests,12,"// xRooNode tests;; // for(int i=0;i<ir->ArraySize();i++) {; // tests.push_back(std::make_shared<xRooNode>(TString::Format(""%g"",ir->GetXValue(i)),*ir->GetResult(i),*this));; // }; // appendChildren(tests);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:64,Testability,test,tests,64,"// xRooNode tests;; // for(int i=0;i<ir->ArraySize();i++) {; // tests.push_back(std::make_shared<xRooNode>(TString::Format(""%g"",ir->GetXValue(i)),*ir->GetResult(i),*this));; // }; // appendChildren(tests);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:198,Testability,test,tests,198,"// xRooNode tests;; // for(int i=0;i<ir->ArraySize();i++) {; // tests.push_back(std::make_shared<xRooNode>(TString::Format(""%g"",ir->GetXValue(i)),*ir->GetResult(i),*this));; // }; // appendChildren(tests);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:11,Availability,alive,alive,11,"// keep it alive",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Usability,clear,clear,3,"// clear anything that has fTimes = 0 still",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:655,Usability,Clear,ClearViewPort,655,"// problem: if obj is living in a collapsed node it wont actually get deleted; /*auto _b = dynamic_cast<TGFileBrowser*>( dynamic_cast<TRootBrowser*>(b->GetBrowserImp())->fActBrowser );; if (_b) {; std::cout << _b->fRootDir->GetText() << std::endl;; if (auto item = _b->fListTree->FindItemByObj(_b->fRootDir,it->get()); item) {; std::cout << ""Found obj: "" << item << "" "" << item->GetText() << std::endl;; _b->fListTree->RecursiveDeleteItem(_b->fRootDir,it->get());; }. //b->RecursiveRemove(it->get());; if (auto item = _b->fListTree->FindItemByObj(_b->fRootDir,it->get()); item) {; std::cout << ""Still Found obj: "" << item << std::endl;; }; _b->fListTree->ClearViewPort();. }*/",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:94,Modifiability,variab,variables,94,"////////////////////////////////////////////////////////////////////////////////; /// List of variables (observables and parameters) of this node",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:218,Energy Efficiency,reduce,reduced,218,"// also need to get all constPars so use leafNodeServerList .. will include self if is fundamental, which is what; // we want; // ensure all globs appear after robs, as we rely on this ordering for picking ""x"" var in ""reduced"" method",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:210,Integrability,wrap,wrapped,210,"// for a while, this node's parent pointed to something of type Node2!!; // how to fix??? - I fxied it with a new constructor to avoid the shared_ptr<Node2> calling the const; // Node2& constructor via getting wrapped in a Node2(shared_ptr<TObject>) call; // out.back()->fParent = _pdf;; // std::cout << "" type2 = "" << out.back()->fParent->get()->ClassName() << std::endl;",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:129,Safety,avoid,avoid,129,"// for a while, this node's parent pointed to something of type Node2!!; // how to fix??? - I fxied it with a new constructor to avoid the shared_ptr<Node2> calling the const; // Node2& constructor via getting wrapped in a Node2(shared_ptr<TObject>) call; // out.back()->fParent = _pdf;; // std::cout << "" type2 = "" << out.back()->fParent->get()->ClassName() << std::endl;",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:9,Performance,CACHE,CACHE,9,"// skip 'CACHE' sets because they are auto-removed when sanitizing workspaces, which will invalidate these; // children",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:56,Security,sanitiz,sanitizing,56,"// skip 'CACHE' sets because they are auto-removed when sanitizing workspaces, which will invalidate these; // children",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:35,Modifiability,extend,extended,35,"// this can happen if all pdfs are extended then the coef is effectively the; // expected number of events; // TODO: test behaviour of xRooNode under this scenario (are histograms correct?)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:117,Testability,test,test,117,"// this can happen if all pdfs are extended then the coef is effectively the; // expected number of events; // TODO: test behaviour of xRooNode under this scenario (are histograms correct?)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:25,Availability,alive,alive,25,"// added to keep the sum alive! with the node",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:16,Availability,alive,alive,16,"// need to keep alive as may contain owning globs",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:13,Availability,alive,alive,13,"// must keep alive in case is owning the globs",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:79,Availability,alive,alive,79,"// note: if we ever changed coords to return clones, would need to keep coords alive",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:79,Availability,alive,alive,79,"// note: if we ever changed coords to return clones, would need to keep coords alive",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:180,Energy Efficiency,reduce,reduced,180,"// doing this to avoid complaints about unused vars; // TODO: Could consider using a 'filter' node (see filter() method) applied to the dataset instead; // of creating and using a reduced dataset here",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:17,Safety,avoid,avoid,17,"// doing this to avoid complaints about unused vars; // TODO: Could consider using a 'filter' node (see filter() method) applied to the dataset instead; // of creating and using a reduced dataset here",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:117,Security,hash,hashing,117,"/*else if(auto p = get<RooFitResult>(); p) {; // look for datasets in workspace that match the fit result name after hashing; for(auto& _d : xRooNode(*_ws,*this).datasets()) {; auto _hash = RooAbsTree::nameToHash(_d->get()->GetName());; if (TString::Format(""%d;%d"",_hash.first,_hash.second) == p->GetTitle()) {; out.emplace_back(std::make_shared<xRooNode>(_d->fComp, *this));; }; }; }*/",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:79,Availability,error,errors,79,"// update the x positions to the means for each bin and use poisson asymmetric errors for data ..",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Deployability,update,update,3,"// update the x positions to the means for each bin and use poisson asymmetric errors for data ..",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:5,Availability,error,error,5,"// x-error will be the (weighted) standard deviation of the x values ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:49,Availability,alive,alive,49,"// std::shared_ptr<TStyle> style; // use to keep alive for access from GetStyle below, in case getObject; // has decided to return the owning ptr (for some reason) std::string _title =; // strlen(dataGraph->GetTitle()) ? dataGraph->GetTitle() : GetName(); if (!gROOT->GetStyle(_title.c_str())); // {; // if ( (style = getObject<TStyle>(_title)) ) {; // // loaded style (from workspace?) so put in list and use that; // gROOT->GetListOfStyles()->Add(style.get());; // } else {; // // create new style - gets put in style list automatically so don't have to delete; // // acquire them so saved to workspaces for auto reload ...; // style = const_cast<xRooNode&>(*this).acquireNew<TStyle>(_title.c_str(),; // TString::Format(""Style for %s component"", _title.c_str()));; // (TAttLine &) (*style) = *dynamic_cast<TAttLine *>(dataGraph);; // (TAttFill &) (*style) = *dynamic_cast<TAttFill *>(dataGraph);; // (TAttMarker &) (*style) = *dynamic_cast<TAttMarker *>(dataGraph);; // gROOT->GetListOfStyles()->Add(style.get());; // }; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:356,Performance,load,loaded,356,"// std::shared_ptr<TStyle> style; // use to keep alive for access from GetStyle below, in case getObject; // has decided to return the owning ptr (for some reason) std::string _title =; // strlen(dataGraph->GetTitle()) ? dataGraph->GetTitle() : GetName(); if (!gROOT->GetStyle(_title.c_str())); // {; // if ( (style = getObject<TStyle>(_title)) ) {; // // loaded style (from workspace?) so put in list and use that; // gROOT->GetListOfStyles()->Add(style.get());; // } else {; // // create new style - gets put in style list automatically so don't have to delete; // // acquire them so saved to workspaces for auto reload ...; // style = const_cast<xRooNode&>(*this).acquireNew<TStyle>(_title.c_str(),; // TString::Format(""Style for %s component"", _title.c_str()));; // (TAttLine &) (*style) = *dynamic_cast<TAttLine *>(dataGraph);; // (TAttFill &) (*style) = *dynamic_cast<TAttFill *>(dataGraph);; // (TAttMarker &) (*style) = *dynamic_cast<TAttMarker *>(dataGraph);; // gROOT->GetListOfStyles()->Add(style.get());; // }; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:59,Security,access,access,59,"// std::shared_ptr<TStyle> style; // use to keep alive for access from GetStyle below, in case getObject; // has decided to return the owning ptr (for some reason) std::string _title =; // strlen(dataGraph->GetTitle()) ? dataGraph->GetTitle() : GetName(); if (!gROOT->GetStyle(_title.c_str())); // {; // if ( (style = getObject<TStyle>(_title)) ) {; // // loaded style (from workspace?) so put in list and use that; // gROOT->GetListOfStyles()->Add(style.get());; // } else {; // // create new style - gets put in style list automatically so don't have to delete; // // acquire them so saved to workspaces for auto reload ...; // style = const_cast<xRooNode&>(*this).acquireNew<TStyle>(_title.c_str(),; // TString::Format(""Style for %s component"", _title.c_str()));; // (TAttLine &) (*style) = *dynamic_cast<TAttLine *>(dataGraph);; // (TAttFill &) (*style) = *dynamic_cast<TAttFill *>(dataGraph);; // (TAttMarker &) (*style) = *dynamic_cast<TAttMarker *>(dataGraph);; // gROOT->GetListOfStyles()->Add(style.get());; // }; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:52,Availability,error,errors,52,"// build a fitResult using nominal values and infer errors from constraints; // that aren't the 'main' constraints; // Warning(""fitResult"",""Building prefitResult by examining pdf. Consider setting an explicit prefitResult; // (SetFitResult(fr)) where fr name is prefitResult"");; // ensure coefs are included if there are any",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:78,Availability,error,error,78,"// there will be 3 deps, one will be this par, the other two are the mean and error (or error^2 in case of; // poisson use the one that's a ConstVar as the error to break a tie ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:88,Availability,error,error,88,"// there will be 3 deps, one will be this par, the other two are the mean and error (or error^2 in case of; // poisson use the one that's a ConstVar as the error to break a tie ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:156,Availability,error,error,156,"// there will be 3 deps, one will be this par, the other two are the mean and error (or error^2 in case of; // poisson use the one that's a ConstVar as the error to break a tie ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:20,Availability,error,error,20,"// loading val into error already, so move it over",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Performance,load,loading,3,"// loading val into error already, so move it over",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:52,Availability,error,error,52,"// prefiterror will be tau ... need 1/sqrt(tau) for error",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:25,Availability,error,error,25,"// unconstrained, remove error",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:8,Availability,alive,alive,8,"// keep alive as may own glob",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:38,Availability,error,error,38,"// make the diagonals all the current error values",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:8,Availability,alive,alive,8,"// keep alive as may own glob",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:8,Availability,alive,alive,8,"// keep alive as may own glob",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:9,Usability,clear,clear,9,"// todo: clear the range attribute on all servers; // could make this controlled by a flag but probably easiest to enforce so you must set range; // in children after if you wanted to override",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:52,Energy Efficiency,reduce,reduce,52,"// if simultaneous and any channels deselected then reduce and return",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:70,Energy Efficiency,reduce,reduced,70,"// dataset is not parented by this node ... meaning it may need to be reduced,; // do this via the datasets() method by attaching and detaching the dataset",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:8,Availability,alive,alive,8,"// keep alive because may own the globs",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:48,Safety,safe,safely,48,"// copy over opts ... need to clone each so can safely delete when _opts destroyed",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:26,Security,access,accessing,26,"// nullptr needed because accessing Clone via TObject base class puts; // """" instead, so doesnt copy names",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:200,Availability,alive,alive,200,"// xRooNode xRooNode::fitTo(const xRooNode& _data) const {; //; //; // auto _pdf = get<RooAbsPdf>();; // if (!_pdf) throw std::runtime_error(""Not a pdf"");; //; // auto _globs = _data.globs(); // keep alive because may own the globs; // RooArgSet globsSet(_globs.argList());; //; // std::shared_ptr<RooSimultaneous> newPdf;; // if(auto s = get<RooSimultaneous>(); s) {; // auto rangeName = GetRange();; // if (rangeName) {; // // need to reduce the RooSimultaneous until fix: https://github.com/root-project/root/issues/8231; // std::vector<TString> chanPatterns;; // TStringToken pattern(rangeName, "","");; // while (pattern.NextToken()) {; // chanPatterns.emplace_back(pattern);; // }; // auto& _cat = const_cast<RooAbsCategoryLValue&>(s->indexCat());; // newPdf = std::make_shared<RooSimultaneous>(TString::Format(""%s_reduced"",GetName()),""Reduced model"",_cat);; // for(auto& c : variations()) {; // TString cName(c->GetName());; // cName = cName(cName.Index('=')+1,cName.Length());; // _cat.setLabel(cName);; // bool matchAny=false;; // for(auto& p : chanPatterns) {; // if (cName.Contains(TRegexp(p,true))) { matchAny=true; break; }; // if (_cat.hasRange(p) && _cat.inRange(p)) { matchAny=true; break; }; // }; // if(matchAny) {; // newPdf->addPdf( *c->get<RooAbsPdf>(), cName );; // }; // }; // RooFitResultTree t(newPdf->GetName(),"""",*newPdf);; // auto _fr = std::const_pointer_cast<RooFitResult>(t.fitTo(_data.get<RooAbsData>(), &globsSet));; // xRooNode parent(_data.GetName(),nullptr,*this);; // xRooNode out(_fr->GetName(),/*acquire(_fr)*/ _fr,parent);; // // do full propagation by 'checking' the fr ...; // out.Checked(&out,true);; // return out;; // }; // }; //; //; //; // std::string treeName = TString::Format(""fits_%s"",GetName()).Data();; //; // auto _frt = getObject<TTree>(treeName); // get existing frt; //; // std::shared_ptr<RooFitResultTree> t;; // if (_frt) {; // t = std::make_shared<RooFitResultTree>(_frt.get());; // } else {; // t = std::make_shared<RooFitResultTree>(treeNam",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:437,Energy Efficiency,reduce,reduce,437,"// xRooNode xRooNode::fitTo(const xRooNode& _data) const {; //; //; // auto _pdf = get<RooAbsPdf>();; // if (!_pdf) throw std::runtime_error(""Not a pdf"");; //; // auto _globs = _data.globs(); // keep alive because may own the globs; // RooArgSet globsSet(_globs.argList());; //; // std::shared_ptr<RooSimultaneous> newPdf;; // if(auto s = get<RooSimultaneous>(); s) {; // auto rangeName = GetRange();; // if (rangeName) {; // // need to reduce the RooSimultaneous until fix: https://github.com/root-project/root/issues/8231; // std::vector<TString> chanPatterns;; // TStringToken pattern(rangeName, "","");; // while (pattern.NextToken()) {; // chanPatterns.emplace_back(pattern);; // }; // auto& _cat = const_cast<RooAbsCategoryLValue&>(s->indexCat());; // newPdf = std::make_shared<RooSimultaneous>(TString::Format(""%s_reduced"",GetName()),""Reduced model"",_cat);; // for(auto& c : variations()) {; // TString cName(c->GetName());; // cName = cName(cName.Index('=')+1,cName.Length());; // _cat.setLabel(cName);; // bool matchAny=false;; // for(auto& p : chanPatterns) {; // if (cName.Contains(TRegexp(p,true))) { matchAny=true; break; }; // if (_cat.hasRange(p) && _cat.inRange(p)) { matchAny=true; break; }; // }; // if(matchAny) {; // newPdf->addPdf( *c->get<RooAbsPdf>(), cName );; // }; // }; // RooFitResultTree t(newPdf->GetName(),"""",*newPdf);; // auto _fr = std::const_pointer_cast<RooFitResult>(t.fitTo(_data.get<RooAbsData>(), &globsSet));; // xRooNode parent(_data.GetName(),nullptr,*this);; // xRooNode out(_fr->GetName(),/*acquire(_fr)*/ _fr,parent);; // // do full propagation by 'checking' the fr ...; // out.Checked(&out,true);; // return out;; // }; // }; //; //; //; // std::string treeName = TString::Format(""fits_%s"",GetName()).Data();; //; // auto _frt = getObject<TTree>(treeName); // get existing frt; //; // std::shared_ptr<RooFitResultTree> t;; // if (_frt) {; // t = std::make_shared<RooFitResultTree>(_frt.get());; // } else {; // t = std::make_shared<RooFitResultTree>(treeNam",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:840,Energy Efficiency,Reduce,Reduced,840,"// xRooNode xRooNode::fitTo(const xRooNode& _data) const {; //; //; // auto _pdf = get<RooAbsPdf>();; // if (!_pdf) throw std::runtime_error(""Not a pdf"");; //; // auto _globs = _data.globs(); // keep alive because may own the globs; // RooArgSet globsSet(_globs.argList());; //; // std::shared_ptr<RooSimultaneous> newPdf;; // if(auto s = get<RooSimultaneous>(); s) {; // auto rangeName = GetRange();; // if (rangeName) {; // // need to reduce the RooSimultaneous until fix: https://github.com/root-project/root/issues/8231; // std::vector<TString> chanPatterns;; // TStringToken pattern(rangeName, "","");; // while (pattern.NextToken()) {; // chanPatterns.emplace_back(pattern);; // }; // auto& _cat = const_cast<RooAbsCategoryLValue&>(s->indexCat());; // newPdf = std::make_shared<RooSimultaneous>(TString::Format(""%s_reduced"",GetName()),""Reduced model"",_cat);; // for(auto& c : variations()) {; // TString cName(c->GetName());; // cName = cName(cName.Index('=')+1,cName.Length());; // _cat.setLabel(cName);; // bool matchAny=false;; // for(auto& p : chanPatterns) {; // if (cName.Contains(TRegexp(p,true))) { matchAny=true; break; }; // if (_cat.hasRange(p) && _cat.inRange(p)) { matchAny=true; break; }; // }; // if(matchAny) {; // newPdf->addPdf( *c->get<RooAbsPdf>(), cName );; // }; // }; // RooFitResultTree t(newPdf->GetName(),"""",*newPdf);; // auto _fr = std::const_pointer_cast<RooFitResult>(t.fitTo(_data.get<RooAbsData>(), &globsSet));; // xRooNode parent(_data.GetName(),nullptr,*this);; // xRooNode out(_fr->GetName(),/*acquire(_fr)*/ _fr,parent);; // // do full propagation by 'checking' the fr ...; // out.Checked(&out,true);; // return out;; // }; // }; //; //; //; // std::string treeName = TString::Format(""fits_%s"",GetName()).Data();; //; // auto _frt = getObject<TTree>(treeName); // get existing frt; //; // std::shared_ptr<RooFitResultTree> t;; // if (_frt) {; // t = std::make_shared<RooFitResultTree>(_frt.get());; // } else {; // t = std::make_shared<RooFitResultTree>(treeNam",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:11,Energy Efficiency,reduce,reduce,11,"// need to reduce the RooSimultaneous until fix: https://github.com/root-project/root/issues/8231",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Energy Efficiency,reduce,reduce,3,"// reduce the fit result by moving unselected float pars into the constPars list and dropping their covariances",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:525,Energy Efficiency,reduce,reduce,525,"// xRooNode xRooNode::generate(bool expected) const {; //; // auto fr = fitResult();; // auto _fr = fr.get<RooFitResult>();; //; // auto _pdf = (get<RooAbsPdf>()) ? std::shared_ptr<const xRooNode>(this, [](const xRooNode*){}) : parentPdf();; // if (!_pdf) {; // throw std::runtime_error(""Could not find pdf"");; // }; //; // std::shared_ptr<RooDataTree> t;; //; // std::shared_ptr<RooSimultaneous> newPdf;; // if(auto s = _pdf->get<RooSimultaneous>(); s) {; // auto rangeName = GetRange();; // if (rangeName) {; // // need to reduce the RooSimultaneous until fix: https://github.com/root-project/root/issues/8231; // std::vector<TString> chanPatterns;; // TStringToken pattern(rangeName, "","");; // while (pattern.NextToken()) {; // chanPatterns.emplace_back(pattern);; // }; // auto& _cat = const_cast<RooAbsCategoryLValue&>(s->indexCat());; // newPdf = std::make_shared<RooSimultaneous>(TString::Format(""%s_reduced"",GetName()),""Reduced model"",_cat);; // for(auto& c : _pdf->variations()) {; // TString cName(c->GetName());; // cName = cName(cName.Index('=')+1,cName.Length());; // _cat.setLabel(cName);; // bool matchAny=false;; // for(auto& p : chanPatterns) {; // if (cName.Contains(TRegexp(p,true))) { matchAny=true; break; }; // if (_cat.hasRange(p) && _cat.inRange(p)) { matchAny=true; break; }; // }; // if(matchAny) {; // newPdf->addPdf( *c->get<RooAbsPdf>(), cName );; // }; // }; // t = std::make_shared<RooDataTree>(newPdf->GetName(),"""",*newPdf);; // RooArgSet s1(_pdf->obs().argList());; // RooArgSet s2(_pdf->globs().argList());s1.remove(s2);; // t->SetObservables(&s1,&s2);; // auto _data = t->generate(_fr,expected);; //; // xRooNode parent(_fr ? _fr->GetName() : ""unknown"",nullptr,xRooNode(t,*this));; // xRooNode out(_data.first->GetName(),/*acquire(_fr)*/ _data.first,parent);; // out.emplace_back(std::make_shared<xRooNode>("".globs"",std::const_pointer_cast<RooArgSet>(_data.second),out));; // return out;; // }; // }; //; //; // std::string treeName = TString::Format(""gen_%s"",_pdf->",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:928,Energy Efficiency,Reduce,Reduced,928,"// xRooNode xRooNode::generate(bool expected) const {; //; // auto fr = fitResult();; // auto _fr = fr.get<RooFitResult>();; //; // auto _pdf = (get<RooAbsPdf>()) ? std::shared_ptr<const xRooNode>(this, [](const xRooNode*){}) : parentPdf();; // if (!_pdf) {; // throw std::runtime_error(""Could not find pdf"");; // }; //; // std::shared_ptr<RooDataTree> t;; //; // std::shared_ptr<RooSimultaneous> newPdf;; // if(auto s = _pdf->get<RooSimultaneous>(); s) {; // auto rangeName = GetRange();; // if (rangeName) {; // // need to reduce the RooSimultaneous until fix: https://github.com/root-project/root/issues/8231; // std::vector<TString> chanPatterns;; // TStringToken pattern(rangeName, "","");; // while (pattern.NextToken()) {; // chanPatterns.emplace_back(pattern);; // }; // auto& _cat = const_cast<RooAbsCategoryLValue&>(s->indexCat());; // newPdf = std::make_shared<RooSimultaneous>(TString::Format(""%s_reduced"",GetName()),""Reduced model"",_cat);; // for(auto& c : _pdf->variations()) {; // TString cName(c->GetName());; // cName = cName(cName.Index('=')+1,cName.Length());; // _cat.setLabel(cName);; // bool matchAny=false;; // for(auto& p : chanPatterns) {; // if (cName.Contains(TRegexp(p,true))) { matchAny=true; break; }; // if (_cat.hasRange(p) && _cat.inRange(p)) { matchAny=true; break; }; // }; // if(matchAny) {; // newPdf->addPdf( *c->get<RooAbsPdf>(), cName );; // }; // }; // t = std::make_shared<RooDataTree>(newPdf->GetName(),"""",*newPdf);; // RooArgSet s1(_pdf->obs().argList());; // RooArgSet s2(_pdf->globs().argList());s1.remove(s2);; // t->SetObservables(&s1,&s2);; // auto _data = t->generate(_fr,expected);; //; // xRooNode parent(_fr ? _fr->GetName() : ""unknown"",nullptr,xRooNode(t,*this));; // xRooNode out(_data.first->GetName(),/*acquire(_fr)*/ _data.first,parent);; // out.emplace_back(std::make_shared<xRooNode>("".globs"",std::const_pointer_cast<RooArgSet>(_data.second),out));; // return out;; // }; // }; //; //; // std::string treeName = TString::Format(""gen_%s"",_pdf->",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:75,Modifiability,extend,extended,75,"// need expPdf option while RooProjectedPdf doesn't support keeping things extended",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:22,Modifiability,extend,extended,22,"// don't treat pdf as extended if it has a coefficient and is RooAddPdf: RooAddPdf doesn't extend them unless no; // coefs for any (and all are extendable)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:91,Modifiability,extend,extend,91,"// don't treat pdf as extended if it has a coefficient and is RooAddPdf: RooAddPdf doesn't extend them unless no; // coefs for any (and all are extendable)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:144,Modifiability,extend,extendable,144,"// don't treat pdf as extended if it has a coefficient and is RooAddPdf: RooAddPdf doesn't extend them unless no; // coefs for any (and all are extendable)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:64,Deployability,integrat,integration,64,"// so that doesn't try to do an integral because we are passing integration onto fFunc in evaluate; // faster than full evaluation because doesnt make the integral dependent on the full expression",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:64,Integrability,integrat,integration,64,"// so that doesn't try to do an integral because we are passing integration onto fFunc in evaluate; // faster than full evaluation because doesnt make the integral dependent on the full expression",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:164,Integrability,depend,dependent,164,"// so that doesn't try to do an integral because we are passing integration onto fFunc in evaluate; // faster than full evaluation because doesnt make the integral dependent on the full expression",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:121,Availability,error,error,121,"// If this RooAbsReal is a RooRealVar in the fit result, we don't need to; // propagate anything and can just return the error in the fit result",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:34,Availability,error,error,34,"// Strip out parameters with zero error",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:68,Integrability,depend,depend,68,"// Ignore parameters in the fit result that this RooAbsReal doesn't depend on",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:42,Availability,error,errors,42,"// this next thing happens if the par has errors but the covariance matrix is empty; // this only happens if the fit was dodgy, so perhaps best to not even try to recover from this; // screwup ... hence I've commented out this fixup here and will let the errors be nan; // if(errVal==0) {; // Warning(""getPropagatedError"",""Missing variance for %s"",rrv.GetName());; // errVal = rrv.getError();; // V(ivar,ivar) = errVal*errVal;; // }; // Make Plus variation",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:163,Availability,recover,recover,163,"// this next thing happens if the par has errors but the covariance matrix is empty; // this only happens if the fit was dodgy, so perhaps best to not even try to recover from this; // screwup ... hence I've commented out this fixup here and will let the errors be nan; // if(errVal==0) {; // Warning(""getPropagatedError"",""Missing variance for %s"",rrv.GetName());; // errVal = rrv.getError();; // V(ivar,ivar) = errVal*errVal;; // }; // Make Plus variation",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:255,Availability,error,errors,255,"// this next thing happens if the par has errors but the covariance matrix is empty; // this only happens if the fit was dodgy, so perhaps best to not even try to recover from this; // screwup ... hence I've commented out this fixup here and will let the errors be nan; // if(errVal==0) {; // Warning(""getPropagatedError"",""Missing variance for %s"",rrv.GetName());; // errVal = rrv.getError();; // V(ivar,ivar) = errVal*errVal;; // }; // Make Plus variation",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:163,Safety,recover,recover,163,"// this next thing happens if the par has errors but the covariance matrix is empty; // this only happens if the fit was dodgy, so perhaps best to not even try to recover from this; // screwup ... hence I've commented out this fixup here and will let the errors be nan; // if(errVal==0) {; // Warning(""getPropagatedError"",""Missing variance for %s"",rrv.GetName());; // errVal = rrv.getError();; // V(ivar,ivar) = errVal*errVal;; // }; // Make Plus variation",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:14,Availability,recover,recover,14,"// can try to recover nans ... this stopped being possible in 6.27 onwards because NaNPacker made private",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:14,Safety,recover,recover,14,"// can try to recover nans ... this stopped being possible in 6.27 onwards because NaNPacker made private",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:450,Availability,error,error,450,"// Re-evaluate this RooAbsReal with the central parameters just to be; // extra-safe that a call to `getPropagatedError()` doesn't change any state.; // It should not be necessary because thanks to the dirty flag propagation; // the RooAbsReal is re-evaluated anyway the next time getVal() is called.; // Still there are imaginable corner cases where it would not be triggered,; // for example if the user changes the RooFit operation more after the error; // propagation.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:80,Safety,safe,safe,80,"// Re-evaluate this RooAbsReal with the central parameters just to be; // extra-safe that a call to `getPropagatedError()` doesn't change any state.; // It should not be necessary because thanks to the dirty flag propagation; // the RooAbsReal is re-evaluated anyway the next time getVal() is called.; // Still there are imaginable corner cases where it would not be triggered,; // for example if the user changes the RooFit operation more after the error; // propagation.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:13,Availability,error,error,13,"// Calculate error in linear approximation from variations and correlation coefficient",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:34,Availability,error,error,34,"// Strip out parameters with zero error",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:61,Availability,error,error,61,"// Make list of parameter instances of cloneFunc in order of error matrix",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:13,Availability,error,error,13,"// Calculate error in linear approximation from variations and correlation coefficient",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:66,Performance,cache,caches,66,"// recursive through all clients and sterlize their normalization caches",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:159,Energy Efficiency,monitor,monitor,159,"// sterilize first so that cache elements don't appear in the client list; // safety net in case sterilizing one client deletes another one of our clients; // monitor for change in clients list size; // found this was only case in 6.26 (valgrind shows invalid read), in 6.28 these went away; // might be in 6.28 the client list iterator became able to handle in-loop edits but didn't see; // in test case that client count changed so just resterilizing if that's the case.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:27,Performance,cache,cache,27,"// sterilize first so that cache elements don't appear in the client list; // safety net in case sterilizing one client deletes another one of our clients; // monitor for change in clients list size; // found this was only case in 6.26 (valgrind shows invalid read), in 6.28 these went away; // might be in 6.28 the client list iterator became able to handle in-loop edits but didn't see; // in test case that client count changed so just resterilizing if that's the case.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:78,Safety,safe,safety,78,"// sterilize first so that cache elements don't appear in the client list; // safety net in case sterilizing one client deletes another one of our clients; // monitor for change in clients list size; // found this was only case in 6.26 (valgrind shows invalid read), in 6.28 these went away; // might be in 6.28 the client list iterator became able to handle in-loop edits but didn't see; // in test case that client count changed so just resterilizing if that's the case.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:395,Testability,test,test,395,"// sterilize first so that cache elements don't appear in the client list; // safety net in case sterilizing one client deletes another one of our clients; // monitor for change in clients list size; // found this was only case in 6.26 (valgrind shows invalid read), in 6.28 these went away; // might be in 6.28 the client list iterator became able to handle in-loop edits but didn't see; // in test case that client count changed so just resterilizing if that's the case.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:78,Performance,cache,cache,78,"// seems I have to remake the function each time, as haven't figured out what cache needs clearing?",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:90,Usability,clear,clearing,90,"// seems I have to remake the function each time, as haven't figured out what cache needs clearing?",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:43,Deployability,continuous,continuous,43,"/// dOpt;; // uncomment next line to blend continuous with discrete components .. get some unpleasant ""poke through""; // effects though; // if(auto s = samp->get<RooAbsReal>(); s) thisOpt = s->isBinnedDistribution(*dynamic_cast<RooAbsArg*>(v)) ?; // """" : ""LF2"";",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:28,Availability,avail,available,28,"// style hists according to available styles ... creating if necessary",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:17,Deployability,integrat,integrate,17,"// don't need to integrate if doing a self-histogram",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:17,Integrability,integrat,integrate,17,"// don't need to integrate if doing a self-histogram",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:13,Modifiability,variab,variable,13,"// store the variable name in the TimeFormat property as well, b.c. alphanumeric requires axis name to be; // ""xaxis""",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:92,Availability,error,error,92,"/// Oct2022: No longer doing this because want to allow fitResult to be used to get partial error; // // need to add any floating parameters not included somewhere already in the fit result ...; // RooArgList l;; // for(auto& p : pars()) {; // auto vv = p->get<RooRealVar>();; // if (!vv) continue;; // if (vv == dynamic_cast<RooRealVar*>(v)) continue;; // if (vv->isConstant()) continue;; // if (fr->floatParsFinal().find(vv->GetName())) continue;; // if (fr->_constPars && fr->_constPars->find(vv->GetName())) continue;; // l.add(*vv);; // }; //; // if (!l.empty()) {; // RooArgList l2; l2.addClone(fr->floatParsFinal());; // l2.addClone(l);; // fr->setFinalParList(l2);; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:40,Availability,error,errors,40,"// finally check at least one float has errors defined (might not be cause if in prefit state)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:197,Safety,detect,detected,197,"// if pdf has no floor, will evaluate it as a function to allow it to be negative - evaluation should; // also be faster (no integral); // exception is if RooRealSumPdf is embedded in a RooAddPdf (detected by presence of coefs) ... then it must be; // evaluated as a pdf technically should check parent is a RooAddPdf, because if was inside a RooRealSumPdf then; // would be evaluated as a function!",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:55,Modifiability,variab,variable,55,"// probably should also remove any range on the x-axis variable too, if there is one",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Performance,load,loads,3,"// loads current coordinates and populates coordRange, if any",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:111,Integrability,depend,dependent,111,"// need to handle special case of RooSimultaneous ... each pdf needs individually projecting over just its; // dependent obs",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:78,Modifiability,extend,extend,78,"// TODO should use xRooProjectedPdf here too, because not fixed range and; // extend behaviour of RooProjectedPdf in ROOT yet",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:14,Usability,clear,cleared,14,"// should get cleared when we sterilize",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:22,Integrability,depend,dependency,22,"// do in here in case dependency on var",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:27,Availability,error,error,27,"// std::cout << ""computing error of :"" << h->GetBinCenter(i) << std::endl;; // //fr->floatParsFinal().Print(); fr->covarianceMatrix().Print();",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:185,Availability,error,error,185,"// should be no need to pass a normSet to a non-pdf (but not verified this); // especially important not to pass in the case we are evaluated RooRealSumPdf as a function! otherwise; // error will be wrong",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,Deployability,install,install,3,"// install interrupt handler",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:21,Performance,cache,cache,21,"// need to clear the cache of the created integral - do this before deleting things!",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:11,Usability,clear,clear,11,"// need to clear the cache of the created integral - do this before deleting things!",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:49,Integrability,depend,depends,49,"// reinitialize collide grid because the filling depends on fUxmin and fUxmax (and ymin ymax too); // and these aren't filled on the first time we do the placement (they init to 0 and 1), but will be filled; // subsequently",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:11,Availability,down,down,11,"//-- slows down x11 so trying to avoid",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:33,Safety,avoid,avoid,33,"//-- slows down x11 so trying to avoid",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:11,Availability,down,down,11,"//-- slows down x11 so trying to avoid",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:33,Safety,avoid,avoid,33,"//-- slows down x11 so trying to avoid",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:68,Availability,down,down,68,"// this exists to avoid calling update excessively because it slows down x11 ... but still; // need to call update twice if have a legend drawn in order to relocate it.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:32,Deployability,update,update,32,"// this exists to avoid calling update excessively because it slows down x11 ... but still; // need to call update twice if have a legend drawn in order to relocate it.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:108,Deployability,update,update,108,"// this exists to avoid calling update excessively because it slows down x11 ... but still; // need to call update twice if have a legend drawn in order to relocate it.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:18,Safety,avoid,avoid,18,"// this exists to avoid calling update excessively because it slows down x11 ... but still; // need to call update twice if have a legend drawn in order to relocate it.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:7,Usability,simpl,simplified,7,"// use simplified expression ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:60,Modifiability,variab,variables,60,"// force plots show how much NLL changes wrt to a change of variables",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:18,Availability,error,error,18,"// must calculate error to calculate significance",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:45,Availability,error,error,45,"// make ymax at least 3x bigger than biggest error if has error",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:58,Availability,error,error,58,"// make ymax at least 3x bigger than biggest error if has error",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:8,Testability,log,log,8,"// auto-log the pad",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:35,Testability,log,log,35,"// adjust min so if user activates log scale it isn't bad",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:13,Availability,error,error,13,"// symmetric error for now",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:256,Deployability,Toggle,ToggleEventStatus,256,"// ensure statusbar visible for interactive plot; // turned this off for now ... as not needed if doing through browser, status bar already there; // if (gPad->GetCanvas() && !gPad->GetCanvas()->TestBit(TCanvas::kShowEventStatus)) {; // gPad->GetCanvas()->ToggleEventStatus();; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:195,Testability,Test,TestBit,195,"// ensure statusbar visible for interactive plot; // turned this off for now ... as not needed if doing through browser, status bar already there; // if (gPad->GetCanvas() && !gPad->GetCanvas()->TestBit(TCanvas::kShowEventStatus)) {; // gPad->GetCanvas()->ToggleEventStatus();; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:9,Deployability,Update,Update,9,"// gPad->Update();",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:26,Deployability,Update,Update,26,"// pad->Modified();//pad->Update();",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:9,Deployability,Update,Update,9,"// gPad->Update();",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:87,Availability,error,error,87,"// e will have been removed above; // breakdown is quadrature difference between total error and conditional error; // group by 'group' attribute",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:109,Availability,error,error,109,"// e will have been removed above; // breakdown is quadrature difference between total error and conditional error; // group by 'group' attribute",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:18,Availability,error,errors,18,"// for display of errors will go to one extra dp ...",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:152,Integrability,depend,dependent,152,"// do breakdown by removing parameters in blocks according to groups and seeing impact on variance; // this will give the correct sum but will be order-dependent if there are correlations between; // groups. therefore we will stick with group-by-group; // RooArgList pars(fr->floatParsFinal()); // pars to not condition on; // double variance = pow(dynamic_cast<RooRealVar*>(poi)->getError(),2);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:31,Availability,error,error,31,"// r.first will be the rounded error",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:34,Availability,error,errors,34,"// suppress labels for negligible errors.",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:14,Energy Efficiency,reduce,reducedVar,14,"// variance = reducedVar;",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:31,Availability,error,error,31,"// r.first will be the rounded error",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:35,Availability,error,error,35,"// need to get constraint mean and error parameters ....; // look for normal gaussian and poisson cases",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:24,Availability,avail,available,24,"// handles if no prefit available",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:78,Availability,error,error,78,"// there will be 3 deps, one will be this par, the other two are the mean and error (or error^2 in case of; // poisson; // std::cout << p->GetName() << "" extracted "" << prefitVal << "" "" << prefitError << "" from "";; // pConstr->deps().Print();",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:88,Availability,error,error,88,"// there will be 3 deps, one will be this par, the other two are the mean and error (or error^2 in case of; // poisson; // std::cout << p->GetName() << "" extracted "" << prefitVal << "" "" << prefitError << "" from "";; // pConstr->deps().Print();",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:52,Availability,error,error,52,"// prefiterror will be tau ... need 1/sqrt(tau) for error",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:92,Availability,error,error,92,"// unconstrained (or at least couldn't determine constraint) ... use par range if no prefit error",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:43,Security,access,access,43,"// draws the axis, called "".axis"" for easy access",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:71,Deployability,Update,Update,71,"// overlay axis again -- important is last so can remove if don't pad->Update before reclear",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:9,Deployability,Update,Update,9,"// gPad->Update();",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:34,Usability,clear,cleared,34,"// will be be deleted when pad is cleared",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:9,Deployability,Update,Update,9,"// gPad->Update();",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:9,Deployability,Update,Update,9,"// gPad->Update();",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:93,Integrability,depend,dependent,93,"// include the extendedTerm, distributed evenly over the bins; // probably should be somehow dependent on data density though (i.e. bins with more data get more of it?)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:15,Modifiability,extend,extendedTerm,15,"// include the extendedTerm, distributed evenly over the bins; // probably should be somehow dependent on data density though (i.e. bins with more data get more of it?)",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:49,Availability,alive,alive,49,"// std::shared_ptr<TStyle> style; // use to keep alive for access from GetStyle below, in case; // getObject has decided to return the owning ptr (for some reason) if; // (!gROOT->GetStyle(h->GetTitle())) {; // if ( (style = getObject<TStyle>(h->GetTitle())) ) {; // // loaded style (from workspace?) so put in list and use that; // gROOT->GetListOfStyles()->Add(style.get());; // } else {; // // create new style - gets put in style list automatically so don't have to delete; // // acquire them so saved to workspaces for auto reload ...; // style = acquireNew<TStyle>(h->GetTitle(),; // TString::Format(""Style for %s component"", h->GetTitle()));; // (TAttLine &) (*style) = *dynamic_cast<TAttLine *>(h);; // (TAttFill &) (*style) = *dynamic_cast<TAttFill *>(h);; // (TAttMarker &) (*style) = *dynamic_cast<TAttMarker *>(h);; // gROOT->GetListOfStyles()->Add(style.get());; // }; // }; // (TAttLine&)(*h) = *(gROOT->GetStyle(h->GetTitle()) ? gROOT->GetStyle(h->GetTitle()) : gStyle);; // (TAttFill&)(*h) = *(gROOT->GetStyle(h->GetTitle()) ? gROOT->GetStyle(h->GetTitle()) : gStyle);; // (TAttMarker&)(*h) = *(gROOT->GetStyle(h->GetTitle()) ? gROOT->GetStyle(h->GetTitle()) : gStyle);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:270,Performance,load,loaded,270,"// std::shared_ptr<TStyle> style; // use to keep alive for access from GetStyle below, in case; // getObject has decided to return the owning ptr (for some reason) if; // (!gROOT->GetStyle(h->GetTitle())) {; // if ( (style = getObject<TStyle>(h->GetTitle())) ) {; // // loaded style (from workspace?) so put in list and use that; // gROOT->GetListOfStyles()->Add(style.get());; // } else {; // // create new style - gets put in style list automatically so don't have to delete; // // acquire them so saved to workspaces for auto reload ...; // style = acquireNew<TStyle>(h->GetTitle(),; // TString::Format(""Style for %s component"", h->GetTitle()));; // (TAttLine &) (*style) = *dynamic_cast<TAttLine *>(h);; // (TAttFill &) (*style) = *dynamic_cast<TAttFill *>(h);; // (TAttMarker &) (*style) = *dynamic_cast<TAttMarker *>(h);; // gROOT->GetListOfStyles()->Add(style.get());; // }; // }; // (TAttLine&)(*h) = *(gROOT->GetStyle(h->GetTitle()) ? gROOT->GetStyle(h->GetTitle()) : gStyle);; // (TAttFill&)(*h) = *(gROOT->GetStyle(h->GetTitle()) ? gROOT->GetStyle(h->GetTitle()) : gStyle);; // (TAttMarker&)(*h) = *(gROOT->GetStyle(h->GetTitle()) ? gROOT->GetStyle(h->GetTitle()) : gStyle);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:59,Security,access,access,59,"// std::shared_ptr<TStyle> style; // use to keep alive for access from GetStyle below, in case; // getObject has decided to return the owning ptr (for some reason) if; // (!gROOT->GetStyle(h->GetTitle())) {; // if ( (style = getObject<TStyle>(h->GetTitle())) ) {; // // loaded style (from workspace?) so put in list and use that; // gROOT->GetListOfStyles()->Add(style.get());; // } else {; // // create new style - gets put in style list automatically so don't have to delete; // // acquire them so saved to workspaces for auto reload ...; // style = acquireNew<TStyle>(h->GetTitle(),; // TString::Format(""Style for %s component"", h->GetTitle()));; // (TAttLine &) (*style) = *dynamic_cast<TAttLine *>(h);; // (TAttFill &) (*style) = *dynamic_cast<TAttFill *>(h);; // (TAttMarker &) (*style) = *dynamic_cast<TAttMarker *>(h);; // gROOT->GetListOfStyles()->Add(style.get());; // }; // }; // (TAttLine&)(*h) = *(gROOT->GetStyle(h->GetTitle()) ? gROOT->GetStyle(h->GetTitle()) : gStyle);; // (TAttFill&)(*h) = *(gROOT->GetStyle(h->GetTitle()) ? gROOT->GetStyle(h->GetTitle()) : gStyle);; // (TAttMarker&)(*h) = *(gROOT->GetStyle(h->GetTitle()) ? gROOT->GetStyle(h->GetTitle()) : gStyle);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:78,Performance,cache,cache,78,"// seems I have to remake the function each time, as haven't figured out what cache needs clearing?",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:90,Usability,clear,clearing,90,"// seems I have to remake the function each time, as haven't figured out what cache needs clearing?",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:32,Deployability,continuous,continuous,32,"// uncomment next line to blend continuous with discrete components .. get some unpleasant ""poke through""; // effects though; // if(auto s = samp->get<RooAbsReal>(); s) thisOpt = s->isBinnedDistribution(*dynamic_cast<RooAbsArg*>(v)) ?; // """" : ""LF2"";",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:76,Deployability,update,update,76,"// need to draw histogram in the ratio pad ...; // if doing overlay need to update histogram",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:9,Deployability,Update,Update,9,"// gPad->Update();",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:9,Deployability,Update,Update,9,"// gPad->Update();",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:151,Performance,cache,caches,151,"// before saving, clear the eocache of all owned nodes; // because causes memory leak when read back in (workspace streamer immediately overwrites the caches); // fixed in: https://github.com/root-project/root/pull/12024",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:18,Usability,clear,clear,18,"// before saving, clear the eocache of all owned nodes; // because causes memory leak when read back in (workspace streamer immediately overwrites the caches); // fixed in: https://github.com/root-project/root/pull/12024",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:58,Energy Efficiency,reduce,reduce,58,"// const_cast<Node2*>(this)->sterilize(); - tried this to reduce mem leak on readback but no improve",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:32,Performance,load,loaded,32,"// save any fitDatabase that is loaded in memory too; // TODO: We should do this as well for SaveAs on a scan object",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:15,Performance,cache,cache,15,"// restore the cache to every node",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:21,Availability,alive,alive,21,"// need here to keep alive owned RooProduct",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:8,Deployability,integrat,integrate,8,"// only integrate over observables we actually depend on",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:8,Integrability,integrat,integrate,8,"// only integrate over observables we actually depend on",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:47,Integrability,depend,depend,47,"// only integrate over observables we actually depend on",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:311,Availability,recover,recovery,311,"// note: so far this method is inconsistent with the BuildHistogram in ways:; // no projection over other variables; // July2023: made RooRealSumPdf evaluate as a function if doesn't have a floor; // but this method will still evaluate it as a pdf (uses PdfWrapper); // but can get away with it while added NaN recovery to getSimplePropagatedError to pickup raw values",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:106,Modifiability,variab,variables,106,"// note: so far this method is inconsistent with the BuildHistogram in ways:; // no projection over other variables; // July2023: made RooRealSumPdf evaluate as a function if doesn't have a floor; // but this method will still evaluate it as a pdf (uses PdfWrapper); // but can get away with it while added NaN recovery to getSimplePropagatedError to pickup raw values",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:311,Safety,recover,recovery,311,"// note: so far this method is inconsistent with the BuildHistogram in ways:; // no projection over other variables; // July2023: made RooRealSumPdf evaluate as a function if doesn't have a floor; // but this method will still evaluate it as a pdf (uses PdfWrapper); // but can get away with it while added NaN recovery to getSimplePropagatedError to pickup raw values",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:86,Performance,load,loaded,86,"// need to ensure coefs, if any, are included in fit result retrieval so all pars are loaded",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:15,Energy Efficiency,reduce,reduce,15,"// use name to reduce the fit result, if one given",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:92,Availability,error,error,92,"/// Oct2022: No longer doing this because want to allow fitResult to be used to get partial error; // // need to add any floating parameters not included somewhere already in the fit result ...; // RooArgList l;; // for(auto& p : pars()) {; // auto v = p->get<RooRealVar>();; // if (!v) continue;; // if (v->isConstant()) continue;; // if (fr->floatParsFinal().find(v->GetName())) continue;; // if (fr->_constPars && fr->_constPars->find(v->GetName())) continue;; // l.add(*v);; // }; //; // if (!l.empty()) {; // RooArgList l2; l2.addClone(fr->floatParsFinal());; // l2.addClone(l);; // fr->setFinalParList(l2);; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:26,Availability,alive,alive,26,"// may own an obs so keep alive here",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:76,Availability,error,error,76,"// res = o->getPropagatedError(*fr, normSet);; // // TODO: What if coef has error? - probably need a FuncWrapper class; // if (auto c = _coefs.get<RooAbsReal>(); c) {; // res *= c->getVal(normSet);; // }",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx:10,Availability,error,errors,10,"// remove errors because currently meaningless!",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode_interactive.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx:22,Deployability,update,update,22,"// then do an overlay update",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode_interactive.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx:3,Availability,error,error,3,"// error is scale, content is offset",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode_interactive.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx:83,Modifiability,Inherit,InheritsFrom,83,"// TObject *select = gPad->GetSelected();; // if(!select) return;; // if (!select->InheritsFrom(TGraph::Class())) {gPad->SetUniqueID(0); return;}; // gPad->GetCanvas()->FeedbackMode(true);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode_interactive.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx:169,Usability,Feedback,FeedbackMode,169,"// TObject *select = gPad->GetSelected();; // if(!select) return;; // if (!select->InheritsFrom(TGraph::Class())) {gPad->SetUniqueID(0); return;}; // gPad->GetCanvas()->FeedbackMode(true);",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode_interactive.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx:154,Deployability,Update,Update,154,"// for (auto p: *pad->GetListOfPrimitives()) {; // if (auto _p = dynamic_cast<TPad *>(p)) {; // _p->Modified();; // }; // }; // pad->Modified();; // pad->Update();",MatchSource.CODE_COMMENT,roofit/xroofit/src/xRooNode_interactive.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx:602,Integrability,depend,depending,602,"// @(#)root/rootx:$Id$; // Author: Fons Rademakers 19/02/98; //////////////////////////////////////////////////////////////////////////; // //; // Rootx //; // //; // Rootx is a small front-end program that starts the main ROOT module. //; // This program is called ""root"" in the $ROOTSYS/bin directory and the //; // real ROOT executable is now called ""root.exe"" (formerly ""root""). //; // Rootx puts up a splash screen giving some info about the current //; // version of ROOT and, more importantly, it sets up the required //; // LD_LIBRARY_PATH, SHLIB_PATH and LIBPATH environment variables //; // (depending on the platform). //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,rootx/src/rootx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx:584,Modifiability,variab,variables,584,"// @(#)root/rootx:$Id$; // Author: Fons Rademakers 19/02/98; //////////////////////////////////////////////////////////////////////////; // //; // Rootx //; // //; // Rootx is a small front-end program that starts the main ROOT module. //; // This program is called ""root"" in the $ROOTSYS/bin directory and the //; // real ROOT executable is now called ""root.exe"" (formerly ""root""). //; // Rootx puts up a splash screen giving some info about the current //; // version of ROOT and, more importantly, it sets up the required //; // LD_LIBRARY_PATH, SHLIB_PATH and LIBPATH environment variables //; // (depending on the platform). //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,rootx/src/rootx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx:48,Security,access,accessible,48,"//This had internal linkage before, now must be accessible from rootx-cocoa.mm.",MatchSource.CODE_COMMENT,rootx/src/rootx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx:11,Energy Efficiency,allocate,allocated,11,"// NOLINT: allocated memory now used by environment variable",MatchSource.CODE_COMMENT,rootx/src/rootx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx:52,Modifiability,variab,variable,52,"// NOLINT: allocated memory now used by environment variable",MatchSource.CODE_COMMENT,rootx/src/rootx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx:55,Availability,down,down,55,"// When we get SIGUSR1 from child (i.e. ROOT) then pop down logo.",MatchSource.CODE_COMMENT,rootx/src/rootx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx:60,Testability,log,logo,60,"// When we get SIGUSR1 from child (i.e. ROOT) then pop down logo.",MatchSource.CODE_COMMENT,rootx/src/rootx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx:22,Integrability,depend,depending,22,"// Try to set ROOTSYS depending on pathname of the executable",MatchSource.CODE_COMMENT,rootx/src/rootx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx:55,Testability,log,logo,55,"// In batch mode don't show splash screen, idem for no logo mode,; // in about mode show always splash screen",MatchSource.CODE_COMMENT,rootx/src/rootx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx:30,Deployability,Install,Install,30,"// Ignore SIGINT and SIGQUIT. Install handler for SIGUSR1.",MatchSource.CODE_COMMENT,rootx/src/rootx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:236,Integrability,rout,routines,236,"// @(#)root/rootx:$Id$; // Author: Fons Rademakers 19/02/98; // Re-written for ROOT 6 by Timur Pocheptsov 11/03/2014.; //////////////////////////////////////////////////////////////////////////; // //; // Rootxx //; // //; // X11 based routines used to display the splash screen for rootx, //; // the root front-end program. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:9,Security,access,accessed,9,"//Can be accessed from a signal handler:",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:60,Integrability,depend,depending,60,"// 4 seconds; //gCreditsRect: x and y to be set at runtime (depending on shape extension and; //images).",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:16,Testability,log,logo,16,"// clip rect in logo",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:32,Integrability,interface,interface,32,"//namespace ROOT; //The ""public interface"" - PopupLogo/WaitLogo.; ////////////////////////////////////////////////////////////////////////////////; ///Popup a splashscreen window.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:18,Performance,load,load,18,"//If we failed to load a background image,; //we have nothing to show at all.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:42,Availability,mask,mask,42,"//Background and (probably) shape combine mask, if we can.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:9,Energy Efficiency,allocate,allocate,9,"//Try to allocate special colors, result is not important here.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:2,Availability,Error,Error,2,"//Error while creating a pixmap, we; //do not need our context and font anymore.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:78,Availability,error,error,78,"//We still can show an empty splashscreen with; //our nice logo! ;) - so this error is not fatal.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:59,Testability,log,logo,59,"//We still can show an empty splashscreen with; //our nice logo! ;) - so this error is not fatal.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:162,Availability,down,down,162,"////////////////////////////////////////////////////////////////////////////////; ///From original version.; /// Main event loop waiting till time arrives to pop down logo; /// or when forced by button press event.; ///From me: this even loop seems to be quite twisted and ugly.; ///The original code does not work now though - event queue is; ///growing and at some point you already not able to extract a; ///button press event (for example) and close a splashscreen window.; ///With my first version I also had problems - somehow I was missing; ///the first expose event (from time to time).; ///Now I empty the event queue on every iteration (selecting; ///interesting events only).; ///Why original version ignore this - I have no idea.; ///We have at least NoExpose events in a queue (generated by XCopyArea); ///and somebody obviously have to remove them eventually.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:334,Performance,queue,queue,334,"////////////////////////////////////////////////////////////////////////////////; ///From original version.; /// Main event loop waiting till time arrives to pop down logo; /// or when forced by button press event.; ///From me: this even loop seems to be quite twisted and ugly.; ///The original code does not work now though - event queue is; ///growing and at some point you already not able to extract a; ///button press event (for example) and close a splashscreen window.; ///With my first version I also had problems - somehow I was missing; ///the first expose event (from time to time).; ///Now I empty the event queue on every iteration (selecting; ///interesting events only).; ///Why original version ignore this - I have no idea.; ///We have at least NoExpose events in a queue (generated by XCopyArea); ///and somebody obviously have to remove them eventually.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:621,Performance,queue,queue,621,"////////////////////////////////////////////////////////////////////////////////; ///From original version.; /// Main event loop waiting till time arrives to pop down logo; /// or when forced by button press event.; ///From me: this even loop seems to be quite twisted and ugly.; ///The original code does not work now though - event queue is; ///growing and at some point you already not able to extract a; ///button press event (for example) and close a splashscreen window.; ///With my first version I also had problems - somehow I was missing; ///the first expose event (from time to time).; ///Now I empty the event queue on every iteration (selecting; ///interesting events only).; ///Why original version ignore this - I have no idea.; ///We have at least NoExpose events in a queue (generated by XCopyArea); ///and somebody obviously have to remove them eventually.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:784,Performance,queue,queue,784,"////////////////////////////////////////////////////////////////////////////////; ///From original version.; /// Main event loop waiting till time arrives to pop down logo; /// or when forced by button press event.; ///From me: this even loop seems to be quite twisted and ugly.; ///The original code does not work now though - event queue is; ///growing and at some point you already not able to extract a; ///button press event (for example) and close a splashscreen window.; ///With my first version I also had problems - somehow I was missing; ///the first expose event (from time to time).; ///Now I empty the event queue on every iteration (selecting; ///interesting events only).; ///Why original version ignore this - I have no idea.; ///We have at least NoExpose events in a queue (generated by XCopyArea); ///and somebody obviously have to remove them eventually.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:561,Security,expose,expose,561,"////////////////////////////////////////////////////////////////////////////////; ///From original version.; /// Main event loop waiting till time arrives to pop down logo; /// or when forced by button press event.; ///From me: this even loop seems to be quite twisted and ugly.; ///The original code does not work now though - event queue is; ///growing and at some point you already not able to extract a; ///button press event (for example) and close a splashscreen window.; ///With my first version I also had problems - somehow I was missing; ///the first expose event (from time to time).; ///Now I empty the event queue on every iteration (selecting; ///interesting events only).; ///Why original version ignore this - I have no idea.; ///We have at least NoExpose events in a queue (generated by XCopyArea); ///and somebody obviously have to remove them eventually.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:167,Testability,log,logo,167,"////////////////////////////////////////////////////////////////////////////////; ///From original version.; /// Main event loop waiting till time arrives to pop down logo; /// or when forced by button press event.; ///From me: this even loop seems to be quite twisted and ugly.; ///The original code does not work now though - event queue is; ///growing and at some point you already not able to extract a; ///button press event (for example) and close a splashscreen window.; ///With my first version I also had problems - somehow I was missing; ///the first expose event (from time to time).; ///Now I empty the event queue on every iteration (selecting; ///interesting events only).; ///Why original version ignore this - I have no idea.; ///We have at least NoExpose events in a queue (generated by XCopyArea); ///and somebody obviously have to remove them eventually.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:33,Performance,queue,queue,33,"//We also have other events in a queue, get rid of them!",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:115,Availability,down,down,115,"////////////////////////////////////////////////////////////////////////////////; ///ROOT is ready to run, may pop down the logo if stay up time expires.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:124,Testability,log,logo,124,"////////////////////////////////////////////////////////////////////////////////; ///ROOT is ready to run, may pop down the logo if stay up time expires.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:123,Availability,mask,mask,123,"////////////////////////////////////////////////////////////////////////////////; ///1. Test if X11 supports shape combine mask.; ///2.a if no - go to 3.; ///2.b If yes - try to read both background image; /// and the mask. If any of operations failed - go to 3.; /// If both succeeded - return true.; ///3. Try to read image without transparency (mask not needed anymore).",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:218,Availability,mask,mask,218,"////////////////////////////////////////////////////////////////////////////////; ///1. Test if X11 supports shape combine mask.; ///2.a if no - go to 3.; ///2.b If yes - try to read both background image; /// and the mask. If any of operations failed - go to 3.; /// If both succeeded - return true.; ///3. Try to read image without transparency (mask not needed anymore).",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:348,Availability,mask,mask,348,"////////////////////////////////////////////////////////////////////////////////; ///1. Test if X11 supports shape combine mask.; ///2.a if no - go to 3.; ///2.b If yes - try to read both background image; /// and the mask. If any of operations failed - go to 3.; /// If both succeeded - return true.; ///3. Try to read image without transparency (mask not needed anymore).",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:88,Testability,Test,Test,88,"////////////////////////////////////////////////////////////////////////////////; ///1. Test if X11 supports shape combine mask.; ///2.a if no - go to 3.; ///2.b If yes - try to read both background image; /// and the mask. If any of operations failed - go to 3.; /// If both succeeded - return true.; ///3. Try to read image without transparency (mask not needed anymore).",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:9,Availability,mask,mask,9,"//true - mask is needed.; //We do not have a mask (or image not found); //and we can not call shape combine.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:45,Availability,mask,mask,45,"//true - mask is needed.; //We do not have a mask (or image not found); //and we can not call shape combine.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:132,Availability,mask,mask,132,"////////////////////////////////////////////////////////////////////////////////; ///Splashscreen background image and (probably) a mask (if we want to use; ///shape combine - non-rect window).",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:7,Availability,avail,available,7,"// Not available in XPM 3.2 and earlier",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:93,Availability,mask,mask,93,"//Bertrand! Many thanks for this simple but ... smart and not so obvious (??) idea; //with a mask :) Without you I'll have two separate xpms :)",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:33,Usability,simpl,simple,33,"//Bertrand! Many thanks for this simple but ... smart and not so obvious (??) idea; //with a mask :) Without you I'll have two separate xpms :)",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:12,Availability,mask,mask,12,"//We need a mask, but; //it's creation failed.; //It's an error.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:58,Availability,error,error,58,"//We need a mask, but; //it's creation failed.; //It's an error.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:142,Testability,log,logo,142,"////////////////////////////////////////////////////////////////////////////////; ///Returns false if milliSec milliseconds have passed since logo; ///was popped up, true otherwise.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:187,Modifiability,extend,extended,187,"////////////////////////////////////////////////////////////////////////////////; ///Draw credits. If draw is true draw credits,; ///otherwise just return size of all credit text.; ///If extended is true draw or returns size for extended full; ///credits list.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:229,Modifiability,extend,extended,229,"////////////////////////////////////////////////////////////////////////////////; ///Draw credits. If draw is true draw credits,; ///otherwise just return size of all credit text.; ///If extended is true draw or returns size for extended full; ///credits list.",MatchSource.CODE_COMMENT,rootx/src/rootxx.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h:161,Integrability,interface,interface,161,"//////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/inc/TMySQLServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h:126,Modifiability,plugin,plugin,126,"//////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/inc/TMySQLServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h:525,Security,access,access,525,"//////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/inc/TMySQLServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h:628,Security,password,password,628,"//////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/inc/TMySQLServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h:1094,Security,password,password,1094,"//////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/inc/TMySQLServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h:389,Testability,test,test,389,"//////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/inc/TMySQLServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h:560,Testability,test,test,560,"//////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/inc/TMySQLServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h:851,Testability,test,test,851,"//////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/inc/TMySQLServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h:922,Testability,test,test,922,"//////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/inc/TMySQLServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h:1020,Testability,test,test,1020,"//////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/inc/TMySQLServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h:1261,Testability,test,test,1261,"//////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/inc/TMySQLServer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLStatement.h:4,Energy Efficiency,allocate,allocated,4,"//! allocated data buffer",MatchSource.CODE_COMMENT,sql/mysql/inc/TMySQLStatement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLStatement.h
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLStatement.h:12,Energy Efficiency,allocate,allocated,12,"//! size of allocated data",MatchSource.CODE_COMMENT,sql/mysql/inc/TMySQLStatement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLStatement.h
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:582,Integrability,interface,interface,582,"// @(#)root/mysql:$Id$; // Author: Fons Rademakers 15/02/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:547,Modifiability,plugin,plugin,547,"// @(#)root/mysql:$Id$; // Author: Fons Rademakers 15/02/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:946,Security,access,access,946,"// @(#)root/mysql:$Id$; // Author: Fons Rademakers 15/02/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:1049,Security,password,password,1049,"// @(#)root/mysql:$Id$; // Author: Fons Rademakers 15/02/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:1515,Security,password,password,1515,"// @(#)root/mysql:$Id$; // Author: Fons Rademakers 15/02/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:810,Testability,test,test,810,"// @(#)root/mysql:$Id$; // Author: Fons Rademakers 15/02/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:981,Testability,test,test,981,"// @(#)root/mysql:$Id$; // Author: Fons Rademakers 15/02/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:1272,Testability,test,test,1272,"// @(#)root/mysql:$Id$; // Author: Fons Rademakers 15/02/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:1343,Testability,test,test,1343,"// @(#)root/mysql:$Id$; // Author: Fons Rademakers 15/02/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:1441,Testability,test,test,1441,"// @(#)root/mysql:$Id$; // Author: Fons Rademakers 15/02/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:1682,Testability,test,test,1682,"// @(#)root/mysql:$Id$; // Author: Fons Rademakers 15/02/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:1012,Integrability,protocol,protocol,1012,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a MySQL DB server. The db arguments should be; /// of the form ""mysql://<host>[:<port>][/<database>]"", e.g.:; /// ""mysql://pcroot.cern.ch:3456/test"". The uid is the username and pw; /// the password that should be used for the connection.; ///; /// In addition, several parameters can be specified in url after ""?"" symbol:; /// timeout=N n is connect timeout is seconds; /// socket=socketname socketname should be name of Unix socket, used; /// for connection; /// multi_statements tell the server that the client may send multiple; /// statements in a single string (separated by ;);; /// multi_results tell the server that the client can handle multiple; /// result sets from multiple-statement executions or; /// stored procedures; /// reconnect=0|1 enable or disable automatic reconnection to the server; /// if the connection is found to have been lost; /// compress use the compressed client/server protocol; /// cnf_file=filename Read options from the named option file instead of; /// from my.cnf; /// cnf_group=groupname Read options from the named group from my.cnf or the; /// file specified with cnf_file option; /// If several parameters are specified, they should be separated by ""&"" symbol; /// Example of connection argument:; /// TSQLServer::Connect(""mysql://host.domain/test?timeout=10&multi_statements"");",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:435,Safety,timeout,timeout,435,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a MySQL DB server. The db arguments should be; /// of the form ""mysql://<host>[:<port>][/<database>]"", e.g.:; /// ""mysql://pcroot.cern.ch:3456/test"". The uid is the username and pw; /// the password that should be used for the connection.; ///; /// In addition, several parameters can be specified in url after ""?"" symbol:; /// timeout=N n is connect timeout is seconds; /// socket=socketname socketname should be name of Unix socket, used; /// for connection; /// multi_statements tell the server that the client may send multiple; /// statements in a single string (separated by ;);; /// multi_results tell the server that the client can handle multiple; /// result sets from multiple-statement executions or; /// stored procedures; /// reconnect=0|1 enable or disable automatic reconnection to the server; /// if the connection is found to have been lost; /// compress use the compressed client/server protocol; /// cnf_file=filename Read options from the named option file instead of; /// from my.cnf; /// cnf_group=groupname Read options from the named group from my.cnf or the; /// file specified with cnf_file option; /// If several parameters are specified, they should be separated by ""&"" symbol; /// Example of connection argument:; /// TSQLServer::Connect(""mysql://host.domain/test?timeout=10&multi_statements"");",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:458,Safety,timeout,timeout,458,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a MySQL DB server. The db arguments should be; /// of the form ""mysql://<host>[:<port>][/<database>]"", e.g.:; /// ""mysql://pcroot.cern.ch:3456/test"". The uid is the username and pw; /// the password that should be used for the connection.; ///; /// In addition, several parameters can be specified in url after ""?"" symbol:; /// timeout=N n is connect timeout is seconds; /// socket=socketname socketname should be name of Unix socket, used; /// for connection; /// multi_statements tell the server that the client may send multiple; /// statements in a single string (separated by ;);; /// multi_results tell the server that the client can handle multiple; /// result sets from multiple-statement executions or; /// stored procedures; /// reconnect=0|1 enable or disable automatic reconnection to the server; /// if the connection is found to have been lost; /// compress use the compressed client/server protocol; /// cnf_file=filename Read options from the named option file instead of; /// from my.cnf; /// cnf_group=groupname Read options from the named group from my.cnf or the; /// file specified with cnf_file option; /// If several parameters are specified, they should be separated by ""&"" symbol; /// Example of connection argument:; /// TSQLServer::Connect(""mysql://host.domain/test?timeout=10&multi_statements"");",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:1400,Safety,timeout,timeout,1400,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a MySQL DB server. The db arguments should be; /// of the form ""mysql://<host>[:<port>][/<database>]"", e.g.:; /// ""mysql://pcroot.cern.ch:3456/test"". The uid is the username and pw; /// the password that should be used for the connection.; ///; /// In addition, several parameters can be specified in url after ""?"" symbol:; /// timeout=N n is connect timeout is seconds; /// socket=socketname socketname should be name of Unix socket, used; /// for connection; /// multi_statements tell the server that the client may send multiple; /// statements in a single string (separated by ;);; /// multi_results tell the server that the client can handle multiple; /// result sets from multiple-statement executions or; /// stored procedures; /// reconnect=0|1 enable or disable automatic reconnection to the server; /// if the connection is found to have been lost; /// compress use the compressed client/server protocol; /// cnf_file=filename Read options from the named option file instead of; /// from my.cnf; /// cnf_group=groupname Read options from the named group from my.cnf or the; /// file specified with cnf_file option; /// If several parameters are specified, they should be separated by ""&"" symbol; /// Example of connection argument:; /// TSQLServer::Connect(""mysql://host.domain/test?timeout=10&multi_statements"");",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:297,Security,password,password,297,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a MySQL DB server. The db arguments should be; /// of the form ""mysql://<host>[:<port>][/<database>]"", e.g.:; /// ""mysql://pcroot.cern.ch:3456/test"". The uid is the username and pw; /// the password that should be used for the connection.; ///; /// In addition, several parameters can be specified in url after ""?"" symbol:; /// timeout=N n is connect timeout is seconds; /// socket=socketname socketname should be name of Unix socket, used; /// for connection; /// multi_statements tell the server that the client may send multiple; /// statements in a single string (separated by ;);; /// multi_results tell the server that the client can handle multiple; /// result sets from multiple-statement executions or; /// stored procedures; /// reconnect=0|1 enable or disable automatic reconnection to the server; /// if the connection is found to have been lost; /// compress use the compressed client/server protocol; /// cnf_file=filename Read options from the named option file instead of; /// from my.cnf; /// cnf_group=groupname Read options from the named group from my.cnf or the; /// file specified with cnf_file option; /// If several parameters are specified, they should be separated by ""&"" symbol; /// Example of connection argument:; /// TSQLServer::Connect(""mysql://host.domain/test?timeout=10&multi_statements"");",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:250,Testability,test,test,250,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a MySQL DB server. The db arguments should be; /// of the form ""mysql://<host>[:<port>][/<database>]"", e.g.:; /// ""mysql://pcroot.cern.ch:3456/test"". The uid is the username and pw; /// the password that should be used for the connection.; ///; /// In addition, several parameters can be specified in url after ""?"" symbol:; /// timeout=N n is connect timeout is seconds; /// socket=socketname socketname should be name of Unix socket, used; /// for connection; /// multi_statements tell the server that the client may send multiple; /// statements in a single string (separated by ;);; /// multi_results tell the server that the client can handle multiple; /// result sets from multiple-statement executions or; /// stored procedures; /// reconnect=0|1 enable or disable automatic reconnection to the server; /// if the connection is found to have been lost; /// compress use the compressed client/server protocol; /// cnf_file=filename Read options from the named option file instead of; /// from my.cnf; /// cnf_group=groupname Read options from the named group from my.cnf or the; /// file specified with cnf_file option; /// If several parameters are specified, they should be separated by ""&"" symbol; /// Example of connection argument:; /// TSQLServer::Connect(""mysql://host.domain/test?timeout=10&multi_statements"");",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:1395,Testability,test,test,1395,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a MySQL DB server. The db arguments should be; /// of the form ""mysql://<host>[:<port>][/<database>]"", e.g.:; /// ""mysql://pcroot.cern.ch:3456/test"". The uid is the username and pw; /// the password that should be used for the connection.; ///; /// In addition, several parameters can be specified in url after ""?"" symbol:; /// timeout=N n is connect timeout is seconds; /// socket=socketname socketname should be name of Unix socket, used; /// for connection; /// multi_statements tell the server that the client may send multiple; /// statements in a single string (separated by ;);; /// multi_results tell the server that the client can handle multiple; /// result sets from multiple-statement executions or; /// stored procedures; /// reconnect=0|1 enable or disable automatic reconnection to the server; /// if the connection is found to have been lost; /// compress use the compressed client/server protocol; /// cnf_file=filename Read options from the named option file instead of; /// from my.cnf; /// cnf_group=groupname Read options from the named group from my.cnf or the; /// file specified with cnf_file option; /// If several parameters are specified, they should be separated by ""&"" symbol; /// Example of connection argument:; /// TSQLServer::Connect(""mysql://host.domain/test?timeout=10&multi_statements"");",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:9,Availability,error,error,9,"// Reset error and check that server connected",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:20,Availability,error,error,20,"// check last mysql error code",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:95,Availability,avail,available,95,"////////////////////////////////////////////////////////////////////////////////; /// List all available databases. Wild is for wildcarding ""t%"" list all; /// databases starting with ""t"".; /// Returns a pointer to a TSQLResult object if successful, 0 otherwise.; /// The result object must be deleted by the user.",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:86,Availability,Rollback,Rollback,86,"////////////////////////////////////////////////////////////////////////////////; /// Rollback changes",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:86,Deployability,Rollback,Rollback,86,"////////////////////////////////////////////////////////////////////////////////; /// Rollback changes",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:94,Availability,Ping,Ping,94,"////////////////////////////////////////////////////////////////////////////////; /// Execute Ping to SQL Connection.; /// Since mysql_ping tries to reconnect by itself,; /// a double call to the mysql function is implemented.; /// Returns kTRUE if successful",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:94,Availability,Ping,Ping,94,"////////////////////////////////////////////////////////////////////////////////; /// Execute Ping to SQL Connection using the mysql_ping function.; /// Returns 0 if successful, non-zero in case an error occured.",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:198,Availability,error,error,198,"////////////////////////////////////////////////////////////////////////////////; /// Execute Ping to SQL Connection using the mysql_ping function.; /// Returns 0 if successful, non-zero in case an error occured.",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:122,Energy Efficiency,allocate,allocated,122,"// 128 Mb; ////////////////////////////////////////////////////////////////////////////////; /// Return limit for maximal allocated memory for single parameter",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:108,Energy Efficiency,allocate,allocated,108,"////////////////////////////////////////////////////////////////////////////////; /// Set limit for maximal allocated memory for single parameter",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:9,Availability,error,error,9,"// Reset error and check that statement exists",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:30,Availability,error,error,30,"// check last mysql statement error code",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:30,Availability,error,error,30,"// check last mysql statement error code",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:74,Modifiability,variab,variables,74,"// if parameters was set, processing just means of closing parameters and variables",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:126,Security,access,access,126,"////////////////////////////////////////////////////////////////////////////////; /// Store result of statement processing to access them; /// via GetInt(), GetDouble() and so on methods.",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:3,Energy Efficiency,allocate,allocate,3,"// allocate memeory for data reading from query",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:86,Deployability,Release,Release,86,"////////////////////////////////////////////////////////////////////////////////; /// Release all buffers, used by statement.",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate buffers for statement parameters/ result fields.",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:254,Energy Efficiency,allocate,allocate,254,"////////////////////////////////////////////////////////////////////////////////; /// Set parameter type to be used as buffer.; /// Used in both setting data to database and retrieving data from data base.; /// Initialize proper MYSQL_BIND structure and allocate required buffers.",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:126,Security,access,access,126,"////////////////////////////////////////////////////////////////////////////////; /// Store result of statement processing to access them; /// via GetInt(), GetDouble() and so on methods.",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:86,Deployability,Release,Release,86,"////////////////////////////////////////////////////////////////////////////////; /// Release all buffers, used by statement.",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate buffers for statement parameters/ result fields.",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:253,Energy Efficiency,allocate,allocate,253,"////////////////////////////////////////////////////////////////////////////////; /// Set parameter type to be used as buffer.; /// Used in both setting data to database and retriving data from data base.; /// Initialize proper MYSQL_BIND structure and allocate required buffers.",MatchSource.CODE_COMMENT,sql/mysql/src/TMySQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCRow.cxx:134,Energy Efficiency,allocate,allocates,134,"////////////////////////////////////////////////////////////////////////////////; /// Extracts field value from statement.; /// First allocates 128 bytes for buffer.; /// If there is not enouth space, bigger buffer is allocated and; /// request is repeated",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCRow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCRow.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCRow.cxx:218,Energy Efficiency,allocate,allocated,218,"////////////////////////////////////////////////////////////////////////////////; /// Extracts field value from statement.; /// First allocates 128 bytes for buffer.; /// If there is not enouth space, bigger buffer is allocated and; /// request is repeated",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCRow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCRow.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:1897,Availability,down,download,1897,"t included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basic and Instant Client ODBC (~20 MB together).; /// Some remark about Instant Client:; /// 1) Two additional DLLs are required: mfc71.dll & msver71.dll; /// They can be found either in MS VC++ 7.1 Free Toolkit or; /// download from other Internet sites; /// 2) ORACLE_HOME environment variable should be specified and point to; /// location, where Instant Client files are extracted; /// 3) Run odbc_install.exe from account with administrative rights; /// 3) In $ORACLE_HOME/network/admin/ directory appropriate *.ora files; /// like ldap.ora, sqlnet.ora, tnsnames.ora should be installed.; /// Contact your Oracle administrator to get these files.; /// After Oracle ODBC driver is installed, appropriate entry in ODBC drivers; /// list like ""Oracle in instantclient10_2"" should appear. Connection; /// string example:; /// ""odbcd://DRIVER={Oracle in instantclient10_2};DBQ=db-test;UID=user_name;PWD=user_pass;"";",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:2217,Availability,down,download,2217,"t included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basic and Instant Client ODBC (~20 MB together).; /// Some remark about Instant Client:; /// 1) Two additional DLLs are required: mfc71.dll & msver71.dll; /// They can be found either in MS VC++ 7.1 Free Toolkit or; /// download from other Internet sites; /// 2) ORACLE_HOME environment variable should be specified and point to; /// location, where Instant Client files are extracted; /// 3) Run odbc_install.exe from account with administrative rights; /// 3) In $ORACLE_HOME/network/admin/ directory appropriate *.ora files; /// like ldap.ora, sqlnet.ora, tnsnames.ora should be installed.; /// Contact your Oracle administrator to get these files.; /// After Oracle ODBC driver is installed, appropriate entry in ODBC drivers; /// list like ""Oracle in instantclient10_2"" should appear. Connection; /// string example:; /// ""odbcd://DRIVER={Oracle in instantclient10_2};DBQ=db-test;UID=user_name;PWD=user_pass;"";",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:1560,Deployability,Install,Installing,1560,"ed. Works only with MySQL ODBC, probably with PostrSQL; /// ODBC.; /// 2. Form ""odbcd://DRIVER={MyODBC};SERVER=pcroot.cern.ch;DATABASE=test;USER=user;PASSWORD=pass;OPTION=3;PORT=3306;""; /// This is a form, which is accepted by SQLDriverConnect function of ODBC.; /// Here some other arguments can be specified, which are not included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basic and Instant Client ODBC (~20 MB together).; /// Some remark about Instant Client:; /// 1) Two additional DLLs are required: mfc71.dll & msver71.dll; /// They can be found either in MS VC++ 7.1 Free Toolkit or; /// download from other Internet sites; /// 2) ORACLE_HOME environment variable should be specified and point to; /// location, where Instant Client files are extracted; /// 3) Run odbc_install.exe from account with administrative rights; /// 3) In $ORACLE_HOME/network/admin/ directory appropriate *.ora files; /// like ldap.ora, sqlnet.ora, tnsnames.ora should be installed.; ",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:1846,Deployability,install,install,1846,"t included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basic and Instant Client ODBC (~20 MB together).; /// Some remark about Instant Client:; /// 1) Two additional DLLs are required: mfc71.dll & msver71.dll; /// They can be found either in MS VC++ 7.1 Free Toolkit or; /// download from other Internet sites; /// 2) ORACLE_HOME environment variable should be specified and point to; /// location, where Instant Client files are extracted; /// 3) Run odbc_install.exe from account with administrative rights; /// 3) In $ORACLE_HOME/network/admin/ directory appropriate *.ora files; /// like ldap.ora, sqlnet.ora, tnsnames.ora should be installed.; /// Contact your Oracle administrator to get these files.; /// After Oracle ODBC driver is installed, appropriate entry in ODBC drivers; /// list like ""Oracle in instantclient10_2"" should appear. Connection; /// string example:; /// ""odbcd://DRIVER={Oracle in instantclient10_2};DBQ=db-test;UID=user_name;PWD=user_pass;"";",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:1915,Deployability,install,install,1915,"t included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basic and Instant Client ODBC (~20 MB together).; /// Some remark about Instant Client:; /// 1) Two additional DLLs are required: mfc71.dll & msver71.dll; /// They can be found either in MS VC++ 7.1 Free Toolkit or; /// download from other Internet sites; /// 2) ORACLE_HOME environment variable should be specified and point to; /// location, where Instant Client files are extracted; /// 3) Run odbc_install.exe from account with administrative rights; /// 3) In $ORACLE_HOME/network/admin/ directory appropriate *.ora files; /// like ldap.ora, sqlnet.ora, tnsnames.ora should be installed.; /// Contact your Oracle administrator to get these files.; /// After Oracle ODBC driver is installed, appropriate entry in ODBC drivers; /// list like ""Oracle in instantclient10_2"" should appear. Connection; /// string example:; /// ""odbcd://DRIVER={Oracle in instantclient10_2};DBQ=db-test;UID=user_name;PWD=user_pass;"";",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:2579,Deployability,install,installed,2579,"t included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basic and Instant Client ODBC (~20 MB together).; /// Some remark about Instant Client:; /// 1) Two additional DLLs are required: mfc71.dll & msver71.dll; /// They can be found either in MS VC++ 7.1 Free Toolkit or; /// download from other Internet sites; /// 2) ORACLE_HOME environment variable should be specified and point to; /// location, where Instant Client files are extracted; /// 3) Run odbc_install.exe from account with administrative rights; /// 3) In $ORACLE_HOME/network/admin/ directory appropriate *.ora files; /// like ldap.ora, sqlnet.ora, tnsnames.ora should be installed.; /// Contact your Oracle administrator to get these files.; /// After Oracle ODBC driver is installed, appropriate entry in ODBC drivers; /// list like ""Oracle in instantclient10_2"" should appear. Connection; /// string example:; /// ""odbcd://DRIVER={Oracle in instantclient10_2};DBQ=db-test;UID=user_name;PWD=user_pass;"";",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:2682,Deployability,install,installed,2682,"t included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basic and Instant Client ODBC (~20 MB together).; /// Some remark about Instant Client:; /// 1) Two additional DLLs are required: mfc71.dll & msver71.dll; /// They can be found either in MS VC++ 7.1 Free Toolkit or; /// download from other Internet sites; /// 2) ORACLE_HOME environment variable should be specified and point to; /// location, where Instant Client files are extracted; /// 3) Run odbc_install.exe from account with administrative rights; /// 3) In $ORACLE_HOME/network/admin/ directory appropriate *.ora files; /// like ldap.ora, sqlnet.ora, tnsnames.ora should be installed.; /// Contact your Oracle administrator to get these files.; /// After Oracle ODBC driver is installed, appropriate entry in ODBC drivers; /// list like ""Oracle in instantclient10_2"" should appear. Connection; /// string example:; /// ""odbcd://DRIVER={Oracle in instantclient10_2};DBQ=db-test;UID=user_name;PWD=user_pass;"";",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:1129,Modifiability,Config,Configuring,1129,"; /// 1. Form ""odbc://[user[:passwd]@]<host>[:<port>][/<database>][?Driver]"",; /// e.g.: ""odbc://pcroot.cern.ch:3306/test?MySQL"".; /// Driver argument specifies ODBC driver, which should be used for; /// connection. By default, MyODBC driver name is used.; /// The uid is the username and pw the password that should be used; /// for the connection.; /// If uid and pw are not specified (==0), user and passwd arguments from; /// URL will be used. Works only with MySQL ODBC, probably with PostrSQL; /// ODBC.; /// 2. Form ""odbcd://DRIVER={MyODBC};SERVER=pcroot.cern.ch;DATABASE=test;USER=user;PASSWORD=pass;OPTION=3;PORT=3306;""; /// This is a form, which is accepted by SQLDriverConnect function of ODBC.; /// Here some other arguments can be specified, which are not included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basic and Instant Client ODBC (~20 MB together).; /// Some remark about Instant Client:; /// 1) Two additional DLLs are required: mfc71.dll & msver71",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:1257,Modifiability,config,configure,1257,"bc://pcroot.cern.ch:3306/test?MySQL"".; /// Driver argument specifies ODBC driver, which should be used for; /// connection. By default, MyODBC driver name is used.; /// The uid is the username and pw the password that should be used; /// for the connection.; /// If uid and pw are not specified (==0), user and passwd arguments from; /// URL will be used. Works only with MySQL ODBC, probably with PostrSQL; /// ODBC.; /// 2. Form ""odbcd://DRIVER={MyODBC};SERVER=pcroot.cern.ch;DATABASE=test;USER=user;PASSWORD=pass;OPTION=3;PORT=3306;""; /// This is a form, which is accepted by SQLDriverConnect function of ODBC.; /// Here some other arguments can be specified, which are not included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basic and Instant Client ODBC (~20 MB together).; /// Some remark about Instant Client:; /// 1) Two additional DLLs are required: mfc71.dll & msver71.dll; /// They can be found either in MS VC++ 7.1 Free Toolkit or; /// download from other In",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:1396,Modifiability,variab,variables,1396,"sed.; /// The uid is the username and pw the password that should be used; /// for the connection.; /// If uid and pw are not specified (==0), user and passwd arguments from; /// URL will be used. Works only with MySQL ODBC, probably with PostrSQL; /// ODBC.; /// 2. Form ""odbcd://DRIVER={MyODBC};SERVER=pcroot.cern.ch;DATABASE=test;USER=user;PASSWORD=pass;OPTION=3;PORT=3306;""; /// This is a form, which is accepted by SQLDriverConnect function of ODBC.; /// Here some other arguments can be specified, which are not included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basic and Instant Client ODBC (~20 MB together).; /// Some remark about Instant Client:; /// 1) Two additional DLLs are required: mfc71.dll & msver71.dll; /// They can be found either in MS VC++ 7.1 Free Toolkit or; /// download from other Internet sites; /// 2) ORACLE_HOME environment variable should be specified and point to; /// location, where Instant Client files are extracted; /// 3) Run odbc",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:1517,Modifiability,Config,Configuring,1517,"d and pw are not specified (==0), user and passwd arguments from; /// URL will be used. Works only with MySQL ODBC, probably with PostrSQL; /// ODBC.; /// 2. Form ""odbcd://DRIVER={MyODBC};SERVER=pcroot.cern.ch;DATABASE=test;USER=user;PASSWORD=pass;OPTION=3;PORT=3306;""; /// This is a form, which is accepted by SQLDriverConnect function of ODBC.; /// Here some other arguments can be specified, which are not included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basic and Instant Client ODBC (~20 MB together).; /// Some remark about Instant Client:; /// 1) Two additional DLLs are required: mfc71.dll & msver71.dll; /// They can be found either in MS VC++ 7.1 Free Toolkit or; /// download from other Internet sites; /// 2) ORACLE_HOME environment variable should be specified and point to; /// location, where Instant Client files are extracted; /// 3) Run odbc_install.exe from account with administrative rights; /// 3) In $ORACLE_HOME/network/admin/ directory approp",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:1713,Modifiability,config,configure,1713,";PORT=3306;""; /// This is a form, which is accepted by SQLDriverConnect function of ODBC.; /// Here some other arguments can be specified, which are not included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basic and Instant Client ODBC (~20 MB together).; /// Some remark about Instant Client:; /// 1) Two additional DLLs are required: mfc71.dll & msver71.dll; /// They can be found either in MS VC++ 7.1 Free Toolkit or; /// download from other Internet sites; /// 2) ORACLE_HOME environment variable should be specified and point to; /// location, where Instant Client files are extracted; /// 3) Run odbc_install.exe from account with administrative rights; /// 3) In $ORACLE_HOME/network/admin/ directory appropriate *.ora files; /// like ldap.ora, sqlnet.ora, tnsnames.ora should be installed.; /// Contact your Oracle administrator to get these files.; /// After Oracle ODBC driver is installed, appropriate entry in ODBC drivers; /// list like ""Oracle in instantcli",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:2284,Modifiability,variab,variable,2284,"t included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basic and Instant Client ODBC (~20 MB together).; /// Some remark about Instant Client:; /// 1) Two additional DLLs are required: mfc71.dll & msver71.dll; /// They can be found either in MS VC++ 7.1 Free Toolkit or; /// download from other Internet sites; /// 2) ORACLE_HOME environment variable should be specified and point to; /// location, where Instant Client files are extracted; /// 3) Run odbc_install.exe from account with administrative rights; /// 3) In $ORACLE_HOME/network/admin/ directory appropriate *.ora files; /// like ldap.ora, sqlnet.ora, tnsnames.ora should be installed.; /// Contact your Oracle administrator to get these files.; /// After Oracle ODBC driver is installed, appropriate entry in ODBC drivers; /// list like ""Oracle in instantclient10_2"" should appear. Connection; /// string example:; /// ""odbcd://DRIVER={Oracle in instantclient10_2};DBQ=db-test;UID=user_name;PWD=user_pass;"";",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:442,Security,password,password,442,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a ODBC server. The db arguments can be:; /// 1. Form ""odbc://[user[:passwd]@]<host>[:<port>][/<database>][?Driver]"",; /// e.g.: ""odbc://pcroot.cern.ch:3306/test?MySQL"".; /// Driver argument specifies ODBC driver, which should be used for; /// connection. By default, MyODBC driver name is used.; /// The uid is the username and pw the password that should be used; /// for the connection.; /// If uid and pw are not specified (==0), user and passwd arguments from; /// URL will be used. Works only with MySQL ODBC, probably with PostrSQL; /// ODBC.; /// 2. Form ""odbcd://DRIVER={MyODBC};SERVER=pcroot.cern.ch;DATABASE=test;USER=user;PASSWORD=pass;OPTION=3;PORT=3306;""; /// This is a form, which is accepted by SQLDriverConnect function of ODBC.; /// Here some other arguments can be specified, which are not included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basi",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:740,Security,PASSWORD,PASSWORD,740,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a ODBC server. The db arguments can be:; /// 1. Form ""odbc://[user[:passwd]@]<host>[:<port>][/<database>][?Driver]"",; /// e.g.: ""odbc://pcroot.cern.ch:3306/test?MySQL"".; /// Driver argument specifies ODBC driver, which should be used for; /// connection. By default, MyODBC driver name is used.; /// The uid is the username and pw the password that should be used; /// for the connection.; /// If uid and pw are not specified (==0), user and passwd arguments from; /// URL will be used. Works only with MySQL ODBC, probably with PostrSQL; /// ODBC.; /// 2. Form ""odbcd://DRIVER={MyODBC};SERVER=pcroot.cern.ch;DATABASE=test;USER=user;PASSWORD=pass;OPTION=3;PORT=3306;""; /// This is a form, which is accepted by SQLDriverConnect function of ODBC.; /// Here some other arguments can be specified, which are not included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basi",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:263,Testability,test,test,263,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a ODBC server. The db arguments can be:; /// 1. Form ""odbc://[user[:passwd]@]<host>[:<port>][/<database>][?Driver]"",; /// e.g.: ""odbc://pcroot.cern.ch:3306/test?MySQL"".; /// Driver argument specifies ODBC driver, which should be used for; /// connection. By default, MyODBC driver name is used.; /// The uid is the username and pw the password that should be used; /// for the connection.; /// If uid and pw are not specified (==0), user and passwd arguments from; /// URL will be used. Works only with MySQL ODBC, probably with PostrSQL; /// ODBC.; /// 2. Form ""odbcd://DRIVER={MyODBC};SERVER=pcroot.cern.ch;DATABASE=test;USER=user;PASSWORD=pass;OPTION=3;PORT=3306;""; /// This is a form, which is accepted by SQLDriverConnect function of ODBC.; /// Here some other arguments can be specified, which are not included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basi",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:725,Testability,test,test,725,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a ODBC server. The db arguments can be:; /// 1. Form ""odbc://[user[:passwd]@]<host>[:<port>][/<database>][?Driver]"",; /// e.g.: ""odbc://pcroot.cern.ch:3306/test?MySQL"".; /// Driver argument specifies ODBC driver, which should be used for; /// connection. By default, MyODBC driver name is used.; /// The uid is the username and pw the password that should be used; /// for the connection.; /// If uid and pw are not specified (==0), user and passwd arguments from; /// URL will be used. Works only with MySQL ODBC, probably with PostrSQL; /// ODBC.; /// 2. Form ""odbcd://DRIVER={MyODBC};SERVER=pcroot.cern.ch;DATABASE=test;USER=user;PASSWORD=pass;OPTION=3;PORT=3306;""; /// This is a form, which is accepted by SQLDriverConnect function of ODBC.; /// Here some other arguments can be specified, which are not included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basi",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:2877,Testability,test,test,2877,"t included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basic and Instant Client ODBC (~20 MB together).; /// Some remark about Instant Client:; /// 1) Two additional DLLs are required: mfc71.dll & msver71.dll; /// They can be found either in MS VC++ 7.1 Free Toolkit or; /// download from other Internet sites; /// 2) ORACLE_HOME environment variable should be specified and point to; /// location, where Instant Client files are extracted; /// 3) Run odbc_install.exe from account with administrative rights; /// 3) In $ORACLE_HOME/network/admin/ directory appropriate *.ora files; /// like ldap.ora, sqlnet.ora, tnsnames.ora should be installed.; /// Contact your Oracle administrator to get these files.; /// After Oracle ODBC driver is installed, appropriate entry in ODBC drivers; /// list like ""Oracle in instantclient10_2"" should appear. Connection; /// string example:; /// ""odbcd://DRIVER={Oracle in instantclient10_2};DBQ=db-test;UID=user_name;PWD=user_pass;"";",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate connection handle */,MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:13,Safety,timeout,timeout,13,/* Set login timeout to 5 seconds. */,MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:7,Testability,log,login,7,/* Set login timeout to 5 seconds. */,MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:120,Availability,avail,available,120,"////////////////////////////////////////////////////////////////////////////////; /// Produce TList object with list of available; /// ODBC drivers (isdrivers = kTRUE) or data sources (isdrivers = kFALSE)",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:120,Availability,avail,available,120,"////////////////////////////////////////////////////////////////////////////////; /// Produce TList object with list of available ODBC drivers; /// User must delete TList object afterwards; /// Name of driver can be used in connecting to data base in form; /// TSQLServer::Connect(""odbcd://DRIVER={<drivername>};DBQ=<dbname>;UID=user;PWD=pass;"", 0, 0);",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:120,Availability,avail,available,120,"////////////////////////////////////////////////////////////////////////////////; /// Produce TList object with list of available ODBC data sources; /// User must delete TList object afterwards; /// Name of data source can be used later for connection:; /// TSQLServer::Connect(""odbcn://<data_source_name>"", ""user"", ""pass"");",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:94,Availability,error,errors,94,"////////////////////////////////////////////////////////////////////////////////; /// Extract errors, produced by last ODBC function call",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:9,Availability,error,error,9,"// Reset error and check that server connected",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:95,Availability,avail,available,95,"////////////////////////////////////////////////////////////////////////////////; /// List all available databases. Wild is for wildcarding ""t%"" list all; /// databases starting with ""t"".; /// Returns a pointer to a TSQLResult object if successful, 0 otherwise.; /// The result object must be deleted by the user.",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:29,Availability,avail,available,29,/* Declare buffers for bytes available to return */,MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:135,Availability,rollback,rollback,135,"////////////////////////////////////////////////////////////////////////////////; /// Complete current transaction (commit = kTRUE) or rollback; /// Switches on autocommit mode of ODBC driver",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:135,Deployability,rollback,rollback,135,"////////////////////////////////////////////////////////////////////////////////; /// Complete current transaction (commit = kTRUE) or rollback; /// Switches on autocommit mode of ODBC driver",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:86,Availability,Rollback,Rollback,86,"////////////////////////////////////////////////////////////////////////////////; /// Rollback transaction",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:86,Deployability,Rollback,Rollback,86,"////////////////////////////////////////////////////////////////////////////////; /// Rollback transaction",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx:91,Security,access,access,91,"// after Process we finish working with parameters data,; // if necessary, user can try to access resultset of statement",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx:52,Security,access,access,52,"// just execute statement,; // later one can try to access results of statement",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx:198,Security,access,accessed,198,"////////////////////////////////////////////////////////////////////////////////; /// Store result of statement processing.; /// Results set, produced by processing of statement, can be stored, and accessed by; /// TODBCStamenet methoods like NextResultRow(), GetInt(), GetLong() and so on.",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx:94,Availability,error,errors,94,"////////////////////////////////////////////////////////////////////////////////; /// Extract errors, produced by last ODBC function call",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx:3,Availability,Error,Error,3,"// Error(method, ""%s:%ld:%ld:%s\n"", state, i, native, text);",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx:91,Energy Efficiency,allocate,allocated,91,"////////////////////////////////////////////////////////////////////////////////; /// Free allocated buffers",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx:116,Energy Efficiency,Allocate,Allocate,116,"////////////////////////////////////////////////////////////////////////////////; /// Bind result column to buffer. Allocate buffer of appropriate type",MatchSource.CODE_COMMENT,sql/odbc/src/TODBCStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLServer.cxx:86,Modifiability,Plugin,PluginManager,86,"////////////////////////////////////////////////////////////////////////////////; /// PluginManager generator function",MatchSource.CODE_COMMENT,sql/pgsql/src/TPgSQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLServer.cxx:297,Security,password,password,297,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a PgSQL DB server. The db arguments should be; /// of the form ""pgsql://<host>[:<port>][/<database>]"", e.g.:; /// ""pgsql://pcroot.cern.ch:3456/test"". The uid is the username and pw; /// the password that should be used for the connection.",MatchSource.CODE_COMMENT,sql/pgsql/src/TPgSQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLServer.cxx:250,Testability,test,test,250,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a PgSQL DB server. The db arguments should be; /// of the form ""pgsql://<host>[:<port>][/<database>]"", e.g.:; /// ""pgsql://pcroot.cern.ch:3456/test"". The uid is the username and pw; /// the password that should be used for the connection.",MatchSource.CODE_COMMENT,sql/pgsql/src/TPgSQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLServer.cxx:95,Availability,avail,available,95,"////////////////////////////////////////////////////////////////////////////////; /// List all available databases. Wild is for wildcarding ""t%"" list all; /// databases starting with ""t"".; /// Returns a pointer to a TSQLResult object if successful, 0 otherwise.; /// The result object must be deleted by the user.",MatchSource.CODE_COMMENT,sql/pgsql/src/TPgSQLServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx:9,Availability,error,error,9,"// Reset error and check that statement exists",MatchSource.CODE_COMMENT,sql/pgsql/src/TPgSQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx:30,Availability,error,error,30,"// check last pgsql statement error code",MatchSource.CODE_COMMENT,sql/pgsql/src/TPgSQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx:126,Security,access,access,126,"////////////////////////////////////////////////////////////////////////////////; /// Store result of statement processing to access them; /// via GetInt(), GetDouble() and so on methods.",MatchSource.CODE_COMMENT,sql/pgsql/src/TPgSQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx:86,Deployability,Release,Release,86,"////////////////////////////////////////////////////////////////////////////////; /// Release all buffers, used by statement.",MatchSource.CODE_COMMENT,sql/pgsql/src/TPgSQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate buffers for statement parameters/ result fields.",MatchSource.CODE_COMMENT,sql/pgsql/src/TPgSQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx:126,Security,access,access,126,"////////////////////////////////////////////////////////////////////////////////; /// Store result of statement processing to access them; /// via GetInt(), GetDouble() and so on methods.",MatchSource.CODE_COMMENT,sql/pgsql/src/TPgSQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx:86,Deployability,Release,Release,86,"////////////////////////////////////////////////////////////////////////////////; /// Release all buffers, used by statement.",MatchSource.CODE_COMMENT,sql/pgsql/src/TPgSQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate buffers for statement parameters/ result fields.",MatchSource.CODE_COMMENT,sql/pgsql/src/TPgSQLStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteRow.cxx:19,Security,access,access-method,19,"// Should call the access-method first, so sqlite3 can check whether a NULL-terminator; // needs to be added to the byte-count, e.g. for BLOB!",MatchSource.CODE_COMMENT,sql/sqlite/src/TSQLiteRow.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteRow.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteServer.cxx:216,Testability,test,test,216,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to an SQLite DB server. The db arguments should be; /// of the form ""sqlite://<database>"", e.g.:; /// ""sqlite://test.sqlite"" or ""sqlite://:memory:"" for a temporary database; /// in memory.; /// Note that for SQLite versions >= 3.7.7 the full string behind; /// ""sqlite://"" is handed to sqlite3_open_v2() with SQLITE_OPEN_URI activated,; /// so all URI accepted by it can be used.",MatchSource.CODE_COMMENT,sql/sqlite/src/TSQLiteServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteServer.cxx:31,Integrability,interface,interface,31,"// Set members of the abstract interface",MatchSource.CODE_COMMENT,sql/sqlite/src/TSQLiteServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteServer.cxx:94,Availability,ROLLBACK,ROLLBACK,94,"////////////////////////////////////////////////////////////////////////////////; /// submit ""ROLLBACK TRANSACTION"" query to database; /// return kTRUE, if successful",MatchSource.CODE_COMMENT,sql/sqlite/src/TSQLiteServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteServer.cxx:94,Deployability,ROLLBACK,ROLLBACK,94,"////////////////////////////////////////////////////////////////////////////////; /// submit ""ROLLBACK TRANSACTION"" query to database; /// return kTRUE, if successful",MatchSource.CODE_COMMENT,sql/sqlite/src/TSQLiteServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteServer.cxx:95,Availability,avail,available,95,"////////////////////////////////////////////////////////////////////////////////; /// List all available databases. Always returns 0 for SQLite,; /// as only one DB exists per file.",MatchSource.CODE_COMMENT,sql/sqlite/src/TSQLiteServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteServer.cxx:21,Availability,avail,available,21,"// Field length only available querying the field",MatchSource.CODE_COMMENT,sql/sqlite/src/TSQLiteServer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteServer.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteStatement.cxx:9,Availability,error,error,9,"// Reset error and check that statement exists",MatchSource.CODE_COMMENT,sql/sqlite/src/TSQLiteStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteStatement.cxx:126,Security,access,access,126,"////////////////////////////////////////////////////////////////////////////////; /// Store result of statement processing to access them; /// via GetInt(), GetDouble() and so on methods.; /// For SQLite, this is a NO-OP.",MatchSource.CODE_COMMENT,sql/sqlite/src/TSQLiteStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteStatement.cxx:7,Integrability,interface,interface,7,"// The interface says user should call NextResultRow() before getting any data,; // this makes no sense at least for SQLite.; // We just return kTRUE here and only do something on second request.",MatchSource.CODE_COMMENT,sql/sqlite/src/TSQLiteStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteStatement.cxx:327,Availability,ping,ping,327,"////////////////////////////////////////////////////////////////////////////////; /// Increment iteration counter for statement, where parameter can be set.; /// Statement with parameters of previous iteration; /// automatically will be applied to database.; /// Actually a NO-OP for SQLite, as parameters stay bound when step-ping.",MatchSource.CODE_COMMENT,sql/sqlite/src/TSQLiteStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteStatement.cxx:7,Integrability,interface,interface,7,"// The interface says user should call NextIteration() before binding any parameters,; // this makes no sense at least for SQLite.; // We just return kTRUE here and wait for data to really do something.",MatchSource.CODE_COMMENT,sql/sqlite/src/TSQLiteStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteStatement.cxx:172,Deployability,update,updated,172,"////////////////////////////////////////////////////////////////////////////////; /// Return field value as binary array.; /// Memory at 'mem' will be reallocated and size updated; /// to fit the data if not large enough.",MatchSource.CODE_COMMENT,sql/sqlite/src/TSQLiteStatement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteStatement.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx:272,Performance,Load,Load,272,"// @(#)root/test:$Id$; // Author: Valeriy Onuchin & Fons Rademakers 04/10/98; ///////////////////////////////////////////////////////////////////; // ROOT implementation of the X11 xclock.; //; // To run this example do the following:; //; // $ root; // root [0] gSystem->Load(""libGpad""); // root [1] gSystem->Load(""Aclock""); // root [1] Aclock a; // <enjoy>; // root [2] .q; //; // Other ROOT fun examples: Tetris, Hello ...; //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Aclock.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx:310,Performance,Load,Load,310,"// @(#)root/test:$Id$; // Author: Valeriy Onuchin & Fons Rademakers 04/10/98; ///////////////////////////////////////////////////////////////////; // ROOT implementation of the X11 xclock.; //; // To run this example do the following:; //; // $ root; // root [0] gSystem->Load(""libGpad""); // root [1] gSystem->Load(""Aclock""); // root [1] Aclock a; // <enjoy>; // root [2] .q; //; // Other ROOT fun examples: Tetris, Hello ...; //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Aclock.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Valeriy Onuchin & Fons Rademakers 04/10/98; ///////////////////////////////////////////////////////////////////; // ROOT implementation of the X11 xclock.; //; // To run this example do the following:; //; // $ root; // root [0] gSystem->Load(""libGpad""); // root [1] gSystem->Load(""Aclock""); // root [1] Aclock a; // <enjoy>; // root [2] .q; //; // Other ROOT fun examples: Tetris, Hello ...; //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Aclock.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx:3,Deployability,Update,Update,3,"// Update hand position",MatchSource.CODE_COMMENT,test/Aclock.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx:3,Deployability,Update,Update,3,"// Update clock hand positions and redraw the fPad",MatchSource.CODE_COMMENT,test/Aclock.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx:3,Deployability,update,update,3,"// update position every minute",MatchSource.CODE_COMMENT,test/Aclock.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx:3,Deployability,update,update,3,"// update position every minute",MatchSource.CODE_COMMENT,test/Aclock.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx:3,Deployability,update,update,3,"// update position every second",MatchSource.CODE_COMMENT,test/Aclock.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Aclock.h:189,Performance,Load,Load,189,"///////////////////////////////////////////////////////////////////; // ROOT implementation of the X11 xclock.; //; // To run this example do the following:; // $ root; // root [0] gSystem.Load(""Aclock""); // root [1] Aclock a; // <enjoy>; // root [2] .q; //; // Other ROOT fun examples: Tetris, Hello ...; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Aclock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Aclock.h
https://github.com/root-project/root/tree/v6-32-06/test/Aclock.h:11,Deployability,update,update,11,"// used to update every second",MatchSource.CODE_COMMENT,test/Aclock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Aclock.h
https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx:38,Performance,perform,performance,38,"// this test program compares the I/O performance obtained with; // all STL collections of objects or pointers to objects and also; // Root collection class TClonesArray.; // Trees in compression and non compression mode are created for each; // of the following cases:; // -STLcollection<THit>; // -STLcollection<THit*>; // -TClonesArray(TObjHit) in no split mode; // -TClonesArray(TObjHit) in split mode; // where:; // THit is a class not derived from TObject; // TObjHit derives from TObject and THit; //; // run with; // bench; // or; // bench -m to stream objects memberwise; //; // The test prints a summary table comparing performances for all above cases; // (CPU, file size, compression factors).; // Reference numbers on a Pentium IV 2.4 Ghz machine are given as reference.; // Authors: Rene Brun, Markus Frank",MatchSource.CODE_COMMENT,test/bench.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx
https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx:630,Performance,perform,performances,630,"// this test program compares the I/O performance obtained with; // all STL collections of objects or pointers to objects and also; // Root collection class TClonesArray.; // Trees in compression and non compression mode are created for each; // of the following cases:; // -STLcollection<THit>; // -STLcollection<THit*>; // -TClonesArray(TObjHit) in no split mode; // -TClonesArray(TObjHit) in split mode; // where:; // THit is a class not derived from TObject; // TObjHit derives from TObject and THit; //; // run with; // bench; // or; // bench -m to stream objects memberwise; //; // The test prints a summary table comparing performances for all above cases; // (CPU, file size, compression factors).; // Reference numbers on a Pentium IV 2.4 Ghz machine are given as reference.; // Authors: Rene Brun, Markus Frank",MatchSource.CODE_COMMENT,test/bench.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx
https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx:8,Testability,test,test,8,"// this test program compares the I/O performance obtained with; // all STL collections of objects or pointers to objects and also; // Root collection class TClonesArray.; // Trees in compression and non compression mode are created for each; // of the following cases:; // -STLcollection<THit>; // -STLcollection<THit*>; // -TClonesArray(TObjHit) in no split mode; // -TClonesArray(TObjHit) in split mode; // where:; // THit is a class not derived from TObject; // TObjHit derives from TObject and THit; //; // run with; // bench; // or; // bench -m to stream objects memberwise; //; // The test prints a summary table comparing performances for all above cases; // (CPU, file size, compression factors).; // Reference numbers on a Pentium IV 2.4 Ghz machine are given as reference.; // Authors: Rene Brun, Markus Frank",MatchSource.CODE_COMMENT,test/bench.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx
https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx:592,Testability,test,test,592,"// this test program compares the I/O performance obtained with; // all STL collections of objects or pointers to objects and also; // Root collection class TClonesArray.; // Trees in compression and non compression mode are created for each; // of the following cases:; // -STLcollection<THit>; // -STLcollection<THit*>; // -TClonesArray(TObjHit) in no split mode; // -TClonesArray(TObjHit) in split mode; // where:; // THit is a class not derived from TObject; // TObjHit derives from TObject and THit; //; // run with; // bench; // or; // bench -m to stream objects memberwise; //; // The test prints a summary table comparing performances for all above cases; // (CPU, file size, compression factors).; // Reference numbers on a Pentium IV 2.4 Ghz machine are given as reference.; // Authors: Rene Brun, Markus Frank",MatchSource.CODE_COMMENT,test/bench.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx
https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx:32,Testability,benchmark,benchmark,32,"//delete temp file used for the benchmark",MatchSource.CODE_COMMENT,test/bench.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx
https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx:84,Testability,test,testing,84,"//__________________________________________________________________________; //; //testing STL vector of pointers to THit",MatchSource.CODE_COMMENT,test/bench.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx
https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx:84,Testability,test,testing,84,"//__________________________________________________________________________; //; //testing STL vector of pointers to THit (NOSPLIT)",MatchSource.CODE_COMMENT,test/bench.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx
https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx:85,Testability,test,testing,85,"//___________________________________________________________________________; //; //testing TClonesArray of TObjHit deriving from THit",MatchSource.CODE_COMMENT,test/bench.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/bench.cxx
https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Federico Carminati 22/04/2004; // test program for the class TComplex",MatchSource.CODE_COMMENT,test/ctorture.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx
https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:68,Testability,test,test,68,"// @(#)root/test:$Id$; // Author: Federico Carminati 22/04/2004; // test program for the class TComplex",MatchSource.CODE_COMMENT,test/ctorture.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx
https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:19,Testability,log,log,19,"// Torture exp and log",MatchSource.CODE_COMMENT,test/ctorture.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx
https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:1891,Availability,error,error,1891," complex - complex; //; // Important note on the following tests. The operation of raising a complex; // number to a power does not yet a single value, but rather an infinite; // number of values, particularly if the number is non rational.; // For a real number a, you can define a^(b+ic) by writing a = e^(ln a):; //; // b+ic (ln a)(b+ic) (b ln a) + i(c ln a); // a = e = e; //; // (b ln a); // = e ( cos (c ln a) + i sin (c ln a) ); //; // b; // = a ( cos (c ln a) + i sin (c ln a) ).; //; // Now, if a is a complex number instead of a real number, there is no; // single value to ""ln a"": there are lots of different complex numbers z; // for which e^z = a, and for any such complex number z, you could define; // a^(b+ic) to be e^(z(b+ic)) and use the above technique to calculate it.; //; // In fact, the same thing is true even when a is a real number. The; // expression a^(b+ic) has many possible values (infinite except when b; // and c are both rational numbers), because instead of doing the calculation; // writing a = e^(ln a), you could also do it by writing a = e^(ln a + 2pi i); // or by writing a = e^(ln a + 4 pi i), or a = e^(ln a + 6 pi i), and so on.; // Each of these equalities is true (in fact e^(2pi n i)=1 for integer n).; //; // When a is real it is more ""natural"" to use the ordinary real-valued; // logarithm ln a rather than than something like ln a + 2 pi i.; // Technically, this value is called the principal value. This is what; // the formula up above gives you. Unfortunately this alone does not; // guarantees that the inverse operation brings you back where you; // started from.; //; // When a is not real there is no one natural choice of logarithm to prefer; // over any other, so in those cases we have to say that an expression like; // a^(b+ic) has many different values.; //; // This is because in these tests we exclude from the error output the; // results where we ended up very far from the initial value, and the; // difference is more than 50%.; //",MatchSource.CODE_COMMENT,test/ctorture.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx
https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:11,Energy Efficiency,Power,Power,11,"// Torture Power complex - complex; //; // Important note on the following tests. The operation of raising a complex; // number to a power does not yet a single value, but rather an infinite; // number of values, particularly if the number is non rational.; // For a real number a, you can define a^(b+ic) by writing a = e^(ln a):; //; // b+ic (ln a)(b+ic) (b ln a) + i(c ln a); // a = e = e; //; // (b ln a); // = e ( cos (c ln a) + i sin (c ln a) ); //; // b; // = a ( cos (c ln a) + i sin (c ln a) ).; //; // Now, if a is a complex number instead of a real number, there is no; // single value to ""ln a"": there are lots of different complex numbers z; // for which e^z = a, and for any such complex number z, you could define; // a^(b+ic) to be e^(z(b+ic)) and use the above technique to calculate it.; //; // In fact, the same thing is true even when a is a real number. The; // expression a^(b+ic) has many possible values (infinite except when b; // and c are both rational numbers), because instead of doing the calculation; // writing a = e^(ln a), you could also do it by writing a = e^(ln a + 2pi i); // or by writing a = e^(ln a + 4 pi i), or a = e^(ln a + 6 pi i), and so on.; // Each of these equalities is true (in fact e^(2pi n i)=1 for integer n).; //; // When a is real it is more ""natural"" to use the ordinary real-valued; // logarithm ln a rather than than something like ln a + 2 pi i.; // Technically, this value is called the principal value. This is what; // the formula up above gives you. Unfortunately this alone does not; // guarantees that the inverse operation brings you back where you; // started from.; //; // When a is not real there is no one natural choice of logarithm to prefer; // over any other, so in those cases we have to say that an expression like; // a^(b+ic) has many different values.; //; // This is because in these tests we exclude from the error output the; // results where we ended up very far from the initial value, and the; // difference is more",MatchSource.CODE_COMMENT,test/ctorture.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx
https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:133,Energy Efficiency,power,power,133,"// Torture Power complex - complex; //; // Important note on the following tests. The operation of raising a complex; // number to a power does not yet a single value, but rather an infinite; // number of values, particularly if the number is non rational.; // For a real number a, you can define a^(b+ic) by writing a = e^(ln a):; //; // b+ic (ln a)(b+ic) (b ln a) + i(c ln a); // a = e = e; //; // (b ln a); // = e ( cos (c ln a) + i sin (c ln a) ); //; // b; // = a ( cos (c ln a) + i sin (c ln a) ).; //; // Now, if a is a complex number instead of a real number, there is no; // single value to ""ln a"": there are lots of different complex numbers z; // for which e^z = a, and for any such complex number z, you could define; // a^(b+ic) to be e^(z(b+ic)) and use the above technique to calculate it.; //; // In fact, the same thing is true even when a is a real number. The; // expression a^(b+ic) has many possible values (infinite except when b; // and c are both rational numbers), because instead of doing the calculation; // writing a = e^(ln a), you could also do it by writing a = e^(ln a + 2pi i); // or by writing a = e^(ln a + 4 pi i), or a = e^(ln a + 6 pi i), and so on.; // Each of these equalities is true (in fact e^(2pi n i)=1 for integer n).; //; // When a is real it is more ""natural"" to use the ordinary real-valued; // logarithm ln a rather than than something like ln a + 2 pi i.; // Technically, this value is called the principal value. This is what; // the formula up above gives you. Unfortunately this alone does not; // guarantees that the inverse operation brings you back where you; // started from.; //; // When a is not real there is no one natural choice of logarithm to prefer; // over any other, so in those cases we have to say that an expression like; // a^(b+ic) has many different values.; //; // This is because in these tests we exclude from the error output the; // results where we ended up very far from the initial value, and the; // difference is more",MatchSource.CODE_COMMENT,test/ctorture.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx
https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:75,Testability,test,tests,75,"// Torture Power complex - complex; //; // Important note on the following tests. The operation of raising a complex; // number to a power does not yet a single value, but rather an infinite; // number of values, particularly if the number is non rational.; // For a real number a, you can define a^(b+ic) by writing a = e^(ln a):; //; // b+ic (ln a)(b+ic) (b ln a) + i(c ln a); // a = e = e; //; // (b ln a); // = e ( cos (c ln a) + i sin (c ln a) ); //; // b; // = a ( cos (c ln a) + i sin (c ln a) ).; //; // Now, if a is a complex number instead of a real number, there is no; // single value to ""ln a"": there are lots of different complex numbers z; // for which e^z = a, and for any such complex number z, you could define; // a^(b+ic) to be e^(z(b+ic)) and use the above technique to calculate it.; //; // In fact, the same thing is true even when a is a real number. The; // expression a^(b+ic) has many possible values (infinite except when b; // and c are both rational numbers), because instead of doing the calculation; // writing a = e^(ln a), you could also do it by writing a = e^(ln a + 2pi i); // or by writing a = e^(ln a + 4 pi i), or a = e^(ln a + 6 pi i), and so on.; // Each of these equalities is true (in fact e^(2pi n i)=1 for integer n).; //; // When a is real it is more ""natural"" to use the ordinary real-valued; // logarithm ln a rather than than something like ln a + 2 pi i.; // Technically, this value is called the principal value. This is what; // the formula up above gives you. Unfortunately this alone does not; // guarantees that the inverse operation brings you back where you; // started from.; //; // When a is not real there is no one natural choice of logarithm to prefer; // over any other, so in those cases we have to say that an expression like; // a^(b+ic) has many different values.; //; // This is because in these tests we exclude from the error output the; // results where we ended up very far from the initial value, and the; // difference is more",MatchSource.CODE_COMMENT,test/ctorture.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx
https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:1344,Testability,log,logarithm,1344," complex - complex; //; // Important note on the following tests. The operation of raising a complex; // number to a power does not yet a single value, but rather an infinite; // number of values, particularly if the number is non rational.; // For a real number a, you can define a^(b+ic) by writing a = e^(ln a):; //; // b+ic (ln a)(b+ic) (b ln a) + i(c ln a); // a = e = e; //; // (b ln a); // = e ( cos (c ln a) + i sin (c ln a) ); //; // b; // = a ( cos (c ln a) + i sin (c ln a) ).; //; // Now, if a is a complex number instead of a real number, there is no; // single value to ""ln a"": there are lots of different complex numbers z; // for which e^z = a, and for any such complex number z, you could define; // a^(b+ic) to be e^(z(b+ic)) and use the above technique to calculate it.; //; // In fact, the same thing is true even when a is a real number. The; // expression a^(b+ic) has many possible values (infinite except when b; // and c are both rational numbers), because instead of doing the calculation; // writing a = e^(ln a), you could also do it by writing a = e^(ln a + 2pi i); // or by writing a = e^(ln a + 4 pi i), or a = e^(ln a + 6 pi i), and so on.; // Each of these equalities is true (in fact e^(2pi n i)=1 for integer n).; //; // When a is real it is more ""natural"" to use the ordinary real-valued; // logarithm ln a rather than than something like ln a + 2 pi i.; // Technically, this value is called the principal value. This is what; // the formula up above gives you. Unfortunately this alone does not; // guarantees that the inverse operation brings you back where you; // started from.; //; // When a is not real there is no one natural choice of logarithm to prefer; // over any other, so in those cases we have to say that an expression like; // a^(b+ic) has many different values.; //; // This is because in these tests we exclude from the error output the; // results where we ended up very far from the initial value, and the; // difference is more than 50%.; //",MatchSource.CODE_COMMENT,test/ctorture.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx
https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:1695,Testability,log,logarithm,1695," complex - complex; //; // Important note on the following tests. The operation of raising a complex; // number to a power does not yet a single value, but rather an infinite; // number of values, particularly if the number is non rational.; // For a real number a, you can define a^(b+ic) by writing a = e^(ln a):; //; // b+ic (ln a)(b+ic) (b ln a) + i(c ln a); // a = e = e; //; // (b ln a); // = e ( cos (c ln a) + i sin (c ln a) ); //; // b; // = a ( cos (c ln a) + i sin (c ln a) ).; //; // Now, if a is a complex number instead of a real number, there is no; // single value to ""ln a"": there are lots of different complex numbers z; // for which e^z = a, and for any such complex number z, you could define; // a^(b+ic) to be e^(z(b+ic)) and use the above technique to calculate it.; //; // In fact, the same thing is true even when a is a real number. The; // expression a^(b+ic) has many possible values (infinite except when b; // and c are both rational numbers), because instead of doing the calculation; // writing a = e^(ln a), you could also do it by writing a = e^(ln a + 2pi i); // or by writing a = e^(ln a + 4 pi i), or a = e^(ln a + 6 pi i), and so on.; // Each of these equalities is true (in fact e^(2pi n i)=1 for integer n).; //; // When a is real it is more ""natural"" to use the ordinary real-valued; // logarithm ln a rather than than something like ln a + 2 pi i.; // Technically, this value is called the principal value. This is what; // the formula up above gives you. Unfortunately this alone does not; // guarantees that the inverse operation brings you back where you; // started from.; //; // When a is not real there is no one natural choice of logarithm to prefer; // over any other, so in those cases we have to say that an expression like; // a^(b+ic) has many different values.; //; // This is because in these tests we exclude from the error output the; // results where we ended up very far from the initial value, and the; // difference is more than 50%.; //",MatchSource.CODE_COMMENT,test/ctorture.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx
https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:1865,Testability,test,tests,1865," complex - complex; //; // Important note on the following tests. The operation of raising a complex; // number to a power does not yet a single value, but rather an infinite; // number of values, particularly if the number is non rational.; // For a real number a, you can define a^(b+ic) by writing a = e^(ln a):; //; // b+ic (ln a)(b+ic) (b ln a) + i(c ln a); // a = e = e; //; // (b ln a); // = e ( cos (c ln a) + i sin (c ln a) ); //; // b; // = a ( cos (c ln a) + i sin (c ln a) ).; //; // Now, if a is a complex number instead of a real number, there is no; // single value to ""ln a"": there are lots of different complex numbers z; // for which e^z = a, and for any such complex number z, you could define; // a^(b+ic) to be e^(z(b+ic)) and use the above technique to calculate it.; //; // In fact, the same thing is true even when a is a real number. The; // expression a^(b+ic) has many possible values (infinite except when b; // and c are both rational numbers), because instead of doing the calculation; // writing a = e^(ln a), you could also do it by writing a = e^(ln a + 2pi i); // or by writing a = e^(ln a + 4 pi i), or a = e^(ln a + 6 pi i), and so on.; // Each of these equalities is true (in fact e^(2pi n i)=1 for integer n).; //; // When a is real it is more ""natural"" to use the ordinary real-valued; // logarithm ln a rather than than something like ln a + 2 pi i.; // Technically, this value is called the principal value. This is what; // the formula up above gives you. Unfortunately this alone does not; // guarantees that the inverse operation brings you back where you; // started from.; //; // When a is not real there is no one natural choice of logarithm to prefer; // over any other, so in those cases we have to say that an expression like; // a^(b+ic) has many different values.; //; // This is because in these tests we exclude from the error output the; // results where we ended up very far from the initial value, and the; // difference is more than 50%.; //",MatchSource.CODE_COMMENT,test/ctorture.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx
https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:11,Energy Efficiency,Power,Power,11,"// Torture Power complex - real",MatchSource.CODE_COMMENT,test/ctorture.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx
https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:11,Energy Efficiency,Power,Power,11,"// Torture Power real - complex",MatchSource.CODE_COMMENT,test/ctorture.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx
https://github.com/root-project/root/tree/v6-32-06/test/delaunayTriangulation.cxx:149,Performance,perform,performs,149,"/*; * delaunayTriangulation.cxx; *; * Created on: Jun 30, 2014; * Author: dfunke; *; * This test creates a TGraph2D, fills it with 3 points and then performs; * the Delaunay triangulation of them.; *; * Because of bug ROOT-XXX the data structures were not properly initialized and no triangle was found; */",MatchSource.CODE_COMMENT,test/delaunayTriangulation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/delaunayTriangulation.cxx
https://github.com/root-project/root/tree/v6-32-06/test/delaunayTriangulation.cxx:92,Testability,test,test,92,"/*; * delaunayTriangulation.cxx; *; * Created on: Jun 30, 2014; * Author: dfunke; *; * This test creates a TGraph2D, fills it with 3 points and then performs; * the Delaunay triangulation of them.; *; * Because of bug ROOT-XXX the data structures were not properly initialized and no triangle was found; */",MatchSource.CODE_COMMENT,test/delaunayTriangulation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/delaunayTriangulation.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx:1639,Energy Efficiency,charge,charge,1639,o last track; // TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; // TH1F *fH;; // TBits fTriggerBits; //Bits triggered by this event.; //; // The EventHeader class has 3 data members (integers):; // public:; // Int_t fEvtNum;; // Int_t fRun;; // Int_t fDate;; //; //; // The Event data member fTracks is a pointer to a TClonesArray.; // It is an array of a variable number of tracks per event.; // Each element of the array is an object of class Track with the members:; // private:; // Float_t fPx; //X component of the momentum; // Float_t fPy; //Y component of the momentum; // Float_t fPz; //Z component of the momentum; // Float_t fRandom; //A random track quantity; // Float_t fMass2; //The mass square of this particle; // Float_t fBx; //X intercept at the vertex; // Float_t fBy; //Y intercept at the vertex; // Float_t fMeanCharge; //Mean charge deposition of all hits of this track; // Float_t fXfirst; //X coordinate of the first point; // Float_t fXlast; //X coordinate of the last point; // Float_t fYfirst; //Y coordinate of the first point; // Float_t fYlast; //Y coordinate of the last point; // Float_t fZfirst; //Z coordinate of the first point; // Float_t fZlast; //Z coordinate of the last point; // Double32_t fCharge; //Charge of this track; // Double32_t fVertex[3]; //Track vertex position; // Int_t fNpoint; //Number of points for this track; // Short_t fValid; //Validity criterion; // Int_t fNsp; //Number of points for this track with a special value; // Double32_t *fPointValue; //[fNsp] a special quantity for some point.; // TBits fTriggerBits; //Bits triggered by this track.; //; // An example of a batch program to use the Event/Track classes is given; // in this directory: MainEvent.; // Look also in the same directory at the following macros:; // - eventa.C an example how to read the tree; // - eventb.C how to read events conditionally; //; // During the processing of the event (optionally) also a large number; // of histograms ca,MatchSource.CODE_COMMENT,test/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx:2033,Energy Efficiency,Charge,Charge,2033,o last track; // TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; // TH1F *fH;; // TBits fTriggerBits; //Bits triggered by this event.; //; // The EventHeader class has 3 data members (integers):; // public:; // Int_t fEvtNum;; // Int_t fRun;; // Int_t fDate;; //; //; // The Event data member fTracks is a pointer to a TClonesArray.; // It is an array of a variable number of tracks per event.; // Each element of the array is an object of class Track with the members:; // private:; // Float_t fPx; //X component of the momentum; // Float_t fPy; //Y component of the momentum; // Float_t fPz; //Z component of the momentum; // Float_t fRandom; //A random track quantity; // Float_t fMass2; //The mass square of this particle; // Float_t fBx; //X intercept at the vertex; // Float_t fBy; //Y intercept at the vertex; // Float_t fMeanCharge; //Mean charge deposition of all hits of this track; // Float_t fXfirst; //X coordinate of the first point; // Float_t fXlast; //X coordinate of the last point; // Float_t fYfirst; //Y coordinate of the first point; // Float_t fYlast; //Y coordinate of the last point; // Float_t fZfirst; //Z coordinate of the first point; // Float_t fZlast; //Z coordinate of the last point; // Double32_t fCharge; //Charge of this track; // Double32_t fVertex[3]; //Track vertex position; // Int_t fNpoint; //Number of points for this track; // Short_t fValid; //Validity criterion; // Int_t fNsp; //Number of points for this track with a special value; // Double32_t *fPointValue; //[fNsp] a special quantity for some point.; // TBits fTriggerBits; //Bits triggered by this track.; //; // An example of a batch program to use the Event/Track classes is given; // in this directory: MainEvent.; // Look also in the same directory at the following macros:; // - eventa.C an example how to read the tree; // - eventb.C how to read events conditionally; //; // During the processing of the event (optionally) also a large number; // of histograms ca,MatchSource.CODE_COMMENT,test/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx:1148,Modifiability,variab,variable,1148,asses; // =======================; //; // The Event class is a naive/simple example of an event structure.; // public:; // char fType[20];; // char *fEventName; //run+event number in character format; // Int_t fNtrack;; // Int_t fNseg;; // Int_t fNvertex;; // UInt_t fFlag;; // Double32_t fTemperature;; // Int_t fMeasures[10];; // Double32_t fMatrix[4][4];; // Double32_t *fClosestDistance; //[fNvertex] indexed array!; // EventHeader fEvtHdr;; // TClonesArray *fTracks;; // TRefArray *fHighPt; //array of High Pt tracks only; // TRefArray *fMuons; //array of Muon tracks only; // TRef fLastTrack; //pointer to last track; // TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; // TH1F *fH;; // TBits fTriggerBits; //Bits triggered by this event.; //; // The EventHeader class has 3 data members (integers):; // public:; // Int_t fEvtNum;; // Int_t fRun;; // Int_t fDate;; //; //; // The Event data member fTracks is a pointer to a TClonesArray.; // It is an array of a variable number of tracks per event.; // Each element of the array is an object of class Track with the members:; // private:; // Float_t fPx; //X component of the momentum; // Float_t fPy; //Y component of the momentum; // Float_t fPz; //Z component of the momentum; // Float_t fRandom; //A random track quantity; // Float_t fMass2; //The mass square of this particle; // Float_t fBx; //X intercept at the vertex; // Float_t fBy; //Y intercept at the vertex; // Float_t fMeanCharge; //Mean charge deposition of all hits of this track; // Float_t fXfirst; //X coordinate of the first point; // Float_t fXlast; //X coordinate of the last point; // Float_t fYfirst; //Y coordinate of the first point; // Float_t fYlast; //Y coordinate of the last point; // Float_t fZfirst; //Z coordinate of the first point; // Float_t fZlast; //Z coordinate of the last point; // Double32_t fCharge; //Charge of this track; // Double32_t fVertex[3]; //Track vertex position; // Int_t fNpoint; //Number of points for this tr,MatchSource.CODE_COMMENT,test/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx:2985,Modifiability,variab,variables,2985,"the momentum; // Float_t fPy; //Y component of the momentum; // Float_t fPz; //Z component of the momentum; // Float_t fRandom; //A random track quantity; // Float_t fMass2; //The mass square of this particle; // Float_t fBx; //X intercept at the vertex; // Float_t fBy; //Y intercept at the vertex; // Float_t fMeanCharge; //Mean charge deposition of all hits of this track; // Float_t fXfirst; //X coordinate of the first point; // Float_t fXlast; //X coordinate of the last point; // Float_t fYfirst; //Y coordinate of the first point; // Float_t fYlast; //Y coordinate of the last point; // Float_t fZfirst; //Z coordinate of the first point; // Float_t fZlast; //Z coordinate of the last point; // Double32_t fCharge; //Charge of this track; // Double32_t fVertex[3]; //Track vertex position; // Int_t fNpoint; //Number of points for this track; // Short_t fValid; //Validity criterion; // Int_t fNsp; //Number of points for this track with a special value; // Double32_t *fPointValue; //[fNsp] a special quantity for some point.; // TBits fTriggerBits; //Bits triggered by this track.; //; // An example of a batch program to use the Event/Track classes is given; // in this directory: MainEvent.; // Look also in the same directory at the following macros:; // - eventa.C an example how to read the tree; // - eventb.C how to read events conditionally; //; // During the processing of the event (optionally) also a large number; // of histograms can be filled. The creation and handling of the; // histograms is taken care of by the HistogramManager class.; //; // Note: This version of the class Event (see EventMT.h and EventMT.cxx; // for an alternative) uses static variables to improve performance (by; // reducing the number of memory allocations). Consequently, only one; // instance of the class Event should be in use at a time (a 2nd instance; // would share the array of Tracks with the first instance).; //; ////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx:3006,Performance,perform,performance,3006,"the momentum; // Float_t fPy; //Y component of the momentum; // Float_t fPz; //Z component of the momentum; // Float_t fRandom; //A random track quantity; // Float_t fMass2; //The mass square of this particle; // Float_t fBx; //X intercept at the vertex; // Float_t fBy; //Y intercept at the vertex; // Float_t fMeanCharge; //Mean charge deposition of all hits of this track; // Float_t fXfirst; //X coordinate of the first point; // Float_t fXlast; //X coordinate of the last point; // Float_t fYfirst; //Y coordinate of the first point; // Float_t fYlast; //Y coordinate of the last point; // Float_t fZfirst; //Z coordinate of the first point; // Float_t fZlast; //Z coordinate of the last point; // Double32_t fCharge; //Charge of this track; // Double32_t fVertex[3]; //Track vertex position; // Int_t fNpoint; //Number of points for this track; // Short_t fValid; //Validity criterion; // Int_t fNsp; //Number of points for this track with a special value; // Double32_t *fPointValue; //[fNsp] a special quantity for some point.; // TBits fTriggerBits; //Bits triggered by this track.; //; // An example of a batch program to use the Event/Track classes is given; // in this directory: MainEvent.; // Look also in the same directory at the following macros:; // - eventa.C an example how to read the tree; // - eventb.C how to read events conditionally; //; // During the processing of the event (optionally) also a large number; // of histograms can be filled. The creation and handling of the; // histograms is taken care of by the HistogramManager class.; //; // Note: This version of the class Event (see EventMT.h and EventMT.cxx; // for an alternative) uses static variables to improve performance (by; // reducing the number of memory allocations). Consequently, only one; // instance of the class Event should be in use at a time (a 2nd instance; // would share the array of Tracks with the first instance).; //; ////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx:12,Testability,test,test,12,// @(#)root/test:$Id$; // Author: Rene Brun 19/08/96; ////////////////////////////////////////////////////////////////////////; //; // Event and Track classes; // =======================; //; // The Event class is a naive/simple example of an event structure.; // public:; // char fType[20];; // char *fEventName; //run+event number in character format; // Int_t fNtrack;; // Int_t fNseg;; // Int_t fNvertex;; // UInt_t fFlag;; // Double32_t fTemperature;; // Int_t fMeasures[10];; // Double32_t fMatrix[4][4];; // Double32_t *fClosestDistance; //[fNvertex] indexed array!; // EventHeader fEvtHdr;; // TClonesArray *fTracks;; // TRefArray *fHighPt; //array of High Pt tracks only; // TRefArray *fMuons; //array of Muon tracks only; // TRef fLastTrack; //pointer to last track; // TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; // TH1F *fH;; // TBits fTriggerBits; //Bits triggered by this event.; //; // The EventHeader class has 3 data members (integers):; // public:; // Int_t fEvtNum;; // Int_t fRun;; // Int_t fDate;; //; //; // The Event data member fTracks is a pointer to a TClonesArray.; // It is an array of a variable number of tracks per event.; // Each element of the array is an object of class Track with the members:; // private:; // Float_t fPx; //X component of the momentum; // Float_t fPy; //Y component of the momentum; // Float_t fPz; //Z component of the momentum; // Float_t fRandom; //A random track quantity; // Float_t fMass2; //The mass square of this particle; // Float_t fBx; //X intercept at the vertex; // Float_t fBy; //Y intercept at the vertex; // Float_t fMeanCharge; //Mean charge deposition of all hits of this track; // Float_t fXfirst; //X coordinate of the first point; // Float_t fXlast; //X coordinate of the last point; // Float_t fYfirst; //Y coordinate of the first point; // Float_t fYlast; //Y coordinate of the last point; // Float_t fZfirst; //Z coordinate of the first point; // Float_t fZlast; //Z coordinate of the last ,MatchSource.CODE_COMMENT,test/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx:222,Usability,simpl,simple,222,// @(#)root/test:$Id$; // Author: Rene Brun 19/08/96; ////////////////////////////////////////////////////////////////////////; //; // Event and Track classes; // =======================; //; // The Event class is a naive/simple example of an event structure.; // public:; // char fType[20];; // char *fEventName; //run+event number in character format; // Int_t fNtrack;; // Int_t fNseg;; // Int_t fNvertex;; // UInt_t fFlag;; // Double32_t fTemperature;; // Int_t fMeasures[10];; // Double32_t fMatrix[4][4];; // Double32_t *fClosestDistance; //[fNvertex] indexed array!; // EventHeader fEvtHdr;; // TClonesArray *fTracks;; // TRefArray *fHighPt; //array of High Pt tracks only; // TRefArray *fMuons; //array of Muon tracks only; // TRef fLastTrack; //pointer to last track; // TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; // TH1F *fH;; // TBits fTriggerBits; //Bits triggered by this event.; //; // The EventHeader class has 3 data members (integers):; // public:; // Int_t fEvtNum;; // Int_t fRun;; // Int_t fDate;; //; //; // The Event data member fTracks is a pointer to a TClonesArray.; // It is an array of a variable number of tracks per event.; // Each element of the array is an object of class Track with the members:; // private:; // Float_t fPx; //X component of the momentum; // Float_t fPy; //Y component of the momentum; // Float_t fPz; //Z component of the momentum; // Float_t fRandom; //A random track quantity; // Float_t fMass2; //The mass square of this particle; // Float_t fBx; //X intercept at the vertex; // Float_t fBy; //Y intercept at the vertex; // Float_t fMeanCharge; //Mean charge deposition of all hits of this track; // Float_t fXfirst; //X coordinate of the first point; // Float_t fXlast; //X coordinate of the last point; // Float_t fYfirst; //Y coordinate of the first point; // Float_t fYlast; //Y coordinate of the last point; // Float_t fZfirst; //Z coordinate of the first point; // Float_t fZlast; //Z coordinate of the last ,MatchSource.CODE_COMMENT,test/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx:189,Modifiability,variab,variable,189,"////////////////////////////////////////////////////////////////////////////////; /// Create an Event object.; /// When the constructor is invoked for the first time, the class static; /// variable fgTracks is 0 and the TClonesArray fgTracks is created.",MatchSource.CODE_COMMENT,test/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx:148,Safety,avoid,avoid,148,"////////////////////////////////////////////////////////////////////////////////; /// Add a new track to the list of tracks for this event.; /// To avoid calling the very time consuming operator new for each track,; /// the standard but not well know C++ operator ""new with placement""; /// is called. If tracks[i] is 0, a new Track object will be created; /// otherwise the previous Track[i] will be overwritten.",MatchSource.CODE_COMMENT,test/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx:24,Usability,Clear,Clear,24,"//will also call Track::Clear",MatchSource.CODE_COMMENT,test/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx:127,Modifiability,variab,variable,127,"////////////////////////////////////////////////////////////////////////////////; /// This delete is to test the relocation of variable length array",MatchSource.CODE_COMMENT,test/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx:104,Testability,test,test,104,"////////////////////////////////////////////////////////////////////////////////; /// This delete is to test the relocation of variable length array",MatchSource.CODE_COMMENT,test/Event.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Rene Brun 10/01/97",MatchSource.CODE_COMMENT,test/eventa.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx:47,Testability,test,test,47,"// This macro read all events generated by the test program Event; // provided in $ROOTSYS/test.; //; // NOTE: Before executing this macro, you must have executed the macro eventload.; //; // This small program simply counts the number of bytes read and dump; // the first 3 events.",MatchSource.CODE_COMMENT,test/eventa.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx:91,Testability,test,test,91,"// This macro read all events generated by the test program Event; // provided in $ROOTSYS/test.; //; // NOTE: Before executing this macro, you must have executed the macro eventload.; //; // This small program simply counts the number of bytes read and dump; // the first 3 events.",MatchSource.CODE_COMMENT,test/eventa.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx:211,Usability,simpl,simply,211,"// This macro read all events generated by the test program Event; // provided in $ROOTSYS/test.; //; // NOTE: Before executing this macro, you must have executed the macro eventload.; //; // This small program simply counts the number of bytes read and dump; // the first 3 events.",MatchSource.CODE_COMMENT,test/eventa.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx:38,Testability,test,test,38,"// Connect file generated in $ROOTSYS/test",MatchSource.CODE_COMMENT,test/eventa.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx:28,Testability,benchmark,benchmark,28,"// Create a timer object to benchmark this loop",MatchSource.CODE_COMMENT,test/eventa.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventb.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Rene Brun 10/01/97",MatchSource.CODE_COMMENT,test/eventb.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventb.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventb.cxx:38,Testability,test,test,38,"// Connect file generated in $ROOTSYS/test",MatchSource.CODE_COMMENT,test/eventb.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventb.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventb.cxx:28,Testability,benchmark,benchmark,28,"// Create a timer object to benchmark this loop",MatchSource.CODE_COMMENT,test/eventb.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventb.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventb.cxx:2,Usability,clear,clear,2,"//clear tracks array",MatchSource.CODE_COMMENT,test/eventb.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventb.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Rene Brun 10/01/97",MatchSource.CODE_COMMENT,test/eventload.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx:14,Performance,load,loads,14,"// This macro loads the shared library libEvent.so provided in $ROOTSYS/test.; // Before executing this macro, we assume that:; // - you have changed your current directory to $ROOTSYS/test.; // - you have executed Event.; // If not, go to directory test and issue the commands:; // make Event to generate the executable module and shared library; // Event to produce the file Event.root; //; // Load shared library created in $ROOTSYS/test/libEvent.so",MatchSource.CODE_COMMENT,test/eventload.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx:396,Performance,Load,Load,396,"// This macro loads the shared library libEvent.so provided in $ROOTSYS/test.; // Before executing this macro, we assume that:; // - you have changed your current directory to $ROOTSYS/test.; // - you have executed Event.; // If not, go to directory test and issue the commands:; // make Event to generate the executable module and shared library; // Event to produce the file Event.root; //; // Load shared library created in $ROOTSYS/test/libEvent.so",MatchSource.CODE_COMMENT,test/eventload.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx:72,Testability,test,test,72,"// This macro loads the shared library libEvent.so provided in $ROOTSYS/test.; // Before executing this macro, we assume that:; // - you have changed your current directory to $ROOTSYS/test.; // - you have executed Event.; // If not, go to directory test and issue the commands:; // make Event to generate the executable module and shared library; // Event to produce the file Event.root; //; // Load shared library created in $ROOTSYS/test/libEvent.so",MatchSource.CODE_COMMENT,test/eventload.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx:185,Testability,test,test,185,"// This macro loads the shared library libEvent.so provided in $ROOTSYS/test.; // Before executing this macro, we assume that:; // - you have changed your current directory to $ROOTSYS/test.; // - you have executed Event.; // If not, go to directory test and issue the commands:; // make Event to generate the executable module and shared library; // Event to produce the file Event.root; //; // Load shared library created in $ROOTSYS/test/libEvent.so",MatchSource.CODE_COMMENT,test/eventload.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx:250,Testability,test,test,250,"// This macro loads the shared library libEvent.so provided in $ROOTSYS/test.; // Before executing this macro, we assume that:; // - you have changed your current directory to $ROOTSYS/test.; // - you have executed Event.; // If not, go to directory test and issue the commands:; // make Event to generate the executable module and shared library; // Event to produce the file Event.root; //; // Load shared library created in $ROOTSYS/test/libEvent.so",MatchSource.CODE_COMMENT,test/eventload.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx
https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx:436,Testability,test,test,436,"// This macro loads the shared library libEvent.so provided in $ROOTSYS/test.; // Before executing this macro, we assume that:; // - you have changed your current directory to $ROOTSYS/test.; // - you have executed Event.; // If not, go to directory test and issue the commands:; // make Event to generate the executable module and shared library; // Event to produce the file Event.root; //; // Load shared library created in $ROOTSYS/test/libEvent.so",MatchSource.CODE_COMMENT,test/eventload.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx
https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx:1639,Energy Efficiency,charge,charge,1639,o last track; // TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; // TH1F *fH;; // TBits fTriggerBits; //Bits triggered by this event.; //; // The EventHeader class has 3 data members (integers):; // public:; // Int_t fEvtNum;; // Int_t fRun;; // Int_t fDate;; //; //; // The Event data member fTracks is a pointer to a TClonesArray.; // It is an array of a variable number of tracks per event.; // Each element of the array is an object of class Track with the members:; // private:; // Float_t fPx; //X component of the momentum; // Float_t fPy; //Y component of the momentum; // Float_t fPz; //Z component of the momentum; // Float_t fRandom; //A random track quantity; // Float_t fMass2; //The mass square of this particle; // Float_t fBx; //X intercept at the vertex; // Float_t fBy; //Y intercept at the vertex; // Float_t fMeanCharge; //Mean charge deposition of all hits of this track; // Float_t fXfirst; //X coordinate of the first point; // Float_t fXlast; //X coordinate of the last point; // Float_t fYfirst; //Y coordinate of the first point; // Float_t fYlast; //Y coordinate of the last point; // Float_t fZfirst; //Z coordinate of the first point; // Float_t fZlast; //Z coordinate of the last point; // Double32_t fCharge; //Charge of this track; // Double32_t fVertex[3]; //Track vertex position; // Int_t fNpoint; //Number of points for this track; // Short_t fValid; //Validity criterion; // Int_t fNsp; //Number of points for this track with a special value; // Double32_t *fPointValue; //[fNsp] a special quantity for some point.; // TBits fTriggerBits; //Bits triggered by this track.; //; // An example of a batch program to use the Event/Track classes is given; // in this directory: MainEvent.; // Look also in the same directory at the following macros:; // - eventa.C an example how to read the tree; // - eventb.C how to read events conditionally; //; // During the processing of the event (optionally) also a large number; // of histograms ca,MatchSource.CODE_COMMENT,test/EventMT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx
https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx:2033,Energy Efficiency,Charge,Charge,2033,o last track; // TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; // TH1F *fH;; // TBits fTriggerBits; //Bits triggered by this event.; //; // The EventHeader class has 3 data members (integers):; // public:; // Int_t fEvtNum;; // Int_t fRun;; // Int_t fDate;; //; //; // The Event data member fTracks is a pointer to a TClonesArray.; // It is an array of a variable number of tracks per event.; // Each element of the array is an object of class Track with the members:; // private:; // Float_t fPx; //X component of the momentum; // Float_t fPy; //Y component of the momentum; // Float_t fPz; //Z component of the momentum; // Float_t fRandom; //A random track quantity; // Float_t fMass2; //The mass square of this particle; // Float_t fBx; //X intercept at the vertex; // Float_t fBy; //Y intercept at the vertex; // Float_t fMeanCharge; //Mean charge deposition of all hits of this track; // Float_t fXfirst; //X coordinate of the first point; // Float_t fXlast; //X coordinate of the last point; // Float_t fYfirst; //Y coordinate of the first point; // Float_t fYlast; //Y coordinate of the last point; // Float_t fZfirst; //Z coordinate of the first point; // Float_t fZlast; //Z coordinate of the last point; // Double32_t fCharge; //Charge of this track; // Double32_t fVertex[3]; //Track vertex position; // Int_t fNpoint; //Number of points for this track; // Short_t fValid; //Validity criterion; // Int_t fNsp; //Number of points for this track with a special value; // Double32_t *fPointValue; //[fNsp] a special quantity for some point.; // TBits fTriggerBits; //Bits triggered by this track.; //; // An example of a batch program to use the Event/Track classes is given; // in this directory: MainEvent.; // Look also in the same directory at the following macros:; // - eventa.C an example how to read the tree; // - eventb.C how to read events conditionally; //; // During the processing of the event (optionally) also a large number; // of histograms ca,MatchSource.CODE_COMMENT,test/EventMT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx
https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx:1148,Modifiability,variab,variable,1148,asses; // =======================; //; // The Event class is a naive/simple example of an event structure.; // public:; // char fType[20];; // char *fEventName; //run+event number in character format; // Int_t fNtrack;; // Int_t fNseg;; // Int_t fNvertex;; // UInt_t fFlag;; // Double32_t fTemperature;; // Int_t fMeasures[10];; // Double32_t fMatrix[4][4];; // Double32_t *fClosestDistance; //[fNvertex] indexed array!; // EventHeader fEvtHdr;; // TClonesArray *fTracks;; // TRefArray *fHighPt; //array of High Pt tracks only; // TRefArray *fMuons; //array of Muon tracks only; // TRef fLastTrack; //pointer to last track; // TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; // TH1F *fH;; // TBits fTriggerBits; //Bits triggered by this event.; //; // The EventHeader class has 3 data members (integers):; // public:; // Int_t fEvtNum;; // Int_t fRun;; // Int_t fDate;; //; //; // The Event data member fTracks is a pointer to a TClonesArray.; // It is an array of a variable number of tracks per event.; // Each element of the array is an object of class Track with the members:; // private:; // Float_t fPx; //X component of the momentum; // Float_t fPy; //Y component of the momentum; // Float_t fPz; //Z component of the momentum; // Float_t fRandom; //A random track quantity; // Float_t fMass2; //The mass square of this particle; // Float_t fBx; //X intercept at the vertex; // Float_t fBy; //Y intercept at the vertex; // Float_t fMeanCharge; //Mean charge deposition of all hits of this track; // Float_t fXfirst; //X coordinate of the first point; // Float_t fXlast; //X coordinate of the last point; // Float_t fYfirst; //Y coordinate of the first point; // Float_t fYlast; //Y coordinate of the last point; // Float_t fZfirst; //Z coordinate of the first point; // Float_t fZlast; //Z coordinate of the last point; // Double32_t fCharge; //Charge of this track; // Double32_t fVertex[3]; //Track vertex position; // Int_t fNpoint; //Number of points for this tr,MatchSource.CODE_COMMENT,test/EventMT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx
https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx:2962,Performance,multi-thread,multi-threads,2962," // It is an array of a variable number of tracks per event.; // Each element of the array is an object of class Track with the members:; // private:; // Float_t fPx; //X component of the momentum; // Float_t fPy; //Y component of the momentum; // Float_t fPz; //Z component of the momentum; // Float_t fRandom; //A random track quantity; // Float_t fMass2; //The mass square of this particle; // Float_t fBx; //X intercept at the vertex; // Float_t fBy; //Y intercept at the vertex; // Float_t fMeanCharge; //Mean charge deposition of all hits of this track; // Float_t fXfirst; //X coordinate of the first point; // Float_t fXlast; //X coordinate of the last point; // Float_t fYfirst; //Y coordinate of the first point; // Float_t fYlast; //Y coordinate of the last point; // Float_t fZfirst; //Z coordinate of the first point; // Float_t fZlast; //Z coordinate of the last point; // Double32_t fCharge; //Charge of this track; // Double32_t fVertex[3]; //Track vertex position; // Int_t fNpoint; //Number of points for this track; // Short_t fValid; //Validity criterion; // Int_t fNsp; //Number of points for this track with a special value; // Double32_t *fPointValue; //[fNsp] a special quantity for some point.; // TBits fTriggerBits; //Bits triggered by this track.; //; // An example of a batch program to use the Event/Track classes is given; // in this directory: MainEvent.; // Look also in the same directory at the following macros:; // - eventa.C an example how to read the tree; // - eventb.C how to read events conditionally; //; // During the processing of the event (optionally) also a large number; // of histograms can be filled. The creation and handling of the; // histograms is taken care of by the HistogramManager class.; //; // This version of the Event class is a simplified version suitable for; // use in a multi-threads environment as all Event objects are; // independent from each other.; //; ////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/EventMT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx
https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx:12,Testability,test,test,12,// @(#)root/test:$Id$; // Author: Rene Brun 19/08/96; ////////////////////////////////////////////////////////////////////////; //; // Event and Track classes; // =======================; //; // The Event class is a naive/simple example of an event structure.; // public:; // char fType[20];; // char *fEventName; //run+event number in character format; // Int_t fNtrack;; // Int_t fNseg;; // Int_t fNvertex;; // UInt_t fFlag;; // Double32_t fTemperature;; // Int_t fMeasures[10];; // Double32_t fMatrix[4][4];; // Double32_t *fClosestDistance; //[fNvertex] indexed array!; // EventHeader fEvtHdr;; // TClonesArray *fTracks;; // TRefArray *fHighPt; //array of High Pt tracks only; // TRefArray *fMuons; //array of Muon tracks only; // TRef fLastTrack; //pointer to last track; // TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; // TH1F *fH;; // TBits fTriggerBits; //Bits triggered by this event.; //; // The EventHeader class has 3 data members (integers):; // public:; // Int_t fEvtNum;; // Int_t fRun;; // Int_t fDate;; //; //; // The Event data member fTracks is a pointer to a TClonesArray.; // It is an array of a variable number of tracks per event.; // Each element of the array is an object of class Track with the members:; // private:; // Float_t fPx; //X component of the momentum; // Float_t fPy; //Y component of the momentum; // Float_t fPz; //Z component of the momentum; // Float_t fRandom; //A random track quantity; // Float_t fMass2; //The mass square of this particle; // Float_t fBx; //X intercept at the vertex; // Float_t fBy; //Y intercept at the vertex; // Float_t fMeanCharge; //Mean charge deposition of all hits of this track; // Float_t fXfirst; //X coordinate of the first point; // Float_t fXlast; //X coordinate of the last point; // Float_t fYfirst; //Y coordinate of the first point; // Float_t fYlast; //Y coordinate of the last point; // Float_t fZfirst; //Z coordinate of the first point; // Float_t fZlast; //Z coordinate of the last ,MatchSource.CODE_COMMENT,test/EventMT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx
https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx:222,Usability,simpl,simple,222,// @(#)root/test:$Id$; // Author: Rene Brun 19/08/96; ////////////////////////////////////////////////////////////////////////; //; // Event and Track classes; // =======================; //; // The Event class is a naive/simple example of an event structure.; // public:; // char fType[20];; // char *fEventName; //run+event number in character format; // Int_t fNtrack;; // Int_t fNseg;; // Int_t fNvertex;; // UInt_t fFlag;; // Double32_t fTemperature;; // Int_t fMeasures[10];; // Double32_t fMatrix[4][4];; // Double32_t *fClosestDistance; //[fNvertex] indexed array!; // EventHeader fEvtHdr;; // TClonesArray *fTracks;; // TRefArray *fHighPt; //array of High Pt tracks only; // TRefArray *fMuons; //array of Muon tracks only; // TRef fLastTrack; //pointer to last track; // TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; // TH1F *fH;; // TBits fTriggerBits; //Bits triggered by this event.; //; // The EventHeader class has 3 data members (integers):; // public:; // Int_t fEvtNum;; // Int_t fRun;; // Int_t fDate;; //; //; // The Event data member fTracks is a pointer to a TClonesArray.; // It is an array of a variable number of tracks per event.; // Each element of the array is an object of class Track with the members:; // private:; // Float_t fPx; //X component of the momentum; // Float_t fPy; //Y component of the momentum; // Float_t fPz; //Z component of the momentum; // Float_t fRandom; //A random track quantity; // Float_t fMass2; //The mass square of this particle; // Float_t fBx; //X intercept at the vertex; // Float_t fBy; //Y intercept at the vertex; // Float_t fMeanCharge; //Mean charge deposition of all hits of this track; // Float_t fXfirst; //X coordinate of the first point; // Float_t fXlast; //X coordinate of the last point; // Float_t fYfirst; //Y coordinate of the first point; // Float_t fYlast; //Y coordinate of the last point; // Float_t fZfirst; //Z coordinate of the first point; // Float_t fZlast; //Z coordinate of the last ,MatchSource.CODE_COMMENT,test/EventMT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx
https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx:2917,Usability,simpl,simplified,2917," // It is an array of a variable number of tracks per event.; // Each element of the array is an object of class Track with the members:; // private:; // Float_t fPx; //X component of the momentum; // Float_t fPy; //Y component of the momentum; // Float_t fPz; //Z component of the momentum; // Float_t fRandom; //A random track quantity; // Float_t fMass2; //The mass square of this particle; // Float_t fBx; //X intercept at the vertex; // Float_t fBy; //Y intercept at the vertex; // Float_t fMeanCharge; //Mean charge deposition of all hits of this track; // Float_t fXfirst; //X coordinate of the first point; // Float_t fXlast; //X coordinate of the last point; // Float_t fYfirst; //Y coordinate of the first point; // Float_t fYlast; //Y coordinate of the last point; // Float_t fZfirst; //Z coordinate of the first point; // Float_t fZlast; //Z coordinate of the last point; // Double32_t fCharge; //Charge of this track; // Double32_t fVertex[3]; //Track vertex position; // Int_t fNpoint; //Number of points for this track; // Short_t fValid; //Validity criterion; // Int_t fNsp; //Number of points for this track with a special value; // Double32_t *fPointValue; //[fNsp] a special quantity for some point.; // TBits fTriggerBits; //Bits triggered by this track.; //; // An example of a batch program to use the Event/Track classes is given; // in this directory: MainEvent.; // Look also in the same directory at the following macros:; // - eventa.C an example how to read the tree; // - eventb.C how to read events conditionally; //; // During the processing of the event (optionally) also a large number; // of histograms can be filled. The creation and handling of the; // histograms is taken care of by the HistogramManager class.; //; // This version of the Event class is a simplified version suitable for; // use in a multi-threads environment as all Event objects are; // independent from each other.; //; ////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/EventMT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx
https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx:148,Safety,avoid,avoid,148,"////////////////////////////////////////////////////////////////////////////////; /// Add a new track to the list of tracks for this event.; /// To avoid calling the very time consuming operator new for each track,; /// the standard but not well know C++ operator ""new with placement""; /// is called. If tracks[i] is 0, a new Track object will be created; /// otherwise the previous Track[i] will be overwritten.",MatchSource.CODE_COMMENT,test/EventMT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx
https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx:24,Usability,Clear,Clear,24,"//will also call Track::Clear",MatchSource.CODE_COMMENT,test/EventMT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx
https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx:127,Modifiability,variab,variable,127,"////////////////////////////////////////////////////////////////////////////////; /// This delete is to test the relocation of variable length array",MatchSource.CODE_COMMENT,test/EventMT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx
https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx:104,Testability,test,test,104,"////////////////////////////////////////////////////////////////////////////////; /// This delete is to test the relocation of variable length array",MatchSource.CODE_COMMENT,test/EventMT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/EventMT.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Fons Rademakers 07/03/98; // guitest.cxx: test program for ROOT native GUI classes.; // To run it do: make guitest; guitest; // Another version with identical functionality but using the new signals; // and slots communication mechanism can be found in $ROOTSYS/tutorials.; // That version can be run entirely in the interpreter.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:76,Testability,test,test,76,"// @(#)root/test:$Id$; // Author: Fons Rademakers 07/03/98; // guitest.cxx: test program for ROOT native GUI classes.; // To run it do: make guitest; guitest; // Another version with identical functionality but using the new signals; // and slots communication mechanism can be found in $ROOTSYS/tutorials.; // That version can be run entirely in the interpreter.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:10,Availability,down,down,10,"// scroll down",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:10,Testability,test,test,10,"// Create test main frame. A TGMainFrame is a top level window.; // use hierarchical cleaning",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:15,Integrability,message,messages,15,"// Menu button messages are handled by the main frame (i.e. ""this""); // ProcessMessage() method.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:13,Integrability,message,message,13,"// Got close message for this MainFrame. Terminate the application; // or returns from the TApplication event loop (depending on the; // argument specified in TApplication::Run()).",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:116,Integrability,depend,depending,116,"// Got close message for this MainFrame. Terminate the application; // or returns from the TApplication event loop (depending on the; // argument specified in TApplication::Run()).",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:10,Integrability,message,messages,10,"// Handle messages send to the TestMainFrame object. E.g. all menu button; // messages.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:78,Integrability,message,messages,78,"// Handle messages send to the TestMainFrame object. E.g. all menu button; // messages.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:31,Testability,Test,TestMainFrame,31,"// Handle messages send to the TestMainFrame object. E.g. all menu button; // messages.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:64,Testability,test,testing,64,"//--------- create Tab widget and some composite frames for Tab testing",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:10,Testability,test,test,10,"// Delete test dialog widgets.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:11,Integrability,message,messages,11,"// Process messages coming from widgets associated with the dialog.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:10,Integrability,message,message,10,"// Create message box test dialog. Use this dialog to select the different; // message dialog box styles and show the message dialog by clicking the; // ""Test"" button.; // use hierarchical cleani",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:79,Integrability,message,message,79,"// Create message box test dialog. Use this dialog to select the different; // message dialog box styles and show the message dialog by clicking the; // ""Test"" button.; // use hierarchical cleani",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:118,Integrability,message,message,118,"// Create message box test dialog. Use this dialog to select the different; // message dialog box styles and show the message dialog by clicking the; // ""Test"" button.; // use hierarchical cleani",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:22,Testability,test,test,22,"// Create message box test dialog. Use this dialog to select the different; // message dialog box styles and show the message dialog by clicking the; // ""Test"" button.; // use hierarchical cleani",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:154,Testability,Test,Test,154,"// Create message box test dialog. Use this dialog to select the different; // message dialog box styles and show the message dialog by clicking the; // ""Test"" button.; // use hierarchical cleani",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:39,Energy Efficiency,green,green,39,"// Change background of fTestButton to green",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:11,Integrability,message,messages,11,"// Process messages sent to this dialog.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:13,Integrability,message,message,13,"// Since the message dialog box is created, we disable the; // window manager close mechanism, in order to ensure we; // can't close the fMain window while the MessageBox is open.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:160,Integrability,Message,MessageBox,160,"// Since the message dialog box is created, we disable the; // window manager close mechanism, in order to ensure we; // can't close the fMain window while the MessageBox is open.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:18,Testability,test,test,18,"// Dialog used to test the different supported sliders.; // use hierarchical cleani",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:18,Integrability,message,messages,18,"// Process slider messages.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:11,Integrability,message,messages,11,"// Process messages sent to this dialog.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:11,Integrability,message,message,11,"// process message sent to this widget.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:11,Integrability,message,message,11,"// process message sent to this widget.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:18,Testability,test,test,18,"// Dialog used to test the different supported progress bars.; // use hierarchical cleani",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:47,Usability,progress bar,progress bars,47,"// Dialog used to test the different supported progress bars.; // use hierarchical cleani",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:70,Usability,Progress bar,Progress bars,70,"// Called when window is closed via the window manager.; // Interrupt Progress bars increment.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:18,Integrability,message,messages,18,"// Process slider messages.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:24,Testability,test,test,24,"// TGNumberEntry widget test dialog",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:12,Integrability,message,message,12,"// make the message box non-resizable",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:3,Performance,Load,Load,3,"// Load a text buffer in the editor.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:3,Performance,Load,Load,3,"// Load a file in the editor.",MatchSource.CODE_COMMENT,test/guitest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guiviewer.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Brett Viren 04/15/2001; // guiviewer.cxx: GUI test program showing TGTableLayout widget manager,; // embedded ROOT canvases, axis and sliders.; // To run it do: make guiviewer; guiviewer",MatchSource.CODE_COMMENT,test/guiviewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guiviewer.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guiviewer.cxx:80,Testability,test,test,80,"// @(#)root/test:$Id$; // Author: Brett Viren 04/15/2001; // guiviewer.cxx: GUI test program showing TGTableLayout widget manager,; // embedded ROOT canvases, axis and sliders.; // To run it do: make guiviewer; guiviewer",MatchSource.CODE_COMMENT,test/guiviewer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guiviewer.cxx
https://github.com/root-project/root/tree/v6-32-06/test/guiviewer.h:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Brett Viren 04/15/2001",MatchSource.CODE_COMMENT,test/guiviewer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guiviewer.h
https://github.com/root-project/root/tree/v6-32-06/test/Hello.cxx:366,Performance,Load,Load,366,"// @(#)root/test:$Id$; // Author: Valeriy Onuchin & Fons Rademakers 04/10/98; ///////////////////////////////////////////////////////////////////; // Animated Text with cool wave effect.; //; // ROOT implementation of the hello world example borrowed; // from the Qt hello world example.; //; // To run this example do the following:; // $ root; // root [0] gSystem.Load(""Hello""); // root [1] Hello h; // <enjoy>; // root [2] .q; //; // Other ROOT fun examples: Tetris, Aclock ...; //; // Begin_Html; // <img src=""http://emcal06.rhic.bnl.gov/~onuchin/root/gif/hello_clock.gif"">; // End_Html; //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Hello.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Hello.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Hello.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Valeriy Onuchin & Fons Rademakers 04/10/98; ///////////////////////////////////////////////////////////////////; // Animated Text with cool wave effect.; //; // ROOT implementation of the hello world example borrowed; // from the Qt hello world example.; //; // To run this example do the following:; // $ root; // root [0] gSystem.Load(""Hello""); // root [1] Hello h; // <enjoy>; // root [2] .q; //; // Other ROOT fun examples: Tetris, Aclock ...; //; // Begin_Html; // <img src=""http://emcal06.rhic.bnl.gov/~onuchin/root/gif/hello_clock.gif"">; // End_Html; //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Hello.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Hello.cxx
https://github.com/root-project/root/tree/v6-32-06/test/Hello.h:288,Performance,Load,Load,288,"///////////////////////////////////////////////////////////////////; // Animated Text with cool wave effect.; //; // ROOT implementation of the hello world example borrowed; // from the Qt hello world example.; //; // To run this example do the following:; // $ root; // root [0] gSystem.Load(""Hello""); // root [1] Hello h; // <enjoy>; // root [2] .q; //; // Other ROOT fun examples: Tetris, Aclock ...; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/Hello.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Hello.h
https://github.com/root-project/root/tree/v6-32-06/test/hsimple.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Rene Brun 19/08/96; //*-*-*-*-*-*-*Simple examples with histograms created/filled and saved*-*-*-*; //*-* ========================================================; //*-*; //*-* This program creates :; //*-* - a one dimensional histogram; //*-* - a two dimensional histogram; //*-* - a profile histogram; //*-* - an ntuple; //*-*; //*-* These objects are filled with some random numbers and saved on a file.; //*-*; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*",MatchSource.CODE_COMMENT,test/hsimple.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/hsimple.cxx
https://github.com/root-project/root/tree/v6-32-06/test/hsimple.cxx:69,Usability,Simpl,Simple,69,"// @(#)root/test:$Id$; // Author: Rene Brun 19/08/96; //*-*-*-*-*-*-*Simple examples with histograms created/filled and saved*-*-*-*; //*-* ========================================================; //*-*; //*-* This program creates :; //*-* - a one dimensional histogram; //*-* - a two dimensional histogram; //*-* - a profile histogram; //*-* - an ntuple; //*-*; //*-* These objects are filled with some random numbers and saved on a file.; //*-*; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*",MatchSource.CODE_COMMENT,test/hsimple.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/hsimple.cxx
https://github.com/root-project/root/tree/v6-32-06/test/hsimple.cxx:160,Safety,detect,detector,160,"// Create a new ROOT binary machine independent file.; // Note that this file may contain any kind of ROOT objects, histograms,; // pictures, graphics objects, detector geometries, tracks, events, etc..; // This file is now becoming the current directory.",MatchSource.CODE_COMMENT,test/hsimple.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/hsimple.cxx
https://github.com/root-project/root/tree/v6-32-06/test/hworld.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Fons Rademakers 04/04/97; // This small demo shows the traditional ""Hello World"". Its main use is; // to show how to use ROOT graphics and how to enter the eventloop to; // be able to interact with the graphics.",MatchSource.CODE_COMMENT,test/hworld.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/hworld.cxx
https://github.com/root-project/root/tree/v6-32-06/test/hworld2.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Fons Rademakers 04/04/97; // This small demo shows the traditional ""Hello World"". Its main use is; // to show how to use ROOT graphics and how to enter the eventloop to; // be able to interact with the graphics.",MatchSource.CODE_COMMENT,test/hworld2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/hworld2.cxx
https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx:2093,Performance,Multi-Thread,Multi-Threading,2093,"rray.; // - one branch for the TRefArray of high Pt tracks; // - one branch for the TRefArray of muon tracks; // - one branch for the reference pointer to the last track; // - one branch for the object fH (histogram of class TH1F).; //; // if split = 0 only one single branch is created and the complete event; // is serialized in one single buffer.; // if split = -2 the event is split using the old TBranchObject mechanism; // if split = -1 the event is streamed using the old TBranchObject mechanism; // if split > 0 the event is split using the new TBranchElement mechanism.; //; // if comp = 0 no compression at all.; // if comp = 1 event is compressed.; // if comp = 2 same as 1. In addition branches with floats in the TClonesArray; // are also compressed.; // The 4th argument fill can be set to 0 if one wants to time; // the percentage of time spent in creating the event structure and; // not write the event in the file.; // The 5th argument will enable IMT mode (Implicit Multi-Threading), allowing; // ROOT to use multiple threads internally, if enabled.; // The 6th argument allows the user to specify the compression algorithm:; // - 1 - zlib.; // - 2 - LZMA.; // - 3 - ""old ROOT algorithm"" A variant of zlib; do not use, kept for; // backwards compatability.; // - 4 - LZ4.; // In this example, one loops over nevent events.; // The branch ""event"" is created at the first event.; // The branch address is set for all other events.; // For each event, the event header is filled and ntrack tracks; // are generated and added to the TClonesArray list.; // For each event the event histogram is saved as well as the list; // of all tracks.; //; // The two TRefArray contain only references to the original tracks owned by; // the TClonesArray fTracks.; //; // The number of events can be given as the first argument to the program.; // By default 400 events are generated.; // The compression option can be activated/deactivated via the second argument.; //; // Additionally, if the env",MatchSource.CODE_COMMENT,test/MainEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx:3185,Performance,perform,performance,3185," threads internally, if enabled.; // The 6th argument allows the user to specify the compression algorithm:; // - 1 - zlib.; // - 2 - LZMA.; // - 3 - ""old ROOT algorithm"" A variant of zlib; do not use, kept for; // backwards compatability.; // - 4 - LZ4.; // In this example, one loops over nevent events.; // The branch ""event"" is created at the first event.; // The branch address is set for all other events.; // For each event, the event header is filled and ntrack tracks; // are generated and added to the TClonesArray list.; // For each event the event histogram is saved as well as the list; // of all tracks.; //; // The two TRefArray contain only references to the original tracks owned by; // the TClonesArray fTracks.; //; // The number of events can be given as the first argument to the program.; // By default 400 events are generated.; // The compression option can be activated/deactivated via the second argument.; //; // Additionally, if the environment ENABLE_TTREEPERFSTATS is set, then detailed; // statistics about IO performance will be reported.; //; // ---Running/Linking instructions----; // This program consists of the following files and procedures.; // - Event.h event class description; // - Event.C event class implementation; // - MainEvent.C the main program to demo this class might be used (this file); // - EventCint.C the CINT dictionary for the event and Track classes; // this file is automatically generated by rootcint (see Makefile),; // when the class definition in Event.h is modified.; //; // ---Analyzing the Event.root file with the interactive root; // example of a simple session; // Root > TFile f(""Event.root""); // Root > T.Draw(""fNtrack"") //histogram the number of tracks per event; // Root > T.Draw(""fPx"") //histogram fPx for all tracks in all events; // Root > T.Draw(""fXfirst:fYfirst"",""fNtrack>600""); // //scatter-plot for x versus y of first point of each track; // Root > T.Draw(""fH.GetRMS()"") //histogram of the RMS of the event histogram; /",MatchSource.CODE_COMMENT,test/MainEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Rene Brun 19/01/97; ////////////////////////////////////////////////////////////////////////; //; // A simple example with a ROOT tree; // =================================; //; // This program creates :; // - a ROOT file; // - a tree; // Additional arguments can be passed to the program to control the flow; // of execution. (see comments describing the arguments in the code).; // Event nevent comp split fill tracks IMT compression; // All arguments are optional. Default is:; // Event 400 1 1 1 400 0 1; //; // In this example, the tree consists of one single ""super branch""; // The statement ***tree->Branch(""event"", &event, 64000,split);*** below; // will parse the structure described in Event.h and will make; // a new branch for each data member of the class if split is set to 1.; // - 9 branches corresponding to the basic types fType, fNtrack,fNseg,; // fNvertex,fFlag,fTemperature,fMeasures,fMatrix,fClosesDistance.; // - 3 branches corresponding to the members of the subobject EventHeader.; // - one branch for each data member of the class Track of TClonesArray.; // - one branch for the TRefArray of high Pt tracks; // - one branch for the TRefArray of muon tracks; // - one branch for the reference pointer to the last track; // - one branch for the object fH (histogram of class TH1F).; //; // if split = 0 only one single branch is created and the complete event; // is serialized in one single buffer.; // if split = -2 the event is split using the old TBranchObject mechanism; // if split = -1 the event is streamed using the old TBranchObject mechanism; // if split > 0 the event is split using the new TBranchElement mechanism.; //; // if comp = 0 no compression at all.; // if comp = 1 event is compressed.; // if comp = 2 same as 1. In addition branches with floats in the TClonesArray; // are also compressed.; // The 4th argument fill can be set to 0 if one wants to time; // the percentage of time spent in creating the event structure a",MatchSource.CODE_COMMENT,test/MainEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx:137,Usability,simpl,simple,137,"// @(#)root/test:$Id$; // Author: Rene Brun 19/01/97; ////////////////////////////////////////////////////////////////////////; //; // A simple example with a ROOT tree; // =================================; //; // This program creates :; // - a ROOT file; // - a tree; // Additional arguments can be passed to the program to control the flow; // of execution. (see comments describing the arguments in the code).; // Event nevent comp split fill tracks IMT compression; // All arguments are optional. Default is:; // Event 400 1 1 1 400 0 1; //; // In this example, the tree consists of one single ""super branch""; // The statement ***tree->Branch(""event"", &event, 64000,split);*** below; // will parse the structure described in Event.h and will make; // a new branch for each data member of the class if split is set to 1.; // - 9 branches corresponding to the basic types fType, fNtrack,fNseg,; // fNvertex,fFlag,fTemperature,fMeasures,fMatrix,fClosesDistance.; // - 3 branches corresponding to the members of the subobject EventHeader.; // - one branch for each data member of the class Track of TClonesArray.; // - one branch for the TRefArray of high Pt tracks; // - one branch for the TRefArray of muon tracks; // - one branch for the reference pointer to the last track; // - one branch for the object fH (histogram of class TH1F).; //; // if split = 0 only one single branch is created and the complete event; // is serialized in one single buffer.; // if split = -2 the event is split using the old TBranchObject mechanism; // if split = -1 the event is streamed using the old TBranchObject mechanism; // if split > 0 the event is split using the new TBranchElement mechanism.; //; // if comp = 0 no compression at all.; // if comp = 1 event is compressed.; // if comp = 2 same as 1. In addition branches with floats in the TClonesArray; // are also compressed.; // The 4th argument fill can be set to 0 if one wants to time; // the percentage of time spent in creating the event structure a",MatchSource.CODE_COMMENT,test/MainEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx:3760,Usability,simpl,simple,3760,"y.; // - 4 - LZ4.; // In this example, one loops over nevent events.; // The branch ""event"" is created at the first event.; // The branch address is set for all other events.; // For each event, the event header is filled and ntrack tracks; // are generated and added to the TClonesArray list.; // For each event the event histogram is saved as well as the list; // of all tracks.; //; // The two TRefArray contain only references to the original tracks owned by; // the TClonesArray fTracks.; //; // The number of events can be given as the first argument to the program.; // By default 400 events are generated.; // The compression option can be activated/deactivated via the second argument.; //; // Additionally, if the environment ENABLE_TTREEPERFSTATS is set, then detailed; // statistics about IO performance will be reported.; //; // ---Running/Linking instructions----; // This program consists of the following files and procedures.; // - Event.h event class description; // - Event.C event class implementation; // - MainEvent.C the main program to demo this class might be used (this file); // - EventCint.C the CINT dictionary for the event and Track classes; // this file is automatically generated by rootcint (see Makefile),; // when the class definition in Event.h is modified.; //; // ---Analyzing the Event.root file with the interactive root; // example of a simple session; // Root > TFile f(""Event.root""); // Root > T.Draw(""fNtrack"") //histogram the number of tracks per event; // Root > T.Draw(""fPx"") //histogram fPx for all tracks in all events; // Root > T.Draw(""fXfirst:fYfirst"",""fNtrack>600""); // //scatter-plot for x versus y of first point of each track; // Root > T.Draw(""fH.GetRMS()"") //histogram of the RMS of the event histogram; //; // Look also in the same directory at the following macros:; // - eventa.C an example how to read the tree; // - eventb.C how to read events conditionally; //; ////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/MainEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx:87,Testability,benchmark,benchmark,87,"// Fill event, header and tracks with some random numbers; // Create a timer object to benchmark this loop",MatchSource.CODE_COMMENT,test/MainEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx:22,Performance,cache,cache,22,"//by setting the read cache to -1 we set it to the AutoFlush value when writing",MatchSource.CODE_COMMENT,test/MainEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx:29,Usability,learn,learn,29,"//one entry is sufficient to learn",MatchSource.CODE_COMMENT,test/MainEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx:39,Performance,cache,cache,39,"//this call is required when using the cache",MatchSource.CODE_COMMENT,test/MainEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx:175,Safety,detect,detector,175,"// Write case; // Create a new ROOT binary machine independent file.; // Note that this file may contain any kind of ROOT objects, histograms,; // pictures, graphics objects, detector geometries, tracks, events, etc..; // This file is now becoming the current directory.",MatchSource.CODE_COMMENT,test/MainEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx:19,Performance,cache,cache,19,"// set a 10 MBytes cache (useless when writing local files)",MatchSource.CODE_COMMENT,test/MainEvent.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx
https://github.com/root-project/root/tree/v6-32-06/test/minexam.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Rene Brun 22/08/95; //______________________________________________________________________________; //*-*-*-*-*-*-*-*-*-*-*-*The Minuit standard test program-*-*-*-*-*-*-*-*-*; //*-* ======================== *; //*-* *; //*-* This program is the translation to C++ of the minexam program *; //*-* distributed with the Minuit/Fortran source file. *; //*-* original author Fred James *; //*-* *; //*-* Fit randomly-generated leptonic K0 decays to the *; //*-* time distribution expected for interfering K1 and K2, *; //*-* with free parameters Re(X), Im(X), DeltaM, and GammaS. *; //*-* *; //*-* This program can be run in batch mode with the makefile *; //*-* or executed interactively with the command: *; //*-* Root > .x minexam.cxx *; //*-* *; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*",MatchSource.CODE_COMMENT,test/minexam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/minexam.cxx
https://github.com/root-project/root/tree/v6-32-06/test/minexam.cxx:181,Testability,test,test,181,"// @(#)root/test:$Id$; // Author: Rene Brun 22/08/95; //______________________________________________________________________________; //*-*-*-*-*-*-*-*-*-*-*-*The Minuit standard test program-*-*-*-*-*-*-*-*-*; //*-* ======================== *; //*-* *; //*-* This program is the translation to C++ of the minexam program *; //*-* distributed with the Minuit/Fortran source file. *; //*-* original author Fred James *; //*-* *; //*-* Fit randomly-generated leptonic K0 decays to the *; //*-* time distribution expected for interfering K1 and K2, *; //*-* with free parameters Re(X), Im(X), DeltaM, and GammaS. *; //*-* *; //*-* This program can be run in batch mode with the makefile *; //*-* or executed interactively with the command: *; //*-* Root > .x minexam.cxx *; //*-* *; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*",MatchSource.CODE_COMMENT,test/minexam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/minexam.cxx
https://github.com/root-project/root/tree/v6-32-06/test/minexam.cxx:41,Integrability,interface,interface,41,"// Initialize TMinuit via generic fitter interface with a maximum of 5 params",MatchSource.CODE_COMMENT,test/minexam.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/minexam.cxx
https://github.com/root-project/root/tree/v6-32-06/test/sqlitetest.cxx:26,Testability,test,testdb,26,"// Create a new DB called testdb:",MatchSource.CODE_COMMENT,test/sqlitetest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/sqlitetest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/sqlitetest.cxx:3,Testability,Test,Test,3,"// Test tableinfo:",MatchSource.CODE_COMMENT,test/sqlitetest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/sqlitetest.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:1388,Performance,perform,performance,1388,"can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : ",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Rene Brun 05/11/98; /////////////////////////////////////////////////////////////////; //; // R O O T T E S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile..........",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:273,Testability,test,test,273,"// @(#)root/test:$Id$; // Author: Rene Brun 05/11/98; /////////////////////////////////////////////////////////////////; //; // R O O T T E S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile..........",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:348,Testability,test,test,348,"// @(#)root/test:$Id$; // Author: Rene Brun 05/11/98; /////////////////////////////////////////////////////////////////; //; // R O O T T E S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile..........",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:383,Testability,test,test,383,"// @(#)root/test:$Id$; // Author: Rene Brun 05/11/98; /////////////////////////////////////////////////////////////////; //; // R O O T T E S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile..........",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:575,Testability,test,test,575,"// @(#)root/test:$Id$; // Author: Rene Brun 05/11/98; /////////////////////////////////////////////////////////////////; //; // R O O T T E S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile..........",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:619,Testability,test,test,619,"// @(#)root/test:$Id$; // Author: Rene Brun 05/11/98; /////////////////////////////////////////////////////////////////; //; // R O O T T E S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile..........",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:751,Testability,test,test,751,"// @(#)root/test:$Id$; // Author: Rene Brun 05/11/98; /////////////////////////////////////////////////////////////////; //; // R O O T T E S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile..........",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:840,Testability,test,test,840,"// @(#)root/test:$Id$; // Author: Rene Brun 05/11/98; /////////////////////////////////////////////////////////////////; //; // R O O T T E S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile..........",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:945,Testability,test,test,945,"t:$Id$; // Author: Rene Brun 05/11/98; /////////////////////////////////////////////////////////////////; //; // R O O T T E S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile........................",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:1007,Testability,test,test,1007,"t:$Id$; // Author: Rene Brun 05/11/98; /////////////////////////////////////////////////////////////////; //; // R O O T T E S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile........................",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:1061,Testability,test,tests,1061,"t:$Id$; // Author: Rene Brun 05/11/98; /////////////////////////////////////////////////////////////////; //; // R O O T T E S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile........................",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:1088,Testability,test,tests,1088,"t:$Id$; // Author: Rene Brun 05/11/98; /////////////////////////////////////////////////////////////////; //; // R O O T T E S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile........................",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:1100,Testability,test,test,1100," S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript.........",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:1132,Testability,Test,Test,1132," S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript.........",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:1143,Testability,Test,Test,1143," S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript.........",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:1207,Testability,test,test,1207,"he suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : T",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:1571,Testability,test,tests,1571,"ot > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files ",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:1708,Testability,test,test,1708,"ot > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files ",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:1811,Testability,Test,Test,1811,"ot > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files ",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:1882,Testability,Test,Test,1882,"ll files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 n",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:1953,Testability,Test,Test,1953,"y require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test ",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2024,Testability,Test,Test,2024,"ts; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // *********************",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2033,Testability,Test,Test,2033,"ts; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // *********************",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2095,Testability,Test,Test,2095," produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbru",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2104,Testability,Test,Test,2104," produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbru",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2166,Testability,Test,Test,2166,"; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //************************",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2175,Testability,Test,Test,2175,"; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //************************",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2237,Testability,Test,Test,2237,"/ with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mby",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2308,Testability,Test,Test,2308,"number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I ",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2379,Testability,Test,Test,2379,"/ performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu ",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2450,Testability,Test,Test,2450,"Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //**********************************************************",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2522,Testability,Test,Test,2522,"mple of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //******************************************************************; //* ROOTMARKS = 600.1 * Root4.02/00 20041217/1146; //***********",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2532,Testability,Test,Test,2532,"mple of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //******************************************************************; //* ROOTMARKS = 600.1 * Root4.02/00 20041217/1146; //***********",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2594,Testability,Test,Test,2594,"*********************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //******************************************************************; //* ROOTMARKS = 600.1 * Root4.02/00 20041217/1146; //******************************************************************; //; //_______",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2626,Testability,test,test,2626,"*********************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //******************************************************************; //* ROOTMARKS = 600.1 * Root4.02/00 20041217/1146; //******************************************************************; //; //_______",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2666,Testability,Test,Test,2666,"***; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //******************************************************************; //* ROOTMARKS = 600.1 * Root4.02/00 20041217/1146; //******************************************************************; //; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2676,Testability,Test,Test,2676,"***; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //******************************************************************; //* ROOTMARKS = 600.1 * Root4.02/00 20041217/1146; //******************************************************************; //; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2738,Testability,Test,Test,2738,"***; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //******************************************************************; //* ROOTMARKS = 600.1 * Root4.02/00 20041217/1146; //******************************************************************; //; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2787,Testability,test,test,2787,"***; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //******************************************************************; //* ROOTMARKS = 600.1 * Root4.02/00 20041217/1146; //******************************************************************; //; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2810,Testability,Test,Test,2810,"***; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //******************************************************************; //* ROOTMARKS = 600.1 * Root4.02/00 20041217/1146; //******************************************************************; //; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2882,Testability,Test,Test,2882,"***; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //******************************************************************; //* ROOTMARKS = 600.1 * Root4.02/00 20041217/1146; //******************************************************************; //; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2897,Testability,test,test,2897,"***; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //******************************************************************; //* ROOTMARKS = 600.1 * Root4.02/00 20041217/1146; //******************************************************************; //; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2954,Testability,Test,Test,2954,"***; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //******************************************************************; //* ROOTMARKS = 600.1 * Root4.02/00 20041217/1146; //******************************************************************; //; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2964,Testability,Test,Test,2964,"***; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //******************************************************************; //* ROOTMARKS = 600.1 * Root4.02/00 20041217/1146; //******************************************************************; //; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:37,Testability,test,test,37,"//Main control function invoking all test programs",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:19,Testability,test,test,19,"//Run the standard test suite",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:92,Testability,test,test,92,"////////////////////////////////////////////////////////////////////////////////; /// Print test program number and its title",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:30,Security,authoriz,authorized,30,"//Some slight differences are authorized to take into account; //different math libraries used by the compiler, CINT and TFormula",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:163,Testability,test,tests,163,"////////////////////////////////////////////////////////////////////////////////; ///Open stress.root, read all objects, save 10 times and purge; ///This function tests the generation and reuse of gaps in files",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test of 2-d histograms, functions, 2-d fits",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2,Deployability,Update,Update,2,"//Update stress.root",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test of Postscript.; /// Make a complex picture. Verify number of lines on ps file; /// Testing automatically the graphics package is a complex problem.; /// The best way we have found is to generate a Postscript image; /// of a complex canvas containing many objects.; /// The number of lines in the ps file is compared with a reference run.; /// A few lines (up to 2 or 3) of difference may be expected because; /// Postscript works with floats. The date and time of the run are also; /// different.; /// You can also inspect visually the ps file with a ps viewer.",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:174,Testability,Test,Testing,174,"////////////////////////////////////////////////////////////////////////////////; /// Test of Postscript.; /// Make a complex picture. Verify number of lines on ps file; /// Testing automatically the graphics package is a complex problem.; /// The best way we have found is to generate a Postscript image; /// of a complex canvas containing many objects.; /// The number of lines in the ps file is compared with a reference run.; /// A few lines (up to 2 or 3) of difference may be expected because; /// Postscript works with floats. The date and time of the run are also; /// different.; /// You can also inspect visually the ps file with a ps viewer.",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:36,Testability,test,test,36,"//Get objects generated in previous test",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test subdirectories in a Root file; /// Create many TH1S histograms, make operations between them",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:28,Safety,detect,detector,28,"//Create a subdirectory per detector plane",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test TNtuple class with several selection mechanisms; /// Test expression cuts; /// Test graphical cuts; /// Test event lists and operations on event lists; /// Compare results of TTree::Draw with results of an explict loop",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:144,Testability,Test,Test,144,"////////////////////////////////////////////////////////////////////////////////; /// Test TNtuple class with several selection mechanisms; /// Test expression cuts; /// Test graphical cuts; /// Test event lists and operations on event lists; /// Compare results of TTree::Draw with results of an explict loop",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:170,Testability,Test,Test,170,"////////////////////////////////////////////////////////////////////////////////; /// Test TNtuple class with several selection mechanisms; /// Test expression cuts; /// Test graphical cuts; /// Test event lists and operations on event lists; /// Compare results of TTree::Draw with results of an explict loop",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:195,Testability,Test,Test,195,"////////////////////////////////////////////////////////////////////////////////; /// Test TNtuple class with several selection mechanisms; /// Test expression cuts; /// Test graphical cuts; /// Test event lists and operations on event lists; /// Compare results of TTree::Draw with results of an explict loop",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:29,Usability,learn,learn,29,"//one entry is sufficient to learn",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:133,Deployability,configurat,configurations,133,"////////////////////////////////////////////////////////////////////////////////; /// Run the $ROOTSYS/test/Event program in several configurations.",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:133,Modifiability,config,configurations,133,"////////////////////////////////////////////////////////////////////////////////; /// Run the $ROOTSYS/test/Event program in several configurations.",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:103,Testability,test,test,103,"////////////////////////////////////////////////////////////////////////////////; /// Run the $ROOTSYS/test/Event program in several configurations.",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:66,Testability,test,test,66,"// First step: make sure the Event shared library exists; // This test dynamic linking when running in interpreted mode",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test selections via TreeFormula; /// tree is a TTree when called by stress9; /// tree is a TChain when called from stress11; /// This is a quite complex test checking the results of TTree::Draw; /// or TChain::Draw with an explicit loop on events.; /// Also a good test for the interpreter",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:239,Testability,test,test,239,"////////////////////////////////////////////////////////////////////////////////; /// Test selections via TreeFormula; /// tree is a TTree when called by stress9; /// tree is a TChain when called from stress11; /// This is a quite complex test checking the results of TTree::Draw; /// or TChain::Draw with an explicit loop on events.; /// Also a good test for the interpreter",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:351,Testability,test,test,351,"////////////////////////////////////////////////////////////////////////////////; /// Test selections via TreeFormula; /// tree is a TTree when called by stress9; /// tree is a TChain when called from stress11; /// This is a quite complex test checking the results of TTree::Draw; /// or TChain::Draw with an explicit loop on events.; /// Also a good test for the interpreter",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:50,Testability,benchmark,benchmark,50,"// Since we disturbed the flow (due to the double benchmark printing),; // let's repeat the header!",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test chains of Trees; /// We make a TChain using the 10 files generated in test10; /// We expect the same results when analyzing the chain than; /// in the analysis of the original big file Event.root in test9.; /// Because TChain derives from TTree, we can use the same; /// analysis procedure ""stress9tree""",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,Testability,test,test,86,"////////////////////////////////////////////////////////////////////////////////; /// test of TChain::Merge; /// The 10 small Tree files generated in stress10 are again merged; /// into one single file.; /// Should be the same as the file generated in stress8, except; /// that events will be in a different order.; /// But global analysis histograms should be identical (checked by stress14)",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:65,Testability,test,test,65,"// Prototype trigger simulation for the LHCb experiment; // This test nested loops with the interpreter.; // Expected to run fast with the compiler, slow with the interpreter.; // This code is extracted from an original macro by Hans Dijkstra (LHCb); // The program generates histograms and profile histograms.; // A canvas with subpads containing the results is sent to Postscript.; // We check graphics results by counting the number of lines in the ps file.",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test mkdir returnExistingDirectory outside and within a Root file; /// Create some directories, ensure they point to the expected places",MatchSource.CODE_COMMENT,test/stress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx:122,Testability,test,test,122,"// Author: Anna Kreshuk, March 2007; /////////////////////////////////////////////////////////////////; //; //___A stress test for the TEntryList class and operations with it___; //; // The functions below test different properties of TEntryList; // - Test1() - assembling entry lists for smaller chains from the lists; // for bigger chains and vice versa + using them in TTree::Draw; // - Test2() - adding and subtracting entry lists in different order; // and using "">>+elist"" in TTree::Draw; // - Test3() - transforming TEventList objects into TEntryList objects for a TChain; // - Test4() - same as Test3() but for a TTree; //; // To run in batch mode, do; // stressEntryList; // stressEntryList 1000; // stressEntryList 1000 10; // Here the 1st parameter is the number of entries in each TTree,; // 2nd parameter is the number of created files; // Default values are 10000 10; //; // An example of output when all tests pass:; // **********************************************************************; // ***************Starting TEntryList stress test************************; // **********************************************************************; // **********Generating 10 data files, 2 trees of 10000 in each**********; // **********************************************************************; // Test1: Applying different entry lists to different chains --------- OK; // Test2: Adding and subtracting entry lists-------------------------- OK; // Test3: TEntryList and TEventList for TChain------------------------ OK; // Test4: TEntryList and TEventList for TTree------------------------- OK; // **********************************************************************; // *******************Deleting the data files****************************; // **********************************************************************",MatchSource.CODE_COMMENT,test/stressEntryList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx:206,Testability,test,test,206,"// Author: Anna Kreshuk, March 2007; /////////////////////////////////////////////////////////////////; //; //___A stress test for the TEntryList class and operations with it___; //; // The functions below test different properties of TEntryList; // - Test1() - assembling entry lists for smaller chains from the lists; // for bigger chains and vice versa + using them in TTree::Draw; // - Test2() - adding and subtracting entry lists in different order; // and using "">>+elist"" in TTree::Draw; // - Test3() - transforming TEventList objects into TEntryList objects for a TChain; // - Test4() - same as Test3() but for a TTree; //; // To run in batch mode, do; // stressEntryList; // stressEntryList 1000; // stressEntryList 1000 10; // Here the 1st parameter is the number of entries in each TTree,; // 2nd parameter is the number of created files; // Default values are 10000 10; //; // An example of output when all tests pass:; // **********************************************************************; // ***************Starting TEntryList stress test************************; // **********************************************************************; // **********Generating 10 data files, 2 trees of 10000 in each**********; // **********************************************************************; // Test1: Applying different entry lists to different chains --------- OK; // Test2: Adding and subtracting entry lists-------------------------- OK; // Test3: TEntryList and TEventList for TChain------------------------ OK; // Test4: TEntryList and TEventList for TTree------------------------- OK; // **********************************************************************; // *******************Deleting the data files****************************; // **********************************************************************",MatchSource.CODE_COMMENT,test/stressEntryList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx:919,Testability,test,tests,919,"// Author: Anna Kreshuk, March 2007; /////////////////////////////////////////////////////////////////; //; //___A stress test for the TEntryList class and operations with it___; //; // The functions below test different properties of TEntryList; // - Test1() - assembling entry lists for smaller chains from the lists; // for bigger chains and vice versa + using them in TTree::Draw; // - Test2() - adding and subtracting entry lists in different order; // and using "">>+elist"" in TTree::Draw; // - Test3() - transforming TEventList objects into TEntryList objects for a TChain; // - Test4() - same as Test3() but for a TTree; //; // To run in batch mode, do; // stressEntryList; // stressEntryList 1000; // stressEntryList 1000 10; // Here the 1st parameter is the number of entries in each TTree,; // 2nd parameter is the number of created files; // Default values are 10000 10; //; // An example of output when all tests pass:; // **********************************************************************; // ***************Starting TEntryList stress test************************; // **********************************************************************; // **********Generating 10 data files, 2 trees of 10000 in each**********; // **********************************************************************; // Test1: Applying different entry lists to different chains --------- OK; // Test2: Adding and subtracting entry lists-------------------------- OK; // Test3: TEntryList and TEventList for TChain------------------------ OK; // Test4: TEntryList and TEventList for TTree------------------------- OK; // **********************************************************************; // *******************Deleting the data files****************************; // **********************************************************************",MatchSource.CODE_COMMENT,test/stressEntryList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx:1052,Testability,test,test,1052,"// Author: Anna Kreshuk, March 2007; /////////////////////////////////////////////////////////////////; //; //___A stress test for the TEntryList class and operations with it___; //; // The functions below test different properties of TEntryList; // - Test1() - assembling entry lists for smaller chains from the lists; // for bigger chains and vice versa + using them in TTree::Draw; // - Test2() - adding and subtracting entry lists in different order; // and using "">>+elist"" in TTree::Draw; // - Test3() - transforming TEventList objects into TEntryList objects for a TChain; // - Test4() - same as Test3() but for a TTree; //; // To run in batch mode, do; // stressEntryList; // stressEntryList 1000; // stressEntryList 1000 10; // Here the 1st parameter is the number of entries in each TTree,; // 2nd parameter is the number of created files; // Default values are 10000 10; //; // An example of output when all tests pass:; // **********************************************************************; // ***************Starting TEntryList stress test************************; // **********************************************************************; // **********Generating 10 data files, 2 trees of 10000 in each**********; // **********************************************************************; // Test1: Applying different entry lists to different chains --------- OK; // Test2: Adding and subtracting entry lists-------------------------- OK; // Test3: TEntryList and TEventList for TChain------------------------ OK; // Test4: TEntryList and TEventList for TTree------------------------- OK; // **********************************************************************; // *******************Deleting the data files****************************; // **********************************************************************",MatchSource.CODE_COMMENT,test/stressEntryList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx:2,Testability,Test,Test,2,"//Test the functionality of entry lists for chains:; //making new entry lists out of parts of other entry lists; //applying same entry lists to different chains, etc",MatchSource.CODE_COMMENT,test/stressEntryList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx:2,Testability,Test,Test,2,"//Test adding and subtracting entry lists",MatchSource.CODE_COMMENT,test/stressEntryList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx:2,Testability,Test,Test,2,"//Test correspondence of event lists and entry lists",MatchSource.CODE_COMMENT,test/stressEntryList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx:2,Testability,Test,Test,2,"//Test entry lists with very many or very few events; //Only makes sense to check if there are > 64000 events",MatchSource.CODE_COMMENT,test/stressEntryList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx:25,Availability,failure,failure,25,"// increment by one upon failure",MatchSource.CODE_COMMENT,test/stressEntryList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:1537,Availability,toler,tolerance,1537,"l in verifying and comparing minimization routines. Many of these //; // are standard functions upon which it has become conventional to try all //; // new methods, quoting the performance in the publication of the algorithm //; // //; // Each test will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T R E S S * //; // ******************************************************************* //; // Test 1 : Wood.................................................. OK //; // Test 2 : RosenBrock............................................ OK //; // Test 3 : Powell................................................ OK //; // Test 4 : Fletcher.............................................. OK //; // Test 5 : GoldStein1............................................ OK //; // Test 6 : GoldStein2.......................................",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:563,Integrability,rout,routines,563,"// @(#)root/test:$name: $:$id: stressFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: Rene Brun, Eddy Offermann April 2006; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // Function Minimization Examples, Fred James //; // //; // from the //; // Proceedings of the 1972 CERN Computing and Data Processing School //; // Pertisau, Austria, 10-24 September, 1972 (CERN 72-21) //; // //; // Here a collection of test problems is assembled which were found to be //; // useful in verifying and comparing minimization routines. Many of these //; // are standard functions upon which it has become conventional to try all //; // new methods, quoting the performance in the publication of the algorithm //; // //; // Each test will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T ",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:1169,Integrability,rout,routine,1169,"zation Examples, Fred James //; // //; // from the //; // Proceedings of the 1972 CERN Computing and Data Processing School //; // Pertisau, Austria, 10-24 September, 1972 (CERN 72-21) //; // //; // Here a collection of test problems is assembled which were found to be //; // useful in verifying and comparing minimization routines. Many of these //; // are standard functions upon which it has become conventional to try all //; // new methods, quoting the performance in the publication of the algorithm //; // //; // Each test will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T R E S S * //; // ******************************************************************* //; // Test 1 : Wood.................................................. OK //; // Test 2 : RosenBrock............................................ OK //; /",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:698,Performance,perform,performance,698,"// @(#)root/test:$name: $:$id: stressFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: Rene Brun, Eddy Offermann April 2006; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // Function Minimization Examples, Fred James //; // //; // from the //; // Proceedings of the 1972 CERN Computing and Data Processing School //; // Pertisau, Austria, 10-24 September, 1972 (CERN 72-21) //; // //; // Here a collection of test problems is assembled which were found to be //; // useful in verifying and comparing minimization routines. Many of these //; // are standard functions upon which it has become conventional to try all //; // new methods, quoting the performance in the publication of the algorithm //; // //; // Each test will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T ",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:1003,Performance,perform,performance,1003,"#)root/test:$name: $:$id: stressFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: Rene Brun, Eddy Offermann April 2006; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // Function Minimization Examples, Fred James //; // //; // from the //; // Proceedings of the 1972 CERN Computing and Data Processing School //; // Pertisau, Austria, 10-24 September, 1972 (CERN 72-21) //; // //; // Here a collection of test problems is assembled which were found to be //; // useful in verifying and comparing minimization routines. Many of these //; // are standard functions upon which it has become conventional to try all //; // new methods, quoting the performance in the publication of the algorithm //; // //; // Each test will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T R E ",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:12,Testability,test,test,12,"// @(#)root/test:$name: $:$id: stressFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: Rene Brun, Eddy Offermann April 2006; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // Function Minimization Examples, Fred James //; // //; // from the //; // Proceedings of the 1972 CERN Computing and Data Processing School //; // Pertisau, Austria, 10-24 September, 1972 (CERN 72-21) //; // //; // Here a collection of test problems is assembled which were found to be //; // useful in verifying and comparing minimization routines. Many of these //; // are standard functions upon which it has become conventional to try all //; // new methods, quoting the performance in the publication of the algorithm //; // //; // Each test will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T ",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:459,Testability,test,test,459,"// @(#)root/test:$name: $:$id: stressFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: Rene Brun, Eddy Offermann April 2006; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // Function Minimization Examples, Fred James //; // //; // from the //; // Proceedings of the 1972 CERN Computing and Data Processing School //; // Pertisau, Austria, 10-24 September, 1972 (CERN 72-21) //; // //; // Here a collection of test problems is assembled which were found to be //; // useful in verifying and comparing minimization routines. Many of these //; // are standard functions upon which it has become conventional to try all //; // new methods, quoting the performance in the publication of the algorithm //; // //; // Each test will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T ",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:765,Testability,test,test,765,"// @(#)root/test:$name: $:$id: stressFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: Rene Brun, Eddy Offermann April 2006; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // Function Minimization Examples, Fred James //; // //; // from the //; // Proceedings of the 1972 CERN Computing and Data Processing School //; // Pertisau, Austria, 10-24 September, 1972 (CERN 72-21) //; // //; // Here a collection of test problems is assembled which were found to be //; // useful in verifying and comparing minimization routines. Many of these //; // are standard functions upon which it has become conventional to try all //; // new methods, quoting the performance in the publication of the algorithm //; // //; // Each test will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T ",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:793,Testability,Test,Test,793,"// @(#)root/test:$name: $:$id: stressFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: Rene Brun, Eddy Offermann April 2006; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // Function Minimization Examples, Fred James //; // //; // from the //; // Proceedings of the 1972 CERN Computing and Data Processing School //; // Pertisau, Austria, 10-24 September, 1972 (CERN 72-21) //; // //; // Here a collection of test problems is assembled which were found to be //; // useful in verifying and comparing minimization routines. Many of these //; // are standard functions upon which it has become conventional to try all //; // new methods, quoting the performance in the publication of the algorithm //; // //; // Each test will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T ",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:804,Testability,Test,Test,804,"// @(#)root/test:$name: $:$id: stressFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: Rene Brun, Eddy Offermann April 2006; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // Function Minimization Examples, Fred James //; // //; // from the //; // Proceedings of the 1972 CERN Computing and Data Processing School //; // Pertisau, Austria, 10-24 September, 1972 (CERN 72-21) //; // //; // Here a collection of test problems is assembled which were found to be //; // useful in verifying and comparing minimization routines. Many of these //; // are standard functions upon which it has become conventional to try all //; // new methods, quoting the performance in the publication of the algorithm //; // //; // Each test will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T ",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:844,Testability,test,test,844,"// @(#)root/test:$name: $:$id: stressFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: Rene Brun, Eddy Offermann April 2006; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // Function Minimization Examples, Fred James //; // //; // from the //; // Proceedings of the 1972 CERN Computing and Data Processing School //; // Pertisau, Austria, 10-24 September, 1972 (CERN 72-21) //; // //; // Here a collection of test problems is assembled which were found to be //; // useful in verifying and comparing minimization routines. Many of these //; // are standard functions upon which it has become conventional to try all //; // new methods, quoting the performance in the publication of the algorithm //; // //; // Each test will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T ",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:1298,Testability,test,test,1298,"zation Examples, Fred James //; // //; // from the //; // Proceedings of the 1972 CERN Computing and Data Processing School //; // Pertisau, Austria, 10-24 September, 1972 (CERN 72-21) //; // //; // Here a collection of test problems is assembled which were found to be //; // useful in verifying and comparing minimization routines. Many of these //; // are standard functions upon which it has become conventional to try all //; // new methods, quoting the performance in the publication of the algorithm //; // //; // Each test will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T R E S S * //; // ******************************************************************* //; // Test 1 : Wood.................................................. OK //; // Test 2 : RosenBrock............................................ OK //; /",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:1681,Testability,test,tests,1681,"will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T R E S S * //; // ******************************************************************* //; // Test 1 : Wood.................................................. OK //; // Test 2 : RosenBrock............................................ OK //; // Test 3 : Powell................................................ OK //; // Test 4 : Fletcher.............................................. OK //; // Test 5 : GoldStein1............................................ OK //; // Test 6 : GoldStein2............................................ OK //; // Test 7 : TrigoFletcher......................................... OK //; // ******************************************************************* //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*_*//",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:2093,Testability,Test,Test,2093,"will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T R E S S * //; // ******************************************************************* //; // Test 1 : Wood.................................................. OK //; // Test 2 : RosenBrock............................................ OK //; // Test 3 : Powell................................................ OK //; // Test 4 : Fletcher.............................................. OK //; // Test 5 : GoldStein1............................................ OK //; // Test 6 : GoldStein2............................................ OK //; // Test 7 : TrigoFletcher......................................... OK //; // ******************************************************************* //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*_*//",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:2167,Testability,Test,Test,2167,"will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T R E S S * //; // ******************************************************************* //; // Test 1 : Wood.................................................. OK //; // Test 2 : RosenBrock............................................ OK //; // Test 3 : Powell................................................ OK //; // Test 4 : Fletcher.............................................. OK //; // Test 5 : GoldStein1............................................ OK //; // Test 6 : GoldStein2............................................ OK //; // Test 7 : TrigoFletcher......................................... OK //; // ******************************************************************* //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*_*//",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:2241,Testability,Test,Test,2241,"will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T R E S S * //; // ******************************************************************* //; // Test 1 : Wood.................................................. OK //; // Test 2 : RosenBrock............................................ OK //; // Test 3 : Powell................................................ OK //; // Test 4 : Fletcher.............................................. OK //; // Test 5 : GoldStein1............................................ OK //; // Test 6 : GoldStein2............................................ OK //; // Test 7 : TrigoFletcher......................................... OK //; // ******************************************************************* //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*_*//",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:2315,Testability,Test,Test,2315,"will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T R E S S * //; // ******************************************************************* //; // Test 1 : Wood.................................................. OK //; // Test 2 : RosenBrock............................................ OK //; // Test 3 : Powell................................................ OK //; // Test 4 : Fletcher.............................................. OK //; // Test 5 : GoldStein1............................................ OK //; // Test 6 : GoldStein2............................................ OK //; // Test 7 : TrigoFletcher......................................... OK //; // ******************************************************************* //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*_*//",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:2389,Testability,Test,Test,2389,"will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T R E S S * //; // ******************************************************************* //; // Test 1 : Wood.................................................. OK //; // Test 2 : RosenBrock............................................ OK //; // Test 3 : Powell................................................ OK //; // Test 4 : Fletcher.............................................. OK //; // Test 5 : GoldStein1............................................ OK //; // Test 6 : GoldStein2............................................ OK //; // Test 7 : TrigoFletcher......................................... OK //; // ******************************************************************* //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*_*//",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:2463,Testability,Test,Test,2463,"will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T R E S S * //; // ******************************************************************* //; // Test 1 : Wood.................................................. OK //; // Test 2 : RosenBrock............................................ OK //; // Test 3 : Powell................................................ OK //; // Test 4 : Fletcher.............................................. OK //; // Test 5 : GoldStein1............................................ OK //; // Test 6 : GoldStein2............................................ OK //; // Test 7 : TrigoFletcher......................................... OK //; // ******************************************************************* //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*_*//",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:2537,Testability,Test,Test,2537,"will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T R E S S * //; // ******************************************************************* //; // Test 1 : Wood.................................................. OK //; // Test 2 : RosenBrock............................................ OK //; // Test 3 : Powell................................................ OK //; // Test 4 : Fletcher.............................................. OK //; // Test 5 : GoldStein1............................................ OK //; // Test 6 : GoldStein2............................................ OK //; // Test 7 : TrigoFletcher......................................... OK //; // ******************************************************************* //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*_*//",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:92,Testability,test,test,92,"////////////////////////////////////////////////////////////////////////////////; /// Print test program number and its title",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:509,Performance,perform,perform,509,"////////////////////////////////////////////////////////////////////////////////; ///; /// F(x,y) = 100 (y-x^2)^2 + (1-x)^2; ///; /// start point: F(-1.2,1.0) = 24.20; /// minimum : F(1.0,1.0) = 0.; ///; /// This narrow, parabolic valley is probably the best known of all test cases. The floor; /// of the valley follows approximately the parabola y = x^2+1/200 .; /// There is a region where the covariance matrix is not positive-definite and even a path; /// where it is singular . Stepping methods tend to perform at least as well as gradient; /// method for this function .; /// [Reference: Comput. J. 3,175 (1960).]",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:272,Testability,test,test,272,"////////////////////////////////////////////////////////////////////////////////; ///; /// F(x,y) = 100 (y-x^2)^2 + (1-x)^2; ///; /// start point: F(-1.2,1.0) = 24.20; /// minimum : F(1.0,1.0) = 0.; ///; /// This narrow, parabolic valley is probably the best known of all test cases. The floor; /// of the valley follows approximately the parabola y = x^2+1/200 .; /// There is a region where the covariance matrix is not positive-definite and even a path; /// where it is singular . Stepping methods tend to perform at least as well as gradient; /// method for this function .; /// [Reference: Comput. J. 3,175 (1960).]",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:695,Modifiability,variab,variables,695,"////////////////////////////////////////////////////////////////////////////////; ///; /// F(w,x,y,z) = 100 (y-w^2)^2 + (w-1)^2 + 90 (z-y^2)^2; /// + (1-y)^2 + 10.1 [(x-1)^2 + (z-1)^2]; /// + 19.8 (x-1)(z-1); ///; /// start point: F(-3,-1,-3,-1) = 19192; /// minimum : F(1,1,1,1) = 0.; ///; /// This is a fourth-degree polynomial which is reasonably well-behaved near the minimum,; /// but in order to get there one must cross a rather flat, four-dimensional ""plateau""; /// which often causes minimization algorithm to get ""stuck"" far from the minimum. As; /// such it is a particularly good test of convergence criteria and simulates quite well a; /// feature of many physical problems in many variables where no good starting; /// approximation is known .; /// [Reference: Unpublished. See IBM Technical Report No. 320-2949.]",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:592,Testability,test,test,592,"////////////////////////////////////////////////////////////////////////////////; ///; /// F(w,x,y,z) = 100 (y-w^2)^2 + (w-1)^2 + 90 (z-y^2)^2; /// + (1-y)^2 + 10.1 [(x-1)^2 + (z-1)^2]; /// + 19.8 (x-1)(z-1); ///; /// start point: F(-3,-1,-3,-1) = 19192; /// minimum : F(1,1,1,1) = 0.; ///; /// This is a fourth-degree polynomial which is reasonably well-behaved near the minimum,; /// but in order to get there one must cross a rather flat, four-dimensional ""plateau""; /// which often causes minimization algorithm to get ""stuck"" far from the minimum. As; /// such it is a particularly good test of convergence criteria and simulates quite well a; /// feature of many physical problems in many variables where no good starting; /// approximation is known .; /// [Reference: Unpublished. See IBM Technical Report No. 320-2949.]",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:414,Modifiability,variab,variables,414,"////////////////////////////////////////////////////////////////////////////////; ///; /// F(x,y) = (1 + (x+y+1)^2 * (19-14x+3x^2-14y+6xy+3y^2)); /// * (30 + (2x-3y)^2 * (18-32x+12x^2+48y-36xy+27y^2)); ///; /// start point : F(-0.4,-0,6) = 35; /// local minima : F(1.2,0.8) = 840; /// F(1.8,0.2) = 84; /// F(-0.6,-0.4) = 30; /// global minimum : F(0.0,-1.0) = 3; ///; /// This is an eighth-order polynomial in two variables which is well behaved near each; /// minimum, but has four local minima and is of course non-positive-definite in many; /// regions. The saddle point between the two lowest minima occurs at F(-0.4,-0.6)=35; /// making this an interesting start point .; /// [Reference: Math. Comp. 25, 571 (1971).]",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:593,Modifiability,variab,variables,593,"////////////////////////////////////////////////////////////////////////////////; ///; /// F(\vec{x}) = \sum_{i=1}^n ( E_i - \sum_{j=1}^n (A_{ij} \sin x_j + B_{ij} \cos x_j) )^2; ///; /// where E_i = \sum_{j=1}^n ( A_{ij} \sin x_{0j} + B_{ij} \cos x_{0j} ); ///; /// B_{ij} and A_{ij} are random matrices composed of integers between -100 and 100;; /// for j = 1,...,n: x_{0j} are any random numbers, -\pi < x_{0j} < \pi;; ///; /// start point : x_j = x_{0j} + 0.1 \delta_j, -\pi < \delta_j < \pi; /// minimum : F(\vec{x} = \vec{x}_0) = 0; ///; /// This is a set of functions of any number of variables n, where the minimum is always; /// known in advance, but where the problem can be changed by choosing different; /// (random) values of the constants A_{ij}, B_{ij}, and x_{0j} . The difficulty can be; /// varied by choosing larger starting deviations \delta_j . In practice, most methods; /// find the ""right"" minimum, corresponding to \vec{x} = \vec{x}_0, but there are usually; /// many subsidiary minima.; /// [Reference: Comput. J. 6 163 (1963).]",MatchSource.CODE_COMMENT,test/stressFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx:1152,Availability,error,error,1152,"// Program to check a TGeo geometry; // The first time you run this program, the geometry files will be taken; // from http://root.cern/files; //; // How the program works; // If the file <geom_name>_ref.root does not exist, it is generated. The file; // contains a TTree with Npoints (default=100000) obtained with the following; // algorithm:; // -a point is generated with a uniform distribution x,y,z in the master volume; // -a direction theta, phi is generated uniformly in -2pi<phi<2pi and 0<theta<pi; // -gGeoManager finds the geometry path for the point; // -the number of boundaries (nbound), total length (length), safety distance; // from the starting point (safe) and number of radiation lengths (rad) from x,y,z; // is calculated to the exit of the detector. The total number of crossings, detector; // weight and total number of radiation lengths for all tracks are stored as user info in the tree.; //; // Using the file <geom_name>_ref.root (generated typically with a previous version; // of the TGeo classes), the Npoints in the Tree are used to perform the; // same operation with the new version.; // In case of a disagreement, an error message is reported.; //; // The ReadRef case is also used as a benchmark; // The ROOTMARKS reported are relative to a Linux/P IV 2.8 GHz gcc3.2.3 machine; // normalized at 800 ROOTMARKS when running with CINT.; //; // To run this script, do; // stressGeometry; // or stressGeometry *; // or stressGeometry alice; // or from the ROOT command line; // root > .L stressGeometry.cxx or .L stressGeometry.cxx+; // root > stressGeometry(exp_name); // where exp_name is the geometry file name without .root; // OR simply: stressGeometry(); to run tests for a set of geometries; //; // Authors: Rene Brun, Andrei Gheata, 22 march 2005",MatchSource.CODE_COMMENT,test/stressGeometry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx:1158,Integrability,message,message,1158,"// Program to check a TGeo geometry; // The first time you run this program, the geometry files will be taken; // from http://root.cern/files; //; // How the program works; // If the file <geom_name>_ref.root does not exist, it is generated. The file; // contains a TTree with Npoints (default=100000) obtained with the following; // algorithm:; // -a point is generated with a uniform distribution x,y,z in the master volume; // -a direction theta, phi is generated uniformly in -2pi<phi<2pi and 0<theta<pi; // -gGeoManager finds the geometry path for the point; // -the number of boundaries (nbound), total length (length), safety distance; // from the starting point (safe) and number of radiation lengths (rad) from x,y,z; // is calculated to the exit of the detector. The total number of crossings, detector; // weight and total number of radiation lengths for all tracks are stored as user info in the tree.; //; // Using the file <geom_name>_ref.root (generated typically with a previous version; // of the TGeo classes), the Npoints in the Tree are used to perform the; // same operation with the new version.; // In case of a disagreement, an error message is reported.; //; // The ReadRef case is also used as a benchmark; // The ROOTMARKS reported are relative to a Linux/P IV 2.8 GHz gcc3.2.3 machine; // normalized at 800 ROOTMARKS when running with CINT.; //; // To run this script, do; // stressGeometry; // or stressGeometry *; // or stressGeometry alice; // or from the ROOT command line; // root > .L stressGeometry.cxx or .L stressGeometry.cxx+; // root > stressGeometry(exp_name); // where exp_name is the geometry file name without .root; // OR simply: stressGeometry(); to run tests for a set of geometries; //; // Authors: Rene Brun, Andrei Gheata, 22 march 2005",MatchSource.CODE_COMMENT,test/stressGeometry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx:1065,Performance,perform,perform,1065,"// Program to check a TGeo geometry; // The first time you run this program, the geometry files will be taken; // from http://root.cern/files; //; // How the program works; // If the file <geom_name>_ref.root does not exist, it is generated. The file; // contains a TTree with Npoints (default=100000) obtained with the following; // algorithm:; // -a point is generated with a uniform distribution x,y,z in the master volume; // -a direction theta, phi is generated uniformly in -2pi<phi<2pi and 0<theta<pi; // -gGeoManager finds the geometry path for the point; // -the number of boundaries (nbound), total length (length), safety distance; // from the starting point (safe) and number of radiation lengths (rad) from x,y,z; // is calculated to the exit of the detector. The total number of crossings, detector; // weight and total number of radiation lengths for all tracks are stored as user info in the tree.; //; // Using the file <geom_name>_ref.root (generated typically with a previous version; // of the TGeo classes), the Npoints in the Tree are used to perform the; // same operation with the new version.; // In case of a disagreement, an error message is reported.; //; // The ReadRef case is also used as a benchmark; // The ROOTMARKS reported are relative to a Linux/P IV 2.8 GHz gcc3.2.3 machine; // normalized at 800 ROOTMARKS when running with CINT.; //; // To run this script, do; // stressGeometry; // or stressGeometry *; // or stressGeometry alice; // or from the ROOT command line; // root > .L stressGeometry.cxx or .L stressGeometry.cxx+; // root > stressGeometry(exp_name); // where exp_name is the geometry file name without .root; // OR simply: stressGeometry(); to run tests for a set of geometries; //; // Authors: Rene Brun, Andrei Gheata, 22 march 2005",MatchSource.CODE_COMMENT,test/stressGeometry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx:626,Safety,safe,safety,626,"// Program to check a TGeo geometry; // The first time you run this program, the geometry files will be taken; // from http://root.cern/files; //; // How the program works; // If the file <geom_name>_ref.root does not exist, it is generated. The file; // contains a TTree with Npoints (default=100000) obtained with the following; // algorithm:; // -a point is generated with a uniform distribution x,y,z in the master volume; // -a direction theta, phi is generated uniformly in -2pi<phi<2pi and 0<theta<pi; // -gGeoManager finds the geometry path for the point; // -the number of boundaries (nbound), total length (length), safety distance; // from the starting point (safe) and number of radiation lengths (rad) from x,y,z; // is calculated to the exit of the detector. The total number of crossings, detector; // weight and total number of radiation lengths for all tracks are stored as user info in the tree.; //; // Using the file <geom_name>_ref.root (generated typically with a previous version; // of the TGeo classes), the Npoints in the Tree are used to perform the; // same operation with the new version.; // In case of a disagreement, an error message is reported.; //; // The ReadRef case is also used as a benchmark; // The ROOTMARKS reported are relative to a Linux/P IV 2.8 GHz gcc3.2.3 machine; // normalized at 800 ROOTMARKS when running with CINT.; //; // To run this script, do; // stressGeometry; // or stressGeometry *; // or stressGeometry alice; // or from the ROOT command line; // root > .L stressGeometry.cxx or .L stressGeometry.cxx+; // root > stressGeometry(exp_name); // where exp_name is the geometry file name without .root; // OR simply: stressGeometry(); to run tests for a set of geometries; //; // Authors: Rene Brun, Andrei Gheata, 22 march 2005",MatchSource.CODE_COMMENT,test/stressGeometry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx:671,Safety,safe,safe,671,"// Program to check a TGeo geometry; // The first time you run this program, the geometry files will be taken; // from http://root.cern/files; //; // How the program works; // If the file <geom_name>_ref.root does not exist, it is generated. The file; // contains a TTree with Npoints (default=100000) obtained with the following; // algorithm:; // -a point is generated with a uniform distribution x,y,z in the master volume; // -a direction theta, phi is generated uniformly in -2pi<phi<2pi and 0<theta<pi; // -gGeoManager finds the geometry path for the point; // -the number of boundaries (nbound), total length (length), safety distance; // from the starting point (safe) and number of radiation lengths (rad) from x,y,z; // is calculated to the exit of the detector. The total number of crossings, detector; // weight and total number of radiation lengths for all tracks are stored as user info in the tree.; //; // Using the file <geom_name>_ref.root (generated typically with a previous version; // of the TGeo classes), the Npoints in the Tree are used to perform the; // same operation with the new version.; // In case of a disagreement, an error message is reported.; //; // The ReadRef case is also used as a benchmark; // The ROOTMARKS reported are relative to a Linux/P IV 2.8 GHz gcc3.2.3 machine; // normalized at 800 ROOTMARKS when running with CINT.; //; // To run this script, do; // stressGeometry; // or stressGeometry *; // or stressGeometry alice; // or from the ROOT command line; // root > .L stressGeometry.cxx or .L stressGeometry.cxx+; // root > stressGeometry(exp_name); // where exp_name is the geometry file name without .root; // OR simply: stressGeometry(); to run tests for a set of geometries; //; // Authors: Rene Brun, Andrei Gheata, 22 march 2005",MatchSource.CODE_COMMENT,test/stressGeometry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx:763,Safety,detect,detector,763,"// Program to check a TGeo geometry; // The first time you run this program, the geometry files will be taken; // from http://root.cern/files; //; // How the program works; // If the file <geom_name>_ref.root does not exist, it is generated. The file; // contains a TTree with Npoints (default=100000) obtained with the following; // algorithm:; // -a point is generated with a uniform distribution x,y,z in the master volume; // -a direction theta, phi is generated uniformly in -2pi<phi<2pi and 0<theta<pi; // -gGeoManager finds the geometry path for the point; // -the number of boundaries (nbound), total length (length), safety distance; // from the starting point (safe) and number of radiation lengths (rad) from x,y,z; // is calculated to the exit of the detector. The total number of crossings, detector; // weight and total number of radiation lengths for all tracks are stored as user info in the tree.; //; // Using the file <geom_name>_ref.root (generated typically with a previous version; // of the TGeo classes), the Npoints in the Tree are used to perform the; // same operation with the new version.; // In case of a disagreement, an error message is reported.; //; // The ReadRef case is also used as a benchmark; // The ROOTMARKS reported are relative to a Linux/P IV 2.8 GHz gcc3.2.3 machine; // normalized at 800 ROOTMARKS when running with CINT.; //; // To run this script, do; // stressGeometry; // or stressGeometry *; // or stressGeometry alice; // or from the ROOT command line; // root > .L stressGeometry.cxx or .L stressGeometry.cxx+; // root > stressGeometry(exp_name); // where exp_name is the geometry file name without .root; // OR simply: stressGeometry(); to run tests for a set of geometries; //; // Authors: Rene Brun, Andrei Gheata, 22 march 2005",MatchSource.CODE_COMMENT,test/stressGeometry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx:804,Safety,detect,detector,804,"// Program to check a TGeo geometry; // The first time you run this program, the geometry files will be taken; // from http://root.cern/files; //; // How the program works; // If the file <geom_name>_ref.root does not exist, it is generated. The file; // contains a TTree with Npoints (default=100000) obtained with the following; // algorithm:; // -a point is generated with a uniform distribution x,y,z in the master volume; // -a direction theta, phi is generated uniformly in -2pi<phi<2pi and 0<theta<pi; // -gGeoManager finds the geometry path for the point; // -the number of boundaries (nbound), total length (length), safety distance; // from the starting point (safe) and number of radiation lengths (rad) from x,y,z; // is calculated to the exit of the detector. The total number of crossings, detector; // weight and total number of radiation lengths for all tracks are stored as user info in the tree.; //; // Using the file <geom_name>_ref.root (generated typically with a previous version; // of the TGeo classes), the Npoints in the Tree are used to perform the; // same operation with the new version.; // In case of a disagreement, an error message is reported.; //; // The ReadRef case is also used as a benchmark; // The ROOTMARKS reported are relative to a Linux/P IV 2.8 GHz gcc3.2.3 machine; // normalized at 800 ROOTMARKS when running with CINT.; //; // To run this script, do; // stressGeometry; // or stressGeometry *; // or stressGeometry alice; // or from the ROOT command line; // root > .L stressGeometry.cxx or .L stressGeometry.cxx+; // root > stressGeometry(exp_name); // where exp_name is the geometry file name without .root; // OR simply: stressGeometry(); to run tests for a set of geometries; //; // Authors: Rene Brun, Andrei Gheata, 22 march 2005",MatchSource.CODE_COMMENT,test/stressGeometry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx:1222,Testability,benchmark,benchmark,1222,"// Program to check a TGeo geometry; // The first time you run this program, the geometry files will be taken; // from http://root.cern/files; //; // How the program works; // If the file <geom_name>_ref.root does not exist, it is generated. The file; // contains a TTree with Npoints (default=100000) obtained with the following; // algorithm:; // -a point is generated with a uniform distribution x,y,z in the master volume; // -a direction theta, phi is generated uniformly in -2pi<phi<2pi and 0<theta<pi; // -gGeoManager finds the geometry path for the point; // -the number of boundaries (nbound), total length (length), safety distance; // from the starting point (safe) and number of radiation lengths (rad) from x,y,z; // is calculated to the exit of the detector. The total number of crossings, detector; // weight and total number of radiation lengths for all tracks are stored as user info in the tree.; //; // Using the file <geom_name>_ref.root (generated typically with a previous version; // of the TGeo classes), the Npoints in the Tree are used to perform the; // same operation with the new version.; // In case of a disagreement, an error message is reported.; //; // The ReadRef case is also used as a benchmark; // The ROOTMARKS reported are relative to a Linux/P IV 2.8 GHz gcc3.2.3 machine; // normalized at 800 ROOTMARKS when running with CINT.; //; // To run this script, do; // stressGeometry; // or stressGeometry *; // or stressGeometry alice; // or from the ROOT command line; // root > .L stressGeometry.cxx or .L stressGeometry.cxx+; // root > stressGeometry(exp_name); // where exp_name is the geometry file name without .root; // OR simply: stressGeometry(); to run tests for a set of geometries; //; // Authors: Rene Brun, Andrei Gheata, 22 march 2005",MatchSource.CODE_COMMENT,test/stressGeometry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx:1699,Testability,test,tests,1699,"// Program to check a TGeo geometry; // The first time you run this program, the geometry files will be taken; // from http://root.cern/files; //; // How the program works; // If the file <geom_name>_ref.root does not exist, it is generated. The file; // contains a TTree with Npoints (default=100000) obtained with the following; // algorithm:; // -a point is generated with a uniform distribution x,y,z in the master volume; // -a direction theta, phi is generated uniformly in -2pi<phi<2pi and 0<theta<pi; // -gGeoManager finds the geometry path for the point; // -the number of boundaries (nbound), total length (length), safety distance; // from the starting point (safe) and number of radiation lengths (rad) from x,y,z; // is calculated to the exit of the detector. The total number of crossings, detector; // weight and total number of radiation lengths for all tracks are stored as user info in the tree.; //; // Using the file <geom_name>_ref.root (generated typically with a previous version; // of the TGeo classes), the Npoints in the Tree are used to perform the; // same operation with the new version.; // In case of a disagreement, an error message is reported.; //; // The ReadRef case is also used as a benchmark; // The ROOTMARKS reported are relative to a Linux/P IV 2.8 GHz gcc3.2.3 machine; // normalized at 800 ROOTMARKS when running with CINT.; //; // To run this script, do; // stressGeometry; // or stressGeometry *; // or stressGeometry alice; // or from the ROOT command line; // root > .L stressGeometry.cxx or .L stressGeometry.cxx+; // root > stressGeometry(exp_name); // where exp_name is the geometry file name without .root; // OR simply: stressGeometry(); to run tests for a set of geometries; //; // Authors: Rene Brun, Andrei Gheata, 22 march 2005",MatchSource.CODE_COMMENT,test/stressGeometry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx:1666,Usability,simpl,simply,1666,"// Program to check a TGeo geometry; // The first time you run this program, the geometry files will be taken; // from http://root.cern/files; //; // How the program works; // If the file <geom_name>_ref.root does not exist, it is generated. The file; // contains a TTree with Npoints (default=100000) obtained with the following; // algorithm:; // -a point is generated with a uniform distribution x,y,z in the master volume; // -a direction theta, phi is generated uniformly in -2pi<phi<2pi and 0<theta<pi; // -gGeoManager finds the geometry path for the point; // -the number of boundaries (nbound), total length (length), safety distance; // from the starting point (safe) and number of radiation lengths (rad) from x,y,z; // is calculated to the exit of the detector. The total number of crossings, detector; // weight and total number of radiation lengths for all tracks are stored as user info in the tree.; //; // Using the file <geom_name>_ref.root (generated typically with a previous version; // of the TGeo classes), the Npoints in the Tree are used to perform the; // same operation with the new version.; // In case of a disagreement, an error message is reported.; //; // The ReadRef case is also used as a benchmark; // The ROOTMARKS reported are relative to a Linux/P IV 2.8 GHz gcc3.2.3 machine; // normalized at 800 ROOTMARKS when running with CINT.; //; // To run this script, do; // stressGeometry; // or stressGeometry *; // or stressGeometry alice; // or from the ROOT command line; // root > .L stressGeometry.cxx or .L stressGeometry.cxx+; // root > stressGeometry(exp_name); // where exp_name is the geometry file name without .root; // OR simply: stressGeometry(); to run tests for a set of geometries; //; // Authors: Rene Brun, Andrei Gheata, 22 march 2005",MatchSource.CODE_COMMENT,test/stressGeometry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx:3,Safety,Safe,Safety,3,"// Safety distance for the initial location",MatchSource.CODE_COMMENT,test/stressGeometry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx:27,Availability,error,error,27,"// 32bit linux: we have an error with ATLAS, see https://sft.its.cern.ch/jira/browse/ROOT-9893; // Disable unless explicitly enabled.",MatchSource.CODE_COMMENT,test/stressGeometry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:12,Testability,test,test,12,"// @(#)root/test:$name: $:$id: stressGraphics.cxx,v 1.0 exp $; // Author: O.Couet; //; // ROOT Graphics test suite and benchmarks.; //; // The suite of programs below tests many elements of the graphics classes; //; // The test can be run as a standalone program or with the interpreter.; //; // To run as a standalone program:; //; // make stressGraphics; // stressGraphics; //; // To get a short help:; //; // stressGraphics -h; //; // To run interactively, do:; //; // root -b; // root [0] .L stressGraphics.cxx; // root [1] stressGraphics(); //; // or:; //; // root -b; // root [0] .x stressGraphics.cxx",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:104,Testability,test,test,104,"// @(#)root/test:$name: $:$id: stressGraphics.cxx,v 1.0 exp $; // Author: O.Couet; //; // ROOT Graphics test suite and benchmarks.; //; // The suite of programs below tests many elements of the graphics classes; //; // The test can be run as a standalone program or with the interpreter.; //; // To run as a standalone program:; //; // make stressGraphics; // stressGraphics; //; // To get a short help:; //; // stressGraphics -h; //; // To run interactively, do:; //; // root -b; // root [0] .L stressGraphics.cxx; // root [1] stressGraphics(); //; // or:; //; // root -b; // root [0] .x stressGraphics.cxx",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:119,Testability,benchmark,benchmarks,119,"// @(#)root/test:$name: $:$id: stressGraphics.cxx,v 1.0 exp $; // Author: O.Couet; //; // ROOT Graphics test suite and benchmarks.; //; // The suite of programs below tests many elements of the graphics classes; //; // The test can be run as a standalone program or with the interpreter.; //; // To run as a standalone program:; //; // make stressGraphics; // stressGraphics; //; // To get a short help:; //; // stressGraphics -h; //; // To run interactively, do:; //; // root -b; // root [0] .L stressGraphics.cxx; // root [1] stressGraphics(); //; // or:; //; // root -b; // root [0] .x stressGraphics.cxx",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:167,Testability,test,tests,167,"// @(#)root/test:$name: $:$id: stressGraphics.cxx,v 1.0 exp $; // Author: O.Couet; //; // ROOT Graphics test suite and benchmarks.; //; // The suite of programs below tests many elements of the graphics classes; //; // The test can be run as a standalone program or with the interpreter.; //; // To run as a standalone program:; //; // make stressGraphics; // stressGraphics; //; // To get a short help:; //; // stressGraphics -h; //; // To run interactively, do:; //; // root -b; // root [0] .L stressGraphics.cxx; // root [1] stressGraphics(); //; // or:; //; // root -b; // root [0] .x stressGraphics.cxx",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:223,Testability,test,test,223,"// @(#)root/test:$name: $:$id: stressGraphics.cxx,v 1.0 exp $; // Author: O.Couet; //; // ROOT Graphics test suite and benchmarks.; //; // The suite of programs below tests many elements of the graphics classes; //; // The test can be run as a standalone program or with the interpreter.; //; // To run as a standalone program:; //; // make stressGraphics; // stressGraphics; //; // To get a short help:; //; // stressGraphics -h; //; // To run interactively, do:; //; // root -b; // root [0] .L stressGraphics.cxx; // root [1] stressGraphics(); //; // or:; //; // root -b; // root [0] .x stressGraphics.cxx",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:10,Modifiability,variab,variables,10,"// Global variables.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:92,Testability,test,test,92,"////////////////////////////////////////////////////////////////////////////////; /// Print test program number and its title",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:197,Modifiability,variab,variable,197,"////////////////////////////////////////////////////////////////////////////////; /// Analyse the PS file ""filename"" and return the number of character in the; /// meaningful part of the file. The variable part (date etc..) are not; /// counted.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:145,Availability,error,error,145,"////////////////////////////////////////////////////////////////////////////////; /// Start Test:; /// Open the TCanvas C and set the acceptable error (number of characters)",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:92,Testability,Test,Test,92,"////////////////////////////////////////////////////////////////////////////////; /// Start Test:; /// Open the TCanvas C and set the acceptable error (number of characters)",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:129,Modifiability,config,configure,129,"////////////////////////////////////////////////////////////////////////////////; /// Starts new block of tests; /// In web mode configure number of batch images",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:106,Testability,test,tests,106,"////////////////////////////////////////////////////////////////////////////////; /// Starts new block of tests; /// In web mode configure number of batch images",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:116,Performance,perform,performed,116,"////////////////////////////////////////////////////////////////////////////////; /// Analyze and print reports for performed tests",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:126,Testability,test,tests,126,"////////////////////////////////////////////////////////////////////////////////; /// Analyze and print reports for performed tests",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test TLine.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test TMarker",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test TPolyLine",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test Patterns",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:96,Testability,test,test,96,"////////////////////////////////////////////////////////////////////////////////; /// 1st TText test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:38,Testability,test,tests,38,"// 161 is not a valid text font. This tests if the protection against; // invalid text font is working.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:96,Testability,test,test,96,"////////////////////////////////////////////////////////////////////////////////; /// 2nd TText test. A very long text string.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// 1st TLatex test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// 2nd TLatex test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// 3rd TLatex test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// 4th TLatex test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// 5th TLatex test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:95,Testability,test,test,95,"////////////////////////////////////////////////////////////////////////////////; /// TMatText test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:115,Availability,error,errors,115,"////////////////////////////////////////////////////////////////////////////////; /// Stat and fit parameters with errors.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// 1st TGaxis test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// 2nd TGaxis test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// 3rd TGaxis test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// 4th TGaxis test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// 5th TGaxis test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:55,Security,access,accessor,55,"// Get offset string of axis time format: there is not accessor; // to time format in TGaxis.; // Assumes TAxis use the same format.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:95,Testability,test,test,95,"////////////////////////////////////////////////////////////////////////////////; /// TEllipse test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:103,Testability,test,test,103,"////////////////////////////////////////////////////////////////////////////////; /// Feynman diagrams test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// Ratio plot test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// 1st TGraph test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// 2nd TGraph test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// 3rd TGraph test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:97,Testability,test,test,97,"////////////////////////////////////////////////////////////////////////////////; /// 4th TGraph test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:3,Testability,Log,Log,3,"// Log x first",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:3,Testability,Log,Log,3,"// Log y first",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:94,Testability,test,test,94,"////////////////////////////////////////////////////////////////////////////////; /// TH2Poly test.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:115,Testability,test,test,115,"////////////////////////////////////////////////////////////////////////////////; /// TMultigraph and TGraphErrors test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:110,Testability,test,test,110,"////////////////////////////////////////////////////////////////////////////////; /// All Kind of TMultigraph test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:101,Testability,Test,Test,101,"////////////////////////////////////////////////////////////////////////////////; /// 1st 2D options Test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:101,Testability,Test,Test,101,"////////////////////////////////////////////////////////////////////////////////; /// 2nd 2D options Test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:101,Testability,Test,Test,101,"////////////////////////////////////////////////////////////////////////////////; /// 3rd 2D options Test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:101,Testability,Test,Test,101,"////////////////////////////////////////////////////////////////////////////////; /// 4th 2D options Test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:101,Testability,Test,Test,101,"////////////////////////////////////////////////////////////////////////////////; /// 5th 2D options Test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:101,Testability,Test,Test,101,"////////////////////////////////////////////////////////////////////////////////; /// 6th 2D options Test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:99,Testability,Test,Test,99,"////////////////////////////////////////////////////////////////////////////////; /// 1st TGraph2D Test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:99,Testability,Test,Test,99,"////////////////////////////////////////////////////////////////////////////////; /// 2nd TGraph2D Test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:99,Testability,Test,Test,99,"////////////////////////////////////////////////////////////////////////////////; /// 3rd TGraph2D Test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:115,Testability,test,test,115,"////////////////////////////////////////////////////////////////////////////////; /// 1st complex drawing and TPad test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:115,Testability,test,test,115,"////////////////////////////////////////////////////////////////////////////////; /// 2nd complex drawing and TPad test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:93,Testability,test,test,93,"////////////////////////////////////////////////////////////////////////////////; /// TImage test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:119,Modifiability,variab,variables,119,"////////////////////////////////////////////////////////////////////////////////; /// Ntuple drawing with alphanumeric variables",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:109,Testability,test,test,109,"////////////////////////////////////////////////////////////////////////////////; /// Needed for the ""waves"" test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:109,Testability,test,test,109,"////////////////////////////////////////////////////////////////////////////////; /// Needed for the ""waves"" test",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:110,Testability,test,tests,110,"////////////////////////////////////////////////////////////////////////////////; /// Run all graphics stress tests.",MatchSource.CODE_COMMENT,test/stressGraphics.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:12,Testability,test,test,12,"// @(#)root/test:$name: $:$id: stressGUI.cxx,v 1.0 exp $; // Author: Bertrand Bellenot; //; // ROOT GUI test suite.; //; // The suite of programs below tests many elements of the ROOT GUI classes; //; // The test can only be run as a standalone program.; // To build and run it:; //; // make stressGUI; // stressGUI; //; // To get a short help:; // stressGUI -help; //",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:104,Testability,test,test,104,"// @(#)root/test:$name: $:$id: stressGUI.cxx,v 1.0 exp $; // Author: Bertrand Bellenot; //; // ROOT GUI test suite.; //; // The suite of programs below tests many elements of the ROOT GUI classes; //; // The test can only be run as a standalone program.; // To build and run it:; //; // make stressGUI; // stressGUI; //; // To get a short help:; // stressGUI -help; //",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:152,Testability,test,tests,152,"// @(#)root/test:$name: $:$id: stressGUI.cxx,v 1.0 exp $; // Author: Bertrand Bellenot; //; // ROOT GUI test suite.; //; // The suite of programs below tests many elements of the ROOT GUI classes; //; // The test can only be run as a standalone program.; // To build and run it:; //; // make stressGUI; // stressGUI; //; // To get a short help:; // stressGUI -help; //",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:208,Testability,test,test,208,"// @(#)root/test:$name: $:$id: stressGUI.cxx,v 1.0 exp $; // Author: Bertrand Bellenot; //; // ROOT GUI test suite.; //; // The suite of programs below tests many elements of the ROOT GUI classes; //; // The test can only be run as a standalone program.; // To build and run it:; //; // make stressGUI; // stressGUI; //; // To get a short help:; // stressGUI -help; //",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:3,Testability,Test,Tests,3,"// Tests functions.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:10,Modifiability,variab,variables,10,"// Global variables.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:105,Testability,test,tests,105,"////////////////////////////////////////////////////////////////////////////////; /// Run all stress GUI tests.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:35,Safety,avoid,avoid,35,"// uncomment the next few lines to avoid (forbid) any mouse interaction; // gVirtualX->GrabPointer(gClient->GetDefaultRoot()->GetId(), kButtonPressMask |; // kButtonReleaseMask | kPointerMotionMask, kNone,; // gVirtualX->CreateCursor(kWatch), kTRUE, kFALSE);",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:11,Integrability,depend,depends,11,"// results depends on the files in $ROOTSYS/test",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:44,Testability,test,test,44,"// results depends on the files in $ROOTSYS/test",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:27,Performance,load,load,27,"// not relevant as the CPU load and the background may vary...",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:89,Testability,Test,Test,89,"////////////////////////////////////////////////////////////////////////////////; // GUI Test code; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test layout and different states of some buttons.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:16,Testability,test,tested,16,"// button being tested",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:91,Testability,test,test,91,"////////////////////////////////////////////////////////////////////////////////; /// Main test window.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:18,Testability,test,test,18,"// The button for test",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test different text alignments in a TGTextButton.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test enabled/disabled state of button group.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test different styles and the enabled/disabled state of labels.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:105,Deployability,configurat,configurations,105,"////////////////////////////////////////////////////////////////////////////////; /// Test the different configurations/states of a split button.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:105,Modifiability,config,configurations,105,"////////////////////////////////////////////////////////////////////////////////; /// Test the different configurations/states of a split button.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test the different configurations/states of a split button.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:3,Availability,echo,echo,3,"// echo mode (echo, password, no echo)",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:14,Availability,echo,echo,14,"// echo mode (echo, password, no echo)",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:33,Availability,echo,echo,33,"// echo mode (echo, password, no echo)",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:20,Security,password,password,20,"// echo mode (echo, password, no echo)",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:111,Availability,avail,available,111,"////////////////////////////////////////////////////////////////////////////////; /// Test the different modes available for text entries.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test the different modes available for text entries.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test TGListTree and TGListTreeItems.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test TGShutter widget.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:109,Usability,progress bar,progress bars,109,"////////////////////////////////////////////////////////////////////////////////; /// Set some values to our progress bars.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test several styles of progress bar.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:109,Usability,progress bar,progress bar,109,"////////////////////////////////////////////////////////////////////////////////; /// Test several styles of progress bar.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test number entries in different formats.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load a text buffer in the editor.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:98,Testability,test,test,98,"////////////////////////////////////////////////////////////////////////////////; /// Very simple test of the TGTextEdit widget.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:91,Usability,simpl,simple,91,"////////////////////////////////////////////////////////////////////////////////; /// Very simple test of the TGTextEdit widget.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Testability,Test,Test,168,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test Simple Canvas...",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:173,Usability,Simpl,Simple,173,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test Simple Canvas...",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test Color Selection Dialog.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Testability,Test,Test,168,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test Font Selection Dialog.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Testability,Test,Test,168,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test Search Dialog.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test table layout.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Testability,Test,Test,168,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test the TGPack widget.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:18,Testability,test,test,18,"// Dialog used to test the different supported sliders.; // use hierarchical cleaning",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test horizontal and vertical sliders.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Testability,Test,Test,168,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test TGSplitFrame.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Testability,Test,Test,168,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test the ROOT control bar.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:180,Testability,test,test,180,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Very simple test of the ROOT help dialog.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:173,Usability,simpl,simple,173,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Very simple test of the ROOT help dialog.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Testability,Test,Test,168,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test the ASImage palette editor.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:168,Testability,Test,Test,168,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test the HTML Browser.",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:101,Availability,avail,available,101,"////////////////////////////////////////////////////////////////////////////////; /// Run the macros available in $ROOTSYS/tutorials/gui",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:21,Testability,test,tests,21,"// delete successful tests, keep only the failing ones (for verification)",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:7,Safety,timeout,timeout,7,"// add timeout...",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:7,Safety,timeout,timeout,7,"// add timeout...",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:7,Safety,timeout,timeout,7,"// add timeout...",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:7,Safety,timeout,timeout,7,"// add timeout...",MatchSource.CODE_COMMENT,test/stressGUI.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:1201,Deployability,configurat,configuration,1201,"E P I X G L O B A L B E N C H M A R K; // ===============================================================; //; // HEPiX-HEPNT is an organization comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 11 RT seconds on the ref machine); ///Running : stressLinear, (takes 26 RT seconds on the ref machine); ///Running : stressGeometry, (takes 77 RT seconds on the ref m",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:371,Energy Efficiency,Energy,Energy,371,"// @(#)root/test:$Id$; // Author: Rene Brun 12/09/2006; ///////////////////////////////////////////////////////////////////////////////; //; // R O O T S T R E S S H E P I X G L O B A L B E N C H M A R K; // ===============================================================; //; // HEPiX-HEPNT is an organization comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 1",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:1201,Modifiability,config,configuration,1201,"E P I X G L O B A L B E N C H M A R K; // ===============================================================; //; // HEPiX-HEPNT is an organization comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 11 RT seconds on the ref machine); ///Running : stressLinear, (takes 26 RT seconds on the ref machine); ///Running : stressGeometry, (takes 77 RT seconds on the ref m",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Rene Brun 12/09/2006; ///////////////////////////////////////////////////////////////////////////////; //; // R O O T S T R E S S H E P I X G L O B A L B E N C H M A R K; // ===============================================================; //; // HEPiX-HEPNT is an organization comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 1",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:604,Testability,benchmark,benchmark,604,"// @(#)root/test:$Id$; // Author: Rene Brun 12/09/2006; ///////////////////////////////////////////////////////////////////////////////; //; // R O O T S T R E S S H E P I X G L O B A L B E N C H M A R K; // ===============================================================; //; // HEPiX-HEPNT is an organization comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 1",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:721,Testability,benchmark,benchmarks,721,"// @(#)root/test:$Id$; // Author: Rene Brun 12/09/2006; ///////////////////////////////////////////////////////////////////////////////; //; // R O O T S T R E S S H E P I X G L O B A L B E N C H M A R K; // ===============================================================; //; // HEPiX-HEPNT is an organization comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 1",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:808,Testability,benchmark,benchmark,808,"// @(#)root/test:$Id$; // Author: Rene Brun 12/09/2006; ///////////////////////////////////////////////////////////////////////////////; //; // R O O T S T R E S S H E P I X G L O B A L B E N C H M A R K; // ===============================================================; //; // HEPiX-HEPNT is an organization comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 1",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:850,Testability,benchmark,benchmarks,850,"// @(#)root/test:$Id$; // Author: Rene Brun 12/09/2006; ///////////////////////////////////////////////////////////////////////////////; //; // R O O T S T R E S S H E P I X G L O B A L B E N C H M A R K; // ===============================================================; //; // HEPiX-HEPNT is an organization comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 1",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:897,Testability,test,tests,897,"// @(#)root/test:$Id$; // Author: Rene Brun 12/09/2006; ///////////////////////////////////////////////////////////////////////////////; //; // R O O T S T R E S S H E P I X G L O B A L B E N C H M A R K; // ===============================================================; //; // HEPiX-HEPNT is an organization comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 1",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:911,Testability,test,tests,911,"// @(#)root/test:$Id$; // Author: Rene Brun 12/09/2006; ///////////////////////////////////////////////////////////////////////////////; //; // R O O T S T R E S S H E P I X G L O B A L B E N C H M A R K; // ===============================================================; //; // HEPiX-HEPNT is an organization comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 1",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:1051,Testability,benchmark,benchmark,1051,"//////////////////////////////////////////////////////////////////; //; // R O O T S T R E S S H E P I X G L O B A L B E N C H M A R K; // ===============================================================; //; // HEPiX-HEPNT is an organization comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 11 RT seconds on the ref machine); ///Running : stressLinear, (takes ",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:1137,Testability,benchmark,benchmark,1137,"E P I X G L O B A L B E N C H M A R K; // ===============================================================; //; // HEPiX-HEPNT is an organization comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 11 RT seconds on the ref machine); ///Running : stressLinear, (takes 26 RT seconds on the ref machine); ///Running : stressGeometry, (takes 77 RT seconds on the ref m",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:1167,Testability,test,test,1167,"E P I X G L O B A L B E N C H M A R K; // ===============================================================; //; // HEPiX-HEPNT is an organization comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 11 RT seconds on the ref machine); ///Running : stressLinear, (takes 26 RT seconds on the ref machine); ///Running : stressGeometry, (takes 77 RT seconds on the ref m",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:1257,Testability,benchmark,benchmark,1257,"ation comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 11 RT seconds on the ref machine); ///Running : stressLinear, (takes 26 RT seconds on the ref machine); ///Running : stressGeometry, (takes 77 RT seconds on the ref machine); ///Running : stressSpectrum 1000, (takes 116 RT seconds on the ref machine); ///Running : stress -b 3000, (takes 138 RT seconds on",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:1335,Testability,benchmark,benchmark,1335,"ation comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 11 RT seconds on the ref machine); ///Running : stressLinear, (takes 26 RT seconds on the ref machine); ///Running : stressGeometry, (takes 77 RT seconds on the ref machine); ///Running : stressSpectrum 1000, (takes 116 RT seconds on the ref machine); ///Running : stress -b 3000, (takes 138 RT seconds on",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:1377,Testability,log,log,1377,"activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 11 RT seconds on the ref machine); ///Running : stressLinear, (takes 26 RT seconds on the ref machine); ///Running : stressGeometry, (takes 77 RT seconds on the ref machine); ///Running : stressSpectrum 1000, (takes 116 RT seconds on the ref machine); ///Running : stress -b 3000, (takes 138 RT seconds on the ref machine); ///; ///; ///****************************************************************************; ///",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:2762,Testability,benchmark,benchmark,2762,"table for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 11 RT seconds on the ref machine); ///Running : stressLinear, (takes 26 RT seconds on the ref machine); ///Running : stressGeometry, (takes 77 RT seconds on the ref machine); ///Running : stressSpectrum 1000, (takes 116 RT seconds on the ref machine); ///Running : stress -b 3000, (takes 138 RT seconds on the ref machine); ///; ///; ///****************************************************************************; ///* *; ///* S T R E S S H E P I X S U M M A R Y *; ///* *; ///* ROOTMARKS = 789.3 * Root5.13/03 20060830/1441; ///* *; ///* Real Time = 401.1 seconds, CpuTime = 281.8 seconds; ///* Linux pcbrun 2.4.21-47.EL.cernsmp #1 SMP Mon Jul 24 15:33:5; ///****************************************************************************; //; // If you run this benchmark on a new platform, please report the results; // at rootdev@cern.ch. Send the output shown above and also the; // log file stressHepix.log that contains more details about the individual; // tests. Your results will be shown at http://root.cern/root/Benchmark.html; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:2886,Testability,log,log,2886,"table for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 11 RT seconds on the ref machine); ///Running : stressLinear, (takes 26 RT seconds on the ref machine); ///Running : stressGeometry, (takes 77 RT seconds on the ref machine); ///Running : stressSpectrum 1000, (takes 116 RT seconds on the ref machine); ///Running : stress -b 3000, (takes 138 RT seconds on the ref machine); ///; ///; ///****************************************************************************; ///* *; ///* S T R E S S H E P I X S U M M A R Y *; ///* *; ///* ROOTMARKS = 789.3 * Root5.13/03 20060830/1441; ///* *; ///* Real Time = 401.1 seconds, CpuTime = 281.8 seconds; ///* Linux pcbrun 2.4.21-47.EL.cernsmp #1 SMP Mon Jul 24 15:33:5; ///****************************************************************************; //; // If you run this benchmark on a new platform, please report the results; // at rootdev@cern.ch. Send the output shown above and also the; // log file stressHepix.log that contains more details about the individual; // tests. Your results will be shown at http://root.cern/root/Benchmark.html; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:2907,Testability,log,log,2907,"table for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 11 RT seconds on the ref machine); ///Running : stressLinear, (takes 26 RT seconds on the ref machine); ///Running : stressGeometry, (takes 77 RT seconds on the ref machine); ///Running : stressSpectrum 1000, (takes 116 RT seconds on the ref machine); ///Running : stress -b 3000, (takes 138 RT seconds on the ref machine); ///; ///; ///****************************************************************************; ///* *; ///* S T R E S S H E P I X S U M M A R Y *; ///* *; ///* ROOTMARKS = 789.3 * Root5.13/03 20060830/1441; ///* *; ///* Real Time = 401.1 seconds, CpuTime = 281.8 seconds; ///* Linux pcbrun 2.4.21-47.EL.cernsmp #1 SMP Mon Jul 24 15:33:5; ///****************************************************************************; //; // If you run this benchmark on a new platform, please report the results; // at rootdev@cern.ch. Send the output shown above and also the; // log file stressHepix.log that contains more details about the individual; // tests. Your results will be shown at http://root.cern/root/Benchmark.html; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:2963,Testability,test,tests,2963,"table for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 11 RT seconds on the ref machine); ///Running : stressLinear, (takes 26 RT seconds on the ref machine); ///Running : stressGeometry, (takes 77 RT seconds on the ref machine); ///Running : stressSpectrum 1000, (takes 116 RT seconds on the ref machine); ///Running : stress -b 3000, (takes 138 RT seconds on the ref machine); ///; ///; ///****************************************************************************; ///* *; ///* S T R E S S H E P I X S U M M A R Y *; ///* *; ///* ROOTMARKS = 789.3 * Root5.13/03 20060830/1441; ///* *; ///* Real Time = 401.1 seconds, CpuTime = 281.8 seconds; ///* Linux pcbrun 2.4.21-47.EL.cernsmp #1 SMP Mon Jul 24 15:33:5; ///****************************************************************************; //; // If you run this benchmark on a new platform, please report the results; // at rootdev@cern.ch. Send the output shown above and also the; // log file stressHepix.log that contains more details about the individual; // tests. Your results will be shown at http://root.cern/root/Benchmark.html; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:3022,Testability,Benchmark,Benchmark,3022,"table for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 11 RT seconds on the ref machine); ///Running : stressLinear, (takes 26 RT seconds on the ref machine); ///Running : stressGeometry, (takes 77 RT seconds on the ref machine); ///Running : stressSpectrum 1000, (takes 116 RT seconds on the ref machine); ///Running : stress -b 3000, (takes 138 RT seconds on the ref machine); ///; ///; ///****************************************************************************; ///* *; ///* S T R E S S H E P I X S U M M A R Y *; ///* *; ///* ROOTMARKS = 789.3 * Root5.13/03 20060830/1441; ///* *; ///* Real Time = 401.1 seconds, CpuTime = 281.8 seconds; ///* Linux pcbrun 2.4.21-47.EL.cernsmp #1 SMP Mon Jul 24 15:33:5; ///****************************************************************************; //; // If you run this benchmark on a new platform, please report the results; // at rootdev@cern.ch. Send the output shown above and also the; // log file stressHepix.log that contains more details about the individual; // tests. Your results will be shown at http://root.cern/root/Benchmark.html; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:7,Testability,log,log,7,"//scan log file to accumulate the individual Cpu Times",MatchSource.CODE_COMMENT,test/stressHepix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:783,Availability,error,error,783,"// @(#)root/test:$name: $:$id: stressHistoFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' wi",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:796,Availability,toler,tolerance,796,"// @(#)root/test:$name: $:$id: stressHistoFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' wi",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:465,Modifiability,variab,variable,465,"// @(#)root/test:$name: $:$id: stressHistoFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' wi",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:945,Modifiability,variab,variable,945,"// @(#)root/test:$name: $:$id: stressHistoFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' wi",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1297,Modifiability,Variab,Variable,1297," //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1642,Modifiability,Variab,Variable,1642,ions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' w,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1989,Modifiability,Variab,Variable,1989, of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2360,Modifiability,Variab,Variable,2360, 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; /,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2710,Modifiability,Variab,Variable,2710,"with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; // stressHistoFit: Real Time = 37.49 seconds Cpu Time = 37.24 seconds; // ROOTMARKS = 2663.8 ROOT version: 5.27/01 trunk@32822; // ****************************************************************************; //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:676,Performance,perform,performed,676,"// @(#)root/test:$name: $:$id: stressHistoFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' wi",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:12,Testability,test,test,12,"// @(#)root/test:$name: $:$id: stressHistoFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' wi",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:246,Testability,test,tests,246,"// @(#)root/test:$name: $:$id: stressHistoFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' wi",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:328,Testability,test,tests,328,"// @(#)root/test:$name: $:$id: stressHistoFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' wi",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:666,Testability,test,test,666,"// @(#)root/test:$name: $:$id: stressHistoFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' wi",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:892,Testability,test,test,892,"// @(#)root/test:$name: $:$id: stressHistoFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' wi",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1010,Testability,test,tests,1010," //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1248,Testability,Test,Test,1248," //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1275,Testability,Test,Test,1275," //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1344,Testability,Test,Test,1344,"ypes: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1413,Testability,Test,Test,1413,"grams, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1482,Testability,Test,Test,1482,"ors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' ",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1551,Testability,Test,Test,1551,rying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphEr,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1620,Testability,Test,Test,1620,ions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' w,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1689,Testability,Test,Test,1689,functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1758,Testability,Test,Test,1758,ere is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogr,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1827,Testability,Test,Test,1827, possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1896,Testability,Test,Test,1896,nging the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphE,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1966,Testability,Test,Test,1966, of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2036,Testability,Test,Test,2036,***********************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned f,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2106,Testability,Test,Test,2106,**; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'................................,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2176,Testability,Test,Test,2176,*************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................O,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2246,Testability,Test,Test,2246,D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'.................................,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2316,Testability,Test,Test,2316, 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; /,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2337,Testability,Test,Test,2337, 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; /,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2407,Testability,Test,Test,2407,raph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; // stressHistoFit: Real Time = 37.49 seconds Cpu Time = 37.24 seconds; // ROO,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2477,Testability,Test,Test,2477,raphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; // stressHistoFit: Real Time = 37.49 seconds Cpu Time = 37.24 seconds; // ROOTMARKS = 2663.8 ROOT version: 5.27/01 trunk@32822; // **************,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2547,Testability,Test,Test,2547,rse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; // stressHistoFit: Real Time = 37.49 seconds Cpu Time = 37.24 seconds; // ROOTMARKS = 2663.8 ROOT version: 5.27/01 trunk@32822; // ****************************************************************************; //; // //,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2617,Testability,Test,Test,2617,gram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; // stressHistoFit: Real Time = 37.49 seconds Cpu Time = 37.24 seconds; // ROOTMARKS = 2663.8 ROOT version: 5.27/01 trunk@32822; // ****************************************************************************; //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*,MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2687,Testability,Test,Test,2687,"with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; // stressHistoFit: Real Time = 37.49 seconds Cpu Time = 37.24 seconds; // ROOTMARKS = 2663.8 ROOT version: 5.27/01 trunk@32822; // ****************************************************************************; //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2757,Testability,Test,Test,2757,"with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; // stressHistoFit: Real Time = 37.49 seconds Cpu Time = 37.24 seconds; // ROOTMARKS = 2663.8 ROOT version: 5.27/01 trunk@32822; // ****************************************************************************; //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2827,Testability,Test,Test,2827,"with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; // stressHistoFit: Real Time = 37.49 seconds Cpu Time = 37.24 seconds; // ROOTMARKS = 2663.8 ROOT version: 5.27/01 trunk@32822; // ****************************************************************************; //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2897,Testability,Test,Test,2897,"with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; // stressHistoFit: Real Time = 37.49 seconds Cpu Time = 37.24 seconds; // ROOTMARKS = 2663.8 ROOT version: 5.27/01 trunk@32822; // ****************************************************************************; //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2967,Testability,Test,Test,2967,"with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; // stressHistoFit: Real Time = 37.49 seconds Cpu Time = 37.24 seconds; // ROOTMARKS = 2663.8 ROOT version: 5.27/01 trunk@32822; // ****************************************************************************; //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3037,Testability,Test,Test,3037,"with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; // stressHistoFit: Real Time = 37.49 seconds Cpu Time = 37.24 seconds; // ROOTMARKS = 2663.8 ROOT version: 5.27/01 trunk@32822; // ****************************************************************************; //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3060,Testability,Test,Test,3060,"with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; // stressHistoFit: Real Time = 37.49 seconds Cpu Time = 37.24 seconds; // ROOTMARKS = 2663.8 ROOT version: 5.27/01 trunk@32822; // ****************************************************************************; //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3130,Testability,Test,Test,3130,"with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; // stressHistoFit: Real Time = 37.49 seconds Cpu Time = 37.24 seconds; // ROOTMARKS = 2663.8 ROOT version: 5.27/01 trunk@32822; // ****************************************************************************; //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3200,Testability,Test,Test,3200,"with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; // stressHistoFit: Real Time = 37.49 seconds Cpu Time = 37.24 seconds; // ROOTMARKS = 2663.8 ROOT version: 5.27/01 trunk@32822; // ****************************************************************************; //; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:26,Testability,test,test,26,"// to select a fit in the test",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:15,Availability,toler,tolerance,15,"// set a small tolerance for the tests; // The default of 10*-2 make sometimes Simplex do not converge; //const double gDefaultTolerance = 1.E-4;; // Options to indicate how the test has to be run",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:33,Testability,test,tests,33,"// set a small tolerance for the tests; // The default of 10*-2 make sometimes Simplex do not converge; //const double gDefaultTolerance = 1.E-4;; // Options to indicate how the test has to be run",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:178,Testability,test,test,178,"// set a small tolerance for the tests; // The default of 10*-2 make sometimes Simplex do not converge; //const double gDefaultTolerance = 1.E-4;; // Options to indicate how the test has to be run",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:79,Usability,Simpl,Simplex,79,"// set a small tolerance for the tests; // The default of 10*-2 make sometimes Simplex do not converge; //const double gDefaultTolerance = 1.E-4;; // Options to indicate how the test has to be run",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:14,Testability,Test,Test,14,"// Check Chi2 Test",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:12,Availability,failure,failures,12,"// Show the failures",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:28,Testability,test,tests,28,"// Default options that all tests will have",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:5,Testability,test,testOptDebug,5,"// | testOptDebug;",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:51,Availability,toler,tolerance,51,"// Class that keeps a reference structure and some tolerance values to; // make a comparision between the reference and the result of a; // fit. The options define what has to be compared.",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:72,Availability,error,error,72,"// test parameters (use interval of tolPar*err), where err is parameter error",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3,Testability,test,test,3,"// test parameters (use interval of tolPar*err), where err is parameter error",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:37,Availability,toler,tolerance,37,"// Compares two doubles with a given tolerance",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:12,Modifiability,variab,variable,12,"// Create a variable range in a vector (to be passed to the histogram; // constructor",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:46,Testability,test,test,46,"// List of functions that will be used in the test",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:31,Integrability,depend,depending,31,"// Object to manage the fitter depending on the options used",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:100,Testability,test,test,100,"// so far, status will just count the number of parameters wronly; // calculated. There is no other test of the fitters",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:47,Availability,toler,tolerance,47,"// compare parameter value with reference with tolerance = parameterError * chi2",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:25,Availability,avail,available,25,"// TVirtualFItter is not available in all case (e.g. when running with ROOT IMT)",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:24,Availability,error,error,24,"// check that the lower error and upper error are compatible with the parabolic error within 30%; // note that Minos returns lower error as negative",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:40,Availability,error,error,40,"// check that the lower error and upper error are compatible with the parabolic error within 30%; // note that Minos returns lower error as negative",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:80,Availability,error,error,80,"// check that the lower error and upper error are compatible with the parabolic error within 30%; // note that Minos returns lower error as negative",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:131,Availability,error,error,131,"// check that the lower error and upper error are compatible with the parabolic error within 30%; // note that Minos returns lower error as negative",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:11,Availability,error,errors,11,"// now for errors",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3,Performance,perform,perform,3,"// perform the fit: if a fit is selected use only that one (order starts from 1)",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:74,Performance,perform,perform,74,"//std::cout << ""doing selected fit with option "" << opt << std::endl;; // perform the fit",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3,Testability,test,test,3,"// test validity of the fit and print result",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:30,Availability,failure,failure,30,"// limit in the percentage of failure!",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:19,Testability,test,tests,19,"// Counts how many tests failed.",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:31,Testability,test,test,31,"// To control if an individual test failed",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:31,Testability,test,test,31,"// make as a weighted histo to test weighted fits",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3,Modifiability,variab,variable,3,"// variable bin test",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:16,Testability,test,test,16,"// variable bin test",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:31,Testability,test,test,31,"// make as a weighted histo to test weighted fits",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:19,Testability,test,tests,19,"// Counts how many tests failed.",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:31,Testability,test,test,31,"// To control if an individual test failed",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:17,Testability,test,test,17,"// 2D Equal bins test",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:6,Modifiability,Variab,Variable,6,"// 2D Variable bins test",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:20,Testability,test,test,20,"// 2D Variable bins test",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:20,Modifiability,variab,variable,20,"// fill and test 2D variable bins histograms",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:12,Testability,test,test,12,"// fill and test 2D variable bins histograms",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:13,Testability,test,test,13,"// TGraph 2D test",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3,Availability,mask,mask,3,"// mask linear test",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:15,Testability,test,test,15,"// mask linear test",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:19,Testability,test,tests,19,"// Counts how many tests failed.",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:31,Testability,test,test,31,"// To control if an individual test failed",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:11,Usability,Simpl,Simplex,11,"// exclude Simplex in tree; //noCompareInTree.push_back(algoType( ""Minuit2"", ""Simplex"", ""Q0"", CompareResult(0)));",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:78,Usability,Simpl,Simplex,78,"// exclude Simplex in tree; //noCompareInTree.push_back(algoType( ""Minuit2"", ""Simplex"", ""Q0"", CompareResult(0)));",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3,Availability,mask,mask,3,"// mask this; //commonAlgos.push_back( algoType( ""Minuit"", ""Seek"", ""X"", CompareResult(defCmpOpt,5,0.1)) );",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2,Availability,mask,mask,2,"//mask",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3,Availability,mask,mask,3,"// mask",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2,Usability,simpl,simplex,2,"//simplex MInuit2 does not work well (needs to be checked); // simplexAlgos.push_back( algoType( ""Minuit2"", ""Simplex"", """", CompareResult()) );",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:63,Usability,simpl,simplexAlgos,63,"//simplex MInuit2 does not work well (needs to be checked); // simplexAlgos.push_back( algoType( ""Minuit2"", ""Simplex"", """", CompareResult()) );",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:109,Usability,Simpl,Simplex,109,"//simplex MInuit2 does not work well (needs to be checked); // simplexAlgos.push_back( algoType( ""Minuit2"", ""Simplex"", """", CompareResult()) );",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2,Availability,mask,mask,2,"//mask these Likelihood Fumili",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:43,Availability,error,error,43,"// compare only Chi2 value since parameter error is not estimated in GSLMultiMin",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:11,Usability,simpl,simplex,11,"// minuit2 simplex fails in 2d; //histGaus2D.push_back( algoType( ""Minuit2"", ""Simplex"", """", CompareResult(cmpPars,6)) );; // special algos",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:78,Usability,Simpl,Simplex,78,"// minuit2 simplex fails in 2d; //histGaus2D.push_back( algoType( ""Minuit2"", ""Simplex"", """", CompareResult(cmpPars,6)) );; // special algos",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:46,Availability,error,error,46,"// algorithms only for GraphErrors (excluding error in X)",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:7,Testability,test,testing,7,"// For testing the linear fitter we can force the use by setting Linear the default minimizer and use; // the G option. In this case the fit is linearized using the gradient as the linear components; // Use option ""X"" to force Chi2 calculations",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:19,Testability,test,testOptColor,19,"//defaultOptions = testOptColor | testOptCheck;; // tree test",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:34,Testability,test,testOptCheck,34,"//defaultOptions = testOptColor | testOptCheck;; // tree test",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:57,Testability,test,test,57,"//defaultOptions = testOptColor | testOptCheck;; // tree test",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3,Energy Efficiency,reduce,reduce,3,"// reduce statistics",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:21,Testability,test,test,21,"// debug mode (print test results)",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:22,Testability,test,test,22,"// number of selected test",MatchSource.CODE_COMMENT,test/stressHistoFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:845,Integrability,rout,routines,845,"// @(#)root/test:$name: $:$id: stressHistogram.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Here there is a set of tests for the histogram classes (including //; // histograms and profiles). The methods tested work on: //; // //; // 1. Projection testing (with and without weights) //; // 2. Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles...",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2998,Modifiability,Extend,Extend,2998,"e Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:12,Testability,test,test,12,"// @(#)root/test:$name: $:$id: stressHistogram.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Here there is a set of tests for the histogram classes (including //; // histograms and profiles). The methods tested work on: //; // //; // 1. Projection testing (with and without weights) //; // 2. Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles...",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:263,Testability,test,tests,263,"// @(#)root/test:$name: $:$id: stressHistogram.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Here there is a set of tests for the histogram classes (including //; // histograms and profiles). The methods tested work on: //; // //; // 1. Projection testing (with and without weights) //; // 2. Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles...",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:351,Testability,test,tested,351,"// @(#)root/test:$name: $:$id: stressHistogram.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Here there is a set of tests for the histogram classes (including //; // histograms and profiles). The methods tested work on: //; // //; // 1. Projection testing (with and without weights) //; // 2. Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles...",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:395,Testability,test,testing,395,"// @(#)root/test:$name: $:$id: stressHistogram.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Here there is a set of tests for the histogram classes (including //; // histograms and profiles). The methods tested work on: //; // //; // 1. Projection testing (with and without weights) //; // 2. Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles...",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:691,Testability,test,tests,691,"// @(#)root/test:$name: $:$id: stressHistogram.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Here there is a set of tests for the histogram classes (including //; // histograms and profiles). The methods tested work on: //; // //; // 1. Projection testing (with and without weights) //; // 2. Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles...",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:741,Testability,test,tests,741,"// @(#)root/test:$name: $:$id: stressHistogram.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Here there is a set of tests for the histogram classes (including //; // histograms and profiles). The methods tested work on: //; // //; // 1. Projection testing (with and without weights) //; // 2. Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles...",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:860,Testability,test,tested,860,"// @(#)root/test:$name: $:$id: stressHistogram.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Here there is a set of tests for the histogram classes (including //; // histograms and profiles). The methods tested work on: //; // //; // 1. Projection testing (with and without weights) //; // 2. Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles...",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:914,Testability,test,tests,914,"// @(#)root/test:$name: $:$id: stressHistogram.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Here there is a set of tests for the histogram classes (including //; // histograms and profiles). The methods tested work on: //; // //; // 1. Projection testing (with and without weights) //; // 2. Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles...",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:1123,Testability,test,tests,1123,"rs: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Here there is a set of tests for the histogram classes (including //; // histograms and profiles). The methods tested work on: //; // //; // 1. Projection testing (with and without weights) //; // 2. Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK;",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:1255,Testability,test,tests,1255,". Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Wri",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:1383,Testability,test,tests,1383,". Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Wri",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:1623,Testability,Test,Test,1623,". Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Wri",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:1631,Testability,Test,Testing,1631,". Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Wri",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:1703,Testability,Test,Test,1703,"of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms..................",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:1711,Testability,Test,Testing,1711,"of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms..................",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:1783,Testability,Test,Test,1783,"efines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles..........................",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:1791,Testability,Test,Testing,1791,"efines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles..........................",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:1863,Testability,Test,Test,1863,"intes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms...................",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:1871,Testability,Test,Testing,1871,"intes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms...................",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:1941,Testability,Test,Test,1941,"/; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms.......................",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2021,Testability,Test,Test,2021," reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms..",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2101,Testability,Test,Test,2101,"s, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2113,Testability,test,tests,2113,"s, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2181,Testability,Test,Test,2181,"; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses...",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2198,Testability,test,tests,2198,"; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses...",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2261,Testability,Test,Test,2261,"gram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Pro",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2276,Testability,test,tests,2276,"gram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Pro",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2341,Testability,Test,Test,2341,"t when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ********************************************************",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2355,Testability,test,tests,2355,"t when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ********************************************************",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2422,Testability,Test,Test,2422,"*******************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2442,Testability,test,tests,2442,"*******************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2503,Testability,Test,Test,2503," A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2518,Testability,test,tests,2518," A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2584,Testability,Test,Test,2584,"**************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ************************************************",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2599,Testability,test,tests,2599,"**************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ************************************************",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2665,Testability,Test,Test,2665,".............OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2688,Testability,test,tests,2688,".............OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2746,Testability,Test,Test,2746,"e Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2761,Testability,test,tests,2761,"e Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2827,Testability,Test,Test,2827,"e Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2845,Testability,test,tests,2845,"e Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2908,Testability,Test,Test,2908,"e Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2924,Testability,test,tests,2924,"e Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2989,Testability,Test,Test,2989,"e Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3010,Testability,test,tests,3010,"e Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3070,Testability,Test,Test,3070,"e Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3106,Testability,test,tests,3106,"e Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3151,Testability,Test,Test,3151,"e Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3169,Testability,test,tests,3169,"e Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3232,Testability,Test,Test,3232,"e Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:934,Usability,simpl,simple,934,"// @(#)root/test:$name: $:$id: stressHistogram.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Here there is a set of tests for the histogram classes (including //; // histograms and profiles). The methods tested work on: //; // //; // 1. Projection testing (with and without weights) //; // 2. Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles...",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:26,Testability,test,testing,26,"// delete histogram after testing (swicth off in case of debugging)",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Add method for 1D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Add method for 1D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Add method for 1D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Add method for 1D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first add method to do scalation of 1D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:54,Modifiability,variab,variable,54,"// Tests the second Add method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Add method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:51,Modifiability,variab,variable,51,"// Tests the first Add method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Add method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:54,Modifiability,variab,variable,54,"// Tests the second Add method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Add method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:52,Modifiability,variab,variable,52,"// Tests the second Add method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Add method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:64,Modifiability,variab,variable,64,"// Tests the first add method to do scale of 1D Histograms with variable bin width",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first add method to do scale of 1D Histograms with variable bin width",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first add method to do scale of 2D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first add method to do scalation of 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Add method for 2D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Add method for 1D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Add method for 2D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Add method for 2D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Add method for 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Add method for 3D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Add method for 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Add method for 3D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the Add method for n-dimensional Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Multiply method for 1D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:33,Energy Efficiency,reduce,reduced,33,"// No the bin contents has to be reduced, as it was filled twice!",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:58,Modifiability,variab,variable,58,"// Tests the first Multiply method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Multiply method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:33,Energy Efficiency,reduce,reduced,33,"// No the bin contents has to be reduced, as it was filled twice!",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Multiply method for 1D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:59,Modifiability,variab,variable,59,"// Tests the second Multiply method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Multiply method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Multiply method for 2D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:33,Energy Efficiency,reduce,reduced,33,"// No the bin contents has to be reduced, as it was filled twice!",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Multiply method for 2D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:33,Energy Efficiency,reduce,reduced,33,"// No the bin contents has to be reduced, as it was filled twice!",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Multiply method for 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:33,Energy Efficiency,reduce,reduced,33,"// No the bin contents has to be reduced, as it was filled twice!",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Multiply method for 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:41,Availability,error,errors,41,"// h3 has to be filled again so that the errors are properly calculated",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:33,Energy Efficiency,reduce,reduced,33,"// No the bin contents has to be reduced, as it was filled twice!",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the Multiply method for Sparse Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:41,Availability,error,errors,41,"// s3 has to be filled again so that the errors are properly calculated",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:33,Energy Efficiency,reduce,reduced,33,"// No the bin contents has to be reduced, as it was filled twice!",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:30,Availability,error,error,30,"// stats fails because of the error precision",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:30,Availability,error,error,30,"// stats fails because of the error precision",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:30,Availability,error,error,30,"// stats fails because of the error precision",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:30,Availability,error,error,30,"// stats fails because of the error precision",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:30,Availability,error,error,30,"// stats fails because of the error precision",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:30,Availability,error,error,30,"// stats fails because of the error precision",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Divide method for 1D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Safety,avoid,avoid,3,"// avoid bins in h2 with zero content",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:56,Modifiability,variab,variable,56,"// Tests the first Divide method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Divide method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Safety,avoid,avoid,3,"// avoid bins in h2 with zero content",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Divide method for 1D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:49,Availability,error,errors,49,"// There is no Multiply method to tests. And the errors are wrongly; // calculated in the TProfile::Division method, so there is no; // point to make the tests. Once the method is fixed, the tests; // will be finished.",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:34,Testability,test,tests,34,"// There is no Multiply method to tests. And the errors are wrongly; // calculated in the TProfile::Division method, so there is no; // point to make the tests. Once the method is fixed, the tests; // will be finished.",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:154,Testability,test,tests,154,"// There is no Multiply method to tests. And the errors are wrongly; // calculated in the TProfile::Division method, so there is no; // point to make the tests. Once the method is fixed, the tests; // will be finished.",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:191,Testability,test,tests,191,"// There is no Multiply method to tests. And the errors are wrongly; // calculated in the TProfile::Division method, so there is no; // point to make the tests. Once the method is fixed, the tests; // will be finished.",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Divide method for 1D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Safety,avoid,avoid,3,"// avoid bins in h2 with zero content",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:57,Modifiability,variab,variable,57,"// Tests the second Divide method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Divide method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Safety,avoid,avoid,3,"// avoid bins in h2 with zero content",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Divide method for 2D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Safety,avoid,avoid,3,"// avoid bins in h2 with zero content",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Divide method for 2D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Safety,avoid,avoid,3,"// avoid bins in h2 with zero content",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Divide method for 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Safety,avoid,avoid,3,"// avoid bins in h2 with zero content",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2,Availability,error,error,2,"//error -= 2 * h3->GetBinContent(i,j,h)*h3->GetBinContent(i,j,h)*h2->GetBinError(i,j,h)*h2->GetBinError(i,j,h);",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Divide method for 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Safety,avoid,avoid,3,"// avoid bins in h2 with zero content",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the first Divide method for 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:33,Energy Efficiency,reduce,reduced,33,"// No the bin contents has to be reduced, as it was filled twice!",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the second Divide method for 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:33,Energy Efficiency,reduce,reduced,33,"// No the bin contents has to be reduced, as it was filled twice!",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the operator=() method for 1D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:55,Modifiability,variab,variable,55,"// Tests the operator=() method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the operator=() method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the operator=() method for 1D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:53,Modifiability,variab,variable,53,"// Tests the operator=() method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the operator=() method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the copy constructor for 1D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:53,Modifiability,variab,variable,53,"// Tests the copy constructor for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the copy constructor for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the copy constructor for 1D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:51,Modifiability,variab,variable,51,"// Tests the copy constructor for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the copy constructor for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the clone method for 1D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:49,Modifiability,variab,variable,49,"// Tests the clone method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the clone method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the clone method for 1D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:47,Modifiability,variab,variable,47,"// Tests the clone method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the clone method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the operator=() method for 2D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the operator=() method for 2D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the copy constructor for 2D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the copy constructor for 2D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the clone method for 2D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the clone method for 2D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the operator=() method for 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the operator=() method for 3D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the copy constructor for 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the copy constructor for 3D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the clone method for 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the clone method for 3D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the clone method for Sparse histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the write and read methods for 1D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:59,Modifiability,variab,variable,59,"// Tests the write and read methods for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the write and read methods for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the write and read methods for 1D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:57,Modifiability,variab,variable,57,"// Tests the write and read methods for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the write and read methods for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the write and read methods for 2D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the write and read methods for 2D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the write and read methods for 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the write and read methods for 3D Profile",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the write and read methods for n-dim Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method for 1D Histograms; // simple merge with histogram with same limits",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:48,Usability,simpl,simple,48,"// Tests the merge method for 1D Histograms; // simple merge with histogram with same limits",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method for 1D Histograms; // simpel merge but histogram to merge is not weighted",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:49,Modifiability,variab,variable,49,"// Tests the merge method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method for 1D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:47,Modifiability,variab,variable,47,"// Tests the merge method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method for 2D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method for 2D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method for 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method for 3D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge method for n-dim Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge with some equal labels method for 1D Histograms; // number of labels used = number of bins",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:67,Testability,test,test,67,"// add one empty label; // should be added in underflow bin; // to test merge of underflows",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:264,Availability,error,errors,264,"// Tests the merge with some equal labels method for 1D Histograms; // number of labels used = number of bins; // This test uses SetBinCOntent instead of Fill and ResetStats after to; // test th ebug in TH1::Merge reported in ROOT-9336; // since we do not set bin errors; // make sure we have not stored Sumw2 otherwise all bin errors; // will be zero. This needs to be done before constructing the histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:328,Availability,error,errors,328,"// Tests the merge with some equal labels method for 1D Histograms; // number of labels used = number of bins; // This test uses SetBinCOntent instead of Fill and ResetStats after to; // test th ebug in TH1::Merge reported in ROOT-9336; // since we do not set bin errors; // make sure we have not stored Sumw2 otherwise all bin errors; // will be zero. This needs to be done before constructing the histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge with some equal labels method for 1D Histograms; // number of labels used = number of bins; // This test uses SetBinCOntent instead of Fill and ResetStats after to; // test th ebug in TH1::Merge reported in ROOT-9336; // since we do not set bin errors; // make sure we have not stored Sumw2 otherwise all bin errors; // will be zero. This needs to be done before constructing the histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:119,Testability,test,test,119,"// Tests the merge with some equal labels method for 1D Histograms; // number of labels used = number of bins; // This test uses SetBinCOntent instead of Fill and ResetStats after to; // test th ebug in TH1::Merge reported in ROOT-9336; // since we do not set bin errors; // make sure we have not stored Sumw2 otherwise all bin errors; // will be zero. This needs to be done before constructing the histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:187,Testability,test,test,187,"// Tests the merge with some equal labels method for 1D Histograms; // number of labels used = number of bins; // This test uses SetBinCOntent instead of Fill and ResetStats after to; // test th ebug in TH1::Merge reported in ROOT-9336; // since we do not set bin errors; // make sure we have not stored Sumw2 otherwise all bin errors; // will be zero. This needs to be done before constructing the histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge with some equal labels method for 2D Histograms; // Note by LM (Dec 2010); // In reality in 2D histograms the Merge does not support; // histogram with labels - just merges according to the x-values; // This test is basically useless",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:227,Testability,test,test,227,"// Tests the merge with some equal labels method for 2D Histograms; // Note by LM (Dec 2010); // In reality in 2D histograms the Merge does not support; // histogram with labels - just merges according to the x-values; // This test is basically useless",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge with some equal labels method for 3D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge with some equal labels method for 1D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:103,Testability,test,tests,103,"// It does not work properly! Look, the bins with the same labels; // are different ones and still the tests passes! This is not; // consistent with TH1::Merge()",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge with some equal labels method for 2D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:103,Testability,test,tests,103,"// It does not work properly! Look, the bins with the same labels; // are different ones and still the tests passes! This is not; // consistent with TH1::Merge()",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge with some equal labels method for 3D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:103,Testability,test,tests,103,"// It does not work properly! Look, the bins with the same labels; // are different ones and still the tests passes! This is not; // consistent with TH1::Merge()",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge with some different labels for 1D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:17,Testability,test,test,17,"// if it is true test should fail",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge with some different labels for 1D Histograms",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:8,Testability,test,test,8,"// This test fails, as expected! That is why it is not run in the tests suite.",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:66,Testability,test,tests,66,"// This test fails, as expected! That is why it is not run in the tests suite.",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,test,test,3,"// test ordering label for one histo",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge with some different labels method for 2D Histograms; // It does not work properly! Look, the bins with the same labels; // are different ones and still the tests passes! This is not; // consistent with TH1::Merge()",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:175,Testability,test,tests,175,"// Tests the merge with some different labels method for 2D Histograms; // It does not work properly! Look, the bins with the same labels; // are different ones and still the tests passes! This is not; // consistent with TH1::Merge()",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge with some different labels method for 3D Histograms; // It does not work properly! Look, the bins with the same labels; // are different ones and still the tests passes! This is not; // consistent with TH1::Merge()",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:175,Testability,test,tests,175,"// Tests the merge with some different labels method for 3D Histograms; // It does not work properly! Look, the bins with the same labels; // are different ones and still the tests passes! This is not; // consistent with TH1::Merge()",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Testability,Test,Tests,3,"// Tests the merge with some different labels method for 1D Profiles",MatchSource.CODE_COMMENT,test/stressHistogram.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx
