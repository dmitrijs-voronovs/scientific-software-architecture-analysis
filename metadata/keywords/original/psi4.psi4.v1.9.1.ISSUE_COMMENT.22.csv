id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13637,Testability,test,tests,13637,sts.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addo,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13737,Testability,test,tests,13737,module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13803,Testability,test,tests,13803,IPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13899,Testability,test,tests,13899,le libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4con,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13965,Testability,test,tests,13965,PED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:12,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14056,Testability,test,tests,14056,odule pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14122,Testability,test,tests,14122,; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14217,Testability,test,tests,14217, module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14283,Testability,test,tests,14283,IPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14376,Testability,test,tests,14376,odule simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14442,Testability,test,tests,14442,KIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_add,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14535,Testability,test,tests,14535,module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIP,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14601,Testability,test,tests,14601,KIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14696,Testability,test,tests,14696,dule v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14762,Testability,test,tests,14762,s.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14855,Testability,test,tests,14855,ting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to en,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14921,Testability,test,tests,14921,ests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15014,Testability,test,tests,15014,tecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if neces,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15080,Testability,test,tests,15080,ts.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15175,Testability,test,tests,15175,ting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install packa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15241,Testability,test,tests,15241, SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4en,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15341,Testability,test,tests,15341,module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15407,Testability,test,tests,15407,D [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15506,Testability,test,tests,15506, resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15572,Testability,test,tests,15572,psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4cond,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15676,Testability,test,tests,15676,stall package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Inst,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15742,Testability,test,tests,15742,\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\en,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15843,Testability,test,tests,15843,ckage if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. In,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15909,Testability,test,tests,15909,i4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16012,Testability,test,tests,16012,ecessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Inst,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16078,Testability,test,tests,16078,site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\en,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16184,Testability,test,tests,16184, enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16250,Testability,test,tests,16250,es\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16353,Testability,test,tests,16353,able tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16419,Testability,test,tests,16419,psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16528,Testability,test,tests,16528,.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16594,Testability,test,tests,16594,\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16694,Testability,test,tests,16694,"ests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in 72.64s (0:01:12) =====================",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16760,Testability,test,tests,16760,"da\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in 72.64s (0:01:12) ==========================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16863,Testability,test,tests,16863,"da\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in 72.64s (0:01:12) ==========================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16929,Testability,test,tests,16929,"da\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in 72.64s (0:01:12) ==========================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:17030,Testability,test,tests,17030,"da\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in 72.64s (0:01:12) ==========================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:17096,Testability,test,tests,17096,"da\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in 72.64s (0:01:12) ==========================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:17199,Testability,test,tests,17199,"da\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in 72.64s (0:01:12) ==========================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:17265,Testability,test,tests,17265,"da\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in 72.64s (0:01:12) ==========================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:17366,Testability,test,tests,17366,"da\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in 72.64s (0:01:12) ==========================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:17432,Testability,test,tests,17432,"da\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in 72.64s (0:01:12) ==========================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:17519,Testability,test,tests,17519,"da\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in 72.64s (0:01:12) ==========================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:9675,Usability,guid,guidance,9675,"========= warnings summary =============================================================================; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:599: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:701: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 2700 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 1773 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 92 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 2330 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 2270 warnings; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:698: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:699: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 1414 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 954 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 48 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 1302 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 1266 warnings; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the releas",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:10763,Usability,guid,guidance,10763,"nvs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:698: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:699: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 1414 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 954 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 48 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 1302 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 1266 warnings; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:702: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 707 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 477 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 24 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 651 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 633 warnings; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:11631,Usability,guid,guidance,11631," to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:702: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 707 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 477 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 24 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 651 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 633 warnings; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.json_wrapper.run_json` instead of `psi4.schema_wrapper.run_qcschema` is deprecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074
https://github.com/psi4/psi4/issues/2236#issuecomment-875260933:96,Integrability,depend,dependencies,96,"Hooray, that looks great. Skipped or xfailed is no problem (just how we handle testing optional dependencies). Outright failed is a problem, but I don't see any of those. I think you're good to go. I wish I understood clearly what was causing your psi4conda problem, but that's awkward to debug. I suspect interference in python path btwn active python (in anaconda) and active psi4 (in psi4conda).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875260933
https://github.com/psi4/psi4/issues/2236#issuecomment-875260933:79,Testability,test,testing,79,"Hooray, that looks great. Skipped or xfailed is no problem (just how we handle testing optional dependencies). Outright failed is a problem, but I don't see any of those. I think you're good to go. I wish I understood clearly what was causing your psi4conda problem, but that's awkward to debug. I suspect interference in python path btwn active python (in anaconda) and active psi4 (in psi4conda).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875260933
https://github.com/psi4/psi4/issues/2236#issuecomment-875260933:218,Usability,clear,clearly,218,"Hooray, that looks great. Skipped or xfailed is no problem (just how we handle testing optional dependencies). Outright failed is a problem, but I don't see any of those. I think you're good to go. I wish I understood clearly what was causing your psi4conda problem, but that's awkward to debug. I suspect interference in python path btwn active python (in anaconda) and active psi4 (in psi4conda).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875260933
https://github.com/psi4/psi4/issues/2236#issuecomment-875261598:35,Availability,failure,failure,35,"To elaborate:. `xfailed`: expected failure. Just looking at the test, I'm not clear why we expect that particular test to fail, but as Lori said, it has to do with a program external to Psi4.; skipped: this tests the interface to a plugin you don't have and is only a concern if you need that particular plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598
https://github.com/psi4/psi4/issues/2236#issuecomment-875261598:217,Integrability,interface,interface,217,"To elaborate:. `xfailed`: expected failure. Just looking at the test, I'm not clear why we expect that particular test to fail, but as Lori said, it has to do with a program external to Psi4.; skipped: this tests the interface to a plugin you don't have and is only a concern if you need that particular plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598
https://github.com/psi4/psi4/issues/2236#issuecomment-875261598:232,Modifiability,plugin,plugin,232,"To elaborate:. `xfailed`: expected failure. Just looking at the test, I'm not clear why we expect that particular test to fail, but as Lori said, it has to do with a program external to Psi4.; skipped: this tests the interface to a plugin you don't have and is only a concern if you need that particular plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598
https://github.com/psi4/psi4/issues/2236#issuecomment-875261598:304,Modifiability,plugin,plugin,304,"To elaborate:. `xfailed`: expected failure. Just looking at the test, I'm not clear why we expect that particular test to fail, but as Lori said, it has to do with a program external to Psi4.; skipped: this tests the interface to a plugin you don't have and is only a concern if you need that particular plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598
https://github.com/psi4/psi4/issues/2236#issuecomment-875261598:64,Testability,test,test,64,"To elaborate:. `xfailed`: expected failure. Just looking at the test, I'm not clear why we expect that particular test to fail, but as Lori said, it has to do with a program external to Psi4.; skipped: this tests the interface to a plugin you don't have and is only a concern if you need that particular plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598
https://github.com/psi4/psi4/issues/2236#issuecomment-875261598:114,Testability,test,test,114,"To elaborate:. `xfailed`: expected failure. Just looking at the test, I'm not clear why we expect that particular test to fail, but as Lori said, it has to do with a program external to Psi4.; skipped: this tests the interface to a plugin you don't have and is only a concern if you need that particular plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598
https://github.com/psi4/psi4/issues/2236#issuecomment-875261598:207,Testability,test,tests,207,"To elaborate:. `xfailed`: expected failure. Just looking at the test, I'm not clear why we expect that particular test to fail, but as Lori said, it has to do with a program external to Psi4.; skipped: this tests the interface to a plugin you don't have and is only a concern if you need that particular plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598
https://github.com/psi4/psi4/issues/2236#issuecomment-875261598:78,Usability,clear,clear,78,"To elaborate:. `xfailed`: expected failure. Just looking at the test, I'm not clear why we expect that particular test to fail, but as Lori said, it has to do with a program external to Psi4.; skipped: this tests the interface to a plugin you don't have and is only a concern if you need that particular plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598
https://github.com/psi4/psi4/issues/2236#issuecomment-877510349:11,Availability,error,error,11,"I hit your error today in building the rc3 installer. It didn't happen when the rc2 installer was originally built or for recent plain `conda install psi4` installations like you ended up with, so it has to do with available packages upstream. I've fixed it by switching channel order in the installer. If you should try a Psi4conda install again with rc3, I'd be interested to hear success/failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349
https://github.com/psi4/psi4/issues/2236#issuecomment-877510349:215,Availability,avail,available,215,"I hit your error today in building the rc3 installer. It didn't happen when the rc2 installer was originally built or for recent plain `conda install psi4` installations like you ended up with, so it has to do with available packages upstream. I've fixed it by switching channel order in the installer. If you should try a Psi4conda install again with rc3, I'd be interested to hear success/failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349
https://github.com/psi4/psi4/issues/2236#issuecomment-877510349:391,Availability,failure,failure,391,"I hit your error today in building the rc3 installer. It didn't happen when the rc2 installer was originally built or for recent plain `conda install psi4` installations like you ended up with, so it has to do with available packages upstream. I've fixed it by switching channel order in the installer. If you should try a Psi4conda install again with rc3, I'd be interested to hear success/failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349
https://github.com/psi4/psi4/issues/2236#issuecomment-877510349:43,Deployability,install,installer,43,"I hit your error today in building the rc3 installer. It didn't happen when the rc2 installer was originally built or for recent plain `conda install psi4` installations like you ended up with, so it has to do with available packages upstream. I've fixed it by switching channel order in the installer. If you should try a Psi4conda install again with rc3, I'd be interested to hear success/failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349
https://github.com/psi4/psi4/issues/2236#issuecomment-877510349:84,Deployability,install,installer,84,"I hit your error today in building the rc3 installer. It didn't happen when the rc2 installer was originally built or for recent plain `conda install psi4` installations like you ended up with, so it has to do with available packages upstream. I've fixed it by switching channel order in the installer. If you should try a Psi4conda install again with rc3, I'd be interested to hear success/failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349
https://github.com/psi4/psi4/issues/2236#issuecomment-877510349:142,Deployability,install,install,142,"I hit your error today in building the rc3 installer. It didn't happen when the rc2 installer was originally built or for recent plain `conda install psi4` installations like you ended up with, so it has to do with available packages upstream. I've fixed it by switching channel order in the installer. If you should try a Psi4conda install again with rc3, I'd be interested to hear success/failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349
https://github.com/psi4/psi4/issues/2236#issuecomment-877510349:156,Deployability,install,installations,156,"I hit your error today in building the rc3 installer. It didn't happen when the rc2 installer was originally built or for recent plain `conda install psi4` installations like you ended up with, so it has to do with available packages upstream. I've fixed it by switching channel order in the installer. If you should try a Psi4conda install again with rc3, I'd be interested to hear success/failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349
https://github.com/psi4/psi4/issues/2236#issuecomment-877510349:292,Deployability,install,installer,292,"I hit your error today in building the rc3 installer. It didn't happen when the rc2 installer was originally built or for recent plain `conda install psi4` installations like you ended up with, so it has to do with available packages upstream. I've fixed it by switching channel order in the installer. If you should try a Psi4conda install again with rc3, I'd be interested to hear success/failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349
https://github.com/psi4/psi4/issues/2236#issuecomment-877510349:333,Deployability,install,install,333,"I hit your error today in building the rc3 installer. It didn't happen when the rc2 installer was originally built or for recent plain `conda install psi4` installations like you ended up with, so it has to do with available packages upstream. I've fixed it by switching channel order in the installer. If you should try a Psi4conda install again with rc3, I'd be interested to hear success/failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349
https://github.com/psi4/psi4/issues/2239#issuecomment-876569214:561,Deployability,upgrade,upgrade,561,"Classes are hidden by default because when we expose a class as `PSI_API`, changing that class affects plugin developers, so we need to add warnings before we actually make the changes. And that takes time. So we can expose a class if it's useful, but we're not going to expose a class by default. Could you elaborate on what your usecase is for this particular class? Before exposing the class, I'd like to make sure you really do need this class instead of something else in the `libmints` machinery. I believe that some pieces moved around during our recent upgrade to libint2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214
https://github.com/psi4/psi4/issues/2239#issuecomment-876569214:103,Modifiability,plugin,plugin,103,"Classes are hidden by default because when we expose a class as `PSI_API`, changing that class affects plugin developers, so we need to add warnings before we actually make the changes. And that takes time. So we can expose a class if it's useful, but we're not going to expose a class by default. Could you elaborate on what your usecase is for this particular class? Before exposing the class, I'd like to make sure you really do need this class instead of something else in the `libmints` machinery. I believe that some pieces moved around during our recent upgrade to libint2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214
https://github.com/psi4/psi4/issues/2239#issuecomment-876569214:46,Security,expose,expose,46,"Classes are hidden by default because when we expose a class as `PSI_API`, changing that class affects plugin developers, so we need to add warnings before we actually make the changes. And that takes time. So we can expose a class if it's useful, but we're not going to expose a class by default. Could you elaborate on what your usecase is for this particular class? Before exposing the class, I'd like to make sure you really do need this class instead of something else in the `libmints` machinery. I believe that some pieces moved around during our recent upgrade to libint2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214
https://github.com/psi4/psi4/issues/2239#issuecomment-876569214:217,Security,expose,expose,217,"Classes are hidden by default because when we expose a class as `PSI_API`, changing that class affects plugin developers, so we need to add warnings before we actually make the changes. And that takes time. So we can expose a class if it's useful, but we're not going to expose a class by default. Could you elaborate on what your usecase is for this particular class? Before exposing the class, I'd like to make sure you really do need this class instead of something else in the `libmints` machinery. I believe that some pieces moved around during our recent upgrade to libint2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214
https://github.com/psi4/psi4/issues/2239#issuecomment-876569214:271,Security,expose,expose,271,"Classes are hidden by default because when we expose a class as `PSI_API`, changing that class affects plugin developers, so we need to add warnings before we actually make the changes. And that takes time. So we can expose a class if it's useful, but we're not going to expose a class by default. Could you elaborate on what your usecase is for this particular class? Before exposing the class, I'd like to make sure you really do need this class instead of something else in the `libmints` machinery. I believe that some pieces moved around during our recent upgrade to libint2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214
https://github.com/psi4/psi4/issues/2239#issuecomment-876585963:101,Deployability,update,update,101,"Yeah, that code isn't efficient to use. That's probably why it wasn't exported. Could we help you to update the code instead?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876585963
https://github.com/psi4/psi4/issues/2239#issuecomment-876585963:22,Energy Efficiency,efficient,efficient,22,"Yeah, that code isn't efficient to use. That's probably why it wasn't exported. Could we help you to update the code instead?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876585963
https://github.com/psi4/psi4/issues/2239#issuecomment-876632135:1263,Availability,error,error,1263,"Many thanks for your answers and support. We basically want to export the two-electron integrals, and use them with other programs. So the integrals will be written to a binary file together with other 1el matrices. The code snippet that is working at the moment:. ``` c++; MintsHelper mints(ref_wfn->basisset(), options, 0);; auto intFactory = mints.integral();; auto basis = mints.basisset();; auto tBO = intFactory->eri();; AOShellCombinationsIterator shellIter = intFactory->shells_iterator();. std::vector<double> intval;; std::vector<int> intnums;. for (shellIter.first(); shellIter.is_done() == false; shellIter.next()) {; tBO->compute_shell(shellIter.p(),shellIter.q(),shellIter.r(),shellIter.s());; double cutOff = 1E-12;; auto aoIter = intFactory->integrals_iterator(shellIter.p(),shellIter.q(),shellIter.r(),shellIter.s());; for (aoIter.first(); aoIter.is_done() == false; aoIter.next()) {; int i = aoIter.i();; int j = aoIter.j();; int k = aoIter.k();; int l = aoIter.l();. if (fabs(tBO->buffer()[aoIter.index()])>cutOff){; intval.push_back(tBO->buffer()[aoIter.index()]);; intnums.push_back(i); ; intnums.push_back(j);; intnums.push_back(k);; intnums.push_back(l);. }. }; // Continue Sorting + Exporting; ````. If we use the conda install, we get an error that the symbol cannot be found. Compiling with modified integral.h works as expected. Thanks again!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876632135
https://github.com/psi4/psi4/issues/2239#issuecomment-876632135:1244,Deployability,install,install,1244,"Many thanks for your answers and support. We basically want to export the two-electron integrals, and use them with other programs. So the integrals will be written to a binary file together with other 1el matrices. The code snippet that is working at the moment:. ``` c++; MintsHelper mints(ref_wfn->basisset(), options, 0);; auto intFactory = mints.integral();; auto basis = mints.basisset();; auto tBO = intFactory->eri();; AOShellCombinationsIterator shellIter = intFactory->shells_iterator();. std::vector<double> intval;; std::vector<int> intnums;. for (shellIter.first(); shellIter.is_done() == false; shellIter.next()) {; tBO->compute_shell(shellIter.p(),shellIter.q(),shellIter.r(),shellIter.s());; double cutOff = 1E-12;; auto aoIter = intFactory->integrals_iterator(shellIter.p(),shellIter.q(),shellIter.r(),shellIter.s());; for (aoIter.first(); aoIter.is_done() == false; aoIter.next()) {; int i = aoIter.i();; int j = aoIter.j();; int k = aoIter.k();; int l = aoIter.l();. if (fabs(tBO->buffer()[aoIter.index()])>cutOff){; intval.push_back(tBO->buffer()[aoIter.index()]);; intnums.push_back(i); ; intnums.push_back(j);; intnums.push_back(k);; intnums.push_back(l);. }. }; // Continue Sorting + Exporting; ````. If we use the conda install, we get an error that the symbol cannot be found. Compiling with modified integral.h works as expected. Thanks again!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876632135
https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:500,Availability,error,error,500,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769
https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:176,Performance,load,loads,176,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769
https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:157,Security,validat,validate,157,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769
https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:294,Security,validat,validate,294,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769
https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:320,Security,validat,validate,320,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769
https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:341,Security,validat,validate,341,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769
https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:455,Security,validat,validators,455,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769
https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:484,Security,validat,validate,484,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769
https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:529,Security,Validat,ValidationError,529,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769
https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:583,Security,validat,validating,583,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769
https://github.com/psi4/psi4/issues/2243#issuecomment-879324499:164,Testability,log,log,164,"Strange - perhaps this bug only appears if some quantity is exactly zero, and the differences between machines are enough to throw this off? Output below.; [output.log](https://github.com/psi4/psi4/files/6811291/output.log)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2243#issuecomment-879324499
https://github.com/psi4/psi4/issues/2243#issuecomment-879324499:219,Testability,log,log,219,"Strange - perhaps this bug only appears if some quantity is exactly zero, and the differences between machines are enough to throw this off? Output below.; [output.log](https://github.com/psi4/psi4/files/6811291/output.log)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2243#issuecomment-879324499
https://github.com/psi4/psi4/issues/2243#issuecomment-879327366:21,Testability,log,log,21,Mine attached ; [fci.log](https://github.com/psi4/psi4/files/6811314/fci.log),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2243#issuecomment-879327366
https://github.com/psi4/psi4/issues/2243#issuecomment-879327366:73,Testability,log,log,73,Mine attached ; [fci.log](https://github.com/psi4/psi4/files/6811314/fci.log),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2243#issuecomment-879327366
https://github.com/psi4/psi4/issues/2243#issuecomment-879351036:0,Deployability,Update,Updated,0,"Updated log after applying the fix in #2245. Fixes the observed print discrepancy, but the bug persists. I suspect the culprit is line 619: on Susi's file, the C residual is ever so slightly not-zero. Not so in mine.; [output_post_2245.log](https://github.com/psi4/psi4/files/6811503/output_post_2245.log)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2243#issuecomment-879351036
https://github.com/psi4/psi4/issues/2243#issuecomment-879351036:8,Testability,log,log,8,"Updated log after applying the fix in #2245. Fixes the observed print discrepancy, but the bug persists. I suspect the culprit is line 619: on Susi's file, the C residual is ever so slightly not-zero. Not so in mine.; [output_post_2245.log](https://github.com/psi4/psi4/files/6811503/output_post_2245.log)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2243#issuecomment-879351036
https://github.com/psi4/psi4/issues/2243#issuecomment-879351036:236,Testability,log,log,236,"Updated log after applying the fix in #2245. Fixes the observed print discrepancy, but the bug persists. I suspect the culprit is line 619: on Susi's file, the C residual is ever so slightly not-zero. Not so in mine.; [output_post_2245.log](https://github.com/psi4/psi4/files/6811503/output_post_2245.log)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2243#issuecomment-879351036
https://github.com/psi4/psi4/issues/2243#issuecomment-879351036:301,Testability,log,log,301,"Updated log after applying the fix in #2245. Fixes the observed print discrepancy, but the bug persists. I suspect the culprit is line 619: on Susi's file, the C residual is ever so slightly not-zero. Not so in mine.; [output_post_2245.log](https://github.com/psi4/psi4/files/6811503/output_post_2245.log)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2243#issuecomment-879351036
https://github.com/psi4/psi4/issues/2244#issuecomment-879071662:107,Energy Efficiency,charge,charges,107,"We need _many_ more details. * What version of Psi4 are you using?; * When you say ""gradient for the point charges,"" do you mean derivative of the energy with respect to nuclear displacements i.e. geometry changes? This is needed for geometry optimizations and frequencies.; * What electronic structure method are you using? Is this some SCF?; * When you say ""failed to find"" do you mean that the gradient was the same with and without the point charges, or just that you can't find a section in the gradient breakdown labeled ""external potentials"" or ""point charges"".; * How are you creating the point charges? A simple input file that displays the problem would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662
https://github.com/psi4/psi4/issues/2244#issuecomment-879071662:147,Energy Efficiency,energy,energy,147,"We need _many_ more details. * What version of Psi4 are you using?; * When you say ""gradient for the point charges,"" do you mean derivative of the energy with respect to nuclear displacements i.e. geometry changes? This is needed for geometry optimizations and frequencies.; * What electronic structure method are you using? Is this some SCF?; * When you say ""failed to find"" do you mean that the gradient was the same with and without the point charges, or just that you can't find a section in the gradient breakdown labeled ""external potentials"" or ""point charges"".; * How are you creating the point charges? A simple input file that displays the problem would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662
https://github.com/psi4/psi4/issues/2244#issuecomment-879071662:446,Energy Efficiency,charge,charges,446,"We need _many_ more details. * What version of Psi4 are you using?; * When you say ""gradient for the point charges,"" do you mean derivative of the energy with respect to nuclear displacements i.e. geometry changes? This is needed for geometry optimizations and frequencies.; * What electronic structure method are you using? Is this some SCF?; * When you say ""failed to find"" do you mean that the gradient was the same with and without the point charges, or just that you can't find a section in the gradient breakdown labeled ""external potentials"" or ""point charges"".; * How are you creating the point charges? A simple input file that displays the problem would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662
https://github.com/psi4/psi4/issues/2244#issuecomment-879071662:559,Energy Efficiency,charge,charges,559,"We need _many_ more details. * What version of Psi4 are you using?; * When you say ""gradient for the point charges,"" do you mean derivative of the energy with respect to nuclear displacements i.e. geometry changes? This is needed for geometry optimizations and frequencies.; * What electronic structure method are you using? Is this some SCF?; * When you say ""failed to find"" do you mean that the gradient was the same with and without the point charges, or just that you can't find a section in the gradient breakdown labeled ""external potentials"" or ""point charges"".; * How are you creating the point charges? A simple input file that displays the problem would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662
https://github.com/psi4/psi4/issues/2244#issuecomment-879071662:603,Energy Efficiency,charge,charges,603,"We need _many_ more details. * What version of Psi4 are you using?; * When you say ""gradient for the point charges,"" do you mean derivative of the energy with respect to nuclear displacements i.e. geometry changes? This is needed for geometry optimizations and frequencies.; * What electronic structure method are you using? Is this some SCF?; * When you say ""failed to find"" do you mean that the gradient was the same with and without the point charges, or just that you can't find a section in the gradient breakdown labeled ""external potentials"" or ""point charges"".; * How are you creating the point charges? A simple input file that displays the problem would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662
https://github.com/psi4/psi4/issues/2244#issuecomment-879071662:243,Performance,optimiz,optimizations,243,"We need _many_ more details. * What version of Psi4 are you using?; * When you say ""gradient for the point charges,"" do you mean derivative of the energy with respect to nuclear displacements i.e. geometry changes? This is needed for geometry optimizations and frequencies.; * What electronic structure method are you using? Is this some SCF?; * When you say ""failed to find"" do you mean that the gradient was the same with and without the point charges, or just that you can't find a section in the gradient breakdown labeled ""external potentials"" or ""point charges"".; * How are you creating the point charges? A simple input file that displays the problem would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662
https://github.com/psi4/psi4/issues/2244#issuecomment-879071662:614,Usability,simpl,simple,614,"We need _many_ more details. * What version of Psi4 are you using?; * When you say ""gradient for the point charges,"" do you mean derivative of the energy with respect to nuclear displacements i.e. geometry changes? This is needed for geometry optimizations and frequencies.; * What electronic structure method are you using? Is this some SCF?; * When you say ""failed to find"" do you mean that the gradient was the same with and without the point charges, or just that you can't find a section in the gradient breakdown labeled ""external potentials"" or ""point charges"".; * How are you creating the point charges? A simple input file that displays the problem would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662
https://github.com/psi4/psi4/issues/2244#issuecomment-879102699:494,Energy Efficiency,charge,charges,494,"If I guessed correctly, you're trying to go beyond simple electrostatic embedding, and compute the forces on the MM atoms due to the QM region? If that's the case, we don't currently support that directly (the QM/MM code is under active development and is quite experimental at this point). However, something like this _should_ get you what you need:; ```; molecule mol {; O 0.0000 0.0000 -0.0657; H -0.7590 0.0000 0.5219; H 0.7590 0.0000 0.5219; no_reorient; no_com; symmetry c1; }. # The mm charges, and positions; mm_qxyz = [; [ 1.3, 4.0, -5.3, 4.1],; [ 1.3, 4.0, 5.3, 4.1],; [-1.8,-3.2, 4.3,-3.3]; ]. Chrgfield = psi4.QMMM(); with open('grid.dat', 'w') as fp:; for qxyz in mm_qxyz:; Chrgfield.extern.addCharge(*qxyz); fp.write(""{} {} {}\n"".format(*qxyz[1:])). psi4.set_global_option_python('EXTERN', Chrgfield.extern). # Compute the energy with electrostatic embedding; e, wfn = psi4.energy('hf/dz', return_wfn=True). # Use the grid.dat file created above to define the mm positions at which we want; # to compute the electric field.; results are in grid_field.dat; oeprop(wfn, 'GRID_FIELD'). # Read in the fields that oeprop computed, and scale by each charge to get the force; fields = np.loadtxt('grid_field.dat'); mm_forces = np.zeros_like(fields); for atom, field in enumerate(fields):; q = mm_qxyz[atom][0]; mm_forces[atom,:] = q * field; print(mm_forces); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699
https://github.com/psi4/psi4/issues/2244#issuecomment-879102699:838,Energy Efficiency,energy,energy,838,"If I guessed correctly, you're trying to go beyond simple electrostatic embedding, and compute the forces on the MM atoms due to the QM region? If that's the case, we don't currently support that directly (the QM/MM code is under active development and is quite experimental at this point). However, something like this _should_ get you what you need:; ```; molecule mol {; O 0.0000 0.0000 -0.0657; H -0.7590 0.0000 0.5219; H 0.7590 0.0000 0.5219; no_reorient; no_com; symmetry c1; }. # The mm charges, and positions; mm_qxyz = [; [ 1.3, 4.0, -5.3, 4.1],; [ 1.3, 4.0, 5.3, 4.1],; [-1.8,-3.2, 4.3,-3.3]; ]. Chrgfield = psi4.QMMM(); with open('grid.dat', 'w') as fp:; for qxyz in mm_qxyz:; Chrgfield.extern.addCharge(*qxyz); fp.write(""{} {} {}\n"".format(*qxyz[1:])). psi4.set_global_option_python('EXTERN', Chrgfield.extern). # Compute the energy with electrostatic embedding; e, wfn = psi4.energy('hf/dz', return_wfn=True). # Use the grid.dat file created above to define the mm positions at which we want; # to compute the electric field.; results are in grid_field.dat; oeprop(wfn, 'GRID_FIELD'). # Read in the fields that oeprop computed, and scale by each charge to get the force; fields = np.loadtxt('grid_field.dat'); mm_forces = np.zeros_like(fields); for atom, field in enumerate(fields):; q = mm_qxyz[atom][0]; mm_forces[atom,:] = q * field; print(mm_forces); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699
https://github.com/psi4/psi4/issues/2244#issuecomment-879102699:889,Energy Efficiency,energy,energy,889,"If I guessed correctly, you're trying to go beyond simple electrostatic embedding, and compute the forces on the MM atoms due to the QM region? If that's the case, we don't currently support that directly (the QM/MM code is under active development and is quite experimental at this point). However, something like this _should_ get you what you need:; ```; molecule mol {; O 0.0000 0.0000 -0.0657; H -0.7590 0.0000 0.5219; H 0.7590 0.0000 0.5219; no_reorient; no_com; symmetry c1; }. # The mm charges, and positions; mm_qxyz = [; [ 1.3, 4.0, -5.3, 4.1],; [ 1.3, 4.0, 5.3, 4.1],; [-1.8,-3.2, 4.3,-3.3]; ]. Chrgfield = psi4.QMMM(); with open('grid.dat', 'w') as fp:; for qxyz in mm_qxyz:; Chrgfield.extern.addCharge(*qxyz); fp.write(""{} {} {}\n"".format(*qxyz[1:])). psi4.set_global_option_python('EXTERN', Chrgfield.extern). # Compute the energy with electrostatic embedding; e, wfn = psi4.energy('hf/dz', return_wfn=True). # Use the grid.dat file created above to define the mm positions at which we want; # to compute the electric field.; results are in grid_field.dat; oeprop(wfn, 'GRID_FIELD'). # Read in the fields that oeprop computed, and scale by each charge to get the force; fields = np.loadtxt('grid_field.dat'); mm_forces = np.zeros_like(fields); for atom, field in enumerate(fields):; q = mm_qxyz[atom][0]; mm_forces[atom,:] = q * field; print(mm_forces); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699
https://github.com/psi4/psi4/issues/2244#issuecomment-879102699:1159,Energy Efficiency,charge,charge,1159,"If I guessed correctly, you're trying to go beyond simple electrostatic embedding, and compute the forces on the MM atoms due to the QM region? If that's the case, we don't currently support that directly (the QM/MM code is under active development and is quite experimental at this point). However, something like this _should_ get you what you need:; ```; molecule mol {; O 0.0000 0.0000 -0.0657; H -0.7590 0.0000 0.5219; H 0.7590 0.0000 0.5219; no_reorient; no_com; symmetry c1; }. # The mm charges, and positions; mm_qxyz = [; [ 1.3, 4.0, -5.3, 4.1],; [ 1.3, 4.0, 5.3, 4.1],; [-1.8,-3.2, 4.3,-3.3]; ]. Chrgfield = psi4.QMMM(); with open('grid.dat', 'w') as fp:; for qxyz in mm_qxyz:; Chrgfield.extern.addCharge(*qxyz); fp.write(""{} {} {}\n"".format(*qxyz[1:])). psi4.set_global_option_python('EXTERN', Chrgfield.extern). # Compute the energy with electrostatic embedding; e, wfn = psi4.energy('hf/dz', return_wfn=True). # Use the grid.dat file created above to define the mm positions at which we want; # to compute the electric field.; results are in grid_field.dat; oeprop(wfn, 'GRID_FIELD'). # Read in the fields that oeprop computed, and scale by each charge to get the force; fields = np.loadtxt('grid_field.dat'); mm_forces = np.zeros_like(fields); for atom, field in enumerate(fields):; q = mm_qxyz[atom][0]; mm_forces[atom,:] = q * field; print(mm_forces); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699
https://github.com/psi4/psi4/issues/2244#issuecomment-879102699:1196,Performance,load,loadtxt,1196,"If I guessed correctly, you're trying to go beyond simple electrostatic embedding, and compute the forces on the MM atoms due to the QM region? If that's the case, we don't currently support that directly (the QM/MM code is under active development and is quite experimental at this point). However, something like this _should_ get you what you need:; ```; molecule mol {; O 0.0000 0.0000 -0.0657; H -0.7590 0.0000 0.5219; H 0.7590 0.0000 0.5219; no_reorient; no_com; symmetry c1; }. # The mm charges, and positions; mm_qxyz = [; [ 1.3, 4.0, -5.3, 4.1],; [ 1.3, 4.0, 5.3, 4.1],; [-1.8,-3.2, 4.3,-3.3]; ]. Chrgfield = psi4.QMMM(); with open('grid.dat', 'w') as fp:; for qxyz in mm_qxyz:; Chrgfield.extern.addCharge(*qxyz); fp.write(""{} {} {}\n"".format(*qxyz[1:])). psi4.set_global_option_python('EXTERN', Chrgfield.extern). # Compute the energy with electrostatic embedding; e, wfn = psi4.energy('hf/dz', return_wfn=True). # Use the grid.dat file created above to define the mm positions at which we want; # to compute the electric field.; results are in grid_field.dat; oeprop(wfn, 'GRID_FIELD'). # Read in the fields that oeprop computed, and scale by each charge to get the force; fields = np.loadtxt('grid_field.dat'); mm_forces = np.zeros_like(fields); for atom, field in enumerate(fields):; q = mm_qxyz[atom][0]; mm_forces[atom,:] = q * field; print(mm_forces); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699
https://github.com/psi4/psi4/issues/2244#issuecomment-879102699:51,Usability,simpl,simple,51,"If I guessed correctly, you're trying to go beyond simple electrostatic embedding, and compute the forces on the MM atoms due to the QM region? If that's the case, we don't currently support that directly (the QM/MM code is under active development and is quite experimental at this point). However, something like this _should_ get you what you need:; ```; molecule mol {; O 0.0000 0.0000 -0.0657; H -0.7590 0.0000 0.5219; H 0.7590 0.0000 0.5219; no_reorient; no_com; symmetry c1; }. # The mm charges, and positions; mm_qxyz = [; [ 1.3, 4.0, -5.3, 4.1],; [ 1.3, 4.0, 5.3, 4.1],; [-1.8,-3.2, 4.3,-3.3]; ]. Chrgfield = psi4.QMMM(); with open('grid.dat', 'w') as fp:; for qxyz in mm_qxyz:; Chrgfield.extern.addCharge(*qxyz); fp.write(""{} {} {}\n"".format(*qxyz[1:])). psi4.set_global_option_python('EXTERN', Chrgfield.extern). # Compute the energy with electrostatic embedding; e, wfn = psi4.energy('hf/dz', return_wfn=True). # Use the grid.dat file created above to define the mm positions at which we want; # to compute the electric field.; results are in grid_field.dat; oeprop(wfn, 'GRID_FIELD'). # Read in the fields that oeprop computed, and scale by each charge to get the force; fields = np.loadtxt('grid_field.dat'); mm_forces = np.zeros_like(fields); for atom, field in enumerate(fields):; q = mm_qxyz[atom][0]; mm_forces[atom,:] = q * field; print(mm_forces); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699
https://github.com/psi4/psi4/pull/2246#issuecomment-880185632:285,Integrability,wrap,wrap,285,"> Also add it https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L77-L80 and https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L14-L20, please. then lgtm!. Done. I've made Flexiblas the first one to look for, since it's backend agnostic and can also be used to wrap MKL.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2246#issuecomment-880185632
https://github.com/psi4/psi4/pull/2246#issuecomment-880185632:134,Modifiability,Config,ConfigMath,134,"> Also add it https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L77-L80 and https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L14-L20, please. then lgtm!. Done. I've made Flexiblas the first one to look for, since it's backend agnostic and can also be used to wrap MKL.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2246#issuecomment-880185632
https://github.com/psi4/psi4/pull/2246#issuecomment-880219849:255,Integrability,wrap,wrapped,255,"Looks good to me, but I just want to check one thing (that Lori knows way more about than I) before merging it. Do we want to check for FLEXIBLAS first? My only concern is that we could run into the OMP vs. GOMP issue by not knowing exactly which BLAS is wrapped. Do either of you think that's something we're likely to run into?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2246#issuecomment-880219849
https://github.com/psi4/psi4/pull/2246#issuecomment-880252991:211,Deployability,release,release,211,"Hard to say. Psi links omp libraries based on whether it finds a library with ""mkl"" in the name. Flexiblas could cover that up and apply its own gomp here: https://gitlab.mpi-magdeburg.mpg.de/software/flexiblas-release/-/blob/master/cmake/FindMklOpenMP.cmake#L12-27 . I'm thinking Flexiblas will be most common in Fedora for now. Our conda builds mostly hard-code the blas libraries list to bypass the math detection cmake. I'd feel a little better if flexiblas was behind MKL in priority since MKL is our special case, but I don't know of any definite disruptions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2246#issuecomment-880252991
https://github.com/psi4/psi4/pull/2246#issuecomment-880252991:407,Safety,detect,detection,407,"Hard to say. Psi links omp libraries based on whether it finds a library with ""mkl"" in the name. Flexiblas could cover that up and apply its own gomp here: https://gitlab.mpi-magdeburg.mpg.de/software/flexiblas-release/-/blob/master/cmake/FindMklOpenMP.cmake#L12-27 . I'm thinking Flexiblas will be most common in Fedora for now. Our conda builds mostly hard-code the blas libraries list to bypass the math detection cmake. I'd feel a little better if flexiblas was behind MKL in priority since MKL is our special case, but I don't know of any definite disruptions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2246#issuecomment-880252991
https://github.com/psi4/psi4/pull/2250#issuecomment-897617828:89,Testability,test,tests,89,I'd forget the formatting changes if I didn't do them now. Changes made. Will merge once tests re-pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2250#issuecomment-897617828
https://github.com/psi4/psi4/pull/2251#issuecomment-883426326:5,Deployability,update,updated,5,"And, updated. This'll be good to go once tests pass. Sphinx build was clean, and the edited files looked good when viewed locally. This is a bigger change than I expected, so I'll leave it to somebody else to double-check my work and merge in. The dark blue vs. light blue thing turned out not to be related to section headers, but to whether I had clicked on a specific subsection.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883426326
https://github.com/psi4/psi4/pull/2251#issuecomment-883426326:41,Testability,test,tests,41,"And, updated. This'll be good to go once tests pass. Sphinx build was clean, and the edited files looked good when viewed locally. This is a bigger change than I expected, so I'll leave it to somebody else to double-check my work and merge in. The dark blue vs. light blue thing turned out not to be related to section headers, but to whether I had clicked on a specific subsection.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883426326
https://github.com/psi4/psi4/pull/2251#issuecomment-883460170:28,Testability,test,tests,28,Thanks. Clear to merge once tests re-pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883460170
https://github.com/psi4/psi4/pull/2251#issuecomment-883460170:8,Usability,Clear,Clear,8,Thanks. Clear to merge once tests re-pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883460170
https://github.com/psi4/psi4/pull/2251#issuecomment-883502552:15,Testability,test,test,15,_sigh_ We have test fail because `adcc` broke. I'm holding this PR innocent. Something is probably wrong with `adcc` itself.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883502552
https://github.com/psi4/psi4/pull/2251#issuecomment-883511648:138,Deployability,install,install,138,"> sigh We have test fail because adcc broke. I'm holding this PR innocent. Something is probably wrong with adcc itself. weird, it didn't install for that lane. adcc conda package hasn't changed in over a month. i'll try restarting that lane in case of fluke. otherwise, i'm guessing some non-qc dependency issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883511648
https://github.com/psi4/psi4/pull/2251#issuecomment-883511648:296,Integrability,depend,dependency,296,"> sigh We have test fail because adcc broke. I'm holding this PR innocent. Something is probably wrong with adcc itself. weird, it didn't install for that lane. adcc conda package hasn't changed in over a month. i'll try restarting that lane in case of fluke. otherwise, i'm guessing some non-qc dependency issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883511648
https://github.com/psi4/psi4/pull/2251#issuecomment-883511648:15,Testability,test,test,15,"> sigh We have test fail because adcc broke. I'm holding this PR innocent. Something is probably wrong with adcc itself. weird, it didn't install for that lane. adcc conda package hasn't changed in over a month. i'll try restarting that lane in case of fluke. otherwise, i'm guessing some non-qc dependency issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883511648
https://github.com/psi4/psi4/pull/2251#issuecomment-883533069:244,Integrability,depend,dependency,244,"Not a fluke. Note l. 93 of the configure build step reports that a suitable `adcc` could not be found, despite its inclusion in the build environment step. Sorry Lori, but I'm relying on you to solve this one. I have no idea how to isolate the dependency issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883533069
https://github.com/psi4/psi4/pull/2251#issuecomment-883533069:31,Modifiability,config,configure,31,"Not a fluke. Note l. 93 of the configure build step reports that a suitable `adcc` could not be found, despite its inclusion in the build environment step. Sorry Lori, but I'm relying on you to solve this one. I have no idea how to isolate the dependency issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883533069
https://github.com/psi4/psi4/pull/2251#issuecomment-883636314:261,Deployability,update,update,261,I think something's wrong with the new 1.3.0 pandas pkg minted a few hours ago. Avoiding it fixes the problem for adcc. May be simplest to add three lines to this PR: https://github.com/psi4/psi4/pull/2255/files . First line fixes the problem. Others a general update and debug line.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883636314
https://github.com/psi4/psi4/pull/2251#issuecomment-883636314:80,Safety,Avoid,Avoiding,80,I think something's wrong with the new 1.3.0 pandas pkg minted a few hours ago. Avoiding it fixes the problem for adcc. May be simplest to add three lines to this PR: https://github.com/psi4/psi4/pull/2255/files . First line fixes the problem. Others a general update and debug line.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883636314
https://github.com/psi4/psi4/pull/2251#issuecomment-883636314:127,Usability,simpl,simplest,127,I think something's wrong with the new 1.3.0 pandas pkg minted a few hours ago. Avoiding it fixes the problem for adcc. May be simplest to add three lines to this PR: https://github.com/psi4/psi4/pull/2255/files . First line fixes the problem. Others a general update and debug line.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883636314
https://github.com/psi4/psi4/pull/2252#issuecomment-882803378:18,Testability,test,test-case,18,"Waiting to see if test-case passes, all clear if it does.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2252#issuecomment-882803378
https://github.com/psi4/psi4/pull/2252#issuecomment-882803378:40,Usability,clear,clear,40,"Waiting to see if test-case passes, all clear if it does.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2252#issuecomment-882803378
https://github.com/psi4/psi4/pull/2252#issuecomment-882821767:27,Testability,log,log,27,"looks like it's clear,; ```log; 166/184 Test #457: python-databases ................. Passed 22.93 sec; ```; @loriab does these tags look ok??; ```; add_regression_test(python-databases ""psi;quicktests;python;noc1""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2252#issuecomment-882821767
https://github.com/psi4/psi4/pull/2252#issuecomment-882821767:40,Testability,Test,Test,40,"looks like it's clear,; ```log; 166/184 Test #457: python-databases ................. Passed 22.93 sec; ```; @loriab does these tags look ok??; ```; add_regression_test(python-databases ""psi;quicktests;python;noc1""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2252#issuecomment-882821767
https://github.com/psi4/psi4/pull/2252#issuecomment-882821767:16,Usability,clear,clear,16,"looks like it's clear,; ```log; 166/184 Test #457: python-databases ................. Passed 22.93 sec; ```; @loriab does these tags look ok??; ```; add_regression_test(python-databases ""psi;quicktests;python;noc1""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2252#issuecomment-882821767
https://github.com/psi4/psi4/pull/2252#issuecomment-882967221:44,Testability,test,tests,44,I defer to Lori on whether this belongs in `tests/python` or `tests/pytest`. I'm not sure what the difference is.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2252#issuecomment-882967221
https://github.com/psi4/psi4/pull/2252#issuecomment-882967221:62,Testability,test,tests,62,I defer to Lori on whether this belongs in `tests/python` or `tests/pytest`. I'm not sure what the difference is.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2252#issuecomment-882967221
https://github.com/psi4/psi4/issues/2253#issuecomment-882953081:546,Energy Efficiency,energy,energy,546,"After the changes in #2254, the input fails with; ```. psi4.driver.qcdb.exceptions.ValidationError: Gaussian94BasisSetParser::parse: Unable to match an exponent with one contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02. Printing out the relevant lines from the Psithon --> Python processed input file:; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSF8B47625'] = basisspec_psi4_yo__anonymousf8b47625; core.set_global_option(""BASIS"", ""anonymousf8b47625""); core.set_global_option(""STABILITY_ANALYSIS"", ""check""); --> energy('scf'). !----------------------------------------------------------------------------------!; ! !; ! Gaussian94BasisSetParser::parse: Unable to match an exponent with one !; ! contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02 !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2253#issuecomment-882953081
https://github.com/psi4/psi4/issues/2253#issuecomment-882953081:170,Integrability,contract,contraction,170,"After the changes in #2254, the input fails with; ```. psi4.driver.qcdb.exceptions.ValidationError: Gaussian94BasisSetParser::parse: Unable to match an exponent with one contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02. Printing out the relevant lines from the Psithon --> Python processed input file:; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSF8B47625'] = basisspec_psi4_yo__anonymousf8b47625; core.set_global_option(""BASIS"", ""anonymousf8b47625""); core.set_global_option(""STABILITY_ANALYSIS"", ""check""); --> energy('scf'). !----------------------------------------------------------------------------------!; ! !; ! Gaussian94BasisSetParser::parse: Unable to match an exponent with one !; ! contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02 !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2253#issuecomment-882953081
https://github.com/psi4/psi4/issues/2253#issuecomment-882953081:729,Integrability,contract,contraction,729,"After the changes in #2254, the input fails with; ```. psi4.driver.qcdb.exceptions.ValidationError: Gaussian94BasisSetParser::parse: Unable to match an exponent with one contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02. Printing out the relevant lines from the Psithon --> Python processed input file:; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSF8B47625'] = basisspec_psi4_yo__anonymousf8b47625; core.set_global_option(""BASIS"", ""anonymousf8b47625""); core.set_global_option(""STABILITY_ANALYSIS"", ""check""); --> energy('scf'). !----------------------------------------------------------------------------------!; ! !; ! Gaussian94BasisSetParser::parse: Unable to match an exponent with one !; ! contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02 !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2253#issuecomment-882953081
https://github.com/psi4/psi4/issues/2253#issuecomment-882953081:83,Security,Validat,ValidationError,83,"After the changes in #2254, the input fails with; ```. psi4.driver.qcdb.exceptions.ValidationError: Gaussian94BasisSetParser::parse: Unable to match an exponent with one contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02. Printing out the relevant lines from the Psithon --> Python processed input file:; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSF8B47625'] = basisspec_psi4_yo__anonymousf8b47625; core.set_global_option(""BASIS"", ""anonymousf8b47625""); core.set_global_option(""STABILITY_ANALYSIS"", ""check""); --> energy('scf'). !----------------------------------------------------------------------------------!; ! !; ! Gaussian94BasisSetParser::parse: Unable to match an exponent with one !; ! contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02 !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2253#issuecomment-882953081
https://github.com/psi4/psi4/issues/2253#issuecomment-883195975:18,Integrability,depend,depend,18,"Yes, we'd like to depend on BSE rather than the internal library after a round of checking consistency. This is also important for roundtripping QCSchema Wfn.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2253#issuecomment-883195975
https://github.com/psi4/psi4/pull/2254#issuecomment-883574735:99,Deployability,update,updated,99,"> If we're updating basis sets, I'll need to re-check the PR, and this belongs in 1.5. They're not updated; the sets in the BSE are identical to the ones in Psi4. Only the formatting has been fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2254#issuecomment-883574735
https://github.com/psi4/psi4/pull/2254#issuecomment-885679289:617,Deployability,upgrade,upgrade,617,"I was running the basis set diff-er (with mods) on these and got the summary below (black: unchanged to 8 decimals, yellow: changed, blue: new). So changes are fairly obscure except for 2zapa carbon.; <img width=""923"" alt=""Screen Shot 2021-07-23 at 10 19 12 AM"" src=""https://user-images.githubusercontent.com/2314730/126795680-fbf3104c-55f7-4b65-ac9c-18ae05c5f6b6.png"">; Magnitudes of changes seen in the next printouts. I did look into one of them (0.3945 <-- 0.39945 in 5zapa Li), and it tracked with psi's being the version 0 on BSE and the PR's being the version 1. So it's probably safe to assume this is all an upgrade. I'm with Jonathon on wanting to see what's changing.; <img width=""980"" alt=""Screen Shot 2021-07-23 at 10 17 10 AM"" src=""https://user-images.githubusercontent.com/2314730/126795684-17df1224-f2d7-4402-944e-ffed9edd4325.png"">; <img width=""1211"" alt=""Screen Shot 2021-07-23 at 10 16 48 AM"" src=""https://user-images.githubusercontent.com/2314730/126795688-24e6245e-05c9-4079-a44b-4f9bdddbb282.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2254#issuecomment-885679289
https://github.com/psi4/psi4/pull/2254#issuecomment-885679289:587,Safety,safe,safe,587,"I was running the basis set diff-er (with mods) on these and got the summary below (black: unchanged to 8 decimals, yellow: changed, blue: new). So changes are fairly obscure except for 2zapa carbon.; <img width=""923"" alt=""Screen Shot 2021-07-23 at 10 19 12 AM"" src=""https://user-images.githubusercontent.com/2314730/126795680-fbf3104c-55f7-4b65-ac9c-18ae05c5f6b6.png"">; Magnitudes of changes seen in the next printouts. I did look into one of them (0.3945 <-- 0.39945 in 5zapa Li), and it tracked with psi's being the version 0 on BSE and the PR's being the version 1. So it's probably safe to assume this is all an upgrade. I'm with Jonathon on wanting to see what's changing.; <img width=""980"" alt=""Screen Shot 2021-07-23 at 10 17 10 AM"" src=""https://user-images.githubusercontent.com/2314730/126795684-17df1224-f2d7-4402-944e-ffed9edd4325.png"">; <img width=""1211"" alt=""Screen Shot 2021-07-23 at 10 16 48 AM"" src=""https://user-images.githubusercontent.com/2314730/126795688-24e6245e-05c9-4079-a44b-4f9bdddbb282.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2254#issuecomment-885679289
https://github.com/psi4/psi4/pull/2254#issuecomment-885837392:749,Integrability,contract,contraction,749,"This is what the Basis Set Exchange's comparison tool reports. [7zapa-nr.txt](https://github.com/psi4/psi4/files/6870639/7zapa-nr.txt); [6zapa-nr.txt](https://github.com/psi4/psi4/files/6870640/6zapa-nr.txt); [5zapa-nr.txt](https://github.com/psi4/psi4/files/6870641/5zapa-nr.txt); [4zapa-nr.txt](https://github.com/psi4/psi4/files/6870642/4zapa-nr.txt); [3zapa-nr.txt](https://github.com/psi4/psi4/files/6870643/3zapa-nr.txt); [2zapa-nr.txt](https://github.com/psi4/psi4/files/6870644/2zapa-nr.txt). A further study shows that 2zapa-6zapa are the sets from the Supporting Information of the nZaPa paper. However, 7zapa in Psi4 is not the basis from that paper. According to notes in the MolSSI's internal Basis Set Exchange repository, some of the contraction coefficients were fixed in the nZaPa-CV paper and the rectified contractions should also be used in the non-CV sets i.e. the nZaPa sets. Since it looks like these are different, I'll just revert to the old Psi4 copy and fix the formatting by hand....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2254#issuecomment-885837392
https://github.com/psi4/psi4/pull/2254#issuecomment-885837392:825,Integrability,contract,contractions,825,"This is what the Basis Set Exchange's comparison tool reports. [7zapa-nr.txt](https://github.com/psi4/psi4/files/6870639/7zapa-nr.txt); [6zapa-nr.txt](https://github.com/psi4/psi4/files/6870640/6zapa-nr.txt); [5zapa-nr.txt](https://github.com/psi4/psi4/files/6870641/5zapa-nr.txt); [4zapa-nr.txt](https://github.com/psi4/psi4/files/6870642/4zapa-nr.txt); [3zapa-nr.txt](https://github.com/psi4/psi4/files/6870643/3zapa-nr.txt); [2zapa-nr.txt](https://github.com/psi4/psi4/files/6870644/2zapa-nr.txt). A further study shows that 2zapa-6zapa are the sets from the Supporting Information of the nZaPa paper. However, 7zapa in Psi4 is not the basis from that paper. According to notes in the MolSSI's internal Basis Set Exchange repository, some of the contraction coefficients were fixed in the nZaPa-CV paper and the rectified contractions should also be used in the non-CV sets i.e. the nZaPa sets. Since it looks like these are different, I'll just revert to the old Psi4 copy and fix the formatting by hand....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2254#issuecomment-885837392
https://github.com/psi4/psi4/pull/2254#issuecomment-885905658:18,Testability,test,tests,18,Will approve once tests pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2254#issuecomment-885905658
https://github.com/psi4/psi4/issues/2256#issuecomment-883860694:103,Deployability,upgrade,upgrade,103,The biggest complication is that dfocc is at code freeze while we absorb some upstream changes. So the upgrade warning will have to do for now. Thanks for opening the issue so we don't lose track of deleting that code.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2256#issuecomment-883860694
https://github.com/psi4/psi4/issues/2256#issuecomment-884270779:119,Modifiability,refactor,refactor,119,"DMRG is also going to be complicated, because it doesn't have a proper wavefunction. I needed to fix that for libtrans refactor anyways, so I'll add this to my list. My other Psi projects are on pause until 1.5 anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2256#issuecomment-884270779
https://github.com/psi4/psi4/issues/2256#issuecomment-884270779:195,Usability,pause,pause,195,"DMRG is also going to be complicated, because it doesn't have a proper wavefunction. I needed to fix that for libtrans refactor anyways, so I'll add this to my list. My other Psi projects are on pause until 1.5 anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2256#issuecomment-884270779
https://github.com/psi4/psi4/issues/2258#issuecomment-885263338:59,Modifiability,rewrite,rewrite,59,My fix is more of a hack. Probably a better approach is to rewrite `H_zero_block`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2258#issuecomment-885263338
https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:194,Energy Efficiency,Energy,Energy,194,"@CDSherrill Yes, I did try that. Removing line 371 yields the original problem (using the input in the forum, CI space: 792 determinants):; ```; ==> Starting DF-MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB; @DF-MCSCF 1: -112.452176153325 -3.9110e-01 3.88e-02 1.11e-11 1 1 Initial CI; Warning! Maxstep = 0.10, scaling to 0.10; @DF-MCSCF 2: -112.515943250091 -6.3767e-02 1.81e-02 0.00e+00 12 1 TS; @DF-MCSCF 3: -112.522488962067 -6.5457e-03 6.14e-03 0.00e+00 12 1 TS; @DF-MCSCF 4: -112.523535480248 -1.0465e-03 2.40e-03 0.00e+00 12 1 TS; @DF-MCSCF 5: -112.523757306710 -2.2183e-04 1.06e-03 0.00e+00 12 1 TS; @DF-MCSCF 6: -112.523809657459 -5.2351e-05 4.44e-04 0.00e+00 12 1 TS; @DF-MCSCF 7: -112.523823448504 -1.3791e-05 3.18e-04 0.00e+00 12 1 TS; @DF-MCSCF 8: -112.523827480498 -4.0320e-06 1.33e-04 0.00e+00 12 1 TS; @DF-MCSCF 9: -112.523828813577 -1.3331e-06 1.79e-04 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 10: -112.523829321491 -5.0791e-07 6.79e-05 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 11: -112.523829546801 -2.2531e-07 1.38e-04 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 12: -112.523829698540 -1.5174e-07 9.78e-05 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 13: -112.523829801775 -1.0324e-07 1.30e-05 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 14: -112.523829823173 -2.1397e-08 1.93e-05 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 15: -112.523829813293 9.8798e-09 5.67e-05 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 16: -112.523829832174 -1.8881e-08 2.90e-05 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 17: -112.523829839177 -7.0027e-09 7.35e-06 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 18: -112.523829840344 -1.1669e-09 3.02e-06 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 19: -112.523829840592 -2.4842e-10 3.34e-07 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 20: -112.523829840596 -3.6948e-12 2.10e-07 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 21: -112.523829840597 -8.2423e-13 1.56e-07 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 22: -112.523829840597 -6.2528e-13 7.02e-08 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 23: -112.523829840598 -1.5632e-13 6.16e-08 0.00e+00 12 1 TS, DIIS; @DF-M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785
https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:2651,Energy Efficiency,Energy,Energy,2651,"2e-10 3.34e-07 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 20: -112.523829840596 -3.6948e-12 2.10e-07 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 21: -112.523829840597 -8.2423e-13 1.56e-07 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 22: -112.523829840597 -6.2528e-13 7.02e-08 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 23: -112.523829840598 -1.5632e-13 6.16e-08 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 24: -112.523829840598 -2.8422e-14 4.59e-08 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 25: -112.523829840598 -1.1369e-13 2.09e-08 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 26: -112.523829840598 0.0000e+00 3.15e-09 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 27: -112.523829840598 2.8422e-14 1.21e-09 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 28: -112.523829840598 -4.2633e-14 2.51e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 29: -112.523829840598 -4.2633e-14 2.29e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Attempting to use 1 previous converged vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -111.417799029788 -2.4659E+01 1.1817E+00 ; @CI 1: 0 -112.189379709492 -7.7158E-01 3.5706E-01 ; @CI 2: 0 -112.250278204452 -6.0898E-02 3.1809E-01 ; @CI 3: 0 -112.324883713784 -7.4606E-02 2.2146E-01 ; @CI 4: 0 -112.352310238893 -2.7427E-02 1.2530E-01 ; @CI 5: 0 -112.358631917780 -6.3217E-03 9.7660E-02 ; @CI 6: 0 -112.365095716692 -6.4638E-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785
https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:2906,Energy Efficiency,Energy,Energy,2906," TS, DIIS; @DF-MCSCF 23: -112.523829840598 -1.5632e-13 6.16e-08 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 24: -112.523829840598 -2.8422e-14 4.59e-08 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 25: -112.523829840598 -1.1369e-13 2.09e-08 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 26: -112.523829840598 0.0000e+00 3.15e-09 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 27: -112.523829840598 2.8422e-14 1.21e-09 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 28: -112.523829840598 -4.2633e-14 2.51e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 29: -112.523829840598 -4.2633e-14 2.29e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Attempting to use 1 previous converged vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -111.417799029788 -2.4659E+01 1.1817E+00 ; @CI 1: 0 -112.189379709492 -7.7158E-01 3.5706E-01 ; @CI 2: 0 -112.250278204452 -6.0898E-02 3.1809E-01 ; @CI 3: 0 -112.324883713784 -7.4606E-02 2.2146E-01 ; @CI 4: 0 -112.352310238893 -2.7427E-02 1.2530E-01 ; @CI 5: 0 -112.358631917780 -6.3217E-03 9.7660E-02 ; @CI 6: 0 -112.365095716692 -6.4638E-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.52382984058",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785
https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:3684,Energy Efficiency,energy,energy,3684,"ng CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Attempting to use 1 previous converged vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -111.417799029788 -2.4659E+01 1.1817E+00 ; @CI 1: 0 -112.189379709492 -7.7158E-01 3.5706E-01 ; @CI 2: 0 -112.250278204452 -6.0898E-02 3.1809E-01 ; @CI 3: 0 -112.324883713784 -7.4606E-02 2.2146E-01 ; @CI 4: 0 -112.352310238893 -2.7427E-02 1.2530E-01 ; @CI 5: 0 -112.358631917780 -6.3217E-03 9.7660E-02 ; @CI 6: 0 -112.365095716692 -6.4638E-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why re",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785
https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:3727,Energy Efficiency,energy,energy,3727,"=> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Attempting to use 1 previous converged vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -111.417799029788 -2.4659E+01 1.1817E+00 ; @CI 1: 0 -112.189379709492 -7.7158E-01 3.5706E-01 ; @CI 2: 0 -112.250278204452 -6.0898E-02 3.1809E-01 ; @CI 3: 0 -112.324883713784 -7.4606E-02 2.2146E-01 ; @CI 4: 0 -112.352310238893 -2.7427E-02 1.2530E-01 ; @CI 5: 0 -112.358631917780 -6.3217E-03 9.7660E-02 ; @CI 6: 0 -112.365095716692 -6.4638E-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why reading the old guess leads to ve",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785
https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:3805,Energy Efficiency,energy,energy,3805,"sion Method (Block Davidson Method); Attempting to use 1 previous converged vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -111.417799029788 -2.4659E+01 1.1817E+00 ; @CI 1: 0 -112.189379709492 -7.7158E-01 3.5706E-01 ; @CI 2: 0 -112.250278204452 -6.0898E-02 3.1809E-01 ; @CI 3: 0 -112.324883713784 -7.4606E-02 2.2146E-01 ; @CI 4: 0 -112.352310238893 -2.7427E-02 1.2530E-01 ; @CI 5: 0 -112.358631917780 -6.3217E-03 9.7660E-02 ; @CI 6: 0 -112.365095716692 -6.4638E-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why reading the old guess leads to very slow convergence. It seems the old vector is not a good guess anymore: the energy ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785
https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:4073,Energy Efficiency,Energy,Energy,4073,"3.1809E-01 ; @CI 3: 0 -112.324883713784 -7.4606E-02 2.2146E-01 ; @CI 4: 0 -112.352310238893 -2.7427E-02 1.2530E-01 ; @CI 5: 0 -112.358631917780 -6.3217E-03 9.7660E-02 ; @CI 6: 0 -112.365095716692 -6.4638E-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why reading the old guess leads to very slow convergence. It seems the old vector is not a good guess anymore: the energy from the first sigma build is way off. I actually wonder how the old vector remains to be a good guess during the MCSCF orbital optimization procedure. There is a subtle issue using H0BLOCK for the final CASCI. The MCSCF sets CI max iteration to 12 by default, which",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785
https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:4311,Energy Efficiency,Energy,Energy,4311,"-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why reading the old guess leads to very slow convergence. It seems the old vector is not a good guess anymore: the energy from the first sigma build is way off. I actually wonder how the old vector remains to be a good guess during the MCSCF orbital optimization procedure. There is a subtle issue using H0BLOCK for the final CASCI. The MCSCF sets CI max iteration to 12 by default, which is probably not enough to converge a large CI problem. This could be overwritten by the keyword `CI_MAXITER`. However, doing so will also increase the CI iterations during the MCSCF orbital optimization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785
https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:4512,Energy Efficiency,energy,energy,4512,"-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why reading the old guess leads to very slow convergence. It seems the old vector is not a good guess anymore: the energy from the first sigma build is way off. I actually wonder how the old vector remains to be a good guess during the MCSCF orbital optimization procedure. There is a subtle issue using H0BLOCK for the final CASCI. The MCSCF sets CI max iteration to 12 by default, which is probably not enough to converge a large CI problem. This could be overwritten by the keyword `CI_MAXITER`. However, doing so will also increase the CI iterations during the MCSCF orbital optimization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785
https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:4555,Energy Efficiency,energy,energy,4555,"-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why reading the old guess leads to very slow convergence. It seems the old vector is not a good guess anymore: the energy from the first sigma build is way off. I actually wonder how the old vector remains to be a good guess during the MCSCF orbital optimization procedure. There is a subtle issue using H0BLOCK for the final CASCI. The MCSCF sets CI max iteration to 12 by default, which is probably not enough to converge a large CI problem. This could be overwritten by the keyword `CI_MAXITER`. However, doing so will also increase the CI iterations during the MCSCF orbital optimization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785
https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:4633,Energy Efficiency,energy,energy,4633,"-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why reading the old guess leads to very slow convergence. It seems the old vector is not a good guess anymore: the energy from the first sigma build is way off. I actually wonder how the old vector remains to be a good guess during the MCSCF orbital optimization procedure. There is a subtle issue using H0BLOCK for the final CASCI. The MCSCF sets CI max iteration to 12 by default, which is probably not enough to converge a large CI problem. This could be overwritten by the keyword `CI_MAXITER`. However, doing so will also increase the CI iterations during the MCSCF orbital optimization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785
https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:4798,Energy Efficiency,energy,energy,4798,"-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why reading the old guess leads to very slow convergence. It seems the old vector is not a good guess anymore: the energy from the first sigma build is way off. I actually wonder how the old vector remains to be a good guess during the MCSCF orbital optimization procedure. There is a subtle issue using H0BLOCK for the final CASCI. The MCSCF sets CI max iteration to 12 by default, which is probably not enough to converge a large CI problem. This could be overwritten by the keyword `CI_MAXITER`. However, doing so will also increase the CI iterations during the MCSCF orbital optimization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785
https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:4933,Performance,optimiz,optimization,4933,"-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why reading the old guess leads to very slow convergence. It seems the old vector is not a good guess anymore: the energy from the first sigma build is way off. I actually wonder how the old vector remains to be a good guess during the MCSCF orbital optimization procedure. There is a subtle issue using H0BLOCK for the final CASCI. The MCSCF sets CI max iteration to 12 by default, which is probably not enough to converge a large CI problem. This could be overwritten by the keyword `CI_MAXITER`. However, doing so will also increase the CI iterations during the MCSCF orbital optimization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785
https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:5262,Performance,optimiz,optimization,5262,"-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why reading the old guess leads to very slow convergence. It seems the old vector is not a good guess anymore: the energy from the first sigma build is way off. I actually wonder how the old vector remains to be a good guess during the MCSCF orbital optimization procedure. There is a subtle issue using H0BLOCK for the final CASCI. The MCSCF sets CI max iteration to 12 by default, which is probably not enough to converge a large CI problem. This could be overwritten by the keyword `CI_MAXITER`. However, doing so will also increase the CI iterations during the MCSCF orbital optimization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785
https://github.com/psi4/psi4/issues/2261#issuecomment-1226040293:3317,Energy Efficiency,energy,energy,3317,"663418; S 1 1.00; 1.04455407 1.0000000; S 1 1.00; 0.30382295 1.0000000; S 1 1.00; 0.07271795 1.0000000; P 4 1.00; 34.75998468 0.0199871; 7.80757529 0.1258380; 2.29096903 0.3939784; 0.71677956 0.6260029; P 1 1.00; 0.21323853 1.0000000; P 1 1.00; 0.05887653 1.0000000; D 1 1.00; 1.25011953 1.0000000; D 1 1.00; 0.34100653 1.0000000; ****; I 0; S 8 1.00; 5464702.08060097 0.0001093; 849942.52168504 0.0007913; 207458.86762606 0.0036900; 64929.86485391 0.0131833; 23909.80880875 0.0395406; 9850.71275593 0.1040723; 4222.34623514 0.2741166; 1781.76403452 0.6488818; S 2 1.00; 749.21394356 -0.5595941; 318.75246448 -0.4728234; S 1 1.00; 118.02205930 -1.0000000; S 2 1.00; 59.88344918 -0.7200351; 29.50227605 -0.2987074; S 2 1.00; 12.24593624 -0.5061450; 6.20345391 -0.5148945; S 2 1.00; 2.43764323 0.5412411; 1.14985168 0.4841938; S 1 1.00; 0.30638210 -1.0000000; S 1 1.00; 0.11926836 -1.0000000; S 1 1.00; 0.03719760 1.0000000; P 7 1.00; 20182.20166081 0.0004988; 4999.21100888 0.0038641; 1768.53795847 0.0174910; 734.77528080 0.0632147; 317.51165410 0.1951982; 139.60118455 0.4117047; 63.12833732 0.4496355; P 1 1.00; 28.34086632 1.0000000; P 2 1.00; 13.45203045 -0.6861431; 6.52579989 -0.3486363; P 3 1.00; 3.02467901 0.5601269; 1.38040546 0.4313665; 0.52669045 0.0821826; P 1 1.00; 0.22217820 1.0000000; P 1 1.00; 0.08328104 1.0000000; P 1 1.00; 0.04062406 1.0000000; D 6 1.00; 565.98837950 0.0067496; 168.69681731 0.0529920; 63.14306896 0.2071444; 26.10306850 0.4270744; 11.24530421 0.4189456; 4.63907320 0.1167256; D 1 1.00; 1.91572411 1.0000000; D 1 1.00; 0.72024616 1.0000000; D 1 1.00; 0.07663996 1.0000000; F 1 1.00; 2.20029999 1.0000000; F 1 1.00; 0.52320000 1.0000000; ****; }. set basis jorge; set {; 	memory 16GB; 	freeze_core false; 	reference RHF; 	scf_type PK; 	ints_tolerance 1.0E-14; 	E_CONVERGENCE 1.0E-10; 	D_CONVERGENCE 1.0E-10; 	#maxiter 250; #STABILITY_ANALYSIS check; 	#FAIL_ON_MAXITER False; 	#cachelevel 0; }; #scf_e, scf_wfn = energy('scf', return_wfn=True); energy('BCCD'). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226040293
https://github.com/psi4/psi4/issues/2261#issuecomment-1226040293:3349,Energy Efficiency,energy,energy,3349,"663418; S 1 1.00; 1.04455407 1.0000000; S 1 1.00; 0.30382295 1.0000000; S 1 1.00; 0.07271795 1.0000000; P 4 1.00; 34.75998468 0.0199871; 7.80757529 0.1258380; 2.29096903 0.3939784; 0.71677956 0.6260029; P 1 1.00; 0.21323853 1.0000000; P 1 1.00; 0.05887653 1.0000000; D 1 1.00; 1.25011953 1.0000000; D 1 1.00; 0.34100653 1.0000000; ****; I 0; S 8 1.00; 5464702.08060097 0.0001093; 849942.52168504 0.0007913; 207458.86762606 0.0036900; 64929.86485391 0.0131833; 23909.80880875 0.0395406; 9850.71275593 0.1040723; 4222.34623514 0.2741166; 1781.76403452 0.6488818; S 2 1.00; 749.21394356 -0.5595941; 318.75246448 -0.4728234; S 1 1.00; 118.02205930 -1.0000000; S 2 1.00; 59.88344918 -0.7200351; 29.50227605 -0.2987074; S 2 1.00; 12.24593624 -0.5061450; 6.20345391 -0.5148945; S 2 1.00; 2.43764323 0.5412411; 1.14985168 0.4841938; S 1 1.00; 0.30638210 -1.0000000; S 1 1.00; 0.11926836 -1.0000000; S 1 1.00; 0.03719760 1.0000000; P 7 1.00; 20182.20166081 0.0004988; 4999.21100888 0.0038641; 1768.53795847 0.0174910; 734.77528080 0.0632147; 317.51165410 0.1951982; 139.60118455 0.4117047; 63.12833732 0.4496355; P 1 1.00; 28.34086632 1.0000000; P 2 1.00; 13.45203045 -0.6861431; 6.52579989 -0.3486363; P 3 1.00; 3.02467901 0.5601269; 1.38040546 0.4313665; 0.52669045 0.0821826; P 1 1.00; 0.22217820 1.0000000; P 1 1.00; 0.08328104 1.0000000; P 1 1.00; 0.04062406 1.0000000; D 6 1.00; 565.98837950 0.0067496; 168.69681731 0.0529920; 63.14306896 0.2071444; 26.10306850 0.4270744; 11.24530421 0.4189456; 4.63907320 0.1167256; D 1 1.00; 1.91572411 1.0000000; D 1 1.00; 0.72024616 1.0000000; D 1 1.00; 0.07663996 1.0000000; F 1 1.00; 2.20029999 1.0000000; F 1 1.00; 0.52320000 1.0000000; ****; }. set basis jorge; set {; 	memory 16GB; 	freeze_core false; 	reference RHF; 	scf_type PK; 	ints_tolerance 1.0E-14; 	E_CONVERGENCE 1.0E-10; 	D_CONVERGENCE 1.0E-10; 	#maxiter 250; #STABILITY_ANALYSIS check; 	#FAIL_ON_MAXITER False; 	#cachelevel 0; }; #scf_e, scf_wfn = energy('scf', return_wfn=True); energy('BCCD'). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226040293
https://github.com/psi4/psi4/issues/2261#issuecomment-1226040293:3282,Performance,cache,cachelevel,3282,"663418; S 1 1.00; 1.04455407 1.0000000; S 1 1.00; 0.30382295 1.0000000; S 1 1.00; 0.07271795 1.0000000; P 4 1.00; 34.75998468 0.0199871; 7.80757529 0.1258380; 2.29096903 0.3939784; 0.71677956 0.6260029; P 1 1.00; 0.21323853 1.0000000; P 1 1.00; 0.05887653 1.0000000; D 1 1.00; 1.25011953 1.0000000; D 1 1.00; 0.34100653 1.0000000; ****; I 0; S 8 1.00; 5464702.08060097 0.0001093; 849942.52168504 0.0007913; 207458.86762606 0.0036900; 64929.86485391 0.0131833; 23909.80880875 0.0395406; 9850.71275593 0.1040723; 4222.34623514 0.2741166; 1781.76403452 0.6488818; S 2 1.00; 749.21394356 -0.5595941; 318.75246448 -0.4728234; S 1 1.00; 118.02205930 -1.0000000; S 2 1.00; 59.88344918 -0.7200351; 29.50227605 -0.2987074; S 2 1.00; 12.24593624 -0.5061450; 6.20345391 -0.5148945; S 2 1.00; 2.43764323 0.5412411; 1.14985168 0.4841938; S 1 1.00; 0.30638210 -1.0000000; S 1 1.00; 0.11926836 -1.0000000; S 1 1.00; 0.03719760 1.0000000; P 7 1.00; 20182.20166081 0.0004988; 4999.21100888 0.0038641; 1768.53795847 0.0174910; 734.77528080 0.0632147; 317.51165410 0.1951982; 139.60118455 0.4117047; 63.12833732 0.4496355; P 1 1.00; 28.34086632 1.0000000; P 2 1.00; 13.45203045 -0.6861431; 6.52579989 -0.3486363; P 3 1.00; 3.02467901 0.5601269; 1.38040546 0.4313665; 0.52669045 0.0821826; P 1 1.00; 0.22217820 1.0000000; P 1 1.00; 0.08328104 1.0000000; P 1 1.00; 0.04062406 1.0000000; D 6 1.00; 565.98837950 0.0067496; 168.69681731 0.0529920; 63.14306896 0.2071444; 26.10306850 0.4270744; 11.24530421 0.4189456; 4.63907320 0.1167256; D 1 1.00; 1.91572411 1.0000000; D 1 1.00; 0.72024616 1.0000000; D 1 1.00; 0.07663996 1.0000000; F 1 1.00; 2.20029999 1.0000000; F 1 1.00; 0.52320000 1.0000000; ****; }. set basis jorge; set {; 	memory 16GB; 	freeze_core false; 	reference RHF; 	scf_type PK; 	ints_tolerance 1.0E-14; 	E_CONVERGENCE 1.0E-10; 	D_CONVERGENCE 1.0E-10; 	#maxiter 250; #STABILITY_ANALYSIS check; 	#FAIL_ON_MAXITER False; 	#cachelevel 0; }; #scf_e, scf_wfn = energy('scf', return_wfn=True); energy('BCCD'). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226040293
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:89,Availability,Error,Error,89,"Running my example with a debug build and #2700 results in this log:; ```; LSEEK failed. Error description from the OS: : Bad file descriptor; Error in PSIO_WT_TOCLEN()! Cannot seek vol[0] to its beginning, unit 102. Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:143,Availability,Error,Error,143,"Running my example with a debug build and #2700 results in this log:; ```; LSEEK failed. Error description from the OS: : Bad file descriptor; Error in PSIO_WT_TOCLEN()! Cannot seek vol[0] to its beginning, unit 102. Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:669,Availability,Error,Error,669,"Running my example with a debug build and #2700 results in this log:; ```; LSEEK failed. Error description from the OS: : Bad file descriptor; Error in PSIO_WT_TOCLEN()! Cannot seek vol[0] to its beginning, unit 102. Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:681,Availability,Error,Error,681,"Running my example with a debug build and #2700 results in this log:; ```; LSEEK failed. Error description from the OS: : Bad file descriptor; Error in PSIO_WT_TOCLEN()! Cannot seek vol[0] to its beginning, unit 102. Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:688,Availability,Error,Error,688,"Running my example with a debug build and #2700 results in this log:; ```; LSEEK failed. Error description from the OS: : Bad file descriptor; Error in PSIO_WT_TOCLEN()! Cannot seek vol[0] to its beginning, unit 102. Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:1599,Availability,Error,Error,1599,"oc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procroutin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:1611,Availability,Error,Error,1611,"oc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procroutin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:1622,Availability,Error,Error,1622,"oc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procroutin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:2674,Availability,Error,Error,2674,"e: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:2686,Availability,Error,Error,2686,"e: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:2693,Availability,Error,Error,2693,"e: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:3604,Availability,Error,Error,3604,"k (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:3616,Availability,Error,Error,3616,"k (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:3627,Availability,Error,Error,3627,"k (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:451,Energy Efficiency,energy,energy,451,"Running my example with a debug build and #2700 results in this log:; ```; LSEEK failed. Error description from the OS: : Bad file descriptor; Error in PSIO_WT_TOCLEN()! Cannot seek vol[0] to its beginning, unit 102. Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:477,Energy Efficiency,energy,energy,477,"Running my example with a debug build and #2700 results in this log:; ```; LSEEK failed. Error description from the OS: : Bad file descriptor; Error in PSIO_WT_TOCLEN()! Cannot seek vol[0] to its beginning, unit 102. Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:1484,Energy Efficiency,energy,energy,1484,"[lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['ener",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:2456,Energy Efficiency,energy,energy,2456,"--------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !---------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:2482,Energy Efficiency,energy,energy,2482,"--------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !---------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:3489,Energy Efficiency,energy,energy,3489,"k (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:64,Testability,log,log,64,"Running my example with a debug build and #2700 results in this log:; ```; LSEEK failed. Error description from the OS: : Bad file descriptor; Error in PSIO_WT_TOCLEN()! Cannot seek vol[0] to its beginning, unit 102. Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204
https://github.com/psi4/psi4/issues/2261#issuecomment-1226460109:3061,Performance,optimiz,optimized,3061,"tibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #9 0x00007ffff568762b in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, int, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (); from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #10 0x00007ffff568fbde in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #11 0x00007ffff4be5fae in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #12 0x00007ffff4bcd5b3 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #13 0x00007ffff406c5ab in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #14 0x00007ffff40e5ccb in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #15 0x00007ffff40d4b39 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #16 0x00007ffff40c71ad in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #17 0x00007ffff40c7235 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #18 0x00007ffff408bb20 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #19 0x00005555556d68f4 in cfunction_call (func=0x7fffb13e0cc0, args=<optimized out>, kwargs=<optimized out>) at /opt/conda/conda-bld/python-split_1654083059479/work/Objects/methodobject.c:543; #20 0x000055555569047f in _PyObject_MakeTpCall (tstate=0x555555920e40, callable=0x7fffb13e0cc0, args=<optimized out>, nargs=<optimized out>, keywords=<optimized out>); at /opt/conda/conda-bld/python-split_1654083059479/work/Objects/call.c:191; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226460109
https://github.com/psi4/psi4/issues/2261#issuecomment-1226460109:3085,Performance,optimiz,optimized,3085,"tibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #9 0x00007ffff568762b in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, int, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (); from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #10 0x00007ffff568fbde in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #11 0x00007ffff4be5fae in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #12 0x00007ffff4bcd5b3 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #13 0x00007ffff406c5ab in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #14 0x00007ffff40e5ccb in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #15 0x00007ffff40d4b39 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #16 0x00007ffff40c71ad in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #17 0x00007ffff40c7235 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #18 0x00007ffff408bb20 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #19 0x00005555556d68f4 in cfunction_call (func=0x7fffb13e0cc0, args=<optimized out>, kwargs=<optimized out>) at /opt/conda/conda-bld/python-split_1654083059479/work/Objects/methodobject.c:543; #20 0x000055555569047f in _PyObject_MakeTpCall (tstate=0x555555920e40, callable=0x7fffb13e0cc0, args=<optimized out>, nargs=<optimized out>, keywords=<optimized out>); at /opt/conda/conda-bld/python-split_1654083059479/work/Objects/call.c:191; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226460109
https://github.com/psi4/psi4/issues/2261#issuecomment-1226460109:3287,Performance,optimiz,optimized,3287,"tibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #9 0x00007ffff568762b in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, int, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (); from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #10 0x00007ffff568fbde in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #11 0x00007ffff4be5fae in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #12 0x00007ffff4bcd5b3 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #13 0x00007ffff406c5ab in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #14 0x00007ffff40e5ccb in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #15 0x00007ffff40d4b39 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #16 0x00007ffff40c71ad in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #17 0x00007ffff40c7235 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #18 0x00007ffff408bb20 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #19 0x00005555556d68f4 in cfunction_call (func=0x7fffb13e0cc0, args=<optimized out>, kwargs=<optimized out>) at /opt/conda/conda-bld/python-split_1654083059479/work/Objects/methodobject.c:543; #20 0x000055555569047f in _PyObject_MakeTpCall (tstate=0x555555920e40, callable=0x7fffb13e0cc0, args=<optimized out>, nargs=<optimized out>, keywords=<optimized out>); at /opt/conda/conda-bld/python-split_1654083059479/work/Objects/call.c:191; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226460109
https://github.com/psi4/psi4/issues/2261#issuecomment-1226460109:3310,Performance,optimiz,optimized,3310,"tibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #9 0x00007ffff568762b in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, int, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (); from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #10 0x00007ffff568fbde in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #11 0x00007ffff4be5fae in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #12 0x00007ffff4bcd5b3 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #13 0x00007ffff406c5ab in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #14 0x00007ffff40e5ccb in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #15 0x00007ffff40d4b39 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #16 0x00007ffff40c71ad in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #17 0x00007ffff40c7235 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #18 0x00007ffff408bb20 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #19 0x00005555556d68f4 in cfunction_call (func=0x7fffb13e0cc0, args=<optimized out>, kwargs=<optimized out>) at /opt/conda/conda-bld/python-split_1654083059479/work/Objects/methodobject.c:543; #20 0x000055555569047f in _PyObject_MakeTpCall (tstate=0x555555920e40, callable=0x7fffb13e0cc0, args=<optimized out>, nargs=<optimized out>, keywords=<optimized out>); at /opt/conda/conda-bld/python-split_1654083059479/work/Objects/call.c:191; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226460109
https://github.com/psi4/psi4/issues/2261#issuecomment-1226460109:3336,Performance,optimiz,optimized,3336,"tibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #9 0x00007ffff568762b in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, int, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (); from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #10 0x00007ffff568fbde in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #11 0x00007ffff4be5fae in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #12 0x00007ffff4bcd5b3 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #13 0x00007ffff406c5ab in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #14 0x00007ffff40e5ccb in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #15 0x00007ffff40d4b39 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #16 0x00007ffff40c71ad in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #17 0x00007ffff40c7235 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #18 0x00007ffff408bb20 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #19 0x00005555556d68f4 in cfunction_call (func=0x7fffb13e0cc0, args=<optimized out>, kwargs=<optimized out>) at /opt/conda/conda-bld/python-split_1654083059479/work/Objects/methodobject.c:543; #20 0x000055555569047f in _PyObject_MakeTpCall (tstate=0x555555920e40, callable=0x7fffb13e0cc0, args=<optimized out>, nargs=<optimized out>, keywords=<optimized out>); at /opt/conda/conda-bld/python-split_1654083059479/work/Objects/call.c:191; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226460109
https://github.com/psi4/psi4/issues/2261#issuecomment-1226663367:17,Usability,usab,usable,17,"Managed to get a usable stack trace with gdb. It looks like cctransort::cctransort(...) gets called from Py-side, which calls cctransort::sort_tei_rhf(...), which in turn calls DPD::buf4_sort, which eventually crashes in PSIO, when it tries to manipulate a file handle that does not map to a currently open file. I have no good ideas on how to debug this any further. These parts of the codebase are nearly impenetrable for me, and for whatever reason I am not getting any line numbers in gdb, which is certainly not helping. ```; #0 0x00007ffff7ca5410 in perror () from /lib/x86_64-linux-gnu/libc.so.6; #1 0x00007ffff5c4ab31 in psi::PSIO::wt_toclen(unsigned long, unsigned long) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #2 0x00007ffff5c4b8f2 in psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #3 0x00007ffff5c4bbcf in psi::psio_write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #4 0x00007ffff5690257 in psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #5 0x00007ffff568d8d1 in psi::DPD::file4_cache_del(psi::dpdfile4*) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #6 0x00007ffff568e543 in psi::DPD::file4_cache_del_lru() () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #7 0x00007ffff5640468 in psi::DPD::dpd_block_matrix(unsigned long, unsigned long) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #8 0x00007ffff5643ac9 in psi::DPD::buf4_mat_irrep_init_block(psi::dpdbuf4*, int, int) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #9 0x00007ffff564e38d in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, int, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226663367
https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277:192,Availability,Error,Error,192,"Final post for now, I cannot devote more time to debugging Psi4. Managed to get a stack trace with full debugging symbols:; ```; (gdb) bt full; #0 __GI_perror (s=0x7ffff6782dd8 ""LSEEK failed. Error description from the OS: "") at perror.c:48; errnum = <optimized out>; fp = <optimized out>; fd = <optimized out>; #1 0x00007ffff5ca4ee7 in psi::PSIO::wt_toclen (this=0x555555eb0a90, unit=102, len=1) at /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc:109; stream = -1; errcod = -1; #2 0x00007ffff5ca5cf6 in psi::PSIO::write (this=0x555555eb0a90, unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\305D\330xK\222\063?<c\272\337\366\242\342>k\343\316\350\062hF?\245\070\243\246\313\036\""\277B\006\n\333\317k!?\275\017\327t|c\021?[C+\334\036\063\034\277""..., size=13436928, start=..., end=0x7fffffffb520) at /home/gytibor/psi4/psi4/src/psi4/libpsio/write.cc:94; this_unit = 0x555555eb4810; this_entry = 0x55555a4df9e0; last_entry = 0x20; start_toc = {page = 0, offset = 8}; start_data = {page = 0, offset = 120}; end_data = {page = 205, offset = 2168}; tocentry_size = 112; dirty = 1; #3 0x00007ffff5ca5ff4 in psi::psio_write (unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277
https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277:252,Performance,optimiz,optimized,252,"Final post for now, I cannot devote more time to debugging Psi4. Managed to get a stack trace with full debugging symbols:; ```; (gdb) bt full; #0 __GI_perror (s=0x7ffff6782dd8 ""LSEEK failed. Error description from the OS: "") at perror.c:48; errnum = <optimized out>; fp = <optimized out>; fd = <optimized out>; #1 0x00007ffff5ca4ee7 in psi::PSIO::wt_toclen (this=0x555555eb0a90, unit=102, len=1) at /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc:109; stream = -1; errcod = -1; #2 0x00007ffff5ca5cf6 in psi::PSIO::write (this=0x555555eb0a90, unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\305D\330xK\222\063?<c\272\337\366\242\342>k\343\316\350\062hF?\245\070\243\246\313\036\""\277B\006\n\333\317k!?\275\017\327t|c\021?[C+\334\036\063\034\277""..., size=13436928, start=..., end=0x7fffffffb520) at /home/gytibor/psi4/psi4/src/psi4/libpsio/write.cc:94; this_unit = 0x555555eb4810; this_entry = 0x55555a4df9e0; last_entry = 0x20; start_toc = {page = 0, offset = 8}; start_data = {page = 0, offset = 120}; end_data = {page = 205, offset = 2168}; tocentry_size = 112; dirty = 1; #3 0x00007ffff5ca5ff4 in psi::psio_write (unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277
https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277:274,Performance,optimiz,optimized,274,"Final post for now, I cannot devote more time to debugging Psi4. Managed to get a stack trace with full debugging symbols:; ```; (gdb) bt full; #0 __GI_perror (s=0x7ffff6782dd8 ""LSEEK failed. Error description from the OS: "") at perror.c:48; errnum = <optimized out>; fp = <optimized out>; fd = <optimized out>; #1 0x00007ffff5ca4ee7 in psi::PSIO::wt_toclen (this=0x555555eb0a90, unit=102, len=1) at /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc:109; stream = -1; errcod = -1; #2 0x00007ffff5ca5cf6 in psi::PSIO::write (this=0x555555eb0a90, unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\305D\330xK\222\063?<c\272\337\366\242\342>k\343\316\350\062hF?\245\070\243\246\313\036\""\277B\006\n\333\317k!?\275\017\327t|c\021?[C+\334\036\063\034\277""..., size=13436928, start=..., end=0x7fffffffb520) at /home/gytibor/psi4/psi4/src/psi4/libpsio/write.cc:94; this_unit = 0x555555eb4810; this_entry = 0x55555a4df9e0; last_entry = 0x20; start_toc = {page = 0, offset = 8}; start_data = {page = 0, offset = 120}; end_data = {page = 205, offset = 2168}; tocentry_size = 112; dirty = 1; #3 0x00007ffff5ca5ff4 in psi::psio_write (unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277
https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277:296,Performance,optimiz,optimized,296,"Final post for now, I cannot devote more time to debugging Psi4. Managed to get a stack trace with full debugging symbols:; ```; (gdb) bt full; #0 __GI_perror (s=0x7ffff6782dd8 ""LSEEK failed. Error description from the OS: "") at perror.c:48; errnum = <optimized out>; fp = <optimized out>; fd = <optimized out>; #1 0x00007ffff5ca4ee7 in psi::PSIO::wt_toclen (this=0x555555eb0a90, unit=102, len=1) at /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc:109; stream = -1; errcod = -1; #2 0x00007ffff5ca5cf6 in psi::PSIO::write (this=0x555555eb0a90, unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\305D\330xK\222\063?<c\272\337\366\242\342>k\343\316\350\062hF?\245\070\243\246\313\036\""\277B\006\n\333\317k!?\275\017\327t|c\021?[C+\334\036\063\034\277""..., size=13436928, start=..., end=0x7fffffffb520) at /home/gytibor/psi4/psi4/src/psi4/libpsio/write.cc:94; this_unit = 0x555555eb4810; this_entry = 0x55555a4df9e0; last_entry = 0x20; start_toc = {page = 0, offset = 8}; start_data = {page = 0, offset = 120}; end_data = {page = 205, offset = 2168}; tocentry_size = 112; dirty = 1; #3 0x00007ffff5ca5ff4 in psi::psio_write (unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277
https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277:29500,Performance,cache,cachefiles,29500,"ector_impl_data> = {_M_start = 0x55555a4eab60,; _M_finish = 0x55555a4eadb0, _M_end_of_storage = 0x55555a4eadb0}, <No data fields>}}, <No data fields>}; occ_off = {<std::_Vector_base<int, std::allocator<int> >> = {; _M_impl = {<std::allocator<int>> = {<__gnu_cxx::new_allocator<int>> = {<No data fields>}, <No data fields>}, <std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data> = {_M_start = 0x5555565de240,; _M_finish = 0x5555565de244, _M_end_of_storage = 0x5555565de244}, <No data fields>}}, <No data fields>}; vir_off = {<std::_Vector_base<int, std::allocator<int> >> = {; _M_impl = {<std::allocator<int>> = {<__gnu_cxx::new_allocator<int>> = {<No data fields>}, <No data fields>}, <std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data> = {_M_start = 0x555556e9c820,; _M_finish = 0x555556e9c824, _M_end_of_storage = 0x555556e9c824}, <No data fields>}}, <No data fields>}; transspaces = {<std::_Vector_base<std::shared_ptr<psi::MOSpace>, std::allocator<std::shared_ptr<psi::MOSpace> > >> = {; _M_impl = {<std::allocator<std::shared_ptr<psi::MOSpace> >> = {<__gnu_cxx::new_allocator<std::shared_ptr<psi::MOSpace> >> = {<No data fields>}, <No data fields>}, <std::_Vector_base<std::shared_ptr<psi::MOSpace>, std::allocator<std::shared_ptr<psi::MOSpace> > >::_Vector_impl_data> = {_M_start = 0x555556f30e70, _M_finish = 0x555556f30e90, _M_end_of_storage = 0x555556f30e90}, <No data fields>}}, <No data fields>}; ints = 0x55555bfe4090; presort_predone = false; efzc = 0; spaces = {<std::_Vector_base<psi::DPDMOSpace, std::allocator<psi::DPDMOSpace> >> = {; _M_impl = {<std::allocator<psi::DPDMOSpace>> = {<__gnu_cxx::new_allocator<psi::DPDMOSpace>> = {<No data fields>}, <No data fields>}, <std::_Vector_base<psi::DPDMOSpace, std::allocator<psi::DPDMOSpace> >::_Vector_impl_data> = {_M_start = 0x555556910470, _M_finish = 0x555556910520, _M_end_of_storage = 0x555556910520}, <No data fields>}}, <No data fields>}; cachefiles = 0x555556ef4190; cachelist = 0x55555c01bc90; eref = 1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277
https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277:29529,Performance,cache,cachelist,29529,"ector_impl_data> = {_M_start = 0x55555a4eab60,; _M_finish = 0x55555a4eadb0, _M_end_of_storage = 0x55555a4eadb0}, <No data fields>}}, <No data fields>}; occ_off = {<std::_Vector_base<int, std::allocator<int> >> = {; _M_impl = {<std::allocator<int>> = {<__gnu_cxx::new_allocator<int>> = {<No data fields>}, <No data fields>}, <std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data> = {_M_start = 0x5555565de240,; _M_finish = 0x5555565de244, _M_end_of_storage = 0x5555565de244}, <No data fields>}}, <No data fields>}; vir_off = {<std::_Vector_base<int, std::allocator<int> >> = {; _M_impl = {<std::allocator<int>> = {<__gnu_cxx::new_allocator<int>> = {<No data fields>}, <No data fields>}, <std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data> = {_M_start = 0x555556e9c820,; _M_finish = 0x555556e9c824, _M_end_of_storage = 0x555556e9c824}, <No data fields>}}, <No data fields>}; transspaces = {<std::_Vector_base<std::shared_ptr<psi::MOSpace>, std::allocator<std::shared_ptr<psi::MOSpace> > >> = {; _M_impl = {<std::allocator<std::shared_ptr<psi::MOSpace> >> = {<__gnu_cxx::new_allocator<std::shared_ptr<psi::MOSpace> >> = {<No data fields>}, <No data fields>}, <std::_Vector_base<std::shared_ptr<psi::MOSpace>, std::allocator<std::shared_ptr<psi::MOSpace> > >::_Vector_impl_data> = {_M_start = 0x555556f30e70, _M_finish = 0x555556f30e90, _M_end_of_storage = 0x555556f30e90}, <No data fields>}}, <No data fields>}; ints = 0x55555bfe4090; presort_predone = false; efzc = 0; spaces = {<std::_Vector_base<psi::DPDMOSpace, std::allocator<psi::DPDMOSpace> >> = {; _M_impl = {<std::allocator<psi::DPDMOSpace>> = {<__gnu_cxx::new_allocator<psi::DPDMOSpace>> = {<No data fields>}, <No data fields>}, <std::_Vector_base<psi::DPDMOSpace, std::allocator<psi::DPDMOSpace> >::_Vector_impl_data> = {_M_start = 0x555556910470, _M_finish = 0x555556910520, _M_end_of_storage = 0x555556910520}, <No data fields>}}, <No data fields>}; cachefiles = 0x555556ef4190; cachelist = 0x55555c01bc90; eref = 1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277
https://github.com/psi4/psi4/issues/2261#issuecomment-1227166848:135,Availability,error,error,135,```; rows_per_bucket = -1622894080; nbuckets = -18256; rows_left = -1312595486; ```. This immediately makes me suspect a type overflow error. Thanks for everything thus far.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227166848
https://github.com/psi4/psi4/issues/2261#issuecomment-1227204536:151,Availability,error,error,151,> ```; > rows_per_bucket = -1622894080; > nbuckets = -18256; > rows_left = -1312595486; > ```; > ; > This immediately makes me suspect a type overflow error. Thanks for everything thus far. Or possibly an unsigned underflow that got cast to signed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227204536
https://github.com/psi4/psi4/issues/2261#issuecomment-1228512946:56,Availability,error,errors,56,One more thing. I ran this with valgrind and no notable errors popped up. So no uninitialized memory use or buffer overflow here.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1228512946
https://github.com/psi4/psi4/issues/2261#issuecomment-1244595835:26,Testability,log,log,26,Output file:; [psi4_23306.log](https://github.com/psi4/psi4/files/9552147/psi4_23306.log),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1244595835
https://github.com/psi4/psi4/issues/2261#issuecomment-1244595835:85,Testability,log,log,85,Output file:; [psi4_23306.log](https://github.com/psi4/psi4/files/9552147/psi4_23306.log),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1244595835
https://github.com/psi4/psi4/issues/2261#issuecomment-1245993701:126,Availability,error,errors,126,"This is really not a very large calculation – even the <ab|cd> integrals only need 1.26GB of storage – so the apparent memory errors don't make sense. I can try to reproduce the error on my systems, but I wonder if the behavior would change if you asked for less memory – say 4GB?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1245993701
https://github.com/psi4/psi4/issues/2261#issuecomment-1245993701:178,Availability,error,error,178,"This is really not a very large calculation – even the <ab|cd> integrals only need 1.26GB of storage – so the apparent memory errors don't make sense. I can try to reproduce the error on my systems, but I wonder if the behavior would change if you asked for less memory – say 4GB?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1245993701
https://github.com/psi4/psi4/issues/2261#issuecomment-1246008451:370,Performance,cache,cachelevel,370,"I can certainly try it. The crash seems to be related to the LRU caching mechanism, and it fails when it tries to lseek() on a file that is not open. Maybe the logic that would open the file sees that there is enough memory to hold everything in RAM and skips the file open, but then later the the sort assumes that file has been opened.; This is also supported by the `cachelevel 0` workaround working fine, just slowly. The fact that an LRU caching related function is getting called is unexpected by itself, as the [CC docs](https://psicode.org/psi4manual/master/cc.html) claim that LRU is not the default caching algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246008451
https://github.com/psi4/psi4/issues/2261#issuecomment-1246008451:160,Testability,log,logic,160,"I can certainly try it. The crash seems to be related to the LRU caching mechanism, and it fails when it tries to lseek() on a file that is not open. Maybe the logic that would open the file sees that there is enough memory to hold everything in RAM and skips the file open, but then later the the sort assumes that file has been opened.; This is also supported by the `cachelevel 0` workaround working fine, just slowly. The fact that an LRU caching related function is getting called is unexpected by itself, as the [CC docs](https://psicode.org/psi4manual/master/cc.html) claim that LRU is not the default caching algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246008451
https://github.com/psi4/psi4/issues/2261#issuecomment-1246009485:175,Availability,error,errors,175,"Then may I also suggest turning off the cache entirely? It was a good idea in theory, but it leads to memory fragmentation and eventually calculations crash due to allocation errors. It's possible that this problem is manifested in the crash you're observing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246009485
https://github.com/psi4/psi4/issues/2261#issuecomment-1246009485:40,Performance,cache,cache,40,"Then may I also suggest turning off the cache entirely? It was a good idea in theory, but it leads to memory fragmentation and eventually calculations crash due to allocation errors. It's possible that this problem is manifested in the crash you're observing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246009485
https://github.com/psi4/psi4/issues/2261#issuecomment-1246019734:16,Performance,cache,cache,16,"Also, regarding cache types, LOW is only the default for `ccenergy`, because it's the only code for which I built statistics on how frequently specific data were accessed. Otherwise, LRU is used for all other CC codes. The docs are misleading on this point.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246019734
https://github.com/psi4/psi4/issues/2261#issuecomment-1246019734:162,Security,access,accessed,162,"Also, regarding cache types, LOW is only the default for `ccenergy`, because it's the only code for which I built statistics on how frequently specific data were accessed. Otherwise, LRU is used for all other CC codes. The docs are misleading on this point.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246019734
https://github.com/psi4/psi4/issues/2261#issuecomment-1246032327:137,Availability,failure,failure,137,"The direct cause of the crash is trying to use an invalid file handle. I cannot tell if that is somehow the consequence of an allocation failure. If it _is_, then there is an allocation somewhere that is missing a failure check. Even then, AFAIK memory fragmentation is not _that_ much of an issue these days on modern Linux kernels. Glibc can sometimes hold on to `free()`'d memory for way too long and neglect giving it back to the kernel, but that should show up as a ""pseudo-leak"" where the process uses more and more memory despite not having any actual leaks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246032327
https://github.com/psi4/psi4/issues/2261#issuecomment-1246032327:214,Availability,failure,failure,214,"The direct cause of the crash is trying to use an invalid file handle. I cannot tell if that is somehow the consequence of an allocation failure. If it _is_, then there is an allocation somewhere that is missing a failure check. Even then, AFAIK memory fragmentation is not _that_ much of an issue these days on modern Linux kernels. Glibc can sometimes hold on to `free()`'d memory for way too long and neglect giving it back to the kernel, but that should show up as a ""pseudo-leak"" where the process uses more and more memory despite not having any actual leaks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246032327
https://github.com/psi4/psi4/issues/2261#issuecomment-1246607163:29,Availability,error,error,29,"> I can try to reproduce the error on my systems, but I wonder if the behavior would change if you asked for less memory – say 4GB?. No change in behavior with 4GB, same crash.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246607163
https://github.com/psi4/psi4/issues/2261#issuecomment-1247399130:73,Energy Efficiency,allocate,allocate,73,"Suspicious thing: the crash happens when `dpd_block_matrix` is called to allocate a 2612*12544 (~250 MiB) matrix, and it tries to ""Delete cache entries until there's enough memory or no more cache"". But that should not happen to begin with, especially with 16 GB of memory!. This means that _somehow_ this condition `((dpd_main.memory - dpd_main.memused) < size)` is evaluating `true`, when it probably should not. I am not sure why `dpd_block_matrix` uses this expression to check the amount of free memory instead of calling `dpd_memfree`:; ```; extern long int dpd_memfree() {; return dpd_main.memory - (dpd_main.memused - dpd_main.memcache + dpd_main.memlocked);; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1247399130
https://github.com/psi4/psi4/issues/2261#issuecomment-1247399130:138,Performance,cache,cache,138,"Suspicious thing: the crash happens when `dpd_block_matrix` is called to allocate a 2612*12544 (~250 MiB) matrix, and it tries to ""Delete cache entries until there's enough memory or no more cache"". But that should not happen to begin with, especially with 16 GB of memory!. This means that _somehow_ this condition `((dpd_main.memory - dpd_main.memused) < size)` is evaluating `true`, when it probably should not. I am not sure why `dpd_block_matrix` uses this expression to check the amount of free memory instead of calling `dpd_memfree`:; ```; extern long int dpd_memfree() {; return dpd_main.memory - (dpd_main.memused - dpd_main.memcache + dpd_main.memlocked);; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1247399130
https://github.com/psi4/psi4/issues/2261#issuecomment-1247399130:191,Performance,cache,cache,191,"Suspicious thing: the crash happens when `dpd_block_matrix` is called to allocate a 2612*12544 (~250 MiB) matrix, and it tries to ""Delete cache entries until there's enough memory or no more cache"". But that should not happen to begin with, especially with 16 GB of memory!. This means that _somehow_ this condition `((dpd_main.memory - dpd_main.memused) < size)` is evaluating `true`, when it probably should not. I am not sure why `dpd_block_matrix` uses this expression to check the amount of free memory instead of calling `dpd_memfree`:; ```; extern long int dpd_memfree() {; return dpd_main.memory - (dpd_main.memused - dpd_main.memcache + dpd_main.memlocked);; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1247399130
https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331:751,Availability,error,error,751,"I have discovered that this crash actually happens when Psi4 is only given a small amount of memory.; The input from original report did not try to set the memory limit, while my input is not setting it correctly, so everything so far has been run with the default 500 MB. After a round of RTFM on my part, it looks like `set memory 16GB` is _not_ an acceptable way to, well, set the memory limit, and it is silently ignored by Psi4. If I correctly set the memory to 4GB or something big enough, this crash does not happen. There are still multiple bugs to be found _somewhere_:. 1. DPD/PSIO should realize that there is not enough memory and lower the cachelevel; 2. If the cachelevel is set too high compared to the amount of memory it should be an error exit with a meaningful error message, not an obscure PSIO error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331
https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331:780,Availability,error,error,780,"I have discovered that this crash actually happens when Psi4 is only given a small amount of memory.; The input from original report did not try to set the memory limit, while my input is not setting it correctly, so everything so far has been run with the default 500 MB. After a round of RTFM on my part, it looks like `set memory 16GB` is _not_ an acceptable way to, well, set the memory limit, and it is silently ignored by Psi4. If I correctly set the memory to 4GB or something big enough, this crash does not happen. There are still multiple bugs to be found _somewhere_:. 1. DPD/PSIO should realize that there is not enough memory and lower the cachelevel; 2. If the cachelevel is set too high compared to the amount of memory it should be an error exit with a meaningful error message, not an obscure PSIO error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331
https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331:815,Availability,error,error,815,"I have discovered that this crash actually happens when Psi4 is only given a small amount of memory.; The input from original report did not try to set the memory limit, while my input is not setting it correctly, so everything so far has been run with the default 500 MB. After a round of RTFM on my part, it looks like `set memory 16GB` is _not_ an acceptable way to, well, set the memory limit, and it is silently ignored by Psi4. If I correctly set the memory to 4GB or something big enough, this crash does not happen. There are still multiple bugs to be found _somewhere_:. 1. DPD/PSIO should realize that there is not enough memory and lower the cachelevel; 2. If the cachelevel is set too high compared to the amount of memory it should be an error exit with a meaningful error message, not an obscure PSIO error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331
https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331:786,Integrability,message,message,786,"I have discovered that this crash actually happens when Psi4 is only given a small amount of memory.; The input from original report did not try to set the memory limit, while my input is not setting it correctly, so everything so far has been run with the default 500 MB. After a round of RTFM on my part, it looks like `set memory 16GB` is _not_ an acceptable way to, well, set the memory limit, and it is silently ignored by Psi4. If I correctly set the memory to 4GB or something big enough, this crash does not happen. There are still multiple bugs to be found _somewhere_:. 1. DPD/PSIO should realize that there is not enough memory and lower the cachelevel; 2. If the cachelevel is set too high compared to the amount of memory it should be an error exit with a meaningful error message, not an obscure PSIO error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331
https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331:653,Performance,cache,cachelevel,653,"I have discovered that this crash actually happens when Psi4 is only given a small amount of memory.; The input from original report did not try to set the memory limit, while my input is not setting it correctly, so everything so far has been run with the default 500 MB. After a round of RTFM on my part, it looks like `set memory 16GB` is _not_ an acceptable way to, well, set the memory limit, and it is silently ignored by Psi4. If I correctly set the memory to 4GB or something big enough, this crash does not happen. There are still multiple bugs to be found _somewhere_:. 1. DPD/PSIO should realize that there is not enough memory and lower the cachelevel; 2. If the cachelevel is set too high compared to the amount of memory it should be an error exit with a meaningful error message, not an obscure PSIO error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331
https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331:675,Performance,cache,cachelevel,675,"I have discovered that this crash actually happens when Psi4 is only given a small amount of memory.; The input from original report did not try to set the memory limit, while my input is not setting it correctly, so everything so far has been run with the default 500 MB. After a round of RTFM on my part, it looks like `set memory 16GB` is _not_ an acceptable way to, well, set the memory limit, and it is silently ignored by Psi4. If I correctly set the memory to 4GB or something big enough, this crash does not happen. There are still multiple bugs to be found _somewhere_:. 1. DPD/PSIO should realize that there is not enough memory and lower the cachelevel; 2. If the cachelevel is set too high compared to the amount of memory it should be an error exit with a meaningful error message, not an obscure PSIO error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331
https://github.com/psi4/psi4/pull/2264#issuecomment-890677174:129,Testability,test,test,129,"Can you elaborate on ""tripped up""? While I'm willing to sacrifice to get 1.4 out, I'm not happy about losing any of the symmetry test coverage.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890677174
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:9018,Energy Efficiency,charge,charge,9018,"ltiout_16 |	 atoms 1 entry O line 107 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/; atoms 2 entry H line 12 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 2 entry H line 12 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/. ---------------------------------------------------------					 ---------------------------------------------------------; SCF									 SCF; by Justin Turney, Rob Parrish, Andy Simmonett						 by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith							 and Daniel G. A. Smith; UHF Reference								 UHF Reference; 1 Threads, 500 MiB Core							 1 Threads, 500 MiB Core; ---------------------------------------------------------					 ---------------------------------------------------------. ==> Geometry <==											 ==> Geometry <==. Molecular point group: c2v										 Molecular point group: c2v; Full point group: C_inf_v										 Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:						 Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass 		 Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------		 ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.057517917037 15.994914619570		 O 0.000000000000 0.000000000000 -0.057517917037 15.994914619570; H 0.000000000000 0.000000000000 0.912851082963 1.007825032230		 H 0.000000000000 0.000000000000 0.912851082963 1.007825032230. Running in c2v symmetry.										 Running in c2v symmetry. Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]			 Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]; Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]			 Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]; Nuclear repulsion = 4.362688508557055								 Nuclear repulsion = 4.362688508557055. Charge = 0			",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:9078,Energy Efficiency,charge,charge,9078,"ltiout_16 |	 atoms 1 entry O line 107 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/; atoms 2 entry H line 12 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 2 entry H line 12 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/. ---------------------------------------------------------					 ---------------------------------------------------------; SCF									 SCF; by Justin Turney, Rob Parrish, Andy Simmonett						 by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith							 and Daniel G. A. Smith; UHF Reference								 UHF Reference; 1 Threads, 500 MiB Core							 1 Threads, 500 MiB Core; ---------------------------------------------------------					 ---------------------------------------------------------. ==> Geometry <==											 ==> Geometry <==. Molecular point group: c2v										 Molecular point group: c2v; Full point group: C_inf_v										 Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:						 Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass 		 Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------		 ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.057517917037 15.994914619570		 O 0.000000000000 0.000000000000 -0.057517917037 15.994914619570; H 0.000000000000 0.000000000000 0.912851082963 1.007825032230		 H 0.000000000000 0.000000000000 0.912851082963 1.007825032230. Running in c2v symmetry.										 Running in c2v symmetry. Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]			 Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]; Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]			 Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]; Nuclear repulsion = 4.362688508557055								 Nuclear repulsion = 4.362688508557055. Charge = 0			",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:10038,Energy Efficiency,Charge,Charge,10038,Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------		 ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.057517917037 15.994914619570		 O 0.000000000000 0.000000000000 -0.057517917037 15.994914619570; H 0.000000000000 0.000000000000 0.912851082963 1.007825032230		 H 0.000000000000 0.000000000000 0.912851082963 1.007825032230. Running in c2v symmetry.										 Running in c2v symmetry. Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]			 Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]; Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]			 Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]; Nuclear repulsion = 4.362688508557055								 Nuclear repulsion = 4.362688508557055. Charge = 0											 Charge = 0; Multiplicity = 2											 Multiplicity = 2; Electrons = 9											 Electrons = 9; Nalpha = 5											 Nalpha = 5; Nbeta = 4											 Nbeta = 4. ==> Algorithm <==											 ==> Algorithm <==. SCF Algorithm Type is PK.										 SCF Algorithm Type is PK.; DIIS enabled.												 DIIS enabled.; MOM disabled.												 MOM disabled.; Fractional occupation disabled.									 Fractional occupation disabled.; Guess Type is SAD.											 Guess Type is SAD.; Energy threshold = 1.00e-06										 Energy threshold = 1.00e-06; Density threshold = 1.00e-06										 Density threshold = 1.00e-06; Integral threshold = 1.00e-12										 Integral threshold = 1.00e-12. ==> Primary Basis <==											 ==> Primary Basis <==. Basis Set: DZ												 Basis Set: DZ; Blend: DZ												 Blend: DZ; Number of shells: 8											 Number of shells: 8; Number of basis functions: 12									 Number of basis functions: 12; Number of Cartesian functions: 12									 Number of Cartesian functions: 12; Spherical Harmonics?: false										 Spherical Harm,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:10060,Energy Efficiency,Charge,Charge,10060,Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------		 ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.057517917037 15.994914619570		 O 0.000000000000 0.000000000000 -0.057517917037 15.994914619570; H 0.000000000000 0.000000000000 0.912851082963 1.007825032230		 H 0.000000000000 0.000000000000 0.912851082963 1.007825032230. Running in c2v symmetry.										 Running in c2v symmetry. Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]			 Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]; Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]			 Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]; Nuclear repulsion = 4.362688508557055								 Nuclear repulsion = 4.362688508557055. Charge = 0											 Charge = 0; Multiplicity = 2											 Multiplicity = 2; Electrons = 9											 Electrons = 9; Nalpha = 5											 Nalpha = 5; Nbeta = 4											 Nbeta = 4. ==> Algorithm <==											 ==> Algorithm <==. SCF Algorithm Type is PK.										 SCF Algorithm Type is PK.; DIIS enabled.												 DIIS enabled.; MOM disabled.												 MOM disabled.; Fractional occupation disabled.									 Fractional occupation disabled.; Guess Type is SAD.											 Guess Type is SAD.; Energy threshold = 1.00e-06										 Energy threshold = 1.00e-06; Density threshold = 1.00e-06										 Density threshold = 1.00e-06; Integral threshold = 1.00e-12										 Integral threshold = 1.00e-12. ==> Primary Basis <==											 ==> Primary Basis <==. Basis Set: DZ												 Basis Set: DZ; Blend: DZ												 Blend: DZ; Number of shells: 8											 Number of shells: 8; Number of basis functions: 12									 Number of basis functions: 12; Number of Cartesian functions: 12									 Number of Cartesian functions: 12; Spherical Harmonics?: false										 Spherical Harm,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:10541,Energy Efficiency,Energy,Energy,10541,0.912851082963 1.007825032230. Running in c2v symmetry.										 Running in c2v symmetry. Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]			 Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]; Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]			 Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]; Nuclear repulsion = 4.362688508557055								 Nuclear repulsion = 4.362688508557055. Charge = 0											 Charge = 0; Multiplicity = 2											 Multiplicity = 2; Electrons = 9											 Electrons = 9; Nalpha = 5											 Nalpha = 5; Nbeta = 4											 Nbeta = 4. ==> Algorithm <==											 ==> Algorithm <==. SCF Algorithm Type is PK.										 SCF Algorithm Type is PK.; DIIS enabled.												 DIIS enabled.; MOM disabled.												 MOM disabled.; Fractional occupation disabled.									 Fractional occupation disabled.; Guess Type is SAD.											 Guess Type is SAD.; Energy threshold = 1.00e-06										 Energy threshold = 1.00e-06; Density threshold = 1.00e-06										 Density threshold = 1.00e-06; Integral threshold = 1.00e-12										 Integral threshold = 1.00e-12. ==> Primary Basis <==											 ==> Primary Basis <==. Basis Set: DZ												 Basis Set: DZ; Blend: DZ												 Blend: DZ; Number of shells: 8											 Number of shells: 8; Number of basis functions: 12									 Number of basis functions: 12; Number of Cartesian functions: 12									 Number of Cartesian functions: 12; Spherical Harmonics?: false										 Spherical Harmonics?: false; Max angular momentum: 1										 Max angular momentum: 1. ==> Integral Setup <==										 ==> Integral Setup <==. Using in-core PK algorithm.										 Using in-core PK algorithm.; Calculation information:										 Calculation information:; Number of atoms: 2								 Number of atoms: 2; Number of AO shells: 8								 Number of AO shells: 8; Number of primitives: 18								 Number of primitives: 18; N,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:10579,Energy Efficiency,Energy,Energy,10579,Running in c2v symmetry.										 Running in c2v symmetry. Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]			 Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]; Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]			 Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]; Nuclear repulsion = 4.362688508557055								 Nuclear repulsion = 4.362688508557055. Charge = 0											 Charge = 0; Multiplicity = 2											 Multiplicity = 2; Electrons = 9											 Electrons = 9; Nalpha = 5											 Nalpha = 5; Nbeta = 4											 Nbeta = 4. ==> Algorithm <==											 ==> Algorithm <==. SCF Algorithm Type is PK.										 SCF Algorithm Type is PK.; DIIS enabled.												 DIIS enabled.; MOM disabled.												 MOM disabled.; Fractional occupation disabled.									 Fractional occupation disabled.; Guess Type is SAD.											 Guess Type is SAD.; Energy threshold = 1.00e-06										 Energy threshold = 1.00e-06; Density threshold = 1.00e-06										 Density threshold = 1.00e-06; Integral threshold = 1.00e-12										 Integral threshold = 1.00e-12. ==> Primary Basis <==											 ==> Primary Basis <==. Basis Set: DZ												 Basis Set: DZ; Blend: DZ												 Blend: DZ; Number of shells: 8											 Number of shells: 8; Number of basis functions: 12									 Number of basis functions: 12; Number of Cartesian functions: 12									 Number of Cartesian functions: 12; Spherical Harmonics?: false										 Spherical Harmonics?: false; Max angular momentum: 1										 Max angular momentum: 1. ==> Integral Setup <==										 ==> Integral Setup <==. Using in-core PK algorithm.										 Using in-core PK algorithm.; Calculation information:										 Calculation information:; Number of atoms: 2								 Number of atoms: 2; Number of AO shells: 8								 Number of AO shells: 8; Number of primitives: 18								 Number of primitives: 18; Number of atomic orbitals: 12		,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:13576,Energy Efficiency,Energy,Energy,13576,"2.; Reciprocal condition number of the overlap matrix is 2.1736231954E-02.				 Reciprocal condition number of the overlap matrix is 2.1736231954E-02.; Using symmetric orthogonalization.									 Using symmetric orthogonalization. ==> Pre-Iterations <==										 ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation informat	 SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation informat. -------------------------										 -------------------------; Irrep Nso Nmo 										 Irrep Nso Nmo ; -------------------------										 -------------------------; A1 8 8 										 A1 8 8 ; A2 0 0 										 A2 0 0 ; B1 2 2 										 B1 2 2 ; B2 2 2 										 B2 2 2 ; -------------------------										 -------------------------; Total 12 12										 Total 12 12; -------------------------										 -------------------------. ==> Iterations <==											 ==> Iterations <==. Total Energy Delta E RMS |[F,P]|					 Total Energy Delta E RMS |[F,P]|. @UHF iter SAD: -74.69099268118431 -7.46910e+01 0.00000e+00 				 |	 @UHF iter SAD: -74.69099268118434 -7.46910e+01 0.00000e+00 ; @UHF iter 1: -75.36638207835102 -6.75389e-01 2.07053e-02 DIIS			 |	 @UHF iter 1: -75.36638207835099 -6.75389e-01 2.07053e-02 DIIS; @UHF iter 2: -75.38394424152470 -1.75622e-02 7.43115e-03 DIIS			 |	 @UHF iter 2: -75.38394424152474 -1.75622e-02 7.43115e-03 DIIS; @UHF iter 3: -75.38582621410333 -1.88197e-03 2.33008e-03 DIIS			 |	 @UHF iter 3: -75.38582621410339 -1.88197e-03 2.33008e-03 DIIS; @UHF iter 4: -75.38619478049240 -3.68566e-04 9.29768e-04 DIIS			 |	 @UHF iter 4: -75.38619478049243 -3.68566e-04 9.29768e-04 DIIS; @UHF iter 5: -75.38629447046014 -9.96900e-05 3.08853e-04 DIIS			 |	 @UHF iter 5: -75.38629447046023 -9.96900e-05 3.08853e-04 DIIS; @UHF iter 6: -75.38630883426671 -1.43638e-05 1.16185e-04 DIIS			 |	 @UHF iter 6: -75.38630883426674 -1.43638e-05 1.16185e-04 DIIS; @UHF iter 7: -75.38631113759388 -2.30333e-06 2.55",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:13614,Energy Efficiency,Energy,Energy,13614,"2.; Reciprocal condition number of the overlap matrix is 2.1736231954E-02.				 Reciprocal condition number of the overlap matrix is 2.1736231954E-02.; Using symmetric orthogonalization.									 Using symmetric orthogonalization. ==> Pre-Iterations <==										 ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation informat	 SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation informat. -------------------------										 -------------------------; Irrep Nso Nmo 										 Irrep Nso Nmo ; -------------------------										 -------------------------; A1 8 8 										 A1 8 8 ; A2 0 0 										 A2 0 0 ; B1 2 2 										 B1 2 2 ; B2 2 2 										 B2 2 2 ; -------------------------										 -------------------------; Total 12 12										 Total 12 12; -------------------------										 -------------------------. ==> Iterations <==											 ==> Iterations <==. Total Energy Delta E RMS |[F,P]|					 Total Energy Delta E RMS |[F,P]|. @UHF iter SAD: -74.69099268118431 -7.46910e+01 0.00000e+00 				 |	 @UHF iter SAD: -74.69099268118434 -7.46910e+01 0.00000e+00 ; @UHF iter 1: -75.36638207835102 -6.75389e-01 2.07053e-02 DIIS			 |	 @UHF iter 1: -75.36638207835099 -6.75389e-01 2.07053e-02 DIIS; @UHF iter 2: -75.38394424152470 -1.75622e-02 7.43115e-03 DIIS			 |	 @UHF iter 2: -75.38394424152474 -1.75622e-02 7.43115e-03 DIIS; @UHF iter 3: -75.38582621410333 -1.88197e-03 2.33008e-03 DIIS			 |	 @UHF iter 3: -75.38582621410339 -1.88197e-03 2.33008e-03 DIIS; @UHF iter 4: -75.38619478049240 -3.68566e-04 9.29768e-04 DIIS			 |	 @UHF iter 4: -75.38619478049243 -3.68566e-04 9.29768e-04 DIIS; @UHF iter 5: -75.38629447046014 -9.96900e-05 3.08853e-04 DIIS			 |	 @UHF iter 5: -75.38629447046023 -9.96900e-05 3.08853e-04 DIIS; @UHF iter 6: -75.38630883426671 -1.43638e-05 1.16185e-04 DIIS			 |	 @UHF iter 6: -75.38630883426674 -1.43638e-05 1.16185e-04 DIIS; @UHF iter 7: -75.38631113759388 -2.30333e-06 2.55",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:14949,Energy Efficiency,Energy,Energy,14949,DIIS			 |	 @UHF iter 2: -75.38394424152474 -1.75622e-02 7.43115e-03 DIIS; @UHF iter 3: -75.38582621410333 -1.88197e-03 2.33008e-03 DIIS			 |	 @UHF iter 3: -75.38582621410339 -1.88197e-03 2.33008e-03 DIIS; @UHF iter 4: -75.38619478049240 -3.68566e-04 9.29768e-04 DIIS			 |	 @UHF iter 4: -75.38619478049243 -3.68566e-04 9.29768e-04 DIIS; @UHF iter 5: -75.38629447046014 -9.96900e-05 3.08853e-04 DIIS			 |	 @UHF iter 5: -75.38629447046023 -9.96900e-05 3.08853e-04 DIIS; @UHF iter 6: -75.38630883426671 -1.43638e-05 1.16185e-04 DIIS			 |	 @UHF iter 6: -75.38630883426674 -1.43638e-05 1.16185e-04 DIIS; @UHF iter 7: -75.38631113759388 -2.30333e-06 2.55403e-05 DIIS			 |	 @UHF iter 7: -75.38631113759392 -2.30333e-06 2.55403e-05 DIIS; @UHF iter 8: -75.38631121690256 -7.93087e-08 5.57003e-06 DIIS			 |	 @UHF iter 8: -75.38631121690257 -7.93086e-08 5.57003e-06 DIIS; @UHF iter 9: -75.38631122050272 -3.60016e-09 6.77022e-07 DIIS			 |	 @UHF iter 9: -75.38631122050275 -3.60018e-09 6.77022e-07 DIIS; Energy and wave function converged.									 Energy and wave function converged. ==> Post-Iterations <==										 ==> Post-Iterations <==. @Spin Contamination Metric: 4.301100511E-03							 @Spin Contamination Metric: 4.301100511E-03; @S^2 Expected: 7.500000000E-01							 @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.543011005E-01							 @S^2 Observed: 7.543011005E-01; @S Expected: 5.000000000E-01							 @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01							 @S Observed: 5.000000000E-01. Orbital Energies [Eh]										 Orbital Energies [Eh]; ---------------------										 ---------------------. Alpha Occupied: 				 Alpha Occupied: . 1A1 -20.635786 2A1 -1.392584 3A1 -0.673509 					 1A1 -20.635786 2A1 -1.392584 3A1 -0.673509 ; 1B2 -0.647734 1B1 -0.561066 							 |	 1B1 -0.647734 1B2 -0.561066 . Alpha Virtual: 				 Alpha Virtual: . 4A1 0.223681 2B2 0.784656 2B1 0.835171 				 |	 4A1 0.223681 2B1 0.784656 2B2 0.835171 ; 5A1 0.887882 6A1 1.122186 7A1 1.471866 					 5A1 0.887882 6A1 1.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:14994,Energy Efficiency,Energy,Energy,14994,622e-02 7.43115e-03 DIIS; @UHF iter 3: -75.38582621410333 -1.88197e-03 2.33008e-03 DIIS			 |	 @UHF iter 3: -75.38582621410339 -1.88197e-03 2.33008e-03 DIIS; @UHF iter 4: -75.38619478049240 -3.68566e-04 9.29768e-04 DIIS			 |	 @UHF iter 4: -75.38619478049243 -3.68566e-04 9.29768e-04 DIIS; @UHF iter 5: -75.38629447046014 -9.96900e-05 3.08853e-04 DIIS			 |	 @UHF iter 5: -75.38629447046023 -9.96900e-05 3.08853e-04 DIIS; @UHF iter 6: -75.38630883426671 -1.43638e-05 1.16185e-04 DIIS			 |	 @UHF iter 6: -75.38630883426674 -1.43638e-05 1.16185e-04 DIIS; @UHF iter 7: -75.38631113759388 -2.30333e-06 2.55403e-05 DIIS			 |	 @UHF iter 7: -75.38631113759392 -2.30333e-06 2.55403e-05 DIIS; @UHF iter 8: -75.38631121690256 -7.93087e-08 5.57003e-06 DIIS			 |	 @UHF iter 8: -75.38631121690257 -7.93086e-08 5.57003e-06 DIIS; @UHF iter 9: -75.38631122050272 -3.60016e-09 6.77022e-07 DIIS			 |	 @UHF iter 9: -75.38631122050275 -3.60018e-09 6.77022e-07 DIIS; Energy and wave function converged.									 Energy and wave function converged. ==> Post-Iterations <==										 ==> Post-Iterations <==. @Spin Contamination Metric: 4.301100511E-03							 @Spin Contamination Metric: 4.301100511E-03; @S^2 Expected: 7.500000000E-01							 @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.543011005E-01							 @S^2 Observed: 7.543011005E-01; @S Expected: 5.000000000E-01							 @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01							 @S Observed: 5.000000000E-01. Orbital Energies [Eh]										 Orbital Energies [Eh]; ---------------------										 ---------------------. Alpha Occupied: 				 Alpha Occupied: . 1A1 -20.635786 2A1 -1.392584 3A1 -0.673509 					 1A1 -20.635786 2A1 -1.392584 3A1 -0.673509 ; 1B2 -0.647734 1B1 -0.561066 							 |	 1B1 -0.647734 1B2 -0.561066 . Alpha Virtual: 				 Alpha Virtual: . 4A1 0.223681 2B2 0.784656 2B1 0.835171 				 |	 4A1 0.223681 2B1 0.784656 2B2 0.835171 ; 5A1 0.887882 6A1 1.122186 7A1 1.471866 					 5A1 0.887882 6A1 1.122186 7A1 1.471866 ; 8A1 43.203538 										 8A,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:16687,Energy Efficiency,Energy,Energy,16687," -0.673509 ; 1B2 -0.647734 1B1 -0.561066 							 |	 1B1 -0.647734 1B2 -0.561066 . Alpha Virtual: 				 Alpha Virtual: . 4A1 0.223681 2B2 0.784656 2B1 0.835171 				 |	 4A1 0.223681 2B1 0.784656 2B2 0.835171 ; 5A1 0.887882 6A1 1.122186 7A1 1.471866 					 5A1 0.887882 6A1 1.122186 7A1 1.471866 ; 8A1 43.203538 										 8A1 43.203538 . Beta Occupied: 				 Beta Occupied: . 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 					 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 ; 1B1 -0.505839 									 |	 1B2 -0.505839 . Beta Virtual: 				 Beta Virtual: . 1B2 0.107995 4A1 0.237507 2B1 0.858087 				 |	 1B1 0.107995 4A1 0.237507 2B2 0.858087 ; 5A1 0.910618 2B2 0.972383 6A1 1.128016 				 |	 5A1 0.910618 2B1 0.972383 6A1 1.128016 ; 7A1 1.521957 8A1 43.228970 								 7A1 1.521957 8A1 43.228970 . Final Occupation by Irrep:										 Final Occupation by Irrep:; A1 A2 B1 B2 									 A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 0 ]								 |	 DOCC [ 3, 0, 0, 1 ]; SOCC [ 0, 0, 0, 1 ]								 |	 SOCC [ 0, 0, 1, 0 ]. @UHF Final Energy: -75.38631122050272							 |	 @UHF Final Energy: -75.38631122050275. => Energetics <=											 => Energetics <=. Nuclear Repulsion Energy = 4.3626885085570546						 Nuclear Repulsion Energy = 4.3626885085570546; One-Electron Energy = -112.6306119634574259					 |	 One-Electron Energy = -112.6306119634574543; Two-Electron Energy = 32.8816122343976502					 |	 Two-Electron Energy = 32.8816122343976573; Total Energy = -75.3863112205027193					 |	 Total Energy = -75.3863112205027335. UHF NO Occupations:											 UHF NO Occupations:; HONO-2 : 1 B1 1.9996187									 |	 HONO-2 : 1 B2 1.9996187; HONO-1 : 3 A1 1.9985538										 HONO-1 : 3 A1 1.9985538; HONO-0 : 1 B2 1.0000000									 |	 HONO-0 : 1 B1 1.0000000; LUNO+0 : 4 A1 0.0014462										 LUNO+0 : 4 A1 0.0014462; LUNO+1 : 2 B1 0.0003813									 |	 LUNO+1 : 2 B2 0.0003813; LUNO+2 : 5 A1 0.0003240										 LUNO+2 : 5 A1 0.0003240; LUNO+3 : 6 A1 0.0000002										 LUNO+3 : 6 A1 0.0000002. Computation Completed											Compu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:16735,Energy Efficiency,Energy,Energy,16735,"1066 							 |	 1B1 -0.647734 1B2 -0.561066 . Alpha Virtual: 				 Alpha Virtual: . 4A1 0.223681 2B2 0.784656 2B1 0.835171 				 |	 4A1 0.223681 2B1 0.784656 2B2 0.835171 ; 5A1 0.887882 6A1 1.122186 7A1 1.471866 					 5A1 0.887882 6A1 1.122186 7A1 1.471866 ; 8A1 43.203538 										 8A1 43.203538 . Beta Occupied: 				 Beta Occupied: . 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 					 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 ; 1B1 -0.505839 									 |	 1B2 -0.505839 . Beta Virtual: 				 Beta Virtual: . 1B2 0.107995 4A1 0.237507 2B1 0.858087 				 |	 1B1 0.107995 4A1 0.237507 2B2 0.858087 ; 5A1 0.910618 2B2 0.972383 6A1 1.128016 				 |	 5A1 0.910618 2B1 0.972383 6A1 1.128016 ; 7A1 1.521957 8A1 43.228970 								 7A1 1.521957 8A1 43.228970 . Final Occupation by Irrep:										 Final Occupation by Irrep:; A1 A2 B1 B2 									 A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 0 ]								 |	 DOCC [ 3, 0, 0, 1 ]; SOCC [ 0, 0, 0, 1 ]								 |	 SOCC [ 0, 0, 1, 0 ]. @UHF Final Energy: -75.38631122050272							 |	 @UHF Final Energy: -75.38631122050275. => Energetics <=											 => Energetics <=. Nuclear Repulsion Energy = 4.3626885085570546						 Nuclear Repulsion Energy = 4.3626885085570546; One-Electron Energy = -112.6306119634574259					 |	 One-Electron Energy = -112.6306119634574543; Two-Electron Energy = 32.8816122343976502					 |	 Two-Electron Energy = 32.8816122343976573; Total Energy = -75.3863112205027193					 |	 Total Energy = -75.3863112205027335. UHF NO Occupations:											 UHF NO Occupations:; HONO-2 : 1 B1 1.9996187									 |	 HONO-2 : 1 B2 1.9996187; HONO-1 : 3 A1 1.9985538										 HONO-1 : 3 A1 1.9985538; HONO-0 : 1 B2 1.0000000									 |	 HONO-0 : 1 B1 1.0000000; LUNO+0 : 4 A1 0.0014462										 LUNO+0 : 4 A1 0.0014462; LUNO+1 : 2 B1 0.0003813									 |	 LUNO+1 : 2 B2 0.0003813; LUNO+2 : 5 A1 0.0003240										 LUNO+2 : 5 A1 0.0003240; LUNO+3 : 6 A1 0.0000002										 LUNO+3 : 6 A1 0.0000002. Computation Completed											Computation Completed. Properties will be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:16827,Energy Efficiency,Energy,Energy,16827,"0.784656 2B1 0.835171 				 |	 4A1 0.223681 2B1 0.784656 2B2 0.835171 ; 5A1 0.887882 6A1 1.122186 7A1 1.471866 					 5A1 0.887882 6A1 1.122186 7A1 1.471866 ; 8A1 43.203538 										 8A1 43.203538 . Beta Occupied: 				 Beta Occupied: . 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 					 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 ; 1B1 -0.505839 									 |	 1B2 -0.505839 . Beta Virtual: 				 Beta Virtual: . 1B2 0.107995 4A1 0.237507 2B1 0.858087 				 |	 1B1 0.107995 4A1 0.237507 2B2 0.858087 ; 5A1 0.910618 2B2 0.972383 6A1 1.128016 				 |	 5A1 0.910618 2B1 0.972383 6A1 1.128016 ; 7A1 1.521957 8A1 43.228970 								 7A1 1.521957 8A1 43.228970 . Final Occupation by Irrep:										 Final Occupation by Irrep:; A1 A2 B1 B2 									 A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 0 ]								 |	 DOCC [ 3, 0, 0, 1 ]; SOCC [ 0, 0, 0, 1 ]								 |	 SOCC [ 0, 0, 1, 0 ]. @UHF Final Energy: -75.38631122050272							 |	 @UHF Final Energy: -75.38631122050275. => Energetics <=											 => Energetics <=. Nuclear Repulsion Energy = 4.3626885085570546						 Nuclear Repulsion Energy = 4.3626885085570546; One-Electron Energy = -112.6306119634574259					 |	 One-Electron Energy = -112.6306119634574543; Two-Electron Energy = 32.8816122343976502					 |	 Two-Electron Energy = 32.8816122343976573; Total Energy = -75.3863112205027193					 |	 Total Energy = -75.3863112205027335. UHF NO Occupations:											 UHF NO Occupations:; HONO-2 : 1 B1 1.9996187									 |	 HONO-2 : 1 B2 1.9996187; HONO-1 : 3 A1 1.9985538										 HONO-1 : 3 A1 1.9985538; HONO-0 : 1 B2 1.0000000									 |	 HONO-0 : 1 B1 1.0000000; LUNO+0 : 4 A1 0.0014462										 LUNO+0 : 4 A1 0.0014462; LUNO+1 : 2 B1 0.0003813									 |	 LUNO+1 : 2 B2 0.0003813; LUNO+2 : 5 A1 0.0003240										 LUNO+2 : 5 A1 0.0003240; LUNO+3 : 6 A1 0.0000002										 LUNO+3 : 6 A1 0.0000002. Computation Completed											Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]					Properties will be evaluated at 0.000000, 0.0000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:16879,Energy Efficiency,Energy,Energy,16879,"1 2B1 0.784656 2B2 0.835171 ; 5A1 0.887882 6A1 1.122186 7A1 1.471866 					 5A1 0.887882 6A1 1.122186 7A1 1.471866 ; 8A1 43.203538 										 8A1 43.203538 . Beta Occupied: 				 Beta Occupied: . 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 					 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 ; 1B1 -0.505839 									 |	 1B2 -0.505839 . Beta Virtual: 				 Beta Virtual: . 1B2 0.107995 4A1 0.237507 2B1 0.858087 				 |	 1B1 0.107995 4A1 0.237507 2B2 0.858087 ; 5A1 0.910618 2B2 0.972383 6A1 1.128016 				 |	 5A1 0.910618 2B1 0.972383 6A1 1.128016 ; 7A1 1.521957 8A1 43.228970 								 7A1 1.521957 8A1 43.228970 . Final Occupation by Irrep:										 Final Occupation by Irrep:; A1 A2 B1 B2 									 A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 0 ]								 |	 DOCC [ 3, 0, 0, 1 ]; SOCC [ 0, 0, 0, 1 ]								 |	 SOCC [ 0, 0, 1, 0 ]. @UHF Final Energy: -75.38631122050272							 |	 @UHF Final Energy: -75.38631122050275. => Energetics <=											 => Energetics <=. Nuclear Repulsion Energy = 4.3626885085570546						 Nuclear Repulsion Energy = 4.3626885085570546; One-Electron Energy = -112.6306119634574259					 |	 One-Electron Energy = -112.6306119634574543; Two-Electron Energy = 32.8816122343976502					 |	 Two-Electron Energy = 32.8816122343976573; Total Energy = -75.3863112205027193					 |	 Total Energy = -75.3863112205027335. UHF NO Occupations:											 UHF NO Occupations:; HONO-2 : 1 B1 1.9996187									 |	 HONO-2 : 1 B2 1.9996187; HONO-1 : 3 A1 1.9985538										 HONO-1 : 3 A1 1.9985538; HONO-0 : 1 B2 1.0000000									 |	 HONO-0 : 1 B1 1.0000000; LUNO+0 : 4 A1 0.0014462										 LUNO+0 : 4 A1 0.0014462; LUNO+1 : 2 B1 0.0003813									 |	 LUNO+1 : 2 B2 0.0003813; LUNO+2 : 5 A1 0.0003240										 LUNO+2 : 5 A1 0.0003240; LUNO+3 : 6 A1 0.0000002										 LUNO+3 : 6 A1 0.0000002. Computation Completed											Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]					Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed us",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:16921,Energy Efficiency,Energy,Energy,16921,".122186 7A1 1.471866 					 5A1 0.887882 6A1 1.122186 7A1 1.471866 ; 8A1 43.203538 										 8A1 43.203538 . Beta Occupied: 				 Beta Occupied: . 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 					 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 ; 1B1 -0.505839 									 |	 1B2 -0.505839 . Beta Virtual: 				 Beta Virtual: . 1B2 0.107995 4A1 0.237507 2B1 0.858087 				 |	 1B1 0.107995 4A1 0.237507 2B2 0.858087 ; 5A1 0.910618 2B2 0.972383 6A1 1.128016 				 |	 5A1 0.910618 2B1 0.972383 6A1 1.128016 ; 7A1 1.521957 8A1 43.228970 								 7A1 1.521957 8A1 43.228970 . Final Occupation by Irrep:										 Final Occupation by Irrep:; A1 A2 B1 B2 									 A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 0 ]								 |	 DOCC [ 3, 0, 0, 1 ]; SOCC [ 0, 0, 0, 1 ]								 |	 SOCC [ 0, 0, 1, 0 ]. @UHF Final Energy: -75.38631122050272							 |	 @UHF Final Energy: -75.38631122050275. => Energetics <=											 => Energetics <=. Nuclear Repulsion Energy = 4.3626885085570546						 Nuclear Repulsion Energy = 4.3626885085570546; One-Electron Energy = -112.6306119634574259					 |	 One-Electron Energy = -112.6306119634574543; Two-Electron Energy = 32.8816122343976502					 |	 Two-Electron Energy = 32.8816122343976573; Total Energy = -75.3863112205027193					 |	 Total Energy = -75.3863112205027335. UHF NO Occupations:											 UHF NO Occupations:; HONO-2 : 1 B1 1.9996187									 |	 HONO-2 : 1 B2 1.9996187; HONO-1 : 3 A1 1.9985538										 HONO-1 : 3 A1 1.9985538; HONO-0 : 1 B2 1.0000000									 |	 HONO-0 : 1 B1 1.0000000; LUNO+0 : 4 A1 0.0014462										 LUNO+0 : 4 A1 0.0014462; LUNO+1 : 2 B1 0.0003813									 |	 LUNO+1 : 2 B2 0.0003813; LUNO+2 : 5 A1 0.0003240										 LUNO+2 : 5 A1 0.0003240; LUNO+3 : 6 A1 0.0000002										 LUNO+3 : 6 A1 0.0000002. Computation Completed											Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]					Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix							Properties compu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:16973,Energy Efficiency,Energy,Energy,16973,"186 7A1 1.471866 ; 8A1 43.203538 										 8A1 43.203538 . Beta Occupied: 				 Beta Occupied: . 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 					 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 ; 1B1 -0.505839 									 |	 1B2 -0.505839 . Beta Virtual: 				 Beta Virtual: . 1B2 0.107995 4A1 0.237507 2B1 0.858087 				 |	 1B1 0.107995 4A1 0.237507 2B2 0.858087 ; 5A1 0.910618 2B2 0.972383 6A1 1.128016 				 |	 5A1 0.910618 2B1 0.972383 6A1 1.128016 ; 7A1 1.521957 8A1 43.228970 								 7A1 1.521957 8A1 43.228970 . Final Occupation by Irrep:										 Final Occupation by Irrep:; A1 A2 B1 B2 									 A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 0 ]								 |	 DOCC [ 3, 0, 0, 1 ]; SOCC [ 0, 0, 0, 1 ]								 |	 SOCC [ 0, 0, 1, 0 ]. @UHF Final Energy: -75.38631122050272							 |	 @UHF Final Energy: -75.38631122050275. => Energetics <=											 => Energetics <=. Nuclear Repulsion Energy = 4.3626885085570546						 Nuclear Repulsion Energy = 4.3626885085570546; One-Electron Energy = -112.6306119634574259					 |	 One-Electron Energy = -112.6306119634574543; Two-Electron Energy = 32.8816122343976502					 |	 Two-Electron Energy = 32.8816122343976573; Total Energy = -75.3863112205027193					 |	 Total Energy = -75.3863112205027335. UHF NO Occupations:											 UHF NO Occupations:; HONO-2 : 1 B1 1.9996187									 |	 HONO-2 : 1 B2 1.9996187; HONO-1 : 3 A1 1.9985538										 HONO-1 : 3 A1 1.9985538; HONO-0 : 1 B2 1.0000000									 |	 HONO-0 : 1 B1 1.0000000; LUNO+0 : 4 A1 0.0014462										 LUNO+0 : 4 A1 0.0014462; LUNO+1 : 2 B1 0.0003813									 |	 LUNO+1 : 2 B2 0.0003813; LUNO+2 : 5 A1 0.0003240										 LUNO+2 : 5 A1 0.0003240; LUNO+3 : 6 A1 0.0000002										 LUNO+3 : 6 A1 0.0000002. Computation Completed											Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]					Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix							Properties computed using the SCF density matrix. Nuclear Dipole",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:17018,Energy Efficiency,Energy,Energy,17018," 43.203538 . Beta Occupied: 				 Beta Occupied: . 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 					 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 ; 1B1 -0.505839 									 |	 1B2 -0.505839 . Beta Virtual: 				 Beta Virtual: . 1B2 0.107995 4A1 0.237507 2B1 0.858087 				 |	 1B1 0.107995 4A1 0.237507 2B2 0.858087 ; 5A1 0.910618 2B2 0.972383 6A1 1.128016 				 |	 5A1 0.910618 2B1 0.972383 6A1 1.128016 ; 7A1 1.521957 8A1 43.228970 								 7A1 1.521957 8A1 43.228970 . Final Occupation by Irrep:										 Final Occupation by Irrep:; A1 A2 B1 B2 									 A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 0 ]								 |	 DOCC [ 3, 0, 0, 1 ]; SOCC [ 0, 0, 0, 1 ]								 |	 SOCC [ 0, 0, 1, 0 ]. @UHF Final Energy: -75.38631122050272							 |	 @UHF Final Energy: -75.38631122050275. => Energetics <=											 => Energetics <=. Nuclear Repulsion Energy = 4.3626885085570546						 Nuclear Repulsion Energy = 4.3626885085570546; One-Electron Energy = -112.6306119634574259					 |	 One-Electron Energy = -112.6306119634574543; Two-Electron Energy = 32.8816122343976502					 |	 Two-Electron Energy = 32.8816122343976573; Total Energy = -75.3863112205027193					 |	 Total Energy = -75.3863112205027335. UHF NO Occupations:											 UHF NO Occupations:; HONO-2 : 1 B1 1.9996187									 |	 HONO-2 : 1 B2 1.9996187; HONO-1 : 3 A1 1.9985538										 HONO-1 : 3 A1 1.9985538; HONO-0 : 1 B2 1.0000000									 |	 HONO-0 : 1 B1 1.0000000; LUNO+0 : 4 A1 0.0014462										 LUNO+0 : 4 A1 0.0014462; LUNO+1 : 2 B1 0.0003813									 |	 LUNO+1 : 2 B2 0.0003813; LUNO+2 : 5 A1 0.0003240										 LUNO+2 : 5 A1 0.0003240; LUNO+3 : 6 A1 0.0000002										 LUNO+3 : 6 A1 0.0000002. Computation Completed											Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]					Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix							Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]										 Nuclear Dipole Moment:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:17068,Energy Efficiency,Energy,Energy,17068," . 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 					 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 ; 1B1 -0.505839 									 |	 1B2 -0.505839 . Beta Virtual: 				 Beta Virtual: . 1B2 0.107995 4A1 0.237507 2B1 0.858087 				 |	 1B1 0.107995 4A1 0.237507 2B2 0.858087 ; 5A1 0.910618 2B2 0.972383 6A1 1.128016 				 |	 5A1 0.910618 2B1 0.972383 6A1 1.128016 ; 7A1 1.521957 8A1 43.228970 								 7A1 1.521957 8A1 43.228970 . Final Occupation by Irrep:										 Final Occupation by Irrep:; A1 A2 B1 B2 									 A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 0 ]								 |	 DOCC [ 3, 0, 0, 1 ]; SOCC [ 0, 0, 0, 1 ]								 |	 SOCC [ 0, 0, 1, 0 ]. @UHF Final Energy: -75.38631122050272							 |	 @UHF Final Energy: -75.38631122050275. => Energetics <=											 => Energetics <=. Nuclear Repulsion Energy = 4.3626885085570546						 Nuclear Repulsion Energy = 4.3626885085570546; One-Electron Energy = -112.6306119634574259					 |	 One-Electron Energy = -112.6306119634574543; Two-Electron Energy = 32.8816122343976502					 |	 Two-Electron Energy = 32.8816122343976573; Total Energy = -75.3863112205027193					 |	 Total Energy = -75.3863112205027335. UHF NO Occupations:											 UHF NO Occupations:; HONO-2 : 1 B1 1.9996187									 |	 HONO-2 : 1 B2 1.9996187; HONO-1 : 3 A1 1.9985538										 HONO-1 : 3 A1 1.9985538; HONO-0 : 1 B2 1.0000000									 |	 HONO-0 : 1 B1 1.0000000; LUNO+0 : 4 A1 0.0014462										 LUNO+0 : 4 A1 0.0014462; LUNO+1 : 2 B1 0.0003813									 |	 LUNO+1 : 2 B2 0.0003813; LUNO+2 : 5 A1 0.0003240										 LUNO+2 : 5 A1 0.0003240; LUNO+3 : 6 A1 0.0000002										 LUNO+3 : 6 A1 0.0000002. Computation Completed											Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]					Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix							Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]										 Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.8555						 X",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:17104,Energy Efficiency,Energy,Energy,17104,"10 					 1A1 -20.594556 2A1 -1.235213 3A1 -0.621110 ; 1B1 -0.505839 									 |	 1B2 -0.505839 . Beta Virtual: 				 Beta Virtual: . 1B2 0.107995 4A1 0.237507 2B1 0.858087 				 |	 1B1 0.107995 4A1 0.237507 2B2 0.858087 ; 5A1 0.910618 2B2 0.972383 6A1 1.128016 				 |	 5A1 0.910618 2B1 0.972383 6A1 1.128016 ; 7A1 1.521957 8A1 43.228970 								 7A1 1.521957 8A1 43.228970 . Final Occupation by Irrep:										 Final Occupation by Irrep:; A1 A2 B1 B2 									 A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 0 ]								 |	 DOCC [ 3, 0, 0, 1 ]; SOCC [ 0, 0, 0, 1 ]								 |	 SOCC [ 0, 0, 1, 0 ]. @UHF Final Energy: -75.38631122050272							 |	 @UHF Final Energy: -75.38631122050275. => Energetics <=											 => Energetics <=. Nuclear Repulsion Energy = 4.3626885085570546						 Nuclear Repulsion Energy = 4.3626885085570546; One-Electron Energy = -112.6306119634574259					 |	 One-Electron Energy = -112.6306119634574543; Two-Electron Energy = 32.8816122343976502					 |	 Two-Electron Energy = 32.8816122343976573; Total Energy = -75.3863112205027193					 |	 Total Energy = -75.3863112205027335. UHF NO Occupations:											 UHF NO Occupations:; HONO-2 : 1 B1 1.9996187									 |	 HONO-2 : 1 B2 1.9996187; HONO-1 : 3 A1 1.9985538										 HONO-1 : 3 A1 1.9985538; HONO-0 : 1 B2 1.0000000									 |	 HONO-0 : 1 B1 1.0000000; LUNO+0 : 4 A1 0.0014462										 LUNO+0 : 4 A1 0.0014462; LUNO+1 : 2 B1 0.0003813									 |	 LUNO+1 : 2 B2 0.0003813; LUNO+2 : 5 A1 0.0003240										 LUNO+2 : 5 A1 0.0003240; LUNO+3 : 6 A1 0.0000002										 LUNO+3 : 6 A1 0.0000002. Computation Completed											Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]					Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix							Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]										 Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.8555						 X: 0.0000 Y: 0.0000 Z: 0.8555. Electronic Dip",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:17148,Energy Efficiency,Energy,Energy,17148," -0.621110 ; 1B1 -0.505839 									 |	 1B2 -0.505839 . Beta Virtual: 				 Beta Virtual: . 1B2 0.107995 4A1 0.237507 2B1 0.858087 				 |	 1B1 0.107995 4A1 0.237507 2B2 0.858087 ; 5A1 0.910618 2B2 0.972383 6A1 1.128016 				 |	 5A1 0.910618 2B1 0.972383 6A1 1.128016 ; 7A1 1.521957 8A1 43.228970 								 7A1 1.521957 8A1 43.228970 . Final Occupation by Irrep:										 Final Occupation by Irrep:; A1 A2 B1 B2 									 A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 0 ]								 |	 DOCC [ 3, 0, 0, 1 ]; SOCC [ 0, 0, 0, 1 ]								 |	 SOCC [ 0, 0, 1, 0 ]. @UHF Final Energy: -75.38631122050272							 |	 @UHF Final Energy: -75.38631122050275. => Energetics <=											 => Energetics <=. Nuclear Repulsion Energy = 4.3626885085570546						 Nuclear Repulsion Energy = 4.3626885085570546; One-Electron Energy = -112.6306119634574259					 |	 One-Electron Energy = -112.6306119634574543; Two-Electron Energy = 32.8816122343976502					 |	 Two-Electron Energy = 32.8816122343976573; Total Energy = -75.3863112205027193					 |	 Total Energy = -75.3863112205027335. UHF NO Occupations:											 UHF NO Occupations:; HONO-2 : 1 B1 1.9996187									 |	 HONO-2 : 1 B2 1.9996187; HONO-1 : 3 A1 1.9985538										 HONO-1 : 3 A1 1.9985538; HONO-0 : 1 B2 1.0000000									 |	 HONO-0 : 1 B1 1.0000000; LUNO+0 : 4 A1 0.0014462										 LUNO+0 : 4 A1 0.0014462; LUNO+1 : 2 B1 0.0003813									 |	 LUNO+1 : 2 B2 0.0003813; LUNO+2 : 5 A1 0.0003240										 LUNO+2 : 5 A1 0.0003240; LUNO+3 : 6 A1 0.0000002										 LUNO+3 : 6 A1 0.0000002. Computation Completed											Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]					Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix							Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]										 Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.8555						 X: 0.0000 Y: 0.0000 Z: 0.8555. Electronic Dipole Moment: [e a0]									 Electronic D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:7809,Performance,Load,Loading,7809,".........PASSED; int value: 10 2.3283823492e-01...............................................PASSED; float value: 10 2.3283823492e-01.............................................PASSED; int value: 11 2.8055889891e-01...............................................PASSED; float value: 11 2.8055889891e-01.............................................PASSED; int value: 12 1.2367881234e-01...............................................PASSED; float value: 12 1.2367881234e-01.............................................PASSED; text line: Sym= B2...................................................................FAILED. E psi4.driver.p4util.exceptions.TestComparisonError: 	text line: Sym= B2: computed value (B2) does not match (B1) by difference ((n/a)).; ```. ```; Scratch directory: /tmp/										Scratch directory: /tmp/. *** tstart() called on psinet										*** tstart() called on psinet; *** at Sun Aug 1 18:19:38 2021									 |	*** at Sun Aug 1 18:26:41 2021. => Loading Basis Set <=										 => Loading Basis Set <=. Name: DZ												 Name: DZ; Role: ORBITAL											 Role: ORBITAL; Keyword: BASIS											 Keyword: BASIS; atoms 1 entry O line 107 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 1 entry O line 107 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/; atoms 2 entry H line 12 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 2 entry H line 12 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/. ---------------------------------------------------------					 ---------------------------------------------------------; SCF									 SCF; by Justin Turney, Rob Parrish, Andy Simmonett						 by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith							 and Daniel G. A. Smith; UHF Reference								 UHF Reference; 1 Threads, 500 MiB Core							 1 Threads, 500 MiB Core; ---------------------------------------------------------					 ---------------------------------------------------------. ==> Geometry <=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:7843,Performance,Load,Loading,7843,".........PASSED; int value: 10 2.3283823492e-01...............................................PASSED; float value: 10 2.3283823492e-01.............................................PASSED; int value: 11 2.8055889891e-01...............................................PASSED; float value: 11 2.8055889891e-01.............................................PASSED; int value: 12 1.2367881234e-01...............................................PASSED; float value: 12 1.2367881234e-01.............................................PASSED; text line: Sym= B2...................................................................FAILED. E psi4.driver.p4util.exceptions.TestComparisonError: 	text line: Sym= B2: computed value (B2) does not match (B1) by difference ((n/a)).; ```. ```; Scratch directory: /tmp/										Scratch directory: /tmp/. *** tstart() called on psinet										*** tstart() called on psinet; *** at Sun Aug 1 18:19:38 2021									 |	*** at Sun Aug 1 18:26:41 2021. => Loading Basis Set <=										 => Loading Basis Set <=. Name: DZ												 Name: DZ; Role: ORBITAL											 Role: ORBITAL; Keyword: BASIS											 Keyword: BASIS; atoms 1 entry O line 107 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 1 entry O line 107 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/; atoms 2 entry H line 12 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 2 entry H line 12 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/. ---------------------------------------------------------					 ---------------------------------------------------------; SCF									 SCF; by Justin Turney, Rob Parrish, Andy Simmonett						 by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith							 and Daniel G. A. Smith; UHF Reference								 UHF Reference; 1 Threads, 500 MiB Core							 1 Threads, 500 MiB Core; ---------------------------------------------------------					 ---------------------------------------------------------. ==> Geometry <=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:11798,Performance,Perform,Performing,11798,Blend: DZ												 Blend: DZ; Number of shells: 8											 Number of shells: 8; Number of basis functions: 12									 Number of basis functions: 12; Number of Cartesian functions: 12									 Number of Cartesian functions: 12; Spherical Harmonics?: false										 Spherical Harmonics?: false; Max angular momentum: 1										 Max angular momentum: 1. ==> Integral Setup <==										 ==> Integral Setup <==. Using in-core PK algorithm.										 Using in-core PK algorithm.; Calculation information:										 Calculation information:; Number of atoms: 2								 Number of atoms: 2; Number of AO shells: 8								 Number of AO shells: 8; Number of primitives: 18								 Number of primitives: 18; Number of atomic orbitals: 12								 Number of atomic orbitals: 12; Number of basis functions: 12								 Number of basis functions: 12. Integral cutoff 1.00e-12								 Integral cutoff 1.00e-12; Number of threads: 1								 Number of threads: 1. Performing in-core PK											 Performing in-core PK; Using 6162 doubles for integral storage.								 Using 6162 doubles for integral storage.; We computed 666 shell quartets total.									 We computed 666 shell quartets total.; Whereas there are 666 unique shell quartets.								 Whereas there are 666 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==								 ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes									 J tasked: Yes; K tasked: Yes									 K tasked: Yes; wK tasked: No									 wK tasked: No; Memory [MiB]: 375									 Memory [MiB]: 375; Schwarz Cutoff: 1E-12									 Schwarz Cutoff: 1E-12. OpenMP threads: 1									 OpenMP threads: 1. Minimum eigenvalue in the overlap matrix is 6.5615359192E-02.						 Minimum eigenvalue in the overlap matrix is 6.5615359192E-02.; Reciprocal condition number of the overlap matrix is 2.1736231954E-02.				 Reciprocal condition number of the overlap matrix is 2.1736231954E-02.; Using symmetric orthogonalization.									 Using symmetric orthogonalization. ==> Pre-Ite,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:11831,Performance,Perform,Performing,11831,Blend: DZ												 Blend: DZ; Number of shells: 8											 Number of shells: 8; Number of basis functions: 12									 Number of basis functions: 12; Number of Cartesian functions: 12									 Number of Cartesian functions: 12; Spherical Harmonics?: false										 Spherical Harmonics?: false; Max angular momentum: 1										 Max angular momentum: 1. ==> Integral Setup <==										 ==> Integral Setup <==. Using in-core PK algorithm.										 Using in-core PK algorithm.; Calculation information:										 Calculation information:; Number of atoms: 2								 Number of atoms: 2; Number of AO shells: 8								 Number of AO shells: 8; Number of primitives: 18								 Number of primitives: 18; Number of atomic orbitals: 12								 Number of atomic orbitals: 12; Number of basis functions: 12								 Number of basis functions: 12. Integral cutoff 1.00e-12								 Integral cutoff 1.00e-12; Number of threads: 1								 Number of threads: 1. Performing in-core PK											 Performing in-core PK; Using 6162 doubles for integral storage.								 Using 6162 doubles for integral storage.; We computed 666 shell quartets total.									 We computed 666 shell quartets total.; Whereas there are 666 unique shell quartets.								 Whereas there are 666 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==								 ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes									 J tasked: Yes; K tasked: Yes									 K tasked: Yes; wK tasked: No									 wK tasked: No; Memory [MiB]: 375									 Memory [MiB]: 375; Schwarz Cutoff: 1E-12									 Schwarz Cutoff: 1E-12. OpenMP threads: 1									 OpenMP threads: 1. Minimum eigenvalue in the overlap matrix is 6.5615359192E-02.						 Minimum eigenvalue in the overlap matrix is 6.5615359192E-02.; Reciprocal condition number of the overlap matrix is 2.1736231954E-02.				 Reciprocal condition number of the overlap matrix is 2.1736231954E-02.; Using symmetric orthogonalization.									 Using symmetric orthogonalization. ==> Pre-Ite,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:72,Testability,test,tests,72,"ah, sure, see below. iirc, this often happens when we try to have OH in tests. output files look innocent. ```; compare_moldenfiles...................................................................PASSED; text line: Sym= A1...................................................................PASSED; float value: Ene= -2.0635785811e+01...........................................PASSED; text line: Spin= Alpha...............................................................PASSED; float value: Occup= 1.0000000000e+00.........................................PASSED; int value: 1 5.8058355073e-01...............................................PASSED; float value: 1 5.8058355073e-01.............................................PASSED; int value: 2 4.6124354140e-01...............................................PASSED; float value: 2 4.6124354140e-01.............................................PASSED; int value: 3 1.0895933039e-03...............................................PASSED; float value: 3 1.0895933039e-03.............................................PASSED; int value: 4 1.2480807951e-03...............................................PASSED; float value: 4 1.2480807951e-03.............................................PASSED; int value: 5 0.0000000000e+00...............................................PASSED; float value: 5 0.0000000000e+00.............................................PASSED; int value: 6 0.0000000000e+00...............................................PASSED; float value: 6 0.0000000000e+00.............................................PASSED; int value: 7 1.4041668951e-03...............................................PASSED; float value: 7 1.4041668951e-03.............................................PASSED; int value: 8 0.0000000000e+00...............................................PASSED; float value: 8 0.0000000000e+00.............................................PASSED; int value: 9 0.0000000000e+00...............................................PASSED; float valu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:7486,Testability,Test,TestComparisonError,7486,"00e+00...............................................PASSED; float value: 8 0.0000000000e+00.............................................PASSED; int value: 9 0.0000000000e+00...............................................PASSED; float value: 9 0.0000000000e+00.............................................PASSED; int value: 10 2.3283823492e-01...............................................PASSED; float value: 10 2.3283823492e-01.............................................PASSED; int value: 11 2.8055889891e-01...............................................PASSED; float value: 11 2.8055889891e-01.............................................PASSED; int value: 12 1.2367881234e-01...............................................PASSED; float value: 12 1.2367881234e-01.............................................PASSED; text line: Sym= B2...................................................................FAILED. E psi4.driver.p4util.exceptions.TestComparisonError: 	text line: Sym= B2: computed value (B2) does not match (B1) by difference ((n/a)).; ```. ```; Scratch directory: /tmp/										Scratch directory: /tmp/. *** tstart() called on psinet										*** tstart() called on psinet; *** at Sun Aug 1 18:19:38 2021									 |	*** at Sun Aug 1 18:26:41 2021. => Loading Basis Set <=										 => Loading Basis Set <=. Name: DZ												 Name: DZ; Role: ORBITAL											 Role: ORBITAL; Keyword: BASIS											 Keyword: BASIS; atoms 1 entry O line 107 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 1 entry O line 107 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/; atoms 2 entry H line 12 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 2 entry H line 12 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/. ---------------------------------------------------------					 ---------------------------------------------------------; SCF									 SCF; by Justin Turney, Rob Parrish, Andy Simmonett						 by Justin Turney, Rob Parrish, And",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:8107,Testability,test,testgcc,8107,"...........PASSED; float value: 11 2.8055889891e-01.............................................PASSED; int value: 12 1.2367881234e-01...............................................PASSED; float value: 12 1.2367881234e-01.............................................PASSED; text line: Sym= B2...................................................................FAILED. E psi4.driver.p4util.exceptions.TestComparisonError: 	text line: Sym= B2: computed value (B2) does not match (B1) by difference ((n/a)).; ```. ```; Scratch directory: /tmp/										Scratch directory: /tmp/. *** tstart() called on psinet										*** tstart() called on psinet; *** at Sun Aug 1 18:19:38 2021									 |	*** at Sun Aug 1 18:26:41 2021. => Loading Basis Set <=										 => Loading Basis Set <=. Name: DZ												 Name: DZ; Role: ORBITAL											 Role: ORBITAL; Keyword: BASIS											 Keyword: BASIS; atoms 1 entry O line 107 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 1 entry O line 107 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/; atoms 2 entry H line 12 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 2 entry H line 12 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/. ---------------------------------------------------------					 ---------------------------------------------------------; SCF									 SCF; by Justin Turney, Rob Parrish, Andy Simmonett						 by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith							 and Daniel G. A. Smith; UHF Reference								 UHF Reference; 1 Threads, 500 MiB Core							 1 Threads, 500 MiB Core; ---------------------------------------------------------					 ---------------------------------------------------------. ==> Geometry <==											 ==> Geometry <==. Molecular point group: c2v										 Molecular point group: c2v; Full point group: C_inf_v										 Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:						 Geometry (in Angstrom), charge = 0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:8273,Testability,test,testgcc,8273,"...........PASSED; float value: 11 2.8055889891e-01.............................................PASSED; int value: 12 1.2367881234e-01...............................................PASSED; float value: 12 1.2367881234e-01.............................................PASSED; text line: Sym= B2...................................................................FAILED. E psi4.driver.p4util.exceptions.TestComparisonError: 	text line: Sym= B2: computed value (B2) does not match (B1) by difference ((n/a)).; ```. ```; Scratch directory: /tmp/										Scratch directory: /tmp/. *** tstart() called on psinet										*** tstart() called on psinet; *** at Sun Aug 1 18:19:38 2021									 |	*** at Sun Aug 1 18:26:41 2021. => Loading Basis Set <=										 => Loading Basis Set <=. Name: DZ												 Name: DZ; Role: ORBITAL											 Role: ORBITAL; Keyword: BASIS											 Keyword: BASIS; atoms 1 entry O line 107 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 1 entry O line 107 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/; atoms 2 entry H line 12 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 2 entry H line 12 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/. ---------------------------------------------------------					 ---------------------------------------------------------; SCF									 SCF; by Justin Turney, Rob Parrish, Andy Simmonett						 by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith							 and Daniel G. A. Smith; UHF Reference								 UHF Reference; 1 Threads, 500 MiB Core							 1 Threads, 500 MiB Core; ---------------------------------------------------------					 ---------------------------------------------------------. ==> Geometry <==											 ==> Geometry <==. Molecular point group: c2v										 Molecular point group: c2v; Full point group: C_inf_v										 Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:						 Geometry (in Angstrom), charge = 0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284
https://github.com/psi4/psi4/issues/2265#issuecomment-892409803:273,Testability,test,testing,273,"I think `cpscf_linear_response` does not yet support UHF references (for example [here](https://github.com/psi4/psi4/blob/9485035a0cd5d9a39582c9d7c4406f64aa12b838/psi4/driver/procrouting/response/scf_response.py#L164)...). Adding this feature would require some coding and testing, or instead a clean `NotImplementedError` should be thrown.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2265#issuecomment-892409803
https://github.com/psi4/psi4/pull/2266#issuecomment-964890817:513,Modifiability,plugin,plugins,513,"I can't quite figure out how to pass custom vectors via Psithon/PsiAPI using `psi4.properties`.; If I pass a list of vectors (e.g., dipole integrals), [this](https://github.com/maxscheurer/psi4/blob/1528bcfda6d55d32712f3e6be4b21a45abe90e55/psi4/driver/procrouting/proc.py#L2962) code block obviously fails... Directly passing vectors to `cpscf_linear_response` obviously works somehow, but I could not find anything in the test suite that explicitly covers the ""user-provided vector""-case at all... Are there any plugins/3rd party codes relying on calling `cpscf_linear_response` directly with custom vectors as arguments, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-964890817
https://github.com/psi4/psi4/pull/2266#issuecomment-964890817:423,Testability,test,test,423,"I can't quite figure out how to pass custom vectors via Psithon/PsiAPI using `psi4.properties`.; If I pass a list of vectors (e.g., dipole integrals), [this](https://github.com/maxscheurer/psi4/blob/1528bcfda6d55d32712f3e6be4b21a45abe90e55/psi4/driver/procrouting/proc.py#L2962) code block obviously fails... Directly passing vectors to `cpscf_linear_response` obviously works somehow, but I could not find anything in the test suite that explicitly covers the ""user-provided vector""-case at all... Are there any plugins/3rd party codes relying on calling `cpscf_linear_response` directly with custom vectors as arguments, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-964890817
https://github.com/psi4/psi4/pull/2266#issuecomment-964898464:322,Security,access,accessible,322,"Sure, `cpscf_linear_response` in principle allows one to pass a list of operators [here](https://github.com/maxscheurer/psi4/blob/1528bcfda6d55d32712f3e6be4b21a45abe90e55/psi4/driver/procrouting/response/scf_response.py#L113), so you can build your own response property. But apparently this feature is neither tested nor accessible from `psi4.properties`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-964898464
https://github.com/psi4/psi4/pull/2266#issuecomment-964898464:311,Testability,test,tested,311,"Sure, `cpscf_linear_response` in principle allows one to pass a list of operators [here](https://github.com/maxscheurer/psi4/blob/1528bcfda6d55d32712f3e6be4b21a45abe90e55/psi4/driver/procrouting/response/scf_response.py#L113), so you can build your own response property. But apparently this feature is neither tested nor accessible from `psi4.properties`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-964898464
https://github.com/psi4/psi4/pull/2266#issuecomment-966518168:101,Availability,error,error-prone,101,"> I think that requiring pairs of (Alpha, Beta) is the right interface. Another (more clean and less error-prone) option would be to only allow for custom operators in the AO basis...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966518168
https://github.com/psi4/psi4/pull/2266#issuecomment-966518168:61,Integrability,interface,interface,61,"> I think that requiring pairs of (Alpha, Beta) is the right interface. Another (more clean and less error-prone) option would be to only allow for custom operators in the AO basis...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966518168
https://github.com/psi4/psi4/pull/2266#issuecomment-966542107:190,Availability,down,downstream,190,"Looking at the commit history, this was added by DGAS years ago as part of a commit that suffered scope creep and was never actually used for anything. Let's check to see if anybody uses it downstream, but if not, I say remove it until we have an actual use case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966542107
https://github.com/psi4/psi4/pull/2266#issuecomment-966582267:26,Availability,down,downstream,26,I completely agree. Which downstream packages should I check for usage of the functionality?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966582267
https://github.com/psi4/psi4/pull/2266#issuecomment-966584489:90,Testability,test,tests,90,Check anything in the list of [official add-ons](https://github.com/psi4/psi4/blob/master/tests/pytests/addons.py#L51-L71). Lori may have some others.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966584489
https://github.com/psi4/psi4/pull/2266#issuecomment-966913098:250,Testability,test,test,250,"I just committed a version with the user-vector stuff removed, more transparent handling of prefactors, and less code duplication for restricted/unrestricted. The code is now a lot easier to read, I hope the reviewers will agree 😉 ; I'll now add the test cases suggested by @JonathonMisiewicz 👍",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966913098
https://github.com/psi4/psi4/pull/2271#issuecomment-896321286:201,Availability,error,error,201,"This doesn't fix #2012, since in that case it seems that the number of frozen core orbitals in the dimer is sum of the number of frozen core orbitals in each monomer (at least for `freeze_core -1`, an error is thrown with `freeze_core -2`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2271#issuecomment-896321286
https://github.com/psi4/psi4/issues/2272#issuecomment-896976501:153,Energy Efficiency,energy,energy,153,Apparently very easy to fall into endless recursion with MBIS volumes due to some necessary inputs also calculated by `oeprop()` and involving calls to `energy()`. You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896976501
https://github.com/psi4/psi4/issues/2272#issuecomment-896976501:190,Energy Efficiency,CHARGE,CHARGES,190,Apparently very easy to fall into endless recursion with MBIS volumes due to some necessary inputs also calculated by `oeprop()` and involving calls to `energy()`. You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896976501
https://github.com/psi4/psi4/issues/2272#issuecomment-896976501:241,Safety,avoid,avoid,241,Apparently very easy to fall into endless recursion with MBIS volumes due to some necessary inputs also calculated by `oeprop()` and involving calls to `energy()`. You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896976501
https://github.com/psi4/psi4/issues/2272#issuecomment-896987117:77,Energy Efficiency,CHARGE,CHARGES,77,"Thanks for the quick response, that makes sense!. >You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?. Sort of the only bit I need is the charges and volumes but not the volume ratio so not the free atom calculations added in #2127. So basically the performance before that PR my idea would be that the ratios are only calculated if something like `MBIS RATIOS` is passed which like you say would also avoid the cost of the extra calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117
https://github.com/psi4/psi4/issues/2272#issuecomment-896987117:236,Energy Efficiency,charge,charges,236,"Thanks for the quick response, that makes sense!. >You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?. Sort of the only bit I need is the charges and volumes but not the volume ratio so not the free atom calculations added in #2127. So basically the performance before that PR my idea would be that the ratios are only calculated if something like `MBIS RATIOS` is passed which like you say would also avoid the cost of the extra calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117
https://github.com/psi4/psi4/issues/2272#issuecomment-896987117:348,Performance,perform,performance,348,"Thanks for the quick response, that makes sense!. >You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?. Sort of the only bit I need is the charges and volumes but not the volume ratio so not the free atom calculations added in #2127. So basically the performance before that PR my idea would be that the ratios are only calculated if something like `MBIS RATIOS` is passed which like you say would also avoid the cost of the extra calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117
https://github.com/psi4/psi4/issues/2272#issuecomment-896987117:128,Safety,avoid,avoid,128,"Thanks for the quick response, that makes sense!. >You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?. Sort of the only bit I need is the charges and volumes but not the volume ratio so not the free atom calculations added in #2127. So basically the performance before that PR my idea would be that the ratios are only calculated if something like `MBIS RATIOS` is passed which like you say would also avoid the cost of the extra calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117
https://github.com/psi4/psi4/issues/2272#issuecomment-896987117:500,Safety,avoid,avoid,500,"Thanks for the quick response, that makes sense!. >You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?. Sort of the only bit I need is the charges and volumes but not the volume ratio so not the free atom calculations added in #2127. So basically the performance before that PR my idea would be that the ratios are only calculated if something like `MBIS RATIOS` is passed which like you say would also avoid the cost of the extra calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117
https://github.com/psi4/psi4/issues/2272#issuecomment-925810175:50,Deployability,update,updates,50,"Hi @loriab, I was just wondering if there are any updates on this issue please? I'm not sure how easy it would be to revert to behaviour before PR #2127? - at this point we had fully functioning access to both MBIS charges and atomic volumes. The calculation of the free atom volumes does not seem like a key feature to me (they can be easily tabulated). Thanks for your help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-925810175
https://github.com/psi4/psi4/issues/2272#issuecomment-925810175:215,Energy Efficiency,charge,charges,215,"Hi @loriab, I was just wondering if there are any updates on this issue please? I'm not sure how easy it would be to revert to behaviour before PR #2127? - at this point we had fully functioning access to both MBIS charges and atomic volumes. The calculation of the free atom volumes does not seem like a key feature to me (they can be easily tabulated). Thanks for your help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-925810175
https://github.com/psi4/psi4/issues/2272#issuecomment-925810175:195,Security,access,access,195,"Hi @loriab, I was just wondering if there are any updates on this issue please? I'm not sure how easy it would be to revert to behaviour before PR #2127? - at this point we had fully functioning access to both MBIS charges and atomic volumes. The calculation of the free atom volumes does not seem like a key feature to me (they can be easily tabulated). Thanks for your help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-925810175
https://github.com/psi4/psi4/issues/2272#issuecomment-925817914:99,Testability,test,test,99,"Hi @djcole56, the immediate issue is fixed in #2273, and I think that can be merged after a couple test case adjustments. We were going to backport that one. The other half of the issue that isn't troubling you @jeffschriber was going to work on. Are you more interested in the v1.4.x or the v1.5.devx series?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-925817914
https://github.com/psi4/psi4/issues/2272#issuecomment-945789348:24,Deployability,release,release,24,closed by #2273 and the release of https://github.com/psi4/psi4/releases/tag/v1.4.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-945789348
https://github.com/psi4/psi4/issues/2272#issuecomment-945789348:64,Deployability,release,releases,64,closed by #2273 and the release of https://github.com/psi4/psi4/releases/tag/v1.4.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-945789348
https://github.com/psi4/psi4/pull/2273#issuecomment-926617520:168,Energy Efficiency,charge,charges,168,"The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand _why_ the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926617520
https://github.com/psi4/psi4/pull/2273#issuecomment-926617520:261,Modifiability,variab,variables,261,"The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand _why_ the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926617520
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:170,Energy Efficiency,charge,charges,170,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:556,Energy Efficiency,energy,energy,556,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:578,Energy Efficiency,energy,energy,578,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:941,Energy Efficiency,charge,charges,941,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:1040,Energy Efficiency,energy,energy,1040,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:1267,Energy Efficiency,charge,charges,1267,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:1372,Energy Efficiency,charge,charges,1372,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:1599,Energy Efficiency,charge,charges,1599,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:566,Integrability,rout,route,566,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:617,Integrability,rout,route,617,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:760,Integrability,rout,route,760,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:1113,Integrability,rout,route,1113,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:1141,Integrability,rout,route,1141,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:1441,Integrability,rout,routes,1441,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:1521,Integrability,rout,route,1521,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:1675,Integrability,rout,routes,1675,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:1816,Integrability,rout,routes,1816,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:263,Modifiability,variab,variables,263,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:1695,Usability,clear,clearer,1695,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567
https://github.com/psi4/psi4/pull/2274#issuecomment-897712139:119,Deployability,install,installers,119,"When I preview it wants a new line after each indent:. ```; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration. See snapshots in directory for examples.; ; - Edit ``release`` fields. (Windows is often ``dev1`` unless separate steps.); - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; - Edit the packages and channels info if necessary. Probably long-term stable. ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2274#issuecomment-897712139
https://github.com/psi4/psi4/pull/2274#issuecomment-897712139:172,Deployability,Configurat,Configuration,172,"When I preview it wants a new line after each indent:. ```; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration. See snapshots in directory for examples.; ; - Edit ``release`` fields. (Windows is often ``dev1`` unless separate steps.); - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; - Edit the packages and channels info if necessary. Probably long-term stable. ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2274#issuecomment-897712139
https://github.com/psi4/psi4/pull/2274#issuecomment-897712139:240,Deployability,release,release,240,"When I preview it wants a new line after each indent:. ```; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration. See snapshots in directory for examples.; ; - Edit ``release`` fields. (Windows is often ``dev1`` unless separate steps.); - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; - Edit the packages and channels info if necessary. Probably long-term stable. ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2274#issuecomment-897712139
https://github.com/psi4/psi4/pull/2274#issuecomment-897712139:469,Deployability,release,releases,469,"When I preview it wants a new line after each indent:. ```; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration. See snapshots in directory for examples.; ; - Edit ``release`` fields. (Windows is often ``dev1`` unless separate steps.); - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; - Edit the packages and channels info if necessary. Probably long-term stable. ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2274#issuecomment-897712139
https://github.com/psi4/psi4/pull/2274#issuecomment-897712139:172,Modifiability,Config,Configuration,172,"When I preview it wants a new line after each indent:. ```; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration. See snapshots in directory for examples.; ; - Edit ``release`` fields. (Windows is often ``dev1`` unless separate steps.); - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; - Edit the packages and channels info if necessary. Probably long-term stable. ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2274#issuecomment-897712139
https://github.com/psi4/psi4/issues/2275#issuecomment-897965622:484,Energy Efficiency,energy,energy,484,"The solution to the problem is to call fchk instead of the FCHKWriter function. . With fchk(wfn, 'molecule.fchk'), the CC density is printed out successfully. . I just wanted to put this out to save other people the trouble. . ```; memory 55 GB. molecule water {; 0 1; O 0.000000 0.119325 0.000000; H 0.763133 -0.477420 0.000000; H -0.763133 -0.477177 0.000000. symmetry c1; no_com; no_reorient; }. set {; basis aug-cc-pVTZ; scf_type df; cc_type df; }. set_num_threads(6). #e, wfn1 = energy('ccsd(t)', return_wfn=True,); grad, wfn = gradient('ccsd(t)', return_wfn=True). fchk(wfn, 'molecule.fchk'). #fchk_writer = psi4.FCHKWriter(wfn); #fchk_writer.write('molecule.fchk'). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2275#issuecomment-897965622
https://github.com/psi4/psi4/issues/2279#issuecomment-900697059:6,Energy Efficiency,energy,energy,6,"> The energy should be approximately -1965.2319, but will instead give something like -1963.3023. How do you know the correct energy? Have you run the calculation with a completely independent implementation?. I think there might also be a difference in libxc between Psi4 1.3.2 and 1.4.0: range separated hybrids were basically fully rewritten in libxc 5.1.0, and should now be correct. addendum: of course if the calculations match in small basis sets, it can't be a libxc issue",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-900697059
https://github.com/psi4/psi4/issues/2279#issuecomment-900697059:126,Energy Efficiency,energy,energy,126,"> The energy should be approximately -1965.2319, but will instead give something like -1963.3023. How do you know the correct energy? Have you run the calculation with a completely independent implementation?. I think there might also be a difference in libxc between Psi4 1.3.2 and 1.4.0: range separated hybrids were basically fully rewritten in libxc 5.1.0, and should now be correct. addendum: of course if the calculations match in small basis sets, it can't be a libxc issue",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-900697059
https://github.com/psi4/psi4/issues/2279#issuecomment-900709116:55,Deployability,install,install,55,"With wB97X-D3BJ/6-31G* on the same system, the non-MKL install gives -1964.4305 Hartree for the same system, and the MKL version blows up, not converging within 100 SCF iterations (the non-converged energies are around **66325650** Hartree). So it looks like you don't need a big basis to observe this instability, which is good for testing. But, this is more evidence that the MKL install has a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-900709116
https://github.com/psi4/psi4/issues/2279#issuecomment-900709116:382,Deployability,install,install,382,"With wB97X-D3BJ/6-31G* on the same system, the non-MKL install gives -1964.4305 Hartree for the same system, and the MKL version blows up, not converging within 100 SCF iterations (the non-converged energies are around **66325650** Hartree). So it looks like you don't need a big basis to observe this instability, which is good for testing. But, this is more evidence that the MKL install has a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-900709116
https://github.com/psi4/psi4/issues/2279#issuecomment-900709116:333,Testability,test,testing,333,"With wB97X-D3BJ/6-31G* on the same system, the non-MKL install gives -1964.4305 Hartree for the same system, and the MKL version blows up, not converging within 100 SCF iterations (the non-converged energies are around **66325650** Hartree). So it looks like you don't need a big basis to observe this instability, which is good for testing. But, this is more evidence that the MKL install has a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-900709116
https://github.com/psi4/psi4/issues/2279#issuecomment-900713515:94,Deployability,install,install,94,"If the argument to psi4.set_memory() is reduced to 2 GB (forcing the disk algorithm), the MKL install gives an energy for wB97X-D3BJ/6-31G* of -1964.4297 Hartree, which is reasonable. So I continue to believe that the in-core algorithm is implicated, or at least magnifying an existing problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-900713515
https://github.com/psi4/psi4/issues/2279#issuecomment-900713515:40,Energy Efficiency,reduce,reduced,40,"If the argument to psi4.set_memory() is reduced to 2 GB (forcing the disk algorithm), the MKL install gives an energy for wB97X-D3BJ/6-31G* of -1964.4297 Hartree, which is reasonable. So I continue to believe that the in-core algorithm is implicated, or at least magnifying an existing problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-900713515
https://github.com/psi4/psi4/issues/2279#issuecomment-900713515:111,Energy Efficiency,energy,energy,111,"If the argument to psi4.set_memory() is reduced to 2 GB (forcing the disk algorithm), the MKL install gives an energy for wB97X-D3BJ/6-31G* of -1964.4297 Hartree, which is reasonable. So I continue to believe that the in-core algorithm is implicated, or at least magnifying an existing problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-900713515
https://github.com/psi4/psi4/issues/2279#issuecomment-900816518:2101,Energy Efficiency,energy,energy,2101,"7, 1.96334535],; [ 1.55245855, -0.55730393, 0.79347735],; [ 1.57807055, -0.59638793, -0.58135765],; [ 0.33353455, -1.00837593, -0.99842865],; [-0.41241445, -1.33766393, 0.12858235],; [ 0.35232355, -0.92987693, 1.24440635],; [-0.00657745, -1.20355993, -2.13075665],; [-0.14947445, -1.00267793, 2.20235835],; [ 2.42478555, -0.18029193, 1.17515335],; [ 2.85402655, 2.28807407, 1.17704435],; [ 3.91722855, 3.22559407, 1.59750135],; [ 4.48916555, 3.69442507, 0.51191135],; [ 3.90246455, 3.14933007, -0.59139665],; [ 2.91594555, 2.34754307, -0.13364465],; [ 5.41812755, 4.46140507, 0.48393635],; [ 2.40009555, 1.78156907, -0.90001365],; [ 2.44725055, 1.74621807, 2.02374335]]); # net_charge = -1; net_charge = 0. bigmol = psi4.core.Molecule.from_arrays(geom=xyz, molecular_charge=net_charge, elez=atomic_numbers). theory = ""wB97X/6-31G*""; psi4.set_options({; 'scf_type': 'disk_DF',; #'scf_type': 'mem_DF',; ""guess"": ""sad"",; ""maxiter"": 20,; }); psi4.set_memory(""10.0 gib""); E = psi4.energy(theory, molecule=bigmol); print(E); psi4.compare_values(-1023.23875023455, E, 6, ""matches disk_df""); ```. mem_df; ```; Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -946.81473095199294 -9.46815e+02 0.00000e+00; @DF-RKS iter 1: -853.16313969519842 9.36516e+01 2.49164e-02 DIIS; @DF-RKS iter 2: 205.11141330156607 1.05827e+03 9.66100e-02 DIIS; @DF-RKS iter 3: 51.44551681524645 -1.53666e+02 8.25708e-02 DIIS; @DF-RKS iter 4: 32.72889827880818 -1.87166e+01 8.07939e-02 DIIS; @DF-RKS iter 5: 30.01651359226875 -2.71238e+00 8.03146e-02 DIIS; @DF-RKS iter 6: 20.71735979257003 -9.29915e+00 7.94275e-02 DIIS; @DF-RKS iter 7: 20.19073835153742 -5.26621e-01 7.92802e-02 DIIS; @DF-RKS iter 8: 19.59649838936669 -5.94240e-01 7.91696e-02 DIIS; @DF-RKS iter 9: 18.59642511624830 -1.00007e+00 7.89379e-02 DIIS; @DF-RKS iter 10: 18.52526838311312 -7.11567e-02 7.89828e-02 DIIS; @DF-RKS iter 11: 17.83802341987538 -6.87245e-01 7.89175e-02 DIIS; @DF-RKS iter 12: 36.67699286161224 1.88390e+01 8.41411e-02 DIIS; @DF-RKS iter 13: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-900816518
https://github.com/psi4/psi4/issues/2279#issuecomment-900816518:2233,Energy Efficiency,Energy,Energy,2233,"5, -1.00837593, -0.99842865],; [-0.41241445, -1.33766393, 0.12858235],; [ 0.35232355, -0.92987693, 1.24440635],; [-0.00657745, -1.20355993, -2.13075665],; [-0.14947445, -1.00267793, 2.20235835],; [ 2.42478555, -0.18029193, 1.17515335],; [ 2.85402655, 2.28807407, 1.17704435],; [ 3.91722855, 3.22559407, 1.59750135],; [ 4.48916555, 3.69442507, 0.51191135],; [ 3.90246455, 3.14933007, -0.59139665],; [ 2.91594555, 2.34754307, -0.13364465],; [ 5.41812755, 4.46140507, 0.48393635],; [ 2.40009555, 1.78156907, -0.90001365],; [ 2.44725055, 1.74621807, 2.02374335]]); # net_charge = -1; net_charge = 0. bigmol = psi4.core.Molecule.from_arrays(geom=xyz, molecular_charge=net_charge, elez=atomic_numbers). theory = ""wB97X/6-31G*""; psi4.set_options({; 'scf_type': 'disk_DF',; #'scf_type': 'mem_DF',; ""guess"": ""sad"",; ""maxiter"": 20,; }); psi4.set_memory(""10.0 gib""); E = psi4.energy(theory, molecule=bigmol); print(E); psi4.compare_values(-1023.23875023455, E, 6, ""matches disk_df""); ```. mem_df; ```; Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -946.81473095199294 -9.46815e+02 0.00000e+00; @DF-RKS iter 1: -853.16313969519842 9.36516e+01 2.49164e-02 DIIS; @DF-RKS iter 2: 205.11141330156607 1.05827e+03 9.66100e-02 DIIS; @DF-RKS iter 3: 51.44551681524645 -1.53666e+02 8.25708e-02 DIIS; @DF-RKS iter 4: 32.72889827880818 -1.87166e+01 8.07939e-02 DIIS; @DF-RKS iter 5: 30.01651359226875 -2.71238e+00 8.03146e-02 DIIS; @DF-RKS iter 6: 20.71735979257003 -9.29915e+00 7.94275e-02 DIIS; @DF-RKS iter 7: 20.19073835153742 -5.26621e-01 7.92802e-02 DIIS; @DF-RKS iter 8: 19.59649838936669 -5.94240e-01 7.91696e-02 DIIS; @DF-RKS iter 9: 18.59642511624830 -1.00007e+00 7.89379e-02 DIIS; @DF-RKS iter 10: 18.52526838311312 -7.11567e-02 7.89828e-02 DIIS; @DF-RKS iter 11: 17.83802341987538 -6.87245e-01 7.89175e-02 DIIS; @DF-RKS iter 12: 36.67699286161224 1.88390e+01 8.41411e-02 DIIS; @DF-RKS iter 13: 40.04638640903951 3.36939e+00 8.47035e-02 DIIS; @DF-RKS iter 14: 40.73405734710366 6.87671e-01 8.49685e-02 DIIS;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-900816518
https://github.com/psi4/psi4/issues/2279#issuecomment-901391587:32,Availability,error,error,32,"Thanks so much for the detailed error report. I can reproduce this error, and am getting closer to finding the culprit. In the meantime, if you add the option `wcombine=False` the error should disappear. If my initial tests are correct, it appears that the new in-memory algorithm that combines the omega exchange and conventional exchange terms into one calculation is incorrect if more than one thread is used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-901391587
https://github.com/psi4/psi4/issues/2279#issuecomment-901391587:67,Availability,error,error,67,"Thanks so much for the detailed error report. I can reproduce this error, and am getting closer to finding the culprit. In the meantime, if you add the option `wcombine=False` the error should disappear. If my initial tests are correct, it appears that the new in-memory algorithm that combines the omega exchange and conventional exchange terms into one calculation is incorrect if more than one thread is used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-901391587
https://github.com/psi4/psi4/issues/2279#issuecomment-901391587:180,Availability,error,error,180,"Thanks so much for the detailed error report. I can reproduce this error, and am getting closer to finding the culprit. In the meantime, if you add the option `wcombine=False` the error should disappear. If my initial tests are correct, it appears that the new in-memory algorithm that combines the omega exchange and conventional exchange terms into one calculation is incorrect if more than one thread is used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-901391587
https://github.com/psi4/psi4/issues/2279#issuecomment-901391587:218,Testability,test,tests,218,"Thanks so much for the detailed error report. I can reproduce this error, and am getting closer to finding the culprit. In the meantime, if you add the option `wcombine=False` the error should disappear. If my initial tests are correct, it appears that the new in-memory algorithm that combines the omega exchange and conventional exchange terms into one calculation is incorrect if more than one thread is used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-901391587
https://github.com/psi4/psi4/issues/2279#issuecomment-931478182:3209,Availability,robust,robust,3209,"e-05 DIIS; @DF-RKS iter 8: -308.55887443471090 -5.78261e-05 8.58740e-06 DIIS; @DF-RKS iter 9: -308.55891429039167 -3.98557e-05 5.23007e-06 DIIS ; @DF-RKS iter 10: -308.55893438187678 -2.00915e-05 3.97102e-06 DIIS ; @DF-RKS iter 11: -308.55897076821287 -3.63863e-05 3.09810e-06 DIIS ; @DF-RKS iter 12: -308.55899251437626 -2.17462e-05 1.29222e-06 DIIS ; @DF-RKS iter 13: -308.55899611302931 -3.59865e-06 5.63064e-07 DIIS ; @DF-RKS iter 14: -308.55899645885273 -3.45823e-07 2.29741e-07 DIIS ; Energy and wave function converged.; ```. And with `set wcombine false`:; ```...; ==> Integral Setup <==; ; DFHelper Memory: AOs need 6.464 GiB; user supplied 6.464 GiB. Using in-core AOs.; ...; ==> Iterations <==; ; Total Energy Delta E RMS |[F,P]|; ; @DF-RKS iter SAD: -306.90916690803959 -3.06909e+02 0.00000e+00 ; @DF-RKS iter 1: -306.98727406041530 -7.81072e-02 1.83756e-03 DIIS; @DF-RKS iter 2: -307.13667252428678 -1.49398e-01 1.47236e-03 DIIS; @DF-RKS iter 3: -307.32880507487312 -1.92133e-01 1.25216e-04 DIIS; @DF-RKS iter 4: -307.32990958370664 -1.10451e-03 7.65745e-05 DIIS; @DF-RKS iter 5: -307.33036354773054 -4.53964e-04 1.70705e-05 DIIS; @DF-RKS iter 6: -307.33039129462924 -2.77469e-05 5.09682e-06 DIIS; @DF-RKS iter 7: -307.33039390006070 -2.60543e-06 1.20852e-06 DIIS; @DF-RKS iter 8: -307.33039428809019 -3.88029e-07 4.42881e-07 DIIS; Energy and wave function converged.; ```. Both jobs were run with 8 threads and 29337MB of memory, on the same machine (An `Intel(R) Xeon(R) Gold 6126 CPU @ 2.60GHz`). As my be relevant, other settings are:; ```set {; guess sad; fail_on_maxiter false; dft_nuclear_scheme SBECKE; dft_radial_scheme EM; dft_radial_points 99; dft_spherical_points 590; dft_vv10_radial_points 50; dft_vv10_spherical_points 194; dft_pruning_scheme robust; }; ```. Should I have expected cherry-picking 9163cbd08865d26129cfbaf5c302fc14f870f30f into 1.4 to have resolved this discrepancy? Or should I be making `set wcombine false` a standard part of my scripts for now?. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182
https://github.com/psi4/psi4/issues/2279#issuecomment-931478182:885,Energy Efficiency,Energy,Energy,885,"Hi everyone,. I'm on 1.4 and have cherry-picked in the changes from 9163cbd08865d26129cfbaf5c302fc14f870f30f. I'm building from source, as may be relevant to the MKL issues listed in #2283 I'm building with mkl/2019.0.117 (and stuck here for a bit because of my need for MKL_DEBUG_CPU_TYPE to continue to _work_). In addition, I have gcc/9.2.0 and icc/2020.2-108 going in my build env, with the C and CXX and Fortran compilers set to the intel compilers in my cmake config options. I'm running calculations with wB97M-V and was noticing the same issues @jminuse was. After cherry-picking and recompiling the issue persists. Adding `set wcombine false`, as suggested by @andysim makes the issue go away. . Without `set wcombine false`:; ```...; ==> Integral Setup <==; ; DFHelper Memory: AOs need 4.329 GiB; user supplied 4.329 GiB. Using in-core AOs.; ...; ==> Iterations <==; ; Total Energy Delta E RMS |[F,P]|; ; @DF-RKS iter SAD: -306.90903258181044 -3.06909e+02 0.00000e+00 ; @DF-RKS iter 1: -308.38044687527724 -1.47141e+00 1.27547e-03 DIIS; @DF-RKS iter 2: -308.40241691478502 -2.19700e-02 1.31335e-03 DIIS; @DF-RKS iter 3: -308.53663731037796 -1.34220e-01 4.92966e-04 DIIS; @DF-RKS iter 4: -308.55582354785412 -1.91862e-02 1.78690e-04 DIIS; @DF-RKS iter 5: -308.55841981379780 -2.59627e-03 4.24843e-05 DIIS; @DF-RKS iter 6: -308.55870799442886 -2.88181e-04 2.96248e-05 DIIS; @DF-RKS iter 7: -308.55881660865606 -1.08614e-04 1.50957e-05 DIIS; @DF-RKS iter 8: -308.55887443471090 -5.78261e-05 8.58740e-06 DIIS; @DF-RKS iter 9: -308.55891429039167 -3.98557e-05 5.23007e-06 DIIS ; @DF-RKS iter 10: -308.55893438187678 -2.00915e-05 3.97102e-06 DIIS ; @DF-RKS iter 11: -308.55897076821287 -3.63863e-05 3.09810e-06 DIIS ; @DF-RKS iter 12: -308.55899251437626 -2.17462e-05 1.29222e-06 DIIS ; @DF-RKS iter 13: -308.55899611302931 -3.59865e-06 5.63064e-07 DIIS ; @DF-RKS iter 14: -308.55899645885273 -3.45823e-07 2.29741e-07 DIIS ; Energy and wave function converged.; ```. And with `set wcombine false`:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182
https://github.com/psi4/psi4/issues/2279#issuecomment-931478182:1929,Energy Efficiency,Energy,Energy,1929,"90903258181044 -3.06909e+02 0.00000e+00 ; @DF-RKS iter 1: -308.38044687527724 -1.47141e+00 1.27547e-03 DIIS; @DF-RKS iter 2: -308.40241691478502 -2.19700e-02 1.31335e-03 DIIS; @DF-RKS iter 3: -308.53663731037796 -1.34220e-01 4.92966e-04 DIIS; @DF-RKS iter 4: -308.55582354785412 -1.91862e-02 1.78690e-04 DIIS; @DF-RKS iter 5: -308.55841981379780 -2.59627e-03 4.24843e-05 DIIS; @DF-RKS iter 6: -308.55870799442886 -2.88181e-04 2.96248e-05 DIIS; @DF-RKS iter 7: -308.55881660865606 -1.08614e-04 1.50957e-05 DIIS; @DF-RKS iter 8: -308.55887443471090 -5.78261e-05 8.58740e-06 DIIS; @DF-RKS iter 9: -308.55891429039167 -3.98557e-05 5.23007e-06 DIIS ; @DF-RKS iter 10: -308.55893438187678 -2.00915e-05 3.97102e-06 DIIS ; @DF-RKS iter 11: -308.55897076821287 -3.63863e-05 3.09810e-06 DIIS ; @DF-RKS iter 12: -308.55899251437626 -2.17462e-05 1.29222e-06 DIIS ; @DF-RKS iter 13: -308.55899611302931 -3.59865e-06 5.63064e-07 DIIS ; @DF-RKS iter 14: -308.55899645885273 -3.45823e-07 2.29741e-07 DIIS ; Energy and wave function converged.; ```. And with `set wcombine false`:; ```...; ==> Integral Setup <==; ; DFHelper Memory: AOs need 6.464 GiB; user supplied 6.464 GiB. Using in-core AOs.; ...; ==> Iterations <==; ; Total Energy Delta E RMS |[F,P]|; ; @DF-RKS iter SAD: -306.90916690803959 -3.06909e+02 0.00000e+00 ; @DF-RKS iter 1: -306.98727406041530 -7.81072e-02 1.83756e-03 DIIS; @DF-RKS iter 2: -307.13667252428678 -1.49398e-01 1.47236e-03 DIIS; @DF-RKS iter 3: -307.32880507487312 -1.92133e-01 1.25216e-04 DIIS; @DF-RKS iter 4: -307.32990958370664 -1.10451e-03 7.65745e-05 DIIS; @DF-RKS iter 5: -307.33036354773054 -4.53964e-04 1.70705e-05 DIIS; @DF-RKS iter 6: -307.33039129462924 -2.77469e-05 5.09682e-06 DIIS; @DF-RKS iter 7: -307.33039390006070 -2.60543e-06 1.20852e-06 DIIS; @DF-RKS iter 8: -307.33039428809019 -3.88029e-07 4.42881e-07 DIIS; Energy and wave function converged.; ```. Both jobs were run with 8 threads and 29337MB of memory, on the same machine (An `Intel(R) Xeon(R) Gold 6126 CPU ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182
https://github.com/psi4/psi4/issues/2279#issuecomment-931478182:2152,Energy Efficiency,Energy,Energy,2152,"4.92966e-04 DIIS; @DF-RKS iter 4: -308.55582354785412 -1.91862e-02 1.78690e-04 DIIS; @DF-RKS iter 5: -308.55841981379780 -2.59627e-03 4.24843e-05 DIIS; @DF-RKS iter 6: -308.55870799442886 -2.88181e-04 2.96248e-05 DIIS; @DF-RKS iter 7: -308.55881660865606 -1.08614e-04 1.50957e-05 DIIS; @DF-RKS iter 8: -308.55887443471090 -5.78261e-05 8.58740e-06 DIIS; @DF-RKS iter 9: -308.55891429039167 -3.98557e-05 5.23007e-06 DIIS ; @DF-RKS iter 10: -308.55893438187678 -2.00915e-05 3.97102e-06 DIIS ; @DF-RKS iter 11: -308.55897076821287 -3.63863e-05 3.09810e-06 DIIS ; @DF-RKS iter 12: -308.55899251437626 -2.17462e-05 1.29222e-06 DIIS ; @DF-RKS iter 13: -308.55899611302931 -3.59865e-06 5.63064e-07 DIIS ; @DF-RKS iter 14: -308.55899645885273 -3.45823e-07 2.29741e-07 DIIS ; Energy and wave function converged.; ```. And with `set wcombine false`:; ```...; ==> Integral Setup <==; ; DFHelper Memory: AOs need 6.464 GiB; user supplied 6.464 GiB. Using in-core AOs.; ...; ==> Iterations <==; ; Total Energy Delta E RMS |[F,P]|; ; @DF-RKS iter SAD: -306.90916690803959 -3.06909e+02 0.00000e+00 ; @DF-RKS iter 1: -306.98727406041530 -7.81072e-02 1.83756e-03 DIIS; @DF-RKS iter 2: -307.13667252428678 -1.49398e-01 1.47236e-03 DIIS; @DF-RKS iter 3: -307.32880507487312 -1.92133e-01 1.25216e-04 DIIS; @DF-RKS iter 4: -307.32990958370664 -1.10451e-03 7.65745e-05 DIIS; @DF-RKS iter 5: -307.33036354773054 -4.53964e-04 1.70705e-05 DIIS; @DF-RKS iter 6: -307.33039129462924 -2.77469e-05 5.09682e-06 DIIS; @DF-RKS iter 7: -307.33039390006070 -2.60543e-06 1.20852e-06 DIIS; @DF-RKS iter 8: -307.33039428809019 -3.88029e-07 4.42881e-07 DIIS; Energy and wave function converged.; ```. Both jobs were run with 8 threads and 29337MB of memory, on the same machine (An `Intel(R) Xeon(R) Gold 6126 CPU @ 2.60GHz`). As my be relevant, other settings are:; ```set {; guess sad; fail_on_maxiter false; dft_nuclear_scheme SBECKE; dft_radial_scheme EM; dft_radial_points 99; dft_spherical_points 590; dft_vv10_radial_points 50; dft_v",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182
https://github.com/psi4/psi4/issues/2279#issuecomment-931478182:2783,Energy Efficiency,Energy,Energy,2783,"e-05 DIIS; @DF-RKS iter 8: -308.55887443471090 -5.78261e-05 8.58740e-06 DIIS; @DF-RKS iter 9: -308.55891429039167 -3.98557e-05 5.23007e-06 DIIS ; @DF-RKS iter 10: -308.55893438187678 -2.00915e-05 3.97102e-06 DIIS ; @DF-RKS iter 11: -308.55897076821287 -3.63863e-05 3.09810e-06 DIIS ; @DF-RKS iter 12: -308.55899251437626 -2.17462e-05 1.29222e-06 DIIS ; @DF-RKS iter 13: -308.55899611302931 -3.59865e-06 5.63064e-07 DIIS ; @DF-RKS iter 14: -308.55899645885273 -3.45823e-07 2.29741e-07 DIIS ; Energy and wave function converged.; ```. And with `set wcombine false`:; ```...; ==> Integral Setup <==; ; DFHelper Memory: AOs need 6.464 GiB; user supplied 6.464 GiB. Using in-core AOs.; ...; ==> Iterations <==; ; Total Energy Delta E RMS |[F,P]|; ; @DF-RKS iter SAD: -306.90916690803959 -3.06909e+02 0.00000e+00 ; @DF-RKS iter 1: -306.98727406041530 -7.81072e-02 1.83756e-03 DIIS; @DF-RKS iter 2: -307.13667252428678 -1.49398e-01 1.47236e-03 DIIS; @DF-RKS iter 3: -307.32880507487312 -1.92133e-01 1.25216e-04 DIIS; @DF-RKS iter 4: -307.32990958370664 -1.10451e-03 7.65745e-05 DIIS; @DF-RKS iter 5: -307.33036354773054 -4.53964e-04 1.70705e-05 DIIS; @DF-RKS iter 6: -307.33039129462924 -2.77469e-05 5.09682e-06 DIIS; @DF-RKS iter 7: -307.33039390006070 -2.60543e-06 1.20852e-06 DIIS; @DF-RKS iter 8: -307.33039428809019 -3.88029e-07 4.42881e-07 DIIS; Energy and wave function converged.; ```. Both jobs were run with 8 threads and 29337MB of memory, on the same machine (An `Intel(R) Xeon(R) Gold 6126 CPU @ 2.60GHz`). As my be relevant, other settings are:; ```set {; guess sad; fail_on_maxiter false; dft_nuclear_scheme SBECKE; dft_radial_scheme EM; dft_radial_points 99; dft_spherical_points 590; dft_vv10_radial_points 50; dft_vv10_spherical_points 194; dft_pruning_scheme robust; }; ```. Should I have expected cherry-picking 9163cbd08865d26129cfbaf5c302fc14f870f30f into 1.4 to have resolved this discrepancy? Or should I be making `set wcombine false` a standard part of my scripts for now?. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182
https://github.com/psi4/psi4/issues/2279#issuecomment-931478182:466,Modifiability,config,config,466,"Hi everyone,. I'm on 1.4 and have cherry-picked in the changes from 9163cbd08865d26129cfbaf5c302fc14f870f30f. I'm building from source, as may be relevant to the MKL issues listed in #2283 I'm building with mkl/2019.0.117 (and stuck here for a bit because of my need for MKL_DEBUG_CPU_TYPE to continue to _work_). In addition, I have gcc/9.2.0 and icc/2020.2-108 going in my build env, with the C and CXX and Fortran compilers set to the intel compilers in my cmake config options. I'm running calculations with wB97M-V and was noticing the same issues @jminuse was. After cherry-picking and recompiling the issue persists. Adding `set wcombine false`, as suggested by @andysim makes the issue go away. . Without `set wcombine false`:; ```...; ==> Integral Setup <==; ; DFHelper Memory: AOs need 4.329 GiB; user supplied 4.329 GiB. Using in-core AOs.; ...; ==> Iterations <==; ; Total Energy Delta E RMS |[F,P]|; ; @DF-RKS iter SAD: -306.90903258181044 -3.06909e+02 0.00000e+00 ; @DF-RKS iter 1: -308.38044687527724 -1.47141e+00 1.27547e-03 DIIS; @DF-RKS iter 2: -308.40241691478502 -2.19700e-02 1.31335e-03 DIIS; @DF-RKS iter 3: -308.53663731037796 -1.34220e-01 4.92966e-04 DIIS; @DF-RKS iter 4: -308.55582354785412 -1.91862e-02 1.78690e-04 DIIS; @DF-RKS iter 5: -308.55841981379780 -2.59627e-03 4.24843e-05 DIIS; @DF-RKS iter 6: -308.55870799442886 -2.88181e-04 2.96248e-05 DIIS; @DF-RKS iter 7: -308.55881660865606 -1.08614e-04 1.50957e-05 DIIS; @DF-RKS iter 8: -308.55887443471090 -5.78261e-05 8.58740e-06 DIIS; @DF-RKS iter 9: -308.55891429039167 -3.98557e-05 5.23007e-06 DIIS ; @DF-RKS iter 10: -308.55893438187678 -2.00915e-05 3.97102e-06 DIIS ; @DF-RKS iter 11: -308.55897076821287 -3.63863e-05 3.09810e-06 DIIS ; @DF-RKS iter 12: -308.55899251437626 -2.17462e-05 1.29222e-06 DIIS ; @DF-RKS iter 13: -308.55899611302931 -3.59865e-06 5.63064e-07 DIIS ; @DF-RKS iter 14: -308.55899645885273 -3.45823e-07 2.29741e-07 DIIS ; Energy and wave function converged.; ```. And with `set wcombine false`:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182
https://github.com/psi4/psi4/issues/2279#issuecomment-939198359:1017,Availability,reliab,reliably,1017,"Ha, I was trying to come up with a minimal reproducible example and found the story somewhat more complicated. We're using a custom basis set, and it's nearest sibling (aug-cc-pvdz) doesn't reproduce the bug. Further, if I remove the mol.set_geometry call (which is just reloading in the same geometry, modulo some flutter from unit conversion and digit truncation (this was part of a bigger calc that keeps updating the geometry but only this section was required for reproduction), the bug goes away... Here is the file, attached so it's not GIANT in the field here b/c it has the custom basis spec:. [run.txt](https://github.com/psi4/psi4/files/7314753/run.txt). And here are the results I got running with and without wcombine:; [run_wcombine_out.txt](https://github.com/psi4/psi4/files/7314757/run_wcombine_out.txt); [run_nowcombine_out.txt](https://github.com/psi4/psi4/files/7314758/run_nowcombine_out.txt). I'm stumped here, especially by how hard it turned out to be to get the bug to happen. But it happens reliably if I run both of those files `--memory 27.3GB -n8 `. So... yeah. I've been running a few thousand jobs through now with `set wcombine false` and haven't seen any suspicious energies (I'm comparing to PNO-LCCSD(T*)-F12b in a comparable basis set, and this was producing several-kcals-of-difference vs the usual sub-kcal I was seeing in cases that didn't run into the bug), so it looks like it's a valid workaround for me. But yeah, I'm a little... baffled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-939198359
https://github.com/psi4/psi4/issues/2279#issuecomment-939372967:30,Availability,reboot,rebooted,30,"An update - after a colleague rebooted the node I'd been using for testing with the `noxsave` kernel parameter (disabling AVX capability visibility in the CPU flags), I retried the same test files with the same settings and env on the same machine. ...and now I get the ""correct"" answer -- the one I'd get with `set wcombine false`. So I think despite 9163cbd08865d26129cfbaf5c302fc14f870f30f there is still a sketchy use of DGETRI or DGETRF somewhere getting pulled in by an edge-case I'm hitting (because, again, if I tweak the number of processes, or the memory, or the basis set, or the geometry ever so slightly, it goes away!). I think I should flag @andysim here?. I'll continue with `wcombine` for my genrealized fix and I'm am happy to keep testing this weird job on the same machine as patches come down-the-line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967
https://github.com/psi4/psi4/issues/2279#issuecomment-939372967:809,Availability,down,down-the-line,809,"An update - after a colleague rebooted the node I'd been using for testing with the `noxsave` kernel parameter (disabling AVX capability visibility in the CPU flags), I retried the same test files with the same settings and env on the same machine. ...and now I get the ""correct"" answer -- the one I'd get with `set wcombine false`. So I think despite 9163cbd08865d26129cfbaf5c302fc14f870f30f there is still a sketchy use of DGETRI or DGETRF somewhere getting pulled in by an edge-case I'm hitting (because, again, if I tweak the number of processes, or the memory, or the basis set, or the geometry ever so slightly, it goes away!). I think I should flag @andysim here?. I'll continue with `wcombine` for my genrealized fix and I'm am happy to keep testing this weird job on the same machine as patches come down-the-line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967
https://github.com/psi4/psi4/issues/2279#issuecomment-939372967:3,Deployability,update,update,3,"An update - after a colleague rebooted the node I'd been using for testing with the `noxsave` kernel parameter (disabling AVX capability visibility in the CPU flags), I retried the same test files with the same settings and env on the same machine. ...and now I get the ""correct"" answer -- the one I'd get with `set wcombine false`. So I think despite 9163cbd08865d26129cfbaf5c302fc14f870f30f there is still a sketchy use of DGETRI or DGETRF somewhere getting pulled in by an edge-case I'm hitting (because, again, if I tweak the number of processes, or the memory, or the basis set, or the geometry ever so slightly, it goes away!). I think I should flag @andysim here?. I'll continue with `wcombine` for my genrealized fix and I'm am happy to keep testing this weird job on the same machine as patches come down-the-line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967
https://github.com/psi4/psi4/issues/2279#issuecomment-939372967:796,Deployability,patch,patches,796,"An update - after a colleague rebooted the node I'd been using for testing with the `noxsave` kernel parameter (disabling AVX capability visibility in the CPU flags), I retried the same test files with the same settings and env on the same machine. ...and now I get the ""correct"" answer -- the one I'd get with `set wcombine false`. So I think despite 9163cbd08865d26129cfbaf5c302fc14f870f30f there is still a sketchy use of DGETRI or DGETRF somewhere getting pulled in by an edge-case I'm hitting (because, again, if I tweak the number of processes, or the memory, or the basis set, or the geometry ever so slightly, it goes away!). I think I should flag @andysim here?. I'll continue with `wcombine` for my genrealized fix and I'm am happy to keep testing this weird job on the same machine as patches come down-the-line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967
https://github.com/psi4/psi4/issues/2279#issuecomment-939372967:67,Testability,test,testing,67,"An update - after a colleague rebooted the node I'd been using for testing with the `noxsave` kernel parameter (disabling AVX capability visibility in the CPU flags), I retried the same test files with the same settings and env on the same machine. ...and now I get the ""correct"" answer -- the one I'd get with `set wcombine false`. So I think despite 9163cbd08865d26129cfbaf5c302fc14f870f30f there is still a sketchy use of DGETRI or DGETRF somewhere getting pulled in by an edge-case I'm hitting (because, again, if I tweak the number of processes, or the memory, or the basis set, or the geometry ever so slightly, it goes away!). I think I should flag @andysim here?. I'll continue with `wcombine` for my genrealized fix and I'm am happy to keep testing this weird job on the same machine as patches come down-the-line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967
https://github.com/psi4/psi4/issues/2279#issuecomment-939372967:186,Testability,test,test,186,"An update - after a colleague rebooted the node I'd been using for testing with the `noxsave` kernel parameter (disabling AVX capability visibility in the CPU flags), I retried the same test files with the same settings and env on the same machine. ...and now I get the ""correct"" answer -- the one I'd get with `set wcombine false`. So I think despite 9163cbd08865d26129cfbaf5c302fc14f870f30f there is still a sketchy use of DGETRI or DGETRF somewhere getting pulled in by an edge-case I'm hitting (because, again, if I tweak the number of processes, or the memory, or the basis set, or the geometry ever so slightly, it goes away!). I think I should flag @andysim here?. I'll continue with `wcombine` for my genrealized fix and I'm am happy to keep testing this weird job on the same machine as patches come down-the-line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967
https://github.com/psi4/psi4/issues/2279#issuecomment-939372967:750,Testability,test,testing,750,"An update - after a colleague rebooted the node I'd been using for testing with the `noxsave` kernel parameter (disabling AVX capability visibility in the CPU flags), I retried the same test files with the same settings and env on the same machine. ...and now I get the ""correct"" answer -- the one I'd get with `set wcombine false`. So I think despite 9163cbd08865d26129cfbaf5c302fc14f870f30f there is still a sketchy use of DGETRI or DGETRF somewhere getting pulled in by an edge-case I'm hitting (because, again, if I tweak the number of processes, or the memory, or the basis set, or the geometry ever so slightly, it goes away!). I think I should flag @andysim here?. I'll continue with `wcombine` for my genrealized fix and I'm am happy to keep testing this weird job on the same machine as patches come down-the-line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967
https://github.com/psi4/psi4/issues/2281#issuecomment-902386060:118,Deployability,update,updates,118,"https://github.com/psi4/psi4/blob/master/tests/isapt2/input.dat is the test case version of that example. It has some updates, and it runs. thanks for the notice -- we should update the example. lmk if further problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902386060
https://github.com/psi4/psi4/issues/2281#issuecomment-902386060:175,Deployability,update,update,175,"https://github.com/psi4/psi4/blob/master/tests/isapt2/input.dat is the test case version of that example. It has some updates, and it runs. thanks for the notice -- we should update the example. lmk if further problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902386060
https://github.com/psi4/psi4/issues/2281#issuecomment-902386060:41,Testability,test,tests,41,"https://github.com/psi4/psi4/blob/master/tests/isapt2/input.dat is the test case version of that example. It has some updates, and it runs. thanks for the notice -- we should update the example. lmk if further problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902386060
https://github.com/psi4/psi4/issues/2281#issuecomment-902386060:71,Testability,test,test,71,"https://github.com/psi4/psi4/blob/master/tests/isapt2/input.dat is the test case version of that example. It has some updates, and it runs. thanks for the notice -- we should update the example. lmk if further problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902386060
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:564,Energy Efficiency,ENERGY,ENERGY,564,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:611,Energy Efficiency,ENERGY,ENERGY,611,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:656,Energy Efficiency,ENERGY,ENERGY,656,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:703,Energy Efficiency,ENERGY,ENERGY,703,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:751,Energy Efficiency,ENERGY,ENERGY,751,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:544,Modifiability,variab,variable,544,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:591,Modifiability,variab,variable,591,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:637,Modifiability,variab,variable,637,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:683,Modifiability,variab,variable,683,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:729,Modifiability,variab,variable,729,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:247,Testability,TEST,TEST,247,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:263,Testability,TEST,TEST,263,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:292,Testability,TEST,TEST,292,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:325,Testability,TEST,TEST,325,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:358,Testability,TEST,TEST,358,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:390,Testability,TEST,TEST,390,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:423,Testability,TEST,TEST,423,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:455,Testability,TEST,TEST,455,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:464,Testability,TEST,TEST,464,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:480,Testability,TEST,TEST,480,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:528,Testability,TEST,TEST,528,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:575,Testability,TEST,TEST,575,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:622,Testability,TEST,TEST,622,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:667,Testability,TEST,TEST,667,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:714,Testability,TEST,TEST,714,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:762,Testability,TEST,TEST,762,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:771,Testability,TEST,TEST,771,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:795,Testability,TEST,TEST,795,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:847,Testability,TEST,TEST,847,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145
https://github.com/psi4/psi4/issues/2281#issuecomment-902404884:356,Availability,error,error,356,"Sorry, I have not stated clearly. I tried the F-SAPT example in https://psicode.org/psi4manual/master/fisapt.html#f-sapt-a-representative-example. And when I use [fsapy.py](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/fsapt/fsapt.py) to analyse the interaction between different fragment which was stated in fA.dat and fB.dat, it reported such error:; ```Traceback (most recent call last):; File ""fsapt.py"", line 1048, in; stuff = compute_fsapt(dirname, False); File ""fsapt.py"", line 888, in compute_fsapt; order2 = extract_order2_fsapt(osapt, total_ws['A'], total_ws['B'], frags); File ""fsapt.py"", line 496, in extract_order2_fsapt; val = np.einsum('i,ij,j', valueA, value, valueB); File ""<array_function internals>"", line 6, in einsum; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib/python3.7/site-packages/numpy/core/einsumfunc.py"", line 1361, in einsum; return c_einsum(*operands, **kwargs); ValueError: operands could not be broadcast together with remapped shapes [original->remapped]: (52,)->(52,newaxis) (51,51)->(51,51) (52,)->(52)```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902404884
https://github.com/psi4/psi4/issues/2281#issuecomment-902404884:25,Usability,clear,clearly,25,"Sorry, I have not stated clearly. I tried the F-SAPT example in https://psicode.org/psi4manual/master/fisapt.html#f-sapt-a-representative-example. And when I use [fsapy.py](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/fsapt/fsapt.py) to analyse the interaction between different fragment which was stated in fA.dat and fB.dat, it reported such error:; ```Traceback (most recent call last):; File ""fsapt.py"", line 1048, in; stuff = compute_fsapt(dirname, False); File ""fsapt.py"", line 888, in compute_fsapt; order2 = extract_order2_fsapt(osapt, total_ws['A'], total_ws['B'], frags); File ""fsapt.py"", line 496, in extract_order2_fsapt; val = np.einsum('i,ij,j', valueA, value, valueB); File ""<array_function internals>"", line 6, in einsum; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib/python3.7/site-packages/numpy/core/einsumfunc.py"", line 1361, in einsum; return c_einsum(*operands, **kwargs); ValueError: operands could not be broadcast together with remapped shapes [original->remapped]: (52,)->(52,newaxis) (51,51)->(51,51) (52,)->(52)```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902404884
https://github.com/psi4/psi4/issues/2281#issuecomment-902411466:60,Availability,error,error,60,I have tried the example you used and it also reported such error. Maybe it is the version of numpy that leads to this problem. Which version of numpy do you use. I use the 1.20.3.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902411466
https://github.com/psi4/psi4/issues/2281#issuecomment-902415127:1570,Modifiability,plugin,plugins-base,1570,yhd3eb1b0_0 ; boost 1.73.0 py39h06a4308_11 ; bzip2 1.0.8 h7b6447c_0 ; ca-certificates 2021.7.5 h06a4308_1 ; certifi 2021.5.30 py39h06a4308_0 ; cffi 1.14.5 py39h261ae71_0 ; click 7.1.2 pyhd3eb1b0_0 ; cmake 3.19.6 h973ab73_0 ; dataclasses 0.8 pyhc8e2a94_1 conda-forge; dbus 1.13.18 hb2f20db_0 ; decorator 4.4.2 pyhd3eb1b0_0 ; defusedxml 0.7.1 pyhd3eb1b0_0 ; dftd3 3.2.1 h84218bc_2 psi4/label/dev; dftd4 v3.3.0 py39h1d74c00_0 psi4/label/dev; dkh 1.2 h173d85e_2 psi4/label/dev; eigen 3.3.7 hfd86e86_0 ; entrypoints 0.3 py39h06a4308_0 ; execnet 1.8.0 pyhd3eb1b0_0 ; expat 2.2.10 he6710b0_2 ; fontconfig 2.13.1 h6c09931_0 ; freetype 2.10.4 h5ab3b9f_0 ; gau2grid 2.0.7 hd18ef5c_0 psi4/label/dev; gcc_impl_linux-64 7.3.0 habb00fd_1 ; gcc_linux-64 7.3.0 h553295d_15 ; gcp 2.0.2 he991be0_2 psi4/label/dev; gdma 2.2.6 h0e1e685_6 psi4/label/dev; geometric 0.9.7.2 py_0 conda-forge; gfortran_impl_linux-64 7.3.0 hdf63c60_1 ; gfortran_linux-64 7.3.0 h553295d_15 ; glib 2.68.2 h36276a3_0 ; gmp 6.2.1 h2531618_2 ; gst-plugins-base 1.14.0 h8213a91_2 ; gstreamer 1.14.0 h28cd5cc_2 ; gxx_impl_linux-64 7.3.0 hdf63c60_1 ; gxx_linux-64 7.3.0 h553295d_15 ; hdf5 1.10.6 hb1b8bf9_0 ; icu 58.2 he6710b0_3 ; importlib-metadata 3.7.3 py39h06a4308_1 ; importlib_metadata 3.7.3 hd3eb1b0_1 ; importlib_resources 5.1.2 py39h06a4308_1 ; iniconfig 1.1.1 pyhd3eb1b0_0 ; intel-openmp 2021.3.0 h06a4308_3350 ; ipykernel 5.3.4 py39hb070fc8_0 ; ipython 7.22.0 py39hb070fc8_0 ; ipython_genutils 0.2.0 pyhd3eb1b0_1 ; ipywidgets 7.6.3 pyhd3eb1b0_1 ; isort 5.8.0 pyhd3eb1b0_0 ; jedi 0.17.2 py39h06a4308_1 ; jinja2 3.0.0 pyhd3eb1b0_0 ; jpeg 9b h024ee3a_2 ; jsonschema 3.2.0 py_2 ; jupyter 1.0.0 py39h06a4308_7 ; jupyter_client 6.1.12 pyhd3eb1b0_0 ; jupyter_console 6.4.0 pyhd3eb1b0_0 ; jupyter_core 4.7.1 py39h06a4308_0 ; jupyterlab_pygments 0.1.2 py_0 ; jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 ; krb5 1.18.2 h173b8e3_0 ; ld_impl_linux-64 2.33.1 h53a641e_7 ; libblas 3.9.0 1_h6e990d7_netlib conda-forge; libboost 1.73.0 h3ff78a5_11 ; libcurl 7.7,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902415127
https://github.com/psi4/psi4/issues/2281#issuecomment-902415127:641,Security,certificate,certificates,641,> Which version of numpy do you use. I use the 1.20.3. same.; ```; conda list; # packages in environment at /home/psilocaluser/toolchainconda/envs/py39b:; #; # Name Version Build Channel; _libgcc_mutex 0.1 main ; _openmp_mutex 4.5 1_gnu ; apipkg 1.5 py39h06a4308_0 ; appdirs 1.4.4 py_0 ; argon2-cffi 20.1.0 py39h27cfd23_1 ; async_generator 1.10 pyhd3eb1b0_0 ; attrs 20.3.0 pyhd3eb1b0_0 ; backcall 0.2.0 pyhd3eb1b0_0 ; binutils_impl_linux-64 2.33.1 he6710b0_7 ; binutils_linux-64 2.33.1 h9595d00_15 ; black 21.4b2 pyhd8ed1ab_0 conda-forge; blas 1.0 mkl ; bleach 3.3.0 pyhd3eb1b0_0 ; boost 1.73.0 py39h06a4308_11 ; bzip2 1.0.8 h7b6447c_0 ; ca-certificates 2021.7.5 h06a4308_1 ; certifi 2021.5.30 py39h06a4308_0 ; cffi 1.14.5 py39h261ae71_0 ; click 7.1.2 pyhd3eb1b0_0 ; cmake 3.19.6 h973ab73_0 ; dataclasses 0.8 pyhc8e2a94_1 conda-forge; dbus 1.13.18 hb2f20db_0 ; decorator 4.4.2 pyhd3eb1b0_0 ; defusedxml 0.7.1 pyhd3eb1b0_0 ; dftd3 3.2.1 h84218bc_2 psi4/label/dev; dftd4 v3.3.0 py39h1d74c00_0 psi4/label/dev; dkh 1.2 h173d85e_2 psi4/label/dev; eigen 3.3.7 hfd86e86_0 ; entrypoints 0.3 py39h06a4308_0 ; execnet 1.8.0 pyhd3eb1b0_0 ; expat 2.2.10 he6710b0_2 ; fontconfig 2.13.1 h6c09931_0 ; freetype 2.10.4 h5ab3b9f_0 ; gau2grid 2.0.7 hd18ef5c_0 psi4/label/dev; gcc_impl_linux-64 7.3.0 habb00fd_1 ; gcc_linux-64 7.3.0 h553295d_15 ; gcp 2.0.2 he991be0_2 psi4/label/dev; gdma 2.2.6 h0e1e685_6 psi4/label/dev; geometric 0.9.7.2 py_0 conda-forge; gfortran_impl_linux-64 7.3.0 hdf63c60_1 ; gfortran_linux-64 7.3.0 h553295d_15 ; glib 2.68.2 h36276a3_0 ; gmp 6.2.1 h2531618_2 ; gst-plugins-base 1.14.0 h8213a91_2 ; gstreamer 1.14.0 h28cd5cc_2 ; gxx_impl_linux-64 7.3.0 hdf63c60_1 ; gxx_linux-64 7.3.0 h553295d_15 ; hdf5 1.10.6 hb1b8bf9_0 ; icu 58.2 he6710b0_3 ; importlib-metadata 3.7.3 py39h06a4308_1 ; importlib_metadata 3.7.3 hd3eb1b0_1 ; importlib_resources 5.1.2 py39h06a4308_1 ; iniconfig 1.1.1 pyhd3eb1b0_0 ; intel-openmp 2021.3.0 h06a4308_3350 ; ipykernel 5.3.4 py39hb070fc8_0 ; ipython 7.22.0 py39hb070fc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902415127
https://github.com/psi4/psi4/issues/2281#issuecomment-902415127:5597,Testability,test,testpath,5597,0.0 py_0 ; pyberny 0.6.3 pypi_0 pypi; pybind11-headers 2.6.2 hfc4b9b4_0 psi4/label/dev; pycparser 2.20 py_2 ; pydantic 1.8.2 py39h27cfd23_0 ; pygments 2.9.0 pyhd3eb1b0_0 ; pyparsing 2.4.7 pyhd3eb1b0_0 ; pyqt 5.9.2 py39h2531618_6 ; pyrsistent 0.17.3 py39h27cfd23_0 ; pytest 6.2.2 py39h06a4308_2 ; pytest-forked 1.3.0 pyhd3eb1b0_0 ; pytest-xdist 2.2.1 pyhd3eb1b0_0 ; python 3.9.2 hdb3f193_0 ; python-dateutil 2.8.1 pyhd3eb1b0_0 ; python_abi 3.9 1_cp39 conda-forge; pyyaml 5.4.1 py39h27cfd23_1 ; pyzmq 20.0.0 py39h2531618_1 ; qcelemental 0.20.0+4.gef72ac1.dirty dev_0 <develop>; qcengine 0.19.0+21.g40ca605.dirty dev_0 <develop>; qt 5.9.7 h5867ecd_1 ; qtconsole 5.1.0 pyhd3eb1b0_0 ; qtpy 1.9.0 py_0 ; readline 8.1 h27cfd23_0 ; regex 2021.3.17 py39h27cfd23_0 ; rhash 1.4.1 h3c74f83_1 ; send2trash 1.5.0 pyhd3eb1b0_1 ; setuptools 52.0.0 py39h06a4308_0 ; simint 0.7 h642920c_1 psi4/label/dev; sip 4.19.13 py39h2531618_0 ; six 1.15.0 py39h06a4308_0 ; sqlite 3.35.2 hdfb4753_0 ; terminado 0.9.4 py39h06a4308_0 ; testpath 0.4.4 pyhd3eb1b0_0 ; tk 8.6.10 hbc83047_0 ; toml 0.10.2 pyhd3eb1b0_0 ; tornado 6.1 py39h27cfd23_0 ; traitlets 5.0.5 pyhd3eb1b0_0 ; typed-ast 1.4.2 py39h27cfd23_1 ; typing-extensions 3.7.4.3 hd3eb1b0_0 ; typing_extensions 3.7.4.3 pyh06a4308_0 ; tzdata 2020f h52ac0ba_0 ; versioneer 0.19 pyhd8ed1ab_0 conda-forge; wcwidth 0.2.5 py_0 ; webencodings 0.5.1 py39h06a4308_1 ; wheel 0.36.2 pyhd3eb1b0_0 ; widgetsnbextension 3.5.1 py39h06a4308_0 ; xtb 6.3.3 h323e27b_1 conda-forge; xtb-python 20.2 py39hbd71b63_2 conda-forge; xz 5.2.5 h7b6447c_0 ; yaml 0.2.5 h7b6447c_0 ; zeromq 4.3.4 h2531618_0 ; zipp 3.4.1 pyhd3eb1b0_0 ; zlib 1.2.11 h7b6447c_3 ; zstd 1.4.5 h9ceee32_0 ; ```. > It seems that the input file in https://github.com/psi4/psi4/blob/master/samples/fsapt1/input.dat and https://psicode.org/psi4manual/master/fisapt.html#f-sapt-a-representative-example has no differences. The manual example has unphysical singlets (`0 1`) for the OH fragments. The correct tests/ and samples/isapt2 h,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902415127
https://github.com/psi4/psi4/issues/2281#issuecomment-902415127:6566,Testability,test,tests,6566,hfc4b9b4_0 psi4/label/dev; pycparser 2.20 py_2 ; pydantic 1.8.2 py39h27cfd23_0 ; pygments 2.9.0 pyhd3eb1b0_0 ; pyparsing 2.4.7 pyhd3eb1b0_0 ; pyqt 5.9.2 py39h2531618_6 ; pyrsistent 0.17.3 py39h27cfd23_0 ; pytest 6.2.2 py39h06a4308_2 ; pytest-forked 1.3.0 pyhd3eb1b0_0 ; pytest-xdist 2.2.1 pyhd3eb1b0_0 ; python 3.9.2 hdb3f193_0 ; python-dateutil 2.8.1 pyhd3eb1b0_0 ; python_abi 3.9 1_cp39 conda-forge; pyyaml 5.4.1 py39h27cfd23_1 ; pyzmq 20.0.0 py39h2531618_1 ; qcelemental 0.20.0+4.gef72ac1.dirty dev_0 <develop>; qcengine 0.19.0+21.g40ca605.dirty dev_0 <develop>; qt 5.9.7 h5867ecd_1 ; qtconsole 5.1.0 pyhd3eb1b0_0 ; qtpy 1.9.0 py_0 ; readline 8.1 h27cfd23_0 ; regex 2021.3.17 py39h27cfd23_0 ; rhash 1.4.1 h3c74f83_1 ; send2trash 1.5.0 pyhd3eb1b0_1 ; setuptools 52.0.0 py39h06a4308_0 ; simint 0.7 h642920c_1 psi4/label/dev; sip 4.19.13 py39h2531618_0 ; six 1.15.0 py39h06a4308_0 ; sqlite 3.35.2 hdfb4753_0 ; terminado 0.9.4 py39h06a4308_0 ; testpath 0.4.4 pyhd3eb1b0_0 ; tk 8.6.10 hbc83047_0 ; toml 0.10.2 pyhd3eb1b0_0 ; tornado 6.1 py39h27cfd23_0 ; traitlets 5.0.5 pyhd3eb1b0_0 ; typed-ast 1.4.2 py39h27cfd23_1 ; typing-extensions 3.7.4.3 hd3eb1b0_0 ; typing_extensions 3.7.4.3 pyh06a4308_0 ; tzdata 2020f h52ac0ba_0 ; versioneer 0.19 pyhd8ed1ab_0 conda-forge; wcwidth 0.2.5 py_0 ; webencodings 0.5.1 py39h06a4308_1 ; wheel 0.36.2 pyhd3eb1b0_0 ; widgetsnbextension 3.5.1 py39h06a4308_0 ; xtb 6.3.3 h323e27b_1 conda-forge; xtb-python 20.2 py39hbd71b63_2 conda-forge; xz 5.2.5 h7b6447c_0 ; yaml 0.2.5 h7b6447c_0 ; zeromq 4.3.4 h2531618_0 ; zipp 3.4.1 pyhd3eb1b0_0 ; zlib 1.2.11 h7b6447c_3 ; zstd 1.4.5 h9ceee32_0 ; ```. > It seems that the input file in https://github.com/psi4/psi4/blob/master/samples/fsapt1/input.dat and https://psicode.org/psi4manual/master/fisapt.html#f-sapt-a-representative-example has no differences. The manual example has unphysical singlets (`0 1`) for the OH fragments. The correct tests/ and samples/isapt2 has doublets (`0 2`). Could isapt2 vs fsapt2 be the confusion?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902415127
https://github.com/psi4/psi4/issues/2281#issuecomment-902428685:199,Availability,error,error,199,"> Could isapt2 vs fsapt2 be the confusion?. I think it is not because of this reason. I check the input file for isapt and faspt,respectively. The calculation I want to do is F-SAPT. But it reported error. But the example you test is I-SAPT. So I also tested the I-SAPT example but also got such error.; This error may all caused by this code:; ```val = np.einsum('i,ij,j', valueA, value, valueB)```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902428685
https://github.com/psi4/psi4/issues/2281#issuecomment-902428685:296,Availability,error,error,296,"> Could isapt2 vs fsapt2 be the confusion?. I think it is not because of this reason. I check the input file for isapt and faspt,respectively. The calculation I want to do is F-SAPT. But it reported error. But the example you test is I-SAPT. So I also tested the I-SAPT example but also got such error.; This error may all caused by this code:; ```val = np.einsum('i,ij,j', valueA, value, valueB)```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902428685
https://github.com/psi4/psi4/issues/2281#issuecomment-902428685:309,Availability,error,error,309,"> Could isapt2 vs fsapt2 be the confusion?. I think it is not because of this reason. I check the input file for isapt and faspt,respectively. The calculation I want to do is F-SAPT. But it reported error. But the example you test is I-SAPT. So I also tested the I-SAPT example but also got such error.; This error may all caused by this code:; ```val = np.einsum('i,ij,j', valueA, value, valueB)```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902428685
https://github.com/psi4/psi4/issues/2281#issuecomment-902428685:226,Testability,test,test,226,"> Could isapt2 vs fsapt2 be the confusion?. I think it is not because of this reason. I check the input file for isapt and faspt,respectively. The calculation I want to do is F-SAPT. But it reported error. But the example you test is I-SAPT. So I also tested the I-SAPT example but also got such error.; This error may all caused by this code:; ```val = np.einsum('i,ij,j', valueA, value, valueB)```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902428685
https://github.com/psi4/psi4/issues/2281#issuecomment-902428685:252,Testability,test,tested,252,"> Could isapt2 vs fsapt2 be the confusion?. I think it is not because of this reason. I check the input file for isapt and faspt,respectively. The calculation I want to do is F-SAPT. But it reported error. But the example you test is I-SAPT. So I also tested the I-SAPT example but also got such error.; This error may all caused by this code:; ```val = np.einsum('i,ij,j', valueA, value, valueB)```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902428685
https://github.com/psi4/psi4/issues/2281#issuecomment-902432397:251,Availability,error,error,251,"It seems unlikely a numpy interface would change. You might try running one of the tests that runs `fsapt.py` internally like `fsapt-terms`. You'll have to move the fsapt.py file to the launch directory or hardwire its path in the test. If your numpy error shows up there, I'd believe numpy or env problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902432397
https://github.com/psi4/psi4/issues/2281#issuecomment-902432397:26,Integrability,interface,interface,26,"It seems unlikely a numpy interface would change. You might try running one of the tests that runs `fsapt.py` internally like `fsapt-terms`. You'll have to move the fsapt.py file to the launch directory or hardwire its path in the test. If your numpy error shows up there, I'd believe numpy or env problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902432397
https://github.com/psi4/psi4/issues/2281#issuecomment-902432397:83,Testability,test,tests,83,"It seems unlikely a numpy interface would change. You might try running one of the tests that runs `fsapt.py` internally like `fsapt-terms`. You'll have to move the fsapt.py file to the launch directory or hardwire its path in the test. If your numpy error shows up there, I'd believe numpy or env problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902432397
https://github.com/psi4/psi4/issues/2281#issuecomment-902432397:231,Testability,test,test,231,"It seems unlikely a numpy interface would change. You might try running one of the tests that runs `fsapt.py` internally like `fsapt-terms`. You'll have to move the fsapt.py file to the launch directory or hardwire its path in the test. If your numpy error shows up there, I'd believe numpy or env problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902432397
https://github.com/psi4/psi4/issues/2281#issuecomment-902437558:186,Availability,error,error,186,[test.tar.gz](https://github.com/psi4/psi4/files/7019263/test.tar.gz); Here I uploaded my input and result for I-SAPT example. Maybe you can help to test them to see wheter there is any error in my environment.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902437558
https://github.com/psi4/psi4/issues/2281#issuecomment-902437558:1,Testability,test,test,1,[test.tar.gz](https://github.com/psi4/psi4/files/7019263/test.tar.gz); Here I uploaded my input and result for I-SAPT example. Maybe you can help to test them to see wheter there is any error in my environment.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902437558
https://github.com/psi4/psi4/issues/2281#issuecomment-902437558:57,Testability,test,test,57,[test.tar.gz](https://github.com/psi4/psi4/files/7019263/test.tar.gz); Here I uploaded my input and result for I-SAPT example. Maybe you can help to test them to see wheter there is any error in my environment.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902437558
https://github.com/psi4/psi4/issues/2281#issuecomment-902437558:149,Testability,test,test,149,[test.tar.gz](https://github.com/psi4/psi4/files/7019263/test.tar.gz); Here I uploaded my input and result for I-SAPT example. Maybe you can help to test them to see wheter there is any error in my environment.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902437558
https://github.com/psi4/psi4/issues/2282#issuecomment-904248802:190,Energy Efficiency,energy,energy,190,"did you happen to try something like below? iirc, `""detci""` is intended to trigger the specify-everything-by-detci-keyword mode that makes detci behave like psi3. ```; set detci ex_level 5. energy(""detci""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2282#issuecomment-904248802
https://github.com/psi4/psi4/issues/2282#issuecomment-904256592:427,Energy Efficiency,energy,energy,427,"The ccenergy & detci shortcuts are basically there for the small subset of users (maybe 2) who know psi3 better than psi4 and for debugging. They were faintly documented here https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L103-L117 (first and last lines) but not advertised since it didn't match the psi4 philosophy of specific method. The `ex_level` wasn't intended to be used directly. Is it `energy(""ci5"")` that you're after? detci can do so many arbitrary orders (inefficiently) that we didn't want to clutter up the procedures dict (this was pre-dft days).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2282#issuecomment-904256592
https://github.com/psi4/psi4/pull/2283#issuecomment-904773900:568,Energy Efficiency,power,power,568,"There's a lot going on here, so bear with me. In DF algorithms we approximate `(ab|cd)≈(ab|P) M_PQ (Q|cd)`, where `M` is the inverse of the metric tensor `M = (P|Q)^{-1}`. For calculations involving symmetric densities (such as SCF energies), we can write the `M` quantity as a product of inverse square roots instead; multiplying one to the left and the other to the right gives two identical intermediates, saving memory. That symmetric approach is used in the conventional algorithms that existed pre-1.4. When computing the inverse square root that's needed, the [power() function](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2284) is used; that function respects a cutoff that is used to eliminate (near) linear dependencies and increase stability (and was widely implemented by @susilehtola as part of an effort to increase stability of the code). In cases where the density involved is not totally symmetric, such as excited states, the symmetric DF intermediates are not used and instead the decomposition is asymmetric: `(ab|cd)≈[(ab|P)] [M_PQ (Q|cd)]`. This asymmetric decomposition is also used in the recently introduced `wcombine` algorithm that combines coulomb-attenuated integrals and conventional ERIs to speed up exchange evaluation. To generate the second intermediate in this approach, a full inverse of the metric is needed, instead of the inverse square root, and this is achieved by calling [general_invert()](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2236). This matrix inversion does not eliminate (near) linear dependencies and the system reported in #2279 is susceptible (see comments below for a demo). The `wcombine` algorithm was implemented after @susilehtola's cleanup efforts and inadvertently failed to remove linear dependencies during metric inversion; this PR corrects this oversight.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904773900
https://github.com/psi4/psi4/pull/2283#issuecomment-904773900:782,Integrability,depend,dependencies,782,"There's a lot going on here, so bear with me. In DF algorithms we approximate `(ab|cd)≈(ab|P) M_PQ (Q|cd)`, where `M` is the inverse of the metric tensor `M = (P|Q)^{-1}`. For calculations involving symmetric densities (such as SCF energies), we can write the `M` quantity as a product of inverse square roots instead; multiplying one to the left and the other to the right gives two identical intermediates, saving memory. That symmetric approach is used in the conventional algorithms that existed pre-1.4. When computing the inverse square root that's needed, the [power() function](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2284) is used; that function respects a cutoff that is used to eliminate (near) linear dependencies and increase stability (and was widely implemented by @susilehtola as part of an effort to increase stability of the code). In cases where the density involved is not totally symmetric, such as excited states, the symmetric DF intermediates are not used and instead the decomposition is asymmetric: `(ab|cd)≈[(ab|P)] [M_PQ (Q|cd)]`. This asymmetric decomposition is also used in the recently introduced `wcombine` algorithm that combines coulomb-attenuated integrals and conventional ERIs to speed up exchange evaluation. To generate the second intermediate in this approach, a full inverse of the metric is needed, instead of the inverse square root, and this is achieved by calling [general_invert()](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2236). This matrix inversion does not eliminate (near) linear dependencies and the system reported in #2279 is susceptible (see comments below for a demo). The `wcombine` algorithm was implemented after @susilehtola's cleanup efforts and inadvertently failed to remove linear dependencies during metric inversion; this PR corrects this oversight.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904773900
https://github.com/psi4/psi4/pull/2283#issuecomment-904773900:1669,Integrability,depend,dependencies,1669,"There's a lot going on here, so bear with me. In DF algorithms we approximate `(ab|cd)≈(ab|P) M_PQ (Q|cd)`, where `M` is the inverse of the metric tensor `M = (P|Q)^{-1}`. For calculations involving symmetric densities (such as SCF energies), we can write the `M` quantity as a product of inverse square roots instead; multiplying one to the left and the other to the right gives two identical intermediates, saving memory. That symmetric approach is used in the conventional algorithms that existed pre-1.4. When computing the inverse square root that's needed, the [power() function](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2284) is used; that function respects a cutoff that is used to eliminate (near) linear dependencies and increase stability (and was widely implemented by @susilehtola as part of an effort to increase stability of the code). In cases where the density involved is not totally symmetric, such as excited states, the symmetric DF intermediates are not used and instead the decomposition is asymmetric: `(ab|cd)≈[(ab|P)] [M_PQ (Q|cd)]`. This asymmetric decomposition is also used in the recently introduced `wcombine` algorithm that combines coulomb-attenuated integrals and conventional ERIs to speed up exchange evaluation. To generate the second intermediate in this approach, a full inverse of the metric is needed, instead of the inverse square root, and this is achieved by calling [general_invert()](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2236). This matrix inversion does not eliminate (near) linear dependencies and the system reported in #2279 is susceptible (see comments below for a demo). The `wcombine` algorithm was implemented after @susilehtola's cleanup efforts and inadvertently failed to remove linear dependencies during metric inversion; this PR corrects this oversight.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904773900
https://github.com/psi4/psi4/pull/2283#issuecomment-904773900:1883,Integrability,depend,dependencies,1883,"There's a lot going on here, so bear with me. In DF algorithms we approximate `(ab|cd)≈(ab|P) M_PQ (Q|cd)`, where `M` is the inverse of the metric tensor `M = (P|Q)^{-1}`. For calculations involving symmetric densities (such as SCF energies), we can write the `M` quantity as a product of inverse square roots instead; multiplying one to the left and the other to the right gives two identical intermediates, saving memory. That symmetric approach is used in the conventional algorithms that existed pre-1.4. When computing the inverse square root that's needed, the [power() function](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2284) is used; that function respects a cutoff that is used to eliminate (near) linear dependencies and increase stability (and was widely implemented by @susilehtola as part of an effort to increase stability of the code). In cases where the density involved is not totally symmetric, such as excited states, the symmetric DF intermediates are not used and instead the decomposition is asymmetric: `(ab|cd)≈[(ab|P)] [M_PQ (Q|cd)]`. This asymmetric decomposition is also used in the recently introduced `wcombine` algorithm that combines coulomb-attenuated integrals and conventional ERIs to speed up exchange evaluation. To generate the second intermediate in this approach, a full inverse of the metric is needed, instead of the inverse square root, and this is achieved by calling [general_invert()](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2236). This matrix inversion does not eliminate (near) linear dependencies and the system reported in #2279 is susceptible (see comments below for a demo). The `wcombine` algorithm was implemented after @susilehtola's cleanup efforts and inadvertently failed to remove linear dependencies during metric inversion; this PR corrects this oversight.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904773900
https://github.com/psi4/psi4/pull/2283#issuecomment-904776872:222,Energy Efficiency,Energy,Energy,222,"Some tests from the original issue on a 48 core Intel Xeon Gold 5120 Linux box, with OneAPI compilers (version 2021.2.0) as well as GCC 7.1, with and without the bug fixed:. | Compiler | #Threads | wcombine | Bug fixed? | Energy (Eh) | Still Bad? |; |----------|----------|----------|------------|--------------------|----|; | OneAPI | 1 | True | False | -1963.7577 8206 1252* | yes |; | OneAPI | 8 | True | False | did not converge | yes |; | OneAPI | 1 | False | False | -1963.7615 9009 8066 |; | OneAPI | 8 | False | False | -1962.6864 3082 1442 | yes |; | OneAPI | 1 | True | True | -1963.7615 2234 6426 |; | OneAPI | 8 | True | True | -1963.7615 2417 8940 |; | OneAPI | 1 | False | True | -1963.7615 5899 4243 |; | OneAPI | 8 | False | True | -1963.7615 5898 3752 |; | GCC | 1 | True | False | -1963.7587 7038 0348 | yes |; | GCC | 8 | True | False | -1963.7587 7038 0374 | yes |; | GCC | 1 | False | False | -1963.7615 8294 3193 |; | GCC | 8 | False | False | -1963.7615 8294 3197 |; | GCC | 1 | True | True | -1963.7615 8460 3790 |; | GCC | 8 | True | True | -1963.7615 8460 3791 |; | GCC | 1 | False | True | -1963.7615 5884 0375 |; | GCC | 8 | False | True | -1963.7615 5884 0376 |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904776872
https://github.com/psi4/psi4/pull/2283#issuecomment-904776872:5,Testability,test,tests,5,"Some tests from the original issue on a 48 core Intel Xeon Gold 5120 Linux box, with OneAPI compilers (version 2021.2.0) as well as GCC 7.1, with and without the bug fixed:. | Compiler | #Threads | wcombine | Bug fixed? | Energy (Eh) | Still Bad? |; |----------|----------|----------|------------|--------------------|----|; | OneAPI | 1 | True | False | -1963.7577 8206 1252* | yes |; | OneAPI | 8 | True | False | did not converge | yes |; | OneAPI | 1 | False | False | -1963.7615 9009 8066 |; | OneAPI | 8 | False | False | -1962.6864 3082 1442 | yes |; | OneAPI | 1 | True | True | -1963.7615 2234 6426 |; | OneAPI | 8 | True | True | -1963.7615 2417 8940 |; | OneAPI | 1 | False | True | -1963.7615 5899 4243 |; | OneAPI | 8 | False | True | -1963.7615 5898 3752 |; | GCC | 1 | True | False | -1963.7587 7038 0348 | yes |; | GCC | 8 | True | False | -1963.7587 7038 0374 | yes |; | GCC | 1 | False | False | -1963.7615 8294 3193 |; | GCC | 8 | False | False | -1963.7615 8294 3197 |; | GCC | 1 | True | True | -1963.7615 8460 3790 |; | GCC | 8 | True | True | -1963.7615 8460 3791 |; | GCC | 1 | False | True | -1963.7615 5884 0375 |; | GCC | 8 | False | True | -1963.7615 5884 0376 |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904776872
https://github.com/psi4/psi4/pull/2283#issuecomment-904787207:4074,Deployability,install,installed,4074,"a3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD22771B: __kmp_launch_thread (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD26630A: _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_launch_worker(void*) (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0x4E3EEA4: start_thread (in /usr/lib64/libpthread-2.17.so); ==2802== by 0x51519FC: clone (in /usr/lib64/libc-2.17.so); ==2802== Address 0x2866b120 is 0 bytes after a block of size 73,440 alloc'd; ==2802== at 0x4C2A593: operator new(unsigned long) (vg_replace_malloc.c:344); ==2802== by 0x1CA85F62: allocate (new_allocator.h:104); ==2802== by 0x1CA85F62: allocate (alloc_traits.h:491); ==2802== by 0x1CA85F62: _M_allocate (stl_vector.h:170); ==2802== by 0x1CA85F62: _M_fill_insert (vector.tcc:491); ==2802== by 0x1CA85F62: std::vector<long, std::allocator<long> >::insert(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, unsigned long, long const&) (stl_vector.h:1054); ==2802== by 0x1CA7E37F: resize (stl_vector.h:696); ==2802== by 0x1CA7E37F: psi::TwoBodyAOInt::create_sieve_pair_info(std::shared_ptr<psi::BasisSet>, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >&, bool) (twobody.cc:244); ```; This is a harmless copy construction of a vector that is well defined. I tried to remove the AVX2 code path using the [MKL options](https://software.intel.com/content/www/us/en/develop/documentation/onemkl-developer-reference-c/top/support-functions/miscellaneous/mkl-enable-instructions.html) but the problem persisted. Finding an old pre-AVX box and running on there did the trick, and Valgrind came back clean. It was clean for the GCC build also. Therefore it appears that there is a memory problem, but it's likely either an Intel compiler bug (I think OneAPI is still in beta technically) or a problem with me mixing `libiomp5` from Conda with the native OneAPI installed compiler suite. I'll try the commercial Intel compilers next...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904787207
https://github.com/psi4/psi4/pull/2283#issuecomment-904787207:2746,Energy Efficiency,allocate,allocate,2746,"oElectronInt const&) (eri.h:255); ==2802== by 0x1CC3A0EE: Libint2ErfERI (eri.h:300); ==2802== by 0x1CC3A0EE: psi::Libint2ErfERI::clone() const (eri.h:305); ==2802== by 0x1C740620: psi::DFHelper::prepare_AO_wK_core() (dfhelper.cc:571); ==2802== by 0xD265ED2: __kmp_invoke_microtask (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD228725: __kmp_invoke_task_func (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD22771B: __kmp_launch_thread (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD26630A: _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_launch_worker(void*) (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0x4E3EEA4: start_thread (in /usr/lib64/libpthread-2.17.so); ==2802== by 0x51519FC: clone (in /usr/lib64/libc-2.17.so); ==2802== Address 0x2866b120 is 0 bytes after a block of size 73,440 alloc'd; ==2802== at 0x4C2A593: operator new(unsigned long) (vg_replace_malloc.c:344); ==2802== by 0x1CA85F62: allocate (new_allocator.h:104); ==2802== by 0x1CA85F62: allocate (alloc_traits.h:491); ==2802== by 0x1CA85F62: _M_allocate (stl_vector.h:170); ==2802== by 0x1CA85F62: _M_fill_insert (vector.tcc:491); ==2802== by 0x1CA85F62: std::vector<long, std::allocator<long> >::insert(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, unsigned long, long const&) (stl_vector.h:1054); ==2802== by 0x1CA7E37F: resize (stl_vector.h:696); ==2802== by 0x1CA7E37F: psi::TwoBodyAOInt::create_sieve_pair_info(std::shared_ptr<psi::BasisSet>, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >&, bool) (twobody.cc:244); ```; This is a harmless copy construction of a vector that is well defined. I tried to remove the AVX2 code path using the [MKL options](https://software.intel.com/content/www/us/en/develop/documentation/onemkl-developer-reference-c/top/support-functions/miscellaneous/mkl-enable-instructions.html) but the problem persisted. Finding an old ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904787207
https://github.com/psi4/psi4/pull/2283#issuecomment-904787207:2802,Energy Efficiency,allocate,allocate,2802,"E: Libint2ErfERI (eri.h:300); ==2802== by 0x1CC3A0EE: psi::Libint2ErfERI::clone() const (eri.h:305); ==2802== by 0x1C740620: psi::DFHelper::prepare_AO_wK_core() (dfhelper.cc:571); ==2802== by 0xD265ED2: __kmp_invoke_microtask (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD228725: __kmp_invoke_task_func (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD22771B: __kmp_launch_thread (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD26630A: _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_launch_worker(void*) (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0x4E3EEA4: start_thread (in /usr/lib64/libpthread-2.17.so); ==2802== by 0x51519FC: clone (in /usr/lib64/libc-2.17.so); ==2802== Address 0x2866b120 is 0 bytes after a block of size 73,440 alloc'd; ==2802== at 0x4C2A593: operator new(unsigned long) (vg_replace_malloc.c:344); ==2802== by 0x1CA85F62: allocate (new_allocator.h:104); ==2802== by 0x1CA85F62: allocate (alloc_traits.h:491); ==2802== by 0x1CA85F62: _M_allocate (stl_vector.h:170); ==2802== by 0x1CA85F62: _M_fill_insert (vector.tcc:491); ==2802== by 0x1CA85F62: std::vector<long, std::allocator<long> >::insert(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, unsigned long, long const&) (stl_vector.h:1054); ==2802== by 0x1CA7E37F: resize (stl_vector.h:696); ==2802== by 0x1CA7E37F: psi::TwoBodyAOInt::create_sieve_pair_info(std::shared_ptr<psi::BasisSet>, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >&, bool) (twobody.cc:244); ```; This is a harmless copy construction of a vector that is well defined. I tried to remove the AVX2 code path using the [MKL options](https://software.intel.com/content/www/us/en/develop/documentation/onemkl-developer-reference-c/top/support-functions/miscellaneous/mkl-enable-instructions.html) but the problem persisted. Finding an old pre-AVX box and running on there did the trick, and Valg",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904787207
https://github.com/psi4/psi4/pull/2283#issuecomment-905661580:156,Availability,error,error,156,"fwiw, no difference in test system behavior between the two originally reported environments. Both fail to converge with nthreads=8 and show the same small error with nthreads=1. Psi is the 1.4 conda package, so bugfix in the PR not applied. MKLs and iomp5's in the 2019–2021 range. Defaults-based env has gomp present (been so since the gcc 7.3->7.5 transition a couple months ago) but it's not linked into psi or showing trouble. ```; (trial140def) psilocaluser@bash:psinet:/psi/gits/trial: conda list -n trial140def | grep -e gcc -e ""\-ng"" -e gomp -e mkl -e intel -e ""1\.4+94""; _libgcc_mutex 0.1 main ; blas 1.0 mkl ; intel-openmp 2021.3.0 h06a4308_3350 ; libgcc-ng 9.3.0 h5101ec6_17 ; libgfortran-ng 7.5.0 ha8ba4b0_17 ; libgomp 9.3.0 h5101ec6_17 ; libstdcxx-ng 9.3.0 hd4cf53a_17 ; mkl 2020.2 256 ; mkl-service 2.3.0 py38he904b0f_0 ; mkl_fft 1.3.0 py38h54f3939_0 ; mkl_random 1.1.1 py38h0573a6f_0 ; psi4 1.4+9485035 py38hd63c0ca_0 psi4; (trial140def) psilocaluser@bash:psinet:/psi/gits/trial: conda list -n trial140ana | grep -e gcc -e ""\-ng"" -e gomp -e mkl -e intel -e ""1\.4+94""; blas 1.0 mkl anaconda; intel-openmp 2020.2 254 anaconda; libgcc-ng 9.1.0 hdf63c60_0 anaconda; libgfortran-ng 7.3.0 hdf63c60_0 anaconda; libstdcxx-ng 9.1.0 hdf63c60_0 anaconda; mkl 2019.4 243 anaconda; mkl-service 2.3.0 py38he904b0f_0 anaconda; mkl_fft 1.2.0 py38h23d657b_0 anaconda; mkl_random 1.1.0 py38h962f231_0 anaconda; psi4 1.4+9485035 py38hd63c0ca_0 psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-905661580
https://github.com/psi4/psi4/pull/2283#issuecomment-905661580:23,Testability,test,test,23,"fwiw, no difference in test system behavior between the two originally reported environments. Both fail to converge with nthreads=8 and show the same small error with nthreads=1. Psi is the 1.4 conda package, so bugfix in the PR not applied. MKLs and iomp5's in the 2019–2021 range. Defaults-based env has gomp present (been so since the gcc 7.3->7.5 transition a couple months ago) but it's not linked into psi or showing trouble. ```; (trial140def) psilocaluser@bash:psinet:/psi/gits/trial: conda list -n trial140def | grep -e gcc -e ""\-ng"" -e gomp -e mkl -e intel -e ""1\.4+94""; _libgcc_mutex 0.1 main ; blas 1.0 mkl ; intel-openmp 2021.3.0 h06a4308_3350 ; libgcc-ng 9.3.0 h5101ec6_17 ; libgfortran-ng 7.5.0 ha8ba4b0_17 ; libgomp 9.3.0 h5101ec6_17 ; libstdcxx-ng 9.3.0 hd4cf53a_17 ; mkl 2020.2 256 ; mkl-service 2.3.0 py38he904b0f_0 ; mkl_fft 1.3.0 py38h54f3939_0 ; mkl_random 1.1.1 py38h0573a6f_0 ; psi4 1.4+9485035 py38hd63c0ca_0 psi4; (trial140def) psilocaluser@bash:psinet:/psi/gits/trial: conda list -n trial140ana | grep -e gcc -e ""\-ng"" -e gomp -e mkl -e intel -e ""1\.4+94""; blas 1.0 mkl anaconda; intel-openmp 2020.2 254 anaconda; libgcc-ng 9.1.0 hdf63c60_0 anaconda; libgfortran-ng 7.3.0 hdf63c60_0 anaconda; libstdcxx-ng 9.1.0 hdf63c60_0 anaconda; mkl 2019.4 243 anaconda; mkl-service 2.3.0 py38he904b0f_0 anaconda; mkl_fft 1.2.0 py38h23d657b_0 anaconda; mkl_random 1.1.0 py38h962f231_0 anaconda; psi4 1.4+9485035 py38hd63c0ca_0 psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-905661580
https://github.com/psi4/psi4/pull/2283#issuecomment-905701855:327,Availability,error,errors,327,"Thanks, @loriab. I have tried a number of things, including ensuring that MKL and libiomp5 from the native compilers are used instead of conda versions of those libs, and nothing seems to change the outcome of the unpatched code with multiple threads. It's worth noting that running on an non-AVX platform removes the Valgrind errors, but doesn't change the answer so I think they're probably just coming from AVX memmove somehow confusing Valgrind. At this point, my only guess is that perhaps some weird nested thread issue is maybe causing diagonalization issues, but I have no idea why that would be a problem for the unpatched code and not for the patched code. In case anybody wants to check the results, [here's a standalone code](https://github.com/andysim/DiagonalizationTest) that diagonalizes the exact same matrix, using the exact same LAPACK calls as the unpatched code. So far it looks like things are working in Psi4 after the fix, but I just wanted to document all of the suspicious behavior on this PR, in case we see similar problems in future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-905701855
https://github.com/psi4/psi4/pull/2283#issuecomment-905701855:653,Deployability,patch,patched,653,"Thanks, @loriab. I have tried a number of things, including ensuring that MKL and libiomp5 from the native compilers are used instead of conda versions of those libs, and nothing seems to change the outcome of the unpatched code with multiple threads. It's worth noting that running on an non-AVX platform removes the Valgrind errors, but doesn't change the answer so I think they're probably just coming from AVX memmove somehow confusing Valgrind. At this point, my only guess is that perhaps some weird nested thread issue is maybe causing diagonalization issues, but I have no idea why that would be a problem for the unpatched code and not for the patched code. In case anybody wants to check the results, [here's a standalone code](https://github.com/andysim/DiagonalizationTest) that diagonalizes the exact same matrix, using the exact same LAPACK calls as the unpatched code. So far it looks like things are working in Psi4 after the fix, but I just wanted to document all of the suspicious behavior on this PR, in case we see similar problems in future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-905701855
https://github.com/psi4/psi4/pull/2283#issuecomment-907677526:65,Integrability,rout,routines,65,"FWIW I think all DF codes should just call the orthogonalization routines in `orthog.cc`. You can use them either in the symmetric mode or the asymmetric mode. In the symmetric mode you contract with the matrix `X` that is produced by the orthogonalization; for the asymmetric one you can build the inverse matrix with `S^-1 = X X^T`. As I explain in [arXiv:2106.11081](http://arxiv.org/abs/2106.11081), this should eliminate any numerical instabilities from the density fitting routines.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-907677526
https://github.com/psi4/psi4/pull/2283#issuecomment-907677526:186,Integrability,contract,contract,186,"FWIW I think all DF codes should just call the orthogonalization routines in `orthog.cc`. You can use them either in the symmetric mode or the asymmetric mode. In the symmetric mode you contract with the matrix `X` that is produced by the orthogonalization; for the asymmetric one you can build the inverse matrix with `S^-1 = X X^T`. As I explain in [arXiv:2106.11081](http://arxiv.org/abs/2106.11081), this should eliminate any numerical instabilities from the density fitting routines.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-907677526
https://github.com/psi4/psi4/pull/2283#issuecomment-907677526:479,Integrability,rout,routines,479,"FWIW I think all DF codes should just call the orthogonalization routines in `orthog.cc`. You can use them either in the symmetric mode or the asymmetric mode. In the symmetric mode you contract with the matrix `X` that is produced by the orthogonalization; for the asymmetric one you can build the inverse matrix with `S^-1 = X X^T`. As I explain in [arXiv:2106.11081](http://arxiv.org/abs/2106.11081), this should eliminate any numerical instabilities from the density fitting routines.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-907677526
https://github.com/psi4/psi4/pull/2283#issuecomment-908421847:11,Usability,clear,clear,11,"Just to be clear, all _other_ code that used `general_invert` is still going to have numerical instabilities, even after this PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-908421847
https://github.com/psi4/psi4/pull/2283#issuecomment-926710761:810,Deployability,update,update,810,"Sorry, I missed your last question, @JonathonMisiewicz. Correct, there [is a bug in MKL](https://community.intel.com/t5/Intel-oneAPI-Math-Kernel-Library/Memory-data-race-problems-in-DGETRI/m-p/1313691) that is being fixed, so all `general_invert` calls are potentially vulnerable. I will note that many of the `general_invert` calls in the code give the correct answer still (including the one fixed in this PR, for many system sizes), as does the standalone code I used to report the issue. It looks like some kind of an uninitialized variable somewhere in Intel's kernels so it's likely to be context-dependent whether the right answer is returned. I'm pretty sure it's been present for at least the last few versions and we only just noticed it, so I suspect it's not that pervasive. Regardless, we need to update our MKL dependency as soon as the fix is published.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-926710761
https://github.com/psi4/psi4/pull/2283#issuecomment-926710761:603,Integrability,depend,dependent,603,"Sorry, I missed your last question, @JonathonMisiewicz. Correct, there [is a bug in MKL](https://community.intel.com/t5/Intel-oneAPI-Math-Kernel-Library/Memory-data-race-problems-in-DGETRI/m-p/1313691) that is being fixed, so all `general_invert` calls are potentially vulnerable. I will note that many of the `general_invert` calls in the code give the correct answer still (including the one fixed in this PR, for many system sizes), as does the standalone code I used to report the issue. It looks like some kind of an uninitialized variable somewhere in Intel's kernels so it's likely to be context-dependent whether the right answer is returned. I'm pretty sure it's been present for at least the last few versions and we only just noticed it, so I suspect it's not that pervasive. Regardless, we need to update our MKL dependency as soon as the fix is published.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-926710761
https://github.com/psi4/psi4/pull/2283#issuecomment-926710761:825,Integrability,depend,dependency,825,"Sorry, I missed your last question, @JonathonMisiewicz. Correct, there [is a bug in MKL](https://community.intel.com/t5/Intel-oneAPI-Math-Kernel-Library/Memory-data-race-problems-in-DGETRI/m-p/1313691) that is being fixed, so all `general_invert` calls are potentially vulnerable. I will note that many of the `general_invert` calls in the code give the correct answer still (including the one fixed in this PR, for many system sizes), as does the standalone code I used to report the issue. It looks like some kind of an uninitialized variable somewhere in Intel's kernels so it's likely to be context-dependent whether the right answer is returned. I'm pretty sure it's been present for at least the last few versions and we only just noticed it, so I suspect it's not that pervasive. Regardless, we need to update our MKL dependency as soon as the fix is published.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-926710761
https://github.com/psi4/psi4/pull/2283#issuecomment-926710761:536,Modifiability,variab,variable,536,"Sorry, I missed your last question, @JonathonMisiewicz. Correct, there [is a bug in MKL](https://community.intel.com/t5/Intel-oneAPI-Math-Kernel-Library/Memory-data-race-problems-in-DGETRI/m-p/1313691) that is being fixed, so all `general_invert` calls are potentially vulnerable. I will note that many of the `general_invert` calls in the code give the correct answer still (including the one fixed in this PR, for many system sizes), as does the standalone code I used to report the issue. It looks like some kind of an uninitialized variable somewhere in Intel's kernels so it's likely to be context-dependent whether the right answer is returned. I'm pretty sure it's been present for at least the last few versions and we only just noticed it, so I suspect it's not that pervasive. Regardless, we need to update our MKL dependency as soon as the fix is published.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-926710761
https://github.com/psi4/psi4/issues/2287#issuecomment-910161049:134,Availability,error,error,134,It means part of the coordinate input is not understood.; In this case H6 misses a decimal point in the z coordinate. Not sure if the error could be made more explicit by highlighting the specific line(s).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910161049
https://github.com/psi4/psi4/issues/2287#issuecomment-910170283:91,Availability,error,errors,91,Thank you. The input came from an xyz file sent to me and I hadn't thought to check it for errors.; But that psi4 error message would be much more helpful if translated into intelligible English.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910170283
https://github.com/psi4/psi4/issues/2287#issuecomment-910170283:114,Availability,error,error,114,Thank you. The input came from an xyz file sent to me and I hadn't thought to check it for errors.; But that psi4 error message would be much more helpful if translated into intelligible English.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910170283
https://github.com/psi4/psi4/issues/2287#issuecomment-910170283:120,Integrability,message,message,120,Thank you. The input came from an xyz file sent to me and I hadn't thought to check it for errors.; But that psi4 error message would be much more helpful if translated into intelligible English.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910170283
https://github.com/psi4/psi4/issues/2287#issuecomment-910282508:25,Availability,error,error,25,"It's not _really_ a Psi4 error message. Psi uses [QCElemental](https://github.com/MolSSI/QCElemental) for molecule parsing. It's QCElemental that raises the difficult error message, and it bubbles up through Psi. As such, I'm inclined to say this issue belongs on QCElemental's repo, not Psi's. @loriab is involved with both and is better equipped to judge where this belongs and whether it's even possible to identify the problematic line in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910282508
https://github.com/psi4/psi4/issues/2287#issuecomment-910282508:167,Availability,error,error,167,"It's not _really_ a Psi4 error message. Psi uses [QCElemental](https://github.com/MolSSI/QCElemental) for molecule parsing. It's QCElemental that raises the difficult error message, and it bubbles up through Psi. As such, I'm inclined to say this issue belongs on QCElemental's repo, not Psi's. @loriab is involved with both and is better equipped to judge where this belongs and whether it's even possible to identify the problematic line in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910282508
https://github.com/psi4/psi4/issues/2287#issuecomment-910282508:31,Integrability,message,message,31,"It's not _really_ a Psi4 error message. Psi uses [QCElemental](https://github.com/MolSSI/QCElemental) for molecule parsing. It's QCElemental that raises the difficult error message, and it bubbles up through Psi. As such, I'm inclined to say this issue belongs on QCElemental's repo, not Psi's. @loriab is involved with both and is better equipped to judge where this belongs and whether it's even possible to identify the problematic line in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910282508
https://github.com/psi4/psi4/issues/2287#issuecomment-910282508:173,Integrability,message,message,173,"It's not _really_ a Psi4 error message. Psi uses [QCElemental](https://github.com/MolSSI/QCElemental) for molecule parsing. It's QCElemental that raises the difficult error message, and it bubbles up through Psi. As such, I'm inclined to say this issue belongs on QCElemental's repo, not Psi's. @loriab is involved with both and is better equipped to judge where this belongs and whether it's even possible to identify the problematic line in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910282508
https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:168,Availability,error,error,168,"I understand now. It's supposed to print something like the below, which is helpful and intelligible. (I think -- can change the wording if there's a suggestion.) This error message _is_ raised, but because the parser tries all formats (e.g., xyz, psi4) in turn, when it fails them all, it raises an error message with the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723
https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:300,Availability,error,error,300,"I understand now. It's supposed to print something like the below, which is helpful and intelligible. (I think -- can change the wording if there's a suggestion.) This error message _is_ raised, but because the parser tries all formats (e.g., xyz, psi4) in turn, when it fails them all, it raises an error message with the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723
https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:383,Availability,error,error,383,"I understand now. It's supposed to print something like the below, which is helpful and intelligible. (I think -- can change the wording if there's a suggestion.) This error message _is_ raised, but because the parser tries all formats (e.g., xyz, psi4) in turn, when it fails them all, it raises an error message with the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723
https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:1118,Availability,error,error,1118,"change the wording if there's a suggestion.) This error message _is_ raised, but because the parser tries all formats (e.g., xyz, psi4) in turn, when it fails them all, it raises an error message with the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under [psi4, xyz, xyz+, psi4+]:; H6 1.51000000 0.78000000 0 44000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723
https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:174,Integrability,message,message,174,"I understand now. It's supposed to print something like the below, which is helpful and intelligible. (I think -- can change the wording if there's a suggestion.) This error message _is_ raised, but because the parser tries all formats (e.g., xyz, psi4) in turn, when it fails them all, it raises an error message with the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723
https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:306,Integrability,message,message,306,"I understand now. It's supposed to print something like the below, which is helpful and intelligible. (I think -- can change the wording if there's a suggestion.) This error message _is_ raised, but because the parser tries all formats (e.g., xyz, psi4) in turn, when it fails them all, it raises an error message with the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723
https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:389,Integrability,message,message,389,"I understand now. It's supposed to print something like the below, which is helpful and intelligible. (I think -- can change the wording if there's a suggestion.) This error message _is_ raised, but because the parser tries all formats (e.g., xyz, psi4) in turn, when it fails them all, it raises an error message with the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723
https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:1124,Integrability,message,message,1124,"change the wording if there's a suggestion.) This error message _is_ raised, but because the parser tries all formats (e.g., xyz, psi4) in turn, when it fails them all, it raises an error message with the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under [psi4, xyz, xyz+, psi4+]:; H6 1.51000000 0.78000000 0 44000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723
https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:1215,Integrability,message,message,1215," the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under [psi4, xyz, xyz+, psi4+]:; H6 1.51000000 0.78000000 0 44000000. Printing out the relevant lines from the Psithon --> Python processed input file:; H6 1.51000000 0.78000000 0 44000000; H7 2.97000000 1.82000000 0.70000000; H8 1.58000000 2.16000000 -0.43000000; """,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723
https://github.com/psi4/psi4/issues/2287#issuecomment-912474194:171,Deployability,update,update,171,"The code has been merged in, QCElemental-side. It won't be included until we have Psi use a version of QCElemental including that code, but we don't need any reminders to update Psi's QCElemental when they mint a new release, and there is nothing else we can do. Do you have any objections to closing the issue now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-912474194
https://github.com/psi4/psi4/issues/2287#issuecomment-912474194:217,Deployability,release,release,217,"The code has been merged in, QCElemental-side. It won't be included until we have Psi use a version of QCElemental including that code, but we don't need any reminders to update Psi's QCElemental when they mint a new release, and there is nothing else we can do. Do you have any objections to closing the issue now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-912474194
https://github.com/psi4/psi4/issues/2288#issuecomment-911433216:26,Deployability,release,release,26,"Please try the latest 1.4 release. 61K is the size of the aux basis, 12k basis functions in the orbital basis.; It is still a huge(!) calculation and PSI4 is not optimised to deal with that.; Usually negligible matrices can become large enough that our memory estimates are off.; Maybe the memory of your machine ran out. The aux basis can probably be reduced by 20K functions without loss in accuracy with some smart manipulations of the aux basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-911433216
https://github.com/psi4/psi4/issues/2288#issuecomment-911433216:352,Energy Efficiency,reduce,reduced,352,"Please try the latest 1.4 release. 61K is the size of the aux basis, 12k basis functions in the orbital basis.; It is still a huge(!) calculation and PSI4 is not optimised to deal with that.; Usually negligible matrices can become large enough that our memory estimates are off.; Maybe the memory of your machine ran out. The aux basis can probably be reduced by 20K functions without loss in accuracy with some smart manipulations of the aux basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-911433216
https://github.com/psi4/psi4/issues/2288#issuecomment-911486390:15,Usability,feedback,feedback,15,Thanks for the feedback! We are now re-running the calculation with Psi4 version 1.4. We gave the calculation 360GB of memory. It was run on an empty machine with 1.3 TBs of memory. The calculation does not have that many atomic orbitals (I think the number you cited @susilehtola is the auxilliary basis):; ```; Blend: AUG-CC-PVDZ + CC-PVDZ; Number of shells: 6379; Number of basis function: 12761; Number of Cartesian functions: 13293; Spherical Harmonics?: true; Max angular momentum: 2; ```. We have also run this calculation (with a conventional HF algorithm) using a development version of the eT program. It spends 15h in total and reaches a maximum memory usage of 84GB. The size of one one-electron matrix should be about 1.3 GB and each diagonalization takes approximately 150 seconds. These timings are with 44 threads.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-911486390
https://github.com/psi4/psi4/issues/2288#issuecomment-911507913:189,Availability,error,errors,189,"The overhead from density fitting can actually become detrimental for extended systems, especially for the exchange part.; (Newer DF algorithms improve here, but some also introduce larger errors). Direct conventional integrals or RI-J plus exact exchange work well extended systems. COSX is okay screening wise, too, and also coming to PSI4. Direct conventional integrals in PSI4; ```; scf_type direct; df_scf_guess false; ```. Our direct SCF is not the fastest (improvements also coming here) and `ints_tolerance 1e-12` and `d_convergence 1e-6` are also both conservative and can be tweaked.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-911507913
https://github.com/psi4/psi4/issues/2288#issuecomment-911507913:70,Modifiability,extend,extended,70,"The overhead from density fitting can actually become detrimental for extended systems, especially for the exchange part.; (Newer DF algorithms improve here, but some also introduce larger errors). Direct conventional integrals or RI-J plus exact exchange work well extended systems. COSX is okay screening wise, too, and also coming to PSI4. Direct conventional integrals in PSI4; ```; scf_type direct; df_scf_guess false; ```. Our direct SCF is not the fastest (improvements also coming here) and `ints_tolerance 1e-12` and `d_convergence 1e-6` are also both conservative and can be tweaked.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-911507913
https://github.com/psi4/psi4/issues/2288#issuecomment-911507913:266,Modifiability,extend,extended,266,"The overhead from density fitting can actually become detrimental for extended systems, especially for the exchange part.; (Newer DF algorithms improve here, but some also introduce larger errors). Direct conventional integrals or RI-J plus exact exchange work well extended systems. COSX is okay screening wise, too, and also coming to PSI4. Direct conventional integrals in PSI4; ```; scf_type direct; df_scf_guess false; ```. Our direct SCF is not the fastest (improvements also coming here) and `ints_tolerance 1e-12` and `d_convergence 1e-6` are also both conservative and can be tweaked.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-911507913
https://github.com/psi4/psi4/issues/2288#issuecomment-912333542:0,Deployability,Update,Update,0,Update: The calculation crashed in the same way when using Psi4 1.4 (Git: Rev {master} 9485035). . Thanks for the suggestions! Is it possible to request RI-J plus exact exchange in Psi4? I was not able to find it in the manual.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-912333542
https://github.com/psi4/psi4/issues/2288#issuecomment-921605913:52,Availability,avail,available,52,"As far as I can tell, there should be enough memory available (360 GB given in the input, 1.3 TB on the machine) to keep many Fock matrices in memory here (which are 1.3 GB each). You might run out of memory if the implementation is storing matrices that have a higher scaling (e.g. N^3) or a higher prefactor in N^2. If this is the case, an error message could be helpful to users. I would be worried about a bug if the largest matrices that are kept in memory is supposed to be N_ao^2. Could be useful tracking it down if it means one can then run DF-calculations in Psi4 on systems with more than 10000 AOs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-921605913
https://github.com/psi4/psi4/issues/2288#issuecomment-921605913:342,Availability,error,error,342,"As far as I can tell, there should be enough memory available (360 GB given in the input, 1.3 TB on the machine) to keep many Fock matrices in memory here (which are 1.3 GB each). You might run out of memory if the implementation is storing matrices that have a higher scaling (e.g. N^3) or a higher prefactor in N^2. If this is the case, an error message could be helpful to users. I would be worried about a bug if the largest matrices that are kept in memory is supposed to be N_ao^2. Could be useful tracking it down if it means one can then run DF-calculations in Psi4 on systems with more than 10000 AOs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-921605913
https://github.com/psi4/psi4/issues/2288#issuecomment-921605913:516,Availability,down,down,516,"As far as I can tell, there should be enough memory available (360 GB given in the input, 1.3 TB on the machine) to keep many Fock matrices in memory here (which are 1.3 GB each). You might run out of memory if the implementation is storing matrices that have a higher scaling (e.g. N^3) or a higher prefactor in N^2. If this is the case, an error message could be helpful to users. I would be worried about a bug if the largest matrices that are kept in memory is supposed to be N_ao^2. Could be useful tracking it down if it means one can then run DF-calculations in Psi4 on systems with more than 10000 AOs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-921605913
https://github.com/psi4/psi4/issues/2288#issuecomment-921605913:348,Integrability,message,message,348,"As far as I can tell, there should be enough memory available (360 GB given in the input, 1.3 TB on the machine) to keep many Fock matrices in memory here (which are 1.3 GB each). You might run out of memory if the implementation is storing matrices that have a higher scaling (e.g. N^3) or a higher prefactor in N^2. If this is the case, an error message could be helpful to users. I would be worried about a bug if the largest matrices that are kept in memory is supposed to be N_ao^2. Could be useful tracking it down if it means one can then run DF-calculations in Psi4 on systems with more than 10000 AOs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-921605913
https://github.com/psi4/psi4/issues/2289#issuecomment-916903299:23,Testability,test,test,23,"My attempts to write a test failed, for the simple reason that I can't converge some of the SCFs. I'm adding EDIIS and ADIIS support before attempting this again. I'm not sure about ADIIS, but EDIIS works for fractional occupation SCF according to the original paper, so I can use that to make the problem easier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2289#issuecomment-916903299
https://github.com/psi4/psi4/issues/2289#issuecomment-916903299:44,Usability,simpl,simple,44,"My attempts to write a test failed, for the simple reason that I can't converge some of the SCFs. I'm adding EDIIS and ADIIS support before attempting this again. I'm not sure about ADIIS, but EDIIS works for fractional occupation SCF according to the original paper, so I can use that to make the problem easier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2289#issuecomment-916903299
https://github.com/psi4/psi4/issues/2291#issuecomment-916338339:818,Security,access,accessible,818,"Please, can you provide an input file?. Anyway, I think the problem here is that in the IBO localization procedure, one uses a different basis set than for the whole calculation - and the minimal atomic orbital basis set `cc-pvtz-minao` likely doesn't have definitions for iodine. You can override the default by setting the `minao_basis` keyword to something that's defined for iodine. I would imagine that with an overall `def2-tzvp` basis set, you'd still want to use the same ECP for the localization procedure, so try with `set minao_basis def2-svp`. This makes a calculation including iodine complete without crashing on my PC, but whether the results are physical, I cannot tell. @loriab: Note that the tutorial video mentioned [here](https://psicode.org/psi4manual/master/fisapt.html#f-i-sapt-keywords) is not accessible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2291#issuecomment-916338339
https://github.com/psi4/psi4/issues/2294#issuecomment-920805274:120,Availability,error,error,120,"A traceback is never adequate information for a bug report. We need a Psi4 version number, exact steps to reproduce the error, and need to know what operating system you're using.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-920805274
https://github.com/psi4/psi4/issues/2294#issuecomment-921085607:93,Availability,error,error,93,"Hi. We run jupyter in a container. writing: import psi4; in a cell and then run it gives the error message (repeated at the ; bottom of mail). operating system:; NAME=""Ubuntu""; VERSION=""18.04.5 LTS (Bionic Beaver)"". psi4 version: 1.4+9485035. and. Python version = 3.9.6 | packaged by conda-forge | (default, Jul 11 ; 2021, 03:39:48); [GCC 9.3.0]; IPython version = 7.26.0. best regards; Sissel. ---------------------------------------------------------------------------; ImportError Traceback (most recent call ; last); /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 54 try:; ---> 55 from . import core; 56 except ImportError as err:. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call ; last); /tmp/ipykernel_64/253247311.py in <module>; ----> 1 import psi4. /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 58 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in ; [DY]LD_LIBRARY_PATH"".format(err)); 59 else:; ---> 60 raise ImportError(""{0}"".format(err)); 61; 62 from psi4.core import set_output_file, get_num_threads, ; set_num_threads. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. On 2021-09-16 13:08, Jonathon Misiewicz wrote:; > A traceback is never adequate information for a bug report.; > ; > We need a Psi4 version number, exact steps to reproduce the error, and; > need to know what operating system you're using.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub [1], or unsubscribe; > [2].; > Triage notifications on the go with GitHub Mobile for iOS [3] or; > Android [4].; > ; > Links:; > ------; > [1] https://github.com/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-921085607
https://github.com/psi4/psi4/issues/2294#issuecomment-921085607:1656,Availability,error,error,1656,"--------------------------------------------------; ImportError Traceback (most recent call ; last); /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 54 try:; ---> 55 from . import core; 56 except ImportError as err:. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call ; last); /tmp/ipykernel_64/253247311.py in <module>; ----> 1 import psi4. /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 58 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in ; [DY]LD_LIBRARY_PATH"".format(err)); 59 else:; ---> 60 raise ImportError(""{0}"".format(err)); 61; 62 from psi4.core import set_output_file, get_num_threads, ; set_num_threads. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. On 2021-09-16 13:08, Jonathon Misiewicz wrote:; > A traceback is never adequate information for a bug report.; > ; > We need a Psi4 version number, exact steps to reproduce the error, and; > need to know what operating system you're using.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub [1], or unsubscribe; > [2].; > Triage notifications on the go with GitHub Mobile for iOS [3] or; > Android [4].; > ; > Links:; > ------; > [1] https://github.com/psi4/psi4/issues/2294#issuecomment-920805274; > [2]; > https://github.com/notifications/unsubscribe-auth/AENL3I6BPHZOPNVWELB2ITDUCHF2TANCNFSM5EEDQMYA; > [3]; > https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&amp;mt=8&amp;pt=524675; > [4]; > https://play.google.com/store/apps/details?id=com.github.android&amp;referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-921085607
https://github.com/psi4/psi4/issues/2294#issuecomment-921085607:99,Integrability,message,message,99,"Hi. We run jupyter in a container. writing: import psi4; in a cell and then run it gives the error message (repeated at the ; bottom of mail). operating system:; NAME=""Ubuntu""; VERSION=""18.04.5 LTS (Bionic Beaver)"". psi4 version: 1.4+9485035. and. Python version = 3.9.6 | packaged by conda-forge | (default, Jul 11 ; 2021, 03:39:48); [GCC 9.3.0]; IPython version = 7.26.0. best regards; Sissel. ---------------------------------------------------------------------------; ImportError Traceback (most recent call ; last); /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 54 try:; ---> 55 from . import core; 56 except ImportError as err:. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call ; last); /tmp/ipykernel_64/253247311.py in <module>; ----> 1 import psi4. /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 58 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in ; [DY]LD_LIBRARY_PATH"".format(err)); 59 else:; ---> 60 raise ImportError(""{0}"".format(err)); 61; 62 from psi4.core import set_output_file, get_num_threads, ; set_num_threads. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. On 2021-09-16 13:08, Jonathon Misiewicz wrote:; > A traceback is never adequate information for a bug report.; > ; > We need a Psi4 version number, exact steps to reproduce the error, and; > need to know what operating system you're using.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub [1], or unsubscribe; > [2].; > Triage notifications on the go with GitHub Mobile for iOS [3] or; > Android [4].; > ; > Links:; > ------; > [1] https://github.com/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-921085607
https://github.com/psi4/psi4/issues/2294#issuecomment-921318629:142,Integrability,depend,dependencies,142,"I can reproduce this on my Mac, but the problem there is obviously that my Jupyter notebook isn't using the conda environment which has Psi's dependencies. I recommend you look into the interaction between Jupyter and conda environments. I doubt this is a bug in Psi4. I won't be able to delve further into this for a few more days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-921318629
https://github.com/psi4/psi4/issues/2294#issuecomment-1054328789:265,Deployability,install,install,265,For anyone else running into this. Having some packages from `-c conda-forge` and some from the main channel can lead to this issue. I had -c conda-forge set as a preferred channel and had to turn it off to resolve this issue. Create a new environment in conda and install psi4 separately to avoid relying on other packages from -c conda-forge.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-1054328789
https://github.com/psi4/psi4/issues/2294#issuecomment-1054328789:292,Safety,avoid,avoid,292,For anyone else running into this. Having some packages from `-c conda-forge` and some from the main channel can lead to this issue. I had -c conda-forge set as a preferred channel and had to turn it off to resolve this issue. Create a new environment in conda and install psi4 separately to avoid relying on other packages from -c conda-forge.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-1054328789
https://github.com/psi4/psi4/issues/2297#issuecomment-924958424:52,Integrability,message,message,52,"The ""one word"" in the terminal is probably a system message that psi4 was killed off for some reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-924958424
https://github.com/psi4/psi4/issues/2297#issuecomment-924997018:98,Integrability,message,messages,98,Is it possible that your computer ran out of memory?; Check dmesg after running it for oom-killer messages.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-924997018
https://github.com/psi4/psi4/issues/2297#issuecomment-925013890:32,Availability,error,error,32,"When I run this input file, the error message I get is `Killed: 9` which [often signifies being out of memory](https://stackoverflow.com/a/33978359). You've only allowed 2GB RAM for the entire program. We also know `DFHelper Memory: AOs need 0.898 GiB`. I haven't looked at the analytic hessian code, but being out of memory seems like the most likely culprit here. We can add ""get memory estimate of analytic hessian and reduce if possible"" to our to-do list, but for your computation, all you can do is give it more memory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925013890
https://github.com/psi4/psi4/issues/2297#issuecomment-925013890:422,Energy Efficiency,reduce,reduce,422,"When I run this input file, the error message I get is `Killed: 9` which [often signifies being out of memory](https://stackoverflow.com/a/33978359). You've only allowed 2GB RAM for the entire program. We also know `DFHelper Memory: AOs need 0.898 GiB`. I haven't looked at the analytic hessian code, but being out of memory seems like the most likely culprit here. We can add ""get memory estimate of analytic hessian and reduce if possible"" to our to-do list, but for your computation, all you can do is give it more memory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925013890
https://github.com/psi4/psi4/issues/2297#issuecomment-925013890:38,Integrability,message,message,38,"When I run this input file, the error message I get is `Killed: 9` which [often signifies being out of memory](https://stackoverflow.com/a/33978359). You've only allowed 2GB RAM for the entire program. We also know `DFHelper Memory: AOs need 0.898 GiB`. I haven't looked at the analytic hessian code, but being out of memory seems like the most likely culprit here. We can add ""get memory estimate of analytic hessian and reduce if possible"" to our to-do list, but for your computation, all you can do is give it more memory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925013890
https://github.com/psi4/psi4/issues/2297#issuecomment-925160079:6218,Energy Efficiency,Energy,Energy,6218,"J/(mol K)] 0.00000000 [mEh/K]. Constant volume heat capacity, Cv; Electronic Cv 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]; Translational Cv 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Rotational Cv 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cv 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cv 64.732 [cal/(mol K)] 270.838 [J/(mol K)] 0.10315665 [mEh/K]; Correction Cv 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. Constant pressure heat capacity, Cp; Electronic Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]; Translational Cp 4.968 [cal/(mol K)] 20.786 [J/(mol K)] 0.00791703 [mEh/K]; Rotational Cp 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cp 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cp 66.719 [cal/(mol K)] 279.152 [J/(mol K)] 0.10632347 [mEh/K]; Correction Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -1226.44775184 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Correction ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -1226.18577804 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction E 175.804 [kcal/mol] 735.566 [kJ/mol] 0.28016212 [Eh]; Total E, Electronic energy at 298.15 [K] -1226.1675",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079
https://github.com/psi4/psi4/issues/2297#issuecomment-925160079:6254,Energy Efficiency,energy,energy,6254,"; Electronic Cv 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]; Translational Cv 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Rotational Cv 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cv 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cv 64.732 [cal/(mol K)] 270.838 [J/(mol K)] 0.10315665 [mEh/K]; Correction Cv 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. Constant pressure heat capacity, Cp; Electronic Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]; Translational Cp 4.968 [cal/(mol K)] 20.786 [J/(mol K)] 0.00791703 [mEh/K]; Rotational Cp 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cp 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cp 66.719 [cal/(mol K)] 279.152 [J/(mol K)] 0.10632347 [mEh/K]; Correction Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -1226.44775184 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Correction ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -1226.18577804 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction E 175.804 [kcal/mol] 735.566 [kJ/mol] 0.28016212 [Eh]; Total E, Electronic energy at 298.15 [K] -1226.16758972 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079
https://github.com/psi4/psi4/issues/2297#issuecomment-925160079:6287,Energy Efficiency,energy,energy,6287,"; Electronic Cv 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]; Translational Cv 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Rotational Cv 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cv 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cv 64.732 [cal/(mol K)] 270.838 [J/(mol K)] 0.10315665 [mEh/K]; Correction Cv 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. Constant pressure heat capacity, Cp; Electronic Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]; Translational Cp 4.968 [cal/(mol K)] 20.786 [J/(mol K)] 0.00791703 [mEh/K]; Rotational Cp 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cp 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cp 66.719 [cal/(mol K)] 279.152 [J/(mol K)] 0.10632347 [mEh/K]; Correction Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -1226.44775184 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Correction ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -1226.18577804 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction E 175.804 [kcal/mol] 735.566 [kJ/mol] 0.28016212 [Eh]; Total E, Electronic energy at 298.15 [K] -1226.16758972 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079
https://github.com/psi4/psi4/issues/2297#issuecomment-925160079:6350,Energy Efficiency,energy,energy,6350,"Cv 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Rotational Cv 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cv 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cv 64.732 [cal/(mol K)] 270.838 [J/(mol K)] 0.10315665 [mEh/K]; Correction Cv 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. Constant pressure heat capacity, Cp; Electronic Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]; Translational Cp 4.968 [cal/(mol K)] 20.786 [J/(mol K)] 0.00791703 [mEh/K]; Rotational Cp 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cp 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cp 66.719 [cal/(mol K)] 279.152 [J/(mol K)] 0.10632347 [mEh/K]; Correction Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -1226.44775184 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Correction ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -1226.18577804 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction E 175.804 [kcal/mol] 735.566 [kJ/mol] 0.28016212 [Eh]; Total E, Electronic energy at 298.15 [K] -1226.16758972 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079
https://github.com/psi4/psi4/issues/2297#issuecomment-925160079:6774,Energy Efficiency,energy,energy,6774,"ic Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]; Translational Cp 4.968 [cal/(mol K)] 20.786 [J/(mol K)] 0.00791703 [mEh/K]; Rotational Cp 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cp 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cp 66.719 [cal/(mol K)] 279.152 [J/(mol K)] 0.10632347 [mEh/K]; Correction Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -1226.44775184 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Correction ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -1226.18577804 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction E 175.804 [kcal/mol] 735.566 [kJ/mol] 0.28016212 [Eh]; Total E, Electronic energy at 298.15 [K] -1226.16758972 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction H 176.397 [kcal/mol] 738.044 [kJ/mol] 0.28110630 [Eh]; Total H, Enthalpy at 298.15 [K] -1226.16664554 [Eh]. Gibbs free energy, G = H - T * S; Electronic G 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational G -11.260 [kcal",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079
https://github.com/psi4/psi4/issues/2297#issuecomment-925160079:6819,Energy Efficiency,Energy,Energy,6819,"slational Cp 4.968 [cal/(mol K)] 20.786 [J/(mol K)] 0.00791703 [mEh/K]; Rotational Cp 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cp 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cp 66.719 [cal/(mol K)] 279.152 [J/(mol K)] 0.10632347 [mEh/K]; Correction Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -1226.44775184 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Correction ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -1226.18577804 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction E 175.804 [kcal/mol] 735.566 [kJ/mol] 0.28016212 [Eh]; Total E, Electronic energy at 298.15 [K] -1226.16758972 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction H 176.397 [kcal/mol] 738.044 [kJ/mol] 0.28110630 [Eh]; Total H, Enthalpy at 298.15 [K] -1226.16664554 [Eh]. Gibbs free energy, G = H - T * S; Electronic G 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational G -11.260 [kcal/mol] -47.112 [kJ/mol] -0.01794389 [Eh]; Rotational G -9.357 [kcal/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079
https://github.com/psi4/psi4/issues/2297#issuecomment-925160079:7187,Energy Efficiency,energy,energy,7187,"19 [cal/(mol K)] 279.152 [J/(mol K)] 0.10632347 [mEh/K]; Correction Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -1226.44775184 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Correction ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -1226.18577804 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction E 175.804 [kcal/mol] 735.566 [kJ/mol] 0.28016212 [Eh]; Total E, Electronic energy at 298.15 [K] -1226.16758972 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction H 176.397 [kcal/mol] 738.044 [kJ/mol] 0.28110630 [Eh]; Total H, Enthalpy at 298.15 [K] -1226.16664554 [Eh]. Gibbs free energy, G = H - T * S; Electronic G 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational G -11.260 [kcal/mol] -47.112 [kJ/mol] -0.01794389 [Eh]; Rotational G -9.357 [kcal/mol] -39.149 [kJ/mol] -0.01491116 [Eh]; Vibrational G 153.839 [kcal/mol] 643.664 [kJ/mol] 0.24515871 [Eh]; Correction G 133.223 [kcal/mol] 557.403 [kJ/mol] 0.21230366 [Eh]; Total G, Free enthalpy at 298.15 [K] -1226.23544818 [Eh]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079
https://github.com/psi4/psi4/issues/2297#issuecomment-925160079:7654,Energy Efficiency,energy,energy,7654,"19 [cal/(mol K)] 279.152 [J/(mol K)] 0.10632347 [mEh/K]; Correction Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -1226.44775184 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Correction ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -1226.18577804 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction E 175.804 [kcal/mol] 735.566 [kJ/mol] 0.28016212 [Eh]; Total E, Electronic energy at 298.15 [K] -1226.16758972 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction H 176.397 [kcal/mol] 738.044 [kJ/mol] 0.28110630 [Eh]; Total H, Enthalpy at 298.15 [K] -1226.16664554 [Eh]. Gibbs free energy, G = H - T * S; Electronic G 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational G -11.260 [kcal/mol] -47.112 [kJ/mol] -0.01794389 [Eh]; Rotational G -9.357 [kcal/mol] -39.149 [kJ/mol] -0.01491116 [Eh]; Vibrational G 153.839 [kcal/mol] 643.664 [kJ/mol] 0.24515871 [Eh]; Correction G 133.223 [kcal/mol] 557.403 [kJ/mol] 0.21230366 [Eh]; Total G, Free enthalpy at 298.15 [K] -1226.23544818 [Eh]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079
https://github.com/psi4/psi4/issues/2297#issuecomment-925261234:242,Integrability,message,messages,242,> ; > ; > Thank you all for the responses. It was the first time the terminal gave me non English response. I also did not know the trick with dmesg indicated by @TiborGY. Please note that the kernel log (dmesg) will only show the OOM-killer messages if the *entire computer* ran out of memory (as in RAM+swap).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925261234
https://github.com/psi4/psi4/issues/2297#issuecomment-925261234:200,Testability,log,log,200,> ; > ; > Thank you all for the responses. It was the first time the terminal gave me non English response. I also did not know the trick with dmesg indicated by @TiborGY. Please note that the kernel log (dmesg) will only show the OOM-killer messages if the *entire computer* ran out of memory (as in RAM+swap).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925261234
https://github.com/psi4/psi4/issues/2299#issuecomment-926645575:157,Availability,avail,available,157,"Good point -- @jeffschriber understands the issue and plans to address it sometime. The summary is that the new MBIS volume ratio functionality is only half available. The `energy(); oeprop(..., ""MBIS_VOLUME_RATIOS"")` route is fine, but `set scf_properties [mbis_volume_ratios]; energy()` fails b/c some necessary data (free atom volumes) isn't available. This isn't a regression. It'd just be nice to even up the capabilities, esp. as a qcschema run can only use the second form.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-926645575
https://github.com/psi4/psi4/issues/2299#issuecomment-926645575:345,Availability,avail,available,345,"Good point -- @jeffschriber understands the issue and plans to address it sometime. The summary is that the new MBIS volume ratio functionality is only half available. The `energy(); oeprop(..., ""MBIS_VOLUME_RATIOS"")` route is fine, but `set scf_properties [mbis_volume_ratios]; energy()` fails b/c some necessary data (free atom volumes) isn't available. This isn't a regression. It'd just be nice to even up the capabilities, esp. as a qcschema run can only use the second form.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-926645575
https://github.com/psi4/psi4/issues/2299#issuecomment-926645575:173,Energy Efficiency,energy,energy,173,"Good point -- @jeffschriber understands the issue and plans to address it sometime. The summary is that the new MBIS volume ratio functionality is only half available. The `energy(); oeprop(..., ""MBIS_VOLUME_RATIOS"")` route is fine, but `set scf_properties [mbis_volume_ratios]; energy()` fails b/c some necessary data (free atom volumes) isn't available. This isn't a regression. It'd just be nice to even up the capabilities, esp. as a qcschema run can only use the second form.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-926645575
https://github.com/psi4/psi4/issues/2299#issuecomment-926645575:279,Energy Efficiency,energy,energy,279,"Good point -- @jeffschriber understands the issue and plans to address it sometime. The summary is that the new MBIS volume ratio functionality is only half available. The `energy(); oeprop(..., ""MBIS_VOLUME_RATIOS"")` route is fine, but `set scf_properties [mbis_volume_ratios]; energy()` fails b/c some necessary data (free atom volumes) isn't available. This isn't a regression. It'd just be nice to even up the capabilities, esp. as a qcschema run can only use the second form.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-926645575
https://github.com/psi4/psi4/issues/2299#issuecomment-926645575:218,Integrability,rout,route,218,"Good point -- @jeffschriber understands the issue and plans to address it sometime. The summary is that the new MBIS volume ratio functionality is only half available. The `energy(); oeprop(..., ""MBIS_VOLUME_RATIOS"")` route is fine, but `set scf_properties [mbis_volume_ratios]; energy()` fails b/c some necessary data (free atom volumes) isn't available. This isn't a regression. It'd just be nice to even up the capabilities, esp. as a qcschema run can only use the second form.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-926645575
https://github.com/psi4/psi4/issues/2299#issuecomment-982487534:236,Availability,error,error,236,"@loriab @jeffschriber Hi is there any update on this issue as it is breaking a workflow I have where I calculate MBIS charges using wavefunctions stored in QCArchive the attached script shows how this works and results in the following error when using psi4-1.4.1.; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; Computing free-atom volumes; Traceback (most recent call last):; File ""charges_from_wavefunction.py"", line 72, in <module>; psi4.oeprop(hf_wfn, ""MBIS_CHARGES""); File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); ; File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/prop_util.py"", line 54, in free_atom_volumes; current_en = wfn.scalar_variable('CURRENT ENERGY'); RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable CURRENT ENERGY was not set!. Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1633712094436/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; The most recent 5 function calls were:; ```. [charges_from_wavefunction.txt](https://github.com/psi4/psi4/files/7624873/charges_from_wavefunction.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534
https://github.com/psi4/psi4/issues/2299#issuecomment-982487534:861,Availability,Error,Error,861,"@loriab @jeffschriber Hi is there any update on this issue as it is breaking a workflow I have where I calculate MBIS charges using wavefunctions stored in QCArchive the attached script shows how this works and results in the following error when using psi4-1.4.1.; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; Computing free-atom volumes; Traceback (most recent call last):; File ""charges_from_wavefunction.py"", line 72, in <module>; psi4.oeprop(hf_wfn, ""MBIS_CHARGES""); File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); ; File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/prop_util.py"", line 54, in free_atom_volumes; current_en = wfn.scalar_variable('CURRENT ENERGY'); RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable CURRENT ENERGY was not set!. Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1633712094436/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; The most recent 5 function calls were:; ```. [charges_from_wavefunction.txt](https://github.com/psi4/psi4/files/7624873/charges_from_wavefunction.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534
https://github.com/psi4/psi4/issues/2299#issuecomment-982487534:947,Availability,Error,Error,947,"@loriab @jeffschriber Hi is there any update on this issue as it is breaking a workflow I have where I calculate MBIS charges using wavefunctions stored in QCArchive the attached script shows how this works and results in the following error when using psi4-1.4.1.; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; Computing free-atom volumes; Traceback (most recent call last):; File ""charges_from_wavefunction.py"", line 72, in <module>; psi4.oeprop(hf_wfn, ""MBIS_CHARGES""); File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); ; File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/prop_util.py"", line 54, in free_atom_volumes; current_en = wfn.scalar_variable('CURRENT ENERGY'); RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable CURRENT ENERGY was not set!. Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1633712094436/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; The most recent 5 function calls were:; ```. [charges_from_wavefunction.txt](https://github.com/psi4/psi4/files/7624873/charges_from_wavefunction.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534
https://github.com/psi4/psi4/issues/2299#issuecomment-982487534:38,Deployability,update,update,38,"@loriab @jeffschriber Hi is there any update on this issue as it is breaking a workflow I have where I calculate MBIS charges using wavefunctions stored in QCArchive the attached script shows how this works and results in the following error when using psi4-1.4.1.; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; Computing free-atom volumes; Traceback (most recent call last):; File ""charges_from_wavefunction.py"", line 72, in <module>; psi4.oeprop(hf_wfn, ""MBIS_CHARGES""); File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); ; File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/prop_util.py"", line 54, in free_atom_volumes; current_en = wfn.scalar_variable('CURRENT ENERGY'); RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable CURRENT ENERGY was not set!. Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1633712094436/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; The most recent 5 function calls were:; ```. [charges_from_wavefunction.txt](https://github.com/psi4/psi4/files/7624873/charges_from_wavefunction.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534
https://github.com/psi4/psi4/issues/2299#issuecomment-982487534:118,Energy Efficiency,charge,charges,118,"@loriab @jeffschriber Hi is there any update on this issue as it is breaking a workflow I have where I calculate MBIS charges using wavefunctions stored in QCArchive the attached script shows how this works and results in the following error when using psi4-1.4.1.; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; Computing free-atom volumes; Traceback (most recent call last):; File ""charges_from_wavefunction.py"", line 72, in <module>; psi4.oeprop(hf_wfn, ""MBIS_CHARGES""); File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); ; File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/prop_util.py"", line 54, in free_atom_volumes; current_en = wfn.scalar_variable('CURRENT ENERGY'); RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable CURRENT ENERGY was not set!. Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1633712094436/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; The most recent 5 function calls were:; ```. [charges_from_wavefunction.txt](https://github.com/psi4/psi4/files/7624873/charges_from_wavefunction.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534
https://github.com/psi4/psi4/issues/2299#issuecomment-982487534:829,Energy Efficiency,ENERGY,ENERGY,829,"@loriab @jeffschriber Hi is there any update on this issue as it is breaking a workflow I have where I calculate MBIS charges using wavefunctions stored in QCArchive the attached script shows how this works and results in the following error when using psi4-1.4.1.; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; Computing free-atom volumes; Traceback (most recent call last):; File ""charges_from_wavefunction.py"", line 72, in <module>; psi4.oeprop(hf_wfn, ""MBIS_CHARGES""); File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); ; File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/prop_util.py"", line 54, in free_atom_volumes; current_en = wfn.scalar_variable('CURRENT ENERGY'); RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable CURRENT ENERGY was not set!. Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1633712094436/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; The most recent 5 function calls were:; ```. [charges_from_wavefunction.txt](https://github.com/psi4/psi4/files/7624873/charges_from_wavefunction.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534
https://github.com/psi4/psi4/issues/2299#issuecomment-982487534:926,Energy Efficiency,ENERGY,ENERGY,926,"@loriab @jeffschriber Hi is there any update on this issue as it is breaking a workflow I have where I calculate MBIS charges using wavefunctions stored in QCArchive the attached script shows how this works and results in the following error when using psi4-1.4.1.; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; Computing free-atom volumes; Traceback (most recent call last):; File ""charges_from_wavefunction.py"", line 72, in <module>; psi4.oeprop(hf_wfn, ""MBIS_CHARGES""); File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); ; File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/prop_util.py"", line 54, in free_atom_volumes; current_en = wfn.scalar_variable('CURRENT ENERGY'); RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable CURRENT ENERGY was not set!. Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1633712094436/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; The most recent 5 function calls were:; ```. [charges_from_wavefunction.txt](https://github.com/psi4/psi4/files/7624873/charges_from_wavefunction.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534
https://github.com/psi4/psi4/issues/2299#issuecomment-982487534:909,Modifiability,variab,variable,909,"@loriab @jeffschriber Hi is there any update on this issue as it is breaking a workflow I have where I calculate MBIS charges using wavefunctions stored in QCArchive the attached script shows how this works and results in the following error when using psi4-1.4.1.; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; Computing free-atom volumes; Traceback (most recent call last):; File ""charges_from_wavefunction.py"", line 72, in <module>; psi4.oeprop(hf_wfn, ""MBIS_CHARGES""); File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); ; File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/prop_util.py"", line 54, in free_atom_volumes; current_en = wfn.scalar_variable('CURRENT ENERGY'); RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable CURRENT ENERGY was not set!. Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1633712094436/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; The most recent 5 function calls were:; ```. [charges_from_wavefunction.txt](https://github.com/psi4/psi4/files/7624873/charges_from_wavefunction.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534
https://github.com/psi4/psi4/issues/2299#issuecomment-984168833:131,Energy Efficiency,charge,charges,131,"Hm, this is a bit odd. The failing function (`free_atom_volumes(wfn)`) really shouldn't be called since you're only requesting the charges. I've created a PR to fix this, in addition to fixing the larger issue with computing MBIS volume ratios via scf_properties. Interestingly, this code fails in your case since you pass a wavefunction to oeprop that doesn't have 'CURRENT ENERGY' as a set variable. My PR doesn't address that, though I could help out if you also want to compute the volume ratios.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-984168833
https://github.com/psi4/psi4/issues/2299#issuecomment-984168833:375,Energy Efficiency,ENERGY,ENERGY,375,"Hm, this is a bit odd. The failing function (`free_atom_volumes(wfn)`) really shouldn't be called since you're only requesting the charges. I've created a PR to fix this, in addition to fixing the larger issue with computing MBIS volume ratios via scf_properties. Interestingly, this code fails in your case since you pass a wavefunction to oeprop that doesn't have 'CURRENT ENERGY' as a set variable. My PR doesn't address that, though I could help out if you also want to compute the volume ratios.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-984168833
https://github.com/psi4/psi4/issues/2299#issuecomment-984168833:392,Modifiability,variab,variable,392,"Hm, this is a bit odd. The failing function (`free_atom_volumes(wfn)`) really shouldn't be called since you're only requesting the charges. I've created a PR to fix this, in addition to fixing the larger issue with computing MBIS volume ratios via scf_properties. Interestingly, this code fails in your case since you pass a wavefunction to oeprop that doesn't have 'CURRENT ENERGY' as a set variable. My PR doesn't address that, though I could help out if you also want to compute the volume ratios.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-984168833
https://github.com/psi4/psi4/issues/2299#issuecomment-985342525:77,Energy Efficiency,charge,charges,77,@jeffschriber Thanks for the quick fix this unblocks a lot of work! and mbis charges should be fine for now thanks.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-985342525
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1026,Availability,down,downgrade,1026,"re lots o' blockers:; * no mkl; * no c++11; * no intel compiler capability for multiarch packages; * psi4 has dependencies that aren't quite vanilla upstream; * psi4 likes to provide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:2397,Availability,down,downstreams,2397,"l of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 package has only ever been built on @andysim 's laptop. I worry that between the careful choice of compiler he had to make and the clang-cl details that something would conflict with c-f's locked-down build tooling. Of course we get away with this now because libint2 gets pulled along with psi from `-c psi4`. I've read some of those threads that it took to get OpenMM GPU code working at production grade on c-f, and I judge that a bigger hurdle than libint2. But libint2 is formidable nonetheless. Glad to talk further, though I don't think I have blocks of time to actually work on this this year. Thanks for using psi4 enou",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:2940,Availability,down,down,2940," only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 package has only ever been built on @andysim 's laptop. I worry that between the careful choice of compiler he had to make and the clang-cl details that something would conflict with c-f's locked-down build tooling. Of course we get away with this now because libint2 gets pulled along with psi from `-c psi4`. I've read some of those threads that it took to get OpenMM GPU code working at production grade on c-f, and I judge that a bigger hurdle than libint2. But libint2 is formidable nonetheless. Glad to talk further, though I don't think I have blocks of time to actually work on this this year. Thanks for using psi4 enough to want cleaner environments!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:307,Deployability,release,released,307,"This won't be a comprehensive reply, just a getting-started one. In the beginning, there were lots o' blockers:; * no mkl; * no c++11; * no intel compiler capability for multiarch packages; * psi4 has dependencies that aren't quite vanilla upstream; * psi4 likes to provide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1205,Deployability,patch,patch,1205,"cies that aren't quite vanilla upstream; * psi4 likes to provide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1259,Deployability,release,releases,1259,"ide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1328,Deployability,release,releases,1328,"psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could w",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1965,Deployability,release,release,1965,"weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 package has only ever been built on @andysim 's laptop. I worry that between the careful choice of compiler he had to make and the clang-cl details that something would conflict with c-f's locked-down build tooling. Of course we get away",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1239,Energy Efficiency,adapt,adapt,1239,"ide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1807,Energy Efficiency,adapt,adapted,1807,"d are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 package has only ever been built on @andysim 's laptop. I worry that between the careful choice of compiler he had to make and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1860,Energy Efficiency,adapt,adapted,1860,"d are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 package has only ever been built on @andysim 's laptop. I worry that between the careful choice of compiler he had to make and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:201,Integrability,depend,dependencies,201,"This won't be a comprehensive reply, just a getting-started one. In the beginning, there were lots o' blockers:; * no mkl; * no c++11; * no intel compiler capability for multiarch packages; * psi4 has dependencies that aren't quite vanilla upstream; * psi4 likes to provide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:830,Integrability,depend,dependencies,830,"This won't be a comprehensive reply, just a getting-started one. In the beginning, there were lots o' blockers:; * no mkl; * no c++11; * no intel compiler capability for multiarch packages; * psi4 has dependencies that aren't quite vanilla upstream; * psi4 likes to provide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1790,Integrability,depend,dependency,1790,"d still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 packa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1239,Modifiability,adapt,adapt,1239,"ide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1807,Modifiability,adapt,adapted,1807,"d are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 package has only ever been built on @andysim 's laptop. I worry that between the careful choice of compiler he had to make and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1860,Modifiability,adapt,adapted,1860,"d are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 package has only ever been built on @andysim 's laptop. I worry that between the careful choice of compiler he had to make and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:956,Performance,optimiz,optimization,956,"This won't be a comprehensive reply, just a getting-started one. In the beginning, there were lots o' blockers:; * no mkl; * no c++11; * no intel compiler capability for multiarch packages; * psi4 has dependencies that aren't quite vanilla upstream; * psi4 likes to provide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624
https://github.com/psi4/psi4/issues/2300#issuecomment-926951158:196,Availability,down,downstream,196,There are not many places internal to Psi4 that need to really know the ordering of our orbitals. So perhaps us changing to match default libint2 wouldn't be too big a hurdle. Do any of our up or downstream packages need to know the ordering?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926951158
https://github.com/psi4/psi4/issues/2300#issuecomment-926952999:198,Availability,down,downstream,198,"> There are not many places internal to Psi4 that need to really know the ordering of our orbitals. So perhaps us changing to match default libint2 wouldn't be too big a hurdle. Do any of our up or downstream packages need to know the ordering?. * fwiw, none of our ecosystem packages use libint directly; * gau2grid is aware of ordering, but it's runtime setable; * reading Andy's comment into the record https://github.com/evaleev/libint/issues/190#issuecomment-691482710",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926952999
https://github.com/psi4/psi4/issues/2300#issuecomment-942624994:340,Deployability,rolling,rolling,340,"Perhaps a starting point can be porting a few packages in https://github.com/psi4/psi4meta/tree/master/conda-recipes? It'll need to happen for this to succeed, it doesn't require agreeing on a concrete strategy for the full path, and even if for some reason the larger effort fails, it's still a small value add. I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-942624994
https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:960,Deployability,release,releases,960,"I had put this together as I was building v1.4, so may as well share here. ### `psi4`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libint2 | yes | psi4 | psi4 | psi4 | | C++; libxc | yes | psi4 | psi4 | c-f | | C; gau2grid | yes | psi4 | psi4 | c-f | | C; qcelemental | yes | | | | psi4 copied from c-f | Py; qcengine | yes | | | | psi4 copied from c-f | Py; ambit | no | psi4 | psi4 | --- | | C++; chemps2 | no | psi4 | psi4 | --- | | C++; dftd3 | no | psi4 | psi4 | psi4 | | Fortran; dkh | no | psi4 | psi4 | --- | | Fortran; gcp | no | psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libef",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900
https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:1195,Deployability,release,release,1195,"---; libint2 | yes | psi4 | psi4 | psi4 | | C++; libxc | yes | psi4 | psi4 | c-f | | C; gau2grid | yes | psi4 | psi4 | c-f | | C; qcelemental | yes | | | | psi4 copied from c-f | Py; qcengine | yes | | | | psi4 copied from c-f | Py; ambit | no | psi4 | psi4 | --- | | C++; chemps2 | no | psi4 | psi4 | --- | | C++; dftd3 | no | psi4 | psi4 | psi4 | | Fortran; dkh | no | psi4 | psi4 | --- | | Fortran; gcp | no | psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libefp | no | psi4 | psi4 | --- | | C; resp | no | | | | psi4 | Py; snsmp2 | no | | | | psi4 | Py; v2rdm_casscf | no | psi4 | psi4 | --- | | C++, Fortran. * openfermion is better hous",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900
https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:1279,Deployability,patch,patch,1279," | c-f | | C; qcelemental | yes | | | | psi4 copied from c-f | Py; qcengine | yes | | | | psi4 copied from c-f | Py; ambit | no | psi4 | psi4 | --- | | C++; chemps2 | no | psi4 | psi4 | --- | | C++; dftd3 | no | psi4 | psi4 | psi4 | | Fortran; dkh | no | psi4 | psi4 | --- | | Fortran; gcp | no | psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libefp | no | psi4 | psi4 | --- | | C; resp | no | | | | psi4 | Py; snsmp2 | no | | | | psi4 | Py; v2rdm_casscf | no | psi4 | psi4 | --- | | C++, Fortran. * openfermion is better housed on c-f anyways. devs are willing (I have an open issue on this with them). only issue is that they have several o",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900
https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:998,Energy Efficiency,adapt,adapted,998,"I had put this together as I was building v1.4, so may as well share here. ### `psi4`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libint2 | yes | psi4 | psi4 | psi4 | | C++; libxc | yes | psi4 | psi4 | c-f | | C; gau2grid | yes | psi4 | psi4 | c-f | | C; qcelemental | yes | | | | psi4 copied from c-f | Py; qcengine | yes | | | | psi4 copied from c-f | Py; ambit | no | psi4 | psi4 | --- | | C++; chemps2 | no | psi4 | psi4 | --- | | C++; dftd3 | no | psi4 | psi4 | psi4 | | Fortran; dkh | no | psi4 | psi4 | --- | | Fortran; gcp | no | psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libef",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900
https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:2303,Integrability,depend,dependencies,2303,"psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libefp | no | psi4 | psi4 | --- | | C; resp | no | | | | psi4 | Py; snsmp2 | no | | | | psi4 | Py; v2rdm_casscf | no | psi4 | psi4 | --- | | C++, Fortran. * openfermion is better housed on c-f anyways. devs are willing (I have an open issue on this with them). only issue is that they have several optional dependencies, and their test suite fails rather than skipping the tests that need these.; * pycppe also on c-f already; * pylibefp and libefp built together; * v2rdm_casscf is a psi4 plugin and has no meaningful pinning to psi4 itself as it often needs rebuilding when psi4 innards change",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900
https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:998,Modifiability,adapt,adapted,998,"I had put this together as I was building v1.4, so may as well share here. ### `psi4`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libint2 | yes | psi4 | psi4 | psi4 | | C++; libxc | yes | psi4 | psi4 | c-f | | C; gau2grid | yes | psi4 | psi4 | c-f | | C; qcelemental | yes | | | | psi4 copied from c-f | Py; qcengine | yes | | | | psi4 copied from c-f | Py; ambit | no | psi4 | psi4 | --- | | C++; chemps2 | no | psi4 | psi4 | --- | | C++; dftd3 | no | psi4 | psi4 | psi4 | | Fortran; dkh | no | psi4 | psi4 | --- | | Fortran; gcp | no | psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libef",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900
https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:2486,Modifiability,plugin,plugin,2486,"psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libefp | no | psi4 | psi4 | --- | | C; resp | no | | | | psi4 | Py; snsmp2 | no | | | | psi4 | Py; v2rdm_casscf | no | psi4 | psi4 | --- | | C++, Fortran. * openfermion is better housed on c-f anyways. devs are willing (I have an open issue on this with them). only issue is that they have several optional dependencies, and their test suite fails rather than skipping the tests that need these.; * pycppe also on c-f already; * pylibefp and libefp built together; * v2rdm_casscf is a psi4 plugin and has no meaningful pinning to psi4 itself as it often needs rebuilding when psi4 innards change",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900
https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:2327,Testability,test,test,2327,"psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libefp | no | psi4 | psi4 | --- | | C; resp | no | | | | psi4 | Py; snsmp2 | no | | | | psi4 | Py; v2rdm_casscf | no | psi4 | psi4 | --- | | C++, Fortran. * openfermion is better housed on c-f anyways. devs are willing (I have an open issue on this with them). only issue is that they have several optional dependencies, and their test suite fails rather than skipping the tests that need these.; * pycppe also on c-f already; * pylibefp and libefp built together; * v2rdm_casscf is a psi4 plugin and has no meaningful pinning to psi4 itself as it often needs rebuilding when psi4 innards change",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900
https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:2369,Testability,test,tests,2369,"psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libefp | no | psi4 | psi4 | --- | | C; resp | no | | | | psi4 | Py; snsmp2 | no | | | | psi4 | Py; v2rdm_casscf | no | psi4 | psi4 | --- | | C++, Fortran. * openfermion is better housed on c-f anyways. devs are willing (I have an open issue on this with them). only issue is that they have several optional dependencies, and their test suite fails rather than skipping the tests that need these.; * pycppe also on c-f already; * pylibefp and libefp built together; * v2rdm_casscf is a psi4 plugin and has no meaningful pinning to psi4 itself as it often needs rebuilding when psi4 innards change",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900
https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:344,Deployability,rolling,rolling,344,"> Perhaps a starting point can be porting a few packages in https://github.com/psi4/psi4meta/tree/master/conda-recipes? It'll need to happen for this to succeed, it doesn't require agreeing on a concrete strategy for the full path, and even if for some reason the larger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access toda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791
https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:2143,Energy Efficiency,adapt,adapting,2143,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791
https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:796,Integrability,interface,interface,796,"> Perhaps a starting point can be porting a few packages in https://github.com/psi4/psi4meta/tree/master/conda-recipes? It'll need to happen for this to succeed, it doesn't require agreeing on a concrete strategy for the full path, and even if for some reason the larger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access toda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791
https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:2190,Integrability,interface,interface,2190,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791
https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:729,Modifiability,config,config,729,"> Perhaps a starting point can be porting a few packages in https://github.com/psi4/psi4meta/tree/master/conda-recipes? It'll need to happen for this to succeed, it doesn't require agreeing on a concrete strategy for the full path, and even if for some reason the larger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access toda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791
https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:2143,Modifiability,adapt,adapting,2143,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791
https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:2239,Performance,perform,performance,2239,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791
https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:1990,Security,access,access,1990,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791
https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:1549,Testability,test,tests,1549,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791
https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:1773,Usability,simpl,simple-,1773,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791
https://github.com/psi4/psi4/issues/2300#issuecomment-986950887:13,Availability,ping,ping,13,"So as to not ping everybody in this thread every time I've done some little thing, I'm tracking my current progress on porting upstreams here: https://github.com/mattwthompson/mattwthompson/projects/1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-986950887
https://github.com/psi4/psi4/issues/2300#issuecomment-1019170409:198,Availability,avail,available,198,"I ~~started~~ finished rebuilding our stack (`gcp`, `dftd4`, `s-dftd3`, ...) for Windows on conda-forge (just recently rebuild the whole thing for OSX/Arm64). Executables as well as Python bindings available are now available for all platforms supported on conda-forge. If anyone can give me some pointers on https://github.com/MolSSI/QCEngine/issues/341 I can also make the first step to resolve https://github.com/psi4/psi4/issues/2360.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1019170409
https://github.com/psi4/psi4/issues/2300#issuecomment-1019170409:216,Availability,avail,available,216,"I ~~started~~ finished rebuilding our stack (`gcp`, `dftd4`, `s-dftd3`, ...) for Windows on conda-forge (just recently rebuild the whole thing for OSX/Arm64). Executables as well as Python bindings available are now available for all platforms supported on conda-forge. If anyone can give me some pointers on https://github.com/MolSSI/QCEngine/issues/341 I can also make the first step to resolve https://github.com/psi4/psi4/issues/2360.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1019170409
https://github.com/psi4/psi4/issues/2300#issuecomment-1483659817:159,Availability,down,download,159,"Packages are ticking along steadily (follow graphs/views/labels at tracker above). If anyone wants to try out very early versions of the psi4 package, you can download artifacts from a commit that works at https://github.com/conda-forge/staged-recipes/pull/22328",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483659817
https://github.com/psi4/psi4/issues/2300#issuecomment-1483834881:146,Availability,down,download,146,"Thanks. That's great news!. Are you planning to support linux, osx and windows?. I am happy to test the package on my side. Do you know how I can download the conda forge artifacts from your PR on staged-recipes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483834881
https://github.com/psi4/psi4/issues/2300#issuecomment-1483834881:95,Testability,test,test,95,"Thanks. That's great news!. Are you planning to support linux, osx and windows?. I am happy to test the package on my side. Do you know how I can download the conda forge artifacts from your PR on staged-recipes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483834881
https://github.com/psi4/psi4/issues/2300#issuecomment-1483877327:18,Availability,avail,available,18,The artifacts are available on Azure if you click through the status checks,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483877327
https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346:680,Availability,down,download,680,"* Yes, eventually will support `linux-64`, `osx-64`, `osx-arm64`, `win-64` arch. staged-recipes won't have osx-arm64, though.; * Still TBD if Windows psi4 packages will include Fortran addons like dkh, gdma, pcmsolver.; * All arch will be explicitly linked to MKL (that is, `libblas=*=*mkl`). dependencies that themselves need blas/lapack are getting linked generically so runtime selection is an option, but psi4 itself is getting fixed to MKL. I'm open to someday linking psi4 generically, but I think other distributions need to be tested and any performance and oversubscription issues addressed first.; * yes, as Matt says, you have to dig around on Azure, find ""artifacts"", download, and then can install locally (or upload to a separate anaconda.org acct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346
https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346:703,Deployability,install,install,703,"* Yes, eventually will support `linux-64`, `osx-64`, `osx-arm64`, `win-64` arch. staged-recipes won't have osx-arm64, though.; * Still TBD if Windows psi4 packages will include Fortran addons like dkh, gdma, pcmsolver.; * All arch will be explicitly linked to MKL (that is, `libblas=*=*mkl`). dependencies that themselves need blas/lapack are getting linked generically so runtime selection is an option, but psi4 itself is getting fixed to MKL. I'm open to someday linking psi4 generically, but I think other distributions need to be tested and any performance and oversubscription issues addressed first.; * yes, as Matt says, you have to dig around on Azure, find ""artifacts"", download, and then can install locally (or upload to a separate anaconda.org acct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346
https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346:293,Integrability,depend,dependencies,293,"* Yes, eventually will support `linux-64`, `osx-64`, `osx-arm64`, `win-64` arch. staged-recipes won't have osx-arm64, though.; * Still TBD if Windows psi4 packages will include Fortran addons like dkh, gdma, pcmsolver.; * All arch will be explicitly linked to MKL (that is, `libblas=*=*mkl`). dependencies that themselves need blas/lapack are getting linked generically so runtime selection is an option, but psi4 itself is getting fixed to MKL. I'm open to someday linking psi4 generically, but I think other distributions need to be tested and any performance and oversubscription issues addressed first.; * yes, as Matt says, you have to dig around on Azure, find ""artifacts"", download, and then can install locally (or upload to a separate anaconda.org acct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346
https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346:550,Performance,perform,performance,550,"* Yes, eventually will support `linux-64`, `osx-64`, `osx-arm64`, `win-64` arch. staged-recipes won't have osx-arm64, though.; * Still TBD if Windows psi4 packages will include Fortran addons like dkh, gdma, pcmsolver.; * All arch will be explicitly linked to MKL (that is, `libblas=*=*mkl`). dependencies that themselves need blas/lapack are getting linked generically so runtime selection is an option, but psi4 itself is getting fixed to MKL. I'm open to someday linking psi4 generically, but I think other distributions need to be tested and any performance and oversubscription issues addressed first.; * yes, as Matt says, you have to dig around on Azure, find ""artifacts"", download, and then can install locally (or upload to a separate anaconda.org acct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346
https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346:535,Testability,test,tested,535,"* Yes, eventually will support `linux-64`, `osx-64`, `osx-arm64`, `win-64` arch. staged-recipes won't have osx-arm64, though.; * Still TBD if Windows psi4 packages will include Fortran addons like dkh, gdma, pcmsolver.; * All arch will be explicitly linked to MKL (that is, `libblas=*=*mkl`). dependencies that themselves need blas/lapack are getting linked generically so runtime selection is an option, but psi4 itself is getting fixed to MKL. I'm open to someday linking psi4 generically, but I think other distributions need to be tested and any performance and oversubscription issues addressed first.; * yes, as Matt says, you have to dig around on Azure, find ""artifacts"", download, and then can install locally (or upload to a separate anaconda.org acct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346
https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938:114,Performance,perform,performed,114,"I tested the psi4 package on `linux-64` using the staged-recipes artifacts and it works perfectly. The tests were performed on an in-house QM package and I only did a single point gradient computation on a single and simple molecule. Two things maybe:. - I add to use the `conda-forge/label/libint_dev` channel for libint.; - Upon importing `psi4` I noticed a bunch of prints that wasnt here before:. ```; psi4_module_loc='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4'; pymod='/python3.9/site-packages/lib/psi4'; pymod_dir_step='../../../..'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; data_dir='/home/hadim/conda_envs/share/psi4'; ```. Is it coming from package development, and you'll remove it moving forward?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938
https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938:2,Testability,test,tested,2,"I tested the psi4 package on `linux-64` using the staged-recipes artifacts and it works perfectly. The tests were performed on an in-house QM package and I only did a single point gradient computation on a single and simple molecule. Two things maybe:. - I add to use the `conda-forge/label/libint_dev` channel for libint.; - Upon importing `psi4` I noticed a bunch of prints that wasnt here before:. ```; psi4_module_loc='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4'; pymod='/python3.9/site-packages/lib/psi4'; pymod_dir_step='../../../..'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; data_dir='/home/hadim/conda_envs/share/psi4'; ```. Is it coming from package development, and you'll remove it moving forward?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938
https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938:103,Testability,test,tests,103,"I tested the psi4 package on `linux-64` using the staged-recipes artifacts and it works perfectly. The tests were performed on an in-house QM package and I only did a single point gradient computation on a single and simple molecule. Two things maybe:. - I add to use the `conda-forge/label/libint_dev` channel for libint.; - Upon importing `psi4` I noticed a bunch of prints that wasnt here before:. ```; psi4_module_loc='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4'; pymod='/python3.9/site-packages/lib/psi4'; pymod_dir_step='../../../..'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; data_dir='/home/hadim/conda_envs/share/psi4'; ```. Is it coming from package development, and you'll remove it moving forward?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938
https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938:217,Usability,simpl,simple,217,"I tested the psi4 package on `linux-64` using the staged-recipes artifacts and it works perfectly. The tests were performed on an in-house QM package and I only did a single point gradient computation on a single and simple molecule. Two things maybe:. - I add to use the `conda-forge/label/libint_dev` channel for libint.; - Upon importing `psi4` I noticed a bunch of prints that wasnt here before:. ```; psi4_module_loc='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4'; pymod='/python3.9/site-packages/lib/psi4'; pymod_dir_step='../../../..'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; data_dir='/home/hadim/conda_envs/share/psi4'; ```. Is it coming from package development, and you'll remove it moving forward?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938
https://github.com/psi4/psi4/issues/2300#issuecomment-1483939202:206,Deployability,release,released,206,"> I add to use the conda-forge/label/libint_dev channel for libint. Yes, that's going to be the case for the foreseeable future until https://github.com/evaleev/libint/pull/259 gets reviewed and merged and released, as I can't in good conscience replace a released version with a PR version outside the psi4 channel. > Upon importing psi4 I noticed a bunch of prints that wasn't here before:. You guessed correctly -- I'm trying to debug some infernal Windows relative path behavior. > I tested the psi4 package on linux-64 using the staged-recipes artifacts and it works perfectly. . Great, good to hear!. ------. Note to anyone reading this thread seeking Mac packages: most of the iterations I skip Mac, so look for a CI run that took a long time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483939202
https://github.com/psi4/psi4/issues/2300#issuecomment-1483939202:256,Deployability,release,released,256,"> I add to use the conda-forge/label/libint_dev channel for libint. Yes, that's going to be the case for the foreseeable future until https://github.com/evaleev/libint/pull/259 gets reviewed and merged and released, as I can't in good conscience replace a released version with a PR version outside the psi4 channel. > Upon importing psi4 I noticed a bunch of prints that wasn't here before:. You guessed correctly -- I'm trying to debug some infernal Windows relative path behavior. > I tested the psi4 package on linux-64 using the staged-recipes artifacts and it works perfectly. . Great, good to hear!. ------. Note to anyone reading this thread seeking Mac packages: most of the iterations I skip Mac, so look for a CI run that took a long time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483939202
https://github.com/psi4/psi4/issues/2300#issuecomment-1483939202:488,Testability,test,tested,488,"> I add to use the conda-forge/label/libint_dev channel for libint. Yes, that's going to be the case for the foreseeable future until https://github.com/evaleev/libint/pull/259 gets reviewed and merged and released, as I can't in good conscience replace a released version with a PR version outside the psi4 channel. > Upon importing psi4 I noticed a bunch of prints that wasn't here before:. You guessed correctly -- I'm trying to debug some infernal Windows relative path behavior. > I tested the psi4 package on linux-64 using the staged-recipes artifacts and it works perfectly. . Great, good to hear!. ------. Note to anyone reading this thread seeking Mac packages: most of the iterations I skip Mac, so look for a CI run that took a long time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483939202
https://github.com/psi4/psi4/issues/2300#issuecomment-1483940083:140,Deployability,release,released,140,"> Yes, that's going to be the case for the foreseeable future until https://github.com/evaleev/libint/pull/259 gets reviewed and merged and released, as I can't in good conscience replace a released version with a PR version outside the psi4 channel. Ok no problem and I understand your point. Would that prevent you from merging psi4 in staged-recipes before that?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483940083
https://github.com/psi4/psi4/issues/2300#issuecomment-1483940083:190,Deployability,release,released,190,"> Yes, that's going to be the case for the foreseeable future until https://github.com/evaleev/libint/pull/259 gets reviewed and merged and released, as I can't in good conscience replace a released version with a PR version outside the psi4 channel. Ok no problem and I understand your point. Would that prevent you from merging psi4 in staged-recipes before that?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483940083
https://github.com/psi4/psi4/issues/2300#issuecomment-1483943111:141,Deployability,release,released,141,">> Yes, that's going to be the case for the foreseeable future until https://github.com/evaleev/libint/pull/259 gets reviewed and merged and released, as I can't in good conscience replace a released version with a PR version outside the psi4 channel. > Ok no problem and I understand your point. Would that prevent you from merging psi4 in staged-recipes before that?. I don't think it should be a problem; there's no software barrier to merging, and I think I have good arguments if there's reviewer concerns. Possibly I'll try to arrange to merge psi4 from staged-recipes into a `conda-forge/label/psi4_dev` channel so there isn't a funny psi4 `v1.8a1.dev80` around.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483943111
https://github.com/psi4/psi4/issues/2300#issuecomment-1483943111:191,Deployability,release,released,191,">> Yes, that's going to be the case for the foreseeable future until https://github.com/evaleev/libint/pull/259 gets reviewed and merged and released, as I can't in good conscience replace a released version with a PR version outside the psi4 channel. > Ok no problem and I understand your point. Would that prevent you from merging psi4 in staged-recipes before that?. I don't think it should be a problem; there's no software barrier to merging, and I think I have good arguments if there's reviewer concerns. Possibly I'll try to arrange to merge psi4 from staged-recipes into a `conda-forge/label/psi4_dev` channel so there isn't a funny psi4 `v1.8a1.dev80` around.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483943111
https://github.com/psi4/psi4/issues/2300#issuecomment-1523559384:1016,Availability,error,errors,1016,"Ok, we're up on c-f at https://anaconda.org/conda-forge/psi4/files . For now, you'll need `conda install psi4 -c conda-forge -c conda-forge/label/libint_dev -c conda-forge/label/psi4_dev`. After the v1.8 release, you can drop the `psi4_dev` but not the `libint_dev`. It'll be changing often as I need to add osx_arm64 and py311. And there's stuff in master it doesn't have, and stuff in it that master doesn't have. But all the main functionality should be fine. ### Please report *any* problems or oddities. None of the docs reflect new build/install procedures yet. I'll be making a list of where folks go awry. First one (that's bitten me and Jonathon):; * To start an environment with conda compilers from c-f, don't use `conda create -n mydev gxx_linux-64 ... -c conda-forge` as the c-f analog to the usual procedure. That will work to form the env, but if you look in `conda list`, there's some deep pieces like the sysroot still present from `defaults`. When you start compiling, it will give you obscure C++ errors outside your code. Instead, use `conda create -n mydev cxx-compiler ... -c conda-forge` (same for all platforms) which will give a cohesive compiler stack.; * (Added 28 Apr) If you use the c-f dep packages to _compile_ psi4, remember to mind libints: `master` + `psi4/label/dev::libint2` or `cf_iterations` + `conda_forge/label/libint_dev::libint` (also note `libint2` vs `libint`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1523559384
https://github.com/psi4/psi4/issues/2300#issuecomment-1523559384:97,Deployability,install,install,97,"Ok, we're up on c-f at https://anaconda.org/conda-forge/psi4/files . For now, you'll need `conda install psi4 -c conda-forge -c conda-forge/label/libint_dev -c conda-forge/label/psi4_dev`. After the v1.8 release, you can drop the `psi4_dev` but not the `libint_dev`. It'll be changing often as I need to add osx_arm64 and py311. And there's stuff in master it doesn't have, and stuff in it that master doesn't have. But all the main functionality should be fine. ### Please report *any* problems or oddities. None of the docs reflect new build/install procedures yet. I'll be making a list of where folks go awry. First one (that's bitten me and Jonathon):; * To start an environment with conda compilers from c-f, don't use `conda create -n mydev gxx_linux-64 ... -c conda-forge` as the c-f analog to the usual procedure. That will work to form the env, but if you look in `conda list`, there's some deep pieces like the sysroot still present from `defaults`. When you start compiling, it will give you obscure C++ errors outside your code. Instead, use `conda create -n mydev cxx-compiler ... -c conda-forge` (same for all platforms) which will give a cohesive compiler stack.; * (Added 28 Apr) If you use the c-f dep packages to _compile_ psi4, remember to mind libints: `master` + `psi4/label/dev::libint2` or `cf_iterations` + `conda_forge/label/libint_dev::libint` (also note `libint2` vs `libint`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1523559384
https://github.com/psi4/psi4/issues/2300#issuecomment-1523559384:204,Deployability,release,release,204,"Ok, we're up on c-f at https://anaconda.org/conda-forge/psi4/files . For now, you'll need `conda install psi4 -c conda-forge -c conda-forge/label/libint_dev -c conda-forge/label/psi4_dev`. After the v1.8 release, you can drop the `psi4_dev` but not the `libint_dev`. It'll be changing often as I need to add osx_arm64 and py311. And there's stuff in master it doesn't have, and stuff in it that master doesn't have. But all the main functionality should be fine. ### Please report *any* problems or oddities. None of the docs reflect new build/install procedures yet. I'll be making a list of where folks go awry. First one (that's bitten me and Jonathon):; * To start an environment with conda compilers from c-f, don't use `conda create -n mydev gxx_linux-64 ... -c conda-forge` as the c-f analog to the usual procedure. That will work to form the env, but if you look in `conda list`, there's some deep pieces like the sysroot still present from `defaults`. When you start compiling, it will give you obscure C++ errors outside your code. Instead, use `conda create -n mydev cxx-compiler ... -c conda-forge` (same for all platforms) which will give a cohesive compiler stack.; * (Added 28 Apr) If you use the c-f dep packages to _compile_ psi4, remember to mind libints: `master` + `psi4/label/dev::libint2` or `cf_iterations` + `conda_forge/label/libint_dev::libint` (also note `libint2` vs `libint`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1523559384
https://github.com/psi4/psi4/issues/2300#issuecomment-1523559384:544,Deployability,install,install,544,"Ok, we're up on c-f at https://anaconda.org/conda-forge/psi4/files . For now, you'll need `conda install psi4 -c conda-forge -c conda-forge/label/libint_dev -c conda-forge/label/psi4_dev`. After the v1.8 release, you can drop the `psi4_dev` but not the `libint_dev`. It'll be changing often as I need to add osx_arm64 and py311. And there's stuff in master it doesn't have, and stuff in it that master doesn't have. But all the main functionality should be fine. ### Please report *any* problems or oddities. None of the docs reflect new build/install procedures yet. I'll be making a list of where folks go awry. First one (that's bitten me and Jonathon):; * To start an environment with conda compilers from c-f, don't use `conda create -n mydev gxx_linux-64 ... -c conda-forge` as the c-f analog to the usual procedure. That will work to form the env, but if you look in `conda list`, there's some deep pieces like the sysroot still present from `defaults`. When you start compiling, it will give you obscure C++ errors outside your code. Instead, use `conda create -n mydev cxx-compiler ... -c conda-forge` (same for all platforms) which will give a cohesive compiler stack.; * (Added 28 Apr) If you use the c-f dep packages to _compile_ psi4, remember to mind libints: `master` + `psi4/label/dev::libint2` or `cf_iterations` + `conda_forge/label/libint_dev::libint` (also note `libint2` vs `libint`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1523559384
https://github.com/psi4/psi4/issues/2300#issuecomment-1527993988:170,Energy Efficiency,energy,energy,170,"@loriab I tested the new c-f packages and the conda dep solving just works out of the box (even in a complex and large conda env). So far all my test suite (single point energy) works perfectly. Thanks again for the effort!. On my side, I think that issue can be closed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1527993988
https://github.com/psi4/psi4/issues/2300#issuecomment-1527993988:10,Testability,test,tested,10,"@loriab I tested the new c-f packages and the conda dep solving just works out of the box (even in a complex and large conda env). So far all my test suite (single point energy) works perfectly. Thanks again for the effort!. On my side, I think that issue can be closed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1527993988
https://github.com/psi4/psi4/issues/2300#issuecomment-1527993988:145,Testability,test,test,145,"@loriab I tested the new c-f packages and the conda dep solving just works out of the box (even in a complex and large conda env). So far all my test suite (single point energy) works perfectly. Thanks again for the effort!. On my side, I think that issue can be closed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1527993988
https://github.com/psi4/psi4/issues/2300#issuecomment-1528019765:80,Availability,down,downloaded,80,"Thanks, @hadim, great to hear, and thanks for testing!. General update:; * I've downloaded one of the Linux packages and run full tests, and they all passed. Not much ecosystem activated, though.; * py311 packages are ready, but `osx_arm64` are not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1528019765
https://github.com/psi4/psi4/issues/2300#issuecomment-1528019765:64,Deployability,update,update,64,"Thanks, @hadim, great to hear, and thanks for testing!. General update:; * I've downloaded one of the Linux packages and run full tests, and they all passed. Not much ecosystem activated, though.; * py311 packages are ready, but `osx_arm64` are not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1528019765
https://github.com/psi4/psi4/issues/2300#issuecomment-1528019765:46,Testability,test,testing,46,"Thanks, @hadim, great to hear, and thanks for testing!. General update:; * I've downloaded one of the Linux packages and run full tests, and they all passed. Not much ecosystem activated, though.; * py311 packages are ready, but `osx_arm64` are not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1528019765
https://github.com/psi4/psi4/issues/2300#issuecomment-1528019765:130,Testability,test,tests,130,"Thanks, @hadim, great to hear, and thanks for testing!. General update:; * I've downloaded one of the Linux packages and run full tests, and they all passed. Not much ecosystem activated, though.; * py311 packages are ready, but `osx_arm64` are not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1528019765
https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015:403,Availability,failure,failures,403,"There's a rebuild of all the psi4 packages up (build `_2`) including `osx_arm64`. * **Please test `osx_arm64`**. These are build by cross-compile and in a direction that can't be emulated, so they have _never been run_. ; * You can run the full test suite through pytest. Point it at `pytest $CONDA_PREFIX/lib/python*/site-packages/psi4/tests/`. Especially test threaded (but be aware of #2941 expected failures (also cc44, but that's behaving correctly to fail)).; * Be aware that c-f encourages packages to be built against a generic blas/lapack, so the user can select the blas implementation at runtime. (directions at https://conda-forge.org/docs/maintainer/knowledge_base.html#switching-blas-implementation); * Usual archs `linux-64`, `osx-64`, `win-64` _don't_ do as encouraged above and instead link directly to MKL since we didn't want to switch expectations and performance that drastically. But Intel MKL isn't available for `osx-arm64` (quelle suprise). So I did the generic blas/lapack setup for this arch. You can choose `libblas=*=*openblas` or `libblas=*=*accelerate` for this arch. I'd be curious to hear about both. You'll get openblas if you don't specify.; * I've tested openblas on linux-64, and as long as you choose the openmp openblas variant, not the pthreads one, it works correctly (only the openmp variant is available for `osx-arm64`, so all's well). Timings were ~5% slower over MKL, so operable and perfectly respectable. I didn't test the SAPT jobs that iirc were the trouble with openblas before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015
https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015:922,Availability,avail,available,922,"There's a rebuild of all the psi4 packages up (build `_2`) including `osx_arm64`. * **Please test `osx_arm64`**. These are build by cross-compile and in a direction that can't be emulated, so they have _never been run_. ; * You can run the full test suite through pytest. Point it at `pytest $CONDA_PREFIX/lib/python*/site-packages/psi4/tests/`. Especially test threaded (but be aware of #2941 expected failures (also cc44, but that's behaving correctly to fail)).; * Be aware that c-f encourages packages to be built against a generic blas/lapack, so the user can select the blas implementation at runtime. (directions at https://conda-forge.org/docs/maintainer/knowledge_base.html#switching-blas-implementation); * Usual archs `linux-64`, `osx-64`, `win-64` _don't_ do as encouraged above and instead link directly to MKL since we didn't want to switch expectations and performance that drastically. But Intel MKL isn't available for `osx-arm64` (quelle suprise). So I did the generic blas/lapack setup for this arch. You can choose `libblas=*=*openblas` or `libblas=*=*accelerate` for this arch. I'd be curious to hear about both. You'll get openblas if you don't specify.; * I've tested openblas on linux-64, and as long as you choose the openmp openblas variant, not the pthreads one, it works correctly (only the openmp variant is available for `osx-arm64`, so all's well). Timings were ~5% slower over MKL, so operable and perfectly respectable. I didn't test the SAPT jobs that iirc were the trouble with openblas before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015
https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015:1337,Availability,avail,available,1337,"There's a rebuild of all the psi4 packages up (build `_2`) including `osx_arm64`. * **Please test `osx_arm64`**. These are build by cross-compile and in a direction that can't be emulated, so they have _never been run_. ; * You can run the full test suite through pytest. Point it at `pytest $CONDA_PREFIX/lib/python*/site-packages/psi4/tests/`. Especially test threaded (but be aware of #2941 expected failures (also cc44, but that's behaving correctly to fail)).; * Be aware that c-f encourages packages to be built against a generic blas/lapack, so the user can select the blas implementation at runtime. (directions at https://conda-forge.org/docs/maintainer/knowledge_base.html#switching-blas-implementation); * Usual archs `linux-64`, `osx-64`, `win-64` _don't_ do as encouraged above and instead link directly to MKL since we didn't want to switch expectations and performance that drastically. But Intel MKL isn't available for `osx-arm64` (quelle suprise). So I did the generic blas/lapack setup for this arch. You can choose `libblas=*=*openblas` or `libblas=*=*accelerate` for this arch. I'd be curious to hear about both. You'll get openblas if you don't specify.; * I've tested openblas on linux-64, and as long as you choose the openmp openblas variant, not the pthreads one, it works correctly (only the openmp variant is available for `osx-arm64`, so all's well). Timings were ~5% slower over MKL, so operable and perfectly respectable. I didn't test the SAPT jobs that iirc were the trouble with openblas before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015
https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015:872,Performance,perform,performance,872,"There's a rebuild of all the psi4 packages up (build `_2`) including `osx_arm64`. * **Please test `osx_arm64`**. These are build by cross-compile and in a direction that can't be emulated, so they have _never been run_. ; * You can run the full test suite through pytest. Point it at `pytest $CONDA_PREFIX/lib/python*/site-packages/psi4/tests/`. Especially test threaded (but be aware of #2941 expected failures (also cc44, but that's behaving correctly to fail)).; * Be aware that c-f encourages packages to be built against a generic blas/lapack, so the user can select the blas implementation at runtime. (directions at https://conda-forge.org/docs/maintainer/knowledge_base.html#switching-blas-implementation); * Usual archs `linux-64`, `osx-64`, `win-64` _don't_ do as encouraged above and instead link directly to MKL since we didn't want to switch expectations and performance that drastically. But Intel MKL isn't available for `osx-arm64` (quelle suprise). So I did the generic blas/lapack setup for this arch. You can choose `libblas=*=*openblas` or `libblas=*=*accelerate` for this arch. I'd be curious to hear about both. You'll get openblas if you don't specify.; * I've tested openblas on linux-64, and as long as you choose the openmp openblas variant, not the pthreads one, it works correctly (only the openmp variant is available for `osx-arm64`, so all's well). Timings were ~5% slower over MKL, so operable and perfectly respectable. I didn't test the SAPT jobs that iirc were the trouble with openblas before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015
https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015:93,Testability,test,test,93,"There's a rebuild of all the psi4 packages up (build `_2`) including `osx_arm64`. * **Please test `osx_arm64`**. These are build by cross-compile and in a direction that can't be emulated, so they have _never been run_. ; * You can run the full test suite through pytest. Point it at `pytest $CONDA_PREFIX/lib/python*/site-packages/psi4/tests/`. Especially test threaded (but be aware of #2941 expected failures (also cc44, but that's behaving correctly to fail)).; * Be aware that c-f encourages packages to be built against a generic blas/lapack, so the user can select the blas implementation at runtime. (directions at https://conda-forge.org/docs/maintainer/knowledge_base.html#switching-blas-implementation); * Usual archs `linux-64`, `osx-64`, `win-64` _don't_ do as encouraged above and instead link directly to MKL since we didn't want to switch expectations and performance that drastically. But Intel MKL isn't available for `osx-arm64` (quelle suprise). So I did the generic blas/lapack setup for this arch. You can choose `libblas=*=*openblas` or `libblas=*=*accelerate` for this arch. I'd be curious to hear about both. You'll get openblas if you don't specify.; * I've tested openblas on linux-64, and as long as you choose the openmp openblas variant, not the pthreads one, it works correctly (only the openmp variant is available for `osx-arm64`, so all's well). Timings were ~5% slower over MKL, so operable and perfectly respectable. I didn't test the SAPT jobs that iirc were the trouble with openblas before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015
https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015:245,Testability,test,test,245,"There's a rebuild of all the psi4 packages up (build `_2`) including `osx_arm64`. * **Please test `osx_arm64`**. These are build by cross-compile and in a direction that can't be emulated, so they have _never been run_. ; * You can run the full test suite through pytest. Point it at `pytest $CONDA_PREFIX/lib/python*/site-packages/psi4/tests/`. Especially test threaded (but be aware of #2941 expected failures (also cc44, but that's behaving correctly to fail)).; * Be aware that c-f encourages packages to be built against a generic blas/lapack, so the user can select the blas implementation at runtime. (directions at https://conda-forge.org/docs/maintainer/knowledge_base.html#switching-blas-implementation); * Usual archs `linux-64`, `osx-64`, `win-64` _don't_ do as encouraged above and instead link directly to MKL since we didn't want to switch expectations and performance that drastically. But Intel MKL isn't available for `osx-arm64` (quelle suprise). So I did the generic blas/lapack setup for this arch. You can choose `libblas=*=*openblas` or `libblas=*=*accelerate` for this arch. I'd be curious to hear about both. You'll get openblas if you don't specify.; * I've tested openblas on linux-64, and as long as you choose the openmp openblas variant, not the pthreads one, it works correctly (only the openmp variant is available for `osx-arm64`, so all's well). Timings were ~5% slower over MKL, so operable and perfectly respectable. I didn't test the SAPT jobs that iirc were the trouble with openblas before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015
https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015:337,Testability,test,tests,337,"There's a rebuild of all the psi4 packages up (build `_2`) including `osx_arm64`. * **Please test `osx_arm64`**. These are build by cross-compile and in a direction that can't be emulated, so they have _never been run_. ; * You can run the full test suite through pytest. Point it at `pytest $CONDA_PREFIX/lib/python*/site-packages/psi4/tests/`. Especially test threaded (but be aware of #2941 expected failures (also cc44, but that's behaving correctly to fail)).; * Be aware that c-f encourages packages to be built against a generic blas/lapack, so the user can select the blas implementation at runtime. (directions at https://conda-forge.org/docs/maintainer/knowledge_base.html#switching-blas-implementation); * Usual archs `linux-64`, `osx-64`, `win-64` _don't_ do as encouraged above and instead link directly to MKL since we didn't want to switch expectations and performance that drastically. But Intel MKL isn't available for `osx-arm64` (quelle suprise). So I did the generic blas/lapack setup for this arch. You can choose `libblas=*=*openblas` or `libblas=*=*accelerate` for this arch. I'd be curious to hear about both. You'll get openblas if you don't specify.; * I've tested openblas on linux-64, and as long as you choose the openmp openblas variant, not the pthreads one, it works correctly (only the openmp variant is available for `osx-arm64`, so all's well). Timings were ~5% slower over MKL, so operable and perfectly respectable. I didn't test the SAPT jobs that iirc were the trouble with openblas before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015
https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015:357,Testability,test,test,357,"There's a rebuild of all the psi4 packages up (build `_2`) including `osx_arm64`. * **Please test `osx_arm64`**. These are build by cross-compile and in a direction that can't be emulated, so they have _never been run_. ; * You can run the full test suite through pytest. Point it at `pytest $CONDA_PREFIX/lib/python*/site-packages/psi4/tests/`. Especially test threaded (but be aware of #2941 expected failures (also cc44, but that's behaving correctly to fail)).; * Be aware that c-f encourages packages to be built against a generic blas/lapack, so the user can select the blas implementation at runtime. (directions at https://conda-forge.org/docs/maintainer/knowledge_base.html#switching-blas-implementation); * Usual archs `linux-64`, `osx-64`, `win-64` _don't_ do as encouraged above and instead link directly to MKL since we didn't want to switch expectations and performance that drastically. But Intel MKL isn't available for `osx-arm64` (quelle suprise). So I did the generic blas/lapack setup for this arch. You can choose `libblas=*=*openblas` or `libblas=*=*accelerate` for this arch. I'd be curious to hear about both. You'll get openblas if you don't specify.; * I've tested openblas on linux-64, and as long as you choose the openmp openblas variant, not the pthreads one, it works correctly (only the openmp variant is available for `osx-arm64`, so all's well). Timings were ~5% slower over MKL, so operable and perfectly respectable. I didn't test the SAPT jobs that iirc were the trouble with openblas before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015
https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015:1184,Testability,test,tested,1184,"There's a rebuild of all the psi4 packages up (build `_2`) including `osx_arm64`. * **Please test `osx_arm64`**. These are build by cross-compile and in a direction that can't be emulated, so they have _never been run_. ; * You can run the full test suite through pytest. Point it at `pytest $CONDA_PREFIX/lib/python*/site-packages/psi4/tests/`. Especially test threaded (but be aware of #2941 expected failures (also cc44, but that's behaving correctly to fail)).; * Be aware that c-f encourages packages to be built against a generic blas/lapack, so the user can select the blas implementation at runtime. (directions at https://conda-forge.org/docs/maintainer/knowledge_base.html#switching-blas-implementation); * Usual archs `linux-64`, `osx-64`, `win-64` _don't_ do as encouraged above and instead link directly to MKL since we didn't want to switch expectations and performance that drastically. But Intel MKL isn't available for `osx-arm64` (quelle suprise). So I did the generic blas/lapack setup for this arch. You can choose `libblas=*=*openblas` or `libblas=*=*accelerate` for this arch. I'd be curious to hear about both. You'll get openblas if you don't specify.; * I've tested openblas on linux-64, and as long as you choose the openmp openblas variant, not the pthreads one, it works correctly (only the openmp variant is available for `osx-arm64`, so all's well). Timings were ~5% slower over MKL, so operable and perfectly respectable. I didn't test the SAPT jobs that iirc were the trouble with openblas before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015
https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015:1462,Testability,test,test,1462,"There's a rebuild of all the psi4 packages up (build `_2`) including `osx_arm64`. * **Please test `osx_arm64`**. These are build by cross-compile and in a direction that can't be emulated, so they have _never been run_. ; * You can run the full test suite through pytest. Point it at `pytest $CONDA_PREFIX/lib/python*/site-packages/psi4/tests/`. Especially test threaded (but be aware of #2941 expected failures (also cc44, but that's behaving correctly to fail)).; * Be aware that c-f encourages packages to be built against a generic blas/lapack, so the user can select the blas implementation at runtime. (directions at https://conda-forge.org/docs/maintainer/knowledge_base.html#switching-blas-implementation); * Usual archs `linux-64`, `osx-64`, `win-64` _don't_ do as encouraged above and instead link directly to MKL since we didn't want to switch expectations and performance that drastically. But Intel MKL isn't available for `osx-arm64` (quelle suprise). So I did the generic blas/lapack setup for this arch. You can choose `libblas=*=*openblas` or `libblas=*=*accelerate` for this arch. I'd be curious to hear about both. You'll get openblas if you don't specify.; * I've tested openblas on linux-64, and as long as you choose the openmp openblas variant, not the pthreads one, it works correctly (only the openmp variant is available for `osx-arm64`, so all's well). Timings were ~5% slower over MKL, so operable and perfectly respectable. I didn't test the SAPT jobs that iirc were the trouble with openblas before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015
https://github.com/psi4/psi4/issues/2300#issuecomment-1548158932:10,Testability,test,tested,10,I haven't tested locally but `-c conda-forge/label/psi4_dev` does not seem to be mandatory because 1.8 is now in `main` at https://github.com/conda-forge/psi4-feedstock/tree/main. But `-c conda-forge/label/libint_dev` still seems to be required. Do you confirm @loriab?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1548158932
https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382:46,Deployability,release,release,46,"Exactly so, @hadim. psi4 has a c-f-compatible release, so that's on the `main` feedstock branch and accessible with `-c conda-forge`. _But_ psi4 still needs a unreleased libint branch, so that's packaged from the `dev` feedstock branch, so altogether, it's `conda install psi4 -c conda-forge/label/libint_dev -c conda-forge`. The long-term reference for the current channel path is https://psicode.org/installs/latest/ with selections (any os)-conda-(any py)-stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382
https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382:264,Deployability,install,install,264,"Exactly so, @hadim. psi4 has a c-f-compatible release, so that's on the `main` feedstock branch and accessible with `-c conda-forge`. _But_ psi4 still needs a unreleased libint branch, so that's packaged from the `dev` feedstock branch, so altogether, it's `conda install psi4 -c conda-forge/label/libint_dev -c conda-forge`. The long-term reference for the current channel path is https://psicode.org/installs/latest/ with selections (any os)-conda-(any py)-stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382
https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382:402,Deployability,install,installs,402,"Exactly so, @hadim. psi4 has a c-f-compatible release, so that's on the `main` feedstock branch and accessible with `-c conda-forge`. _But_ psi4 still needs a unreleased libint branch, so that's packaged from the `dev` feedstock branch, so altogether, it's `conda install psi4 -c conda-forge/label/libint_dev -c conda-forge`. The long-term reference for the current channel path is https://psicode.org/installs/latest/ with selections (any os)-conda-(any py)-stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382
https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382:100,Security,access,accessible,100,"Exactly so, @hadim. psi4 has a c-f-compatible release, so that's on the `main` feedstock branch and accessible with `-c conda-forge`. _But_ psi4 still needs a unreleased libint branch, so that's packaged from the `dev` feedstock branch, so altogether, it's `conda install psi4 -c conda-forge/label/libint_dev -c conda-forge`. The long-term reference for the current channel path is https://psicode.org/installs/latest/ with selections (any os)-conda-(any py)-stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382
https://github.com/psi4/psi4/issues/2300#issuecomment-1826950752:289,Availability,error,error,289,"This whole thread was very useful. I was able to create a conda environment with the latest psi4, openff-toolkit, and openff-recharge using this yml. The only thing not really mentioned in this thread, or the psicode latest installation is pinning pydantic version 1.x. I was getting this error ; ```; `; __pydantic_self__.__pydantic_validator__.validate_python(data, self_instance=__pydantic_self__) TypeError: Array.validate_type() takes 2 positional arguments but 3 were given`; ```. from this line of code in my example ( i believe it, recharge may need to pin pydantic 1.x). ```; from openff.recharge.esp.storage import MoleculeESPRecord; qc_data_record = MoleculeESPRecord.from_molecule(; openff_mol_3D, conformer=conformer, grid_coordinates=grid, esp=esp, electric_field=None, esp_settings=qc_data_settings; ); ```. ```. name: psi4; channels:; - conda-forge; - conda-forge/label/libint_dev; dependencies:; - conda-forge::psi4>=1.8.2; - conda-forge::openff-toolkit; - conda-forge::openff-recharge; - conda-forge::pydantic<2. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826950752
https://github.com/psi4/psi4/issues/2300#issuecomment-1826950752:224,Deployability,install,installation,224,"This whole thread was very useful. I was able to create a conda environment with the latest psi4, openff-toolkit, and openff-recharge using this yml. The only thing not really mentioned in this thread, or the psicode latest installation is pinning pydantic version 1.x. I was getting this error ; ```; `; __pydantic_self__.__pydantic_validator__.validate_python(data, self_instance=__pydantic_self__) TypeError: Array.validate_type() takes 2 positional arguments but 3 were given`; ```. from this line of code in my example ( i believe it, recharge may need to pin pydantic 1.x). ```; from openff.recharge.esp.storage import MoleculeESPRecord; qc_data_record = MoleculeESPRecord.from_molecule(; openff_mol_3D, conformer=conformer, grid_coordinates=grid, esp=esp, electric_field=None, esp_settings=qc_data_settings; ); ```. ```. name: psi4; channels:; - conda-forge; - conda-forge/label/libint_dev; dependencies:; - conda-forge::psi4>=1.8.2; - conda-forge::openff-toolkit; - conda-forge::openff-recharge; - conda-forge::pydantic<2. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826950752
https://github.com/psi4/psi4/issues/2300#issuecomment-1826950752:898,Integrability,depend,dependencies,898,"This whole thread was very useful. I was able to create a conda environment with the latest psi4, openff-toolkit, and openff-recharge using this yml. The only thing not really mentioned in this thread, or the psicode latest installation is pinning pydantic version 1.x. I was getting this error ; ```; `; __pydantic_self__.__pydantic_validator__.validate_python(data, self_instance=__pydantic_self__) TypeError: Array.validate_type() takes 2 positional arguments but 3 were given`; ```. from this line of code in my example ( i believe it, recharge may need to pin pydantic 1.x). ```; from openff.recharge.esp.storage import MoleculeESPRecord; qc_data_record = MoleculeESPRecord.from_molecule(; openff_mol_3D, conformer=conformer, grid_coordinates=grid, esp=esp, electric_field=None, esp_settings=qc_data_settings; ); ```. ```. name: psi4; channels:; - conda-forge; - conda-forge/label/libint_dev; dependencies:; - conda-forge::psi4>=1.8.2; - conda-forge::openff-toolkit; - conda-forge::openff-recharge; - conda-forge::pydantic<2. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826950752
https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338:152,Availability,toler,tolerant,152,"Thanks for the report, @GregorySchwing. Is there any chance you've got qcportal or qcfractal installed? I ask because psi4 itself should be pydantic v2-tolerant (that is, psi4 imports the v1 API from v2), while qcfractal won't be until the v0.52 release. But that's in theory. In practice, I haven't tested lately with v2, and pydantic is moving quickly and is widely used, so it might be safer to pin it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338
https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338:93,Deployability,install,installed,93,"Thanks for the report, @GregorySchwing. Is there any chance you've got qcportal or qcfractal installed? I ask because psi4 itself should be pydantic v2-tolerant (that is, psi4 imports the v1 API from v2), while qcfractal won't be until the v0.52 release. But that's in theory. In practice, I haven't tested lately with v2, and pydantic is moving quickly and is widely used, so it might be safer to pin it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338
https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338:246,Deployability,release,release,246,"Thanks for the report, @GregorySchwing. Is there any chance you've got qcportal or qcfractal installed? I ask because psi4 itself should be pydantic v2-tolerant (that is, psi4 imports the v1 API from v2), while qcfractal won't be until the v0.52 release. But that's in theory. In practice, I haven't tested lately with v2, and pydantic is moving quickly and is widely used, so it might be safer to pin it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338
https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338:389,Safety,safe,safer,389,"Thanks for the report, @GregorySchwing. Is there any chance you've got qcportal or qcfractal installed? I ask because psi4 itself should be pydantic v2-tolerant (that is, psi4 imports the v1 API from v2), while qcfractal won't be until the v0.52 release. But that's in theory. In practice, I haven't tested lately with v2, and pydantic is moving quickly and is widely used, so it might be safer to pin it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338
https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338:300,Testability,test,tested,300,"Thanks for the report, @GregorySchwing. Is there any chance you've got qcportal or qcfractal installed? I ask because psi4 itself should be pydantic v2-tolerant (that is, psi4 imports the v1 API from v2), while qcfractal won't be until the v0.52 release. But that's in theory. In practice, I haven't tested lately with v2, and pydantic is moving quickly and is widely used, so it might be safer to pin it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338
https://github.com/psi4/psi4/issues/2300#issuecomment-1828415561:145,Deployability,update,updated,145,"That looks like a problem in OpenFF Recharge (unlike most of our other packages, that one is used a little bit less externally so it hasn't been updated for the Pydantic v1/v2 import guards). I'll fix it there",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1828415561
https://github.com/psi4/psi4/pull/2302#issuecomment-927966888:179,Testability,test,test,179,"I'm familiar with the deep copy stuff because I wrote some of it. Everything here seems good to me. If there were any unexpected consequences, they should have been caught by the test suite.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2302#issuecomment-927966888
https://github.com/psi4/psi4/issues/2304#issuecomment-928273414:144,Integrability,depend,depending,144,"Thanks!. * this is dimer - m1 - m2, and the monomer geometries are uniform, so what you're seeing is a big increase in inaccuracy for the dimer depending on if its extent is near or far. is that right?; * any idea about ""OptM3 with GC"" characteristics and how it relates to defgrid2 https://sites.google.com/site/orcainputlibrary/numerical-precision?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-928273414
https://github.com/psi4/psi4/issues/2304#issuecomment-928335315:296,Usability,simpl,simply,296,"Yes -- that is right. It may also be important to note that the monomer m2 may not be in the exact same orientation relative to m1 for both dimers. . I am having trouble finding any information about ORCA's ""OptM3 with GC,"" so I'm not sure how it relates to defgrid2 (yet). The ORCA output files simply state:; `Radial Grid Type RadialGrid . . . OptM3 with GC (2021)`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-928335315
https://github.com/psi4/psi4/issues/2304#issuecomment-928914815:228,Performance,optimiz,optimized,228,"OptM3 with GC is the Treutler-Ahlrichs M3 mapping with Gauss-Chebyschev (GC) quadrature. This is similar to what psi4 does.; However, the radial points in psi4 are fixed numbers while in ORCA they vary for each element and were optimized against some data set (hence `OptM3 with GC`). For benchmarking interaction energies one wants `defgrid3` in ORCA and ``590/99`` in psi4. . Changing the monomer orientation will also have some influence. Though ORCA has an optional feature that makes grid rotational invariant but I dont know how it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-928914815
https://github.com/psi4/psi4/issues/2304#issuecomment-928914815:289,Testability,benchmark,benchmarking,289,"OptM3 with GC is the Treutler-Ahlrichs M3 mapping with Gauss-Chebyschev (GC) quadrature. This is similar to what psi4 does.; However, the radial points in psi4 are fixed numbers while in ORCA they vary for each element and were optimized against some data set (hence `OptM3 with GC`). For benchmarking interaction energies one wants `defgrid3` in ORCA and ``590/99`` in psi4. . Changing the monomer orientation will also have some influence. Though ORCA has an optional feature that makes grid rotational invariant but I dont know how it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-928914815
https://github.com/psi4/psi4/issues/2304#issuecomment-937245506:410,Availability,robust,robust,410,"Thank you for the info and recommendation, @hokru! Results are still not perfect, but much better. | Benzene Dimer | Min. Monomer Separation (Å) | Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points | Notes |; |---|---|---|---|---|---|---|---|; | 2mer+0-1 | 2.544 | -6.06459045 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -6.06828307 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -5.99965831 | Psi4 | | | | benchmark (CC) |; | 2mer+0-77 | 11.016 | -0.03793439 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -0.04297074 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -0.03186856 | Psi4 | | | | benchmark (CC) |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-937245506
https://github.com/psi4/psi4/issues/2304#issuecomment-937245506:613,Availability,robust,robust,613,"Thank you for the info and recommendation, @hokru! Results are still not perfect, but much better. | Benzene Dimer | Min. Monomer Separation (Å) | Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points | Notes |; |---|---|---|---|---|---|---|---|; | 2mer+0-1 | 2.544 | -6.06459045 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -6.06828307 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -5.99965831 | Psi4 | | | | benchmark (CC) |; | 2mer+0-77 | 11.016 | -0.03793439 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -0.04297074 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -0.03186856 | Psi4 | | | | benchmark (CC) |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-937245506
https://github.com/psi4/psi4/issues/2304#issuecomment-937245506:147,Energy Efficiency,Energy,Energy,147,"Thank you for the info and recommendation, @hokru! Results are still not perfect, but much better. | Benzene Dimer | Min. Monomer Separation (Å) | Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points | Notes |; |---|---|---|---|---|---|---|---|; | 2mer+0-1 | 2.544 | -6.06459045 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -6.06828307 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -5.99965831 | Psi4 | | | | benchmark (CC) |; | 2mer+0-77 | 11.016 | -0.03793439 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -0.04297074 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -0.03186856 | Psi4 | | | | benchmark (CC) |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-937245506
https://github.com/psi4/psi4/issues/2304#issuecomment-937245506:453,Testability,benchmark,benchmark,453,"Thank you for the info and recommendation, @hokru! Results are still not perfect, but much better. | Benzene Dimer | Min. Monomer Separation (Å) | Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points | Notes |; |---|---|---|---|---|---|---|---|; | 2mer+0-1 | 2.544 | -6.06459045 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -6.06828307 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -5.99965831 | Psi4 | | | | benchmark (CC) |; | 2mer+0-77 | 11.016 | -0.03793439 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -0.04297074 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -0.03186856 | Psi4 | | | | benchmark (CC) |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-937245506
https://github.com/psi4/psi4/issues/2304#issuecomment-937245506:656,Testability,benchmark,benchmark,656,"Thank you for the info and recommendation, @hokru! Results are still not perfect, but much better. | Benzene Dimer | Min. Monomer Separation (Å) | Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points | Notes |; |---|---|---|---|---|---|---|---|; | 2mer+0-1 | 2.544 | -6.06459045 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -6.06828307 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -5.99965831 | Psi4 | | | | benchmark (CC) |; | 2mer+0-77 | 11.016 | -0.03793439 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -0.04297074 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -0.03186856 | Psi4 | | | | benchmark (CC) |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-937245506
https://github.com/psi4/psi4/issues/2304#issuecomment-937524349:214,Availability,error,errors,214,"For `2mer+0-1` the difference is super small (< 0.01 kJ) and differences in density fitting could play a role.; Is ORCA run with RIJCOSX (default) or RIJK (equivalent to psi4's DF) ? ; To eliminate density fitting errors you could run both programs with conventional integrals. If still differences remain, check the values of the D3 and gCP corrections. They should match nearly perfectly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-937524349
https://github.com/psi4/psi4/issues/2305#issuecomment-929220194:39,Modifiability,variab,variable,39,> is there any reason not to grab this variable from the incoming wavefunction?. I think that's a safe solution nowadays.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2305#issuecomment-929220194
https://github.com/psi4/psi4/issues/2305#issuecomment-929220194:98,Safety,safe,safe,98,> is there any reason not to grab this variable from the incoming wavefunction?. I think that's a safe solution nowadays.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2305#issuecomment-929220194
https://github.com/psi4/psi4/issues/2307#issuecomment-929603384:33,Integrability,protocol,protocols,33,"you'd submit to psi4 with `input.protocols.native_files = ""all""` and then access the file _contents_ as `result.native_files[""grid_field.dat""]`, and that can be readily read into arrays. we don't have any grid-dependent qcvariables at present. adding those would probably need a pass that included MO cube files.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2307#issuecomment-929603384
https://github.com/psi4/psi4/issues/2307#issuecomment-929603384:210,Integrability,depend,dependent,210,"you'd submit to psi4 with `input.protocols.native_files = ""all""` and then access the file _contents_ as `result.native_files[""grid_field.dat""]`, and that can be readily read into arrays. we don't have any grid-dependent qcvariables at present. adding those would probably need a pass that included MO cube files.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2307#issuecomment-929603384
https://github.com/psi4/psi4/issues/2307#issuecomment-929603384:74,Security,access,access,74,"you'd submit to psi4 with `input.protocols.native_files = ""all""` and then access the file _contents_ as `result.native_files[""grid_field.dat""]`, and that can be readily read into arrays. we don't have any grid-dependent qcvariables at present. adding those would probably need a pass that included MO cube files.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2307#issuecomment-929603384
https://github.com/psi4/psi4/issues/2308#issuecomment-936911249:0,Availability,Ping,Pinging,0,"Pinging @lothian, who said he'd look into the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-936911249
https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234:814,Availability,failure,failure,814,"The problem appears to be that, when the wave function is labelled ""ROHF"", MRCC it expects the orbitals to be truly spin restricted (which is reasonable behavior, in general). However, for open-shell systems, ROHF-B-CC naturally yields spin-unrestricted orbitals due to the fact that the alpha and beta T1 amplitudes are distinct. (This can be avoided using less conventional open-shell B-CC formulations, but Psi4 uses the ""standard"" approach.) However, given that the UHF- and ROHF-based algorithms yield the same results in Psi4 (apart from differences associated with using frozen core), the interface to MRCC should work correctly if the user chooses `reference uhf`. No changes to either Psi4 or MRCC appear to be necessary to avoid this problem. Kirk Peterson has confirmed that this corrects the interface failure he reported earlier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234
https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234:596,Integrability,interface,interface,596,"The problem appears to be that, when the wave function is labelled ""ROHF"", MRCC it expects the orbitals to be truly spin restricted (which is reasonable behavior, in general). However, for open-shell systems, ROHF-B-CC naturally yields spin-unrestricted orbitals due to the fact that the alpha and beta T1 amplitudes are distinct. (This can be avoided using less conventional open-shell B-CC formulations, but Psi4 uses the ""standard"" approach.) However, given that the UHF- and ROHF-based algorithms yield the same results in Psi4 (apart from differences associated with using frozen core), the interface to MRCC should work correctly if the user chooses `reference uhf`. No changes to either Psi4 or MRCC appear to be necessary to avoid this problem. Kirk Peterson has confirmed that this corrects the interface failure he reported earlier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234
https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234:804,Integrability,interface,interface,804,"The problem appears to be that, when the wave function is labelled ""ROHF"", MRCC it expects the orbitals to be truly spin restricted (which is reasonable behavior, in general). However, for open-shell systems, ROHF-B-CC naturally yields spin-unrestricted orbitals due to the fact that the alpha and beta T1 amplitudes are distinct. (This can be avoided using less conventional open-shell B-CC formulations, but Psi4 uses the ""standard"" approach.) However, given that the UHF- and ROHF-based algorithms yield the same results in Psi4 (apart from differences associated with using frozen core), the interface to MRCC should work correctly if the user chooses `reference uhf`. No changes to either Psi4 or MRCC appear to be necessary to avoid this problem. Kirk Peterson has confirmed that this corrects the interface failure he reported earlier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234
https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234:344,Safety,avoid,avoided,344,"The problem appears to be that, when the wave function is labelled ""ROHF"", MRCC it expects the orbitals to be truly spin restricted (which is reasonable behavior, in general). However, for open-shell systems, ROHF-B-CC naturally yields spin-unrestricted orbitals due to the fact that the alpha and beta T1 amplitudes are distinct. (This can be avoided using less conventional open-shell B-CC formulations, but Psi4 uses the ""standard"" approach.) However, given that the UHF- and ROHF-based algorithms yield the same results in Psi4 (apart from differences associated with using frozen core), the interface to MRCC should work correctly if the user chooses `reference uhf`. No changes to either Psi4 or MRCC appear to be necessary to avoid this problem. Kirk Peterson has confirmed that this corrects the interface failure he reported earlier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234
https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234:733,Safety,avoid,avoid,733,"The problem appears to be that, when the wave function is labelled ""ROHF"", MRCC it expects the orbitals to be truly spin restricted (which is reasonable behavior, in general). However, for open-shell systems, ROHF-B-CC naturally yields spin-unrestricted orbitals due to the fact that the alpha and beta T1 amplitudes are distinct. (This can be avoided using less conventional open-shell B-CC formulations, but Psi4 uses the ""standard"" approach.) However, given that the UHF- and ROHF-based algorithms yield the same results in Psi4 (apart from differences associated with using frozen core), the interface to MRCC should work correctly if the user chooses `reference uhf`. No changes to either Psi4 or MRCC appear to be necessary to avoid this problem. Kirk Peterson has confirmed that this corrects the interface failure he reported earlier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234
https://github.com/psi4/psi4/issues/2308#issuecomment-1041551283:15,Deployability,update,update,15,Thanks for the update! It sounds to me like the `mrcc` module should move away from determining RHF/UHF/ROHF from the value of the global and read it off the wavefunction. The ROHF-B-CC wavefunction should have `same_a_b_orbs_ = False`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041551283
https://github.com/psi4/psi4/issues/2308#issuecomment-1041983239:263,Integrability,depend,depending,263,"The reference wavefunction shouldn't be changed, but cloning the wavefunction _before_ `cctransort`, and then having `cctransort` set `same_a_b_orbs_` sounds reasonable to me. I'd also agree with the driver changing this right before or right after `cctransort`, depending on what is most convenient for the internal logic of `cctransort`. `Wavefunction` doesn't define a way to set change `same_a_b_orbs_`, but we can add one easily.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041983239
https://github.com/psi4/psi4/issues/2308#issuecomment-1041983239:317,Testability,log,logic,317,"The reference wavefunction shouldn't be changed, but cloning the wavefunction _before_ `cctransort`, and then having `cctransort` set `same_a_b_orbs_` sounds reasonable to me. I'd also agree with the driver changing this right before or right after `cctransort`, depending on what is most convenient for the internal logic of `cctransort`. `Wavefunction` doesn't define a way to set change `same_a_b_orbs_`, but we can add one easily.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041983239
https://github.com/psi4/psi4/issues/2308#issuecomment-1042970149:243,Modifiability,variab,variables,243,"I think the best course of action is for me to take this as part of my foray into the `cc` mega-module, after I'm through with the test pass. Incidentally, the current plan for my `cc` module pass is: get `cc` tests off perl, this issue, move variables to `wfn`, move `ccdensity` to Matrix objects, then give `ccdensity` a Wavefunction. There's a lot more that could be done, but my primary interest is in syncing up densities across multiple modules.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1042970149
https://github.com/psi4/psi4/issues/2308#issuecomment-1042970149:131,Testability,test,test,131,"I think the best course of action is for me to take this as part of my foray into the `cc` mega-module, after I'm through with the test pass. Incidentally, the current plan for my `cc` module pass is: get `cc` tests off perl, this issue, move variables to `wfn`, move `ccdensity` to Matrix objects, then give `ccdensity` a Wavefunction. There's a lot more that could be done, but my primary interest is in syncing up densities across multiple modules.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1042970149
https://github.com/psi4/psi4/issues/2308#issuecomment-1042970149:210,Testability,test,tests,210,"I think the best course of action is for me to take this as part of my foray into the `cc` mega-module, after I'm through with the test pass. Incidentally, the current plan for my `cc` module pass is: get `cc` tests off perl, this issue, move variables to `wfn`, move `ccdensity` to Matrix objects, then give `ccdensity` a Wavefunction. There's a lot more that could be done, but my primary interest is in syncing up densities across multiple modules.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1042970149
https://github.com/psi4/psi4/issues/2308#issuecomment-1043004806:41,Usability,responsiv,responsive,41,Sounds like a great plan. I'll try to be responsive when/if you have questions.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1043004806
https://github.com/psi4/psi4/issues/2309#issuecomment-938891510:107,Safety,Abort,Aborted,107,I can:; ```; (psi4-pbe_xtpl) kraus@dorje:~/psi4/i2309::psi4 -n 1 input.dat ; corrupted size vs. prev_size; Aborted (core dumped); ```; [coredump.txt](https://github.com/psi4/psi4/files/7313127/coredump.txt); [bt.txt](https://github.com/psi4/psi4/files/7313137/bt.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2309#issuecomment-938891510
https://github.com/psi4/psi4/issues/2310#issuecomment-1046320061:197,Availability,error,error,197,"The driver has failed to trap unsupported workflows for linear response properties before, so you're probably right. I can write up a PR to trap unsupported `cc_property` workflows... I get a PSIO error when I try an ROHF linear response property. Is that another case of the driver failing to trap an unsupported workflow?. ```; PSIO_ERROR: Can't find TOC Entry WAbEi (Ei,Ab); PSIO_ERROR: unit = 112, errval = 13; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2310#issuecomment-1046320061
https://github.com/psi4/psi4/pull/2311#issuecomment-932984324:30,Integrability,message,messages,30,P.S. Ignore most of my commit messages (I have too much fun when coding :)),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-932984324
https://github.com/psi4/psi4/pull/2311#issuecomment-933477291:921,Integrability,message,messages,921,"I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments. * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933477291
https://github.com/psi4/psi4/pull/2311#issuecomment-933477291:374,Usability,clear,clear,374,"I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments. * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933477291
https://github.com/psi4/psi4/pull/2311#issuecomment-933477291:523,Usability,feedback,feedback,523,"I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments. * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933477291
https://github.com/psi4/psi4/pull/2311#issuecomment-933583054:1035,Deployability,Update,Update,1035,"> I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments.; > ; > * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; > * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; > * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it. Also, I opened this PR early in order to a) Update the Psi developers on the progress of the new CFMM code, and b) To get y'all to start thinking about the future of the JK class, and potential design choices for if a user would like to run, per se DF-J + linK, CFMM-J + chain-of-spheres K, etc. Also, most of my ""non-sense"" PR messages result from the fact that I have to change branches, so I make a quick push to GH before I switch to another project, and can be safely ignored, as they don't mean anything. I will avoid doing such a thing in the future though, and add more descriptive Git messages :) However, the descriptive commit messages DO mean something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054
https://github.com/psi4/psi4/pull/2311#issuecomment-933583054:934,Integrability,message,messages,934,"> I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments.; > ; > * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; > * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; > * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it. Also, I opened this PR early in order to a) Update the Psi developers on the progress of the new CFMM code, and b) To get y'all to start thinking about the future of the JK class, and potential design choices for if a user would like to run, per se DF-J + linK, CFMM-J + chain-of-spheres K, etc. Also, most of my ""non-sense"" PR messages result from the fact that I have to change branches, so I make a quick push to GH before I switch to another project, and can be safely ignored, as they don't mean anything. I will avoid doing such a thing in the future though, and add more descriptive Git messages :) However, the descriptive commit messages DO mean something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054
https://github.com/psi4/psi4/pull/2311#issuecomment-933583054:1319,Integrability,message,messages,1319,"> I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments.; > ; > * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; > * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; > * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it. Also, I opened this PR early in order to a) Update the Psi developers on the progress of the new CFMM code, and b) To get y'all to start thinking about the future of the JK class, and potential design choices for if a user would like to run, per se DF-J + linK, CFMM-J + chain-of-spheres K, etc. Also, most of my ""non-sense"" PR messages result from the fact that I have to change branches, so I make a quick push to GH before I switch to another project, and can be safely ignored, as they don't mean anything. I will avoid doing such a thing in the future though, and add more descriptive Git messages :) However, the descriptive commit messages DO mean something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054
https://github.com/psi4/psi4/pull/2311#issuecomment-933583054:1585,Integrability,message,messages,1585,"> I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments.; > ; > * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; > * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; > * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it. Also, I opened this PR early in order to a) Update the Psi developers on the progress of the new CFMM code, and b) To get y'all to start thinking about the future of the JK class, and potential design choices for if a user would like to run, per se DF-J + linK, CFMM-J + chain-of-spheres K, etc. Also, most of my ""non-sense"" PR messages result from the fact that I have to change branches, so I make a quick push to GH before I switch to another project, and can be safely ignored, as they don't mean anything. I will avoid doing such a thing in the future though, and add more descriptive Git messages :) However, the descriptive commit messages DO mean something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054
https://github.com/psi4/psi4/pull/2311#issuecomment-933583054:1629,Integrability,message,messages,1629,"> I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments.; > ; > * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; > * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; > * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it. Also, I opened this PR early in order to a) Update the Psi developers on the progress of the new CFMM code, and b) To get y'all to start thinking about the future of the JK class, and potential design choices for if a user would like to run, per se DF-J + linK, CFMM-J + chain-of-spheres K, etc. Also, most of my ""non-sense"" PR messages result from the fact that I have to change branches, so I make a quick push to GH before I switch to another project, and can be safely ignored, as they don't mean anything. I will avoid doing such a thing in the future though, and add more descriptive Git messages :) However, the descriptive commit messages DO mean something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054
https://github.com/psi4/psi4/pull/2311#issuecomment-933583054:1457,Safety,safe,safely,1457,"> I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments.; > ; > * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; > * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; > * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it. Also, I opened this PR early in order to a) Update the Psi developers on the progress of the new CFMM code, and b) To get y'all to start thinking about the future of the JK class, and potential design choices for if a user would like to run, per se DF-J + linK, CFMM-J + chain-of-spheres K, etc. Also, most of my ""non-sense"" PR messages result from the fact that I have to change branches, so I make a quick push to GH before I switch to another project, and can be safely ignored, as they don't mean anything. I will avoid doing such a thing in the future though, and add more descriptive Git messages :) However, the descriptive commit messages DO mean something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054
https://github.com/psi4/psi4/pull/2311#issuecomment-933583054:1509,Safety,avoid,avoid,1509,"> I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments.; > ; > * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; > * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; > * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it. Also, I opened this PR early in order to a) Update the Psi developers on the progress of the new CFMM code, and b) To get y'all to start thinking about the future of the JK class, and potential design choices for if a user would like to run, per se DF-J + linK, CFMM-J + chain-of-spheres K, etc. Also, most of my ""non-sense"" PR messages result from the fact that I have to change branches, so I make a quick push to GH before I switch to another project, and can be safely ignored, as they don't mean anything. I will avoid doing such a thing in the future though, and add more descriptive Git messages :) However, the descriptive commit messages DO mean something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054
https://github.com/psi4/psi4/pull/2311#issuecomment-933583054:385,Usability,clear,clear,385,"> I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments.; > ; > * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; > * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; > * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it. Also, I opened this PR early in order to a) Update the Psi developers on the progress of the new CFMM code, and b) To get y'all to start thinking about the future of the JK class, and potential design choices for if a user would like to run, per se DF-J + linK, CFMM-J + chain-of-spheres K, etc. Also, most of my ""non-sense"" PR messages result from the fact that I have to change branches, so I make a quick push to GH before I switch to another project, and can be safely ignored, as they don't mean anything. I will avoid doing such a thing in the future though, and add more descriptive Git messages :) However, the descriptive commit messages DO mean something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054
https://github.com/psi4/psi4/pull/2311#issuecomment-933583054:534,Usability,feedback,feedback,534,"> I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments.; > ; > * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; > * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; > * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it. Also, I opened this PR early in order to a) Update the Psi developers on the progress of the new CFMM code, and b) To get y'all to start thinking about the future of the JK class, and potential design choices for if a user would like to run, per se DF-J + linK, CFMM-J + chain-of-spheres K, etc. Also, most of my ""non-sense"" PR messages result from the fact that I have to change branches, so I make a quick push to GH before I switch to another project, and can be safely ignored, as they don't mean anything. I will avoid doing such a thing in the future though, and add more descriptive Git messages :) However, the descriptive commit messages DO mean something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054
https://github.com/psi4/psi4/pull/2314#issuecomment-934588224:87,Testability,test,tests,87,"Thanks much for the review and helpful corrections!. Yes, I am fully aware that adding tests and documentation is necessary, I think I know how to go about doing this, and I will certainly add these before the PR is merge-ready. . It would be really nice to have a test that checks all three beyond-S^2 corrections: E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind. It would require two SAPT calculations at the moment though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-934588224
https://github.com/psi4/psi4/pull/2314#issuecomment-934588224:265,Testability,test,test,265,"Thanks much for the review and helpful corrections!. Yes, I am fully aware that adding tests and documentation is necessary, I think I know how to go about doing this, and I will certainly add these before the PR is merge-ready. . It would be really nice to have a test that checks all three beyond-S^2 corrections: E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind. It would require two SAPT calculations at the moment though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-934588224
https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:351,Availability,avail,available,351,"> The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require energy('sapt(dft)') and the last one energy('sapt2+3'). That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? W",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375
https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:734,Availability,avail,available,734,"> The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require energy('sapt(dft)') and the last one energy('sapt2+3'). That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? W",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375
https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:170,Energy Efficiency,energy,energy,170,"> The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require energy('sapt(dft)') and the last one energy('sapt2+3'). That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? W",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375
https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:207,Energy Efficiency,energy,energy,207,"> The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require energy('sapt(dft)') and the last one energy('sapt2+3'). That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? W",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375
https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:372,Energy Efficiency,energy,energy,372,"> The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require energy('sapt(dft)') and the last one energy('sapt2+3'). That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? W",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375
https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:639,Energy Efficiency,energy,energy,639,"> The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require energy('sapt(dft)') and the last one energy('sapt2+3'). That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? W",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375
https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:1368,Energy Efficiency,power,power,1368,"bly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? We have clean aliasing+deprecation warning capability now for qcvars. And the sinf option names I think could be safely renamed due to narrow use in the wild. Maybe `do_ind30_exch_full` or `do_ind30_exch_nons2`. Or, if ""non-s^2"" becomes the norm, the option can be `do_ind30_exch_s2` :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375
https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:1909,Energy Efficiency,ENERGY,ENERGY,1909,"bly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? We have clean aliasing+deprecation warning capability now for qcvars. And the sinf option names I think could be safely renamed due to narrow use in the wild. Maybe `do_ind30_exch_full` or `do_ind30_exch_nons2`. Or, if ""non-s^2"" becomes the norm, the option can be `do_ind30_exch_s2` :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375
https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:1945,Energy Efficiency,ENERGY,ENERGY,1945,"bly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? We have clean aliasing+deprecation warning capability now for qcvars. And the sinf option names I think could be safely renamed due to narrow use in the wild. Maybe `do_ind30_exch_full` or `do_ind30_exch_nons2`. Or, if ""non-s^2"" becomes the norm, the option can be `do_ind30_exch_s2` :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375
https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:1982,Energy Efficiency,ENERGY,ENERGY,1982,"bly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? We have clean aliasing+deprecation warning capability now for qcvars. And the sinf option names I think could be safely renamed due to narrow use in the wild. Maybe `do_ind30_exch_full` or `do_ind30_exch_nons2`. Or, if ""non-s^2"" becomes the norm, the option can be `do_ind30_exch_s2` :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375
https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:2113,Safety,safe,safely,2113,"bly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? We have clean aliasing+deprecation warning capability now for qcvars. And the sinf option names I think could be safely renamed due to narrow use in the wild. Maybe `do_ind30_exch_full` or `do_ind30_exch_nons2`. Or, if ""non-s^2"" becomes the norm, the option can be `do_ind30_exch_s2` :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375
https://github.com/psi4/psi4/pull/2314#issuecomment-994198534:49,Testability,test,test,49,"This PR is ready to be unblocked and reviewed. A test has been added. Frozen-core works as expected, that is, the number is unchanged (just like regular E(30)exch-ind). The numbers agree with the original paper. @jwaldrop107 - you might want to take a look and check if everything's still working in your hands. We had a very productive discussion with @CDSherrill @loriab @zachglick last week. We have some ideas how to make the SAPT workflows, including the stuff without the S^2 approximation, simpler and more consistent. We are also thinking of renaming all **Sinf** to **Sall**, but that's a story for a separate PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-994198534
https://github.com/psi4/psi4/pull/2314#issuecomment-994198534:497,Usability,simpl,simpler,497,"This PR is ready to be unblocked and reviewed. A test has been added. Frozen-core works as expected, that is, the number is unchanged (just like regular E(30)exch-ind). The numbers agree with the original paper. @jwaldrop107 - you might want to take a look and check if everything's still working in your hands. We had a very productive discussion with @CDSherrill @loriab @zachglick last week. We have some ideas how to make the SAPT workflows, including the stuff without the S^2 approximation, simpler and more consistent. We are also thinking of renaming all **Sinf** to **Sall**, but that's a story for a separate PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-994198534
https://github.com/psi4/psi4/pull/2319#issuecomment-944352419:146,Energy Efficiency,allocate,allocate,146,"Timings test indicate that re-allocation cost is negligible. All these quantities are `n^2`, and a 5000 x 5000 matrix takes about 0.11 seconds to allocate on my laptop. That's nothing in comparison to the diagonalization time. I no longer see a barrier to merging this in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2319#issuecomment-944352419
https://github.com/psi4/psi4/pull/2319#issuecomment-944352419:8,Testability,test,test,8,"Timings test indicate that re-allocation cost is negligible. All these quantities are `n^2`, and a 5000 x 5000 matrix takes about 0.11 seconds to allocate on my laptop. That's nothing in comparison to the diagonalization time. I no longer see a barrier to merging this in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2319#issuecomment-944352419
https://github.com/psi4/psi4/pull/2320#issuecomment-943364464:98,Deployability,update,updates,98,"`libdiis` needs more changes to get it talking with [A/E]DIIS, so it'll be a while before further updates.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-943364464
https://github.com/psi4/psi4/pull/2320#issuecomment-999915941:134,Energy Efficiency,adapt,adaptation,134,"There will be a change to the next version of the PR: ROHF ADIIS/EDIIS ""capabilities"" will be removed. As best as I can tell, an ROHF adaptation for ADIIS and EDIIS was never published, my numerical results when I try an adaptation are lackluster, and the formulation is awkward when I try to couple regular DIIS with ADIIS and EDIIS. If anybody thinks they know how to make ADIIS/EDIIS work for ROHF, let me know. Otherwise, the next version of the PR is RHF/UHF/CUHF only.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-999915941
https://github.com/psi4/psi4/pull/2320#issuecomment-999915941:221,Energy Efficiency,adapt,adaptation,221,"There will be a change to the next version of the PR: ROHF ADIIS/EDIIS ""capabilities"" will be removed. As best as I can tell, an ROHF adaptation for ADIIS and EDIIS was never published, my numerical results when I try an adaptation are lackluster, and the formulation is awkward when I try to couple regular DIIS with ADIIS and EDIIS. If anybody thinks they know how to make ADIIS/EDIIS work for ROHF, let me know. Otherwise, the next version of the PR is RHF/UHF/CUHF only.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-999915941
https://github.com/psi4/psi4/pull/2320#issuecomment-999915941:134,Modifiability,adapt,adaptation,134,"There will be a change to the next version of the PR: ROHF ADIIS/EDIIS ""capabilities"" will be removed. As best as I can tell, an ROHF adaptation for ADIIS and EDIIS was never published, my numerical results when I try an adaptation are lackluster, and the formulation is awkward when I try to couple regular DIIS with ADIIS and EDIIS. If anybody thinks they know how to make ADIIS/EDIIS work for ROHF, let me know. Otherwise, the next version of the PR is RHF/UHF/CUHF only.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-999915941
https://github.com/psi4/psi4/pull/2320#issuecomment-999915941:221,Modifiability,adapt,adaptation,221,"There will be a change to the next version of the PR: ROHF ADIIS/EDIIS ""capabilities"" will be removed. As best as I can tell, an ROHF adaptation for ADIIS and EDIIS was never published, my numerical results when I try an adaptation are lackluster, and the formulation is awkward when I try to couple regular DIIS with ADIIS and EDIIS. If anybody thinks they know how to make ADIIS/EDIIS work for ROHF, let me know. Otherwise, the next version of the PR is RHF/UHF/CUHF only.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-999915941
https://github.com/psi4/psi4/pull/2320#issuecomment-1000543786:87,Modifiability,refactor,refactor,87,"During the course of working on this, I've decided a more extensive, very-API breaking refactor will be needed. The problem is that in the current iteration of the code, DIIS has the responsibility for doing the extrapolation, and that naturally fails if the user requests EDIIS but not DIIS. I'll need to refactor this to have classes just to compute EDIIS/ADIIS/DIIS coefficients, and another class to do the actual extrapolation step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1000543786
https://github.com/psi4/psi4/pull/2320#issuecomment-1000543786:306,Modifiability,refactor,refactor,306,"During the course of working on this, I've decided a more extensive, very-API breaking refactor will be needed. The problem is that in the current iteration of the code, DIIS has the responsibility for doing the extrapolation, and that naturally fails if the user requests EDIIS but not DIIS. I'll need to refactor this to have classes just to compute EDIIS/ADIIS/DIIS coefficients, and another class to do the actual extrapolation step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1000543786
https://github.com/psi4/psi4/pull/2320#issuecomment-1011794278:39,Testability,test,tests,39,"This should be a functional PR. Adding tests would still be good, but I'll gladly take suggestions on what this tests should be.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1011794278
https://github.com/psi4/psi4/pull/2320#issuecomment-1011794278:112,Testability,test,tests,112,"This should be a functional PR. Adding tests would still be good, but I'll gladly take suggestions on what this tests should be.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1011794278
https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198:28,Integrability,depend,dependency,28,And I suppose now there's a dependency question: how do we feel about making `scipy` a dependency? That's why tests fail on test environment but full tests passed locally.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198
https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198:87,Integrability,depend,dependency,87,And I suppose now there's a dependency question: how do we feel about making `scipy` a dependency? That's why tests fail on test environment but full tests passed locally.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198
https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198:110,Testability,test,tests,110,And I suppose now there's a dependency question: how do we feel about making `scipy` a dependency? That's why tests fail on test environment but full tests passed locally.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198
https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198:124,Testability,test,test,124,And I suppose now there's a dependency question: how do we feel about making `scipy` a dependency? That's why tests fail on test environment but full tests passed locally.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198
https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198:150,Testability,test,tests,150,And I suppose now there's a dependency question: how do we feel about making `scipy` a dependency? That's why tests fail on test environment but full tests passed locally.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198
https://github.com/psi4/psi4/pull/2320#issuecomment-1012333634:41,Testability,test,tests,41,"> This should be a functional PR. Adding tests would still be good, but I'll gladly take suggestions on what this tests should be. How about the cadmium complex from Hu&Yang, and UF4 from Kudin et al? These probably don't converge without this branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1012333634
https://github.com/psi4/psi4/pull/2320#issuecomment-1012333634:114,Testability,test,tests,114,"> This should be a functional PR. Adding tests would still be good, but I'll gladly take suggestions on what this tests should be. How about the cadmium complex from Hu&Yang, and UF4 from Kudin et al? These probably don't converge without this branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1012333634
https://github.com/psi4/psi4/pull/2320#issuecomment-1012534074:43,Testability,test,tests,43,"> > This should be a functional PR. Adding tests would still be good, but I'll gladly take suggestions on what this tests should be.; > ; > How about the cadmium complex from Hu&Yang, and UF4 from Kudin et al? These probably don't converge without this branch. Added and passing, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1012534074
https://github.com/psi4/psi4/pull/2320#issuecomment-1012534074:116,Testability,test,tests,116,"> > This should be a functional PR. Adding tests would still be good, but I'll gladly take suggestions on what this tests should be.; > ; > How about the cadmium complex from Hu&Yang, and UF4 from Kudin et al? These probably don't converge without this branch. Added and passing, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1012534074
https://github.com/psi4/psi4/pull/2323#issuecomment-943112739:21,Testability,test,test,21,"Why is relaxing this test a good idea? Shouldn't we aim to have a constant number of SCF iterations in a reference, well-defined calculation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2323#issuecomment-943112739
https://github.com/psi4/psi4/pull/2323#issuecomment-943298421:170,Deployability,update,updated,170,"On second thought, this works as a test, it's just... not a usual test where the value is ""correct"" but a test where the value is ""current"" and sometimes does need to be updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2323#issuecomment-943298421
https://github.com/psi4/psi4/pull/2323#issuecomment-943298421:35,Testability,test,test,35,"On second thought, this works as a test, it's just... not a usual test where the value is ""correct"" but a test where the value is ""current"" and sometimes does need to be updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2323#issuecomment-943298421
https://github.com/psi4/psi4/pull/2323#issuecomment-943298421:66,Testability,test,test,66,"On second thought, this works as a test, it's just... not a usual test where the value is ""correct"" but a test where the value is ""current"" and sometimes does need to be updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2323#issuecomment-943298421
https://github.com/psi4/psi4/pull/2323#issuecomment-943298421:106,Testability,test,test,106,"On second thought, this works as a test, it's just... not a usual test where the value is ""correct"" but a test where the value is ""current"" and sometimes does need to be updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2323#issuecomment-943298421
https://github.com/psi4/psi4/pull/2328#issuecomment-946912359:341,Integrability,rout,route,341,"Thanks for the suggestion. This is going to have trouble as-is because `driver` is under schema control https://github.com/MolSSI/QCElemental/blob/master/qcelemental/models/common_models.py#L57-L70 . Do you have this working locally? Could you be running `psi4 --json` rather than `psi4 --qcschema`? The former is an old but still supported route that undergoes fewer checks, iirc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-946912359
https://github.com/psi4/psi4/pull/2328#issuecomment-951101445:133,Availability,down,down,133,"Thanks for starting this. I wonder if the tech is general enough to also save the lambda amplitudes - once there's a test, I'll pull down and tinker with it. @loriab will `psi4 --json` continue to be supported, or are we looking to deprecate it? if the latter, we may wish to either go through something besides `driver`, or see what the QCEl folks think about optionally storing wfn parameters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-951101445
https://github.com/psi4/psi4/pull/2328#issuecomment-951101445:117,Testability,test,test,117,"Thanks for starting this. I wonder if the tech is general enough to also save the lambda amplitudes - once there's a test, I'll pull down and tinker with it. @loriab will `psi4 --json` continue to be supported, or are we looking to deprecate it? if the latter, we may wish to either go through something besides `driver`, or see what the QCEl folks think about optionally storing wfn parameters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-951101445
https://github.com/psi4/psi4/pull/2328#issuecomment-1040476266:44,Testability,test,test,44,I've made the changes requested and added a test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1040476266
https://github.com/psi4/psi4/pull/2328#issuecomment-1040547746:183,Availability,Ping,Ping,183,"Oh dear, it looks like this PR has been contaminated by non-you commits. See if you can follow the healing advice here https://github.com/psi4/psi4/pull/1490#issuecomment-457765390 . Ping if there are any problems. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1040547746
https://github.com/psi4/psi4/pull/2328#issuecomment-1068084388:15,Testability,test,test,15,"I'm fixing the test file. Right now, I think I'm having issues with units.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1068084388
https://github.com/psi4/psi4/pull/2328#issuecomment-1074703959:35,Testability,test,tests,35,I think this is finally ready. All tests seem to be passing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1074703959
https://github.com/psi4/psi4/pull/2328#issuecomment-1106721074:67,Testability,test,test,67,"(sorry for the delay, libint2 was a bit challenging to get going.) test doesn't pass locally, for a few reasons. there are a lot of comments already, so I'll list the reasons here, as well as comment on the relevant lines of code. . 1) `""return_output""` key is deprecated in current QCSchema, this makes `AtomicInput` choke. remove line 12 from the test.; 2) when inside `schema_wrapper.py` (which is inside the driver), you don't need to add the prefix `psi4`. `psi4.core.RHF` should be just `core.RHF` on line 594.; 3) question for @loriab : `json_ret` is (once the above are fixed) of type `AtomicResult`, which is not JSON serializable. this is indeed being caught by line 72 of the test (good call). is there a simple `AtomicResult` -> `Dict` translation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1106721074
https://github.com/psi4/psi4/pull/2328#issuecomment-1106721074:349,Testability,test,test,349,"(sorry for the delay, libint2 was a bit challenging to get going.) test doesn't pass locally, for a few reasons. there are a lot of comments already, so I'll list the reasons here, as well as comment on the relevant lines of code. . 1) `""return_output""` key is deprecated in current QCSchema, this makes `AtomicInput` choke. remove line 12 from the test.; 2) when inside `schema_wrapper.py` (which is inside the driver), you don't need to add the prefix `psi4`. `psi4.core.RHF` should be just `core.RHF` on line 594.; 3) question for @loriab : `json_ret` is (once the above are fixed) of type `AtomicResult`, which is not JSON serializable. this is indeed being caught by line 72 of the test (good call). is there a simple `AtomicResult` -> `Dict` translation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1106721074
https://github.com/psi4/psi4/pull/2328#issuecomment-1106721074:687,Testability,test,test,687,"(sorry for the delay, libint2 was a bit challenging to get going.) test doesn't pass locally, for a few reasons. there are a lot of comments already, so I'll list the reasons here, as well as comment on the relevant lines of code. . 1) `""return_output""` key is deprecated in current QCSchema, this makes `AtomicInput` choke. remove line 12 from the test.; 2) when inside `schema_wrapper.py` (which is inside the driver), you don't need to add the prefix `psi4`. `psi4.core.RHF` should be just `core.RHF` on line 594.; 3) question for @loriab : `json_ret` is (once the above are fixed) of type `AtomicResult`, which is not JSON serializable. this is indeed being caught by line 72 of the test (good call). is there a simple `AtomicResult` -> `Dict` translation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1106721074
https://github.com/psi4/psi4/pull/2328#issuecomment-1106721074:716,Usability,simpl,simple,716,"(sorry for the delay, libint2 was a bit challenging to get going.) test doesn't pass locally, for a few reasons. there are a lot of comments already, so I'll list the reasons here, as well as comment on the relevant lines of code. . 1) `""return_output""` key is deprecated in current QCSchema, this makes `AtomicInput` choke. remove line 12 from the test.; 2) when inside `schema_wrapper.py` (which is inside the driver), you don't need to add the prefix `psi4`. `psi4.core.RHF` should be just `core.RHF` on line 594.; 3) question for @loriab : `json_ret` is (once the above are fixed) of type `AtomicResult`, which is not JSON serializable. this is indeed being caught by line 72 of the test (good call). is there a simple `AtomicResult` -> `Dict` translation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1106721074
https://github.com/psi4/psi4/pull/2328#issuecomment-1126836032:8,Testability,test,test,8,The new test works locally; I think it's ready to go.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1126836032
https://github.com/psi4/psi4/issues/2329#issuecomment-947224243:61,Deployability,install,install,61,"Thanks for trying out psi4! If you're on windows, your conda install line is just right. If you're on linux or mac, you don't actually need the `-c conda-forge`, though it's harmless. Since you're installing from conda, the `psi4 --psiapi` is unnecessary --- activating the environment suffices. I don't have much personal experience with tab help in jupyter, but `help(psi4.set_memory)` returns a sensible docstring for me in interactive python. What you describe does sound with `AttributeError` does sound wrong. If the in-jupyter help is giving you trouble, searching the generated API (https://psicode.org/psi4manual/master/psi4api.html) may work better. If you're new, perhaps check out the tutorials at https://psicode.org/psi4manual/master/index_tutorials.html .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947224243
https://github.com/psi4/psi4/issues/2329#issuecomment-947224243:197,Deployability,install,installing,197,"Thanks for trying out psi4! If you're on windows, your conda install line is just right. If you're on linux or mac, you don't actually need the `-c conda-forge`, though it's harmless. Since you're installing from conda, the `psi4 --psiapi` is unnecessary --- activating the environment suffices. I don't have much personal experience with tab help in jupyter, but `help(psi4.set_memory)` returns a sensible docstring for me in interactive python. What you describe does sound with `AttributeError` does sound wrong. If the in-jupyter help is giving you trouble, searching the generated API (https://psicode.org/psi4manual/master/psi4api.html) may work better. If you're new, perhaps check out the tutorials at https://psicode.org/psi4manual/master/index_tutorials.html .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947224243
https://github.com/psi4/psi4/issues/2329#issuecomment-947731624:33,Deployability,install,installed,33,"Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947731624
https://github.com/psi4/psi4/issues/2329#issuecomment-947731624:317,Performance,load,loading,317,"Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947731624
https://github.com/psi4/psi4/issues/2329#issuecomment-947731624:150,Usability,guid,guide,150,"Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947731624
https://github.com/psi4/psi4/issues/2329#issuecomment-947961590:71,Deployability,install,install,71,"> ; > ; > Thanks for trying out psi4! If you're on windows, your conda install line is just right. If you're on linux or mac, you don't actually need the `-c conda-forge`, though it's harmless. Since you're installing from conda, the `psi4 --psiapi` is unnecessary --- activating the environment suffices.; > ; > I don't have much personal experience with tab help in jupyter, but `help(psi4.set_memory)` returns a sensible docstring for me in interactive python. What you describe does sound with `AttributeError` does sound wrong. If the in-jupyter help is giving you trouble, searching the generated API (https://psicode.org/psi4manual/master/psi4api.html) may work better. If you're new, perhaps check out the tutorials at https://psicode.org/psi4manual/master/index_tutorials.html . Thanks for replying! When I try the `help(psi4.set_memory` it says that there's no `set_memory` attribute. The cell with the `import psi4` runs ok, but it seems it cant access any attribute.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947961590
https://github.com/psi4/psi4/issues/2329#issuecomment-947961590:207,Deployability,install,installing,207,"> ; > ; > Thanks for trying out psi4! If you're on windows, your conda install line is just right. If you're on linux or mac, you don't actually need the `-c conda-forge`, though it's harmless. Since you're installing from conda, the `psi4 --psiapi` is unnecessary --- activating the environment suffices.; > ; > I don't have much personal experience with tab help in jupyter, but `help(psi4.set_memory)` returns a sensible docstring for me in interactive python. What you describe does sound with `AttributeError` does sound wrong. If the in-jupyter help is giving you trouble, searching the generated API (https://psicode.org/psi4manual/master/psi4api.html) may work better. If you're new, perhaps check out the tutorials at https://psicode.org/psi4manual/master/index_tutorials.html . Thanks for replying! When I try the `help(psi4.set_memory` it says that there's no `set_memory` attribute. The cell with the `import psi4` runs ok, but it seems it cant access any attribute.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947961590
https://github.com/psi4/psi4/issues/2329#issuecomment-947961590:957,Security,access,access,957,"> ; > ; > Thanks for trying out psi4! If you're on windows, your conda install line is just right. If you're on linux or mac, you don't actually need the `-c conda-forge`, though it's harmless. Since you're installing from conda, the `psi4 --psiapi` is unnecessary --- activating the environment suffices.; > ; > I don't have much personal experience with tab help in jupyter, but `help(psi4.set_memory)` returns a sensible docstring for me in interactive python. What you describe does sound with `AttributeError` does sound wrong. If the in-jupyter help is giving you trouble, searching the generated API (https://psicode.org/psi4manual/master/psi4api.html) may work better. If you're new, perhaps check out the tutorials at https://psicode.org/psi4manual/master/index_tutorials.html . Thanks for replying! When I try the `help(psi4.set_memory` it says that there's no `set_memory` attribute. The cell with the `import psi4` runs ok, but it seems it cant access any attribute.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947961590
https://github.com/psi4/psi4/issues/2329#issuecomment-947965342:615,Availability,error,error,615,"> ; > ; > Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?. Thanks for your reply. I followed the instructions in your reference but it still doesnt work. Now I see the option to change the kernel in the Notebook to `p4env`, but when trying to import psi4 in that environment I get another error; `ImportError: DLL load failed while importing core`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342
https://github.com/psi4/psi4/issues/2329#issuecomment-947965342:43,Deployability,install,installed,43,"> ; > ; > Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?. Thanks for your reply. I followed the instructions in your reference but it still doesnt work. Now I see the option to change the kernel in the Notebook to `p4env`, but when trying to import psi4 in that environment I get another error; `ImportError: DLL load failed while importing core`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342
https://github.com/psi4/psi4/issues/2329#issuecomment-947965342:327,Performance,load,loading,327,"> ; > ; > Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?. Thanks for your reply. I followed the instructions in your reference but it still doesnt work. Now I see the option to change the kernel in the Notebook to `p4env`, but when trying to import psi4 in that environment I get another error; `ImportError: DLL load failed while importing core`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342
https://github.com/psi4/psi4/issues/2329#issuecomment-947965342:640,Performance,load,load,640,"> ; > ; > Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?. Thanks for your reply. I followed the instructions in your reference but it still doesnt work. Now I see the option to change the kernel in the Notebook to `p4env`, but when trying to import psi4 in that environment I get another error; `ImportError: DLL load failed while importing core`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342
https://github.com/psi4/psi4/issues/2329#issuecomment-947965342:160,Usability,guid,guide,160,"> ; > ; > Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?. Thanks for your reply. I followed the instructions in your reference but it still doesnt work. Now I see the option to change the kernel in the Notebook to `p4env`, but when trying to import psi4 in that environment I get another error; `ImportError: DLL load failed while importing core`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342
https://github.com/psi4/psi4/issues/2329#issuecomment-948193452:333,Availability,Avail,Available,333,"It seems like the kernel is not running in the env it is suposed to. When I run `jupyter kernelspec list`, I get; ```; File ""C:\Users\Usuario\AppData\Local\Temp/ipykernel_13636/728349862.py"", line 1; jupyter kernelspec list; ```; But when I check the jupyter kernel spec list, ; ```; (base) C:\Users\Usuario>jupyter kernelspec list; Available kernels:; p4env C:\Users\Usuario\AppData\Roaming\jupyter\kernels\p4env; python3 C:\Users\Usuario\miniconda3\share\jupyter\kernels\python3; ```; So the path to the kernel in the env should be pointing to `C:\Users\Usuario\AppData\Roaming\jupyter\kernels\p4env`, or something?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-948193452
https://github.com/psi4/psi4/pull/2331#issuecomment-948541747:84,Testability,test,test,84,Thanks for the fix. Can you be persuaded to modify `fsapt-ext-abc` to show that the test passes for either set of units?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2331#issuecomment-948541747
https://github.com/psi4/psi4/pull/2331#issuecomment-948608117:33,Testability,test,test,33,"Thanks. Yes, Lori please add the test case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2331#issuecomment-948608117
https://github.com/psi4/psi4/pull/2331#issuecomment-948683673:0,Testability,test,test,0,test case ready at https://github.com/alenaizan/psi4/pull/2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2331#issuecomment-948683673
https://github.com/psi4/psi4/issues/2333#issuecomment-955805258:92,Safety,avoid,avoid,92,Are there any known methods of getting to build Numpy/Scipy from source using Accelerate to avoid the mismatch? (I think support might have been dropped altogether.),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-955805258
https://github.com/psi4/psi4/issues/2333#issuecomment-956060090:94,Safety,avoid,avoid,94,> Are there any known methods of getting to build Numpy/Scipy from source using Accelerate to avoid the mismatch? (I think support might have been dropped altogether.). When I was looking for it recently I only found that Numpy dropped support of Accelerate some time ago because it only provided an old lapack version. This was pre-M1 as far as I know. ; Maybe it is possible to build numpy regardless of support with some manual interventions.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956060090
https://github.com/psi4/psi4/issues/2333#issuecomment-956398876:849,Integrability,wrap,wrapper,849,"> ; > ; > One thing I noticed while investigating this a bit: If you run the command `np.show_config()`, you can see that the Numpy binaries from Conda-forge and pypi are built using different BLAS and LAPACK. The Numpy binary on pypi is built using `openblas` and the Conda-forge binary is built using something called `cblas`. I'm not sure what `cblas` is, but this build seems to be much faster for some numpy functionality than the `openblas` build on pypi. Just something interesting that might be of use to M1 users.; > ; > It looks like cblas might be Apple's own BLAS implementation:https://developer.apple.com/documentation/accelerate/blas, but I'm not really sure if this is the case or how it relates to the Accelerate framework. This is beyond my knowledge base. Perhaps someone else knows and can elaborate. `CBLAS` is typically just a wrapper written in C, to provide a ""least common denominator"" interface for the Fortran subroutines making up a typical BLAS implementation. The computational backend beyond that `CBLAS` could be pretty much anything, including OpenBLAS. Apple does not seems to be interested in enabling open source developers to utilize their silicon, to the point where people need to reverse engineer their libraries to find out what [undocumented instructions they use](https://gist.github.com/dougallj/7a75a3be1ec69ca550e7c36dc75e0d6f) to perform fast math operations. I find that rather anti-consumer and anti-competitive, to put it mildly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956398876
https://github.com/psi4/psi4/issues/2333#issuecomment-956398876:911,Integrability,interface,interface,911,"> ; > ; > One thing I noticed while investigating this a bit: If you run the command `np.show_config()`, you can see that the Numpy binaries from Conda-forge and pypi are built using different BLAS and LAPACK. The Numpy binary on pypi is built using `openblas` and the Conda-forge binary is built using something called `cblas`. I'm not sure what `cblas` is, but this build seems to be much faster for some numpy functionality than the `openblas` build on pypi. Just something interesting that might be of use to M1 users.; > ; > It looks like cblas might be Apple's own BLAS implementation:https://developer.apple.com/documentation/accelerate/blas, but I'm not really sure if this is the case or how it relates to the Accelerate framework. This is beyond my knowledge base. Perhaps someone else knows and can elaborate. `CBLAS` is typically just a wrapper written in C, to provide a ""least common denominator"" interface for the Fortran subroutines making up a typical BLAS implementation. The computational backend beyond that `CBLAS` could be pretty much anything, including OpenBLAS. Apple does not seems to be interested in enabling open source developers to utilize their silicon, to the point where people need to reverse engineer their libraries to find out what [undocumented instructions they use](https://gist.github.com/dougallj/7a75a3be1ec69ca550e7c36dc75e0d6f) to perform fast math operations. I find that rather anti-consumer and anti-competitive, to put it mildly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956398876
https://github.com/psi4/psi4/issues/2333#issuecomment-956398876:1377,Performance,perform,perform,1377,"> ; > ; > One thing I noticed while investigating this a bit: If you run the command `np.show_config()`, you can see that the Numpy binaries from Conda-forge and pypi are built using different BLAS and LAPACK. The Numpy binary on pypi is built using `openblas` and the Conda-forge binary is built using something called `cblas`. I'm not sure what `cblas` is, but this build seems to be much faster for some numpy functionality than the `openblas` build on pypi. Just something interesting that might be of use to M1 users.; > ; > It looks like cblas might be Apple's own BLAS implementation:https://developer.apple.com/documentation/accelerate/blas, but I'm not really sure if this is the case or how it relates to the Accelerate framework. This is beyond my knowledge base. Perhaps someone else knows and can elaborate. `CBLAS` is typically just a wrapper written in C, to provide a ""least common denominator"" interface for the Fortran subroutines making up a typical BLAS implementation. The computational backend beyond that `CBLAS` could be pretty much anything, including OpenBLAS. Apple does not seems to be interested in enabling open source developers to utilize their silicon, to the point where people need to reverse engineer their libraries to find out what [undocumented instructions they use](https://gist.github.com/dougallj/7a75a3be1ec69ca550e7c36dc75e0d6f) to perform fast math operations. I find that rather anti-consumer and anti-competitive, to put it mildly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956398876
https://github.com/psi4/psi4/issues/2333#issuecomment-956398876:1271,Usability,undo,undocumented,1271,"> ; > ; > One thing I noticed while investigating this a bit: If you run the command `np.show_config()`, you can see that the Numpy binaries from Conda-forge and pypi are built using different BLAS and LAPACK. The Numpy binary on pypi is built using `openblas` and the Conda-forge binary is built using something called `cblas`. I'm not sure what `cblas` is, but this build seems to be much faster for some numpy functionality than the `openblas` build on pypi. Just something interesting that might be of use to M1 users.; > ; > It looks like cblas might be Apple's own BLAS implementation:https://developer.apple.com/documentation/accelerate/blas, but I'm not really sure if this is the case or how it relates to the Accelerate framework. This is beyond my knowledge base. Perhaps someone else knows and can elaborate. `CBLAS` is typically just a wrapper written in C, to provide a ""least common denominator"" interface for the Fortran subroutines making up a typical BLAS implementation. The computational backend beyond that `CBLAS` could be pretty much anything, including OpenBLAS. Apple does not seems to be interested in enabling open source developers to utilize their silicon, to the point where people need to reverse engineer their libraries to find out what [undocumented instructions they use](https://gist.github.com/dougallj/7a75a3be1ec69ca550e7c36dc75e0d6f) to perform fast math operations. I find that rather anti-consumer and anti-competitive, to put it mildly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956398876
https://github.com/psi4/psi4/issues/2333#issuecomment-956443455:492,Performance,perform,performance-review,492,"> ; > ; > I hope that changes or that at least people can find workarounds. Apple's advertising seems mostly geared towards video editors and photographers, but the chips have great potential for certain scientific computing workloads. I was somewhat interested in the new M1 Max, due to the very high memory BW (~8 channels of DDR4), but that was soon tempered by the discovery that the CPU cores cannot use more than [half of the total BW](https://www.anandtech.com/show/17024/apple-m1-max-performance-review/2) due to some, yet again undocumented, internal bus bottleneck.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956443455
https://github.com/psi4/psi4/issues/2333#issuecomment-956443455:564,Performance,bottleneck,bottleneck,564,"> ; > ; > I hope that changes or that at least people can find workarounds. Apple's advertising seems mostly geared towards video editors and photographers, but the chips have great potential for certain scientific computing workloads. I was somewhat interested in the new M1 Max, due to the very high memory BW (~8 channels of DDR4), but that was soon tempered by the discovery that the CPU cores cannot use more than [half of the total BW](https://www.anandtech.com/show/17024/apple-m1-max-performance-review/2) due to some, yet again undocumented, internal bus bottleneck.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956443455
https://github.com/psi4/psi4/issues/2333#issuecomment-956443455:537,Usability,undo,undocumented,537,"> ; > ; > I hope that changes or that at least people can find workarounds. Apple's advertising seems mostly geared towards video editors and photographers, but the chips have great potential for certain scientific computing workloads. I was somewhat interested in the new M1 Max, due to the very high memory BW (~8 channels of DDR4), but that was soon tempered by the discovery that the CPU cores cannot use more than [half of the total BW](https://www.anandtech.com/show/17024/apple-m1-max-performance-review/2) due to some, yet again undocumented, internal bus bottleneck.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956443455
https://github.com/psi4/psi4/issues/2333#issuecomment-956470448:1580,Deployability,install,install,1580,"That does make some sense. And by this, I don't mean that it's ideal, just that it appears consistent about what we know about the chips. The main differences in M1 Pro and Max are not the CPU itself (unless you count the 8-core binned M1 Pro), but other things like the GPU core count and media encoders. The CPU itself is the same for the two chips. It seems like the extra memory bandwidth advertised for the M1 Max is somehow reserved for other parts of the chip, with the CPU memory bandwidth being about the same as that of the Pro. I don't see whether the author of the linked article used the 24 or 32 core GPU M1 Max model. I wonder how the CPU memory bandwidth would differ between the two models. i.e. whether getting the 24 core model ""frees up"" more bandwidth for the CPU or whether the total shared bandwidth is just decreased. Who knows. That seems like it would be a very expensive experiment at the very least. Another interesting question would be whether the M1 Pro CPU can fully utilize all 200 GB/s, or whether that's slashed in half as well. It seems like the 400 GB/s marketing claim has to come with this asterisk. It's a real shame that executives and marketing teams at large companies sometimes get in the way of the innovations their engineering teams produce, to the detriment of consumers and developers. EDIT: I also wonder if the memory bandwidth bottleneck is something that is built into in the silicon, or if somehow the operating system is making decisions as how to allocate memory to different parts of the chip. I think it's now possible to install Linux on M1:https://asahilinux.org/2021/10/progress-report-september-2021/, so I wonder if that would result in memory being allocated to the CPU differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956470448
https://github.com/psi4/psi4/issues/2333#issuecomment-956470448:1503,Energy Efficiency,allocate,allocate,1503,"That does make some sense. And by this, I don't mean that it's ideal, just that it appears consistent about what we know about the chips. The main differences in M1 Pro and Max are not the CPU itself (unless you count the 8-core binned M1 Pro), but other things like the GPU core count and media encoders. The CPU itself is the same for the two chips. It seems like the extra memory bandwidth advertised for the M1 Max is somehow reserved for other parts of the chip, with the CPU memory bandwidth being about the same as that of the Pro. I don't see whether the author of the linked article used the 24 or 32 core GPU M1 Max model. I wonder how the CPU memory bandwidth would differ between the two models. i.e. whether getting the 24 core model ""frees up"" more bandwidth for the CPU or whether the total shared bandwidth is just decreased. Who knows. That seems like it would be a very expensive experiment at the very least. Another interesting question would be whether the M1 Pro CPU can fully utilize all 200 GB/s, or whether that's slashed in half as well. It seems like the 400 GB/s marketing claim has to come with this asterisk. It's a real shame that executives and marketing teams at large companies sometimes get in the way of the innovations their engineering teams produce, to the detriment of consumers and developers. EDIT: I also wonder if the memory bandwidth bottleneck is something that is built into in the silicon, or if somehow the operating system is making decisions as how to allocate memory to different parts of the chip. I think it's now possible to install Linux on M1:https://asahilinux.org/2021/10/progress-report-september-2021/, so I wonder if that would result in memory being allocated to the CPU differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956470448
https://github.com/psi4/psi4/issues/2333#issuecomment-956470448:1713,Energy Efficiency,allocate,allocated,1713,"That does make some sense. And by this, I don't mean that it's ideal, just that it appears consistent about what we know about the chips. The main differences in M1 Pro and Max are not the CPU itself (unless you count the 8-core binned M1 Pro), but other things like the GPU core count and media encoders. The CPU itself is the same for the two chips. It seems like the extra memory bandwidth advertised for the M1 Max is somehow reserved for other parts of the chip, with the CPU memory bandwidth being about the same as that of the Pro. I don't see whether the author of the linked article used the 24 or 32 core GPU M1 Max model. I wonder how the CPU memory bandwidth would differ between the two models. i.e. whether getting the 24 core model ""frees up"" more bandwidth for the CPU or whether the total shared bandwidth is just decreased. Who knows. That seems like it would be a very expensive experiment at the very least. Another interesting question would be whether the M1 Pro CPU can fully utilize all 200 GB/s, or whether that's slashed in half as well. It seems like the 400 GB/s marketing claim has to come with this asterisk. It's a real shame that executives and marketing teams at large companies sometimes get in the way of the innovations their engineering teams produce, to the detriment of consumers and developers. EDIT: I also wonder if the memory bandwidth bottleneck is something that is built into in the silicon, or if somehow the operating system is making decisions as how to allocate memory to different parts of the chip. I think it's now possible to install Linux on M1:https://asahilinux.org/2021/10/progress-report-september-2021/, so I wonder if that would result in memory being allocated to the CPU differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956470448
https://github.com/psi4/psi4/issues/2333#issuecomment-956470448:1379,Performance,bottleneck,bottleneck,1379,"That does make some sense. And by this, I don't mean that it's ideal, just that it appears consistent about what we know about the chips. The main differences in M1 Pro and Max are not the CPU itself (unless you count the 8-core binned M1 Pro), but other things like the GPU core count and media encoders. The CPU itself is the same for the two chips. It seems like the extra memory bandwidth advertised for the M1 Max is somehow reserved for other parts of the chip, with the CPU memory bandwidth being about the same as that of the Pro. I don't see whether the author of the linked article used the 24 or 32 core GPU M1 Max model. I wonder how the CPU memory bandwidth would differ between the two models. i.e. whether getting the 24 core model ""frees up"" more bandwidth for the CPU or whether the total shared bandwidth is just decreased. Who knows. That seems like it would be a very expensive experiment at the very least. Another interesting question would be whether the M1 Pro CPU can fully utilize all 200 GB/s, or whether that's slashed in half as well. It seems like the 400 GB/s marketing claim has to come with this asterisk. It's a real shame that executives and marketing teams at large companies sometimes get in the way of the innovations their engineering teams produce, to the detriment of consumers and developers. EDIT: I also wonder if the memory bandwidth bottleneck is something that is built into in the silicon, or if somehow the operating system is making decisions as how to allocate memory to different parts of the chip. I think it's now possible to install Linux on M1:https://asahilinux.org/2021/10/progress-report-september-2021/, so I wonder if that would result in memory being allocated to the CPU differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956470448
https://github.com/psi4/psi4/issues/2333#issuecomment-956493258:641,Performance,cache,caches,641,"This is pure conjecture on my part, but I would assume that the bandwidth is limited by physical partitioning on the M1 Pro/Max. The CPU cluster probably does not have ""enough wires"" going to the memory controller to transfer 400 GB/s, so I would think fusing off a couple of cores in the GPU would not affect the CPU BW. Not sure about the Pro, if they just copy-pasted the CPU part, there is a chance the CPU could use all of the BW on that,. Edit: The undocumented math instructions I mentioned previously, are not executed by the CPU core, but separate SIMD coprocessors, which are technically not part of the CPU core, even though some caches are shared. But given how the big.LITTLE cores all share the ~1/2 BW limit, I doubt using those coprocessors would make much of a difference.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956493258
https://github.com/psi4/psi4/issues/2333#issuecomment-956493258:455,Usability,undo,undocumented,455,"This is pure conjecture on my part, but I would assume that the bandwidth is limited by physical partitioning on the M1 Pro/Max. The CPU cluster probably does not have ""enough wires"" going to the memory controller to transfer 400 GB/s, so I would think fusing off a couple of cores in the GPU would not affect the CPU BW. Not sure about the Pro, if they just copy-pasted the CPU part, there is a chance the CPU could use all of the BW on that,. Edit: The undocumented math instructions I mentioned previously, are not executed by the CPU core, but separate SIMD coprocessors, which are technically not part of the CPU core, even though some caches are shared. But given how the big.LITTLE cores all share the ~1/2 BW limit, I doubt using those coprocessors would make much of a difference.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956493258
https://github.com/psi4/psi4/issues/2333#issuecomment-956518612:246,Performance,perform,performance,246,"Of all the possible explanations I can think of, that makes the most sense to me. Do you know if there are any published benchmarks for specific open source scientific computing packages such as psi4, pyscf, Qiskit, ect. that might enlighten the performance of these machines for specific applications? That might be interesting to see. It's a shame that most of the information regarding the performance of these machines is almost entirely in the context of non-scientific computing workloads.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956518612
https://github.com/psi4/psi4/issues/2333#issuecomment-956518612:393,Performance,perform,performance,393,"Of all the possible explanations I can think of, that makes the most sense to me. Do you know if there are any published benchmarks for specific open source scientific computing packages such as psi4, pyscf, Qiskit, ect. that might enlighten the performance of these machines for specific applications? That might be interesting to see. It's a shame that most of the information regarding the performance of these machines is almost entirely in the context of non-scientific computing workloads.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956518612
https://github.com/psi4/psi4/issues/2333#issuecomment-956518612:121,Testability,benchmark,benchmarks,121,"Of all the possible explanations I can think of, that makes the most sense to me. Do you know if there are any published benchmarks for specific open source scientific computing packages such as psi4, pyscf, Qiskit, ect. that might enlighten the performance of these machines for specific applications? That might be interesting to see. It's a shame that most of the information regarding the performance of these machines is almost entirely in the context of non-scientific computing workloads.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956518612
https://github.com/psi4/psi4/issues/2333#issuecomment-956526354:166,Performance,perform,performance,166,"> Do you know if there are any published benchmarks for specific open source scientific computing packages such as psi4, pyscf, Qiskit, ect. that might enlighten the performance of these machines for specific applications?. For M1 and successor? Not that I am aware. Most of the bottlenecks are usually BLAS/LAPACK (and I/O but let's ignore that) so it often is enough to test the linear algebra library.; Among programs there are algorithmic choices/limitations that often make comparisons difficult if not pointless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956526354
https://github.com/psi4/psi4/issues/2333#issuecomment-956526354:279,Performance,bottleneck,bottlenecks,279,"> Do you know if there are any published benchmarks for specific open source scientific computing packages such as psi4, pyscf, Qiskit, ect. that might enlighten the performance of these machines for specific applications?. For M1 and successor? Not that I am aware. Most of the bottlenecks are usually BLAS/LAPACK (and I/O but let's ignore that) so it often is enough to test the linear algebra library.; Among programs there are algorithmic choices/limitations that often make comparisons difficult if not pointless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956526354
https://github.com/psi4/psi4/issues/2333#issuecomment-956526354:41,Testability,benchmark,benchmarks,41,"> Do you know if there are any published benchmarks for specific open source scientific computing packages such as psi4, pyscf, Qiskit, ect. that might enlighten the performance of these machines for specific applications?. For M1 and successor? Not that I am aware. Most of the bottlenecks are usually BLAS/LAPACK (and I/O but let's ignore that) so it often is enough to test the linear algebra library.; Among programs there are algorithmic choices/limitations that often make comparisons difficult if not pointless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956526354
https://github.com/psi4/psi4/issues/2333#issuecomment-956526354:372,Testability,test,test,372,"> Do you know if there are any published benchmarks for specific open source scientific computing packages such as psi4, pyscf, Qiskit, ect. that might enlighten the performance of these machines for specific applications?. For M1 and successor? Not that I am aware. Most of the bottlenecks are usually BLAS/LAPACK (and I/O but let's ignore that) so it often is enough to test the linear algebra library.; Among programs there are algorithmic choices/limitations that often make comparisons difficult if not pointless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956526354
https://github.com/psi4/psi4/issues/2333#issuecomment-961470227:34,Energy Efficiency,monitor,monitor,34,"@ TiborGY I would not know how to monitor the health of my SSD, so I cannot speak to that. I have a 16GB M1 Mac mini sitting on my desk using most of the cores 24/7, but all of the program memory requirements fit comfortably within 16GB, so little or no swap is being used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961470227
https://github.com/psi4/psi4/issues/2333#issuecomment-961472062:88,Deployability,release,release,88,"Some good news for building numpy using the Accelerate framework! From the numpy 1.21.0 release notes at https://numpy.org/doc/stable/release/1.21.0-notes.html :. ""With the release of macOS 11.3, several different issues that numpy was encountering when using Accelerate Framework’s implementation of BLAS and LAPACK should be resolved. This change enables the Accelerate Framework as an option on macOS. If additional issues are found, please file a bug report against Accelerate using the developer feedback assistant tool (https://developer.apple.com/bug-reporting/). We intend to address issues promptly and plan to continue supporting and updating our BLAS and LAPACK libraries."". It might very well be that this is what the conda-forge numpy builds are already using. It is difficult to say. If anyone knows how to build numpy from source explicitly using Accelerate, that would be very much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961472062
https://github.com/psi4/psi4/issues/2333#issuecomment-961472062:134,Deployability,release,release,134,"Some good news for building numpy using the Accelerate framework! From the numpy 1.21.0 release notes at https://numpy.org/doc/stable/release/1.21.0-notes.html :. ""With the release of macOS 11.3, several different issues that numpy was encountering when using Accelerate Framework’s implementation of BLAS and LAPACK should be resolved. This change enables the Accelerate Framework as an option on macOS. If additional issues are found, please file a bug report against Accelerate using the developer feedback assistant tool (https://developer.apple.com/bug-reporting/). We intend to address issues promptly and plan to continue supporting and updating our BLAS and LAPACK libraries."". It might very well be that this is what the conda-forge numpy builds are already using. It is difficult to say. If anyone knows how to build numpy from source explicitly using Accelerate, that would be very much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961472062
https://github.com/psi4/psi4/issues/2333#issuecomment-961472062:173,Deployability,release,release,173,"Some good news for building numpy using the Accelerate framework! From the numpy 1.21.0 release notes at https://numpy.org/doc/stable/release/1.21.0-notes.html :. ""With the release of macOS 11.3, several different issues that numpy was encountering when using Accelerate Framework’s implementation of BLAS and LAPACK should be resolved. This change enables the Accelerate Framework as an option on macOS. If additional issues are found, please file a bug report against Accelerate using the developer feedback assistant tool (https://developer.apple.com/bug-reporting/). We intend to address issues promptly and plan to continue supporting and updating our BLAS and LAPACK libraries."". It might very well be that this is what the conda-forge numpy builds are already using. It is difficult to say. If anyone knows how to build numpy from source explicitly using Accelerate, that would be very much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961472062
https://github.com/psi4/psi4/issues/2333#issuecomment-961472062:501,Usability,feedback,feedback,501,"Some good news for building numpy using the Accelerate framework! From the numpy 1.21.0 release notes at https://numpy.org/doc/stable/release/1.21.0-notes.html :. ""With the release of macOS 11.3, several different issues that numpy was encountering when using Accelerate Framework’s implementation of BLAS and LAPACK should be resolved. This change enables the Accelerate Framework as an option on macOS. If additional issues are found, please file a bug report against Accelerate using the developer feedback assistant tool (https://developer.apple.com/bug-reporting/). We intend to address issues promptly and plan to continue supporting and updating our BLAS and LAPACK libraries."". It might very well be that this is what the conda-forge numpy builds are already using. It is difficult to say. If anyone knows how to build numpy from source explicitly using Accelerate, that would be very much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961472062
https://github.com/psi4/psi4/issues/2333#issuecomment-961475439:21,Deployability,install,install,21,What exactly did you install?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961475439
https://github.com/psi4/psi4/issues/2333#issuecomment-961478826:129,Integrability,interface,interface,129,"The numpy from Miniforge3-MacOSX-arm64 comes with libopenblas. They just hide the actual blas library behind more a more generic interface like cblas. This way they can easily switch between openblas or mkl for example.; You can check what is being actually used:. ```; Holgers-MacBook-Air:kruse :~ > otool -L /Users/kruse/miniforge3/lib/libcblas.dylib; /Users/kruse/miniforge3/lib/libcblas.dylib:; 	@rpath/libopenblas.0.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libgfortran.5.dylib (compatibility version 6.0.0, current version 6.0.0); 	@rpath/libomp.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1292.0.0); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961478826
https://github.com/psi4/psi4/issues/2333#issuecomment-961483124:422,Deployability,release,release,422,"Ah I see. The limited benchmarking I did that showed better performance from the mini forge build must be due to something else then. I would look into this more to be more thorough, but there are too many processes running on my machine to get any useful information from them. At any rate, it looks like it should be possible to build numpy from source using Accelerate as a backend now, but I don't see anything in the release notes for numpy > 1.21.0 about changing the BLAS for the macOS-arm64 wheels. I have to imagine that in the not-too-distant future (unless more bugs have been uncovered) that future arm64 wheels will be build using Accelerate since this seems to be the most suitable BLAS for this platform. Let me see if I can find out the exact build that I installed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961483124
https://github.com/psi4/psi4/issues/2333#issuecomment-961483124:772,Deployability,install,installed,772,"Ah I see. The limited benchmarking I did that showed better performance from the mini forge build must be due to something else then. I would look into this more to be more thorough, but there are too many processes running on my machine to get any useful information from them. At any rate, it looks like it should be possible to build numpy from source using Accelerate as a backend now, but I don't see anything in the release notes for numpy > 1.21.0 about changing the BLAS for the macOS-arm64 wheels. I have to imagine that in the not-too-distant future (unless more bugs have been uncovered) that future arm64 wheels will be build using Accelerate since this seems to be the most suitable BLAS for this platform. Let me see if I can find out the exact build that I installed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961483124
https://github.com/psi4/psi4/issues/2333#issuecomment-961483124:60,Performance,perform,performance,60,"Ah I see. The limited benchmarking I did that showed better performance from the mini forge build must be due to something else then. I would look into this more to be more thorough, but there are too many processes running on my machine to get any useful information from them. At any rate, it looks like it should be possible to build numpy from source using Accelerate as a backend now, but I don't see anything in the release notes for numpy > 1.21.0 about changing the BLAS for the macOS-arm64 wheels. I have to imagine that in the not-too-distant future (unless more bugs have been uncovered) that future arm64 wheels will be build using Accelerate since this seems to be the most suitable BLAS for this platform. Let me see if I can find out the exact build that I installed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961483124
https://github.com/psi4/psi4/issues/2333#issuecomment-961483124:22,Testability,benchmark,benchmarking,22,"Ah I see. The limited benchmarking I did that showed better performance from the mini forge build must be due to something else then. I would look into this more to be more thorough, but there are too many processes running on my machine to get any useful information from them. At any rate, it looks like it should be possible to build numpy from source using Accelerate as a backend now, but I don't see anything in the release notes for numpy > 1.21.0 about changing the BLAS for the macOS-arm64 wheels. I have to imagine that in the not-too-distant future (unless more bugs have been uncovered) that future arm64 wheels will be build using Accelerate since this seems to be the most suitable BLAS for this platform. Let me see if I can find out the exact build that I installed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961483124
https://github.com/psi4/psi4/issues/2333#issuecomment-961484165:42,Deployability,install,installed,42,"If I run `conda list`, it tells me that I installed the `py39h1f3b974_0` NumPy 1.21.0 build from conda-forge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961484165
https://github.com/psi4/psi4/issues/2333#issuecomment-961497818:17,Testability,benchmark,benchmarks,17,"I have rerun the benchmarks at: https://markus-beuckelmann.de/blog/boosting-numpy-blas.html. The results are:. pypi numpy 1.21.3: ; ```; Dotted two 4096x4096 matrices in 0.74 s.; Dotted two vectors of length 524288 in 0.26 ms.; SVD of a 2048x1024 matrix in 0.83 s.; Cholesky decomposition of a 2048x2048 matrix in 0.09 s.; Eigendecomposition of a 2048x2048 matrix in 6.14 s.; ```. conda-forge 1.21.0: ; ```; Dotted two 4096x4096 matrices in 0.67 s.; Dotted two vectors of length 524288 in 0.25 ms.; SVD of a 2048x1024 matrix in 0.72 s.; Cholesky decomposition of a 2048x2048 matrix in 0.08 s.; Eigendecomposition of a 2048x2048 matrix in 5.33 s.; ```. This time around the results are not meaningfully different. Something must have been throwing them off before, so my apologies for the red herring regarding the different builds. They seem to be using the same BLAS. That just makes the prospect of *actually* using Accelerate for numpy and scipy all the more exciting! I will try to look into how to do this and report back if I find out how to do so. (Or maybe someone else knows, since it seems like it should be possible to do now.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961497818
https://github.com/psi4/psi4/issues/2333#issuecomment-961542615:806,Availability,reliab,reliably,806,"> ; > ; > @ TiborGY I would not know how to monitor the health of my SSD, so I cannot speak to that. I have a 16GB M1 Mac mini sitting on my desk using most of the cores 24/7, but all of the program memory requirements fit comfortably within 16GB, so little or no swap is being used. Edit: We are going off topic here, but I am going to answer because I think this could be useful information.; I am not just talking about swap here, a lot of quantum chemistry programs create temporary files that they intensely read and write to. Usually called ""conventional integrals"" or ""out-of-core"" algorithms for historical reasons. I once guesstimated the amount of writes running non-DF CCSD(T) generates to be around 1 to 5 TB per day on a fast 8-14 core machine. Not something that most SSDs can be expected to reliably handle for long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961542615
https://github.com/psi4/psi4/issues/2333#issuecomment-961542615:44,Energy Efficiency,monitor,monitor,44,"> ; > ; > @ TiborGY I would not know how to monitor the health of my SSD, so I cannot speak to that. I have a 16GB M1 Mac mini sitting on my desk using most of the cores 24/7, but all of the program memory requirements fit comfortably within 16GB, so little or no swap is being used. Edit: We are going off topic here, but I am going to answer because I think this could be useful information.; I am not just talking about swap here, a lot of quantum chemistry programs create temporary files that they intensely read and write to. Usually called ""conventional integrals"" or ""out-of-core"" algorithms for historical reasons. I once guesstimated the amount of writes running non-DF CCSD(T) generates to be around 1 to 5 TB per day on a fast 8-14 core machine. Not something that most SSDs can be expected to reliably handle for long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961542615
https://github.com/psi4/psi4/issues/2333#issuecomment-1007349779:28,Deployability,install,installing,28,Another set of instructions installing numpy+vecLib:; https://developer.apple.com/forums/thread/695963?answerId=697568022#697568022,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-1007349779
https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603:46,Availability,avail,available,46,"Ok, as promised, the QC deps for Psi4 are now available on conda-forge natively for `osx-arm64`. Note that these are cross-compiled on regular `osx-64`, so don't get tested. I'd be glad to hear if/how they're working. You can either build psi4 master and still provide your own libint or use the libint package and build a special branch of psi4. There's a c-f tracker for osx-arm64 packages at https://github.com/orgs/psi4/projects/2/views/5. #### psi4 master; `conda install gau2grid libxc-c optking qcengine -c conda-forge`; #### psi4 with #2861 ; * `conda install gau2grid libxc-c optking qcengine conda-forge/label/libint_dev::libint -c conda-forge`; * or `conda install gau2grid libxc-c optking qcengine libint -c conda-forge/label/libint_dev -c conda-forge` (channel order matters)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603
https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603:469,Deployability,install,install,469,"Ok, as promised, the QC deps for Psi4 are now available on conda-forge natively for `osx-arm64`. Note that these are cross-compiled on regular `osx-64`, so don't get tested. I'd be glad to hear if/how they're working. You can either build psi4 master and still provide your own libint or use the libint package and build a special branch of psi4. There's a c-f tracker for osx-arm64 packages at https://github.com/orgs/psi4/projects/2/views/5. #### psi4 master; `conda install gau2grid libxc-c optking qcengine -c conda-forge`; #### psi4 with #2861 ; * `conda install gau2grid libxc-c optking qcengine conda-forge/label/libint_dev::libint -c conda-forge`; * or `conda install gau2grid libxc-c optking qcengine libint -c conda-forge/label/libint_dev -c conda-forge` (channel order matters)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603
https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603:560,Deployability,install,install,560,"Ok, as promised, the QC deps for Psi4 are now available on conda-forge natively for `osx-arm64`. Note that these are cross-compiled on regular `osx-64`, so don't get tested. I'd be glad to hear if/how they're working. You can either build psi4 master and still provide your own libint or use the libint package and build a special branch of psi4. There's a c-f tracker for osx-arm64 packages at https://github.com/orgs/psi4/projects/2/views/5. #### psi4 master; `conda install gau2grid libxc-c optking qcengine -c conda-forge`; #### psi4 with #2861 ; * `conda install gau2grid libxc-c optking qcengine conda-forge/label/libint_dev::libint -c conda-forge`; * or `conda install gau2grid libxc-c optking qcengine libint -c conda-forge/label/libint_dev -c conda-forge` (channel order matters)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603
https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603:668,Deployability,install,install,668,"Ok, as promised, the QC deps for Psi4 are now available on conda-forge natively for `osx-arm64`. Note that these are cross-compiled on regular `osx-64`, so don't get tested. I'd be glad to hear if/how they're working. You can either build psi4 master and still provide your own libint or use the libint package and build a special branch of psi4. There's a c-f tracker for osx-arm64 packages at https://github.com/orgs/psi4/projects/2/views/5. #### psi4 master; `conda install gau2grid libxc-c optking qcengine -c conda-forge`; #### psi4 with #2861 ; * `conda install gau2grid libxc-c optking qcengine conda-forge/label/libint_dev::libint -c conda-forge`; * or `conda install gau2grid libxc-c optking qcengine libint -c conda-forge/label/libint_dev -c conda-forge` (channel order matters)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603
https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603:166,Testability,test,tested,166,"Ok, as promised, the QC deps for Psi4 are now available on conda-forge natively for `osx-arm64`. Note that these are cross-compiled on regular `osx-64`, so don't get tested. I'd be glad to hear if/how they're working. You can either build psi4 master and still provide your own libint or use the libint package and build a special branch of psi4. There's a c-f tracker for osx-arm64 packages at https://github.com/orgs/psi4/projects/2/views/5. #### psi4 master; `conda install gau2grid libxc-c optking qcengine -c conda-forge`; #### psi4 with #2861 ; * `conda install gau2grid libxc-c optking qcengine conda-forge/label/libint_dev::libint -c conda-forge`; * or `conda install gau2grid libxc-c optking qcengine libint -c conda-forge/label/libint_dev -c conda-forge` (channel order matters)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603
https://github.com/psi4/psi4/issues/2333#issuecomment-1529304309:28,Availability,avail,available,28,There's built psi4 packages available for testing. Details at https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-1529304309
https://github.com/psi4/psi4/issues/2333#issuecomment-1529304309:42,Testability,test,testing,42,There's built psi4 packages available for testing. Details at https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-1529304309
https://github.com/psi4/psi4/pull/2336#issuecomment-952307104:150,Deployability,integrat,integration,150,"> I don't know the DFT infrastructure at all, so can you give me a big picture overview of what this PR is doing? I know that DFT relies on numerical integration, and I know that a block contains numerical integration points, but I don't know what a block is used for. Instead of making a loop over all grid points that calculates basis function values and XC contributions one by one , the points are grouped together into blocks for efficiency reasons.; Currently there is no connection between a single grid point and the atom it originally belongs to. One block of points can even contain grid points from multiple atoms. This connection is lost immediately after the grid is constructed. Adding it back is a bit awkward and e.g. `remove_distant_points(extents_->maxR());` needs to be rewritten with the new data structure. This feature is needed for algorithms or methods that look at contributions from atoms when looping over the grid points. Right now, those new things are not needed, and thus not used anywhere, but they will be used for COSX and ddCOSMO. So you might want to access for a given atom all blocks of grid points, where a block has only grid points from that atom. This is what `atomic_blocks` provides. However that leads to a double-loop (see examples) and possibly worse parallelization. For a simple loop over all block, like what is used now, you want to know the atom to which the current block belongs (-> `parent_atom`) to collect values by atom. Two options the developers can chose from. This is part 1 to get it the basics out faster and allow COSX and ddCOSMO development to continue. cubature.cc still needs a big cleanup, but that has to wait.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104
https://github.com/psi4/psi4/pull/2336#issuecomment-952307104:206,Deployability,integrat,integration,206,"> I don't know the DFT infrastructure at all, so can you give me a big picture overview of what this PR is doing? I know that DFT relies on numerical integration, and I know that a block contains numerical integration points, but I don't know what a block is used for. Instead of making a loop over all grid points that calculates basis function values and XC contributions one by one , the points are grouped together into blocks for efficiency reasons.; Currently there is no connection between a single grid point and the atom it originally belongs to. One block of points can even contain grid points from multiple atoms. This connection is lost immediately after the grid is constructed. Adding it back is a bit awkward and e.g. `remove_distant_points(extents_->maxR());` needs to be rewritten with the new data structure. This feature is needed for algorithms or methods that look at contributions from atoms when looping over the grid points. Right now, those new things are not needed, and thus not used anywhere, but they will be used for COSX and ddCOSMO. So you might want to access for a given atom all blocks of grid points, where a block has only grid points from that atom. This is what `atomic_blocks` provides. However that leads to a double-loop (see examples) and possibly worse parallelization. For a simple loop over all block, like what is used now, you want to know the atom to which the current block belongs (-> `parent_atom`) to collect values by atom. Two options the developers can chose from. This is part 1 to get it the basics out faster and allow COSX and ddCOSMO development to continue. cubature.cc still needs a big cleanup, but that has to wait.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104
https://github.com/psi4/psi4/pull/2336#issuecomment-952307104:150,Integrability,integrat,integration,150,"> I don't know the DFT infrastructure at all, so can you give me a big picture overview of what this PR is doing? I know that DFT relies on numerical integration, and I know that a block contains numerical integration points, but I don't know what a block is used for. Instead of making a loop over all grid points that calculates basis function values and XC contributions one by one , the points are grouped together into blocks for efficiency reasons.; Currently there is no connection between a single grid point and the atom it originally belongs to. One block of points can even contain grid points from multiple atoms. This connection is lost immediately after the grid is constructed. Adding it back is a bit awkward and e.g. `remove_distant_points(extents_->maxR());` needs to be rewritten with the new data structure. This feature is needed for algorithms or methods that look at contributions from atoms when looping over the grid points. Right now, those new things are not needed, and thus not used anywhere, but they will be used for COSX and ddCOSMO. So you might want to access for a given atom all blocks of grid points, where a block has only grid points from that atom. This is what `atomic_blocks` provides. However that leads to a double-loop (see examples) and possibly worse parallelization. For a simple loop over all block, like what is used now, you want to know the atom to which the current block belongs (-> `parent_atom`) to collect values by atom. Two options the developers can chose from. This is part 1 to get it the basics out faster and allow COSX and ddCOSMO development to continue. cubature.cc still needs a big cleanup, but that has to wait.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104
https://github.com/psi4/psi4/pull/2336#issuecomment-952307104:206,Integrability,integrat,integration,206,"> I don't know the DFT infrastructure at all, so can you give me a big picture overview of what this PR is doing? I know that DFT relies on numerical integration, and I know that a block contains numerical integration points, but I don't know what a block is used for. Instead of making a loop over all grid points that calculates basis function values and XC contributions one by one , the points are grouped together into blocks for efficiency reasons.; Currently there is no connection between a single grid point and the atom it originally belongs to. One block of points can even contain grid points from multiple atoms. This connection is lost immediately after the grid is constructed. Adding it back is a bit awkward and e.g. `remove_distant_points(extents_->maxR());` needs to be rewritten with the new data structure. This feature is needed for algorithms or methods that look at contributions from atoms when looping over the grid points. Right now, those new things are not needed, and thus not used anywhere, but they will be used for COSX and ddCOSMO. So you might want to access for a given atom all blocks of grid points, where a block has only grid points from that atom. This is what `atomic_blocks` provides. However that leads to a double-loop (see examples) and possibly worse parallelization. For a simple loop over all block, like what is used now, you want to know the atom to which the current block belongs (-> `parent_atom`) to collect values by atom. Two options the developers can chose from. This is part 1 to get it the basics out faster and allow COSX and ddCOSMO development to continue. cubature.cc still needs a big cleanup, but that has to wait.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104
https://github.com/psi4/psi4/pull/2336#issuecomment-952307104:1087,Security,access,access,1087,"> I don't know the DFT infrastructure at all, so can you give me a big picture overview of what this PR is doing? I know that DFT relies on numerical integration, and I know that a block contains numerical integration points, but I don't know what a block is used for. Instead of making a loop over all grid points that calculates basis function values and XC contributions one by one , the points are grouped together into blocks for efficiency reasons.; Currently there is no connection between a single grid point and the atom it originally belongs to. One block of points can even contain grid points from multiple atoms. This connection is lost immediately after the grid is constructed. Adding it back is a bit awkward and e.g. `remove_distant_points(extents_->maxR());` needs to be rewritten with the new data structure. This feature is needed for algorithms or methods that look at contributions from atoms when looping over the grid points. Right now, those new things are not needed, and thus not used anywhere, but they will be used for COSX and ddCOSMO. So you might want to access for a given atom all blocks of grid points, where a block has only grid points from that atom. This is what `atomic_blocks` provides. However that leads to a double-loop (see examples) and possibly worse parallelization. For a simple loop over all block, like what is used now, you want to know the atom to which the current block belongs (-> `parent_atom`) to collect values by atom. Two options the developers can chose from. This is part 1 to get it the basics out faster and allow COSX and ddCOSMO development to continue. cubature.cc still needs a big cleanup, but that has to wait.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104
https://github.com/psi4/psi4/pull/2336#issuecomment-952307104:1321,Usability,simpl,simple,1321,"> I don't know the DFT infrastructure at all, so can you give me a big picture overview of what this PR is doing? I know that DFT relies on numerical integration, and I know that a block contains numerical integration points, but I don't know what a block is used for. Instead of making a loop over all grid points that calculates basis function values and XC contributions one by one , the points are grouped together into blocks for efficiency reasons.; Currently there is no connection between a single grid point and the atom it originally belongs to. One block of points can even contain grid points from multiple atoms. This connection is lost immediately after the grid is constructed. Adding it back is a bit awkward and e.g. `remove_distant_points(extents_->maxR());` needs to be rewritten with the new data structure. This feature is needed for algorithms or methods that look at contributions from atoms when looping over the grid points. Right now, those new things are not needed, and thus not used anywhere, but they will be used for COSX and ddCOSMO. So you might want to access for a given atom all blocks of grid points, where a block has only grid points from that atom. This is what `atomic_blocks` provides. However that leads to a double-loop (see examples) and possibly worse parallelization. For a simple loop over all block, like what is used now, you want to know the atom to which the current block belongs (-> `parent_atom`) to collect values by atom. Two options the developers can chose from. This is part 1 to get it the basics out faster and allow COSX and ddCOSMO development to continue. cubature.cc still needs a big cleanup, but that has to wait.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104
https://github.com/psi4/psi4/pull/2336#issuecomment-952751554:176,Usability,clear,clearer,176,"The other point I missed the first time was when you said `grid->atomic_blocks()[N_ATOM][N_BLOCKS]` was the _primary_ feature. One word, but an important one. For future, it's clearer to put the unambiguous statement of the primary feature before technical notes (like on `clang-format` and options) when writing the PR description. I was expecting the notes to be in decreasing order of importance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2336#issuecomment-952751554
https://github.com/psi4/psi4/issues/2338#issuecomment-952844434:10,Energy Efficiency,energy,energy,10,Since the energy is considerably higher in the failing example I wonder if the geometry is okay?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952844434
https://github.com/psi4/psi4/issues/2338#issuecomment-952846346:20,Energy Efficiency,energy,energy,20,"> ; > ; > Since the energy is considerably higher in the failing example I wonder if the geometry is okay?. I can't share a screenshot of the initial geometry, but viewing it in VMD (I just copy and pasted the initial geometry into a text file, added 42 on the top line, and a space after and saved as an xyz file) the geometry appeared okay (to me)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952846346
https://github.com/psi4/psi4/issues/2338#issuecomment-952851437:20,Energy Efficiency,energy,energy,20,"> ; > ; > Since the energy is considerably higher in the failing example I wonder if the geometry is okay?; ```. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 20 Threads, 38146 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; C -0.307454099736 2.318040119853 2.468014008990 12.000000000000; C 1.300641336649 1.982051764266 2.628513431266 12.000000000000; O 1.962879504944 1.527519081165 1.701537918018 15.994914619570; O 1.949815296586 2.221805215180 3.963571605577 15.994914619570; C -1.263227046773 1.797657004499 1.088791427805 12.000000000000; C -2.839131270643 2.322807276281 1.010388877282 12.000000000000; C -3.752400842965 1.681186132670 2.291416403566 12.000000000000; O -3.851847835551 2.315197878420 3.362195561957 15.994914619570; O -4.520670030782 0.390895820977 2.072626060060 15.994914619570; C -1.377050447085 0.091845270869 1.099868725444 12.000000000000; O -0.826222069895 -0.735798730434 2.093681084093 15.994914619570; O -2.067189679130 -0.398960257209 -0.140659708132 15.994914619570; O -0.619838397578 2.486797319375 -0.194822309932 15.994914619570; H -0.321249410252 3.502673117209 2.443953635699 1.007825032230; H -0.790556820613 1.846088754841 3.478981374859 1.007825032230; H 2.968518076418 1.991382231036 3.914876855494 1.007825032230; H -3.446932645042 2.023821120010 -0.028125540174 1.007825032230; H -2.751482207601 3.525725481575 0.978750254628 1.007825032230; H -5.041124717719 0.143747881126 2.985491874213 1.007825032230; H -1.897047410743 -1.511749253062 -0.052863913919 1.007825032230; H -0.075772329213 1.770882773042 -0.598697666704 1.007825032230; Gh(C) 0.474241568549 -1.806355440989 -3.081314925013 12.0000000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952851437
https://github.com/psi4/psi4/issues/2338#issuecomment-952851437:441,Energy Efficiency,charge,charge,441,"> ; > ; > Since the energy is considerably higher in the failing example I wonder if the geometry is okay?; ```. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 20 Threads, 38146 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; C -0.307454099736 2.318040119853 2.468014008990 12.000000000000; C 1.300641336649 1.982051764266 2.628513431266 12.000000000000; O 1.962879504944 1.527519081165 1.701537918018 15.994914619570; O 1.949815296586 2.221805215180 3.963571605577 15.994914619570; C -1.263227046773 1.797657004499 1.088791427805 12.000000000000; C -2.839131270643 2.322807276281 1.010388877282 12.000000000000; C -3.752400842965 1.681186132670 2.291416403566 12.000000000000; O -3.851847835551 2.315197878420 3.362195561957 15.994914619570; O -4.520670030782 0.390895820977 2.072626060060 15.994914619570; C -1.377050447085 0.091845270869 1.099868725444 12.000000000000; O -0.826222069895 -0.735798730434 2.093681084093 15.994914619570; O -2.067189679130 -0.398960257209 -0.140659708132 15.994914619570; O -0.619838397578 2.486797319375 -0.194822309932 15.994914619570; H -0.321249410252 3.502673117209 2.443953635699 1.007825032230; H -0.790556820613 1.846088754841 3.478981374859 1.007825032230; H 2.968518076418 1.991382231036 3.914876855494 1.007825032230; H -3.446932645042 2.023821120010 -0.028125540174 1.007825032230; H -2.751482207601 3.525725481575 0.978750254628 1.007825032230; H -5.041124717719 0.143747881126 2.985491874213 1.007825032230; H -1.897047410743 -1.511749253062 -0.052863913919 1.007825032230; H -0.075772329213 1.770882773042 -0.598697666704 1.007825032230; Gh(C) 0.474241568549 -1.806355440989 -3.081314925013 12.0000000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952851437
https://github.com/psi4/psi4/issues/2338#issuecomment-952851437:3648,Performance,optimiz,optimization,3648,"74 1.007825032230; H -2.751482207601 3.525725481575 0.978750254628 1.007825032230; H -5.041124717719 0.143747881126 2.985491874213 1.007825032230; H -1.897047410743 -1.511749253062 -0.052863913919 1.007825032230; H -0.075772329213 1.770882773042 -0.598697666704 1.007825032230; Gh(C) 0.474241568549 -1.806355440989 -3.081314925013 12.000000000000; Gh(C) 0.648397096782 -0.635430651446 -4.412834530975 12.000000000000; Gh(O) 1.808983940470 0.135808630731 -4.689016685298 15.994914619570; Gh(O) -0.601792270472 -0.580730799038 -5.346002144161 15.994914619570; Gh(C) 1.842013051412 -1.750538066582 -1.877436731479 12.000000000000; Gh(C) 1.748380277776 -3.125392178990 -0.682540886187 12.000000000000; Gh(C) 0.551428575668 -3.079126453237 0.382902937848 12.000000000000; Gh(O) -0.772123362553 -3.017893882098 0.005326940643 15.994914619570; Gh(O) 1.164188263699 -2.773183751061 1.753201347751 15.994914619570; Gh(C) 1.956475179932 -0.293321161210 -1.099031580479 12.000000000000; Gh(O) 0.992725973388 0.559110742214 -1.297006473496 15.994914619570; Gh(O) 3.130049422860 -0.154233046346 -0.072768016824 15.994914619570; Gh(O) 3.196147367497 -1.811177694362 -2.579148566611 15.994914619570; Gh(H) 0.331210026589 -2.880972115219 -3.515800481502 1.007825032230; Gh(H) -0.568593016142 -1.679247170680 -2.603980470596 1.007825032230; Gh(H) -0.337129028344 0.137702882174 -6.101596488384 1.007825032230; Gh(H) 2.839165670708 -3.170793868693 -0.034525947893 1.007825032230; Gh(H) 1.503523685805 -4.153371056510 -1.238801035107 1.007825032230; Gh(H) 0.381496756170 -2.300443540051 2.173560639006 1.007825032230; Gh(H) 2.908852211708 0.661916839703 0.492311211561 1.007825032230; Gh(H) 3.261181481570 -0.956120691787 -3.343640597980 1.007825032230. Running in c1 symmetry. Rotational constants: A = 0.00767 B = 0.00407 C = 0.00370 [cm^-1]; Rotational constants: A = 230.03247 B = 122.05678 C = 110.97094 [MHz]; ```; I misunderstood you on my first reply, this is the geometry prior to the final failed optimization",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952851437
https://github.com/psi4/psi4/issues/2338#issuecomment-952880914:3817,Availability,Mask,Mask,3817,"48886 -2.2974156084 2.1731147635; H 2.9070579021 0.6633160437 0.4892159706; H 3.2587884244 -0.9572243350 -3.3447119335; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: c1; Full point group: C1; ```; But then when it starts going again, this is happening. ```; Name: DEF2-TZVP; Role: ORBITAL; Keyword: BASIS; atoms 1-2, 5-7, 10 entry C line 123 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs; atoms 3-4, 8-9, 11-13 entry O line 189 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs; atoms 14-21 entry H line 15 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs. Reading orbitals from file /tmp/citric_acid_B3LYP-D3_def2-tzvp_psi4_geom_opt.py.dimer_0_0.23437.180.npy, no projection. ==> Integral Setup <==. DFHelper Memory: AOs need 1.457 GiB; user supplied 24.990 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 20; Memory [MiB]: 25589; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 19.8770; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 373; Number of basis functions: 1133; Number of Cartesian functions: 1345; Spherical Harmonics?: true; Max angular momentum: 4. Cached 100.0% of DFT collocation blocks in 2.950 [GiB]. Minimum eigenvalue in the overlap matrix is 1.9770003531E-04.; Reciprocal condition number of the overlap matrix is 2.3108928958E-05.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Orbitals guess was supplied from a previous computation. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 451 451 50 50 50 0; -------------------------------------------------------; Total 451 451 50 50 50 0; -------------------------------------------------------. ==> Iterations <==. Total Ener",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914
https://github.com/psi4/psi4/issues/2338#issuecomment-952880914:472,Energy Efficiency,Energy,Energy,472,"@JonathonMisiewicz After successfully completing one step, it appears to be switching from using SAD, to using previous orbitals despite my having set guess to sad. ```; Successfully symmetrized geometry. ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria o 4.50e-04 * 3.00e-04 * 1.80e-03 * 1.20e-03 * ~; --------------------------------------------------------------------------------------------- ~; 1 -1520.83247764 -1.52e+03 o 2.87e-02 6.52e-03 1.12e+00 2.74e-01 ~; ---------------------------------------------------------------------------------------------. Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); C -0.3082647324 2.3190588090 2.4662144199; C 1.2994401676 1.9841371839 2.6252591212; O 1.9613330035 1.5293126579 1.6982686350; O 1.9487730658 2.2253118158 3.9589994443; C -1.2637575308 1.7972383826 1.0887300503; C -2.8394127991 2.3213315802 1.0116494590; C -3.7509980721 1.6807278062 2.2931752326; O -3.8504096207 2.3153516037 3.3633546508; O -4.5178176253 0.3904174599 2.0757387449; C -1.3759292896 0.0921611935 1.1005734307; O -0.8241227821 -0.7339800728 2.0937447856; O -2.0658921497 -0.3998131349 -0.1385874282; O -0.6219920417 2.4852394292 -0.1951904942; H -0.3231747331 3.5031540765 2.4416857576; H -0.7901754068 1.8479833570 3.4773721250; H 2.9672568222 1.9953691785 3.9096102485; H -3.4471447933 2.0212696600 -0.0256899111; H -2.7529115441 3.5237308050 0.9794914513; H -5.0374668500 0.1438676436 2.9887272170; H -1.8948356360 -1.5118861166 -0.0506847242; H -0.0777476573 1.7695454328 -0.5991466202; C 0.4741700051 -1.8080097129 -3.0796",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914
https://github.com/psi4/psi4/issues/2338#issuecomment-952880914:4761,Energy Efficiency,Energy,Energy,4761,"5589; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 19.8770; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 373; Number of basis functions: 1133; Number of Cartesian functions: 1345; Spherical Harmonics?: true; Max angular momentum: 4. Cached 100.0% of DFT collocation blocks in 2.950 [GiB]. Minimum eigenvalue in the overlap matrix is 1.9770003531E-04.; Reciprocal condition number of the overlap matrix is 2.3108928958E-05.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Orbitals guess was supplied from a previous computation. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 451 451 50 50 50 0; -------------------------------------------------------; Total 451 451 50 50 50 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -756.64880960182893 -7.56649e+02 4.38886e-03; @DF-RKS iter 1: -756.47890146930581 1.69908e-01 5.20818e-03 DIIS; @DF-RKS iter 2: -697.36076163484927 5.91181e+01 1.70568e-02 DIIS; @DF-RKS iter 3: -757.82971261323712 -6.04690e+01 5.09847e-03 DIIS; @DF-RKS iter 4: -757.19091118720712 6.38801e-01 4.14460e-03 SOKS, nmicro=40; Did not take a SOSCF step, using normal convergence methods; @DF-RKS iter 5: -753.42073594199746 3.77018e+00 5.11526e-03 DIIS; Did not take a SOSCF step, using normal convergence methods; @DF-RKS iter 6: -757.34771004358015 -3.92697e+00 4.08067e-03 DIIS; @DF-RKS iter 7: -759.80182889745129 -2.45412e+00 2.00291e-03 SOKS, nmicro=40; @DF-RKS iter 8: -758.44571377525983 1.35612e+00 2.42949e-03 SOKS, nmicro=40; ```; This SCF converged, and it is continuing on, but this is the same trend as before. It will manage to converge a few more, but eventually it will fail and hit the 100 iteration limit. Is there a way to strictly force SAD?. I used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914
https://github.com/psi4/psi4/issues/2338#issuecomment-952880914:963,Performance,optimiz,optimization,963,"@JonathonMisiewicz After successfully completing one step, it appears to be switching from using SAD, to using previous orbitals despite my having set guess to sad. ```; Successfully symmetrized geometry. ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria o 4.50e-04 * 3.00e-04 * 1.80e-03 * 1.20e-03 * ~; --------------------------------------------------------------------------------------------- ~; 1 -1520.83247764 -1.52e+03 o 2.87e-02 6.52e-03 1.12e+00 2.74e-01 ~; ---------------------------------------------------------------------------------------------. Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); C -0.3082647324 2.3190588090 2.4662144199; C 1.2994401676 1.9841371839 2.6252591212; O 1.9613330035 1.5293126579 1.6982686350; O 1.9487730658 2.2253118158 3.9589994443; C -1.2637575308 1.7972383826 1.0887300503; C -2.8394127991 2.3213315802 1.0116494590; C -3.7509980721 1.6807278062 2.2931752326; O -3.8504096207 2.3153516037 3.3633546508; O -4.5178176253 0.3904174599 2.0757387449; C -1.3759292896 0.0921611935 1.1005734307; O -0.8241227821 -0.7339800728 2.0937447856; O -2.0658921497 -0.3998131349 -0.1385874282; O -0.6219920417 2.4852394292 -0.1951904942; H -0.3231747331 3.5031540765 2.4416857576; H -0.7901754068 1.8479833570 3.4773721250; H 2.9672568222 1.9953691785 3.9096102485; H -3.4471447933 2.0212696600 -0.0256899111; H -2.7529115441 3.5237308050 0.9794914513; H -5.0374668500 0.1438676436 2.9887272170; H -1.8948356360 -1.5118861166 -0.0506847242; H -0.0777476573 1.7695454328 -0.5991466202; C 0.4741700051 -1.8080097129 -3.0796",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914
https://github.com/psi4/psi4/issues/2338#issuecomment-952880914:4101,Performance,Cache,Cached,4101,"`; Name: DEF2-TZVP; Role: ORBITAL; Keyword: BASIS; atoms 1-2, 5-7, 10 entry C line 123 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs; atoms 3-4, 8-9, 11-13 entry O line 189 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs; atoms 14-21 entry H line 15 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs. Reading orbitals from file /tmp/citric_acid_B3LYP-D3_def2-tzvp_psi4_geom_opt.py.dimer_0_0.23437.180.npy, no projection. ==> Integral Setup <==. DFHelper Memory: AOs need 1.457 GiB; user supplied 24.990 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 20; Memory [MiB]: 25589; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 19.8770; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 373; Number of basis functions: 1133; Number of Cartesian functions: 1345; Spherical Harmonics?: true; Max angular momentum: 4. Cached 100.0% of DFT collocation blocks in 2.950 [GiB]. Minimum eigenvalue in the overlap matrix is 1.9770003531E-04.; Reciprocal condition number of the overlap matrix is 2.3108928958E-05.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Orbitals guess was supplied from a previous computation. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 451 451 50 50 50 0; -------------------------------------------------------; Total 451 451 50 50 50 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -756.64880960182893 -7.56649e+02 4.38886e-03; @DF-RKS iter 1: -756.47890146930581 1.69908e-01 5.20818e-03 DIIS; @DF-RKS iter 2: -697.36076163484927 5.91181e+01 1.70568e-02 DIIS; @DF-RKS iter 3: -757.82971261323712 -6.04690e+01 5.09847e-03 DIIS; @DF-RKS iter 4: -757.19091118720712 6.38801e-01 4.14460e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914
https://github.com/psi4/psi4/issues/2338#issuecomment-953037136:238,Availability,redundant,redundant,238,"my 2 cents on this:; The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly.; Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953037136
https://github.com/psi4/psi4/issues/2338#issuecomment-953037136:98,Performance,optimiz,optimizer,98,"my 2 cents on this:; The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly.; Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953037136
https://github.com/psi4/psi4/issues/2338#issuecomment-953037136:238,Safety,redund,redundant,238,"my 2 cents on this:; The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly.; Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953037136
https://github.com/psi4/psi4/issues/2338#issuecomment-953185581:246,Availability,redundant,redundant,246,"> ; > ; > my 2 cents on this: The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly. Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates. If the fault does lie in the bonds being stretched (the first two CC bonds start off at 1.52 ang, and end up at 1.65 ang, chemistry tells us single c-c bonds are around 1.54 ang), and the first scf round does converge(it does), then wouldn't the fault end up being with the gradient calculation, since I am assuming, this is what is used to make the coordinate adjustment? I am not sure how to counter this if that is the issue. Can I damp the geometry optimization step?. I am trying with the `opt_coordinates` mixed coordinates, as well as waiting on the `guess_persist` results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581
https://github.com/psi4/psi4/issues/2338#issuecomment-953185581:276,Availability,fault,fault,276,"> ; > ; > my 2 cents on this: The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly. Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates. If the fault does lie in the bonds being stretched (the first two CC bonds start off at 1.52 ang, and end up at 1.65 ang, chemistry tells us single c-c bonds are around 1.54 ang), and the first scf round does converge(it does), then wouldn't the fault end up being with the gradient calculation, since I am assuming, this is what is used to make the coordinate adjustment? I am not sure how to counter this if that is the issue. Can I damp the geometry optimization step?. I am trying with the `opt_coordinates` mixed coordinates, as well as waiting on the `guess_persist` results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581
https://github.com/psi4/psi4/issues/2338#issuecomment-953185581:515,Availability,fault,fault,515,"> ; > ; > my 2 cents on this: The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly. Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates. If the fault does lie in the bonds being stretched (the first two CC bonds start off at 1.52 ang, and end up at 1.65 ang, chemistry tells us single c-c bonds are around 1.54 ang), and the first scf round does converge(it does), then wouldn't the fault end up being with the gradient calculation, since I am assuming, this is what is used to make the coordinate adjustment? I am not sure how to counter this if that is the issue. Can I damp the geometry optimization step?. I am trying with the `opt_coordinates` mixed coordinates, as well as waiting on the `guess_persist` results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581
https://github.com/psi4/psi4/issues/2338#issuecomment-953185581:107,Performance,optimiz,optimizer,107,"> ; > ; > my 2 cents on this: The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly. Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates. If the fault does lie in the bonds being stretched (the first two CC bonds start off at 1.52 ang, and end up at 1.65 ang, chemistry tells us single c-c bonds are around 1.54 ang), and the first scf round does converge(it does), then wouldn't the fault end up being with the gradient calculation, since I am assuming, this is what is used to make the coordinate adjustment? I am not sure how to counter this if that is the issue. Can I damp the geometry optimization step?. I am trying with the `opt_coordinates` mixed coordinates, as well as waiting on the `guess_persist` results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581
https://github.com/psi4/psi4/issues/2338#issuecomment-953185581:722,Performance,optimiz,optimization,722,"> ; > ; > my 2 cents on this: The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly. Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates. If the fault does lie in the bonds being stretched (the first two CC bonds start off at 1.52 ang, and end up at 1.65 ang, chemistry tells us single c-c bonds are around 1.54 ang), and the first scf round does converge(it does), then wouldn't the fault end up being with the gradient calculation, since I am assuming, this is what is used to make the coordinate adjustment? I am not sure how to counter this if that is the issue. Can I damp the geometry optimization step?. I am trying with the `opt_coordinates` mixed coordinates, as well as waiting on the `guess_persist` results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581
https://github.com/psi4/psi4/issues/2338#issuecomment-953185581:246,Safety,redund,redundant,246,"> ; > ; > my 2 cents on this: The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly. Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates. If the fault does lie in the bonds being stretched (the first two CC bonds start off at 1.52 ang, and end up at 1.65 ang, chemistry tells us single c-c bonds are around 1.54 ang), and the first scf round does converge(it does), then wouldn't the fault end up being with the gradient calculation, since I am assuming, this is what is used to make the coordinate adjustment? I am not sure how to counter this if that is the issue. Can I damp the geometry optimization step?. I am trying with the `opt_coordinates` mixed coordinates, as well as waiting on the `guess_persist` results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581
https://github.com/psi4/psi4/issues/2338#issuecomment-953189257:245,Integrability,depend,depends,245,"The argument would go that the gradient is correct, but the optimizer gives a new geometry that is so unnatural that the SCF can't be easily converged. The optimizer determines the next step based on more than just the current gradient. It also depends on the coordinate system in which it conducts the optimization, which is what setting `opt_coordinates` would change. There are some other things to look for (like messages about being unable to backtransform coordinates), but adding new things to try is premature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953189257
https://github.com/psi4/psi4/issues/2338#issuecomment-953189257:417,Integrability,message,messages,417,"The argument would go that the gradient is correct, but the optimizer gives a new geometry that is so unnatural that the SCF can't be easily converged. The optimizer determines the next step based on more than just the current gradient. It also depends on the coordinate system in which it conducts the optimization, which is what setting `opt_coordinates` would change. There are some other things to look for (like messages about being unable to backtransform coordinates), but adding new things to try is premature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953189257
https://github.com/psi4/psi4/issues/2338#issuecomment-953189257:60,Performance,optimiz,optimizer,60,"The argument would go that the gradient is correct, but the optimizer gives a new geometry that is so unnatural that the SCF can't be easily converged. The optimizer determines the next step based on more than just the current gradient. It also depends on the coordinate system in which it conducts the optimization, which is what setting `opt_coordinates` would change. There are some other things to look for (like messages about being unable to backtransform coordinates), but adding new things to try is premature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953189257
https://github.com/psi4/psi4/issues/2338#issuecomment-953189257:156,Performance,optimiz,optimizer,156,"The argument would go that the gradient is correct, but the optimizer gives a new geometry that is so unnatural that the SCF can't be easily converged. The optimizer determines the next step based on more than just the current gradient. It also depends on the coordinate system in which it conducts the optimization, which is what setting `opt_coordinates` would change. There are some other things to look for (like messages about being unable to backtransform coordinates), but adding new things to try is premature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953189257
https://github.com/psi4/psi4/issues/2338#issuecomment-953189257:303,Performance,optimiz,optimization,303,"The argument would go that the gradient is correct, but the optimizer gives a new geometry that is so unnatural that the SCF can't be easily converged. The optimizer determines the next step based on more than just the current gradient. It also depends on the coordinate system in which it conducts the optimization, which is what setting `opt_coordinates` would change. There are some other things to look for (like messages about being unable to backtransform coordinates), but adding new things to try is premature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953189257
https://github.com/psi4/psi4/issues/2338#issuecomment-953192603:185,Integrability,message,messages,185,"Makes sense to me. I will be heading home soon and they are still running. I will reply tomorrow morning with how the different fixes behaved, and, I will check for any ominous looking messages in the logfile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953192603
https://github.com/psi4/psi4/issues/2338#issuecomment-953192603:201,Testability,log,logfile,201,"Makes sense to me. I will be heading home soon and they are still running. I will reply tomorrow morning with how the different fixes behaved, and, I will check for any ominous looking messages in the logfile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953192603
https://github.com/psi4/psi4/issues/2338#issuecomment-956201019:18,Deployability,update,updates,18,@BradenDKelly Any updates?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-956201019
https://github.com/psi4/psi4/issues/2338#issuecomment-957463262:68,Availability,error,error,68,"@JonathonMisiewicz It wasn't able to complete, it had a ""bad alloc"" error. However, the .dat file was 105,000 lines long, it had done many geometry iterations as well as scf iterations for each one, and the last scf iteration had completed in 8 steps. So it looked fine. My other jobs also ended prematurely, which is too bad. I have started them again. I think I need to add more memory to the machine...So I will make sure I don't overload the server this time. I am currently also (in addition) running it using B3LYP/6-31G* just to see how that goes, since it is quick and dirty. The one that had `bad alloc` was running these specs. ```; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; guess sad; guess_persist true; opt_coordinates both; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957463262
https://github.com/psi4/psi4/issues/2338#issuecomment-957463262:830,Performance,optimiz,optimize,830,"@JonathonMisiewicz It wasn't able to complete, it had a ""bad alloc"" error. However, the .dat file was 105,000 lines long, it had done many geometry iterations as well as scf iterations for each one, and the last scf iteration had completed in 8 steps. So it looked fine. My other jobs also ended prematurely, which is too bad. I have started them again. I think I need to add more memory to the machine...So I will make sure I don't overload the server this time. I am currently also (in addition) running it using B3LYP/6-31G* just to see how that goes, since it is quick and dirty. The one that had `bad alloc` was running these specs. ```; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; guess sad; guess_persist true; opt_coordinates both; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957463262
https://github.com/psi4/psi4/issues/2338#issuecomment-957463262:1022,Performance,optimiz,optimized,1022,"@JonathonMisiewicz It wasn't able to complete, it had a ""bad alloc"" error. However, the .dat file was 105,000 lines long, it had done many geometry iterations as well as scf iterations for each one, and the last scf iteration had completed in 8 steps. So it looked fine. My other jobs also ended prematurely, which is too bad. I have started them again. I think I need to add more memory to the machine...So I will make sure I don't overload the server this time. I am currently also (in addition) running it using B3LYP/6-31G* just to see how that goes, since it is quick and dirty. The one that had `bad alloc` was running these specs. ```; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; guess sad; guess_persist true; opt_coordinates both; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957463262
https://github.com/psi4/psi4/issues/2338#issuecomment-957463262:1055,Testability,log,log,1055,"@JonathonMisiewicz It wasn't able to complete, it had a ""bad alloc"" error. However, the .dat file was 105,000 lines long, it had done many geometry iterations as well as scf iterations for each one, and the last scf iteration had completed in 8 steps. So it looked fine. My other jobs also ended prematurely, which is too bad. I have started them again. I think I need to add more memory to the machine...So I will make sure I don't overload the server this time. I am currently also (in addition) running it using B3LYP/6-31G* just to see how that goes, since it is quick and dirty. The one that had `bad alloc` was running these specs. ```; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; guess sad; guess_persist true; opt_coordinates both; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957463262
https://github.com/psi4/psi4/issues/2338#issuecomment-957933503:553,Energy Efficiency,Energy,Energy,553,"Well, the B3LYP/6-31G* had no issues with the SCF, it did hit 50 iterations and cancel because of that. It was clearly converging, albeit, very slowly. I am not sure why it stopped at 50 iterations considering I specify 100 iterations as my max? (Nevermind, that maxiter 100 is only for the SCF convergence). For B3LYP/6-31G* I used. ```; set {; basis 6-31G*; maxiter 100; g_convergence gau; opt_coordinates both; }; ```. ```; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -1520.084027420038 -1520.084027420038 0.01209684 0.00318489 0.09585970 0.02642430 ~; 2 -1520.101971720320 -0.017944300282 0.00752027 0.00158941 0.12994949 0.02669655 ~; 3 -1520.111617832344 -0.009646112024 0.00329597 0.00094589 0.09913642 0.01723322 ~; 4 -1520.114648443302 -0.003030610957 0.00216198 0.00062847 0.08202824 0.01366308 ~; 5 -1520.116031406611 -0.001382963310 0.00122597 0.00033545 0.05989395 0.01111816 ~; 6 -1520.116772315849 -0.000740909238 0.00131990 0.00033374 0.06203108 0.01396358 ~; 7 -1520.117591979154 -0.000819663305 0.00119721 0.00034756 0.09267135 0.02072228 ~; 8 -1520.118547103847 -0.000955124693 0.00156371 0.00030629 0.07994782 0.01866175 ~; 9 -1520.119170359052 -0.000623255205 0.00125623 0.00027764 0.06344987 0.01578896 ~; 10 -1520.119638965232 -0.000468606180 0.00067629 0.00021266 0.04981669 0.01425496 ~; 11 -1520.119963148907 -0.000324183675 0.00106241 0.00018459 0.03721107 0.01011712 ~; 12 -1520.120138724090 -0.000175575183 0.00077654 0.00015862 0.03691754 0.00896792 ~; 13 -1520.120303579945 -0.000164855855 0.00055434 0.00012476 0.03805513 0.00913406 ~; 14 -1520.120449457803 -0.000145877858 0.00082349 0.00014532 0.03164180 0.00803309 ~; 15 -1520.120569511735 -0.000120053932 0.00090778 0.00014097 0.03673389 0.00918033 ~; 16 -1520",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957933503
https://github.com/psi4/psi4/issues/2338#issuecomment-957933503:111,Usability,clear,clearly,111,"Well, the B3LYP/6-31G* had no issues with the SCF, it did hit 50 iterations and cancel because of that. It was clearly converging, albeit, very slowly. I am not sure why it stopped at 50 iterations considering I specify 100 iterations as my max? (Nevermind, that maxiter 100 is only for the SCF convergence). For B3LYP/6-31G* I used. ```; set {; basis 6-31G*; maxiter 100; g_convergence gau; opt_coordinates both; }; ```. ```; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -1520.084027420038 -1520.084027420038 0.01209684 0.00318489 0.09585970 0.02642430 ~; 2 -1520.101971720320 -0.017944300282 0.00752027 0.00158941 0.12994949 0.02669655 ~; 3 -1520.111617832344 -0.009646112024 0.00329597 0.00094589 0.09913642 0.01723322 ~; 4 -1520.114648443302 -0.003030610957 0.00216198 0.00062847 0.08202824 0.01366308 ~; 5 -1520.116031406611 -0.001382963310 0.00122597 0.00033545 0.05989395 0.01111816 ~; 6 -1520.116772315849 -0.000740909238 0.00131990 0.00033374 0.06203108 0.01396358 ~; 7 -1520.117591979154 -0.000819663305 0.00119721 0.00034756 0.09267135 0.02072228 ~; 8 -1520.118547103847 -0.000955124693 0.00156371 0.00030629 0.07994782 0.01866175 ~; 9 -1520.119170359052 -0.000623255205 0.00125623 0.00027764 0.06344987 0.01578896 ~; 10 -1520.119638965232 -0.000468606180 0.00067629 0.00021266 0.04981669 0.01425496 ~; 11 -1520.119963148907 -0.000324183675 0.00106241 0.00018459 0.03721107 0.01011712 ~; 12 -1520.120138724090 -0.000175575183 0.00077654 0.00015862 0.03691754 0.00896792 ~; 13 -1520.120303579945 -0.000164855855 0.00055434 0.00012476 0.03805513 0.00913406 ~; 14 -1520.120449457803 -0.000145877858 0.00082349 0.00014532 0.03164180 0.00803309 ~; 15 -1520.120569511735 -0.000120053932 0.00090778 0.00014097 0.03673389 0.00918033 ~; 16 -1520",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957933503
https://github.com/psi4/psi4/issues/2338#issuecomment-957945866:408,Energy Efficiency,Energy,Energy,408,"I don't get it, I ran another geom opt using B3LYP/6-31G* with the last coordinates of the previous attempt, and it converged 1st iteration. ```; **** Optimization is complete! (in 1 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -1520.121971894730 -1520.121971894730 0.00006927 0.00001834 0.00081821 0.00021391 ~; --------------------------------------------------------------------------------------------------------------- ~; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957945866
https://github.com/psi4/psi4/issues/2338#issuecomment-957945866:151,Performance,Optimiz,Optimization,151,"I don't get it, I ran another geom opt using B3LYP/6-31G* with the last coordinates of the previous attempt, and it converged 1st iteration. ```; **** Optimization is complete! (in 1 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -1520.121971894730 -1520.121971894730 0.00006927 0.00001834 0.00081821 0.00021391 ~; --------------------------------------------------------------------------------------------------------------- ~; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957945866
https://github.com/psi4/psi4/issues/2338#issuecomment-957945866:200,Performance,Optimiz,Optimization,200,"I don't get it, I ran another geom opt using B3LYP/6-31G* with the last coordinates of the previous attempt, and it converged 1st iteration. ```; **** Optimization is complete! (in 1 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -1520.121971894730 -1520.121971894730 0.00006927 0.00001834 0.00081821 0.00021391 ~; --------------------------------------------------------------------------------------------------------------- ~; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957945866
https://github.com/psi4/psi4/issues/2338#issuecomment-957955746:221,Integrability,depend,depending,221,"This issue was originally about issues with converging an SCF, and now I'm not sure what it's about. I need you to re-focus the issue. Are you saying that for the same geometry, Psi is giving different energies/gradients depending on which optimization run it was part of?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957955746
https://github.com/psi4/psi4/issues/2338#issuecomment-957955746:240,Performance,optimiz,optimization,240,"This issue was originally about issues with converging an SCF, and now I'm not sure what it's about. I need you to re-focus the issue. Are you saying that for the same geometry, Psi is giving different energies/gradients depending on which optimization run it was part of?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957955746
https://github.com/psi4/psi4/issues/2338#issuecomment-957965416:73,Performance,optimiz,optimizer,73,"Please check the output for additional information or printouts from the optimizer for the 1-step optimization, or upload the file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957965416
https://github.com/psi4/psi4/issues/2338#issuecomment-957965416:98,Performance,optimiz,optimization,98,"Please check the output for additional information or printouts from the optimizer for the 1-step optimization, or upload the file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957965416
https://github.com/psi4/psi4/issues/2338#issuecomment-957968163:142,Performance,optimiz,optimization,142,"I will stick to the SCF issue and report the results once the B3LYP-D3/def2-tzvp geom opt is done. . I was noting that it seemed odd that one optimization did 50 iterations and petered out(using B3LYP/6-31G*), but upon restarting, it converged in one step. Different wavefunctions though, the SCF in the ""restart"" started from SAD guess, the 50th iteration of the first try was using previous orbitals as initial guesses, I turned off permanent SAD guess for it. In short, my apologies for muddying the water, I think just ignore, and I will report the results for the initial optimization problem once they finish. I have both `opt_coordinates both` as well as `opt_coordinates both` and `guess sad`; `guess_persist true` running.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957968163
https://github.com/psi4/psi4/issues/2338#issuecomment-957968163:577,Performance,optimiz,optimization,577,"I will stick to the SCF issue and report the results once the B3LYP-D3/def2-tzvp geom opt is done. . I was noting that it seemed odd that one optimization did 50 iterations and petered out(using B3LYP/6-31G*), but upon restarting, it converged in one step. Different wavefunctions though, the SCF in the ""restart"" started from SAD guess, the 50th iteration of the first try was using previous orbitals as initial guesses, I turned off permanent SAD guess for it. In short, my apologies for muddying the water, I think just ignore, and I will report the results for the initial optimization problem once they finish. I have both `opt_coordinates both` as well as `opt_coordinates both` and `guess sad`; `guess_persist true` running.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957968163
https://github.com/psi4/psi4/issues/2338#issuecomment-958951687:688,Usability,clear,clearly,688,"So, the dimer converged in 57 geometry iterations using; ```; set {; basis def2-tzvp; maxiter 100; geom_maxiter 200; g_convergence gau; opt_coordinates both; guess sad; guess_persist true; }; ```; In a different run, it hit the maximum geometry iterations of 50, but was running fine using; ```; set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; guess sad; guess_persist true; opt_coordinates both; }; So, there is no need for `soscf true` and `soscf_max_iter`; ```; Same story when using; ```; set {; basis def2-tzvp; maxiter 100; g_convergence gau; opt_coordinates both; }; ```; here the max iterations of 50 geometry iterations was hit, but it was clearly converging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-958951687
https://github.com/psi4/psi4/issues/2338#issuecomment-958971629:71,Availability,error,error,71,"Well, initially it was believed to be SCF related because that was the error at program failure. However, it now seems that the reason for the SCF failing was caused by the geometry iteration producing unphysical geometries, which then led to the next SCF iteration failing. By fixing the geometry iteration, and it appears that 'opt_coordinates both' does the trick, no unphysical geometries occur, and the program purs along to completion. In the case of these dimers, completion takes more than the default 50 geometry iterations. Above, one succeeded in 57 steps, two stopped at 50 steps but were clearly converging, they just hit their geom_maxiter of 50 steps and stopped.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-958971629
https://github.com/psi4/psi4/issues/2338#issuecomment-958971629:88,Availability,failure,failure,88,"Well, initially it was believed to be SCF related because that was the error at program failure. However, it now seems that the reason for the SCF failing was caused by the geometry iteration producing unphysical geometries, which then led to the next SCF iteration failing. By fixing the geometry iteration, and it appears that 'opt_coordinates both' does the trick, no unphysical geometries occur, and the program purs along to completion. In the case of these dimers, completion takes more than the default 50 geometry iterations. Above, one succeeded in 57 steps, two stopped at 50 steps but were clearly converging, they just hit their geom_maxiter of 50 steps and stopped.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-958971629
https://github.com/psi4/psi4/issues/2338#issuecomment-958971629:601,Usability,clear,clearly,601,"Well, initially it was believed to be SCF related because that was the error at program failure. However, it now seems that the reason for the SCF failing was caused by the geometry iteration producing unphysical geometries, which then led to the next SCF iteration failing. By fixing the geometry iteration, and it appears that 'opt_coordinates both' does the trick, no unphysical geometries occur, and the program purs along to completion. In the case of these dimers, completion takes more than the default 50 geometry iterations. Above, one succeeded in 57 steps, two stopped at 50 steps but were clearly converging, they just hit their geom_maxiter of 50 steps and stopped.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-958971629
https://github.com/psi4/psi4/issues/2339#issuecomment-956508121:352,Energy Efficiency,energy,energy,352,"Thanks, @VHchavez, that'd be a great help. I think PsiAPI is the better framework to describe more advanced topics like wfn. (The exception is the two mirrored tutorials in PSIthon and PsiAPI that we try to keep in sync.) Topics include how to get wfn, things on wfn, things not on wfn (e.g., amplitudes in most cases), when wfn might be inconsistent (energy is mp2, while orbitals are scf), numpy serialization (python_helpers.py), schema serialization (schema_wrapper.py), etc. Another thing is feel free to be more of a clearinghouse where you collect links to the p4n tutorial, the serialization code, the psi4.core.Wavefunction API docs, various test cases that use things off the wfn. All those other places are autogen or tested, so are a better place than docs for big code snippets. And folks interested in wfn are usually able and willing to read python code if directed, just not willing to sift through 1M lines to find it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2339#issuecomment-956508121
https://github.com/psi4/psi4/issues/2339#issuecomment-956508121:651,Testability,test,test,651,"Thanks, @VHchavez, that'd be a great help. I think PsiAPI is the better framework to describe more advanced topics like wfn. (The exception is the two mirrored tutorials in PSIthon and PsiAPI that we try to keep in sync.) Topics include how to get wfn, things on wfn, things not on wfn (e.g., amplitudes in most cases), when wfn might be inconsistent (energy is mp2, while orbitals are scf), numpy serialization (python_helpers.py), schema serialization (schema_wrapper.py), etc. Another thing is feel free to be more of a clearinghouse where you collect links to the p4n tutorial, the serialization code, the psi4.core.Wavefunction API docs, various test cases that use things off the wfn. All those other places are autogen or tested, so are a better place than docs for big code snippets. And folks interested in wfn are usually able and willing to read python code if directed, just not willing to sift through 1M lines to find it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2339#issuecomment-956508121
https://github.com/psi4/psi4/issues/2339#issuecomment-956508121:729,Testability,test,tested,729,"Thanks, @VHchavez, that'd be a great help. I think PsiAPI is the better framework to describe more advanced topics like wfn. (The exception is the two mirrored tutorials in PSIthon and PsiAPI that we try to keep in sync.) Topics include how to get wfn, things on wfn, things not on wfn (e.g., amplitudes in most cases), when wfn might be inconsistent (energy is mp2, while orbitals are scf), numpy serialization (python_helpers.py), schema serialization (schema_wrapper.py), etc. Another thing is feel free to be more of a clearinghouse where you collect links to the p4n tutorial, the serialization code, the psi4.core.Wavefunction API docs, various test cases that use things off the wfn. All those other places are autogen or tested, so are a better place than docs for big code snippets. And folks interested in wfn are usually able and willing to read python code if directed, just not willing to sift through 1M lines to find it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2339#issuecomment-956508121
https://github.com/psi4/psi4/issues/2339#issuecomment-956508121:523,Usability,clear,clearinghouse,523,"Thanks, @VHchavez, that'd be a great help. I think PsiAPI is the better framework to describe more advanced topics like wfn. (The exception is the two mirrored tutorials in PSIthon and PsiAPI that we try to keep in sync.) Topics include how to get wfn, things on wfn, things not on wfn (e.g., amplitudes in most cases), when wfn might be inconsistent (energy is mp2, while orbitals are scf), numpy serialization (python_helpers.py), schema serialization (schema_wrapper.py), etc. Another thing is feel free to be more of a clearinghouse where you collect links to the p4n tutorial, the serialization code, the psi4.core.Wavefunction API docs, various test cases that use things off the wfn. All those other places are autogen or tested, so are a better place than docs for big code snippets. And folks interested in wfn are usually able and willing to read python code if directed, just not willing to sift through 1M lines to find it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2339#issuecomment-956508121
https://github.com/psi4/psi4/issues/2339#issuecomment-957650298:248,Energy Efficiency,energy,energy,248,"I agree with Holger about Psithon vs PsiAPI: work primarily in PsiAPI, but translate an input file to Psithon to show you _can_. Lori's topic list is a good one. Explicitly mention how to get orbitals and how to get variables (like the correlation energy) off the wavefunction.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2339#issuecomment-957650298
https://github.com/psi4/psi4/issues/2339#issuecomment-957650298:216,Modifiability,variab,variables,216,"I agree with Holger about Psithon vs PsiAPI: work primarily in PsiAPI, but translate an input file to Psithon to show you _can_. Lori's topic list is a good one. Explicitly mention how to get orbitals and how to get variables (like the correlation energy) off the wavefunction.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2339#issuecomment-957650298
https://github.com/psi4/psi4/issues/2343#issuecomment-961182012:144,Energy Efficiency,adapt,adapt,144,ORCA kindly provides a table with their definitions: https://sites.google.com/site/orcainputlibrary/frozen-core-calculations. We could possible adapt it after checking it out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2343#issuecomment-961182012
https://github.com/psi4/psi4/issues/2343#issuecomment-961182012:144,Modifiability,adapt,adapt,144,ORCA kindly provides a table with their definitions: https://sites.google.com/site/orcainputlibrary/frozen-core-calculations. We could possible adapt it after checking it out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2343#issuecomment-961182012
https://github.com/psi4/psi4/issues/2343#issuecomment-961190042:146,Energy Efficiency,adapt,adapt,146,> ORCA kindly provides a table with their definitions: https://sites.google.com/site/orcainputlibrary/frozen-core-calculations. We could possible adapt it after checking it out. That site also states; > An automatic frozencore checker was also implemented that reorders orbitals for situations where the assigned molecular frozen core (based on counting core orbitals) is wrong because valence orbitals on light atoms happen to be lower in energy than the core orbitals of heavy atoms.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2343#issuecomment-961190042
https://github.com/psi4/psi4/issues/2343#issuecomment-961190042:440,Energy Efficiency,energy,energy,440,> ORCA kindly provides a table with their definitions: https://sites.google.com/site/orcainputlibrary/frozen-core-calculations. We could possible adapt it after checking it out. That site also states; > An automatic frozencore checker was also implemented that reorders orbitals for situations where the assigned molecular frozen core (based on counting core orbitals) is wrong because valence orbitals on light atoms happen to be lower in energy than the core orbitals of heavy atoms.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2343#issuecomment-961190042
https://github.com/psi4/psi4/issues/2343#issuecomment-961190042:146,Modifiability,adapt,adapt,146,> ORCA kindly provides a table with their definitions: https://sites.google.com/site/orcainputlibrary/frozen-core-calculations. We could possible adapt it after checking it out. That site also states; > An automatic frozencore checker was also implemented that reorders orbitals for situations where the assigned molecular frozen core (based on counting core orbitals) is wrong because valence orbitals on light atoms happen to be lower in energy than the core orbitals of heavy atoms.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2343#issuecomment-961190042
https://github.com/psi4/psi4/pull/2344#issuecomment-961182029:34,Deployability,update,update,34,One thing that needs to be added: update `tests/CMakeLists.txt` with the name of your new test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2344#issuecomment-961182029
https://github.com/psi4/psi4/pull/2344#issuecomment-961182029:42,Testability,test,tests,42,One thing that needs to be added: update `tests/CMakeLists.txt` with the name of your new test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2344#issuecomment-961182029
https://github.com/psi4/psi4/pull/2344#issuecomment-961182029:90,Testability,test,test,90,One thing that needs to be added: update `tests/CMakeLists.txt` with the name of your new test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2344#issuecomment-961182029
https://github.com/psi4/psi4/pull/2347#issuecomment-967044008:36,Testability,test,test,36,"> Are the code changes covered by a test? Didn't find 'dipole_field_type' tests on a quick look. Only one `if` branch is covered. The relevant keyword is `perturb_with`. While `sphere` is covered by `scf-coverge` (which passes), there is no test suite coverage on `dx` or `embpot`. While user-facing documentation lists the `perturb_with` keywords, the only documentation on what `dx` or `embpot` mean is a comment in-code that they read from external files. The specifications for the respective files `potential.dx` and `EMBPOT` are not documented. To write a test, I would either need to find somebody who knows the specification or back it out from the file parsing functions. While adding such tests is a worthy issue, I believe it's beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2347#issuecomment-967044008
https://github.com/psi4/psi4/pull/2347#issuecomment-967044008:74,Testability,test,tests,74,"> Are the code changes covered by a test? Didn't find 'dipole_field_type' tests on a quick look. Only one `if` branch is covered. The relevant keyword is `perturb_with`. While `sphere` is covered by `scf-coverge` (which passes), there is no test suite coverage on `dx` or `embpot`. While user-facing documentation lists the `perturb_with` keywords, the only documentation on what `dx` or `embpot` mean is a comment in-code that they read from external files. The specifications for the respective files `potential.dx` and `EMBPOT` are not documented. To write a test, I would either need to find somebody who knows the specification or back it out from the file parsing functions. While adding such tests is a worthy issue, I believe it's beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2347#issuecomment-967044008
https://github.com/psi4/psi4/pull/2347#issuecomment-967044008:241,Testability,test,test,241,"> Are the code changes covered by a test? Didn't find 'dipole_field_type' tests on a quick look. Only one `if` branch is covered. The relevant keyword is `perturb_with`. While `sphere` is covered by `scf-coverge` (which passes), there is no test suite coverage on `dx` or `embpot`. While user-facing documentation lists the `perturb_with` keywords, the only documentation on what `dx` or `embpot` mean is a comment in-code that they read from external files. The specifications for the respective files `potential.dx` and `EMBPOT` are not documented. To write a test, I would either need to find somebody who knows the specification or back it out from the file parsing functions. While adding such tests is a worthy issue, I believe it's beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2347#issuecomment-967044008
https://github.com/psi4/psi4/pull/2347#issuecomment-967044008:562,Testability,test,test,562,"> Are the code changes covered by a test? Didn't find 'dipole_field_type' tests on a quick look. Only one `if` branch is covered. The relevant keyword is `perturb_with`. While `sphere` is covered by `scf-coverge` (which passes), there is no test suite coverage on `dx` or `embpot`. While user-facing documentation lists the `perturb_with` keywords, the only documentation on what `dx` or `embpot` mean is a comment in-code that they read from external files. The specifications for the respective files `potential.dx` and `EMBPOT` are not documented. To write a test, I would either need to find somebody who knows the specification or back it out from the file parsing functions. While adding such tests is a worthy issue, I believe it's beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2347#issuecomment-967044008
https://github.com/psi4/psi4/pull/2347#issuecomment-967044008:699,Testability,test,tests,699,"> Are the code changes covered by a test? Didn't find 'dipole_field_type' tests on a quick look. Only one `if` branch is covered. The relevant keyword is `perturb_with`. While `sphere` is covered by `scf-coverge` (which passes), there is no test suite coverage on `dx` or `embpot`. While user-facing documentation lists the `perturb_with` keywords, the only documentation on what `dx` or `embpot` mean is a comment in-code that they read from external files. The specifications for the respective files `potential.dx` and `EMBPOT` are not documented. To write a test, I would either need to find somebody who knows the specification or back it out from the file parsing functions. While adding such tests is a worthy issue, I believe it's beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2347#issuecomment-967044008
https://github.com/psi4/psi4/pull/2348#issuecomment-964152653:36,Modifiability,plugin,plugins,36,I guess we can be confident that no plugins use this since these classes were not tagged with PSI_API?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2348#issuecomment-964152653
https://github.com/psi4/psi4/pull/2348#issuecomment-964161630:70,Availability,down,downstream,70,Not tagged PSI_API and not exported means there's no risk of breaking downstream.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2348#issuecomment-964161630
https://github.com/psi4/psi4/pull/2348#issuecomment-964161630:53,Safety,risk,risk,53,Not tagged PSI_API and not exported means there's no risk of breaking downstream.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2348#issuecomment-964161630
https://github.com/psi4/psi4/pull/2348#issuecomment-964408575:144,Security,access,access,144,"> Might as well. Do I make a PR to the attic repo, or is there some other procedure?. feel free to commit directly. lmk if you don't have write access -- it isn't much in demand.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2348#issuecomment-964408575
https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:650,Availability,reliab,reliably,650,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475
https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:1462,Availability,reliab,reliable,1462,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475
https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:211,Deployability,integrat,integration,211,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475
https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:268,Deployability,integrat,integration,268,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475
https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:329,Energy Efficiency,reduce,reduce,329,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475
https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:457,Energy Efficiency,energy,energy,457,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475
https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:900,Energy Efficiency,energy,energy,900,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475
https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:211,Integrability,integrat,integration,211,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475
https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:268,Integrability,integrat,integration,268,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475
https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:1332,Integrability,depend,dependent,1332,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475
https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:80,Usability,learn,learning,80,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475
https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:145,Usability,simpl,simple,145,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475
https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:979,Usability,simpl,simple,979,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475
https://github.com/psi4/psi4/issues/2351#issuecomment-968637309:364,Integrability,depend,dependent,364,"> ""Maybe you're just observing noise because you haven't converged the equations fully tightly."". How can I converge the equations fully tightly? Which parameter do I need to modify?. ; > ""There was a bugfix between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems."". From the calculation results, the results of v1.4 seems to be more reasonable, because it has a higher correlation with other results. For v1.4.1, did I use it wrong? how to modify the code?. @JonathonMisiewicz . thx",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-968637309
https://github.com/psi4/psi4/issues/2351#issuecomment-968768906:136,Energy Efficiency,charge,charges,136,"I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-968768906
https://github.com/psi4/psi4/issues/2351#issuecomment-968823767:1238,Energy Efficiency,energy,energy,1238,"> > ""Maybe you're just observing noise because you haven't converged the equations fully tightly.""; > ; > How can I converge the equations fully tightly? Which parameter do I need to modify?. Set `d_convergence`. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number. . > > ""There was a bugfix between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems.""; > ; > From the calculation results, the results of v1.4 seems to be more reasonable, because it has a higher correlation with other results. For v1.4.1, did I use it wrong? how to modify the code?; > . I feel like you are not listening to me. I don't trust your ORCA and Psi4 comparisons, and it's perfectly reasonable for 1.3.2 and 1.4 to agree with each other but not 1.4.1, if both 1.3.2 and 1.4 had a bug. I do not trust that the results of 1.4 are more reasonable. Like I said before. Find the system where the energy changes the most between 1.4 and 1.4.1, tell us what the energies are, and tell us the system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-968823767
https://github.com/psi4/psi4/issues/2351#issuecomment-968823767:653,Integrability,depend,dependent,653,"> > ""Maybe you're just observing noise because you haven't converged the equations fully tightly.""; > ; > How can I converge the equations fully tightly? Which parameter do I need to modify?. Set `d_convergence`. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number. . > > ""There was a bugfix between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems.""; > ; > From the calculation results, the results of v1.4 seems to be more reasonable, because it has a higher correlation with other results. For v1.4.1, did I use it wrong? how to modify the code?; > . I feel like you are not listening to me. I don't trust your ORCA and Psi4 comparisons, and it's perfectly reasonable for 1.3.2 and 1.4 to agree with each other but not 1.4.1, if both 1.3.2 and 1.4 had a bug. I do not trust that the results of 1.4 are more reasonable. Like I said before. Find the system where the energy changes the most between 1.4 and 1.4.1, tell us what the energies are, and tell us the system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-968823767
https://github.com/psi4/psi4/issues/2351#issuecomment-971118827:341,Energy Efficiency,energy,energy,341,"I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP. Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? I believe the ORCA input would have; ```; ! wB97X def2-SVP D2; ```; or ; ```; ! wB97X-D3 def2-TZVP; ```. In addition to using the newer version of Psi4 that fixes the bug Jonathon mentioned, ensure that you are comparing like-for-like by spot checking a few of the energies in the benchmark data set using the same software and settings. Using a different dispersion correction and basis set would explain the poor agreement between Psi4 1.4.1 and ORCA 4.0.1. Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-971118827
https://github.com/psi4/psi4/issues/2351#issuecomment-971118827:44,Testability,benchmark,benchmarking,44,"I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP. Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? I believe the ORCA input would have; ```; ! wB97X def2-SVP D2; ```; or ; ```; ! wB97X-D3 def2-TZVP; ```. In addition to using the newer version of Psi4 that fixes the bug Jonathon mentioned, ensure that you are comparing like-for-like by spot checking a few of the energies in the benchmark data set using the same software and settings. Using a different dispersion correction and basis set would explain the poor agreement between Psi4 1.4.1 and ORCA 4.0.1. Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-971118827
https://github.com/psi4/psi4/issues/2351#issuecomment-971118827:279,Testability,test,tested,279,"I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP. Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? I believe the ORCA input would have; ```; ! wB97X def2-SVP D2; ```; or ; ```; ! wB97X-D3 def2-TZVP; ```. In addition to using the newer version of Psi4 that fixes the bug Jonathon mentioned, ensure that you are comparing like-for-like by spot checking a few of the energies in the benchmark data set using the same software and settings. Using a different dispersion correction and basis set would explain the poor agreement between Psi4 1.4.1 and ORCA 4.0.1. Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-971118827
https://github.com/psi4/psi4/issues/2351#issuecomment-971118827:331,Testability,benchmark,benchmark,331,"I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP. Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? I believe the ORCA input would have; ```; ! wB97X def2-SVP D2; ```; or ; ```; ! wB97X-D3 def2-TZVP; ```. In addition to using the newer version of Psi4 that fixes the bug Jonathon mentioned, ensure that you are comparing like-for-like by spot checking a few of the energies in the benchmark data set using the same software and settings. Using a different dispersion correction and basis set would explain the poor agreement between Psi4 1.4.1 and ORCA 4.0.1. Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-971118827
https://github.com/psi4/psi4/issues/2351#issuecomment-971118827:707,Testability,benchmark,benchmark,707,"I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP. Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? I believe the ORCA input would have; ```; ! wB97X def2-SVP D2; ```; or ; ```; ! wB97X-D3 def2-TZVP; ```. In addition to using the newer version of Psi4 that fixes the bug Jonathon mentioned, ensure that you are comparing like-for-like by spot checking a few of the energies in the benchmark data set using the same software and settings. Using a different dispersion correction and basis set would explain the poor agreement between Psi4 1.4.1 and ORCA 4.0.1. Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-971118827
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:297,Energy Efficiency,charge,charges,297,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:378,Energy Efficiency,charge,charge,378,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:1621,Energy Efficiency,energy,energy,1621,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:33,Testability,log,log,33,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:355,Testability,benchmark,benchmark,355,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:446,Testability,Test,Test,446,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:924,Testability,log,logs,924,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:944,Testability,Test,Test,944,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:971,Testability,Test,Test,971,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:1004,Testability,Test,Test,1004,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:1108,Testability,benchmark,benchmarking,1108,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:1343,Testability,test,tested,1343,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:1470,Testability,Test,Test,1470,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:1497,Testability,Test,Test,1497,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:1530,Testability,Test,Test,1530,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:1611,Testability,benchmark,benchmark,1611,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383
https://github.com/psi4/psi4/issues/2351#issuecomment-974333804:946,Availability,down,down,946,"I don't see any wB97X-D3/def2-TZVP energies from Psi4 1.4.1 in your data, just wB97X-D/def2-SVP. . Looking at the data you have from Psi4 1.4.1, the wB97X-D/def2-SVP energies relative to the minimum energy conformer for each molecule are similar to the relative energies from ORCA. Though some conformers have significant differences for the relative energy from ORCA vs from Psi4, most differences are around 1 kcal/mol or less. I would expect similar deviations between wB97X-D/def2-SVP and wB97X-D/def2-TZVP results that were both computed using the same software. The energy is sensitive to the quality of the basis set. Using a different dispersion correction than the 'reference' ORCA energies doesn't help either. The differences compound with different implementations of various algorithms between different software packages. For molecules with conformers that are all close in energy, these deviations will bring the r<sup>2</sup> way down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-974333804
https://github.com/psi4/psi4/issues/2351#issuecomment-974333804:199,Energy Efficiency,energy,energy,199,"I don't see any wB97X-D3/def2-TZVP energies from Psi4 1.4.1 in your data, just wB97X-D/def2-SVP. . Looking at the data you have from Psi4 1.4.1, the wB97X-D/def2-SVP energies relative to the minimum energy conformer for each molecule are similar to the relative energies from ORCA. Though some conformers have significant differences for the relative energy from ORCA vs from Psi4, most differences are around 1 kcal/mol or less. I would expect similar deviations between wB97X-D/def2-SVP and wB97X-D/def2-TZVP results that were both computed using the same software. The energy is sensitive to the quality of the basis set. Using a different dispersion correction than the 'reference' ORCA energies doesn't help either. The differences compound with different implementations of various algorithms between different software packages. For molecules with conformers that are all close in energy, these deviations will bring the r<sup>2</sup> way down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-974333804
https://github.com/psi4/psi4/issues/2351#issuecomment-974333804:351,Energy Efficiency,energy,energy,351,"I don't see any wB97X-D3/def2-TZVP energies from Psi4 1.4.1 in your data, just wB97X-D/def2-SVP. . Looking at the data you have from Psi4 1.4.1, the wB97X-D/def2-SVP energies relative to the minimum energy conformer for each molecule are similar to the relative energies from ORCA. Though some conformers have significant differences for the relative energy from ORCA vs from Psi4, most differences are around 1 kcal/mol or less. I would expect similar deviations between wB97X-D/def2-SVP and wB97X-D/def2-TZVP results that were both computed using the same software. The energy is sensitive to the quality of the basis set. Using a different dispersion correction than the 'reference' ORCA energies doesn't help either. The differences compound with different implementations of various algorithms between different software packages. For molecules with conformers that are all close in energy, these deviations will bring the r<sup>2</sup> way down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-974333804
https://github.com/psi4/psi4/issues/2351#issuecomment-974333804:572,Energy Efficiency,energy,energy,572,"I don't see any wB97X-D3/def2-TZVP energies from Psi4 1.4.1 in your data, just wB97X-D/def2-SVP. . Looking at the data you have from Psi4 1.4.1, the wB97X-D/def2-SVP energies relative to the minimum energy conformer for each molecule are similar to the relative energies from ORCA. Though some conformers have significant differences for the relative energy from ORCA vs from Psi4, most differences are around 1 kcal/mol or less. I would expect similar deviations between wB97X-D/def2-SVP and wB97X-D/def2-TZVP results that were both computed using the same software. The energy is sensitive to the quality of the basis set. Using a different dispersion correction than the 'reference' ORCA energies doesn't help either. The differences compound with different implementations of various algorithms between different software packages. For molecules with conformers that are all close in energy, these deviations will bring the r<sup>2</sup> way down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-974333804
https://github.com/psi4/psi4/issues/2351#issuecomment-974333804:888,Energy Efficiency,energy,energy,888,"I don't see any wB97X-D3/def2-TZVP energies from Psi4 1.4.1 in your data, just wB97X-D/def2-SVP. . Looking at the data you have from Psi4 1.4.1, the wB97X-D/def2-SVP energies relative to the minimum energy conformer for each molecule are similar to the relative energies from ORCA. Though some conformers have significant differences for the relative energy from ORCA vs from Psi4, most differences are around 1 kcal/mol or less. I would expect similar deviations between wB97X-D/def2-SVP and wB97X-D/def2-TZVP results that were both computed using the same software. The energy is sensitive to the quality of the basis set. Using a different dispersion correction than the 'reference' ORCA energies doesn't help either. The differences compound with different implementations of various algorithms between different software packages. For molecules with conformers that are all close in energy, these deviations will bring the r<sup>2</sup> way down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-974333804
https://github.com/psi4/psi4/issues/2351#issuecomment-975326494:191,Deployability,release,release,191,"The following example taking from @blazerygy data set indicates the `wcombine` algorithm is responsible, hence the recommendation to disable it.; Plans are to disable the options in the next release. This option affects the efficiency of the range-separated DFT calculations to a moderate degree. ```; molecule mol {; S -1.843692634757 0.011818668014 -1.930850360417 ; N -0.090392634757 0.011818668014 -1.930850360417 ; C 0.380407365243 0.011818668014 -0.711250360417 ; N -0.598892634757 0.005218668014 0.343749639583 ; C -1.918692634757 0.001718668014 -0.128850360417 ; N -2.920292634757 -0.021381331986 0.692349639583 ; C -4.267092634757 -0.022581331986 0.274749639583 ; O -4.572492634757 -0.014581331986 -0.897450360417 ; C -5.238992634757 -0.031881331986 1.408749639583 ; C -0.276592634757 0.147418668014 1.729149639583 ; C 0.475607365243 1.248918668014 2.154149639583 ; C 0.801207365243 1.363418668014 3.501949639583 ; C 0.368607365243 0.401118668014 4.413949639583 ; C -0.397892634757 -0.680381331986 3.982449639583 ; C -0.725892634757 -0.816981331986 2.636249639583 ; N 1.714507365243 0.032718668014 -0.333650360417 ; C 2.783407365243 -0.139581331986 -1.254650360417 ; C 2.720707365243 0.307318668014 -2.578350360417 ; C 3.838007365243 0.163518668014 -3.395850360417 ; C 5.008507365243 -0.412181331986 -2.905450360417 ; C 5.065807365243 -0.847981331986 -1.582450360417 ; C 3.960507365243 -0.717181331986 -0.749250360417 ; H -5.042492634757 -0.867781331986 2.098449639583 ; H -6.272792634757 -0.114281331986 1.044849639583 ; H -5.154492634757 0.890718668014 2.005349639583 ; H 0.788407365243 2.013318668014 1.442549639583 ; H 1.389307365243 2.214918668014 3.843749639583 ; H 0.623207365243 0.499418668014 5.467849639583 ; H -0.748492634757 -1.422181331986 4.699449639583 ; H -1.343692634757 -1.647681331986 2.292449639583 ; H 1.920307365243 -0.204681331986 0.639249639583 ; H 1.809107365243 0.759418668014 -2.978250360417 ; H 3.792107365243 0.505518668014 -4.429450360417 ; H 5.874807365243 -0.5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-975326494
https://github.com/psi4/psi4/issues/2351#issuecomment-975326494:2193,Energy Efficiency,energy,energy,2193,360417 ; N -0.090392634757 0.011818668014 -1.930850360417 ; C 0.380407365243 0.011818668014 -0.711250360417 ; N -0.598892634757 0.005218668014 0.343749639583 ; C -1.918692634757 0.001718668014 -0.128850360417 ; N -2.920292634757 -0.021381331986 0.692349639583 ; C -4.267092634757 -0.022581331986 0.274749639583 ; O -4.572492634757 -0.014581331986 -0.897450360417 ; C -5.238992634757 -0.031881331986 1.408749639583 ; C -0.276592634757 0.147418668014 1.729149639583 ; C 0.475607365243 1.248918668014 2.154149639583 ; C 0.801207365243 1.363418668014 3.501949639583 ; C 0.368607365243 0.401118668014 4.413949639583 ; C -0.397892634757 -0.680381331986 3.982449639583 ; C -0.725892634757 -0.816981331986 2.636249639583 ; N 1.714507365243 0.032718668014 -0.333650360417 ; C 2.783407365243 -0.139581331986 -1.254650360417 ; C 2.720707365243 0.307318668014 -2.578350360417 ; C 3.838007365243 0.163518668014 -3.395850360417 ; C 5.008507365243 -0.412181331986 -2.905450360417 ; C 5.065807365243 -0.847981331986 -1.582450360417 ; C 3.960507365243 -0.717181331986 -0.749250360417 ; H -5.042492634757 -0.867781331986 2.098449639583 ; H -6.272792634757 -0.114281331986 1.044849639583 ; H -5.154492634757 0.890718668014 2.005349639583 ; H 0.788407365243 2.013318668014 1.442549639583 ; H 1.389307365243 2.214918668014 3.843749639583 ; H 0.623207365243 0.499418668014 5.467849639583 ; H -0.748492634757 -1.422181331986 4.699449639583 ; H -1.343692634757 -1.647681331986 2.292449639583 ; H 1.920307365243 -0.204681331986 0.639249639583 ; H 1.809107365243 0.759418668014 -2.978250360417 ; H 3.792107365243 0.505518668014 -4.429450360417 ; H 5.874807365243 -0.522581331986 -3.552550360417 ; H 5.980307365243 -1.297781331986 -1.198150360417 ; H 4.013407365243 -1.064281331986 0.279049639583 ; }; #memory 8 GiB; #set wcombine false; #set scf_type mem_df. energy('WB97X-D/def2-SVP'); # disk_df disk -1309.4741157753082916; # mem_df in-core -1309.4749504976896333; # mem_df in-core wcombine=false -1309.4741157748148908; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-975326494
https://github.com/psi4/psi4/pull/2354#issuecomment-971481116:265,Availability,down,down,265,"> > The dfocc module is nice but pretty memory hungry. With systems that carry more than ~1300 basis functions i ran into problems i haven't been able to resolve yet. > What problems? I can imagine memory issues because of DFOCC::b_so. Exactly. As far as i tracked down the crashes, the program dies while computing the three-index integrals. It computes them all at once and stores them in memory. Probably, these need to be batched.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-971481116
https://github.com/psi4/psi4/pull/2354#issuecomment-974321512:86,Availability,failure,failures,86,"@loriab I just ran the original branch of Bozkaya's and confirmed that all six pytest failures, where `MP2 SINGLES ENERGY` is zero for MP3 calculations on top of ROHF references, originate there. The test failures do not appear for MP2 computations, so this is a regression in Bozkaya's fork. The 98% is confirmed. Keep me in the loop. For behnle, this means that you don't need to worry about the test failures. _Someone_ will deal with it, the main devs just need to figure out who that is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-974321512
https://github.com/psi4/psi4/pull/2354#issuecomment-974321512:205,Availability,failure,failures,205,"@loriab I just ran the original branch of Bozkaya's and confirmed that all six pytest failures, where `MP2 SINGLES ENERGY` is zero for MP3 calculations on top of ROHF references, originate there. The test failures do not appear for MP2 computations, so this is a regression in Bozkaya's fork. The 98% is confirmed. Keep me in the loop. For behnle, this means that you don't need to worry about the test failures. _Someone_ will deal with it, the main devs just need to figure out who that is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-974321512
https://github.com/psi4/psi4/pull/2354#issuecomment-974321512:403,Availability,failure,failures,403,"@loriab I just ran the original branch of Bozkaya's and confirmed that all six pytest failures, where `MP2 SINGLES ENERGY` is zero for MP3 calculations on top of ROHF references, originate there. The test failures do not appear for MP2 computations, so this is a regression in Bozkaya's fork. The 98% is confirmed. Keep me in the loop. For behnle, this means that you don't need to worry about the test failures. _Someone_ will deal with it, the main devs just need to figure out who that is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-974321512
https://github.com/psi4/psi4/pull/2354#issuecomment-974321512:115,Energy Efficiency,ENERGY,ENERGY,115,"@loriab I just ran the original branch of Bozkaya's and confirmed that all six pytest failures, where `MP2 SINGLES ENERGY` is zero for MP3 calculations on top of ROHF references, originate there. The test failures do not appear for MP2 computations, so this is a regression in Bozkaya's fork. The 98% is confirmed. Keep me in the loop. For behnle, this means that you don't need to worry about the test failures. _Someone_ will deal with it, the main devs just need to figure out who that is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-974321512
https://github.com/psi4/psi4/pull/2354#issuecomment-974321512:200,Testability,test,test,200,"@loriab I just ran the original branch of Bozkaya's and confirmed that all six pytest failures, where `MP2 SINGLES ENERGY` is zero for MP3 calculations on top of ROHF references, originate there. The test failures do not appear for MP2 computations, so this is a regression in Bozkaya's fork. The 98% is confirmed. Keep me in the loop. For behnle, this means that you don't need to worry about the test failures. _Someone_ will deal with it, the main devs just need to figure out who that is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-974321512
https://github.com/psi4/psi4/pull/2354#issuecomment-974321512:398,Testability,test,test,398,"@loriab I just ran the original branch of Bozkaya's and confirmed that all six pytest failures, where `MP2 SINGLES ENERGY` is zero for MP3 calculations on top of ROHF references, originate there. The test failures do not appear for MP2 computations, so this is a regression in Bozkaya's fork. The 98% is confirmed. Keep me in the loop. For behnle, this means that you don't need to worry about the test failures. _Someone_ will deal with it, the main devs just need to figure out who that is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-974321512
https://github.com/psi4/psi4/pull/2354#issuecomment-975787765:213,Testability,test,tests,213,"Dear @JonathonMisiewicz and @PeterKraus,; thank you very much for the valuable comments and the detailed and clear instructions on how to proceed.; As i have written in the initial post, the documentation and the tests were still missing at the time i set up the pull request.; I had some private conversation with @bozkaya upon which i pulled his code into my repository. It is by no means my intention to ""steal"" his code, so feel free to put my pull request on hold until he gives the ""go"" or merge in his repository first.; @PeterKraus does this title better match your expectations?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-975787765
https://github.com/psi4/psi4/pull/2354#issuecomment-975787765:109,Usability,clear,clear,109,"Dear @JonathonMisiewicz and @PeterKraus,; thank you very much for the valuable comments and the detailed and clear instructions on how to proceed.; As i have written in the initial post, the documentation and the tests were still missing at the time i set up the pull request.; I had some private conversation with @bozkaya upon which i pulled his code into my repository. It is by no means my intention to ""steal"" his code, so feel free to put my pull request on hold until he gives the ""go"" or merge in his repository first.; @PeterKraus does this title better match your expectations?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-975787765
https://github.com/psi4/psi4/pull/2354#issuecomment-988756347:553,Deployability,update,updated,553,"On tests: Wonderful! Our standard way to test `oeprop` can be found [here](https://github.com/psi4/psi4/blob/master/tests/pytests/test_dipoles.py). You'll want a new entry for OREMP with both RHF/UHF and Conv/DF integrals. On merging: We've started talking with Ugur Bozkaya on merging his branch in, and we want that merged in before we merge in your contributions. If you want, you can split the `occ` part of this into its own PR, and we can merge that in without complications. If you have no interest in that, it's no problem for us. I'll keep you updated on how the `dfocc` update goes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-988756347
https://github.com/psi4/psi4/pull/2354#issuecomment-988756347:580,Deployability,update,update,580,"On tests: Wonderful! Our standard way to test `oeprop` can be found [here](https://github.com/psi4/psi4/blob/master/tests/pytests/test_dipoles.py). You'll want a new entry for OREMP with both RHF/UHF and Conv/DF integrals. On merging: We've started talking with Ugur Bozkaya on merging his branch in, and we want that merged in before we merge in your contributions. If you want, you can split the `occ` part of this into its own PR, and we can merge that in without complications. If you have no interest in that, it's no problem for us. I'll keep you updated on how the `dfocc` update goes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-988756347
https://github.com/psi4/psi4/pull/2354#issuecomment-988756347:3,Testability,test,tests,3,"On tests: Wonderful! Our standard way to test `oeprop` can be found [here](https://github.com/psi4/psi4/blob/master/tests/pytests/test_dipoles.py). You'll want a new entry for OREMP with both RHF/UHF and Conv/DF integrals. On merging: We've started talking with Ugur Bozkaya on merging his branch in, and we want that merged in before we merge in your contributions. If you want, you can split the `occ` part of this into its own PR, and we can merge that in without complications. If you have no interest in that, it's no problem for us. I'll keep you updated on how the `dfocc` update goes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-988756347
https://github.com/psi4/psi4/pull/2354#issuecomment-988756347:41,Testability,test,test,41,"On tests: Wonderful! Our standard way to test `oeprop` can be found [here](https://github.com/psi4/psi4/blob/master/tests/pytests/test_dipoles.py). You'll want a new entry for OREMP with both RHF/UHF and Conv/DF integrals. On merging: We've started talking with Ugur Bozkaya on merging his branch in, and we want that merged in before we merge in your contributions. If you want, you can split the `occ` part of this into its own PR, and we can merge that in without complications. If you have no interest in that, it's no problem for us. I'll keep you updated on how the `dfocc` update goes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-988756347
https://github.com/psi4/psi4/pull/2354#issuecomment-988756347:116,Testability,test,tests,116,"On tests: Wonderful! Our standard way to test `oeprop` can be found [here](https://github.com/psi4/psi4/blob/master/tests/pytests/test_dipoles.py). You'll want a new entry for OREMP with both RHF/UHF and Conv/DF integrals. On merging: We've started talking with Ugur Bozkaya on merging his branch in, and we want that merged in before we merge in your contributions. If you want, you can split the `occ` part of this into its own PR, and we can merge that in without complications. If you have no interest in that, it's no problem for us. I'll keep you updated on how the `dfocc` update goes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-988756347
https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077:96,Deployability,release,release,96,"Thanks. We're planning to work on synchronizing `dfocc` back with the rest of Psi after the 1.6 release later this month, so I'm hopeful we can get this moving again. Depending on what my schedule looks like, I may be able to split this PR up so that we can get the `occ` part in, while we're waiting on `dfocc`. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077
https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077:188,Energy Efficiency,schedul,schedule,188,"Thanks. We're planning to work on synchronizing `dfocc` back with the rest of Psi after the 1.6 release later this month, so I'm hopeful we can get this moving again. Depending on what my schedule looks like, I may be able to split this PR up so that we can get the `occ` part in, while we're waiting on `dfocc`. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077
https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077:34,Integrability,synchroniz,synchronizing,34,"Thanks. We're planning to work on synchronizing `dfocc` back with the rest of Psi after the 1.6 release later this month, so I'm hopeful we can get this moving again. Depending on what my schedule looks like, I may be able to split this PR up so that we can get the `occ` part in, while we're waiting on `dfocc`. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077
https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077:167,Integrability,Depend,Depending,167,"Thanks. We're planning to work on synchronizing `dfocc` back with the rest of Psi after the 1.6 release later this month, so I'm hopeful we can get this moving again. Depending on what my schedule looks like, I may be able to split this PR up so that we can get the `occ` part in, while we're waiting on `dfocc`. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077
https://github.com/psi4/psi4/pull/2359#issuecomment-974334935:98,Deployability,update,update,98,"New LinK PR opened, comments on this are certainly welcome, but I still need to make my tests and update the docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-974334935
https://github.com/psi4/psi4/pull/2359#issuecomment-974334935:88,Testability,test,tests,88,"New LinK PR opened, comments on this are certainly welcome, but I still need to make my tests and update the docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-974334935
https://github.com/psi4/psi4/pull/2359#issuecomment-974342373:117,Availability,Ping,Ping,117,"> New LinK PR opened, comments on this are certainly welcome, but I still need to make my tests and update the docs. Ping me when it's done, and I'll review it then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-974342373
https://github.com/psi4/psi4/pull/2359#issuecomment-974342373:100,Deployability,update,update,100,"> New LinK PR opened, comments on this are certainly welcome, but I still need to make my tests and update the docs. Ping me when it's done, and I'll review it then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-974342373
https://github.com/psi4/psi4/pull/2359#issuecomment-974342373:90,Testability,test,tests,90,"> New LinK PR opened, comments on this are certainly welcome, but I still need to make my tests and update the docs. Ping me when it's done, and I'll review it then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-974342373
https://github.com/psi4/psi4/pull/2359#issuecomment-975942945:91,Deployability,update,updated,91,"@JonathonMisiewicz This PR is ready for review. I added linK tests for RHF, UHF, and ROHF, updated the documentation on LinK in scf.rst, as well as sources in bibliography.rst, and ran all C-Tests. Doc Compilation and Pytests pending.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-975942945
https://github.com/psi4/psi4/pull/2359#issuecomment-975942945:61,Testability,test,tests,61,"@JonathonMisiewicz This PR is ready for review. I added linK tests for RHF, UHF, and ROHF, updated the documentation on LinK in scf.rst, as well as sources in bibliography.rst, and ran all C-Tests. Doc Compilation and Pytests pending.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-975942945
https://github.com/psi4/psi4/pull/2359#issuecomment-975942945:191,Testability,Test,Tests,191,"@JonathonMisiewicz This PR is ready for review. I added linK tests for RHF, UHF, and ROHF, updated the documentation on LinK in scf.rst, as well as sources in bibliography.rst, and ran all C-Tests. Doc Compilation and Pytests pending.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-975942945
https://github.com/psi4/psi4/pull/2359#issuecomment-976006166:400,Availability,error,error-prone,400,"> Here's a quick-and-dirty review before I go silent for a while over the Thanksgiving holidays.; > ; > There is a _lot_ of code duplication in this file. How much of this can we consolidate? I can figure out where one builder function differs from another, but it takes much more effort than I'm comfortable with. I understand if this is essential for speed purposes, but the current arrangement is error-prone. Good point. I will try to see if I can consolidate any repeats, perhaps `build_JK(ints, D, J, K, do_J, do_K)`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-976006166
https://github.com/psi4/psi4/pull/2359#issuecomment-976673987:112,Availability,avail,available,112,I would prefer to use `do_LinK` as user facing option over a general `do_linear_exchange`. LinK is not the only available linear scaling exchange implementation in the literature. Also please let the user know that LinK is active. At least I didn't see it in the test output files.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-976673987
https://github.com/psi4/psi4/pull/2359#issuecomment-976673987:263,Testability,test,test,263,I would prefer to use `do_LinK` as user facing option over a general `do_linear_exchange`. LinK is not the only available linear scaling exchange implementation in the literature. Also please let the user know that LinK is active. At least I didn't see it in the test output files.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-976673987
https://github.com/psi4/psi4/pull/2359#issuecomment-977378952:29,Energy Efficiency,reduce,reduce,29,"I just refactored my code to reduce code duplicity (Ran all C-Tests, still passed). I changed the build_JK function by adding two boolean switches that determine whether to build J and/or K. So the function header is now; `build_JK(ints, D, J, K, do_J, do_K)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-977378952
https://github.com/psi4/psi4/pull/2359#issuecomment-977378952:7,Modifiability,refactor,refactored,7,"I just refactored my code to reduce code duplicity (Ran all C-Tests, still passed). I changed the build_JK function by adding two boolean switches that determine whether to build J and/or K. So the function header is now; `build_JK(ints, D, J, K, do_J, do_K)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-977378952
https://github.com/psi4/psi4/pull/2359#issuecomment-977378952:62,Testability,Test,Tests,62,"I just refactored my code to reduce code duplicity (Ran all C-Tests, still passed). I changed the build_JK function by adding two boolean switches that determine whether to build J and/or K. So the function header is now; `build_JK(ints, D, J, K, do_J, do_K)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-977378952
https://github.com/psi4/psi4/pull/2359#issuecomment-977380293:114,Availability,avail,available,114,"> I would prefer to use `do_LinK` as user facing option over a general `do_linear_exchange`. LinK is not the only available linear scaling exchange implementation in the literature.; > ; > Also please let the user know that LinK is active. At least I didn't see it in the test output files. I added just added the LinK flag in the output files. I also added a personal message in case someone has questions about this code in the future, they know who to bug :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-977380293
https://github.com/psi4/psi4/pull/2359#issuecomment-977380293:369,Integrability,message,message,369,"> I would prefer to use `do_LinK` as user facing option over a general `do_linear_exchange`. LinK is not the only available linear scaling exchange implementation in the literature.; > ; > Also please let the user know that LinK is active. At least I didn't see it in the test output files. I added just added the LinK flag in the output files. I also added a personal message in case someone has questions about this code in the future, they know who to bug :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-977380293
https://github.com/psi4/psi4/pull/2359#issuecomment-977380293:272,Testability,test,test,272,"> I would prefer to use `do_LinK` as user facing option over a general `do_linear_exchange`. LinK is not the only available linear scaling exchange implementation in the literature.; > ; > Also please let the user know that LinK is active. At least I didn't see it in the test output files. I added just added the LinK flag in the output files. I also added a personal message in case someone has questions about this code in the future, they know who to bug :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-977380293
https://github.com/psi4/psi4/pull/2359#issuecomment-981225085:107,Availability,redundant,redundant,107,"Hi all, I added integral hashing to the direct JK class for separate J and K matrix builds, to avoid doing redundant, expensive ERI computations when building linK and then building J. I also reran all the C tests (all passing).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085
https://github.com/psi4/psi4/pull/2359#issuecomment-981225085:95,Safety,avoid,avoid,95,"Hi all, I added integral hashing to the direct JK class for separate J and K matrix builds, to avoid doing redundant, expensive ERI computations when building linK and then building J. I also reran all the C tests (all passing).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085
https://github.com/psi4/psi4/pull/2359#issuecomment-981225085:107,Safety,redund,redundant,107,"Hi all, I added integral hashing to the direct JK class for separate J and K matrix builds, to avoid doing redundant, expensive ERI computations when building linK and then building J. I also reran all the C tests (all passing).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085
https://github.com/psi4/psi4/pull/2359#issuecomment-981225085:25,Security,hash,hashing,25,"Hi all, I added integral hashing to the direct JK class for separate J and K matrix builds, to avoid doing redundant, expensive ERI computations when building linK and then building J. I also reran all the C tests (all passing).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085
https://github.com/psi4/psi4/pull/2359#issuecomment-981225085:208,Testability,test,tests,208,"Hi all, I added integral hashing to the direct JK class for separate J and K matrix builds, to avoid doing redundant, expensive ERI computations when building linK and then building J. I also reran all the C tests (all passing).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085
https://github.com/psi4/psi4/pull/2359#issuecomment-991449598:21,Modifiability,refactor,refactored,21,"@JonathonMisiewicz I refactored the variable names in the LinK code, but not the regular directJK code yet until I get your opinion on the new names",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-991449598
https://github.com/psi4/psi4/pull/2359#issuecomment-991449598:36,Modifiability,variab,variable,36,"@JonathonMisiewicz I refactored the variable names in the LinK code, but not the regular directJK code yet until I get your opinion on the new names",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-991449598
https://github.com/psi4/psi4/pull/2359#issuecomment-992570345:138,Performance,perform,perform,138,"The atom vs shell loop structure is an open question of the PR:. > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?. What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992570345
https://github.com/psi4/psi4/pull/2359#issuecomment-992575381:655,Energy Efficiency,efficient,efficient,655,"> The atom vs shell loop structure is an open question of the PR:; > ; > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > ; > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large. I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992575381
https://github.com/psi4/psi4/pull/2359#issuecomment-992575381:697,Energy Efficiency,efficient,efficient,697,"> The atom vs shell loop structure is an open question of the PR:; > ; > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > ; > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large. I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992575381
https://github.com/psi4/psi4/pull/2359#issuecomment-992575381:744,Modifiability,refactor,refactoring,744,"> The atom vs shell loop structure is an open question of the PR:; > ; > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > ; > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large. I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992575381
https://github.com/psi4/psi4/pull/2359#issuecomment-992575381:146,Performance,perform,perform,146,"> The atom vs shell loop structure is an open question of the PR:; > ; > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > ; > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large. I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992575381
https://github.com/psi4/psi4/pull/2359#issuecomment-992575381:538,Usability,clear,clear,538,"> The atom vs shell loop structure is an open question of the PR:; > ; > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > ; > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large. I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992575381
https://github.com/psi4/psi4/pull/2359#issuecomment-992619129:672,Energy Efficiency,efficient,efficient,672,"> > The atom vs shell loop structure is an open question of the PR:; > > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > > ; > > ; > > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.; > ; > I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?. @susilehtola Based on your experience, what do you think should be done? Should we preserve the old loop structure of DirectJK (atom blocking) or try shell blocking (and refactor this code heavily)? I would think that performance gain is minimal because the shell screening is performed inside the atom blocking loop, but that is only my suspicion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129
https://github.com/psi4/psi4/pull/2359#issuecomment-992619129:714,Energy Efficiency,efficient,efficient,714,"> > The atom vs shell loop structure is an open question of the PR:; > > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > > ; > > ; > > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.; > ; > I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?. @susilehtola Based on your experience, what do you think should be done? Should we preserve the old loop structure of DirectJK (atom blocking) or try shell blocking (and refactor this code heavily)? I would think that performance gain is minimal because the shell screening is performed inside the atom blocking loop, but that is only my suspicion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129
https://github.com/psi4/psi4/pull/2359#issuecomment-992619129:761,Modifiability,refactor,refactoring,761,"> > The atom vs shell loop structure is an open question of the PR:; > > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > > ; > > ; > > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.; > ; > I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?. @susilehtola Based on your experience, what do you think should be done? Should we preserve the old loop structure of DirectJK (atom blocking) or try shell blocking (and refactor this code heavily)? I would think that performance gain is minimal because the shell screening is performed inside the atom blocking loop, but that is only my suspicion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129
https://github.com/psi4/psi4/pull/2359#issuecomment-992619129:964,Modifiability,refactor,refactor,964,"> > The atom vs shell loop structure is an open question of the PR:; > > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > > ; > > ; > > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.; > ; > I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?. @susilehtola Based on your experience, what do you think should be done? Should we preserve the old loop structure of DirectJK (atom blocking) or try shell blocking (and refactor this code heavily)? I would think that performance gain is minimal because the shell screening is performed inside the atom blocking loop, but that is only my suspicion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129
https://github.com/psi4/psi4/pull/2359#issuecomment-992619129:146,Performance,perform,perform,146,"> > The atom vs shell loop structure is an open question of the PR:; > > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > > ; > > ; > > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.; > ; > I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?. @susilehtola Based on your experience, what do you think should be done? Should we preserve the old loop structure of DirectJK (atom blocking) or try shell blocking (and refactor this code heavily)? I would think that performance gain is minimal because the shell screening is performed inside the atom blocking loop, but that is only my suspicion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129
https://github.com/psi4/psi4/pull/2359#issuecomment-992619129:1012,Performance,perform,performance,1012,"> > The atom vs shell loop structure is an open question of the PR:; > > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > > ; > > ; > > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.; > ; > I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?. @susilehtola Based on your experience, what do you think should be done? Should we preserve the old loop structure of DirectJK (atom blocking) or try shell blocking (and refactor this code heavily)? I would think that performance gain is minimal because the shell screening is performed inside the atom blocking loop, but that is only my suspicion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129
https://github.com/psi4/psi4/pull/2359#issuecomment-992619129:1071,Performance,perform,performed,1071,"> > The atom vs shell loop structure is an open question of the PR:; > > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > > ; > > ; > > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.; > ; > I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?. @susilehtola Based on your experience, what do you think should be done? Should we preserve the old loop structure of DirectJK (atom blocking) or try shell blocking (and refactor this code heavily)? I would think that performance gain is minimal because the shell screening is performed inside the atom blocking loop, but that is only my suspicion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129
https://github.com/psi4/psi4/pull/2359#issuecomment-992619129:555,Usability,clear,clear,555,"> > The atom vs shell loop structure is an open question of the PR:; > > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > > ; > > ; > > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.; > ; > I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?. @susilehtola Based on your experience, what do you think should be done? Should we preserve the old loop structure of DirectJK (atom blocking) or try shell blocking (and refactor this code heavily)? I would think that performance gain is minimal because the shell screening is performed inside the atom blocking loop, but that is only my suspicion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129
https://github.com/psi4/psi4/pull/2359#issuecomment-992624092:138,Integrability,contract,contractions,138,"@andyj10224 I honestly have no idea. I've never even thought of doing an atom-based loop... I guess it's beneficial if you do generalized contractions, but Psi4 doesn't do those lol",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992624092
https://github.com/psi4/psi4/pull/2359#issuecomment-998996631:150,Safety,avoid,avoid,150,"@susilehtola After further discussion, including with Dr. Sherrill, we have decided to keep the current atom-blocking structure of LinK, since we can avoid situations ""of too-small workloads in the inner loops"" in the words of Dr. Sherrill when we run DirectJK in parallel. Changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR. I have also added new comments to my linK code, and explained my code in the context of the Oschenfeld paper. I will attach the LinK algorithm's pseudocode for the reviewers for reference. <img width=""669"" alt=""Linear Exchange Algorithm"" src=""https://user-images.githubusercontent.com/60559795/146979417-70931487-df27-4c59-841e-0336bba36757.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-998996631
https://github.com/psi4/psi4/pull/2359#issuecomment-998999113:73,Modifiability,variab,variable,73,"Please review the LinK code first, and tell me what you think of the new variable names before I make any changes to the DirectJK build algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-998999113
https://github.com/psi4/psi4/pull/2359#issuecomment-999662496:599,Energy Efficiency,efficient,efficient,599,"> After further discussion, including with Dr. Sherrill, we have decided to keep the current atom-blocking structure of LinK, since we can avoid situations ""of too-small workloads in the inner loops"" in the words of Dr. Sherrill when we run DirectJK in parallel. Changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR. Whether ""changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR"" is a definition game. Is the goal of this PR ""implement a linK derivative with atom-blocking"" or ""implement the most efficient linK derivative we can think of""? If it's the former, then it's out-of-scope, and if it's the latter, then it's in-scope. Since you are not implementing the Ochsenfeld algorithm but a derivative thereof, give me a pseudocode version of your linK derivative that tells me _exactly_ what the loops are, what's getting parallelized, whether your screening is atom-based or shell-based, and what integrals you're computing based on your screening. My chief concern is this: It looks to me like you are computing integrals that you already know are insignificant (if the shell pair was screened out, but some other shell pair on the atom pair was not) because you can parallelize more efficiently. Parallelization efficiency is not the primary metric we care about, runtime is. It isn't clear to me how giving ourselves extra work is reducing runtime. If it's more efficient to screen out irrelevant shell pairs but distribute all relevant shell pairs between two atoms to a single thread, go for it: we're not computing extra integrals in that case. But if we distribute all shell pairs between relevant atoms to a single thread... that could be a lot of extra work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-999662496
https://github.com/psi4/psi4/pull/2359#issuecomment-999662496:1289,Energy Efficiency,efficient,efficiently,1289,"> After further discussion, including with Dr. Sherrill, we have decided to keep the current atom-blocking structure of LinK, since we can avoid situations ""of too-small workloads in the inner loops"" in the words of Dr. Sherrill when we run DirectJK in parallel. Changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR. Whether ""changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR"" is a definition game. Is the goal of this PR ""implement a linK derivative with atom-blocking"" or ""implement the most efficient linK derivative we can think of""? If it's the former, then it's out-of-scope, and if it's the latter, then it's in-scope. Since you are not implementing the Ochsenfeld algorithm but a derivative thereof, give me a pseudocode version of your linK derivative that tells me _exactly_ what the loops are, what's getting parallelized, whether your screening is atom-based or shell-based, and what integrals you're computing based on your screening. My chief concern is this: It looks to me like you are computing integrals that you already know are insignificant (if the shell pair was screened out, but some other shell pair on the atom pair was not) because you can parallelize more efficiently. Parallelization efficiency is not the primary metric we care about, runtime is. It isn't clear to me how giving ourselves extra work is reducing runtime. If it's more efficient to screen out irrelevant shell pairs but distribute all relevant shell pairs between two atoms to a single thread, go for it: we're not computing extra integrals in that case. But if we distribute all shell pairs between relevant atoms to a single thread... that could be a lot of extra work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-999662496
https://github.com/psi4/psi4/pull/2359#issuecomment-999662496:1469,Energy Efficiency,efficient,efficient,1469,"> After further discussion, including with Dr. Sherrill, we have decided to keep the current atom-blocking structure of LinK, since we can avoid situations ""of too-small workloads in the inner loops"" in the words of Dr. Sherrill when we run DirectJK in parallel. Changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR. Whether ""changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR"" is a definition game. Is the goal of this PR ""implement a linK derivative with atom-blocking"" or ""implement the most efficient linK derivative we can think of""? If it's the former, then it's out-of-scope, and if it's the latter, then it's in-scope. Since you are not implementing the Ochsenfeld algorithm but a derivative thereof, give me a pseudocode version of your linK derivative that tells me _exactly_ what the loops are, what's getting parallelized, whether your screening is atom-based or shell-based, and what integrals you're computing based on your screening. My chief concern is this: It looks to me like you are computing integrals that you already know are insignificant (if the shell pair was screened out, but some other shell pair on the atom pair was not) because you can parallelize more efficiently. Parallelization efficiency is not the primary metric we care about, runtime is. It isn't clear to me how giving ourselves extra work is reducing runtime. If it's more efficient to screen out irrelevant shell pairs but distribute all relevant shell pairs between two atoms to a single thread, go for it: we're not computing extra integrals in that case. But if we distribute all shell pairs between relevant atoms to a single thread... that could be a lot of extra work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-999662496
https://github.com/psi4/psi4/pull/2359#issuecomment-999662496:139,Safety,avoid,avoid,139,"> After further discussion, including with Dr. Sherrill, we have decided to keep the current atom-blocking structure of LinK, since we can avoid situations ""of too-small workloads in the inner loops"" in the words of Dr. Sherrill when we run DirectJK in parallel. Changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR. Whether ""changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR"" is a definition game. Is the goal of this PR ""implement a linK derivative with atom-blocking"" or ""implement the most efficient linK derivative we can think of""? If it's the former, then it's out-of-scope, and if it's the latter, then it's in-scope. Since you are not implementing the Ochsenfeld algorithm but a derivative thereof, give me a pseudocode version of your linK derivative that tells me _exactly_ what the loops are, what's getting parallelized, whether your screening is atom-based or shell-based, and what integrals you're computing based on your screening. My chief concern is this: It looks to me like you are computing integrals that you already know are insignificant (if the shell pair was screened out, but some other shell pair on the atom pair was not) because you can parallelize more efficiently. Parallelization efficiency is not the primary metric we care about, runtime is. It isn't clear to me how giving ourselves extra work is reducing runtime. If it's more efficient to screen out irrelevant shell pairs but distribute all relevant shell pairs between two atoms to a single thread, go for it: we're not computing extra integrals in that case. But if we distribute all shell pairs between relevant atoms to a single thread... that could be a lot of extra work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-999662496
https://github.com/psi4/psi4/pull/2359#issuecomment-999662496:1391,Usability,clear,clear,1391,"> After further discussion, including with Dr. Sherrill, we have decided to keep the current atom-blocking structure of LinK, since we can avoid situations ""of too-small workloads in the inner loops"" in the words of Dr. Sherrill when we run DirectJK in parallel. Changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR. Whether ""changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR"" is a definition game. Is the goal of this PR ""implement a linK derivative with atom-blocking"" or ""implement the most efficient linK derivative we can think of""? If it's the former, then it's out-of-scope, and if it's the latter, then it's in-scope. Since you are not implementing the Ochsenfeld algorithm but a derivative thereof, give me a pseudocode version of your linK derivative that tells me _exactly_ what the loops are, what's getting parallelized, whether your screening is atom-based or shell-based, and what integrals you're computing based on your screening. My chief concern is this: It looks to me like you are computing integrals that you already know are insignificant (if the shell pair was screened out, but some other shell pair on the atom pair was not) because you can parallelize more efficiently. Parallelization efficiency is not the primary metric we care about, runtime is. It isn't clear to me how giving ourselves extra work is reducing runtime. If it's more efficient to screen out irrelevant shell pairs but distribute all relevant shell pairs between two atoms to a single thread, go for it: we're not computing extra integrals in that case. But if we distribute all shell pairs between relevant atoms to a single thread... that could be a lot of extra work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-999662496
https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024:24,Deployability,update,updated,24,"Hi all, I have recently updated the algorithm to perform a shell-based LinK algorithm while maintaining atomic blocking to maximize parallel efficiency. This is consistent with the algorithm in the paper (as the first line of the algorithm is ""Loop over types (angular momenta, contraction, ...) of shell-pair blocks, and atom blocking is a valid way to block shell pairs"". I tried to implement a linK variant using only shell-blocking, and the parallel efficiency was severely impaired. Here are some timings results of the new updated LinK code (run on Pople Basis Sets):; ![LinK_timings_631gs](https://user-images.githubusercontent.com/60559795/147882191-40115cbd-56fa-47bc-90a4-d57e707cca47.png); ![LinK_timings_631pgs](https://user-images.githubusercontent.com/60559795/147882187-ca00313a-07cb-48b1-9628-1f491f083d49.png)![LinK_timings_6311gs](https://user-images.githubusercontent.com/60559795/147882185-d70f96d7-064b-4a92-a335-f4d707a2fa32.png); ![LinK_JK_ratios_pople](https://user-images.githubusercontent.com/60559795/147882192-1c6bcaf8-b01d-4574-98e1-710dafd1d74e.png). Core Developers, if you are able to, please prioritize the review of this PR. There are a plethora of new Psi features that would be contingent on the finalization of this PR (Direct-DFJ, CFMM, Split-JK architecture, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024
https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024:529,Deployability,update,updated,529,"Hi all, I have recently updated the algorithm to perform a shell-based LinK algorithm while maintaining atomic blocking to maximize parallel efficiency. This is consistent with the algorithm in the paper (as the first line of the algorithm is ""Loop over types (angular momenta, contraction, ...) of shell-pair blocks, and atom blocking is a valid way to block shell pairs"". I tried to implement a linK variant using only shell-blocking, and the parallel efficiency was severely impaired. Here are some timings results of the new updated LinK code (run on Pople Basis Sets):; ![LinK_timings_631gs](https://user-images.githubusercontent.com/60559795/147882191-40115cbd-56fa-47bc-90a4-d57e707cca47.png); ![LinK_timings_631pgs](https://user-images.githubusercontent.com/60559795/147882187-ca00313a-07cb-48b1-9628-1f491f083d49.png)![LinK_timings_6311gs](https://user-images.githubusercontent.com/60559795/147882185-d70f96d7-064b-4a92-a335-f4d707a2fa32.png); ![LinK_JK_ratios_pople](https://user-images.githubusercontent.com/60559795/147882192-1c6bcaf8-b01d-4574-98e1-710dafd1d74e.png). Core Developers, if you are able to, please prioritize the review of this PR. There are a plethora of new Psi features that would be contingent on the finalization of this PR (Direct-DFJ, CFMM, Split-JK architecture, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024
https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024:278,Integrability,contract,contraction,278,"Hi all, I have recently updated the algorithm to perform a shell-based LinK algorithm while maintaining atomic blocking to maximize parallel efficiency. This is consistent with the algorithm in the paper (as the first line of the algorithm is ""Loop over types (angular momenta, contraction, ...) of shell-pair blocks, and atom blocking is a valid way to block shell pairs"". I tried to implement a linK variant using only shell-blocking, and the parallel efficiency was severely impaired. Here are some timings results of the new updated LinK code (run on Pople Basis Sets):; ![LinK_timings_631gs](https://user-images.githubusercontent.com/60559795/147882191-40115cbd-56fa-47bc-90a4-d57e707cca47.png); ![LinK_timings_631pgs](https://user-images.githubusercontent.com/60559795/147882187-ca00313a-07cb-48b1-9628-1f491f083d49.png)![LinK_timings_6311gs](https://user-images.githubusercontent.com/60559795/147882185-d70f96d7-064b-4a92-a335-f4d707a2fa32.png); ![LinK_JK_ratios_pople](https://user-images.githubusercontent.com/60559795/147882192-1c6bcaf8-b01d-4574-98e1-710dafd1d74e.png). Core Developers, if you are able to, please prioritize the review of this PR. There are a plethora of new Psi features that would be contingent on the finalization of this PR (Direct-DFJ, CFMM, Split-JK architecture, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024
https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024:49,Performance,perform,perform,49,"Hi all, I have recently updated the algorithm to perform a shell-based LinK algorithm while maintaining atomic blocking to maximize parallel efficiency. This is consistent with the algorithm in the paper (as the first line of the algorithm is ""Loop over types (angular momenta, contraction, ...) of shell-pair blocks, and atom blocking is a valid way to block shell pairs"". I tried to implement a linK variant using only shell-blocking, and the parallel efficiency was severely impaired. Here are some timings results of the new updated LinK code (run on Pople Basis Sets):; ![LinK_timings_631gs](https://user-images.githubusercontent.com/60559795/147882191-40115cbd-56fa-47bc-90a4-d57e707cca47.png); ![LinK_timings_631pgs](https://user-images.githubusercontent.com/60559795/147882187-ca00313a-07cb-48b1-9628-1f491f083d49.png)![LinK_timings_6311gs](https://user-images.githubusercontent.com/60559795/147882185-d70f96d7-064b-4a92-a335-f4d707a2fa32.png); ![LinK_JK_ratios_pople](https://user-images.githubusercontent.com/60559795/147882192-1c6bcaf8-b01d-4574-98e1-710dafd1d74e.png). Core Developers, if you are able to, please prioritize the review of this PR. There are a plethora of new Psi features that would be contingent on the finalization of this PR (Direct-DFJ, CFMM, Split-JK architecture, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024
https://github.com/psi4/psi4/pull/2359#issuecomment-1004198618:612,Integrability,contract,contraction,612,"> I've started the review, but I'm confused by the original Ochsenfeld paper.; > ; > At the start of the algorithm, why do they say ""Loop over all mu in significant bra-shell pairs"" rather than ""Loop over all shells mu""? Every shell is in at least one significant pair, right?; > ; > I imagine this has to do with their reference to Ahlrichs prescreening and ""the significant shell pairs have been preselected by overlap criteria,"" but I don't follow the details. The shell prescreening for kets can be done over all shells, or over shells blocked by task (atom-pair). See the ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"" header. In my implementation, I did it over all shells prior to entering the task loop, but those two implementations are equivalent. I will refactor my code so that it conforms to the algorithm in the paper, for easier review and less confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1004198618
https://github.com/psi4/psi4/pull/2359#issuecomment-1004198618:793,Modifiability,refactor,refactor,793,"> I've started the review, but I'm confused by the original Ochsenfeld paper.; > ; > At the start of the algorithm, why do they say ""Loop over all mu in significant bra-shell pairs"" rather than ""Loop over all shells mu""? Every shell is in at least one significant pair, right?; > ; > I imagine this has to do with their reference to Ahlrichs prescreening and ""the significant shell pairs have been preselected by overlap criteria,"" but I don't follow the details. The shell prescreening for kets can be done over all shells, or over shells blocked by task (atom-pair). See the ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"" header. In my implementation, I did it over all shells prior to entering the task loop, but those two implementations are equivalent. I will refactor my code so that it conforms to the algorithm in the paper, for easier review and less confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1004198618
https://github.com/psi4/psi4/pull/2359#issuecomment-1004219207:520,Usability,clear,clear,520,"If so, that part of the original paper is badly written. @davpoolechem Could you double-check this? The question is what is meant by ""Note that before starting with the loop structure described in Fig. 1, the significant shell pairs have been preselected by using overlap criteria and preordered by size of the integral estimate"" and by ""Loop over all significant bra-shell pairs"" in the Ochsenfeld paper. Andy thinks ""significant"" = ""in this particular block"", but then the meaning of the first sentence I quoted isn't clear. I don't have the background in SCF algorithms to know what they're talking about without putting more time into this than I would like to spend, but it looks like it's similar to Fig. 3 and 4 of [their earlier paper](https://doi.org/10.1063/1.473833). Since you have more experience with this, can you offer a second opinion?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1004219207
https://github.com/psi4/psi4/pull/2359#issuecomment-1031453049:63,Availability,ping,pinging,63,"It's not clear to me that ""re-request review"" did anything, so pinging @davpoolechem again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1031453049
https://github.com/psi4/psi4/pull/2359#issuecomment-1031453049:9,Usability,clear,clear,9,"It's not clear to me that ""re-request review"" did anything, so pinging @davpoolechem again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1031453049
https://github.com/psi4/psi4/pull/2359#issuecomment-1033084040:573,Usability,clear,clear,573,"Re-posting the specific thing I need @davpoolechem to look into, because that seems to have been forgotten. > @davpoolechem Could you double-check this? The question is what is meant by ""Note that before starting with the loop structure described in Fig. 1, the significant shell pairs have been preselected by using overlap criteria and preordered by size of the integral estimate"" and by ""Loop over all significant bra-shell pairs"" in the Ochsenfeld paper. Andy thinks ""significant"" = ""in this particular block"", but then the meaning of the first sentence I quoted isn't clear. I don't have the background in SCF algorithms to know what they're talking about without putting more time into this than I would like to spend, but it looks like it's similar to Fig. 3 and 4 of [their earlier paper](https://doi.org/10.1063/1.473833). Since you have more experience with this, can you offer a second opinion?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1033084040
https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867:405,Integrability,contract,contraction,405,"Ah, yes, that did indeed slip my mind. Thank you for the reminder!. Here's how I would interpret it. First, I agree with Andy that, in the phrase ""Loop over all mu's in significant ""bra""-shell pairs"", significant refers to significant specifically in the given block. In the original paper, the entire Algorithm presented in Figure 1 is contained within an outer loop - ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"". This outer loop traverses the different types of shell pair blocks present in the calculation, e.g., |ss>, |ps>, |pp>, etc. (Note that the loop also separates different shell pair types of the same angular momenta by the contraction degrees of the shells in the shell pair). Then, for a given shell pair type (say, using |ps> as an example), the algorithm will be conducted. For the step ""Loop over all mu's in significant ""bra""-shell pairs"", the loop would be over all shells mu that are present in a significant shell pair of the given shell pair type. Using our example, the loop would be over all shells mu that are present in a significant |ps> shell pair. Something to reinforce this interpretation, is this line from the LinK paper, providing a definition to the condition used in the preselection step:; ""Here (mu_max | mu_max)^1/2 denotes the maximum over all integral estimates **of this shell-pair type**, (mu lambda | mu lambda)^1/2, that involve shell mu"" (emphasis mine).; The shell pair type mentioned in the definition refers to the outer loop discussed earlier, i.e., looping over shell pairs with the same angular momenta and contraction degrees. So, (mu lambda | mu lambda)^1/2 would be an integral estimate for shell pair |mu lambda>, and (mu_max | mu_max)^1/2 for shell mu would be the largest integral estimate associated with mu such that |mu lambda> is a shell pair of the shell pair type being worked on. . This interpretation leaves two questions. First, what does the line ""Note that before starting with the loop structure desc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867
https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867:667,Integrability,contract,contraction,667,"Ah, yes, that did indeed slip my mind. Thank you for the reminder!. Here's how I would interpret it. First, I agree with Andy that, in the phrase ""Loop over all mu's in significant ""bra""-shell pairs"", significant refers to significant specifically in the given block. In the original paper, the entire Algorithm presented in Figure 1 is contained within an outer loop - ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"". This outer loop traverses the different types of shell pair blocks present in the calculation, e.g., |ss>, |ps>, |pp>, etc. (Note that the loop also separates different shell pair types of the same angular momenta by the contraction degrees of the shells in the shell pair). Then, for a given shell pair type (say, using |ps> as an example), the algorithm will be conducted. For the step ""Loop over all mu's in significant ""bra""-shell pairs"", the loop would be over all shells mu that are present in a significant shell pair of the given shell pair type. Using our example, the loop would be over all shells mu that are present in a significant |ps> shell pair. Something to reinforce this interpretation, is this line from the LinK paper, providing a definition to the condition used in the preselection step:; ""Here (mu_max | mu_max)^1/2 denotes the maximum over all integral estimates **of this shell-pair type**, (mu lambda | mu lambda)^1/2, that involve shell mu"" (emphasis mine).; The shell pair type mentioned in the definition refers to the outer loop discussed earlier, i.e., looping over shell pairs with the same angular momenta and contraction degrees. So, (mu lambda | mu lambda)^1/2 would be an integral estimate for shell pair |mu lambda>, and (mu_max | mu_max)^1/2 for shell mu would be the largest integral estimate associated with mu such that |mu lambda> is a shell pair of the shell pair type being worked on. . This interpretation leaves two questions. First, what does the line ""Note that before starting with the loop structure desc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867
https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867:1590,Integrability,contract,contraction,1590," (Note that the loop also separates different shell pair types of the same angular momenta by the contraction degrees of the shells in the shell pair). Then, for a given shell pair type (say, using |ps> as an example), the algorithm will be conducted. For the step ""Loop over all mu's in significant ""bra""-shell pairs"", the loop would be over all shells mu that are present in a significant shell pair of the given shell pair type. Using our example, the loop would be over all shells mu that are present in a significant |ps> shell pair. Something to reinforce this interpretation, is this line from the LinK paper, providing a definition to the condition used in the preselection step:; ""Here (mu_max | mu_max)^1/2 denotes the maximum over all integral estimates **of this shell-pair type**, (mu lambda | mu lambda)^1/2, that involve shell mu"" (emphasis mine).; The shell pair type mentioned in the definition refers to the outer loop discussed earlier, i.e., looping over shell pairs with the same angular momenta and contraction degrees. So, (mu lambda | mu lambda)^1/2 would be an integral estimate for shell pair |mu lambda>, and (mu_max | mu_max)^1/2 for shell mu would be the largest integral estimate associated with mu such that |mu lambda> is a shell pair of the shell pair type being worked on. . This interpretation leaves two questions. First, what does the line ""Note that before starting with the loop structure described in Fig. 1, the significant shell pairs have been preselected by using overlap criteria and preordered by size of the integral estimate"" mean? I would interpret that as meaning that there is stored, somewhere, a _complete_ list of significant shell pairs. This list is created before the algorithm in Figure 1 starts, so significant in the context of this line refers to the entire list of significant shell pairs, not just the significant shell pairs of a given block. . The second question is this - does ""Loop over all nu's in significant ""ket"" shell pairs"" hav",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867
https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867:3119,Integrability,contract,contraction,3119," type**, (mu lambda | mu lambda)^1/2, that involve shell mu"" (emphasis mine).; The shell pair type mentioned in the definition refers to the outer loop discussed earlier, i.e., looping over shell pairs with the same angular momenta and contraction degrees. So, (mu lambda | mu lambda)^1/2 would be an integral estimate for shell pair |mu lambda>, and (mu_max | mu_max)^1/2 for shell mu would be the largest integral estimate associated with mu such that |mu lambda> is a shell pair of the shell pair type being worked on. . This interpretation leaves two questions. First, what does the line ""Note that before starting with the loop structure described in Fig. 1, the significant shell pairs have been preselected by using overlap criteria and preordered by size of the integral estimate"" mean? I would interpret that as meaning that there is stored, somewhere, a _complete_ list of significant shell pairs. This list is created before the algorithm in Figure 1 starts, so significant in the context of this line refers to the entire list of significant shell pairs, not just the significant shell pairs of a given block. . The second question is this - does ""Loop over all nu's in significant ""ket"" shell pairs"" have the same meaning as it's bra counterpart loop? Admittedly, the answer to this question is not entirely clear to me. However, my immediate hunch is yes. The reason why, is because (nu_max | nu_max)^1/2 is also present in the preselection condition definition. Without an explicit definition of (nu_max | nu_max)^1/2 in the paper, it would have to be guessed that (nu_max | nu_max)^1/2 has an analogous definition to (mu_max | mu_max)^1/2, but for ""ket"" shell pairs. If this were the case, it would imply that the ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"" would be a pair of loops, one looping over bra shell pair types, and one looping over ket shell pair types. . Again, this is simply my interpretation of the matter. Do let me know what you think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867
https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867:2675,Usability,clear,clear,2675," type**, (mu lambda | mu lambda)^1/2, that involve shell mu"" (emphasis mine).; The shell pair type mentioned in the definition refers to the outer loop discussed earlier, i.e., looping over shell pairs with the same angular momenta and contraction degrees. So, (mu lambda | mu lambda)^1/2 would be an integral estimate for shell pair |mu lambda>, and (mu_max | mu_max)^1/2 for shell mu would be the largest integral estimate associated with mu such that |mu lambda> is a shell pair of the shell pair type being worked on. . This interpretation leaves two questions. First, what does the line ""Note that before starting with the loop structure described in Fig. 1, the significant shell pairs have been preselected by using overlap criteria and preordered by size of the integral estimate"" mean? I would interpret that as meaning that there is stored, somewhere, a _complete_ list of significant shell pairs. This list is created before the algorithm in Figure 1 starts, so significant in the context of this line refers to the entire list of significant shell pairs, not just the significant shell pairs of a given block. . The second question is this - does ""Loop over all nu's in significant ""ket"" shell pairs"" have the same meaning as it's bra counterpart loop? Admittedly, the answer to this question is not entirely clear to me. However, my immediate hunch is yes. The reason why, is because (nu_max | nu_max)^1/2 is also present in the preselection condition definition. Without an explicit definition of (nu_max | nu_max)^1/2 in the paper, it would have to be guessed that (nu_max | nu_max)^1/2 has an analogous definition to (mu_max | mu_max)^1/2, but for ""ket"" shell pairs. If this were the case, it would imply that the ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"" would be a pair of loops, one looping over bra shell pair types, and one looping over ket shell pair types. . Again, this is simply my interpretation of the matter. Do let me know what you think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867
https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867:3284,Usability,simpl,simply,3284," type**, (mu lambda | mu lambda)^1/2, that involve shell mu"" (emphasis mine).; The shell pair type mentioned in the definition refers to the outer loop discussed earlier, i.e., looping over shell pairs with the same angular momenta and contraction degrees. So, (mu lambda | mu lambda)^1/2 would be an integral estimate for shell pair |mu lambda>, and (mu_max | mu_max)^1/2 for shell mu would be the largest integral estimate associated with mu such that |mu lambda> is a shell pair of the shell pair type being worked on. . This interpretation leaves two questions. First, what does the line ""Note that before starting with the loop structure described in Fig. 1, the significant shell pairs have been preselected by using overlap criteria and preordered by size of the integral estimate"" mean? I would interpret that as meaning that there is stored, somewhere, a _complete_ list of significant shell pairs. This list is created before the algorithm in Figure 1 starts, so significant in the context of this line refers to the entire list of significant shell pairs, not just the significant shell pairs of a given block. . The second question is this - does ""Loop over all nu's in significant ""ket"" shell pairs"" have the same meaning as it's bra counterpart loop? Admittedly, the answer to this question is not entirely clear to me. However, my immediate hunch is yes. The reason why, is because (nu_max | nu_max)^1/2 is also present in the preselection condition definition. Without an explicit definition of (nu_max | nu_max)^1/2 in the paper, it would have to be guessed that (nu_max | nu_max)^1/2 has an analogous definition to (mu_max | mu_max)^1/2, but for ""ket"" shell pairs. If this were the case, it would imply that the ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"" would be a pair of loops, one looping over bra shell pair types, and one looping over ket shell pair types. . Again, this is simply my interpretation of the matter. Do let me know what you think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867
https://github.com/psi4/psi4/pull/2359#issuecomment-1035839142:53,Availability,redundant,redundant,53,"@JonathonMisiewicz Yeah, I realized that I was doing redundant work. I fixed this issue. Great catch, thank you for pointing that out. Please continue review :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1035839142
https://github.com/psi4/psi4/pull/2359#issuecomment-1035839142:53,Safety,redund,redundant,53,"@JonathonMisiewicz Yeah, I realized that I was doing redundant work. I fixed this issue. Great catch, thank you for pointing that out. Please continue review :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1035839142
https://github.com/psi4/psi4/pull/2359#issuecomment-1043327258:5,Deployability,update,updated,5,Just updated my code with shell pair screening for P and Q.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1043327258
https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653:1498,Availability,down,down,1498,"mebody looking over the code for the first time (which is what we want). _Accordingly_, here's my proposal for how to make the code more readable. First and foremost, we abandon the Ochsenfeld pseudo-algorithm (Figure 1) as the definitive way to organize the code. We'll refer to it as appropriate, but it will not always be appropriate. The code is now divided into the following => level chunks:. => Prep Auxiliary Quantities <=; * Zeroing, Sizing, Atom Blocking all go here. => Prep Atom Pairs <=; * In my ideal world, you'd compute this at the same time as the bra-bra shell pairs below, but getting that to work would require that atom_pairs be an ordered_set. There's not much gain for it. => Prep Bra-Bra Shell Pairs <=; * What is currently, ""Store shell pairs that are significant by Schwarz estimate"". => Prep Bra-Ket Shell Pairs <=; * This is ""Pre-ordering and Pre-selection to find significant elements in Puv"" and includes both shell ceiling computation and computing the kets. => Integral Formation Loop <=; * Note that this is the one section that doesn't start with ""Prep"". That's a clue that everything previous to this was for the integral formation loop. The next code chunks down are: build intermediate buffers, form the minilists, compute to K buffers, write to K (stripe out), and then finalize. Refer to the Ochsenfeld algorithm for the minilist part, but I think that's the only part where Ochsenfeld is worth mentioning. _______________________________________________. How does that all sound to you? I know this is asking you to undo a lot of the changes I requested earlier, but I think this will make the code much easier to read for those who haven't been poring over the Ochsenfeld paper. If it sounds good, then please update the comments accordingly (I don't think we'll actually need code changes for this), and let me know when it's ready for another look. And of course, if you don't like the idea, we can talk this out. As we've seen already, I can make mistakes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653
https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653:2055,Deployability,update,update,2055,"mebody looking over the code for the first time (which is what we want). _Accordingly_, here's my proposal for how to make the code more readable. First and foremost, we abandon the Ochsenfeld pseudo-algorithm (Figure 1) as the definitive way to organize the code. We'll refer to it as appropriate, but it will not always be appropriate. The code is now divided into the following => level chunks:. => Prep Auxiliary Quantities <=; * Zeroing, Sizing, Atom Blocking all go here. => Prep Atom Pairs <=; * In my ideal world, you'd compute this at the same time as the bra-bra shell pairs below, but getting that to work would require that atom_pairs be an ordered_set. There's not much gain for it. => Prep Bra-Bra Shell Pairs <=; * What is currently, ""Store shell pairs that are significant by Schwarz estimate"". => Prep Bra-Ket Shell Pairs <=; * This is ""Pre-ordering and Pre-selection to find significant elements in Puv"" and includes both shell ceiling computation and computing the kets. => Integral Formation Loop <=; * Note that this is the one section that doesn't start with ""Prep"". That's a clue that everything previous to this was for the integral formation loop. The next code chunks down are: build intermediate buffers, form the minilists, compute to K buffers, write to K (stripe out), and then finalize. Refer to the Ochsenfeld algorithm for the minilist part, but I think that's the only part where Ochsenfeld is worth mentioning. _______________________________________________. How does that all sound to you? I know this is asking you to undo a lot of the changes I requested earlier, but I think this will make the code much easier to read for those who haven't been poring over the Ochsenfeld paper. If it sounds good, then please update the comments accordingly (I don't think we'll actually need code changes for this), and let me know when it's ready for another look. And of course, if you don't like the idea, we can talk this out. As we've seen already, I can make mistakes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653
https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653:1860,Usability,undo,undo,1860,"mebody looking over the code for the first time (which is what we want). _Accordingly_, here's my proposal for how to make the code more readable. First and foremost, we abandon the Ochsenfeld pseudo-algorithm (Figure 1) as the definitive way to organize the code. We'll refer to it as appropriate, but it will not always be appropriate. The code is now divided into the following => level chunks:. => Prep Auxiliary Quantities <=; * Zeroing, Sizing, Atom Blocking all go here. => Prep Atom Pairs <=; * In my ideal world, you'd compute this at the same time as the bra-bra shell pairs below, but getting that to work would require that atom_pairs be an ordered_set. There's not much gain for it. => Prep Bra-Bra Shell Pairs <=; * What is currently, ""Store shell pairs that are significant by Schwarz estimate"". => Prep Bra-Ket Shell Pairs <=; * This is ""Pre-ordering and Pre-selection to find significant elements in Puv"" and includes both shell ceiling computation and computing the kets. => Integral Formation Loop <=; * Note that this is the one section that doesn't start with ""Prep"". That's a clue that everything previous to this was for the integral formation loop. The next code chunks down are: build intermediate buffers, form the minilists, compute to K buffers, write to K (stripe out), and then finalize. Refer to the Ochsenfeld algorithm for the minilist part, but I think that's the only part where Ochsenfeld is worth mentioning. _______________________________________________. How does that all sound to you? I know this is asking you to undo a lot of the changes I requested earlier, but I think this will make the code much easier to read for those who haven't been poring over the Ochsenfeld paper. If it sounds good, then please update the comments accordingly (I don't think we'll actually need code changes for this), and let me know when it's ready for another look. And of course, if you don't like the idea, we can talk this out. As we've seen already, I can make mistakes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653
https://github.com/psi4/psi4/pull/2359#issuecomment-1046162248:1583,Availability,down,down,1583,"_, here's my proposal for how to make the code more readable.; > ; > First and foremost, we abandon the Ochsenfeld pseudo-algorithm (Figure 1) as the definitive way to organize the code. We'll refer to it as appropriate, but it will not always be appropriate.; > ; > The code is now divided into the following => level chunks:; > ; > => Prep Auxiliary Quantities <=; > ; > * Zeroing, Sizing, Atom Blocking all go here; > ; > => Prep Atom Pairs <=; > ; > * In my ideal world, you'd compute this at the same time as the bra-bra shell pairs below, but getting that to work would require that atom_pairs be an ordered_set. There's not much gain for it.; > ; > => Prep Bra-Bra Shell Pairs <=; > ; > * What is currently, ""Store shell pairs that are significant by Schwarz estimate""; > ; > => Prep Bra-Ket Shell Pairs <=; > ; > * This is ""Pre-ordering and Pre-selection to find significant elements in Puv"" and includes both shell ceiling computation and computing the kets.; > ; > => Integral Formation Loop <=; > ; > * Note that this is the one section that doesn't start with ""Prep"". That's a clue that everything previous to this was for the integral formation loop. The next code chunks down are: build intermediate buffers, form the minilists, compute to K buffers, write to K (stripe out), and then finalize. Refer to the Ochsenfeld algorithm for the minilist part, but I think that's the only part where Ochsenfeld is worth mentioning.; > ; > How does that all sound to you? I know this is asking you to undo a lot of the changes I requested earlier, but I think this will make the code much easier to read for those who haven't been poring over the Ochsenfeld paper. If it sounds good, then please update the comments accordingly (I don't think we'll actually need code changes for this), and let me know when it's ready for another look.; > ; > And of course, if you don't like the idea, we can talk this out. As we've seen already, I can make mistakes. Made the changes. Please take another look.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1046162248
https://github.com/psi4/psi4/pull/2359#issuecomment-1046162248:2098,Deployability,update,update,2098,"_, here's my proposal for how to make the code more readable.; > ; > First and foremost, we abandon the Ochsenfeld pseudo-algorithm (Figure 1) as the definitive way to organize the code. We'll refer to it as appropriate, but it will not always be appropriate.; > ; > The code is now divided into the following => level chunks:; > ; > => Prep Auxiliary Quantities <=; > ; > * Zeroing, Sizing, Atom Blocking all go here; > ; > => Prep Atom Pairs <=; > ; > * In my ideal world, you'd compute this at the same time as the bra-bra shell pairs below, but getting that to work would require that atom_pairs be an ordered_set. There's not much gain for it.; > ; > => Prep Bra-Bra Shell Pairs <=; > ; > * What is currently, ""Store shell pairs that are significant by Schwarz estimate""; > ; > => Prep Bra-Ket Shell Pairs <=; > ; > * This is ""Pre-ordering and Pre-selection to find significant elements in Puv"" and includes both shell ceiling computation and computing the kets.; > ; > => Integral Formation Loop <=; > ; > * Note that this is the one section that doesn't start with ""Prep"". That's a clue that everything previous to this was for the integral formation loop. The next code chunks down are: build intermediate buffers, form the minilists, compute to K buffers, write to K (stripe out), and then finalize. Refer to the Ochsenfeld algorithm for the minilist part, but I think that's the only part where Ochsenfeld is worth mentioning.; > ; > How does that all sound to you? I know this is asking you to undo a lot of the changes I requested earlier, but I think this will make the code much easier to read for those who haven't been poring over the Ochsenfeld paper. If it sounds good, then please update the comments accordingly (I don't think we'll actually need code changes for this), and let me know when it's ready for another look.; > ; > And of course, if you don't like the idea, we can talk this out. As we've seen already, I can make mistakes. Made the changes. Please take another look.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1046162248
https://github.com/psi4/psi4/pull/2359#issuecomment-1046162248:1903,Usability,undo,undo,1903,"_, here's my proposal for how to make the code more readable.; > ; > First and foremost, we abandon the Ochsenfeld pseudo-algorithm (Figure 1) as the definitive way to organize the code. We'll refer to it as appropriate, but it will not always be appropriate.; > ; > The code is now divided into the following => level chunks:; > ; > => Prep Auxiliary Quantities <=; > ; > * Zeroing, Sizing, Atom Blocking all go here; > ; > => Prep Atom Pairs <=; > ; > * In my ideal world, you'd compute this at the same time as the bra-bra shell pairs below, but getting that to work would require that atom_pairs be an ordered_set. There's not much gain for it.; > ; > => Prep Bra-Bra Shell Pairs <=; > ; > * What is currently, ""Store shell pairs that are significant by Schwarz estimate""; > ; > => Prep Bra-Ket Shell Pairs <=; > ; > * This is ""Pre-ordering and Pre-selection to find significant elements in Puv"" and includes both shell ceiling computation and computing the kets.; > ; > => Integral Formation Loop <=; > ; > * Note that this is the one section that doesn't start with ""Prep"". That's a clue that everything previous to this was for the integral formation loop. The next code chunks down are: build intermediate buffers, form the minilists, compute to K buffers, write to K (stripe out), and then finalize. Refer to the Ochsenfeld algorithm for the minilist part, but I think that's the only part where Ochsenfeld is worth mentioning.; > ; > How does that all sound to you? I know this is asking you to undo a lot of the changes I requested earlier, but I think this will make the code much easier to read for those who haven't been poring over the Ochsenfeld paper. If it sounds good, then please update the comments accordingly (I don't think we'll actually need code changes for this), and let me know when it's ready for another look.; > ; > And of course, if you don't like the idea, we can talk this out. As we've seen already, I can make mistakes. Made the changes. Please take another look.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1046162248
https://github.com/psi4/psi4/pull/2359#issuecomment-1046337116:111,Integrability,contract,contraction,111,"> I mostly like the PR now, but one naive question: why do we have a separate filling out of the ""intermediate contraction pointers"" and then +='ing those values to the actual J/K matrices? I understand that old code is doing this, but I want to understand why the codes are doing this. It is because writing to JK matrices inside deeply nested loops leads to frequent thread collisions, which can be offset by using the `#pragma omp atomic` directive. However, using `#pragma omp atomic` inside deep loops is ill-advised, since that directive hinders parallel efficiency. The solution to this problem is to give each thread its own temporary buffer to write to, and then flush those buffers into the actual JK matrices later on, in a shallower nested loop, with `#pragma omp atomic`. Hope this helps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1046337116
https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:824,Availability,down,downloading,824,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574
https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:95,Deployability,install,installed,95,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574
https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:114,Deployability,configurat,configuration,114,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574
https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:210,Deployability,update,updates,210,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574
https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:351,Deployability,update,update,351,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574
https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:411,Deployability,patch,patch-,411,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574
https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:678,Deployability,deploy,deploy-preview,678,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574
https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:423,Integrability,synchroniz,synchronize,423,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574
https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:114,Modifiability,config,configuration,114,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574
https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:341,Safety,avoid,avoid,341,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574
https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:251,Testability,test,tests,251,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574
https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:318,Availability,down,downloading,318,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469
https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:224,Deployability,update,updated,224,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469
https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:466,Safety,avoid,avoid,466,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469
https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:675,Security,checksum,checksum,675,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469
https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:70,Testability,test,tests,70,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469
https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:575,Testability,test,test,575,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469
https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:630,Testability,test,tests,630,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469
https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:29,Usability,simpl,simple,29,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469
https://github.com/psi4/psi4/pull/2364#issuecomment-981993088:875,Availability,down,download,875,"I don't understand what Peter means by ""separate tests from docs"". I suspect the word ""tests"" should be ""samples,"" and I have no concrete idea as to how this PR combines them. My best guess is have ""a build of the documentation target"" not be what re-generates `samples`. I strongly disagree with removing git command line instructions. They will work in 99% of cases, and not following these instructions could cause merge conflicts that will take more effort from core devs to shepherd new devs through. For the sample regeneration section: Give examples of why changes might not be okay. Move the bullet point explaining the point of the auto-commit up a level. For the documentation section: I don't understand the point of the first bullet point. Explain why an edit to this branch might be needed. Explain the difference between deploy-preview and the `sphinxman-html` download. Make clear that editing the PR branch is also needed for the `sphinxman-html` download.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088
https://github.com/psi4/psi4/pull/2364#issuecomment-981993088:963,Availability,down,download,963,"I don't understand what Peter means by ""separate tests from docs"". I suspect the word ""tests"" should be ""samples,"" and I have no concrete idea as to how this PR combines them. My best guess is have ""a build of the documentation target"" not be what re-generates `samples`. I strongly disagree with removing git command line instructions. They will work in 99% of cases, and not following these instructions could cause merge conflicts that will take more effort from core devs to shepherd new devs through. For the sample regeneration section: Give examples of why changes might not be okay. Move the bullet point explaining the point of the auto-commit up a level. For the documentation section: I don't understand the point of the first bullet point. Explain why an edit to this branch might be needed. Explain the difference between deploy-preview and the `sphinxman-html` download. Make clear that editing the PR branch is also needed for the `sphinxman-html` download.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088
https://github.com/psi4/psi4/pull/2364#issuecomment-981993088:835,Deployability,deploy,deploy-preview,835,"I don't understand what Peter means by ""separate tests from docs"". I suspect the word ""tests"" should be ""samples,"" and I have no concrete idea as to how this PR combines them. My best guess is have ""a build of the documentation target"" not be what re-generates `samples`. I strongly disagree with removing git command line instructions. They will work in 99% of cases, and not following these instructions could cause merge conflicts that will take more effort from core devs to shepherd new devs through. For the sample regeneration section: Give examples of why changes might not be okay. Move the bullet point explaining the point of the auto-commit up a level. For the documentation section: I don't understand the point of the first bullet point. Explain why an edit to this branch might be needed. Explain the difference between deploy-preview and the `sphinxman-html` download. Make clear that editing the PR branch is also needed for the `sphinxman-html` download.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088
https://github.com/psi4/psi4/pull/2364#issuecomment-981993088:49,Testability,test,tests,49,"I don't understand what Peter means by ""separate tests from docs"". I suspect the word ""tests"" should be ""samples,"" and I have no concrete idea as to how this PR combines them. My best guess is have ""a build of the documentation target"" not be what re-generates `samples`. I strongly disagree with removing git command line instructions. They will work in 99% of cases, and not following these instructions could cause merge conflicts that will take more effort from core devs to shepherd new devs through. For the sample regeneration section: Give examples of why changes might not be okay. Move the bullet point explaining the point of the auto-commit up a level. For the documentation section: I don't understand the point of the first bullet point. Explain why an edit to this branch might be needed. Explain the difference between deploy-preview and the `sphinxman-html` download. Make clear that editing the PR branch is also needed for the `sphinxman-html` download.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088
https://github.com/psi4/psi4/pull/2364#issuecomment-981993088:87,Testability,test,tests,87,"I don't understand what Peter means by ""separate tests from docs"". I suspect the word ""tests"" should be ""samples,"" and I have no concrete idea as to how this PR combines them. My best guess is have ""a build of the documentation target"" not be what re-generates `samples`. I strongly disagree with removing git command line instructions. They will work in 99% of cases, and not following these instructions could cause merge conflicts that will take more effort from core devs to shepherd new devs through. For the sample regeneration section: Give examples of why changes might not be okay. Move the bullet point explaining the point of the auto-commit up a level. For the documentation section: I don't understand the point of the first bullet point. Explain why an edit to this branch might be needed. Explain the difference between deploy-preview and the `sphinxman-html` download. Make clear that editing the PR branch is also needed for the `sphinxman-html` download.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088
https://github.com/psi4/psi4/pull/2364#issuecomment-981993088:890,Usability,clear,clear,890,"I don't understand what Peter means by ""separate tests from docs"". I suspect the word ""tests"" should be ""samples,"" and I have no concrete idea as to how this PR combines them. My best guess is have ""a build of the documentation target"" not be what re-generates `samples`. I strongly disagree with removing git command line instructions. They will work in 99% of cases, and not following these instructions could cause merge conflicts that will take more effort from core devs to shepherd new devs through. For the sample regeneration section: Give examples of why changes might not be okay. Move the bullet point explaining the point of the auto-commit up a level. For the documentation section: I don't understand the point of the first bullet point. Explain why an edit to this branch might be needed. Explain the difference between deploy-preview and the `sphinxman-html` download. Make clear that editing the PR branch is also needed for the `sphinxman-html` download.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088
https://github.com/psi4/psi4/pull/2364#issuecomment-982018294:7,Integrability,message,message,7,"Lori's message is for the experienced developer while Peter's is for the beginner.; I'd also aim more for the beginner, but include the git commands for the reasons Jonathon mentioned.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-982018294
https://github.com/psi4/psi4/pull/2364#issuecomment-982038711:728,Integrability,message,message,728,"* I suspect that what Peter means by separate tests and docs is to issue two comments to the PR? I'm worried ppl will read the last and overlook the former. ; * Sounds like I need to make clearer that the only choice for the samples/ commit is now or later. There are no valid reasons to reject, but it you're going to be editing tests a lot, you might not want a dozen automated commits or to have your remote tampered with while local is in a vulnerable state.; * I'm with keeping the git commands as I suspect many ppl are nervous about `--rebase` and `--force` and need that reassurance. I do wish I could convey that you're done with local, no need for either path. Thanks for the comments! I'll do another round of commit-message tweaking. Eventually we can add linters by the same mechanism, so I think it pays to get clear communication and git sync habits established here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-982038711
https://github.com/psi4/psi4/pull/2364#issuecomment-982038711:46,Testability,test,tests,46,"* I suspect that what Peter means by separate tests and docs is to issue two comments to the PR? I'm worried ppl will read the last and overlook the former. ; * Sounds like I need to make clearer that the only choice for the samples/ commit is now or later. There are no valid reasons to reject, but it you're going to be editing tests a lot, you might not want a dozen automated commits or to have your remote tampered with while local is in a vulnerable state.; * I'm with keeping the git commands as I suspect many ppl are nervous about `--rebase` and `--force` and need that reassurance. I do wish I could convey that you're done with local, no need for either path. Thanks for the comments! I'll do another round of commit-message tweaking. Eventually we can add linters by the same mechanism, so I think it pays to get clear communication and git sync habits established here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-982038711
https://github.com/psi4/psi4/pull/2364#issuecomment-982038711:330,Testability,test,tests,330,"* I suspect that what Peter means by separate tests and docs is to issue two comments to the PR? I'm worried ppl will read the last and overlook the former. ; * Sounds like I need to make clearer that the only choice for the samples/ commit is now or later. There are no valid reasons to reject, but it you're going to be editing tests a lot, you might not want a dozen automated commits or to have your remote tampered with while local is in a vulnerable state.; * I'm with keeping the git commands as I suspect many ppl are nervous about `--rebase` and `--force` and need that reassurance. I do wish I could convey that you're done with local, no need for either path. Thanks for the comments! I'll do another round of commit-message tweaking. Eventually we can add linters by the same mechanism, so I think it pays to get clear communication and git sync habits established here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-982038711
https://github.com/psi4/psi4/pull/2364#issuecomment-982038711:188,Usability,clear,clearer,188,"* I suspect that what Peter means by separate tests and docs is to issue two comments to the PR? I'm worried ppl will read the last and overlook the former. ; * Sounds like I need to make clearer that the only choice for the samples/ commit is now or later. There are no valid reasons to reject, but it you're going to be editing tests a lot, you might not want a dozen automated commits or to have your remote tampered with while local is in a vulnerable state.; * I'm with keeping the git commands as I suspect many ppl are nervous about `--rebase` and `--force` and need that reassurance. I do wish I could convey that you're done with local, no need for either path. Thanks for the comments! I'll do another round of commit-message tweaking. Eventually we can add linters by the same mechanism, so I think it pays to get clear communication and git sync habits established here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-982038711
https://github.com/psi4/psi4/pull/2364#issuecomment-982038711:825,Usability,clear,clear,825,"* I suspect that what Peter means by separate tests and docs is to issue two comments to the PR? I'm worried ppl will read the last and overlook the former. ; * Sounds like I need to make clearer that the only choice for the samples/ commit is now or later. There are no valid reasons to reject, but it you're going to be editing tests a lot, you might not want a dozen automated commits or to have your remote tampered with while local is in a vulnerable state.; * I'm with keeping the git commands as I suspect many ppl are nervous about `--rebase` and `--force` and need that reassurance. I do wish I could convey that you're done with local, no need for either path. Thanks for the comments! I'll do another round of commit-message tweaking. Eventually we can add linters by the same mechanism, so I think it pays to get clear communication and git sync habits established here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-982038711
https://github.com/psi4/psi4/pull/2364#issuecomment-1809178568:214,Deployability,update,updates-of-samples-to-your-PR,214,The does-your-PR-break-the-docs and archive-a-tarball-of-your-PRs-docs-for-you-to-check-offline aspects of this PR are long fulfilled. The let-netlify-build-you-a-website-preview-of-your-PRs-docs and have-bot-push-updates-of-samples-to-your-PR aspects are complicated by security and by people having to understand why they can't simple (not force) push to their own PR branches. I don't think these latter aspects are worth the hassle.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-1809178568
https://github.com/psi4/psi4/pull/2364#issuecomment-1809178568:271,Security,secur,security,271,The does-your-PR-break-the-docs and archive-a-tarball-of-your-PRs-docs-for-you-to-check-offline aspects of this PR are long fulfilled. The let-netlify-build-you-a-website-preview-of-your-PRs-docs and have-bot-push-updates-of-samples-to-your-PR aspects are complicated by security and by people having to understand why they can't simple (not force) push to their own PR branches. I don't think these latter aspects are worth the hassle.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-1809178568
https://github.com/psi4/psi4/pull/2364#issuecomment-1809178568:330,Usability,simpl,simple,330,The does-your-PR-break-the-docs and archive-a-tarball-of-your-PRs-docs-for-you-to-check-offline aspects of this PR are long fulfilled. The let-netlify-build-you-a-website-preview-of-your-PRs-docs and have-bot-push-updates-of-samples-to-your-PR aspects are complicated by security and by people having to understand why they can't simple (not force) push to their own PR branches. I don't think these latter aspects are worth the hassle.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-1809178568
https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:1052,Availability,down,downloading,1052,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131
https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:106,Deployability,install,installed,106,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131
https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:125,Deployability,configurat,configuration,125,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131
https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:227,Deployability,update,updates,227,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131
https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:401,Deployability,patch,patch-,401,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131
https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:537,Deployability,patch,patch-,537,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131
https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:584,Deployability,update,update,584,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131
https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:901,Deployability,deploy,deploy-preview,901,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131
https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:298,Integrability,synchroniz,synchronize,298,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131
https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:443,Integrability,synchroniz,synchronize,443,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131
https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:125,Modifiability,config,configuration,125,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131
https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:574,Safety,avoid,avoid,574,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131
https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:268,Testability,test,tests,268,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131
https://github.com/psi4/psi4/pull/2369#issuecomment-986822136:150,Availability,redundant,redundant,150,"Code updated to use a C++ class as a wrapper to the Python interface. The result is _very _ similar to the old interface, but I was able to eliminate redundant arguments. There's more ripping out of old `libdiis` tech that I could do (`diisentry.cc` is now unused), but I'll wait to hear that the current interface looks good before gutting any more code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136
https://github.com/psi4/psi4/pull/2369#issuecomment-986822136:5,Deployability,update,updated,5,"Code updated to use a C++ class as a wrapper to the Python interface. The result is _very _ similar to the old interface, but I was able to eliminate redundant arguments. There's more ripping out of old `libdiis` tech that I could do (`diisentry.cc` is now unused), but I'll wait to hear that the current interface looks good before gutting any more code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136
https://github.com/psi4/psi4/pull/2369#issuecomment-986822136:37,Integrability,wrap,wrapper,37,"Code updated to use a C++ class as a wrapper to the Python interface. The result is _very _ similar to the old interface, but I was able to eliminate redundant arguments. There's more ripping out of old `libdiis` tech that I could do (`diisentry.cc` is now unused), but I'll wait to hear that the current interface looks good before gutting any more code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136
https://github.com/psi4/psi4/pull/2369#issuecomment-986822136:59,Integrability,interface,interface,59,"Code updated to use a C++ class as a wrapper to the Python interface. The result is _very _ similar to the old interface, but I was able to eliminate redundant arguments. There's more ripping out of old `libdiis` tech that I could do (`diisentry.cc` is now unused), but I'll wait to hear that the current interface looks good before gutting any more code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136
https://github.com/psi4/psi4/pull/2369#issuecomment-986822136:111,Integrability,interface,interface,111,"Code updated to use a C++ class as a wrapper to the Python interface. The result is _very _ similar to the old interface, but I was able to eliminate redundant arguments. There's more ripping out of old `libdiis` tech that I could do (`diisentry.cc` is now unused), but I'll wait to hear that the current interface looks good before gutting any more code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136
https://github.com/psi4/psi4/pull/2369#issuecomment-986822136:305,Integrability,interface,interface,305,"Code updated to use a C++ class as a wrapper to the Python interface. The result is _very _ similar to the old interface, but I was able to eliminate redundant arguments. There's more ripping out of old `libdiis` tech that I could do (`diisentry.cc` is now unused), but I'll wait to hear that the current interface looks good before gutting any more code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136
https://github.com/psi4/psi4/pull/2369#issuecomment-986822136:150,Safety,redund,redundant,150,"Code updated to use a C++ class as a wrapper to the Python interface. The result is _very _ similar to the old interface, but I was able to eliminate redundant arguments. There's more ripping out of old `libdiis` tech that I could do (`diisentry.cc` is now unused), but I'll wait to hear that the current interface looks good before gutting any more code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136
https://github.com/psi4/psi4/pull/2369#issuecomment-993839945:473,Performance,perform,performance,473,"I've run some timing tests. First, with DLPNO-MP2 on 1644 basis functions, the same job in triplicate:. | Before PR | After PR |; | --- | --- |; | 2:43:56.48 | 2:44:54.51 |; | 2:44:17.27 | 2:44:03.06 |; | 2:45:08.16 | 2:44:24.98 |. And now DF-DCT with 384 basis functions, this time in duplicate:; | Before PR | After PR |; | --- | --- |; | 1:03:58.53 | 1:03:52.70|; | 1:03:49.19 | 1:03:48.30 |. I can run additional tests if requested, but the PR has negligible impact on performance time, as expected. The PR is ready for more serious review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-993839945
https://github.com/psi4/psi4/pull/2369#issuecomment-993839945:21,Testability,test,tests,21,"I've run some timing tests. First, with DLPNO-MP2 on 1644 basis functions, the same job in triplicate:. | Before PR | After PR |; | --- | --- |; | 2:43:56.48 | 2:44:54.51 |; | 2:44:17.27 | 2:44:03.06 |; | 2:45:08.16 | 2:44:24.98 |. And now DF-DCT with 384 basis functions, this time in duplicate:; | Before PR | After PR |; | --- | --- |; | 1:03:58.53 | 1:03:52.70|; | 1:03:49.19 | 1:03:48.30 |. I can run additional tests if requested, but the PR has negligible impact on performance time, as expected. The PR is ready for more serious review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-993839945
https://github.com/psi4/psi4/pull/2369#issuecomment-993839945:417,Testability,test,tests,417,"I've run some timing tests. First, with DLPNO-MP2 on 1644 basis functions, the same job in triplicate:. | Before PR | After PR |; | --- | --- |; | 2:43:56.48 | 2:44:54.51 |; | 2:44:17.27 | 2:44:03.06 |; | 2:45:08.16 | 2:44:24.98 |. And now DF-DCT with 384 basis functions, this time in duplicate:; | Before PR | After PR |; | --- | --- |; | 1:03:58.53 | 1:03:52.70|; | 1:03:49.19 | 1:03:48.30 |. I can run additional tests if requested, but the PR has negligible impact on performance time, as expected. The PR is ready for more serious review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-993839945
https://github.com/psi4/psi4/pull/2369#issuecomment-994862260:433,Energy Efficiency,allocate,allocate,433,"After memory profiling, I've discovered that this PR _improves_ memory efficiency. For my 384 basis function DF-DCT system, memory requirements plummet from 14.0 GB to 7.8 GB. I've run some tests on a single benzene system instead of a two benzene system, and I understand the behavior:. This isn't due to shifting to Python, but shifting how we clear some large arrays. The C-DIIS code uses `clear()`, which [doesn't necessarily de-allocate the memory.](https://www.cplusplus.com/reference/vector/vector/clear/) PyDIIS makes that not our problem. On taking the existing C-side code and forcibly de-allocating the memory, I observe a memory profile indistinguishable from the PyDIIS one. The large change in memory is most likely because C-DIIS was keeping the allocation space for multiple T2 tensors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-994862260
https://github.com/psi4/psi4/pull/2369#issuecomment-994862260:190,Testability,test,tests,190,"After memory profiling, I've discovered that this PR _improves_ memory efficiency. For my 384 basis function DF-DCT system, memory requirements plummet from 14.0 GB to 7.8 GB. I've run some tests on a single benzene system instead of a two benzene system, and I understand the behavior:. This isn't due to shifting to Python, but shifting how we clear some large arrays. The C-DIIS code uses `clear()`, which [doesn't necessarily de-allocate the memory.](https://www.cplusplus.com/reference/vector/vector/clear/) PyDIIS makes that not our problem. On taking the existing C-side code and forcibly de-allocating the memory, I observe a memory profile indistinguishable from the PyDIIS one. The large change in memory is most likely because C-DIIS was keeping the allocation space for multiple T2 tensors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-994862260
https://github.com/psi4/psi4/pull/2369#issuecomment-994862260:346,Usability,clear,clear,346,"After memory profiling, I've discovered that this PR _improves_ memory efficiency. For my 384 basis function DF-DCT system, memory requirements plummet from 14.0 GB to 7.8 GB. I've run some tests on a single benzene system instead of a two benzene system, and I understand the behavior:. This isn't due to shifting to Python, but shifting how we clear some large arrays. The C-DIIS code uses `clear()`, which [doesn't necessarily de-allocate the memory.](https://www.cplusplus.com/reference/vector/vector/clear/) PyDIIS makes that not our problem. On taking the existing C-side code and forcibly de-allocating the memory, I observe a memory profile indistinguishable from the PyDIIS one. The large change in memory is most likely because C-DIIS was keeping the allocation space for multiple T2 tensors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-994862260
https://github.com/psi4/psi4/pull/2369#issuecomment-994862260:393,Usability,clear,clear,393,"After memory profiling, I've discovered that this PR _improves_ memory efficiency. For my 384 basis function DF-DCT system, memory requirements plummet from 14.0 GB to 7.8 GB. I've run some tests on a single benzene system instead of a two benzene system, and I understand the behavior:. This isn't due to shifting to Python, but shifting how we clear some large arrays. The C-DIIS code uses `clear()`, which [doesn't necessarily de-allocate the memory.](https://www.cplusplus.com/reference/vector/vector/clear/) PyDIIS makes that not our problem. On taking the existing C-side code and forcibly de-allocating the memory, I observe a memory profile indistinguishable from the PyDIIS one. The large change in memory is most likely because C-DIIS was keeping the allocation space for multiple T2 tensors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-994862260
https://github.com/psi4/psi4/pull/2369#issuecomment-994862260:505,Usability,clear,clear,505,"After memory profiling, I've discovered that this PR _improves_ memory efficiency. For my 384 basis function DF-DCT system, memory requirements plummet from 14.0 GB to 7.8 GB. I've run some tests on a single benzene system instead of a two benzene system, and I understand the behavior:. This isn't due to shifting to Python, but shifting how we clear some large arrays. The C-DIIS code uses `clear()`, which [doesn't necessarily de-allocate the memory.](https://www.cplusplus.com/reference/vector/vector/clear/) PyDIIS makes that not our problem. On taking the existing C-side code and forcibly de-allocating the memory, I observe a memory profile indistinguishable from the PyDIIS one. The large change in memory is most likely because C-DIIS was keeping the allocation space for multiple T2 tensors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-994862260
https://github.com/psi4/psi4/issues/2371#issuecomment-986873411:70,Testability,test,testing,70,"Please elaborate on ""DFT gets it wrong"". I don't see the point in Psi testing how accurate DFT functionals are, relative to FCI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986873411
https://github.com/psi4/psi4/issues/2371#issuecomment-986969900:72,Testability,test,testing,72,"> Please elaborate on ""DFT gets it wrong"". I don't see the point in Psi testing how accurate DFT functionals are, relative to FCI. That's what makes it such a good test ;)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986969900
https://github.com/psi4/psi4/issues/2371#issuecomment-986969900:164,Testability,test,test,164,"> Please elaborate on ""DFT gets it wrong"". I don't see the point in Psi testing how accurate DFT functionals are, relative to FCI. That's what makes it such a good test ;)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986969900
https://github.com/psi4/psi4/issues/2371#issuecomment-986971402:39,Testability,test,test,39,I understand you as saying it's a good test because there is no point to it. Try explaining again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986971402
https://github.com/psi4/psi4/issues/2371#issuecomment-986977719:70,Energy Efficiency,energy,energy,70,"Are you thinking equilibrium and dissociated points along a potential energy curve for the standard testing suite? I favor a couple single points since couple dozen methods * 3 ref * E/G/H accumulates a lot of reference data. A hydrogen-only could be a good system to throw a high AM basis at to check puream, provided d&f make a material change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986977719
https://github.com/psi4/psi4/issues/2371#issuecomment-986977719:100,Testability,test,testing,100,"Are you thinking equilibrium and dissociated points along a potential energy curve for the standard testing suite? I favor a couple single points since couple dozen methods * 3 ref * E/G/H accumulates a lot of reference data. A hydrogen-only could be a good system to throw a high AM basis at to check puream, provided d&f make a material change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986977719
https://github.com/psi4/psi4/issues/2371#issuecomment-986978455:65,Integrability,depend,dependent,65,"Because it's a quick test, and the values you get out are highly dependent on the functional. Also, you get the fun edge cases of a bare proton (no electrons), and a hydrogen atom (no beta electrons).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986978455
https://github.com/psi4/psi4/issues/2371#issuecomment-986978455:21,Testability,test,test,21,"Because it's a quick test, and the values you get out are highly dependent on the functional. Also, you get the fun edge cases of a bare proton (no electrons), and a hydrogen atom (no beta electrons).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986978455
https://github.com/psi4/psi4/issues/2371#issuecomment-986991051:42,Testability,test,test-dft-benchmarks,42,"That's clearer, thank you. Given `pytests/test-dft-benchmarks.py`, I don't think that running all DFT functionals on H2+ adds much, but as long as the test is quick, I wouldn't be opposed to somebody adding it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986991051
https://github.com/psi4/psi4/issues/2371#issuecomment-986991051:151,Testability,test,test,151,"That's clearer, thank you. Given `pytests/test-dft-benchmarks.py`, I don't think that running all DFT functionals on H2+ adds much, but as long as the test is quick, I wouldn't be opposed to somebody adding it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986991051
https://github.com/psi4/psi4/issues/2371#issuecomment-986991051:7,Usability,clear,clearer,7,"That's clearer, thank you. Given `pytests/test-dft-benchmarks.py`, I don't think that running all DFT functionals on H2+ adds much, but as long as the test is quick, I wouldn't be opposed to somebody adding it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986991051
https://github.com/psi4/psi4/pull/2376#issuecomment-988060241:159,Testability,test,tests,159,"Typically one only needs a `d_convergence` of about sqrt(e_convergence), so `d_convergence 6` should be enough. You can verify by checking the output of these tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2376#issuecomment-988060241
https://github.com/psi4/psi4/pull/2376#issuecomment-988106570:5,Availability,failure,failure,5,Test failure healed after fixing an unrelated bug.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2376#issuecomment-988106570
https://github.com/psi4/psi4/pull/2376#issuecomment-988106570:0,Testability,Test,Test,0,Test failure healed after fixing an unrelated bug.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2376#issuecomment-988106570
https://github.com/psi4/psi4/pull/2378#issuecomment-988380879:12,Usability,guid,guided,12,what about `guided`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-988380879
https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:563,Deployability,Integrat,Integration,563,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297
https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:399,Energy Efficiency,schedul,schedules,399,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297
https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:563,Integrability,Integrat,Integration,563,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297
https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:200,Performance,load,load,200,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297
https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:52,Safety,avoid,avoid,52,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297
https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:14,Usability,guid,guided,14,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297
https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:134,Usability,guid,guided,134,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297
https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:259,Usability,guid,guided,259,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297
https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:487,Usability,guid,guided,487,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297
https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:859,Usability,guid,guided,859,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297
https://github.com/psi4/psi4/issues/2379#issuecomment-988891390:264,Energy Efficiency,charge,charges,264,"And with #2336 one can easily build the atomic overlap matrices, which are the only thing needed to implement generalized Pipek-Mezey of [J. Chem. Theory Comput. 10, 642 (2014)](https://doi.org/10.1021/ct401016x). All variants of generalized Pipek-Mezey (Mulliken charges, IAO charges, Becke charges) should have the share the same implementation; the only difference is how the overlap matrix is defined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2379#issuecomment-988891390
https://github.com/psi4/psi4/issues/2379#issuecomment-988891390:277,Energy Efficiency,charge,charges,277,"And with #2336 one can easily build the atomic overlap matrices, which are the only thing needed to implement generalized Pipek-Mezey of [J. Chem. Theory Comput. 10, 642 (2014)](https://doi.org/10.1021/ct401016x). All variants of generalized Pipek-Mezey (Mulliken charges, IAO charges, Becke charges) should have the share the same implementation; the only difference is how the overlap matrix is defined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2379#issuecomment-988891390
https://github.com/psi4/psi4/issues/2379#issuecomment-988891390:292,Energy Efficiency,charge,charges,292,"And with #2336 one can easily build the atomic overlap matrices, which are the only thing needed to implement generalized Pipek-Mezey of [J. Chem. Theory Comput. 10, 642 (2014)](https://doi.org/10.1021/ct401016x). All variants of generalized Pipek-Mezey (Mulliken charges, IAO charges, Becke charges) should have the share the same implementation; the only difference is how the overlap matrix is defined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2379#issuecomment-988891390
https://github.com/psi4/psi4/issues/2380#issuecomment-991694381:56,Integrability,interface,interface,56,"The authors' DM21 functional implementation has a PySCF interface, so you can already use PySCF to run calculations. Hooking it up to Psi4 will be a much bigger task, since unlike PySCF, Psi4 doesn't handle density functionals in Python...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2380#issuecomment-991694381
https://github.com/psi4/psi4/issues/2380#issuecomment-991996913:58,Integrability,interface,interface,58,"> The authors' DM21 functional implementation has a PySCF interface, so you can already use PySCF to run calculations. Indeed! Our workflows use [QCEngine](https://github.com/MolSSI/QCEngine), which does not yet support PySCF. It should be relatively straightforward to add, however---I've opened an issue at https://github.com/MolSSI/QCEngine/issues/335 to discuss this possbility. > Hooking it up to Psi4 will be a much bigger task, since unlike PySCF, Psi4 doesn't handle density functionals in Python... DM21 can be used from C++: the README describes this [here](https://github.com/deepmind/deepmind-research/tree/master/density_functional_approximation_dm21#using-dm21-from-c).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2380#issuecomment-991996913
https://github.com/psi4/psi4/pull/2384#issuecomment-997024098:925,Performance,Perform,Performing,925,"d on the flag situation. Points:. * we were getting reports at the forum that the Win conda package (built during the Azure CI) wasn't working for some machines; * a package built after switching the ENABLE_XHOST from `/arch:AVX2` to `/arch:AVX` seemed to work for all; * even before #2377, that flag wasn't active: https://dev.azure.com/psi4/psi4/_build/results?buildId=3455&view=logs&j=f31c9f97-4411-58e7-49ac-fc73f645e6b6&t=37c784ef-3eed-5b43-b403-e5baa44c3c05&l=32; ```; 2021-11-28T04:42:21.6163025Z -- The CXX compiler identification is Clang 13.0.0 with MSVC-like command-line; 2021-11-28T04:42:25.0744510Z -- Check for working C compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:25.4493255Z -- Check for working CXX compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:26.3103349Z -- Setting option ENABLE_XHOST: ON; 2021-11-28T04:42:26.6553541Z -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```; * this PR at first commit that adds `/arch:AVX` to CMAKE_CXX_FLAGS generates a bunch of the below; ```; 2021-12-16T22:33:46.0792776Z -- Build files have been written to: D:/a/1/b/build/psi4-core-prefix/src/psi4-core-build; 2021-12-16T22:33:46.0793909Z [6/9] Performing build step for 'psi4-core'; 2021-12-16T22:33:50.7743244Z [1/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_zero.cc.obj; 2021-12-16T22:33:50.8074886Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8077002Z [2/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_wrt.cc.obj; 2021-12-16T22:33:50.8080336Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8416165Z [3/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_init.cc.obj; ```. So perhaps the original #2292 fix was a dud, and we've just gotten lucky about bein",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997024098
https://github.com/psi4/psi4/pull/2384#issuecomment-997024098:1258,Performance,Perform,Performing,1258,"achines; * a package built after switching the ENABLE_XHOST from `/arch:AVX2` to `/arch:AVX` seemed to work for all; * even before #2377, that flag wasn't active: https://dev.azure.com/psi4/psi4/_build/results?buildId=3455&view=logs&j=f31c9f97-4411-58e7-49ac-fc73f645e6b6&t=37c784ef-3eed-5b43-b403-e5baa44c3c05&l=32; ```; 2021-11-28T04:42:21.6163025Z -- The CXX compiler identification is Clang 13.0.0 with MSVC-like command-line; 2021-11-28T04:42:25.0744510Z -- Check for working C compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:25.4493255Z -- Check for working CXX compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:26.3103349Z -- Setting option ENABLE_XHOST: ON; 2021-11-28T04:42:26.6553541Z -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```; * this PR at first commit that adds `/arch:AVX` to CMAKE_CXX_FLAGS generates a bunch of the below; ```; 2021-12-16T22:33:46.0792776Z -- Build files have been written to: D:/a/1/b/build/psi4-core-prefix/src/psi4-core-build; 2021-12-16T22:33:46.0793909Z [6/9] Performing build step for 'psi4-core'; 2021-12-16T22:33:50.7743244Z [1/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_zero.cc.obj; 2021-12-16T22:33:50.8074886Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8077002Z [2/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_wrt.cc.obj; 2021-12-16T22:33:50.8080336Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8416165Z [3/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_init.cc.obj; ```. So perhaps the original #2292 fix was a dud, and we've just gotten lucky about being built on older AVX nodes where march=native does the trick. (We may have been helped for this by using an old build env that they're about to retire.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997024098
https://github.com/psi4/psi4/pull/2384#issuecomment-997024098:399,Testability,log,logs,399,"I'm rather confused on the flag situation. Points:. * we were getting reports at the forum that the Win conda package (built during the Azure CI) wasn't working for some machines; * a package built after switching the ENABLE_XHOST from `/arch:AVX2` to `/arch:AVX` seemed to work for all; * even before #2377, that flag wasn't active: https://dev.azure.com/psi4/psi4/_build/results?buildId=3455&view=logs&j=f31c9f97-4411-58e7-49ac-fc73f645e6b6&t=37c784ef-3eed-5b43-b403-e5baa44c3c05&l=32; ```; 2021-11-28T04:42:21.6163025Z -- The CXX compiler identification is Clang 13.0.0 with MSVC-like command-line; 2021-11-28T04:42:25.0744510Z -- Check for working C compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:25.4493255Z -- Check for working CXX compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:26.3103349Z -- Setting option ENABLE_XHOST: ON; 2021-11-28T04:42:26.6553541Z -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```; * this PR at first commit that adds `/arch:AVX` to CMAKE_CXX_FLAGS generates a bunch of the below; ```; 2021-12-16T22:33:46.0792776Z -- Build files have been written to: D:/a/1/b/build/psi4-core-prefix/src/psi4-core-build; 2021-12-16T22:33:46.0793909Z [6/9] Performing build step for 'psi4-core'; 2021-12-16T22:33:50.7743244Z [1/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_zero.cc.obj; 2021-12-16T22:33:50.8074886Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8077002Z [2/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_wrt.cc.obj; 2021-12-16T22:33:50.8080336Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8416165Z [3/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_init.cc.obj; ```. So perhaps the original #2292 fix was a dud, and we've just gotte",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997024098
https://github.com/psi4/psi4/pull/2384#issuecomment-997024098:936,Testability,Test,Test,936,"d on the flag situation. Points:. * we were getting reports at the forum that the Win conda package (built during the Azure CI) wasn't working for some machines; * a package built after switching the ENABLE_XHOST from `/arch:AVX2` to `/arch:AVX` seemed to work for all; * even before #2377, that flag wasn't active: https://dev.azure.com/psi4/psi4/_build/results?buildId=3455&view=logs&j=f31c9f97-4411-58e7-49ac-fc73f645e6b6&t=37c784ef-3eed-5b43-b403-e5baa44c3c05&l=32; ```; 2021-11-28T04:42:21.6163025Z -- The CXX compiler identification is Clang 13.0.0 with MSVC-like command-line; 2021-11-28T04:42:25.0744510Z -- Check for working C compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:25.4493255Z -- Check for working CXX compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:26.3103349Z -- Setting option ENABLE_XHOST: ON; 2021-11-28T04:42:26.6553541Z -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```; * this PR at first commit that adds `/arch:AVX` to CMAKE_CXX_FLAGS generates a bunch of the below; ```; 2021-12-16T22:33:46.0792776Z -- Build files have been written to: D:/a/1/b/build/psi4-core-prefix/src/psi4-core-build; 2021-12-16T22:33:46.0793909Z [6/9] Performing build step for 'psi4-core'; 2021-12-16T22:33:50.7743244Z [1/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_zero.cc.obj; 2021-12-16T22:33:50.8074886Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8077002Z [2/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_wrt.cc.obj; 2021-12-16T22:33:50.8080336Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8416165Z [3/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_init.cc.obj; ```. So perhaps the original #2292 fix was a dud, and we've just gotten lucky about bein",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997024098
https://github.com/psi4/psi4/pull/2384#issuecomment-997100036:2494,Modifiability,variab,variable,2494,"ch is fine (https://clang.llvm.org/docs/UsersManual.html#clang-cl).; > Yes, indeed. The code in clang/lib/Driver/ToolChains/Arch/X86.cpp makes that –march is always parsed, leaving out /arch unused, no matter in which order they appear.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX -march=native /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract222.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract222.cc; clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; ```; * On to properly forcing Win to build for AVX:; * (1) recognize the compiler flavor. apparently https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.html is the way to discriminate between clang (gnu-imitating) and clang-cl (msvc-imitating), so I've expanded the ENABLE_XHOST logic. I also switched out STREQUAL for MATCHES, @susilehtola, as it seems safer given the diversity (https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html).; * (2) part (1) alone doesn't help because hand-specified `CMAKE_CXX_FLAGS=/arch=AVX` gets _appended_ by the ENABLE_XHOST-resolved flag, so the hand-specified AVX gets clobbered by AVX2 again. the PR now turns off ENABLE_XHOST and passes AVX. The sensible command line is below.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036
https://github.com/psi4/psi4/pull/2384#issuecomment-997100036:2805,Modifiability,variab,variable,2805,"d, no matter in which order they appear.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX -march=native /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract222.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract222.cc; clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; ```; * On to properly forcing Win to build for AVX:; * (1) recognize the compiler flavor. apparently https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.html is the way to discriminate between clang (gnu-imitating) and clang-cl (msvc-imitating), so I've expanded the ENABLE_XHOST logic. I also switched out STREQUAL for MATCHES, @susilehtola, as it seems safer given the diversity (https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html).; * (2) part (1) alone doesn't help because hand-specified `CMAKE_CXX_FLAGS=/arch=AVX` gets _appended_ by the ENABLE_XHOST-resolved flag, so the hand-specified AVX gets clobbered by AVX2 again. the PR now turns off ENABLE_XHOST and passes AVX. The sensible command line is below.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract444.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract444.cc; ```. I should probably turn off verbose compile in general, then this PR is rtg.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036
https://github.com/psi4/psi4/pull/2384#issuecomment-997100036:583,Performance,optimiz,optimized,583,"Ok, I think I understand things better now.; * pre #2377, the windows build seemed to be getting `-march=native`. clang-cl does seem to understand `march` (https://reviews.llvm.org/D51806) so it accepts the flag. But it probably doesn't understand `native` (https://lists.llvm.org/pipermail/cfe-commits/Week-of-Mon-20150629/132028.html). Also see quote below from https://stackoverflow.com/a/62493711 . So we were probably getting lucky about building on AVX and supposedly fixing the Win conda binary compatibility problem. > And nothing in MSVC has any support for making binaries optimized to run on the computer you build them on. That makes sense, it's designed for a closed-source binary-distribution model of software development. * nevertheless, from an independent compile someone reported on the forum Win compatibility thread, it does seem that arch AVX, not AVX2, is the solution.; * enter #2377 that probably only changed the situation to me reading the code, not at all to the build product since the `ENABLE_XHOST` was picking up `march=native`.; * me adding `-DCMAKE_CXX_FLAGS=/arch:AVX` in the first commit of this PR led to the unused arg warning below (after also turning on printing for Ninja). I now believe the warning was triggered because clang-cl recognizes march (quote below from link above), doesn't act on it, but does drop arch. At one point, I thought the unused flag was because it was presented in the wrong format, but a section in the clang-cl manual gives a list, and arch is fine (https://clang.llvm.org/docs/UsersManual.html#clang-cl).; > Yes, indeed. The code in clang/lib/Driver/ToolChains/Arch/X86.cpp makes that –march is always parsed, leaving out /arch unused, no matter in which order they appear.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036
https://github.com/psi4/psi4/pull/2384#issuecomment-997100036:2742,Safety,safe,safer,2742,"d, no matter in which order they appear.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX -march=native /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract222.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract222.cc; clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; ```; * On to properly forcing Win to build for AVX:; * (1) recognize the compiler flavor. apparently https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.html is the way to discriminate between clang (gnu-imitating) and clang-cl (msvc-imitating), so I've expanded the ENABLE_XHOST logic. I also switched out STREQUAL for MATCHES, @susilehtola, as it seems safer given the diversity (https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html).; * (2) part (1) alone doesn't help because hand-specified `CMAKE_CXX_FLAGS=/arch=AVX` gets _appended_ by the ENABLE_XHOST-resolved flag, so the hand-specified AVX gets clobbered by AVX2 again. the PR now turns off ENABLE_XHOST and passes AVX. The sensible command line is below.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract444.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract444.cc; ```. I should probably turn off verbose compile in general, then this PR is rtg.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036
https://github.com/psi4/psi4/pull/2384#issuecomment-997100036:2667,Testability,log,logic,2667,"g/lib/Driver/ToolChains/Arch/X86.cpp makes that –march is always parsed, leaving out /arch unused, no matter in which order they appear.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX -march=native /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract222.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract222.cc; clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; ```; * On to properly forcing Win to build for AVX:; * (1) recognize the compiler flavor. apparently https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.html is the way to discriminate between clang (gnu-imitating) and clang-cl (msvc-imitating), so I've expanded the ENABLE_XHOST logic. I also switched out STREQUAL for MATCHES, @susilehtola, as it seems safer given the diversity (https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html).; * (2) part (1) alone doesn't help because hand-specified `CMAKE_CXX_FLAGS=/arch=AVX` gets _appended_ by the ENABLE_XHOST-resolved flag, so the hand-specified AVX gets clobbered by AVX2 again. the PR now turns off ENABLE_XHOST and passes AVX. The sensible command line is below.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract444.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036
https://github.com/psi4/psi4/pull/2384#issuecomment-997161576:269,Testability,test,tested,269,"Not related to the issue at hand, but since changes are made to it:; On Apple Silicon ARM the `-march=native` flag is not recognized with Apple's clang 13.; It could e.g. be disabled with an `if (NOT CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL ""arm64"")` for clang gnu (that's tested) but that would nest `if` statements even more.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997161576
https://github.com/psi4/psi4/pull/2384#issuecomment-997437932:698,Availability,down,down,698,"> Not related to the issue at hand, but since changes are made to it:; On Apple Silicon ARM the -march=native flag is not recognized with Apple's clang 13.; It could e.g. be disabled with an if (NOT CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL ""arm64"") for clang gnu (that's tested) but that would nest if statements even more. Thanks, @hokru, do you know if there's a flag for Apple Silicon ARM that should be used in place of `march=native`? The xhost logic block is running with `option_with_flags()` (activates the first flag in argument list that the compiler understands), but that's mostly for pretty printing now that there's more compiler logic and only one proposed flag per call. Having started down the logic path, I'm glad to add more cases for Silicon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997437932
https://github.com/psi4/psi4/pull/2384#issuecomment-997437932:267,Testability,test,tested,267,"> Not related to the issue at hand, but since changes are made to it:; On Apple Silicon ARM the -march=native flag is not recognized with Apple's clang 13.; It could e.g. be disabled with an if (NOT CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL ""arm64"") for clang gnu (that's tested) but that would nest if statements even more. Thanks, @hokru, do you know if there's a flag for Apple Silicon ARM that should be used in place of `march=native`? The xhost logic block is running with `option_with_flags()` (activates the first flag in argument list that the compiler understands), but that's mostly for pretty printing now that there's more compiler logic and only one proposed flag per call. Having started down the logic path, I'm glad to add more cases for Silicon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997437932
https://github.com/psi4/psi4/pull/2384#issuecomment-997437932:446,Testability,log,logic,446,"> Not related to the issue at hand, but since changes are made to it:; On Apple Silicon ARM the -march=native flag is not recognized with Apple's clang 13.; It could e.g. be disabled with an if (NOT CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL ""arm64"") for clang gnu (that's tested) but that would nest if statements even more. Thanks, @hokru, do you know if there's a flag for Apple Silicon ARM that should be used in place of `march=native`? The xhost logic block is running with `option_with_flags()` (activates the first flag in argument list that the compiler understands), but that's mostly for pretty printing now that there's more compiler logic and only one proposed flag per call. Having started down the logic path, I'm glad to add more cases for Silicon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997437932
https://github.com/psi4/psi4/pull/2384#issuecomment-997437932:640,Testability,log,logic,640,"> Not related to the issue at hand, but since changes are made to it:; On Apple Silicon ARM the -march=native flag is not recognized with Apple's clang 13.; It could e.g. be disabled with an if (NOT CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL ""arm64"") for clang gnu (that's tested) but that would nest if statements even more. Thanks, @hokru, do you know if there's a flag for Apple Silicon ARM that should be used in place of `march=native`? The xhost logic block is running with `option_with_flags()` (activates the first flag in argument list that the compiler understands), but that's mostly for pretty printing now that there's more compiler logic and only one proposed flag per call. Having started down the logic path, I'm glad to add more cases for Silicon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997437932
https://github.com/psi4/psi4/pull/2384#issuecomment-997437932:707,Testability,log,logic,707,"> Not related to the issue at hand, but since changes are made to it:; On Apple Silicon ARM the -march=native flag is not recognized with Apple's clang 13.; It could e.g. be disabled with an if (NOT CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL ""arm64"") for clang gnu (that's tested) but that would nest if statements even more. Thanks, @hokru, do you know if there's a flag for Apple Silicon ARM that should be used in place of `march=native`? The xhost logic block is running with `option_with_flags()` (activates the first flag in argument list that the compiler understands), but that's mostly for pretty printing now that there's more compiler logic and only one proposed flag per call. Having started down the logic path, I'm glad to add more cases for Silicon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997437932
https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836:90,Deployability,release,released,90,"Interesting stuff. As for the Apple M1, I guess it depends whether we'll be pushing out a released and tested binaries for Apple M1 before clang gets around fixing the defaults, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836
https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836:51,Integrability,depend,depends,51,"Interesting stuff. As for the Apple M1, I guess it depends whether we'll be pushing out a released and tested binaries for Apple M1 before clang gets around fixing the defaults, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836
https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836:103,Testability,test,tested,103,"Interesting stuff. As for the Apple M1, I guess it depends whether we'll be pushing out a released and tested binaries for Apple M1 before clang gets around fixing the defaults, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836
https://github.com/psi4/psi4/pull/2385#issuecomment-997235877:108,Availability,error,error,108,"This PR addresses #2379 . All fsapt tests pass after refactoring (except fsapt-d) Any insights? This is the error message (Running test fsapt-d). ```; !----------------------------------------------------------------------------------!; ! !; ! Unsuccessful run. Check input, particularly geometry in [a0]. Model: !; ! Model(method='hf-d3', basis='(auto)') !; ! !; !----------------------------------------------------------------------------------!; ```. Additional information:; I compiled my code with gcc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997235877
https://github.com/psi4/psi4/pull/2385#issuecomment-997235877:114,Integrability,message,message,114,"This PR addresses #2379 . All fsapt tests pass after refactoring (except fsapt-d) Any insights? This is the error message (Running test fsapt-d). ```; !----------------------------------------------------------------------------------!; ! !; ! Unsuccessful run. Check input, particularly geometry in [a0]. Model: !; ! Model(method='hf-d3', basis='(auto)') !; ! !; !----------------------------------------------------------------------------------!; ```. Additional information:; I compiled my code with gcc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997235877
https://github.com/psi4/psi4/pull/2385#issuecomment-997235877:53,Modifiability,refactor,refactoring,53,"This PR addresses #2379 . All fsapt tests pass after refactoring (except fsapt-d) Any insights? This is the error message (Running test fsapt-d). ```; !----------------------------------------------------------------------------------!; ! !; ! Unsuccessful run. Check input, particularly geometry in [a0]. Model: !; ! Model(method='hf-d3', basis='(auto)') !; ! !; !----------------------------------------------------------------------------------!; ```. Additional information:; I compiled my code with gcc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997235877
https://github.com/psi4/psi4/pull/2385#issuecomment-997235877:36,Testability,test,tests,36,"This PR addresses #2379 . All fsapt tests pass after refactoring (except fsapt-d) Any insights? This is the error message (Running test fsapt-d). ```; !----------------------------------------------------------------------------------!; ! !; ! Unsuccessful run. Check input, particularly geometry in [a0]. Model: !; ! Model(method='hf-d3', basis='(auto)') !; ! !; !----------------------------------------------------------------------------------!; ```. Additional information:; I compiled my code with gcc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997235877
https://github.com/psi4/psi4/pull/2385#issuecomment-997235877:131,Testability,test,test,131,"This PR addresses #2379 . All fsapt tests pass after refactoring (except fsapt-d) Any insights? This is the error message (Running test fsapt-d). ```; !----------------------------------------------------------------------------------!; ! !; ! Unsuccessful run. Check input, particularly geometry in [a0]. Model: !; ! Model(method='hf-d3', basis='(auto)') !; ! !; !----------------------------------------------------------------------------------!; ```. Additional information:; I compiled my code with gcc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997235877
https://github.com/psi4/psi4/pull/2385#issuecomment-997238928:81,Availability,avail,available,81,Could you post the whole test output please?. And do you have the `dftd3` binary available at run time?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997238928
https://github.com/psi4/psi4/pull/2385#issuecomment-997238928:25,Testability,test,test,25,Could you post the whole test output please?. And do you have the `dftd3` binary available at run time?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997238928
https://github.com/psi4/psi4/pull/2385#issuecomment-997262981:89,Availability,avail,available,89,"> Could you post the whole test output please?; > ; > And do you have the `dftd3` binary available at run time?. Yep, it was a dftd3 issue. Rerunning tests now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997262981
https://github.com/psi4/psi4/pull/2385#issuecomment-997262981:27,Testability,test,test,27,"> Could you post the whole test output please?; > ; > And do you have the `dftd3` binary available at run time?. Yep, it was a dftd3 issue. Rerunning tests now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997262981
https://github.com/psi4/psi4/pull/2385#issuecomment-997262981:150,Testability,test,tests,150,"> Could you post the whole test output please?; > ; > And do you have the `dftd3` binary available at run time?. Yep, it was a dftd3 issue. Rerunning tests now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997262981
https://github.com/psi4/psi4/pull/2385#issuecomment-997266395:4,Testability,test,tests,4,All tests passing. PR ready for review.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997266395
https://github.com/psi4/psi4/pull/2385#issuecomment-998184973:77,Security,access,accessors,77,"> The BoysLocalizer and PMLocalizer have a void-type localize() function and accessors L() and U(). The IBOLocalizer class has no accessors and instead returns a map of info from the localize function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent. Agree. Consistency is crucial and within the PR scope. I think the accessors design is more common in psi4 but other than that I have no strong opinion on either choice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-998184973
https://github.com/psi4/psi4/pull/2385#issuecomment-998184973:130,Security,access,accessors,130,"> The BoysLocalizer and PMLocalizer have a void-type localize() function and accessors L() and U(). The IBOLocalizer class has no accessors and instead returns a map of info from the localize function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent. Agree. Consistency is crucial and within the PR scope. I think the accessors design is more common in psi4 but other than that I have no strong opinion on either choice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-998184973
https://github.com/psi4/psi4/pull/2385#issuecomment-998184973:384,Security,access,accessors,384,"> The BoysLocalizer and PMLocalizer have a void-type localize() function and accessors L() and U(). The IBOLocalizer class has no accessors and instead returns a map of info from the localize function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent. Agree. Consistency is crucial and within the PR scope. I think the accessors design is more common in psi4 but other than that I have no strong opinion on either choice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-998184973
https://github.com/psi4/psi4/pull/2385#issuecomment-998196766:134,Integrability,wrap,wrapper,134,"All good points from Zach. I slightly prefer map return style; it makes it more transparent that the `Localizer` class is a glorified wrapper on the `localize` function. But my opinions are loosely held. Incidentally, `localize_task` should be `localize` for sake of consistency.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-998196766
https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467:1044,Deployability,update,updated,1044,"> Thanks for taking this on Andy! It will be very useful to have IBOs outside of the FSAPT code.; > ; > I imagine a lot of psi4 users will want to export and visualize local orbitals. For this reason, we definitely want the IBOLocalizer exposed py-side as well, same as the other two localizers. See `export_mints.cc`; > ; > Something else we should think about (other devs please chime in) is how the various derived `Localizer` classes can be modified to have as similar method signatures as possible. The `BoysLocalizer` and `PMLocalizer` have a `void`-type `localize()` function and accessors `L()` and `U()`. The `IBOLocalizer` class has no accessors and instead returns a map of info from the `localize` function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent.; > ; > Lastly, I noticed that there aren't really any tests or docs on the various localizers (except for class autodocs). It would be super nice if we could get one or both of those. Hey Zach and all, I just updated the code to conform to the convention of the other localizers. I split the old multi-argument `localize` function in `IBOLocalizer` into the `localize` and `update_fock` methods inherited from the Localizer base class.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467
https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467:1230,Modifiability,inherit,inherited,1230,"> Thanks for taking this on Andy! It will be very useful to have IBOs outside of the FSAPT code.; > ; > I imagine a lot of psi4 users will want to export and visualize local orbitals. For this reason, we definitely want the IBOLocalizer exposed py-side as well, same as the other two localizers. See `export_mints.cc`; > ; > Something else we should think about (other devs please chime in) is how the various derived `Localizer` classes can be modified to have as similar method signatures as possible. The `BoysLocalizer` and `PMLocalizer` have a `void`-type `localize()` function and accessors `L()` and `U()`. The `IBOLocalizer` class has no accessors and instead returns a map of info from the `localize` function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent.; > ; > Lastly, I noticed that there aren't really any tests or docs on the various localizers (except for class autodocs). It would be super nice if we could get one or both of those. Hey Zach and all, I just updated the code to conform to the convention of the other localizers. I split the old multi-argument `localize` function in `IBOLocalizer` into the `localize` and `update_fock` methods inherited from the Localizer base class.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467
https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467:237,Security,expose,exposed,237,"> Thanks for taking this on Andy! It will be very useful to have IBOs outside of the FSAPT code.; > ; > I imagine a lot of psi4 users will want to export and visualize local orbitals. For this reason, we definitely want the IBOLocalizer exposed py-side as well, same as the other two localizers. See `export_mints.cc`; > ; > Something else we should think about (other devs please chime in) is how the various derived `Localizer` classes can be modified to have as similar method signatures as possible. The `BoysLocalizer` and `PMLocalizer` have a `void`-type `localize()` function and accessors `L()` and `U()`. The `IBOLocalizer` class has no accessors and instead returns a map of info from the `localize` function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent.; > ; > Lastly, I noticed that there aren't really any tests or docs on the various localizers (except for class autodocs). It would be super nice if we could get one or both of those. Hey Zach and all, I just updated the code to conform to the convention of the other localizers. I split the old multi-argument `localize` function in `IBOLocalizer` into the `localize` and `update_fock` methods inherited from the Localizer base class.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467
https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467:587,Security,access,accessors,587,"> Thanks for taking this on Andy! It will be very useful to have IBOs outside of the FSAPT code.; > ; > I imagine a lot of psi4 users will want to export and visualize local orbitals. For this reason, we definitely want the IBOLocalizer exposed py-side as well, same as the other two localizers. See `export_mints.cc`; > ; > Something else we should think about (other devs please chime in) is how the various derived `Localizer` classes can be modified to have as similar method signatures as possible. The `BoysLocalizer` and `PMLocalizer` have a `void`-type `localize()` function and accessors `L()` and `U()`. The `IBOLocalizer` class has no accessors and instead returns a map of info from the `localize` function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent.; > ; > Lastly, I noticed that there aren't really any tests or docs on the various localizers (except for class autodocs). It would be super nice if we could get one or both of those. Hey Zach and all, I just updated the code to conform to the convention of the other localizers. I split the old multi-argument `localize` function in `IBOLocalizer` into the `localize` and `update_fock` methods inherited from the Localizer base class.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467
https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467:646,Security,access,accessors,646,"> Thanks for taking this on Andy! It will be very useful to have IBOs outside of the FSAPT code.; > ; > I imagine a lot of psi4 users will want to export and visualize local orbitals. For this reason, we definitely want the IBOLocalizer exposed py-side as well, same as the other two localizers. See `export_mints.cc`; > ; > Something else we should think about (other devs please chime in) is how the various derived `Localizer` classes can be modified to have as similar method signatures as possible. The `BoysLocalizer` and `PMLocalizer` have a `void`-type `localize()` function and accessors `L()` and `U()`. The `IBOLocalizer` class has no accessors and instead returns a map of info from the `localize` function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent.; > ; > Lastly, I noticed that there aren't really any tests or docs on the various localizers (except for class autodocs). It would be super nice if we could get one or both of those. Hey Zach and all, I just updated the code to conform to the convention of the other localizers. I split the old multi-argument `localize` function in `IBOLocalizer` into the `localize` and `update_fock` methods inherited from the Localizer base class.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467
https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467:889,Testability,test,tests,889,"> Thanks for taking this on Andy! It will be very useful to have IBOs outside of the FSAPT code.; > ; > I imagine a lot of psi4 users will want to export and visualize local orbitals. For this reason, we definitely want the IBOLocalizer exposed py-side as well, same as the other two localizers. See `export_mints.cc`; > ; > Something else we should think about (other devs please chime in) is how the various derived `Localizer` classes can be modified to have as similar method signatures as possible. The `BoysLocalizer` and `PMLocalizer` have a `void`-type `localize()` function and accessors `L()` and `U()`. The `IBOLocalizer` class has no accessors and instead returns a map of info from the `localize` function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent.; > ; > Lastly, I noticed that there aren't really any tests or docs on the various localizers (except for class autodocs). It would be super nice if we could get one or both of those. Hey Zach and all, I just updated the code to conform to the convention of the other localizers. I split the old multi-argument `localize` function in `IBOLocalizer` into the `localize` and `update_fock` methods inherited from the Localizer base class.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467
https://github.com/psi4/psi4/pull/2385#issuecomment-1027259299:0,Availability,Ping,Ping,0,"Ping me when this could use another review from me. From tests, it looks like there's a bug in the current code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1027259299
https://github.com/psi4/psi4/pull/2385#issuecomment-1027259299:57,Testability,test,tests,57,"Ping me when this could use another review from me. From tests, it looks like there's a bug in the current code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1027259299
https://github.com/psi4/psi4/pull/2386#issuecomment-997412944:381,Availability,avail,available,381,"I'm not sure if there are any Gaussian codes that have the Yukawa kernels. However, I do have the Yukawa kernels in HelFEM for atomic calculations, and for `hyb_gga_xc_camy_b3lyp` I get the following energies. | atom | energy |; |--------|-----------|; | He | -2.90309239 |; | N | -54.59195697 |; | Ne | -128.96948058 |. If you run the calculations in Psi4 with the AHGBS-9 basis (available from the BSE) and a large quadrature grid like (250, 590), you should be able to match these to sub-microhartree accuracy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997412944
https://github.com/psi4/psi4/pull/2386#issuecomment-997412944:219,Energy Efficiency,energy,energy,219,"I'm not sure if there are any Gaussian codes that have the Yukawa kernels. However, I do have the Yukawa kernels in HelFEM for atomic calculations, and for `hyb_gga_xc_camy_b3lyp` I get the following energies. | atom | energy |; |--------|-----------|; | He | -2.90309239 |; | N | -54.59195697 |; | Ne | -128.96948058 |. If you run the calculations in Psi4 with the AHGBS-9 basis (available from the BSE) and a large quadrature grid like (250, 590), you should be able to match these to sub-microhartree accuracy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997412944
https://github.com/psi4/psi4/pull/2386#issuecomment-997413176:117,Integrability,interface,interface,117,"Of course, to run those tests one also needs to add the new kernels to the range-separated Fock builds and the libxc interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997413176
https://github.com/psi4/psi4/pull/2386#issuecomment-997413176:24,Testability,test,tests,24,"Of course, to run those tests one also needs to add the new kernels to the range-separated Fock builds and the libxc interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997413176
https://github.com/psi4/psi4/pull/2386#issuecomment-997950016:119,Integrability,interface,interface,119,"> Of course, to run those tests one also needs to add the new kernels to the range-separated Fock builds and the libxc interface. I believe that is outside the scope of this PR, is there any way I can test for numerical correctness? (Possibly expose the functions to python and call a numpy function)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997950016
https://github.com/psi4/psi4/pull/2386#issuecomment-997950016:243,Security,expose,expose,243,"> Of course, to run those tests one also needs to add the new kernels to the range-separated Fock builds and the libxc interface. I believe that is outside the scope of this PR, is there any way I can test for numerical correctness? (Possibly expose the functions to python and call a numpy function)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997950016
https://github.com/psi4/psi4/pull/2386#issuecomment-997950016:26,Testability,test,tests,26,"> Of course, to run those tests one also needs to add the new kernels to the range-separated Fock builds and the libxc interface. I believe that is outside the scope of this PR, is there any way I can test for numerical correctness? (Possibly expose the functions to python and call a numpy function)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997950016
https://github.com/psi4/psi4/pull/2386#issuecomment-997950016:201,Testability,test,test,201,"> Of course, to run those tests one also needs to add the new kernels to the range-separated Fock builds and the libxc interface. I believe that is outside the scope of this PR, is there any way I can test for numerical correctness? (Possibly expose the functions to python and call a numpy function)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997950016
https://github.com/psi4/psi4/pull/2387#issuecomment-1000871565:276,Integrability,depend,dependencies,276,"They may not directly use PyDIIS but they include a header file that does include pybind; therefore, a fix was needed. . I would think that instead of adding `target_link_libraries(XXXX PUBLIC pybind11::headers)` to the modules that need it the modules should state their own dependencies. For example, `scfgrad` should have:. ```; target_link_libraries(scfgrad PUBLIC scf_solver). not. target_link_libraries(scfgrad PUBLIC pybind11::headers); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2387#issuecomment-1000871565
https://github.com/psi4/psi4/pull/2387#issuecomment-1001269681:27,Deployability,update,updated,27,"Excellent call, Jet - I've updated the dependencies to properly reflect how the PB11 deps get introduced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2387#issuecomment-1001269681
https://github.com/psi4/psi4/pull/2387#issuecomment-1001269681:39,Integrability,depend,dependencies,39,"Excellent call, Jet - I've updated the dependencies to properly reflect how the PB11 deps get introduced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2387#issuecomment-1001269681
https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298:122,Availability,avail,available,122,"I may need some help building a new Windows L2 library with the extra OEI hessians; the VM that I had set up is no longer available after the IT folks kindly sent a security patch that bricked my laptop. I should be able to get Parallels running again if needed, but would appreciate help from anyone with a Windows machine. The failure in ADCC is something I see locally too; I get `ImportError: /u/andysim/anaconda3/envs/psi4dev/lib//python3.9/site-packages/../.././libmkl_sequential.so.1: undefined symbol: mkl_lapack_xzlaswp_i4`, so it looks like some kind of Conda dependency problem. If I try and build ADCC instead, I get problems finding `libtensorlight`, which I have installed via Conda. Any clues about this are welcome, before I head down the rabbithole.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298
https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298:329,Availability,failure,failure,329,"I may need some help building a new Windows L2 library with the extra OEI hessians; the VM that I had set up is no longer available after the IT folks kindly sent a security patch that bricked my laptop. I should be able to get Parallels running again if needed, but would appreciate help from anyone with a Windows machine. The failure in ADCC is something I see locally too; I get `ImportError: /u/andysim/anaconda3/envs/psi4dev/lib//python3.9/site-packages/../.././libmkl_sequential.so.1: undefined symbol: mkl_lapack_xzlaswp_i4`, so it looks like some kind of Conda dependency problem. If I try and build ADCC instead, I get problems finding `libtensorlight`, which I have installed via Conda. Any clues about this are welcome, before I head down the rabbithole.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298
https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298:746,Availability,down,down,746,"I may need some help building a new Windows L2 library with the extra OEI hessians; the VM that I had set up is no longer available after the IT folks kindly sent a security patch that bricked my laptop. I should be able to get Parallels running again if needed, but would appreciate help from anyone with a Windows machine. The failure in ADCC is something I see locally too; I get `ImportError: /u/andysim/anaconda3/envs/psi4dev/lib//python3.9/site-packages/../.././libmkl_sequential.so.1: undefined symbol: mkl_lapack_xzlaswp_i4`, so it looks like some kind of Conda dependency problem. If I try and build ADCC instead, I get problems finding `libtensorlight`, which I have installed via Conda. Any clues about this are welcome, before I head down the rabbithole.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298
https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298:174,Deployability,patch,patch,174,"I may need some help building a new Windows L2 library with the extra OEI hessians; the VM that I had set up is no longer available after the IT folks kindly sent a security patch that bricked my laptop. I should be able to get Parallels running again if needed, but would appreciate help from anyone with a Windows machine. The failure in ADCC is something I see locally too; I get `ImportError: /u/andysim/anaconda3/envs/psi4dev/lib//python3.9/site-packages/../.././libmkl_sequential.so.1: undefined symbol: mkl_lapack_xzlaswp_i4`, so it looks like some kind of Conda dependency problem. If I try and build ADCC instead, I get problems finding `libtensorlight`, which I have installed via Conda. Any clues about this are welcome, before I head down the rabbithole.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298
https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298:677,Deployability,install,installed,677,"I may need some help building a new Windows L2 library with the extra OEI hessians; the VM that I had set up is no longer available after the IT folks kindly sent a security patch that bricked my laptop. I should be able to get Parallels running again if needed, but would appreciate help from anyone with a Windows machine. The failure in ADCC is something I see locally too; I get `ImportError: /u/andysim/anaconda3/envs/psi4dev/lib//python3.9/site-packages/../.././libmkl_sequential.so.1: undefined symbol: mkl_lapack_xzlaswp_i4`, so it looks like some kind of Conda dependency problem. If I try and build ADCC instead, I get problems finding `libtensorlight`, which I have installed via Conda. Any clues about this are welcome, before I head down the rabbithole.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298
https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298:570,Integrability,depend,dependency,570,"I may need some help building a new Windows L2 library with the extra OEI hessians; the VM that I had set up is no longer available after the IT folks kindly sent a security patch that bricked my laptop. I should be able to get Parallels running again if needed, but would appreciate help from anyone with a Windows machine. The failure in ADCC is something I see locally too; I get `ImportError: /u/andysim/anaconda3/envs/psi4dev/lib//python3.9/site-packages/../.././libmkl_sequential.so.1: undefined symbol: mkl_lapack_xzlaswp_i4`, so it looks like some kind of Conda dependency problem. If I try and build ADCC instead, I get problems finding `libtensorlight`, which I have installed via Conda. Any clues about this are welcome, before I head down the rabbithole.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298
https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298:165,Security,secur,security,165,"I may need some help building a new Windows L2 library with the extra OEI hessians; the VM that I had set up is no longer available after the IT folks kindly sent a security patch that bricked my laptop. I should be able to get Parallels running again if needed, but would appreciate help from anyone with a Windows machine. The failure in ADCC is something I see locally too; I get `ImportError: /u/andysim/anaconda3/envs/psi4dev/lib//python3.9/site-packages/../.././libmkl_sequential.so.1: undefined symbol: mkl_lapack_xzlaswp_i4`, so it looks like some kind of Conda dependency problem. If I try and build ADCC instead, I get problems finding `libtensorlight`, which I have installed via Conda. Any clues about this are welcome, before I head down the rabbithole.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298
https://github.com/psi4/psi4/pull/2388#issuecomment-1004868972:19,Testability,test,tests,19,Some of the `adcc` tests seem to work fine though? I will look into it ASAP.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004868972
https://github.com/psi4/psi4/pull/2388#issuecomment-1004922562:16,Testability,test,tests,16,"None of my ADCC tests are passing; all have the same problem. It's an old psi4dev Conda environment, so I should probably remake that first.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004922562
https://github.com/psi4/psi4/pull/2388#issuecomment-1004927832:113,Testability,test,test,113,"> azure should have been using new packages already, though. Yes, that's what I meant. On Azure, only one `adcc` test fails...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004927832
https://github.com/psi4/psi4/pull/2388#issuecomment-1013736955:377,Availability,failure,failures,377,"The latest CMake fix worked, so Linux is in good shape now. Before we can merge this, we'll need to make sure we have conda L2 set up correctly. We don't need the high angular momentum multipoles - I have a different strategy in mind for those. We will need the second derivatives of the one electron ints though. The lack of those hessian ints is what's causing the remaining failures on Windows.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1013736955
https://github.com/psi4/psi4/pull/2389#issuecomment-1003751101:26,Testability,test,test,26,"Can we have a correctness test on the VMFC hessian? I do not know when this code will run, what problem `_sum_cluster_ptype_data` solves, or what this change does, and an example of _what in the output file this commit changes_ would be very helpful. I'll remind Lori that the n-body code in DDD needs to be better documented than it is right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003751101
https://github.com/psi4/psi4/pull/2389#issuecomment-1003755930:392,Availability,error,error,392,"I have added a test case similar to the test case for the gradient. I do not know of other codes that have this capability but the test case enumerate all the necessary terms and check for the correct expansion formula for a trimer truncated at the two-body level. Without this PR, the many-body expansion terms for the Hessian are not summed up correctly if the VMFC basis set superposition error scheme is used. The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003755930
https://github.com/psi4/psi4/pull/2389#issuecomment-1003755930:15,Testability,test,test,15,"I have added a test case similar to the test case for the gradient. I do not know of other codes that have this capability but the test case enumerate all the necessary terms and check for the correct expansion formula for a trimer truncated at the two-body level. Without this PR, the many-body expansion terms for the Hessian are not summed up correctly if the VMFC basis set superposition error scheme is used. The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003755930
https://github.com/psi4/psi4/pull/2389#issuecomment-1003755930:40,Testability,test,test,40,"I have added a test case similar to the test case for the gradient. I do not know of other codes that have this capability but the test case enumerate all the necessary terms and check for the correct expansion formula for a trimer truncated at the two-body level. Without this PR, the many-body expansion terms for the Hessian are not summed up correctly if the VMFC basis set superposition error scheme is used. The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003755930
https://github.com/psi4/psi4/pull/2389#issuecomment-1003755930:131,Testability,test,test,131,"I have added a test case similar to the test case for the gradient. I do not know of other codes that have this capability but the test case enumerate all the necessary terms and check for the correct expansion formula for a trimer truncated at the two-body level. Without this PR, the many-body expansion terms for the Hessian are not summed up correctly if the VMFC basis set superposition error scheme is used. The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003755930
https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509:269,Energy Efficiency,energy,energy,269,"> I have added a test case similar to the test case for the gradient. I prefer a simpler test: test VMFC _analytic hessian_ against VMFC hessian by _finite difference of single point_. I don't see a need for this test to test against its own implementation of the VMFC energy formula. That's a job for a different test. Including it in this one obscures the point of the test. > The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR. I disagree. It is _always_ within the scope of the PR to get the documentation to such a state that the problem the PR solves is intelligible. I am not asking you to document the entire nbody module. I am asking you to document the expected behavior of the function whose behavior you are changing - that is perfectly in-scope. `Sums gradient and hessian data from compute_list.` is a poor docstring. ""data"" could mean anything, and sums them to get what? ""Sum gradients/hessians from n-body computations to obtain the BSSE corrected gradient/hessian"" is much clearer. If that much isn't clear, then the purpose of this PR is not clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509
https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509:17,Testability,test,test,17,"> I have added a test case similar to the test case for the gradient. I prefer a simpler test: test VMFC _analytic hessian_ against VMFC hessian by _finite difference of single point_. I don't see a need for this test to test against its own implementation of the VMFC energy formula. That's a job for a different test. Including it in this one obscures the point of the test. > The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR. I disagree. It is _always_ within the scope of the PR to get the documentation to such a state that the problem the PR solves is intelligible. I am not asking you to document the entire nbody module. I am asking you to document the expected behavior of the function whose behavior you are changing - that is perfectly in-scope. `Sums gradient and hessian data from compute_list.` is a poor docstring. ""data"" could mean anything, and sums them to get what? ""Sum gradients/hessians from n-body computations to obtain the BSSE corrected gradient/hessian"" is much clearer. If that much isn't clear, then the purpose of this PR is not clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509
https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509:42,Testability,test,test,42,"> I have added a test case similar to the test case for the gradient. I prefer a simpler test: test VMFC _analytic hessian_ against VMFC hessian by _finite difference of single point_. I don't see a need for this test to test against its own implementation of the VMFC energy formula. That's a job for a different test. Including it in this one obscures the point of the test. > The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR. I disagree. It is _always_ within the scope of the PR to get the documentation to such a state that the problem the PR solves is intelligible. I am not asking you to document the entire nbody module. I am asking you to document the expected behavior of the function whose behavior you are changing - that is perfectly in-scope. `Sums gradient and hessian data from compute_list.` is a poor docstring. ""data"" could mean anything, and sums them to get what? ""Sum gradients/hessians from n-body computations to obtain the BSSE corrected gradient/hessian"" is much clearer. If that much isn't clear, then the purpose of this PR is not clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509
https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509:89,Testability,test,test,89,"> I have added a test case similar to the test case for the gradient. I prefer a simpler test: test VMFC _analytic hessian_ against VMFC hessian by _finite difference of single point_. I don't see a need for this test to test against its own implementation of the VMFC energy formula. That's a job for a different test. Including it in this one obscures the point of the test. > The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR. I disagree. It is _always_ within the scope of the PR to get the documentation to such a state that the problem the PR solves is intelligible. I am not asking you to document the entire nbody module. I am asking you to document the expected behavior of the function whose behavior you are changing - that is perfectly in-scope. `Sums gradient and hessian data from compute_list.` is a poor docstring. ""data"" could mean anything, and sums them to get what? ""Sum gradients/hessians from n-body computations to obtain the BSSE corrected gradient/hessian"" is much clearer. If that much isn't clear, then the purpose of this PR is not clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509
https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509:95,Testability,test,test,95,"> I have added a test case similar to the test case for the gradient. I prefer a simpler test: test VMFC _analytic hessian_ against VMFC hessian by _finite difference of single point_. I don't see a need for this test to test against its own implementation of the VMFC energy formula. That's a job for a different test. Including it in this one obscures the point of the test. > The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR. I disagree. It is _always_ within the scope of the PR to get the documentation to such a state that the problem the PR solves is intelligible. I am not asking you to document the entire nbody module. I am asking you to document the expected behavior of the function whose behavior you are changing - that is perfectly in-scope. `Sums gradient and hessian data from compute_list.` is a poor docstring. ""data"" could mean anything, and sums them to get what? ""Sum gradients/hessians from n-body computations to obtain the BSSE corrected gradient/hessian"" is much clearer. If that much isn't clear, then the purpose of this PR is not clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509
https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509:213,Testability,test,test,213,"> I have added a test case similar to the test case for the gradient. I prefer a simpler test: test VMFC _analytic hessian_ against VMFC hessian by _finite difference of single point_. I don't see a need for this test to test against its own implementation of the VMFC energy formula. That's a job for a different test. Including it in this one obscures the point of the test. > The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR. I disagree. It is _always_ within the scope of the PR to get the documentation to such a state that the problem the PR solves is intelligible. I am not asking you to document the entire nbody module. I am asking you to document the expected behavior of the function whose behavior you are changing - that is perfectly in-scope. `Sums gradient and hessian data from compute_list.` is a poor docstring. ""data"" could mean anything, and sums them to get what? ""Sum gradients/hessians from n-body computations to obtain the BSSE corrected gradient/hessian"" is much clearer. If that much isn't clear, then the purpose of this PR is not clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509
https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509:221,Testability,test,test,221,"> I have added a test case similar to the test case for the gradient. I prefer a simpler test: test VMFC _analytic hessian_ against VMFC hessian by _finite difference of single point_. I don't see a need for this test to test against its own implementation of the VMFC energy formula. That's a job for a different test. Including it in this one obscures the point of the test. > The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR. I disagree. It is _always_ within the scope of the PR to get the documentation to such a state that the problem the PR solves is intelligible. I am not asking you to document the entire nbody module. I am asking you to document the expected behavior of the function whose behavior you are changing - that is perfectly in-scope. `Sums gradient and hessian data from compute_list.` is a poor docstring. ""data"" could mean anything, and sums them to get what? ""Sum gradients/hessians from n-body computations to obtain the BSSE corrected gradient/hessian"" is much clearer. If that much isn't clear, then the purpose of this PR is not clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509
https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509:314,Testability,test,test,314,"> I have added a test case similar to the test case for the gradient. I prefer a simpler test: test VMFC _analytic hessian_ against VMFC hessian by _finite difference of single point_. I don't see a need for this test to test against its own implementation of the VMFC energy formula. That's a job for a different test. Including it in this one obscures the point of the test. > The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR. I disagree. It is _always_ within the scope of the PR to get the documentation to such a state that the problem the PR solves is intelligible. I am not asking you to document the entire nbody module. I am asking you to document the expected behavior of the function whose behavior you are changing - that is perfectly in-scope. `Sums gradient and hessian data from compute_list.` is a poor docstring. ""data"" could mean anything, and sums them to get what? ""Sum gradients/hessians from n-body computations to obtain the BSSE corrected gradient/hessian"" is much clearer. If that much isn't clear, then the purpose of this PR is not clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509
https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509:371,Testability,test,test,371,"> I have added a test case similar to the test case for the gradient. I prefer a simpler test: test VMFC _analytic hessian_ against VMFC hessian by _finite difference of single point_. I don't see a need for this test to test against its own implementation of the VMFC energy formula. That's a job for a different test. Including it in this one obscures the point of the test. > The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR. I disagree. It is _always_ within the scope of the PR to get the documentation to such a state that the problem the PR solves is intelligible. I am not asking you to document the entire nbody module. I am asking you to document the expected behavior of the function whose behavior you are changing - that is perfectly in-scope. `Sums gradient and hessian data from compute_list.` is a poor docstring. ""data"" could mean anything, and sums them to get what? ""Sum gradients/hessians from n-body computations to obtain the BSSE corrected gradient/hessian"" is much clearer. If that much isn't clear, then the purpose of this PR is not clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509
https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509:81,Usability,simpl,simpler,81,"> I have added a test case similar to the test case for the gradient. I prefer a simpler test: test VMFC _analytic hessian_ against VMFC hessian by _finite difference of single point_. I don't see a need for this test to test against its own implementation of the VMFC energy formula. That's a job for a different test. Including it in this one obscures the point of the test. > The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR. I disagree. It is _always_ within the scope of the PR to get the documentation to such a state that the problem the PR solves is intelligible. I am not asking you to document the entire nbody module. I am asking you to document the expected behavior of the function whose behavior you are changing - that is perfectly in-scope. `Sums gradient and hessian data from compute_list.` is a poor docstring. ""data"" could mean anything, and sums them to get what? ""Sum gradients/hessians from n-body computations to obtain the BSSE corrected gradient/hessian"" is much clearer. If that much isn't clear, then the purpose of this PR is not clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509
https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509:1127,Usability,clear,clearer,1127,"> I have added a test case similar to the test case for the gradient. I prefer a simpler test: test VMFC _analytic hessian_ against VMFC hessian by _finite difference of single point_. I don't see a need for this test to test against its own implementation of the VMFC energy formula. That's a job for a different test. Including it in this one obscures the point of the test. > The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR. I disagree. It is _always_ within the scope of the PR to get the documentation to such a state that the problem the PR solves is intelligible. I am not asking you to document the entire nbody module. I am asking you to document the expected behavior of the function whose behavior you are changing - that is perfectly in-scope. `Sums gradient and hessian data from compute_list.` is a poor docstring. ""data"" could mean anything, and sums them to get what? ""Sum gradients/hessians from n-body computations to obtain the BSSE corrected gradient/hessian"" is much clearer. If that much isn't clear, then the purpose of this PR is not clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509
https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509:1155,Usability,clear,clear,1155,"> I have added a test case similar to the test case for the gradient. I prefer a simpler test: test VMFC _analytic hessian_ against VMFC hessian by _finite difference of single point_. I don't see a need for this test to test against its own implementation of the VMFC energy formula. That's a job for a different test. Including it in this one obscures the point of the test. > The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR. I disagree. It is _always_ within the scope of the PR to get the documentation to such a state that the problem the PR solves is intelligible. I am not asking you to document the entire nbody module. I am asking you to document the expected behavior of the function whose behavior you are changing - that is perfectly in-scope. `Sums gradient and hessian data from compute_list.` is a poor docstring. ""data"" could mean anything, and sums them to get what? ""Sum gradients/hessians from n-body computations to obtain the BSSE corrected gradient/hessian"" is much clearer. If that much isn't clear, then the purpose of this PR is not clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509
https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509:1197,Usability,clear,clear,1197,"> I have added a test case similar to the test case for the gradient. I prefer a simpler test: test VMFC _analytic hessian_ against VMFC hessian by _finite difference of single point_. I don't see a need for this test to test against its own implementation of the VMFC energy formula. That's a job for a different test. Including it in this one obscures the point of the test. > The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR. I disagree. It is _always_ within the scope of the PR to get the documentation to such a state that the problem the PR solves is intelligible. I am not asking you to document the entire nbody module. I am asking you to document the expected behavior of the function whose behavior you are changing - that is perfectly in-scope. `Sums gradient and hessian data from compute_list.` is a poor docstring. ""data"" could mean anything, and sums them to get what? ""Sum gradients/hessians from n-body computations to obtain the BSSE corrected gradient/hessian"" is much clearer. If that much isn't clear, then the purpose of this PR is not clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509
https://github.com/psi4/psi4/pull/2389#issuecomment-1004063072:30,Testability,test,test,30,I added the finite difference test and I documented the function.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1004063072
https://github.com/psi4/psi4/issues/2390#issuecomment-1004154539:52,Availability,down,download,52,We strongly recommend that you follow the [official download instructions](https://psicode.org/installs/v15/).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004154539
https://github.com/psi4/psi4/issues/2390#issuecomment-1004154539:95,Deployability,install,installs,95,We strongly recommend that you follow the [official download instructions](https://psicode.org/installs/v15/).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004154539
https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467:876,Availability,Avail,Available,876,"Hi~. Thanks for the responses. I create an environment and I run the command as you recommend ([link](https://psicode.org/installs/v15/)). `conda install psi4 python=3.9 -c psi4 `. But it still shows:. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \ ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; python=3.9; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. Is there anything wrong with my Ubuntu machine?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467
https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467:122,Deployability,install,installs,122,"Hi~. Thanks for the responses. I create an environment and I run the command as you recommend ([link](https://psicode.org/installs/v15/)). `conda install psi4 python=3.9 -c psi4 `. But it still shows:. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \ ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; python=3.9; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. Is there anything wrong with my Ubuntu machine?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467
https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467:146,Deployability,install,install,146,"Hi~. Thanks for the responses. I create an environment and I run the command as you recommend ([link](https://psicode.org/installs/v15/)). `conda install psi4 python=3.9 -c psi4 `. But it still shows:. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \ ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; python=3.9; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. Is there anything wrong with my Ubuntu machine?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467
https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467:1431,Deployability,install,installed,1431,"Hi~. Thanks for the responses. I create an environment and I run the command as you recommend ([link](https://psicode.org/installs/v15/)). `conda install psi4 python=3.9 -c psi4 `. But it still shows:. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \ ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; python=3.9; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. Is there anything wrong with my Ubuntu machine?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467
https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467:335,Modifiability,flexible,flexible,335,"Hi~. Thanks for the responses. I create an environment and I run the command as you recommend ([link](https://psicode.org/installs/v15/)). `conda install psi4 python=3.9 -c psi4 `. But it still shows:. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \ ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; python=3.9; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. Is there anything wrong with my Ubuntu machine?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467
https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467:581,Modifiability,flexible,flexible,581,"Hi~. Thanks for the responses. I create an environment and I run the command as you recommend ([link](https://psicode.org/installs/v15/)). `conda install psi4 python=3.9 -c psi4 `. But it still shows:. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \ ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; python=3.9; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. Is there anything wrong with my Ubuntu machine?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467
https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467:723,Safety,abort,abort,723,"Hi~. Thanks for the responses. I create an environment and I run the command as you recommend ([link](https://psicode.org/installs/v15/)). `conda install psi4 python=3.9 -c psi4 `. But it still shows:. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \ ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; python=3.9; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. Is there anything wrong with my Ubuntu machine?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467
https://github.com/psi4/psi4/issues/2390#issuecomment-1004870655:334,Deployability,install,install,334,"What's your `conda info` and `~/.condarc`? I suspect strict channel priority and/or picking from conda-forge are causing the trouble. In particular, c-f has a 5.1.7 libxc while psi4 has a 5.1.5 . If this lead is correct, you can either temporarily remove c-f from your channels list or add `psi4::libxc` to your `conda create`/`conda install` command. By the way, it's much cleaner for solving if you create a new conda env with psi rather than installing into an existing env with unknown history.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004870655
https://github.com/psi4/psi4/issues/2390#issuecomment-1004870655:445,Deployability,install,installing,445,"What's your `conda info` and `~/.condarc`? I suspect strict channel priority and/or picking from conda-forge are causing the trouble. In particular, c-f has a 5.1.7 libxc while psi4 has a 5.1.5 . If this lead is correct, you can either temporarily remove c-f from your channels list or add `psi4::libxc` to your `conda create`/`conda install` command. By the way, it's much cleaner for solving if you create a new conda env with psi rather than installing into an existing env with unknown history.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004870655
https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761:1471,Deployability,install,install,1471,"Hi; I created an environment, psi4, and run `conda activate psi4`; Here is what I got after I run `conda info`; ```. active environment : psi4; active env location : /home/tim/anaconda3/envs/psi4; shell level : 2; user config file : /home/tim/.condarc; populated config files : /home/tim/.condarc; conda version : 4.11.0; conda-build version : 3.21.4; python version : 3.8.8.final.0; virtual packages : __linux=5.10.0=0; __glibc=2.31=0; __unix=0=0; __archspec=1=x86_64; base environment : /home/tim/anaconda3 (writable); conda av data dir : /home/tim/anaconda3/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/ngsolve/linux-64; https://conda.anaconda.org/ngsolve/noarch; https://conda.anaconda.org/conda-forge/linux-64; https://conda.anaconda.org/conda-forge/noarch; https://repo.anaconda.com/pkgs/main/linux-64; https://repo.anaconda.com/pkgs/main/noarch; https://repo.anaconda.com/pkgs/r/linux-64; https://repo.anaconda.com/pkgs/r/noarch; package cache : /home/tim/anaconda3/pkgs; /home/tim/.conda/pkgs; envs directories : /home/tim/anaconda3/envs; /home/tim/.conda/envs; platform : linux-64; user-agent : conda/4.11.0 requests/2.26.0 CPython/3.8.8 Linux/5.10.0-1052-oem ubuntu/20.04.3 glibc/2.31; UID:GID : 1000:1000; netrc file : None; offline mode : False. ```. And this is after running `~/.condarc`:. `bash: /home/tim/.condarc: Permission denied`. I try with the command you proposed with a newly created environment, psi. `conda install psi4 python=3.9 psi4::libxc`. But it appears the same as I had shown you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761
https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761:219,Modifiability,config,config,219,"Hi; I created an environment, psi4, and run `conda activate psi4`; Here is what I got after I run `conda info`; ```. active environment : psi4; active env location : /home/tim/anaconda3/envs/psi4; shell level : 2; user config file : /home/tim/.condarc; populated config files : /home/tim/.condarc; conda version : 4.11.0; conda-build version : 3.21.4; python version : 3.8.8.final.0; virtual packages : __linux=5.10.0=0; __glibc=2.31=0; __unix=0=0; __archspec=1=x86_64; base environment : /home/tim/anaconda3 (writable); conda av data dir : /home/tim/anaconda3/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/ngsolve/linux-64; https://conda.anaconda.org/ngsolve/noarch; https://conda.anaconda.org/conda-forge/linux-64; https://conda.anaconda.org/conda-forge/noarch; https://repo.anaconda.com/pkgs/main/linux-64; https://repo.anaconda.com/pkgs/main/noarch; https://repo.anaconda.com/pkgs/r/linux-64; https://repo.anaconda.com/pkgs/r/noarch; package cache : /home/tim/anaconda3/pkgs; /home/tim/.conda/pkgs; envs directories : /home/tim/anaconda3/envs; /home/tim/.conda/envs; platform : linux-64; user-agent : conda/4.11.0 requests/2.26.0 CPython/3.8.8 Linux/5.10.0-1052-oem ubuntu/20.04.3 glibc/2.31; UID:GID : 1000:1000; netrc file : None; offline mode : False. ```. And this is after running `~/.condarc`:. `bash: /home/tim/.condarc: Permission denied`. I try with the command you proposed with a newly created environment, psi. `conda install psi4 python=3.9 psi4::libxc`. But it appears the same as I had shown you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761
https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761:263,Modifiability,config,config,263,"Hi; I created an environment, psi4, and run `conda activate psi4`; Here is what I got after I run `conda info`; ```. active environment : psi4; active env location : /home/tim/anaconda3/envs/psi4; shell level : 2; user config file : /home/tim/.condarc; populated config files : /home/tim/.condarc; conda version : 4.11.0; conda-build version : 3.21.4; python version : 3.8.8.final.0; virtual packages : __linux=5.10.0=0; __glibc=2.31=0; __unix=0=0; __archspec=1=x86_64; base environment : /home/tim/anaconda3 (writable); conda av data dir : /home/tim/anaconda3/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/ngsolve/linux-64; https://conda.anaconda.org/ngsolve/noarch; https://conda.anaconda.org/conda-forge/linux-64; https://conda.anaconda.org/conda-forge/noarch; https://repo.anaconda.com/pkgs/main/linux-64; https://repo.anaconda.com/pkgs/main/noarch; https://repo.anaconda.com/pkgs/r/linux-64; https://repo.anaconda.com/pkgs/r/noarch; package cache : /home/tim/anaconda3/pkgs; /home/tim/.conda/pkgs; envs directories : /home/tim/anaconda3/envs; /home/tim/.conda/envs; platform : linux-64; user-agent : conda/4.11.0 requests/2.26.0 CPython/3.8.8 Linux/5.10.0-1052-oem ubuntu/20.04.3 glibc/2.31; UID:GID : 1000:1000; netrc file : None; offline mode : False. ```. And this is after running `~/.condarc`:. `bash: /home/tim/.condarc: Permission denied`. I try with the command you proposed with a newly created environment, psi. `conda install psi4 python=3.9 psi4::libxc`. But it appears the same as I had shown you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761
https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761:983,Performance,cache,cache,983,"Hi; I created an environment, psi4, and run `conda activate psi4`; Here is what I got after I run `conda info`; ```. active environment : psi4; active env location : /home/tim/anaconda3/envs/psi4; shell level : 2; user config file : /home/tim/.condarc; populated config files : /home/tim/.condarc; conda version : 4.11.0; conda-build version : 3.21.4; python version : 3.8.8.final.0; virtual packages : __linux=5.10.0=0; __glibc=2.31=0; __unix=0=0; __archspec=1=x86_64; base environment : /home/tim/anaconda3 (writable); conda av data dir : /home/tim/anaconda3/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/ngsolve/linux-64; https://conda.anaconda.org/ngsolve/noarch; https://conda.anaconda.org/conda-forge/linux-64; https://conda.anaconda.org/conda-forge/noarch; https://repo.anaconda.com/pkgs/main/linux-64; https://repo.anaconda.com/pkgs/main/noarch; https://repo.anaconda.com/pkgs/r/linux-64; https://repo.anaconda.com/pkgs/r/noarch; package cache : /home/tim/anaconda3/pkgs; /home/tim/.conda/pkgs; envs directories : /home/tim/anaconda3/envs; /home/tim/.conda/envs; platform : linux-64; user-agent : conda/4.11.0 requests/2.26.0 CPython/3.8.8 Linux/5.10.0-1052-oem ubuntu/20.04.3 glibc/2.31; UID:GID : 1000:1000; netrc file : None; offline mode : False. ```. And this is after running `~/.condarc`:. `bash: /home/tim/.condarc: Permission denied`. I try with the command you proposed with a newly created environment, psi. `conda install psi4 python=3.9 psi4::libxc`. But it appears the same as I had shown you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761
https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113:655,Availability,Avail,Available,655,"I remove these two channels. But after running; `conda create --override-channels -n p4env psi4 python=3.9 -c psi4 -c defaults`. It remains the same...; ```. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; python=3.9; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> mkl-service[version='>=2.3.0,<3.0a0'] -> python[version='>=3.10,<3.11.0a0|>=3.7|>=3.6|>=3.5|>=3.6.0|>=3.6,<3.7']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113
https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113:1204,Deployability,install,installed,1204,"I remove these two channels. But after running; `conda create --override-channels -n p4env psi4 python=3.9 -c psi4 -c defaults`. It remains the same...; ```. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; python=3.9; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> mkl-service[version='>=2.3.0,<3.0a0'] -> python[version='>=3.10,<3.11.0a0|>=3.7|>=3.6|>=3.5|>=3.6.0|>=3.6,<3.7']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113
https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113:502,Safety,abort,abort,502,"I remove these two channels. But after running; `conda create --override-channels -n p4env psi4 python=3.9 -c psi4 -c defaults`. It remains the same...; ```. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; python=3.9; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> mkl-service[version='>=2.3.0,<3.0a0'] -> python[version='>=3.10,<3.11.0a0|>=3.7|>=3.6|>=3.5|>=3.6.0|>=3.6,<3.7']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113
https://github.com/psi4/psi4/pull/2392#issuecomment-1006506298:24,Availability,error,error,24,"Looking at the Window's error message, I think libmint's integral.cc needs to use C++14, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2392#issuecomment-1006506298
https://github.com/psi4/psi4/pull/2392#issuecomment-1006506298:30,Integrability,message,message,30,"Looking at the Window's error message, I think libmint's integral.cc needs to use C++14, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2392#issuecomment-1006506298
https://github.com/psi4/psi4/pull/2392#issuecomment-1006683843:209,Testability,log,logic,209,"These lines are being utilized in libint2 headers: . https://github.com/evaleev/libint/blob/master/include/libint2/util/any.h#L46-L48. But I'm not why LIBINT_HAS_CXX17_ANY is being defined by the preprocessor logic above. Does the compilation of integral.cc have both -std=c++14 and -std=c++17 on it? If so, it seems like c++17 is overriding the request for c++14.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2392#issuecomment-1006683843
https://github.com/psi4/psi4/pull/2392#issuecomment-1006685579:1266,Availability,error,error,1266,"@jturney yeah, it's ignoring the 14 flag ; ```; 2022-01-06T15:09:42.7151758Z C:\PROGRA~1\LLVM\bin\clang-cl.exe /nologo -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /DWIN32 /D_WINDOWS /GR /EHsc -march=native /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++17 -std=c++14 /showIncludes /Fosrc\psi4\libmints\CMakeFiles\mints.dir\integral.cc.obj /Fdsrc\psi4\libmints\CMakeFiles\mints.dir\mints.pdb -c -- D:\a\1\s\psi4\src\psi4\libmints\integral.cc; 2022-01-06T15:09:42.7772130Z clang-cl: warning: unknown argument ignored in clang-cl: '-std=c++14' [-Wunknown-argument]; ```. before shorting out on `any.h`. ```; 2022-01-06T15:09:43.2968999Z In file included from D:\a\1\s\psi4\src\psi4\libmints\integral.cc:35:; 2022-01-06T15:09:43.2969944Z In file included from D:\a\1\s\psi4\src\psi4/libmints/eri.h:42:; 2022-01-06T15:09:43.2970731Z In file included from D:\a\1\s\psi4\src\psi4/libmints/shellpair.h:8:; 2022-01-06T15:09:43.2971583Z In file included from C:\tools\miniconda3\include\libint2/engine.h:53:; 2022-01-06T15:09:43.2972460Z C:\tools\miniconda3\include\libint2/util/any.h(47,11): fatal error: 'any' file not found; 2022-01-06T15:09:43.2973173Z # include <any>; 2022-01-06T15:09:43.2973795Z ^~~~~; 2022-01-06T15:09:43.2974438Z 1 warning and 1 error generated.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2392#issuecomment-1006685579
https://github.com/psi4/psi4/pull/2392#issuecomment-1006685579:1422,Availability,error,error,1422,"@jturney yeah, it's ignoring the 14 flag ; ```; 2022-01-06T15:09:42.7151758Z C:\PROGRA~1\LLVM\bin\clang-cl.exe /nologo -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /DWIN32 /D_WINDOWS /GR /EHsc -march=native /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++17 -std=c++14 /showIncludes /Fosrc\psi4\libmints\CMakeFiles\mints.dir\integral.cc.obj /Fdsrc\psi4\libmints\CMakeFiles\mints.dir\mints.pdb -c -- D:\a\1\s\psi4\src\psi4\libmints\integral.cc; 2022-01-06T15:09:42.7772130Z clang-cl: warning: unknown argument ignored in clang-cl: '-std=c++14' [-Wunknown-argument]; ```. before shorting out on `any.h`. ```; 2022-01-06T15:09:43.2968999Z In file included from D:\a\1\s\psi4\src\psi4\libmints\integral.cc:35:; 2022-01-06T15:09:43.2969944Z In file included from D:\a\1\s\psi4\src\psi4/libmints/eri.h:42:; 2022-01-06T15:09:43.2970731Z In file included from D:\a\1\s\psi4\src\psi4/libmints/shellpair.h:8:; 2022-01-06T15:09:43.2971583Z In file included from C:\tools\miniconda3\include\libint2/engine.h:53:; 2022-01-06T15:09:43.2972460Z C:\tools\miniconda3\include\libint2/util/any.h(47,11): fatal error: 'any' file not found; 2022-01-06T15:09:43.2973173Z # include <any>; 2022-01-06T15:09:43.2973795Z ^~~~~; 2022-01-06T15:09:43.2974438Z 1 warning and 1 error generated.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2392#issuecomment-1006685579
https://github.com/psi4/psi4/pull/2392#issuecomment-1007660665:84,Availability,down,downgrade,84,"for the record, these exports in export_mints.cc are what requires the cxx standard downgrade. because of these, need the libmints/eri.h header and that brings in the l2 headers. hence the export_mints reasoning is the same as that for libmints/eri.cc. ```; py::class_<Libint2TwoElectronInt, std::shared_ptr<Libint2TwoElectronInt>>(m, ""TwoElectronInt"", pyTwoBodyAOInt,; ""Computes two-electron repulsion integrals""); .def(""compute_shell"", compute_shell_ints(&TwoBodyAOInt::compute_shell), ""Compute ERIs between 4 shells""); .def(""shell_significant"", compute_shell_significant(&TwoBodyAOInt::shell_significant),; ""Determines if the P,Q,R,S shell combination is significant"");. py::class_<Libint2ERI, std::shared_ptr<Libint2ERI>>(m, ""ERI"", pyTwoBodyAOInt, ""Computes normal two electron repulsion integrals"");; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2392#issuecomment-1007660665
https://github.com/psi4/psi4/pull/2393#issuecomment-1006506830:13,Energy Efficiency,adapt,adapt,13,"I'm going to adapt the sample file, too, afterwards this can be merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2393#issuecomment-1006506830
https://github.com/psi4/psi4/pull/2393#issuecomment-1006506830:13,Modifiability,adapt,adapt,13,"I'm going to adapt the sample file, too, afterwards this can be merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2393#issuecomment-1006506830
https://github.com/psi4/psi4/pull/2395#issuecomment-1007032833:102,Testability,test,test,102,I don't understand your comment about `_mergedapis_compare_matrices`. Assume I know nothing about the test infrastructure.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2395#issuecomment-1007032833
https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:376,Availability,ping,pinging,376,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498
https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:32,Deployability,release,release,32,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498
https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:177,Deployability,configurat,configuration,177,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498
https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:813,Deployability,release,release,813,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498
https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:1131,Deployability,release,release,1131,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498
https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:1016,Energy Efficiency,adapt,adaptations,1016,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498
https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:177,Modifiability,config,configuration,177,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498
https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:1016,Modifiability,adapt,adaptations,1016,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498
https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:1171,Modifiability,config,config,1171,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498
https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:1423,Modifiability,config,config,1423,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498
https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:1525,Modifiability,config,configured,1525,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498
https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:1560,Safety,detect,detection,1560,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498
https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:1551,Usability,simpl,simply,1551,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498
https://github.com/psi4/psi4/issues/2398#issuecomment-1008110483:207,Modifiability,config,config,207,"> You also have find_package(Libint ...) that can't work because libint2 doesn't provide cmake files, and you don't provide them either. The https://github.com/loriab/libint/tree/l2cmake branch provides the config file https://github.com/loriab/libint/blob/l2cmake/cmake/Libint2Config.cmake.in via either the repo or the tarballs https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L57-L70 . If you're not familiar with l2, you'll want to familiarize with the build stages of a cmake+cmake build https://github.com/loriab/libint/blob/l2cmake/CMakeLists.txt#L26-L44 . One can use a libtool+cmake build but then you have to disable `find_package` according to my notes above, particularly https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L14-L15 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008110483
https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932:526,Availability,error,errors,526,"> You also have `find_package(Libint ...)` that can't work because libint2 doesn't provide cmake files, and you don't provide them either. libint2 does (or at least can) provide cmake files, even with the 2.6.x releases, but it's somewhat tricky. I don't think anything besides psi4 uses them, and for psi4 they are broken/much bigger issues (see above). As I mentioned in https://github.com/evaleev/libint/issues/190#issuecomment-1003936604 libint2 (experimental Debian 2.7.1 package) gets detected fine, but there are build errors later on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932
https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932:211,Deployability,release,releases,211,"> You also have `find_package(Libint ...)` that can't work because libint2 doesn't provide cmake files, and you don't provide them either. libint2 does (or at least can) provide cmake files, even with the 2.6.x releases, but it's somewhat tricky. I don't think anything besides psi4 uses them, and for psi4 they are broken/much bigger issues (see above). As I mentioned in https://github.com/evaleev/libint/issues/190#issuecomment-1003936604 libint2 (experimental Debian 2.7.1 package) gets detected fine, but there are build errors later on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932
https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932:491,Safety,detect,detected,491,"> You also have `find_package(Libint ...)` that can't work because libint2 doesn't provide cmake files, and you don't provide them either. libint2 does (or at least can) provide cmake files, even with the 2.6.x releases, but it's somewhat tricky. I don't think anything besides psi4 uses them, and for psi4 they are broken/much bigger issues (see above). As I mentioned in https://github.com/evaleev/libint/issues/190#issuecomment-1003936604 libint2 (experimental Debian 2.7.1 package) gets detected fine, but there are build errors later on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932
https://github.com/psi4/psi4/issues/2399#issuecomment-1131736286:95,Deployability,Release,Release,95,"Any chance you're building CMAKE_BUILD_TYPE=Debug? That's been seen, and healed upon switch to Release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2399#issuecomment-1131736286
https://github.com/psi4/psi4/issues/2399#issuecomment-1131914853:71,Deployability,Release,Release,71,I build in the FreeBSD ports framework and it sets ```CMAKE_BUILD_TYPE=Release``` by default.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2399#issuecomment-1131914853
https://github.com/psi4/psi4/issues/2401#issuecomment-1010171000:148,Deployability,update,update,148,"What is the option even meant to do? Only do DIIS if you have `N` vectors? This sounds like an idiotic strategy IMNSHO, since doing a bare Roothaan update will be way worse... I guess the only reasonable option is to mark it as deprecated for the next release and remove it in the subsequent one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2401#issuecomment-1010171000
https://github.com/psi4/psi4/issues/2401#issuecomment-1010171000:252,Deployability,release,release,252,"What is the option even meant to do? Only do DIIS if you have `N` vectors? This sounds like an idiotic strategy IMNSHO, since doing a bare Roothaan update will be way worse... I guess the only reasonable option is to mark it as deprecated for the next release and remove it in the subsequent one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2401#issuecomment-1010171000
https://github.com/psi4/psi4/issues/2401#issuecomment-1010176887:49,Testability,test,tests,49,"It does seem to be set to non-default in various tests https://github.com/psi4/psi4/search?p=1&q=diis_min_vecs . But if it's not providing an actual useful knob, I'm good with deprecate and remove.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2401#issuecomment-1010176887
https://github.com/psi4/psi4/issues/2401#issuecomment-1010179974:110,Testability,test,tests,110,"It sounds like we're taking the path of deprecation, then. > It does seem to be set to non-default in various tests https://github.com/psi4/psi4/search?p=1&q=diis_min_vecs . But if it's not providing an actual useful knob, I'm good with deprecate and remove. Half of those are setting an option in the DCT module, not the SCF module. As for the others, the samples were last generated pre-1.1. Something else killed the knob, perhaps the Py-side inversion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2401#issuecomment-1010179974
https://github.com/psi4/psi4/issues/2401#issuecomment-1010185016:171,Deployability,release,release,171,"> As for the others, the samples were last generated pre-1.1. Something else killed the knob, perhaps the Py-side inversion. To clarify, `samples/` are generated for each release and after #2364 will be generated for each PR. It's the `output.ref` set that are largely circa pre-1.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2401#issuecomment-1010185016
https://github.com/psi4/psi4/issues/2401#issuecomment-1010202395:106,Deployability,update,updates,106,"The only question I have is about the use of DIIS in e.g. coupled-cluster. There, one typically does bare updates combined with some DIIS iterations in-between. Is this completely unrelated to `DIIS_MIN_VECS`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2401#issuecomment-1010202395
https://github.com/psi4/psi4/issues/2401#issuecomment-1010208672:108,Deployability,update,updates,108,"> The only question I have is about the use of DIIS in e.g. coupled-cluster. There, one typically does bare updates combined with some DIIS iterations in-between. Is this completely unrelated to `DIIS_MIN_VECS`?. No. Correlation methods that use DIIS have their own `DIIS_MIN_VECS` keyword and use that to decide when to call the DIIS extrapolater. This is why I only deprecated the SCF version of the keyword.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2401#issuecomment-1010208672
https://github.com/psi4/psi4/pull/2402#issuecomment-1010765086:60,Availability,error,error,60,`test_resp_2` fails in the Linux clang build with an einsum error. (unrelated to this PR),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2402#issuecomment-1010765086
https://github.com/psi4/psi4/pull/2402#issuecomment-1011030317:50,Testability,test,tests,50,"Since I needed to make a new commit to re-trigger tests, I slightly expanded the scope of the PR to remove some `occ` DIIS keywords that were already marked deprecated during the course of the open-heart surgery series, and should have been removed one version ago.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2402#issuecomment-1011030317
https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856:9,Availability,failure,failure,9,"The test failure looks completely random. I expect this will pass tests if it goes through again. I can't re-force tests, so the best solution I have is to amend the commit message and force push the PR. That'll force another run of tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856
https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856:173,Integrability,message,message,173,"The test failure looks completely random. I expect this will pass tests if it goes through again. I can't re-force tests, so the best solution I have is to amend the commit message and force push the PR. That'll force another run of tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856
https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856:4,Testability,test,test,4,"The test failure looks completely random. I expect this will pass tests if it goes through again. I can't re-force tests, so the best solution I have is to amend the commit message and force push the PR. That'll force another run of tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856
https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856:66,Testability,test,tests,66,"The test failure looks completely random. I expect this will pass tests if it goes through again. I can't re-force tests, so the best solution I have is to amend the commit message and force push the PR. That'll force another run of tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856
https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856:115,Testability,test,tests,115,"The test failure looks completely random. I expect this will pass tests if it goes through again. I can't re-force tests, so the best solution I have is to amend the commit message and force push the PR. That'll force another run of tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856
https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856:233,Testability,test,tests,233,"The test failure looks completely random. I expect this will pass tests if it goes through again. I can't re-force tests, so the best solution I have is to amend the commit message and force push the PR. That'll force another run of tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856
https://github.com/psi4/psi4/issues/2410#issuecomment-1016642737:25,Availability,error,error,25,"@ymshi449, when you post error reports, _please_ be explicit. We need to know exactly what you are asking and exactly what the problem is. Including the details is more important than the grammar. > > Also, it seems that for `sadno`, `guess_mix` is not implemented.; > ; > wym? It should work out-of-the-box, since the `sadno` guess has orbitals like GWH. `huckel` is another possible choice. It might be that DIIS just pulls you back into the spin-restricted solution... @susilehtola ; Using your H2 example. ```; ==> Pre-Iterations <== . SCF Guess: Superposition of Atomic Densities' Natural Orbitals via on-the-fly atomic UHF (doi:10.1021/acs.jctc.8b01089). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0 ; -------------------------------------------------------; Total 10 10 1 1 1 0 ; -------------------------------------------------------. ==> Iterations <== . Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.82625214180248 -8.26252e-01 1.90467e-03 DIIS; @DF-UHF iter 2: -0.82648067782379 -2.28536e-04 2.30464e-04 DIIS; @DF-UHF iter 3: -0.82648407824246 -3.40042e-06 4.94088e-07 DIIS; @DF-UHF iter 4: -0.82648407827432 -3.18513e-11 3.29102e-08 DIIS; @DF-UHF iter 5: -0.82648407827446 -1.41887e-13 2.57430e-14 DIIS; Energy and wave function converged.; ```. Even though `set guess_mix True` is set in my input file, the output that _should_ appear (and does for `guess gwh` instead of `guess sadno`) when `guess_mix` runs does not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016642737
https://github.com/psi4/psi4/issues/2410#issuecomment-1016642737:996,Energy Efficiency,Energy,Energy,996,"@ymshi449, when you post error reports, _please_ be explicit. We need to know exactly what you are asking and exactly what the problem is. Including the details is more important than the grammar. > > Also, it seems that for `sadno`, `guess_mix` is not implemented.; > ; > wym? It should work out-of-the-box, since the `sadno` guess has orbitals like GWH. `huckel` is another possible choice. It might be that DIIS just pulls you back into the spin-restricted solution... @susilehtola ; Using your H2 example. ```; ==> Pre-Iterations <== . SCF Guess: Superposition of Atomic Densities' Natural Orbitals via on-the-fly atomic UHF (doi:10.1021/acs.jctc.8b01089). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0 ; -------------------------------------------------------; Total 10 10 1 1 1 0 ; -------------------------------------------------------. ==> Iterations <== . Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.82625214180248 -8.26252e-01 1.90467e-03 DIIS; @DF-UHF iter 2: -0.82648067782379 -2.28536e-04 2.30464e-04 DIIS; @DF-UHF iter 3: -0.82648407824246 -3.40042e-06 4.94088e-07 DIIS; @DF-UHF iter 4: -0.82648407827432 -3.18513e-11 3.29102e-08 DIIS; @DF-UHF iter 5: -0.82648407827446 -1.41887e-13 2.57430e-14 DIIS; Energy and wave function converged.; ```. Even though `set guess_mix True` is set in my input file, the output that _should_ appear (and does for `guess gwh` instead of `guess sadno`) when `guess_mix` runs does not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016642737
https://github.com/psi4/psi4/issues/2410#issuecomment-1016642737:1349,Energy Efficiency,Energy,Energy,1349,"@ymshi449, when you post error reports, _please_ be explicit. We need to know exactly what you are asking and exactly what the problem is. Including the details is more important than the grammar. > > Also, it seems that for `sadno`, `guess_mix` is not implemented.; > ; > wym? It should work out-of-the-box, since the `sadno` guess has orbitals like GWH. `huckel` is another possible choice. It might be that DIIS just pulls you back into the spin-restricted solution... @susilehtola ; Using your H2 example. ```; ==> Pre-Iterations <== . SCF Guess: Superposition of Atomic Densities' Natural Orbitals via on-the-fly atomic UHF (doi:10.1021/acs.jctc.8b01089). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0 ; -------------------------------------------------------; Total 10 10 1 1 1 0 ; -------------------------------------------------------. ==> Iterations <== . Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.82625214180248 -8.26252e-01 1.90467e-03 DIIS; @DF-UHF iter 2: -0.82648067782379 -2.28536e-04 2.30464e-04 DIIS; @DF-UHF iter 3: -0.82648407824246 -3.40042e-06 4.94088e-07 DIIS; @DF-UHF iter 4: -0.82648407827432 -3.18513e-11 3.29102e-08 DIIS; @DF-UHF iter 5: -0.82648407827446 -1.41887e-13 2.57430e-14 DIIS; Energy and wave function converged.; ```. Even though `set guess_mix True` is set in my input file, the output that _should_ appear (and does for `guess gwh` instead of `guess sadno`) when `guess_mix` runs does not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016642737
https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676:653,Energy Efficiency,Energy,Energy,653,"I tried this; ```python; psi4.set_options({""REFERENCE"": ""uhf"", ; ""guess"": ""SADNO"",; ""e_convergence"": 12,; ""basis"": ""cc-pvdz"",; ""guess_mix "": True,; }); ```; and got this; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities' Natural Orbitals via on-the-fly atomic UHF (doi:10.1021/acs.jctc.8b01089). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.82625214180248 -8.26252e-01 1.90467e-03 DIIS; @DF-UHF iter 2: -0.82648067782379 -2.28536e-04 2.30464e-04 DIIS; @DF-UHF iter 3: -0.82648407824247 -3.40042e-06 4.94088e-07 DIIS; @DF-UHF iter 4: -0.82648407827432 -3.18503e-11 3.29102e-08 DIIS; @DF-UHF iter 5: -0.82648407827446 -1.41664e-13 5.92889e-13 DIIS; ```; There seems no mixing operation and the resulting energy is different compared with GWH:; ```; ==> Pre-Iterations <==. SCF Guess: Generalized Wolfsberg-Helmholtz. Mixing alpha HOMO/LUMO orbitals (1,2). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.99581369630316 -9.95814e-01 5.27581e-03 DIIS; @DF-UHF iter 2: -0.99858566020747 -2.77196e-03 9.67632e-04 DIIS; @DF-UHF iter 3: -0.99871839991550 -1.32740e-04 1.28446e-04 DIIS; @DF-UHF iter 4: -0.99872134564656 -2.94573e-06 6.44177e-06 DIIS; @DF-UHF iter 5: -0.99872135071512 -5.06856e-09 1.24087e-06 DIIS; @DF-UHF iter 6: -0.99872135104152 -3.26405e-10 1.50846e-07 DIIS; @DF-UHF iter 7: -0.99872135104495 -3.4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676
https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676:1061,Energy Efficiency,energy,energy,1061,"f"", ; ""guess"": ""SADNO"",; ""e_convergence"": 12,; ""basis"": ""cc-pvdz"",; ""guess_mix "": True,; }); ```; and got this; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities' Natural Orbitals via on-the-fly atomic UHF (doi:10.1021/acs.jctc.8b01089). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.82625214180248 -8.26252e-01 1.90467e-03 DIIS; @DF-UHF iter 2: -0.82648067782379 -2.28536e-04 2.30464e-04 DIIS; @DF-UHF iter 3: -0.82648407824247 -3.40042e-06 4.94088e-07 DIIS; @DF-UHF iter 4: -0.82648407827432 -3.18503e-11 3.29102e-08 DIIS; @DF-UHF iter 5: -0.82648407827446 -1.41664e-13 5.92889e-13 DIIS; ```; There seems no mixing operation and the resulting energy is different compared with GWH:; ```; ==> Pre-Iterations <==. SCF Guess: Generalized Wolfsberg-Helmholtz. Mixing alpha HOMO/LUMO orbitals (1,2). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.99581369630316 -9.95814e-01 5.27581e-03 DIIS; @DF-UHF iter 2: -0.99858566020747 -2.77196e-03 9.67632e-04 DIIS; @DF-UHF iter 3: -0.99871839991550 -1.32740e-04 1.28446e-04 DIIS; @DF-UHF iter 4: -0.99872134564656 -2.94573e-06 6.44177e-06 DIIS; @DF-UHF iter 5: -0.99872135071512 -5.06856e-09 1.24087e-06 DIIS; @DF-UHF iter 6: -0.99872135104152 -3.26405e-10 1.50846e-07 DIIS; @DF-UHF iter 7: -0.99872135104495 -3.43037e-12 9.72276e-09 DIIS; @DF-UHF iter 8: -0.9987213510449",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676
https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676:1545,Energy Efficiency,Energy,Energy,1545,"s_mix "": True,; }); ```; and got this; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities' Natural Orbitals via on-the-fly atomic UHF (doi:10.1021/acs.jctc.8b01089). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.82625214180248 -8.26252e-01 1.90467e-03 DIIS; @DF-UHF iter 2: -0.82648067782379 -2.28536e-04 2.30464e-04 DIIS; @DF-UHF iter 3: -0.82648407824247 -3.40042e-06 4.94088e-07 DIIS; @DF-UHF iter 4: -0.82648407827432 -3.18503e-11 3.29102e-08 DIIS; @DF-UHF iter 5: -0.82648407827446 -1.41664e-13 5.92889e-13 DIIS; ```; There seems no mixing operation and the resulting energy is different compared with GWH:; ```; ==> Pre-Iterations <==. SCF Guess: Generalized Wolfsberg-Helmholtz. Mixing alpha HOMO/LUMO orbitals (1,2). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.99581369630316 -9.95814e-01 5.27581e-03 DIIS; @DF-UHF iter 2: -0.99858566020747 -2.77196e-03 9.67632e-04 DIIS; @DF-UHF iter 3: -0.99871839991550 -1.32740e-04 1.28446e-04 DIIS; @DF-UHF iter 4: -0.99872134564656 -2.94573e-06 6.44177e-06 DIIS; @DF-UHF iter 5: -0.99872135071512 -5.06856e-09 1.24087e-06 DIIS; @DF-UHF iter 6: -0.99872135104152 -3.26405e-10 1.50846e-07 DIIS; @DF-UHF iter 7: -0.99872135104495 -3.43037e-12 9.72276e-09 DIIS; @DF-UHF iter 8: -0.99872135104496 -1.08802e-14 1.64991e-11 DIIS; Energy and wave function converged. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676
https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676:2093,Energy Efficiency,Energy,Energy,2093,"s_mix "": True,; }); ```; and got this; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities' Natural Orbitals via on-the-fly atomic UHF (doi:10.1021/acs.jctc.8b01089). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.82625214180248 -8.26252e-01 1.90467e-03 DIIS; @DF-UHF iter 2: -0.82648067782379 -2.28536e-04 2.30464e-04 DIIS; @DF-UHF iter 3: -0.82648407824247 -3.40042e-06 4.94088e-07 DIIS; @DF-UHF iter 4: -0.82648407827432 -3.18503e-11 3.29102e-08 DIIS; @DF-UHF iter 5: -0.82648407827446 -1.41664e-13 5.92889e-13 DIIS; ```; There seems no mixing operation and the resulting energy is different compared with GWH:; ```; ==> Pre-Iterations <==. SCF Guess: Generalized Wolfsberg-Helmholtz. Mixing alpha HOMO/LUMO orbitals (1,2). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.99581369630316 -9.95814e-01 5.27581e-03 DIIS; @DF-UHF iter 2: -0.99858566020747 -2.77196e-03 9.67632e-04 DIIS; @DF-UHF iter 3: -0.99871839991550 -1.32740e-04 1.28446e-04 DIIS; @DF-UHF iter 4: -0.99872134564656 -2.94573e-06 6.44177e-06 DIIS; @DF-UHF iter 5: -0.99872135071512 -5.06856e-09 1.24087e-06 DIIS; @DF-UHF iter 6: -0.99872135104152 -3.26405e-10 1.50846e-07 DIIS; @DF-UHF iter 7: -0.99872135104495 -3.43037e-12 9.72276e-09 DIIS; @DF-UHF iter 8: -0.99872135104496 -1.08802e-14 1.64991e-11 DIIS; Energy and wave function converged. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676
https://github.com/psi4/psi4/issues/2410#issuecomment-1016685742:82,Integrability,rout,routine,82,"Oh, I see the problem: the mixing happens in `form_C` but SADNO doesn't call that routine in the zeroth iteration. I'm working on a guess agnostic fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016685742
https://github.com/psi4/psi4/issues/2410#issuecomment-1016771710:40,Testability,test,test,40,This is again good proof for a thorough test suite: the only guess that was tested was GWH...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016771710
https://github.com/psi4/psi4/issues/2410#issuecomment-1016771710:76,Testability,test,tested,76,This is again good proof for a thorough test suite: the only guess that was tested was GWH...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016771710
https://github.com/psi4/psi4/pull/2411#issuecomment-1016445183:81,Testability,test,test,81,"The PR mostly looks good. A few questions:; 1. Can we get an `output.ref` on the test?; 2. On the linked issue (#2410), you said this is a ""tentative"" fix. Does that mean anything besides that the PR isn't accepted yet?; 3. ~I'll hold off on accepting until the ""documentation"" issue is settled.~",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2411#issuecomment-1016445183
https://github.com/psi4/psi4/pull/2411#issuecomment-1016567123:304,Testability,test,test,304,"> 2. On the linked issue ([Wrong guess_mix when guess=sad #2410](https://github.com/psi4/psi4/issues/2410)), you said this is a ""tentative"" fix. Does that mean anything besides that the PR isn't accepted yet?. It means I was able to quickly identify the issue and throw together a simple fix, but not to test it ;) I still don't have a working Psi4 compile environment due to the libint2 incompatibility. Once that gets fixed, I'll have to push to get newer versions of Psi4 to compile again in Fedora.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2411#issuecomment-1016567123
https://github.com/psi4/psi4/pull/2411#issuecomment-1016567123:281,Usability,simpl,simple,281,"> 2. On the linked issue ([Wrong guess_mix when guess=sad #2410](https://github.com/psi4/psi4/issues/2410)), you said this is a ""tentative"" fix. Does that mean anything besides that the PR isn't accepted yet?. It means I was able to quickly identify the issue and throw together a simple fix, but not to test it ;) I still don't have a working Psi4 compile environment due to the libint2 incompatibility. Once that gets fixed, I'll have to push to get newer versions of Psi4 to compile again in Fedora.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2411#issuecomment-1016567123
https://github.com/psi4/psi4/pull/2411#issuecomment-1016618643:80,Energy Efficiency,Energy,Energy,80,"So... looks like it works; DIIS just takes it to the wrong solution; ```; Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -0.70872378254081 -7.08724e-01 0.00000e+00 ; Mixing alpha HOMO/LUMO orbitals (1,2). @DF-UHF iter 1: -0.82640393434897 -1.17680e-01 1.12200e-03 DIIS; @DF-UHF iter 2: -0.97800267490794 -1.51599e-01 1.18746e-02 DIIS; @DF-UHF iter 3: -0.82673929652084 1.51263e-01 9.92192e-04 DIIS; @DF-UHF iter 4: -0.82768446534307 -9.45169e-04 2.11271e-03 DIIS; @DF-UHF iter 5: -0.82648408142877 1.20038e-03 9.77585e-06 DIIS; @DF-UHF iter 6: -0.82648447847074 -3.97042e-07 3.83550e-05 DIIS; @DF-UHF iter 7: -0.82648407869393 3.99777e-07 1.24969e-06 DIIS; @DF-UHF iter 8: -0.82648407827585 4.18083e-10 7.42903e-08 DIIS; @DF-UHF iter 9: -0.82648407827446 1.38667e-12 8.54867e-10 DIIS; @DF-UHF iter 10: -0.82648407827446 7.77156e-16 1.13025e-12 DIIS; Energy and wave function converged.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2411#issuecomment-1016618643
https://github.com/psi4/psi4/pull/2411#issuecomment-1016618643:855,Energy Efficiency,Energy,Energy,855,"So... looks like it works; DIIS just takes it to the wrong solution; ```; Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -0.70872378254081 -7.08724e-01 0.00000e+00 ; Mixing alpha HOMO/LUMO orbitals (1,2). @DF-UHF iter 1: -0.82640393434897 -1.17680e-01 1.12200e-03 DIIS; @DF-UHF iter 2: -0.97800267490794 -1.51599e-01 1.18746e-02 DIIS; @DF-UHF iter 3: -0.82673929652084 1.51263e-01 9.92192e-04 DIIS; @DF-UHF iter 4: -0.82768446534307 -9.45169e-04 2.11271e-03 DIIS; @DF-UHF iter 5: -0.82648408142877 1.20038e-03 9.77585e-06 DIIS; @DF-UHF iter 6: -0.82648447847074 -3.97042e-07 3.83550e-05 DIIS; @DF-UHF iter 7: -0.82648407869393 3.99777e-07 1.24969e-06 DIIS; @DF-UHF iter 8: -0.82648407827585 4.18083e-10 7.42903e-08 DIIS; @DF-UHF iter 9: -0.82648407827446 1.38667e-12 8.54867e-10 DIIS; @DF-UHF iter 10: -0.82648407827446 7.77156e-16 1.13025e-12 DIIS; Energy and wave function converged.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2411#issuecomment-1016618643
https://github.com/psi4/psi4/pull/2411#issuecomment-1016808691:4,Testability,test,tests,4,"OK, tests appear to pass now with all guesses. I can't generate `output.ref` so I would appreciate if someone can compile the branch locally and contribute the missing files.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2411#issuecomment-1016808691
https://github.com/psi4/psi4/pull/2411#issuecomment-1016843480:17,Testability,test,test,17,"Running the same test but with different options is a perfect reason to write a pytest rather than a C-test, and no `output.ref` are needed in that case. If you can't even compile Psi, I can write the Pytest myself and submit a PR to your branch, because at least I can test it easily. Thanks for the debugging thus far!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2411#issuecomment-1016843480
https://github.com/psi4/psi4/pull/2411#issuecomment-1016843480:103,Testability,test,test,103,"Running the same test but with different options is a perfect reason to write a pytest rather than a C-test, and no `output.ref` are needed in that case. If you can't even compile Psi, I can write the Pytest myself and submit a PR to your branch, because at least I can test it easily. Thanks for the debugging thus far!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2411#issuecomment-1016843480
https://github.com/psi4/psi4/pull/2411#issuecomment-1016843480:270,Testability,test,test,270,"Running the same test but with different options is a perfect reason to write a pytest rather than a C-test, and no `output.ref` are needed in that case. If you can't even compile Psi, I can write the Pytest myself and submit a PR to your branch, because at least I can test it easily. Thanks for the debugging thus far!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2411#issuecomment-1016843480
https://github.com/psi4/psi4/issues/2412#issuecomment-1099438825:109,Modifiability,Refactor,Refactor,109,"- [ ] `ccenergy/rotate.cc` is the only file in all of `ccenergy` that bothers with QT -> Pitzer conversions. Refactor that file using modern libmints tech (`Dimension`, `Slice`, `Matrix`) and then purge any mention of QT vs Pitzer from `ccenergy`; - [ ] `ccenergy` has a wavefunction, so we should be able to remove most of `MOInfo` from there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2412#issuecomment-1099438825
https://github.com/psi4/psi4/issues/2412#issuecomment-1123731523:37,Deployability,Integrat,IntegrationGrid,37,"- [ ] Rename the `DFTGrid` class to `IntegrationGrid`. As written, it's confusing that non-DFT classes use it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2412#issuecomment-1123731523
https://github.com/psi4/psi4/issues/2412#issuecomment-1123731523:37,Integrability,Integrat,IntegrationGrid,37,"- [ ] Rename the `DFTGrid` class to `IntegrationGrid`. As written, it's confusing that non-DFT classes use it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2412#issuecomment-1123731523
https://github.com/psi4/psi4/issues/2412#issuecomment-1123943135:428,Integrability,depend,dependence,428,"* [ ] Remove the unused `PseudospectralGrid` class from `cubature.cc` and references to it throughout the code (particularly `read_options.cc`).; * [ ] Refactor the `DFTGrid` class so that the constructor accepts a single `std::map<std::string, std::any>` map instead of individual maps of different data types as noted [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L4314).; * [ ] Remove the dependence of the `DFTGrid` on global options.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2412#issuecomment-1123943135
https://github.com/psi4/psi4/issues/2412#issuecomment-1123943135:152,Modifiability,Refactor,Refactor,152,"* [ ] Remove the unused `PseudospectralGrid` class from `cubature.cc` and references to it throughout the code (particularly `read_options.cc`).; * [ ] Refactor the `DFTGrid` class so that the constructor accepts a single `std::map<std::string, std::any>` map instead of individual maps of different data types as noted [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L4314).; * [ ] Remove the dependence of the `DFTGrid` on global options.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2412#issuecomment-1123943135
https://github.com/psi4/psi4/pull/2413#issuecomment-1021327038:37,Safety,safe,safest,37,"I think that renaming is perhaps the safest solution; without namespacing these kinds of macros it's possible to run into a situation where the two codes have the same macro name that returns a different result, which would cause chaos. If you just want to get rid of the warnings (given that we know that L2 and Psi4 both have the same meaning of `INT_CART`) we could also just ensure that the L2 headers are included before Psi4 defines the macros; the `#if !defined(INT_CART)` will ensure we don't redefine the macro.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2413#issuecomment-1021327038
https://github.com/psi4/psi4/issues/2414#issuecomment-1064376101:16,Deployability,update,updated,16,"Good to know, I updated my comment... Would be good to have tests for these integrals though. @andysim could the pseudospectral ints be handled by M-D somehow?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2414#issuecomment-1064376101
https://github.com/psi4/psi4/issues/2414#issuecomment-1064376101:60,Testability,test,tests,60,"Good to know, I updated my comment... Would be good to have tests for these integrals though. @andysim could the pseudospectral ints be handled by M-D somehow?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2414#issuecomment-1064376101
https://github.com/psi4/psi4/issues/2414#issuecomment-1064385520:41,Modifiability,plugin,plugin,41,"Tests would definitely be good. I have a plugin that uses these integrals (and works), so I at least know nothing is broken. Actually, I wonder why we aren't computing the pseudospectral integrals with libint2 now. They're closely related to standard one electron potential integrals that we use in Psi4. . For semi-numerical exchange, I use the `PseudospectralInt` class to compute integrals of the form:; ```<m|1 /(r-r_p) |n>```; where `r_p` is a DFT grid point. This is identical to the nuclear integrals here:; https://github.com/evaleev/libint/wiki/using-modern-CPlusPlus-API#create-an-integral-engine",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2414#issuecomment-1064385520
https://github.com/psi4/psi4/issues/2414#issuecomment-1064385520:0,Testability,Test,Tests,0,"Tests would definitely be good. I have a plugin that uses these integrals (and works), so I at least know nothing is broken. Actually, I wonder why we aren't computing the pseudospectral integrals with libint2 now. They're closely related to standard one electron potential integrals that we use in Psi4. . For semi-numerical exchange, I use the `PseudospectralInt` class to compute integrals of the form:; ```<m|1 /(r-r_p) |n>```; where `r_p` is a DFT grid point. This is identical to the nuclear integrals here:; https://github.com/evaleev/libint/wiki/using-modern-CPlusPlus-API#create-an-integral-engine",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2414#issuecomment-1064385520
https://github.com/psi4/psi4/issues/2414#issuecomment-1064423492:77,Security,access,accessed,77,"The PseudoSpectral stuff should move to the attic as it's neither tested nor accessed, but I understand there is work on COSX which would re-use parts of it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2414#issuecomment-1064423492
https://github.com/psi4/psi4/issues/2414#issuecomment-1064423492:66,Testability,test,tested,66,"The PseudoSpectral stuff should move to the attic as it's neither tested nor accessed, but I understand there is work on COSX which would re-use parts of it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2414#issuecomment-1064423492
https://github.com/psi4/psi4/issues/2414#issuecomment-1065111417:23,Deployability,update,updated,23,"Thanks for clarifying, updated my comment above 👍",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2414#issuecomment-1065111417
https://github.com/psi4/psi4/issues/2416#issuecomment-1025977577:160,Security,secur,security,160,"FWIW the default compiler flags in Fedora 35 x86_64 are; ```; -O2 -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection; ```; which also includes the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. These flags were made default in 2019, see https://fedoraproject.org/wiki/Changes/HardenedCompiler for the rationale.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1025977577
https://github.com/psi4/psi4/issues/2416#issuecomment-1026016684:419,Modifiability,variab,variables,419,"These flags are set by the compiler packages, I think. They are to enable building your own conda packages IIRC.; But I also had cases where I wasn't aware of this and it severely messed up compilation of some unrelated programs that use plain Makefiles. I think cmake will largely ignore those flags for psi4. There are (de)activate scripts in `/env/<name>/etc/conda/(de)activate.d` responsible for setting these env. variables.; Not sure there are flags that turn them off, the last resort is to remove them. FWIW, building psi4 is also simple without the `psi4-dev` package. It's advantage is that it ensures compatible compilers, tooling and a couple of cmake flags. If you are knowledgable you can set them yourself. To compile against conda-provided mkl, libint2, etc the `psi4-dev` is not needed. The normal `psi4` package is enough.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026016684
https://github.com/psi4/psi4/issues/2416#issuecomment-1026016684:539,Usability,simpl,simple,539,"These flags are set by the compiler packages, I think. They are to enable building your own conda packages IIRC.; But I also had cases where I wasn't aware of this and it severely messed up compilation of some unrelated programs that use plain Makefiles. I think cmake will largely ignore those flags for psi4. There are (de)activate scripts in `/env/<name>/etc/conda/(de)activate.d` responsible for setting these env. variables.; Not sure there are flags that turn them off, the last resort is to remove them. FWIW, building psi4 is also simple without the `psi4-dev` package. It's advantage is that it ensures compatible compilers, tooling and a couple of cmake flags. If you are knowledgable you can set them yourself. To compile against conda-provided mkl, libint2, etc the `psi4-dev` is not needed. The normal `psi4` package is enough.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026016684
https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875:176,Modifiability,variab,variable,176,"With early CMake I had the impression that it didn't collect compilers and flags from ""standard"" envvars (it doesn't say it will before 3.12 https://cmake.org/cmake/help/v3.12/variable/CMAKE_LANG_FLAGS.html), so I wasn't concerned with the Conda flag set. Also, all the psi4's native build knobs get appended to `CMAKE_CXX_FLAGS`, so many of the conda ones are superseded. For actual psi conda package builds, any gnu flags not recognized by the Intel compiler will also be discarded. I can see how there might be modest performance concerns with some of the conda flags like `FORTIFY_SOURCE=2`, but I'm not sure they're worth the trouble of resisting. If you've found otherwise, I'd be interested to hear. It's assuring to learn that Fedora also imposes some of those flags.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875
https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875:521,Performance,perform,performance,521,"With early CMake I had the impression that it didn't collect compilers and flags from ""standard"" envvars (it doesn't say it will before 3.12 https://cmake.org/cmake/help/v3.12/variable/CMAKE_LANG_FLAGS.html), so I wasn't concerned with the Conda flag set. Also, all the psi4's native build knobs get appended to `CMAKE_CXX_FLAGS`, so many of the conda ones are superseded. For actual psi conda package builds, any gnu flags not recognized by the Intel compiler will also be discarded. I can see how there might be modest performance concerns with some of the conda flags like `FORTIFY_SOURCE=2`, but I'm not sure they're worth the trouble of resisting. If you've found otherwise, I'd be interested to hear. It's assuring to learn that Fedora also imposes some of those flags.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875
https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875:724,Usability,learn,learn,724,"With early CMake I had the impression that it didn't collect compilers and flags from ""standard"" envvars (it doesn't say it will before 3.12 https://cmake.org/cmake/help/v3.12/variable/CMAKE_LANG_FLAGS.html), so I wasn't concerned with the Conda flag set. Also, all the psi4's native build knobs get appended to `CMAKE_CXX_FLAGS`, so many of the conda ones are superseded. For actual psi conda package builds, any gnu flags not recognized by the Intel compiler will also be discarded. I can see how there might be modest performance concerns with some of the conda flags like `FORTIFY_SOURCE=2`, but I'm not sure they're worth the trouble of resisting. If you've found otherwise, I'd be interested to hear. It's assuring to learn that Fedora also imposes some of those flags.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875
https://github.com/psi4/psi4/issues/2416#issuecomment-1026051711:99,Modifiability,plugin,plugins,99,"> I think cmake will largely ignore those flags for psi4. Not true by default. Some Psi4 files and plugins like CCT3 are affected.; ```; make --trace; ...; cd /home/gytibor/psi4/objdir/psi4-core-prefix/src/psi4-core-build/src/psi4/libdiis && /home/gytibor/.conda/envs/psi4gcc/bin/x86_64-conda-linux-gnu-c++ -DUSING_LAPACK_MKL -I/home/gytibor/psi4/psi4/include -I/home/gytibor/psi4/psi4/src -I/home/gytibor/.conda/envs/psi4gcc/include/python3.9 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include -march=native -O3 -DNDEBUG -fPIC -fvisibility=hidden -fvisibility-inlines-hidden -fopenmp -std=c++1z -MD -MT src/psi4/libdiis/CMakeFiles/diis.dir/diismanager.cc.o -MF CMakeFiles/diis.dir/diismanager.cc.o.d -o CMakeFiles/diis.dir/diismanager.cc.o -c /home/gytibor/psi4/psi4/src/psi4/libdiis/diismanager.cc; ```; Interestingly, `-DCMAKE_Fortran_FLAGS="""" -DCMAKE_CXX_FLAGS="""" -DCMAKE_C_FLAGS=""""` not only appends to, but removes the flags coming from conda:; ```; make --trace; ...; cd /home/gytibor/psi4/objdir/psi4-core-prefix/src/psi4-core-build/src/psi4/libdiis && /home/gytibor/.conda/envs/psi4gcc/bin/x86_64-conda-linux-gnu-c++ -DUSING_LAPACK_MKL -I/home/gytibor/psi4/psi4/include -I/home/gytibor/psi4/psi4/src -I/home/gytibor/.conda/envs/psi4gcc/include/python3.9 -isystem /home/gytibor/.conda/envs/psi4gcc/include -march=native -O3 -DNDEBUG -fPIC -fvisibility=hidden -fvisibility-inlines-hidden -fopenmp -std=c++1z -MD -MT src/psi4/libdiis/CMakeFiles/diis.dir/diismanager.cc.o -MF CMakeFiles/diis.dir/diismanager.cc.o.d -o CMakeFiles/diis.dir/diismanager.cc.o -c /home/gytibor/psi4/psi4/src/psi4/libdiis/diismanager.cc; ```; Probably the easiest way to keep the conda flags out of the build?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026051711
https://github.com/psi4/psi4/pull/2419#issuecomment-1029167139:103,Availability,avail,available,103,"> Cool! Just as a remark: I suggest to default to adcc in procrouting as well for ADC(2) in case it is available. Right now the default is still the builtin. I'm in favor, but this sounds like the sort of thing other developers may object to, so I'll defer to popular opinion before deciding to adopt or not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1029167139
https://github.com/psi4/psi4/pull/2419#issuecomment-1029193405:621,Safety,avoid,avoid,621,"> Could we catch the case where users request multiple roots and stop the program? Fewer and fewer people look at the actual output files.; > ; > I would also support the more extreme solution of just fully disabling the internal adc. Better some potential inconvenience than wrong results. 1. This is possible in principle, but I don't know _exactly_ what conditions trigger the bug, so there may be some single-root cases that also trigger it.; 2. Removing the buggy internal ADC was my original proposal on the January conference call, but @fevangelista disapproved without a deprecation period first. I was hoping to avoid an argument about ""remove vs deprecate"" as not a good use of my time, but if we're going to have the argument anyways, I'm on the remove side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1029193405
https://github.com/psi4/psi4/pull/2419#issuecomment-1029233827:316,Deployability,install,install,316,"Well since the argument came up again: I'm all for removal, because with `adcc`, we can guarantee a) correct results (several test cases!) b) all sorts of properties and c) up-to-date documentation. The step to go from requesting a psi-internal ADC calc to having the same job running with `adcc` is a simple `conda install`. IMHO there should not be a ""deprecation phase"" for a feature which is obviously broken and a full replacement is already there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1029233827
https://github.com/psi4/psi4/pull/2419#issuecomment-1029233827:126,Testability,test,test,126,"Well since the argument came up again: I'm all for removal, because with `adcc`, we can guarantee a) correct results (several test cases!) b) all sorts of properties and c) up-to-date documentation. The step to go from requesting a psi-internal ADC calc to having the same job running with `adcc` is a simple `conda install`. IMHO there should not be a ""deprecation phase"" for a feature which is obviously broken and a full replacement is already there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1029233827
https://github.com/psi4/psi4/pull/2419#issuecomment-1029233827:302,Usability,simpl,simple,302,"Well since the argument came up again: I'm all for removal, because with `adcc`, we can guarantee a) correct results (several test cases!) b) all sorts of properties and c) up-to-date documentation. The step to go from requesting a psi-internal ADC calc to having the same job running with `adcc` is a simple `conda install`. IMHO there should not be a ""deprecation phase"" for a feature which is obviously broken and a full replacement is already there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1029233827
https://github.com/psi4/psi4/pull/2419#issuecomment-1030693330:70,Deployability,install,install,70,"I suppose if people want to get the ""broken"" version of ADC, they can install Psi4 between (at least) 1.3.2 and 1.5, right? I don't think we need to deprecate features that don't work, and if `adcc` is a ""drop-in"" replacement for ADC, I'd too **vote for removal**. Maybe in 1.6, and perhaps 1.7, calls to ADC should be shimmed to `adcc` with a deprecation warning, and afterwards the ADC interface removed (if it's different than `adcc`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1030693330
https://github.com/psi4/psi4/pull/2419#issuecomment-1030693330:388,Integrability,interface,interface,388,"I suppose if people want to get the ""broken"" version of ADC, they can install Psi4 between (at least) 1.3.2 and 1.5, right? I don't think we need to deprecate features that don't work, and if `adcc` is a ""drop-in"" replacement for ADC, I'd too **vote for removal**. Maybe in 1.6, and perhaps 1.7, calls to ADC should be shimmed to `adcc` with a deprecation warning, and afterwards the ADC interface removed (if it's different than `adcc`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1030693330
https://github.com/psi4/psi4/pull/2419#issuecomment-1031759768:131,Testability,test,test,131,"(2) was never discussed on the conference call, so I'll take that option for this PR. The driver-side changes are straightforward, test changes should be as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1031759768
https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700:31,Availability,avail,available,31,"Default switched to `adcc`, if available. Old test cases for built-in code still use the built-in code. Fixed a bug where it was impossible to _select_ the built-in code. Docs updated accordingly. @loriab @maxscheurer @mfherbst",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700
https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700:176,Deployability,update,updated,176,"Default switched to `adcc`, if available. Old test cases for built-in code still use the built-in code. Fixed a bug where it was impossible to _select_ the built-in code. Docs updated accordingly. @loriab @maxscheurer @mfherbst",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700
https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700:46,Testability,test,test,46,"Default switched to `adcc`, if available. Old test cases for built-in code still use the built-in code. Fixed a bug where it was impossible to _select_ the built-in code. Docs updated accordingly. @loriab @maxscheurer @mfherbst",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700
https://github.com/psi4/psi4/pull/2419#issuecomment-1031840751:21,Testability,test,test,21,"Great, will merge on test pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1031840751
https://github.com/psi4/psi4/issues/2427#issuecomment-1032300043:37,Integrability,depend,dependency,37,"Thanks for the report. You're right, dependency handling in that l2 fork is lacking. I think I've finally got dependencies straight in the successor to the fork https://github.com/evaleev/libint/pull/233/files#diff-8e69ff48dd421c27038dafc327ded859e9be46b2e1aecec070d8b263a7b03d02R266 . Note that depending on how you build the l2 library, those boost headers may be bundled with it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2427#issuecomment-1032300043
https://github.com/psi4/psi4/issues/2427#issuecomment-1032300043:110,Integrability,depend,dependencies,110,"Thanks for the report. You're right, dependency handling in that l2 fork is lacking. I think I've finally got dependencies straight in the successor to the fork https://github.com/evaleev/libint/pull/233/files#diff-8e69ff48dd421c27038dafc327ded859e9be46b2e1aecec070d8b263a7b03d02R266 . Note that depending on how you build the l2 library, those boost headers may be bundled with it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2427#issuecomment-1032300043
https://github.com/psi4/psi4/issues/2427#issuecomment-1032300043:296,Integrability,depend,depending,296,"Thanks for the report. You're right, dependency handling in that l2 fork is lacking. I think I've finally got dependencies straight in the successor to the fork https://github.com/evaleev/libint/pull/233/files#diff-8e69ff48dd421c27038dafc327ded859e9be46b2e1aecec070d8b263a7b03d02R266 . Note that depending on how you build the l2 library, those boost headers may be bundled with it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2427#issuecomment-1032300043
https://github.com/psi4/psi4/pull/2428#issuecomment-1036473227:4,Usability,simpl,simplicity,4,For simplicity `cond == True`/`False` is converted to `cond`/`not cond`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2428#issuecomment-1036473227
https://github.com/psi4/psi4/pull/2429#issuecomment-1033094388:120,Availability,error,errors,120,I'm not sure what's wrong with this. It works fine locally (gcc 9) with new l2. With old l2 I get other unrelated build errors. pausing investigation.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2429#issuecomment-1033094388
https://github.com/psi4/psi4/pull/2429#issuecomment-1033134014:165,Testability,test,tests,165,"We want to kill the L2 fork anyways, so let's remove the temptation to support multiple L2 and go with (1). Thanks for your efforts, Lori and Max. I'll approve once tests pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2429#issuecomment-1033134014
https://github.com/psi4/psi4/issues/2431#issuecomment-1036166160:315,Availability,error,error,315,"The bug is now fixed in master Psi. Expect a v1.5.1 where this issue is also fixed. The reporter who brought this issue to our attention also claimed an issue in B3LYP (which we have tried and failed to reproduce) but did not provide a complete example of what they did to produce an issue, so the report may be in error. If the report can be verified, that will belong in a separate issue. This issue is very specifically about range-separated functionals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2431#issuecomment-1036166160
https://github.com/psi4/psi4/issues/2432#issuecomment-1033834314:40,Usability,feedback,feedback,40,"Thanks both for the quick responses and feedback. @loriab, any objections to me going ahead and making the discussed changes now? (Changing `onepdm` to `opdm` wherever it appears in `cc` also sounds good to me.) The question is whether to bother deprecating the old keywords, since we're including some behavior changes as well. These keywords are so obscure that I don't think deprecation is worth the effort.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2432#issuecomment-1033834314
https://github.com/psi4/psi4/issues/2439#issuecomment-1037759512:134,Integrability,interface,interface,134,"The key change is that in 1.3.2, psi4 was using Libint1. Now in 1.4 and 1.5, psi4 uses Libint2 that is much capable and has a cleaner interface and is maintained. Along with that is better screening, and it looks like you've hit a case that didn't have an expected use, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/twobody.cc#L244-L249 . If you're exploring, perhaps switch to ab|ab to proceed. If the aa|bb was deliberate, let us know, though there probably won't be a prompt change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1037759512
https://github.com/psi4/psi4/issues/2439#issuecomment-1038447736:386,Availability,Error,Error,386,"Thank you very much for your comment. I looked at the code tried as you suggested (ab|ab); ```python; aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnH.basisset(), wfnO.basisset(), wfnH.basisset())); ```; and it returned this; ```; ---> 28 aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnH.basisset(), wfnO.basisset(), wfnH.basisset())); 29 aoeriHO.shape. RuntimeError: ; Fatal Error: If different basis sets exist in the bra, basis3 is expected to be dummy in setup_sieve(); Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1638121835567/work/psi4/src/psi4/libmints/twobody.cc on line: 256; The most recent 5 function calls were:. psi::TwoBodyAOInt::setup_sieve(); psi::IntegralFactory::eri(int, bool, bool); ```; May I ask what is the meaning of this error?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1038447736
https://github.com/psi4/psi4/issues/2439#issuecomment-1038447736:484,Availability,Error,Error,484,"Thank you very much for your comment. I looked at the code tried as you suggested (ab|ab); ```python; aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnH.basisset(), wfnO.basisset(), wfnH.basisset())); ```; and it returned this; ```; ---> 28 aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnH.basisset(), wfnO.basisset(), wfnH.basisset())); 29 aoeriHO.shape. RuntimeError: ; Fatal Error: If different basis sets exist in the bra, basis3 is expected to be dummy in setup_sieve(); Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1638121835567/work/psi4/src/psi4/libmints/twobody.cc on line: 256; The most recent 5 function calls were:. psi::TwoBodyAOInt::setup_sieve(); psi::IntegralFactory::eri(int, bool, bool); ```; May I ask what is the meaning of this error?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1038447736
https://github.com/psi4/psi4/issues/2439#issuecomment-1038447736:785,Availability,error,error,785,"Thank you very much for your comment. I looked at the code tried as you suggested (ab|ab); ```python; aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnH.basisset(), wfnO.basisset(), wfnH.basisset())); ```; and it returned this; ```; ---> 28 aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnH.basisset(), wfnO.basisset(), wfnH.basisset())); 29 aoeriHO.shape. RuntimeError: ; Fatal Error: If different basis sets exist in the bra, basis3 is expected to be dummy in setup_sieve(); Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1638121835567/work/psi4/src/psi4/libmints/twobody.cc on line: 256; The most recent 5 function calls were:. psi::TwoBodyAOInt::setup_sieve(); psi::IntegralFactory::eri(int, bool, bool); ```; May I ask what is the meaning of this error?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1038447736
https://github.com/psi4/psi4/issues/2439#issuecomment-1038487993:20,Availability,ping,ping,20,Obligatory @andysim ping. @ymshi449 : Can I ask what you're trying to get? It looks like you want to get just the integrals on a certain block of atoms of a single molecule. There may be a better way to do this.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1038487993
https://github.com/psi4/psi4/issues/2439#issuecomment-1038496348:148,Energy Efficiency,energy,energy,148,"Sure! I need to calculate the integrals of AOs ERI between different molecules at different locations. Eventually, I need to calculate Hartree-like energy BETWEEN two molecules, i.e. $\int drdr' \frac{n_{mol1}(r)n_{mol2}(r')}{|r-r'|}$.; I can define a Psi4 geometry and basis set of two molecules together and calculate the ao_eri of that entire basis set. But this will take a little more calculation and memory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1038496348
https://github.com/psi4/psi4/issues/2439#issuecomment-1040499590:373,Availability,error,error,373,"The problem here is related to the screening setup. The integral objects now compute diagonal elements of the integrals for screening purposes. When all four basis sets are the same, it's clear how this should be done. When there are different basis sets in the bra and ket, it's not obvious but it's also not a use case we had ever encountered so I chose to just raise an error. I think the best (and cleanest) approach for what you're trying to do is to make a basis set for the supermolecule, and have nested loops over the appropriate shells for molecules A and B. This is how the same problem is handled in SAPT and friends. If the two basis sets are really needed, we can revisit the way the Schwarz inequality list is constructed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1040499590
https://github.com/psi4/psi4/issues/2439#issuecomment-1040499590:188,Usability,clear,clear,188,"The problem here is related to the screening setup. The integral objects now compute diagonal elements of the integrals for screening purposes. When all four basis sets are the same, it's clear how this should be done. When there are different basis sets in the bra and ket, it's not obvious but it's also not a use case we had ever encountered so I chose to just raise an error. I think the best (and cleanest) approach for what you're trying to do is to make a basis set for the supermolecule, and have nested loops over the appropriate shells for molecules A and B. This is how the same problem is handled in SAPT and friends. If the two basis sets are really needed, we can revisit the way the Schwarz inequality list is constructed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1040499590
https://github.com/psi4/psi4/pull/2440#issuecomment-1039497391:7,Availability,error,error,7,"ah, CI error is Windows-2016 dev-env brown-out. We know psi+Azure can work on Windows-2022 from #2415 but I don't know if that newer runtime libs and clang has adverse effects for the conda package. not an issue for this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2440#issuecomment-1039497391
https://github.com/psi4/psi4/pull/2440#issuecomment-1041548230:25,Usability,simpl,simple,25,"Given that these are the simple cases, I'm comfortable merging this in without TDC approval so I can move on to the next PR in the series.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2440#issuecomment-1041548230
https://github.com/psi4/psi4/pull/2443#issuecomment-1042382675:89,Testability,test,tests,89,"Thanks for the fast response!. Certainly, there's no EOM_CCSD_T or EOM_CCSD_aT case, but tests indicate that [the code](https://github.com/psi4/psi4/pull/2443/files#diff-2f1ed4b75aa797473dd489be513586a6cf24e9a6e22327517476beed9313c1f0R298-R313) fires even in single-state calculations, so the `CCSD_T` and `CCSD_aT` checks are necessary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2443#issuecomment-1042382675
https://github.com/psi4/psi4/pull/2445#issuecomment-1043181522:318,Performance,optimiz,optimization,318,"> Have you thought about emitting a warning for cases which converge to within `1e-3` but not within `1e-6`?. In my experience, it's not worth warning about. > Also, if `1e-3` is deemed good enough to go on, why bother converging to `1e-6` in the first place?. My reasons are primarily aesthetic. This is a very cheap optimization, so while there's no practical benefit, there is also no practical cost.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2445#issuecomment-1043181522
https://github.com/psi4/psi4/pull/2446#issuecomment-1045014086:31,Availability,error,error,31,"ok, the `dft_blocking_schemes` error only appears with a new l2, so for now this PR is good to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446#issuecomment-1045014086
https://github.com/psi4/psi4/pull/2446#issuecomment-1045032535:11,Testability,test,testing,11,"Instead of testing for +-2 a one could add `""DFT_WEIGHTS_TOLERANCE"": -1.0` to the pytest (with new reference values) to remove numerical issues. In case the issue appears again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446#issuecomment-1045032535
https://github.com/psi4/psi4/pull/2446#issuecomment-1045129372:13,Testability,test,testing,13,"> Instead of testing for +-2 a one could add ""DFT_WEIGHTS_TOLERANCE"": -1.0 to the pytest (with new reference values) to remove numerical issues. In case the issue appears again. grand idea! I've done it here https://github.com/psi4/psi4/pull/2413/files#diff-ae2f922962c992ce2cab616a14af6da28727b696abada7f8b1c6f92bfd2cb4de",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446#issuecomment-1045129372
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:347,Availability,failure,failure,347,"@PeterKraus . > I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:1497,Availability,FAILURE,FAILURES,1497,"s I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:5704,Availability,robust,robust,5704,"t_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. inputdatloc = '/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/tests/tu1-h2o-energy/test_input.py', extra_infiles = None, outfiles = None. def ctest_runner(inputdatloc, extra_infiles: List =None, outfiles: List =None):; """"""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths not robust; psiimport = Path(psi4.__file__).parent.parent; env = os.environ.copy(); env[""PYTHONPATH""] = env[""PYTHONPATH""] + os.pathsep + str(psiimport); ; ctestdir = Path(inputdatloc).resolve().parent; ; if (ctestdir / ""input.dat"").exists():; inputdat = ""input.dat""; elif (ctestdir / ""input.py"").exists():; inputdat = ""input.py""; ; infiles = [inputdat]; if extra_infiles:; infiles.extend(extra_infiles); infiles_with_contents = {Path(fl).name: (ctestdir / fl).read_text() for fl in infiles}; ; # Note: The simple `command = [""psi4"", ""input.dat""]` works fine for Linux and Mac but not for Windows.; # L/M/W ok with `command = [which(""psi4""), ""input.dat""]` where `which` on Windows finds the psi4.bat file that points to the psi4 python script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `imp",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:1352,Energy Efficiency,energy,energy,1352,"sual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:1916,Energy Efficiency,energy,energy,1916,"===========================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2076,Energy Efficiency,energy,energy,2076,"nv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tS",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2170,Energy Efficiency,ENERGY,ENERGY,2170,"ollected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2188,Energy Efficiency,energy,energy,2188,"ollected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3069,Energy Efficiency,energy,energy,3069,"gy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ---------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3095,Energy Efficiency,energy,energy,3095,"gy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ---------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3832,Energy Efficiency,energy,energy,3832,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:4254,Energy Efficiency,energy,energy,4254,"6.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. inputdatloc = '/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/tests/tu1-h2o-energy/test_input.py', extra_infiles = None, outfiles = None. def cte",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:4706,Energy Efficiency,energy,energy,4706,"idth}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. inputdatloc = '/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/tests/tu1-h2o-energy/test_input.py', extra_infiles = None, outfiles = None. def ctest_runner(inputdatloc, extra_infiles: List =None, outfiles: List =None):; """"""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:5053,Energy Efficiency,energy,energy,5053,"-------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. inputdatloc = '/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/tests/tu1-h2o-energy/test_input.py', extra_infiles = None, outfiles = None. def ctest_runner(inputdatloc, extra_infiles: List =None, outfiles: List =None):; """"""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths not robust; psiimport = Path(psi4.__file__).parent.parent; env = os.environ.copy(); env[""PYTHONPATH""] = env[""PYTHONPATH""] + os.pathsep + str(psiimport); ; ctestdir = Path(inputdatloc).resolve().parent; ; if (ctestdir / ""input.dat"").exists():; inputdat = ""input.dat""; elif (ctestdir / ""input.py"").exists():; inputdat = ""in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:7213,Energy Efficiency,energy,energy,7213," for fl in infiles}; ; # Note: The simple `command = [""psi4"", ""input.dat""]` works fine for Linux and Mac but not for Windows.; # L/M/W ok with `command = [which(""psi4""), ""input.dat""]` where `which` on Windows finds the psi4.bat file that points to the psi4 python script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `import psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.0266327",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8106,Energy Efficiency,energy,energy,8106," output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ========================================================",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8431,Energy Efficiency,energy,energy,8431,"ec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8510,Energy Efficiency,ENERGY,ENERGY,8510," 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAIL",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8528,Energy Efficiency,energy,energy,8528," 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAIL",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8650,Energy Efficiency,energy,energy,8650," 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAIL",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:9275,Energy Efficiency,energy,energy,9275,"handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAILED; =============================================================================================== 2 failed, 1 passed, 3504 deselected in 6.20s ================================================================================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:9425,Energy Efficiency,energy,energy,9425,"handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAILED; =============================================================================================== 2 failed, 1 passed, 3504 deselected in 6.20s ================================================================================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:9489,Energy Efficiency,energy,energy,9489,"handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAILED; =============================================================================================== 2 failed, 1 passed, 3504 deselected in 6.20s ================================================================================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2766,Integrability,message,message,2766,".mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3078,Integrability,message,message,3078,"gy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ---------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3295,Integrability,message,message,3295,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ___________________",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3764,Integrability,message,message,3764,"ose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:7846,Integrability,message,message,7846,"r pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8034,Integrability,message,message,8034,"utdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; =========================================================================================",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:1112,Modifiability,config,configfile,1112," pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:1136,Modifiability,plugin,plugins,1136,"th pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2150,Modifiability,variab,variable,2150,"ollected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:6081,Modifiability,extend,extend,6081,"None. def ctest_runner(inputdatloc, extra_infiles: List =None, outfiles: List =None):; """"""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths not robust; psiimport = Path(psi4.__file__).parent.parent; env = os.environ.copy(); env[""PYTHONPATH""] = env[""PYTHONPATH""] + os.pathsep + str(psiimport); ; ctestdir = Path(inputdatloc).resolve().parent; ; if (ctestdir / ""input.dat"").exists():; inputdat = ""input.dat""; elif (ctestdir / ""input.py"").exists():; inputdat = ""input.py""; ; infiles = [inputdat]; if extra_infiles:; infiles.extend(extra_infiles); infiles_with_contents = {Path(fl).name: (ctestdir / fl).read_text() for fl in infiles}; ; # Note: The simple `command = [""psi4"", ""input.dat""]` works fine for Linux and Mac but not for Windows.; # L/M/W ok with `command = [which(""psi4""), ""input.dat""]` where `which` on Windows finds the psi4.bat file that points to the psi4 python script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `import psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = ou",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8490,Modifiability,variab,variable,8490," 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAIL",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:57,Testability,assert,assertion,57,"@PeterKraus . > I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:126,Testability,test,test,126,"@PeterKraus . > I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:172,Testability,Assert,AssertionError,172,"@PeterKraus . > I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:261,Testability,assert,assertion,261,"@PeterKraus . > I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:526,Testability,test,tests,526,"@PeterKraus . > I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:722,Testability,test,tests,722,"@PeterKraus . > I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:857,Testability,test,test,857,"@PeterKraus . > I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:1072,Testability,test,testgcc,1072," pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:1241,Testability,test,tests,1241,"tions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:1285,Testability,test,tests,1285,"ng pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:1338,Testability,test,tests,1338,"sual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2095,Testability,assert,assert,2095,"nv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tS",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2213,Testability,test,tests,2213,"3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', ret",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2504,Testability,test,testing,2504,"py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2563,Testability,test,testing,2563,"=====================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2692,Testability,test,testing,2692,"___________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); pr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3429,Testability,Test,TestComparisonError,3429,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ___________________",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3744,Testability,Test,TestComparisonError,3744,"ose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3806,Testability,Test,TestComparisonError,3806,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3974,Testability,test,testing,3974,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3990,Testability,Test,TestComparisonError,3990,"6.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. inputdatloc = '/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/tests/tu1-h2o-energy/test_input.py', extra_infiles = None, outfiles = None. def cte",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:4692,Testability,test,tests,4692,"idth}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. inputdatloc = '/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/tests/tu1-h2o-energy/test_input.py', extra_infiles = None, outfiles = None. def ctest_runner(inputdatloc, extra_infiles: List =None, outfiles: List =None):; """"""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:5000,Testability,test,testgcc,5000,"-------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. inputdatloc = '/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/tests/tu1-h2o-energy/test_input.py', extra_infiles = None, outfiles = None. def ctest_runner(inputdatloc, extra_infiles: List =None, outfiles: List =None):; """"""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths not robust; psiimport = Path(psi4.__file__).parent.parent; env = os.environ.copy(); env[""PYTHONPATH""] = env[""PYTHONPATH""] + os.pathsep + str(psiimport); ; ctestdir = Path(inputdatloc).resolve().parent; ; if (ctestdir / ""input.dat"").exists():; inputdat = ""input.dat""; elif (ctestdir / ""input.py"").exists():; inputdat = ""in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:5039,Testability,test,tests,5039,"-------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. inputdatloc = '/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/tests/tu1-h2o-energy/test_input.py', extra_infiles = None, outfiles = None. def ctest_runner(inputdatloc, extra_infiles: List =None, outfiles: List =None):; """"""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths not robust; psiimport = Path(psi4.__file__).parent.parent; env = os.environ.copy(); env[""PYTHONPATH""] = env[""PYTHONPATH""] + os.pathsep + str(psiimport); ; ctestdir = Path(inputdatloc).resolve().parent; ; if (ctestdir / ""input.dat"").exists():; inputdat = ""input.dat""; elif (ctestdir / ""input.py"").exists():; inputdat = ""in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:5213,Testability,mock,mock,5213,"-----------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. inputdatloc = '/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/tests/tu1-h2o-energy/test_input.py', extra_infiles = None, outfiles = None. def ctest_runner(inputdatloc, extra_infiles: List =None, outfiles: List =None):; """"""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths not robust; psiimport = Path(psi4.__file__).parent.parent; env = os.environ.copy(); env[""PYTHONPATH""] = env[""PYTHONPATH""] + os.pathsep + str(psiimport); ; ctestdir = Path(inputdatloc).resolve().parent; ; if (ctestdir / ""input.dat"").exists():; inputdat = ""input.dat""; elif (ctestdir / ""input.py"").exists():; inputdat = ""input.py""; ; infiles = [inputdat]; if extra_infiles:; infiles.extend(extra_infiles); infiles_with_contents = {Path(fl).name: (ctestdir / fl).read_text() for fl in infiles}; ; # Note: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:6908,Testability,test,tests,6908,"at"").exists():; inputdat = ""input.dat""; elif (ctestdir / ""input.py"").exists():; inputdat = ""input.py""; ; infiles = [inputdat]; if extra_infiles:; infiles.extend(extra_infiles); infiles_with_contents = {Path(fl).name: (ctestdir / fl).read_text() for fl in infiles}; ; # Note: The simple `command = [""psi4"", ""input.dat""]` works fine for Linux and Mac but not for Windows.; # L/M/W ok with `command = [which(""psi4""), ""input.dat""]` where `which` on Windows finds the psi4.bat file that points to the psi4 python script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `import psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:7138,Testability,assert,assert,7138," for fl in infiles}; ; # Note: The simple `command = [""psi4"", ""input.dat""]` works fine for Linux and Mac but not for Windows.; # L/M/W ok with `command = [which(""psi4""), ""input.dat""]` where `which` on Windows finds the psi4.bat file that points to the psi4 python script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `import psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.0266327",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:7193,Testability,Assert,AssertionError,7193," for fl in infiles}; ; # Note: The simple `command = [""psi4"", ""input.dat""]` works fine for Linux and Mac but not for Windows.; # L/M/W ok with `command = [which(""psi4""), ""input.dat""]` where `which` on Windows finds the psi4.bat file that points to the psi4 python script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `import psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.0266327",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:7363,Testability,test,testgcc,7363,"thon script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `import psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:7507,Testability,test,testgcc,7507,"thon script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `import psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:7558,Testability,test,testing,7558,"thon script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `import psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:7626,Testability,test,testing,7626,"ort psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !--------------------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:7763,Testability,test,testing,7763," # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:7901,Testability,test,testgcc,7901,"r pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:7954,Testability,test,testing,7954,"r pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8014,Testability,Test,TestComparisonError,8014,"utdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; =========================================================================================",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8080,Testability,Test,TestComparisonError,8080," output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ========================================================",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8883,Testability,test,tests,8883,"handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAILED; =============================================================================================== 2 failed, 1 passed, 3504 deselected in 6.20s ================================================================================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8904,Testability,Assert,AssertionError,8904,"handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAILED; =============================================================================================== 2 failed, 1 passed, 3504 deselected in 6.20s ================================================================================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:9033,Testability,test,test,9033,"handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAILED; =============================================================================================== 2 failed, 1 passed, 3504 deselected in 6.20s ================================================================================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:9181,Testability,test,tests,9181,"handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAILED; =============================================================================================== 2 failed, 1 passed, 3504 deselected in 6.20s ================================================================================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:9249,Testability,Test,TestComparisonError,9249,"handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAILED; =============================================================================================== 2 failed, 1 passed, 3504 deselected in 6.20s ================================================================================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:9411,Testability,test,tests,9411,"handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAILED; =============================================================================================== 2 failed, 1 passed, 3504 deselected in 6.20s ================================================================================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:9469,Testability,Assert,AssertionError,9469,"handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAILED; =============================================================================================== 2 failed, 1 passed, 3504 deselected in 6.20s ================================================================================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:6206,Usability,simpl,simple,6206,"alled from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths not robust; psiimport = Path(psi4.__file__).parent.parent; env = os.environ.copy(); env[""PYTHONPATH""] = env[""PYTHONPATH""] + os.pathsep + str(psiimport); ; ctestdir = Path(inputdatloc).resolve().parent; ; if (ctestdir / ""input.dat"").exists():; inputdat = ""input.dat""; elif (ctestdir / ""input.py"").exists():; inputdat = ""input.py""; ; infiles = [inputdat]; if extra_infiles:; infiles.extend(extra_infiles); infiles_with_contents = {Path(fl).name: (ctestdir / fl).read_text() for fl in infiles}; ; # Note: The simple `command = [""psi4"", ""input.dat""]` works fine for Linux and Mac but not for Windows.; # L/M/W ok with `command = [which(""psi4""), ""input.dat""]` where `which` on Windows finds the psi4.bat file that points to the psi4 python script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `import psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E Asserti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888
https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585:697,Availability,error,error,697,"> I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""""). Thanks for this, @PeterKraus. It cleared up a minor mystery about why the assertions in `standard_suite_runner.py` were behaving differently. I've played around with registering the files, and the pytest introspection printing works, but it isn't particularly better than what currently exists. I think the reason is that the psi compare_* functions write out their own, more informative, error messages. Glad to reconsider if I'm missing something. I think I've addressed your other suggestions. thanks for the review!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585
https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585:703,Integrability,message,messages,703,"> I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""""). Thanks for this, @PeterKraus. It cleared up a minor mystery about why the assertions in `standard_suite_runner.py` were behaving differently. I've played around with registering the files, and the pytest introspection printing works, but it isn't particularly better than what currently exists. I think the reason is that the psi compare_* functions write out their own, more informative, error messages. Glad to reconsider if I'm missing something. I think I've addressed your other suggestions. thanks for the review!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585
https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585:43,Testability,assert,assertion,43,"> I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""""). Thanks for this, @PeterKraus. It cleared up a minor mystery about why the assertions in `standard_suite_runner.py` were behaving differently. I've played around with registering the files, and the pytest introspection printing works, but it isn't particularly better than what currently exists. I think the reason is that the psi compare_* functions write out their own, more informative, error messages. Glad to reconsider if I'm missing something. I think I've addressed your other suggestions. thanks for the review!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585
https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585:112,Testability,test,test,112,"> I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""""). Thanks for this, @PeterKraus. It cleared up a minor mystery about why the assertions in `standard_suite_runner.py` were behaving differently. I've played around with registering the files, and the pytest introspection printing works, but it isn't particularly better than what currently exists. I think the reason is that the psi compare_* functions write out their own, more informative, error messages. Glad to reconsider if I'm missing something. I think I've addressed your other suggestions. thanks for the review!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585
https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585:158,Testability,Assert,AssertionError,158,"> I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""""). Thanks for this, @PeterKraus. It cleared up a minor mystery about why the assertions in `standard_suite_runner.py` were behaving differently. I've played around with registering the files, and the pytest introspection printing works, but it isn't particularly better than what currently exists. I think the reason is that the psi compare_* functions write out their own, more informative, error messages. Glad to reconsider if I'm missing something. I think I've addressed your other suggestions. thanks for the review!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585
https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585:247,Testability,assert,assertion,247,"> I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""""). Thanks for this, @PeterKraus. It cleared up a minor mystery about why the assertions in `standard_suite_runner.py` were behaving differently. I've played around with registering the files, and the pytest introspection printing works, but it isn't particularly better than what currently exists. I think the reason is that the psi compare_* functions write out their own, more informative, error messages. Glad to reconsider if I'm missing something. I think I've addressed your other suggestions. thanks for the review!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585
https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585:382,Testability,assert,assertions,382,"> I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""""). Thanks for this, @PeterKraus. It cleared up a minor mystery about why the assertions in `standard_suite_runner.py` were behaving differently. I've played around with registering the files, and the pytest introspection printing works, but it isn't particularly better than what currently exists. I think the reason is that the psi compare_* functions write out their own, more informative, error messages. Glad to reconsider if I'm missing something. I think I've addressed your other suggestions. thanks for the review!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585
https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585:341,Usability,clear,cleared,341,"> I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""""). Thanks for this, @PeterKraus. It cleared up a minor mystery about why the assertions in `standard_suite_runner.py` were behaving differently. I've played around with registering the files, and the pytest introspection printing works, but it isn't particularly better than what currently exists. I think the reason is that the psi compare_* functions write out their own, more informative, error messages. Glad to reconsider if I'm missing something. I think I've addressed your other suggestions. thanks for the review!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585
https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845:546,Availability,error,error,546,"> requiring pytest 7 -> so when you build a package using setup.py you can declare dependency-targets. I can't figure out how Psi4 is packaged now that setup.cfg is gone, but perhaps adding pytest as a dependency of an optional [testing] target might be a simpler way out?. I've so far resisted hooking up psi4's CMake to a setup.py, so the `[testing]` route won't work. I'm hoping that with https://github.com/psi4/psi4/pull/2454/files#diff-fb6a686182f16eb54af3c628f38593f347f68aba31de903983023c560288d7a1R2, pytest itself will raise a sensible error. I have previously included pytest in the psi4 package https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L91, but I was planning to suppress that for a while until defaults catches up. > disable warnings-as-errors from docs build due to ""circular import"" -> let's make an issue and then it's fine by me. Yes, already fixed in qcel master https://github.com/MolSSI/QCElemental/pull/286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845
https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845:792,Availability,error,errors,792,"> requiring pytest 7 -> so when you build a package using setup.py you can declare dependency-targets. I can't figure out how Psi4 is packaged now that setup.cfg is gone, but perhaps adding pytest as a dependency of an optional [testing] target might be a simpler way out?. I've so far resisted hooking up psi4's CMake to a setup.py, so the `[testing]` route won't work. I'm hoping that with https://github.com/psi4/psi4/pull/2454/files#diff-fb6a686182f16eb54af3c628f38593f347f68aba31de903983023c560288d7a1R2, pytest itself will raise a sensible error. I have previously included pytest in the psi4 package https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L91, but I was planning to suppress that for a while until defaults catches up. > disable warnings-as-errors from docs build due to ""circular import"" -> let's make an issue and then it's fine by me. Yes, already fixed in qcel master https://github.com/MolSSI/QCElemental/pull/286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845
https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845:83,Integrability,depend,dependency-targets,83,"> requiring pytest 7 -> so when you build a package using setup.py you can declare dependency-targets. I can't figure out how Psi4 is packaged now that setup.cfg is gone, but perhaps adding pytest as a dependency of an optional [testing] target might be a simpler way out?. I've so far resisted hooking up psi4's CMake to a setup.py, so the `[testing]` route won't work. I'm hoping that with https://github.com/psi4/psi4/pull/2454/files#diff-fb6a686182f16eb54af3c628f38593f347f68aba31de903983023c560288d7a1R2, pytest itself will raise a sensible error. I have previously included pytest in the psi4 package https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L91, but I was planning to suppress that for a while until defaults catches up. > disable warnings-as-errors from docs build due to ""circular import"" -> let's make an issue and then it's fine by me. Yes, already fixed in qcel master https://github.com/MolSSI/QCElemental/pull/286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845
https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845:202,Integrability,depend,dependency,202,"> requiring pytest 7 -> so when you build a package using setup.py you can declare dependency-targets. I can't figure out how Psi4 is packaged now that setup.cfg is gone, but perhaps adding pytest as a dependency of an optional [testing] target might be a simpler way out?. I've so far resisted hooking up psi4's CMake to a setup.py, so the `[testing]` route won't work. I'm hoping that with https://github.com/psi4/psi4/pull/2454/files#diff-fb6a686182f16eb54af3c628f38593f347f68aba31de903983023c560288d7a1R2, pytest itself will raise a sensible error. I have previously included pytest in the psi4 package https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L91, but I was planning to suppress that for a while until defaults catches up. > disable warnings-as-errors from docs build due to ""circular import"" -> let's make an issue and then it's fine by me. Yes, already fixed in qcel master https://github.com/MolSSI/QCElemental/pull/286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845
https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845:353,Integrability,rout,route,353,"> requiring pytest 7 -> so when you build a package using setup.py you can declare dependency-targets. I can't figure out how Psi4 is packaged now that setup.cfg is gone, but perhaps adding pytest as a dependency of an optional [testing] target might be a simpler way out?. I've so far resisted hooking up psi4's CMake to a setup.py, so the `[testing]` route won't work. I'm hoping that with https://github.com/psi4/psi4/pull/2454/files#diff-fb6a686182f16eb54af3c628f38593f347f68aba31de903983023c560288d7a1R2, pytest itself will raise a sensible error. I have previously included pytest in the psi4 package https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L91, but I was planning to suppress that for a while until defaults catches up. > disable warnings-as-errors from docs build due to ""circular import"" -> let's make an issue and then it's fine by me. Yes, already fixed in qcel master https://github.com/MolSSI/QCElemental/pull/286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845
https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845:229,Testability,test,testing,229,"> requiring pytest 7 -> so when you build a package using setup.py you can declare dependency-targets. I can't figure out how Psi4 is packaged now that setup.cfg is gone, but perhaps adding pytest as a dependency of an optional [testing] target might be a simpler way out?. I've so far resisted hooking up psi4's CMake to a setup.py, so the `[testing]` route won't work. I'm hoping that with https://github.com/psi4/psi4/pull/2454/files#diff-fb6a686182f16eb54af3c628f38593f347f68aba31de903983023c560288d7a1R2, pytest itself will raise a sensible error. I have previously included pytest in the psi4 package https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L91, but I was planning to suppress that for a while until defaults catches up. > disable warnings-as-errors from docs build due to ""circular import"" -> let's make an issue and then it's fine by me. Yes, already fixed in qcel master https://github.com/MolSSI/QCElemental/pull/286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845
https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845:343,Testability,test,testing,343,"> requiring pytest 7 -> so when you build a package using setup.py you can declare dependency-targets. I can't figure out how Psi4 is packaged now that setup.cfg is gone, but perhaps adding pytest as a dependency of an optional [testing] target might be a simpler way out?. I've so far resisted hooking up psi4's CMake to a setup.py, so the `[testing]` route won't work. I'm hoping that with https://github.com/psi4/psi4/pull/2454/files#diff-fb6a686182f16eb54af3c628f38593f347f68aba31de903983023c560288d7a1R2, pytest itself will raise a sensible error. I have previously included pytest in the psi4 package https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L91, but I was planning to suppress that for a while until defaults catches up. > disable warnings-as-errors from docs build due to ""circular import"" -> let's make an issue and then it's fine by me. Yes, already fixed in qcel master https://github.com/MolSSI/QCElemental/pull/286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845
https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845:256,Usability,simpl,simpler,256,"> requiring pytest 7 -> so when you build a package using setup.py you can declare dependency-targets. I can't figure out how Psi4 is packaged now that setup.cfg is gone, but perhaps adding pytest as a dependency of an optional [testing] target might be a simpler way out?. I've so far resisted hooking up psi4's CMake to a setup.py, so the `[testing]` route won't work. I'm hoping that with https://github.com/psi4/psi4/pull/2454/files#diff-fb6a686182f16eb54af3c628f38593f347f68aba31de903983023c560288d7a1R2, pytest itself will raise a sensible error. I have previously included pytest in the psi4 package https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L91, but I was planning to suppress that for a while until defaults catches up. > disable warnings-as-errors from docs build due to ""circular import"" -> let's make an issue and then it's fine by me. Yes, already fixed in qcel master https://github.com/MolSSI/QCElemental/pull/286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845
https://github.com/psi4/psi4/pull/2455#issuecomment-1052346806:297,Integrability,depend,dependency,297,"> For the record, I'm not happy about dropping Py 3.7 support. The last time I tried to build Psi and Forte, using Py 3.7 was the only way I can get it to work. I can do some more investigation as to where the conflict is. oh, I hadn't heard that constraint. I wonder if it could be just a pinned dependency (e.g., hdf5) that could only be satisfied by chance with a 3.7 python. fwiw, the dropping 3.7 at this point is only a build-fewer-conda-packages consequence. if you change it back to `find_package(Python 3.7)`, 3.7 works fine. Let me know if I can run any tests/environments to help find out if this is a packages or actual language limitation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2455#issuecomment-1052346806
https://github.com/psi4/psi4/pull/2455#issuecomment-1052346806:564,Testability,test,tests,564,"> For the record, I'm not happy about dropping Py 3.7 support. The last time I tried to build Psi and Forte, using Py 3.7 was the only way I can get it to work. I can do some more investigation as to where the conflict is. oh, I hadn't heard that constraint. I wonder if it could be just a pinned dependency (e.g., hdf5) that could only be satisfied by chance with a 3.7 python. fwiw, the dropping 3.7 at this point is only a build-fewer-conda-packages consequence. if you change it back to `find_package(Python 3.7)`, 3.7 works fine. Let me know if I can run any tests/environments to help find out if this is a packages or actual language limitation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2455#issuecomment-1052346806
https://github.com/psi4/psi4/issues/2457#issuecomment-1058243332:138,Testability,test,test-only,138,"Per discussion on conference call, this will be fixed by creating the MP2 tau amplitudes if they don't already exist. I'll go through the test-only changes to `cc` before attempting this one, which is more of a behavior change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2457#issuecomment-1058243332
https://github.com/psi4/psi4/issues/2458#issuecomment-1114879560:125,Availability,error,error,125,"Closing. Upon rerunning the input file, I get the much saner behavior of Psi simply exiting. While one _could_ intercept the error with a manual try-except, use of `fail_on_maxiter` is the expected behavior and does not have this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2458#issuecomment-1114879560
https://github.com/psi4/psi4/issues/2458#issuecomment-1114879560:77,Usability,simpl,simply,77,"Closing. Upon rerunning the input file, I get the much saner behavior of Psi simply exiting. While one _could_ intercept the error with a manual try-except, use of `fail_on_maxiter` is the expected behavior and does not have this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2458#issuecomment-1114879560
https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379:336,Availability,ping,ping,336,"> After coding this all up, I'm inclined to remove the last access call. I'd definitely retain the access call with the symmetry of the transition. How about `TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 TRANSITION` to make the distinction to the ""legacy"" version more clear?. Even though `adcc` does not support point group symmetry, ping @mfherbst for another opinion on excited states 😄",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379
https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379:193,Energy Efficiency,ENERGY,ENERGY,193,"> After coding this all up, I'm inclined to remove the last access call. I'd definitely retain the access call with the symmetry of the transition. How about `TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 TRANSITION` to make the distinction to the ""legacy"" version more clear?. Even though `adcc` does not support point group symmetry, ping @mfherbst for another opinion on excited states 😄",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379
https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379:60,Security,access,access,60,"> After coding this all up, I'm inclined to remove the last access call. I'd definitely retain the access call with the symmetry of the transition. How about `TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 TRANSITION` to make the distinction to the ""legacy"" version more clear?. Even though `adcc` does not support point group symmetry, ping @mfherbst for another opinion on excited states 😄",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379
https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379:99,Security,access,access,99,"> After coding this all up, I'm inclined to remove the last access call. I'd definitely retain the access call with the symmetry of the transition. How about `TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 TRANSITION` to make the distinction to the ""legacy"" version more clear?. Even though `adcc` does not support point group symmetry, ping @mfherbst for another opinion on excited states 😄",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379
https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379:270,Usability,clear,clear,270,"> After coding this all up, I'm inclined to remove the last access call. I'd definitely retain the access call with the symmetry of the transition. How about `TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 TRANSITION` to make the distinction to the ""legacy"" version more clear?. Even though `adcc` does not support point group symmetry, ping @mfherbst for another opinion on excited states 😄",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379
https://github.com/psi4/psi4/pull/2462#issuecomment-1061067997:25,Security,access,access,25,"I am fine with all three access calls, and I agree with Max regarding the clarification of the third one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1061067997
https://github.com/psi4/psi4/pull/2462#issuecomment-1064090557:190,Modifiability,variab,variables,190,"@loriab After attempting to implement your suggestion, I find it looks uglier. Might I suggest that we wait until ADC and EOM are hooked up, and _then_ discuss which way of formatting these variables is best? Once we have more options, my opinion may change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1064090557
https://github.com/psi4/psi4/pull/2462#issuecomment-1064148919:190,Modifiability,variab,variables,190,"> @loriab After attempting to implement your suggestion, I find it looks uglier. Might I suggest that we wait until ADC and EOM are hooked up, and then discuss which way of formatting these variables is best? Once we have more options, my opinion may change. sure, sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1064148919
https://github.com/psi4/psi4/issues/2463#issuecomment-1062277252:203,Energy Efficiency,charge,charge,203,"The problem is that the pubchem structure does not appear to have Cs symmetry. The pubchem geometry gives; ```; ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; F 1.054979085535 0.279491800552 0.000000000000 18.998403162730; C -0.000320914465 -0.577108199448 0.000000000000 12.000000000000; C -1.279120914465 0.226491800552 0.000000000000 12.000000000000; H 0.072379085535 -1.206508199448 -0.891000000000 1.007825032230; H 0.072279085535 -1.206508199448 0.891000000000 1.007825032230; H -2.153920914465 -0.429408199448 -0.000100000000 1.007825032230; H -1.322020914465 0.874191800552 0.881000000000 1.007825032230; H -1.321920914465 0.874291800552 -0.880900000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = 1.21162 B = 0.32319 C = 0.28216 [cm^-1]; Rotational constants: A = 36323.59189 B = 9689.02155 C = 8459.03982 [MHz]; Nuclear repulsion = 80.019990391667150; ```. Reading this into IQmol and running ""Symmetrize geometry"", I get; ```; ==> Geometry <==. Molecular point group: cs; Full point group: Cs. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; F -0.264271602373 1.058895456489 0.000000000000 18.998403162730; C 0.577048397627 -0.008634543511 0.000000000000 12.000000000000; C -0.244891602373 -1.275724543511 0.000000000000 12.000000000000; H 1.207428397627 0.054945456489 -0.891000000000 1.007825032230; H 1.207428397627 0.054945456489 0.891000000000 1.007825032230; H 0.398348397627 -2.159884543511 0.000000000000 1.007825032230; H -0.893191602373 -1.309244543511 0.880950000000 1.007825032230; H -0.893191602373 -1.309244543511 -0.880950000000 1.007825032230. Running in cs symmetry. Rotational constants: A = 1.21161 B = 0.32319 C = 0.28216 [cm^-1]; Rotational constants: A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062277252
https://github.com/psi4/psi4/issues/2463#issuecomment-1062277252:1232,Energy Efficiency,charge,charge,1232,"Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; F 1.054979085535 0.279491800552 0.000000000000 18.998403162730; C -0.000320914465 -0.577108199448 0.000000000000 12.000000000000; C -1.279120914465 0.226491800552 0.000000000000 12.000000000000; H 0.072379085535 -1.206508199448 -0.891000000000 1.007825032230; H 0.072279085535 -1.206508199448 0.891000000000 1.007825032230; H -2.153920914465 -0.429408199448 -0.000100000000 1.007825032230; H -1.322020914465 0.874191800552 0.881000000000 1.007825032230; H -1.321920914465 0.874291800552 -0.880900000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = 1.21162 B = 0.32319 C = 0.28216 [cm^-1]; Rotational constants: A = 36323.59189 B = 9689.02155 C = 8459.03982 [MHz]; Nuclear repulsion = 80.019990391667150; ```. Reading this into IQmol and running ""Symmetrize geometry"", I get; ```; ==> Geometry <==. Molecular point group: cs; Full point group: Cs. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; F -0.264271602373 1.058895456489 0.000000000000 18.998403162730; C 0.577048397627 -0.008634543511 0.000000000000 12.000000000000; C -0.244891602373 -1.275724543511 0.000000000000 12.000000000000; H 1.207428397627 0.054945456489 -0.891000000000 1.007825032230; H 1.207428397627 0.054945456489 0.891000000000 1.007825032230; H 0.398348397627 -2.159884543511 0.000000000000 1.007825032230; H -0.893191602373 -1.309244543511 0.880950000000 1.007825032230; H -0.893191602373 -1.309244543511 -0.880950000000 1.007825032230. Running in cs symmetry. Rotational constants: A = 1.21161 B = 0.32319 C = 0.28216 [cm^-1]; Rotational constants: A = 36323.26201 B = 9689.02376 C = 8459.02361 [MHz]; Nuclear repulsion = 80.019847421417836; ```. However, the HF/cc-pVDZ energies appear almost identical: `-178.08964068212876` for the pubchem structure vs `-178.08964078908636` for th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062277252
https://github.com/psi4/psi4/issues/2463#issuecomment-1062292306:210,Safety,detect,detection,210,"[According to the docs](https://psicode.org/psi4manual/master/api/psi4.core.Molecule.html?highlight=symmetry#psi4.core.Molecule.find_point_group) `psi::Molecule::find_point_group` is the function that does the detection, and it can take a threshold argument, but I cannot find a keyword that would change that.; Have not looked at the source yet, but I think the threshold may be hardcoded at the moment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062292306
https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003:396,Availability,toler,tolerance,396,"The symmetry detection does not try to symmetrize the geometry to my knowledge.; But there is a `symmetrize` function than can be explicitly called like this:. ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ; psi4.get_active_molecule().symmetrize(1e-2); # or <molecule_name>.symmetrize(1e-2) if a name was set; energy('scf'); ```. edit: Otherwise finding the point group with a lower tolerance can be done like this, I think. (Doesn't work in this case). ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ. mol = psi4.get_active_molecule(); tol = 1e-2; PG = mol.find_point_group(tol); print(PG.full_name()); mol.set_point_group(PG); energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003
https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003:323,Energy Efficiency,energy,energy,323,"The symmetry detection does not try to symmetrize the geometry to my knowledge.; But there is a `symmetrize` function than can be explicitly called like this:. ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ; psi4.get_active_molecule().symmetrize(1e-2); # or <molecule_name>.symmetrize(1e-2) if a name was set; energy('scf'); ```. edit: Otherwise finding the point group with a lower tolerance can be done like this, I think. (Doesn't work in this case). ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ. mol = psi4.get_active_molecule(); tol = 1e-2; PG = mol.find_point_group(tol); print(PG.full_name()); mol.set_point_group(PG); energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003
https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003:654,Energy Efficiency,energy,energy,654,"The symmetry detection does not try to symmetrize the geometry to my knowledge.; But there is a `symmetrize` function than can be explicitly called like this:. ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ; psi4.get_active_molecule().symmetrize(1e-2); # or <molecule_name>.symmetrize(1e-2) if a name was set; energy('scf'); ```. edit: Otherwise finding the point group with a lower tolerance can be done like this, I think. (Doesn't work in this case). ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ. mol = psi4.get_active_molecule(); tol = 1e-2; PG = mol.find_point_group(tol); print(PG.full_name()); mol.set_point_group(PG); energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003
https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003:13,Safety,detect,detection,13,"The symmetry detection does not try to symmetrize the geometry to my knowledge.; But there is a `symmetrize` function than can be explicitly called like this:. ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ; psi4.get_active_molecule().symmetrize(1e-2); # or <molecule_name>.symmetrize(1e-2) if a name was set; energy('scf'); ```. edit: Otherwise finding the point group with a lower tolerance can be done like this, I think. (Doesn't work in this case). ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ. mol = psi4.get_active_molecule(); tol = 1e-2; PG = mol.find_point_group(tol); print(PG.full_name()); mol.set_point_group(PG); energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003
https://github.com/psi4/psi4/issues/2463#issuecomment-1152922722:151,Safety,detect,detection,151,"> The action item here is to have some way to adjust the symmetrization threshold. I think updating the docs would also be a good idea. > The symmetry detection does not try to symmetrize the geometry to my knowledge.; > But there is a symmetrize function than can be explicitly called. It has been a while, but I cannot recall seeing this anywhere when I was reading the docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1152922722
https://github.com/psi4/psi4/pull/2464#issuecomment-1063052441:55,Usability,simpl,simply,55,"> FWIW, it would be better to have all these functions simply be `atom_at_position`, but that can be for another day. Indeed, but I think they are used at a couple of places. My first instinct was to turn it into a function template, but I think these fns are exported to Pyside via pybind right? Not sure how that would handle a C++ template.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2464#issuecomment-1063052441
https://github.com/psi4/psi4/pull/2464#issuecomment-1063057059:57,Usability,simpl,simply,57,"> > FWIW, it would be better to have all these functions simply be `atom_at_position`, but that can be for another day.; > ; > Indeed, but I think they are used at a couple of places. My first instinct was to turn it into a function template, but I think these fns are exported to Pyside via pybind right? Not sure how that would handle a C++ template. Templating is overcomplicated. Change the function names where they are called, C-side. In pybind, you specify which function you want to export with a typedef. For example, here is how we specify which of the three signatures for `Localizer::build` to export.; ```; typedef std::shared_ptr<Localizer> (*localizer_with_type)(const std::string&, std::shared_ptr<BasisSet>,; std::shared_ptr<Matrix>);. py::class_<Localizer, std::shared_ptr<Localizer>>(m, ""Localizer"",; ""Class containing orbital localization procedures""); .def_static(""build"", localizer_with_type(&Localizer::build), ""Build the localization scheme"");; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2464#issuecomment-1063057059
https://github.com/psi4/psi4/pull/2465#issuecomment-1064048522:57,Availability,error,error,57,"It shouldn't ""print a stern warning."" It should raise an error. You should never ever have two atoms that are at the same point in space within symmetry tolerance. As for qcdb, that's a @loriab question. I can never remember why we have both.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064048522
https://github.com/psi4/psi4/pull/2465#issuecomment-1064048522:153,Availability,toler,tolerance,153,"It shouldn't ""print a stern warning."" It should raise an error. You should never ever have two atoms that are at the same point in space within symmetry tolerance. As for qcdb, that's a @loriab question. I can never remember why we have both.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064048522
https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052:91,Availability,toler,tolerance,91,"> This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. unphysical close atoms should be acceptable as input, even if mostly of academic interest. But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; Then the question is if we should indeed abort or still try to symmetrize hoping to get lucky?; Potentially print the symmetrized molecule and abort after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052
https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052:247,Availability,error,error,247,"> This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. unphysical close atoms should be acceptable as input, even if mostly of academic interest. But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; Then the question is if we should indeed abort or still try to symmetrize hoping to get lucky?; Potentially print the symmetrized molecule and abort after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052
https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052:332,Availability,toler,tolerance,332,"> This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. unphysical close atoms should be acceptable as input, even if mostly of academic interest. But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; Then the question is if we should indeed abort or still try to symmetrize hoping to get lucky?; Potentially print the symmetrized molecule and abort after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052
https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052:385,Safety,abort,abort,385,"> This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. unphysical close atoms should be acceptable as input, even if mostly of academic interest. But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; Then the question is if we should indeed abort or still try to symmetrize hoping to get lucky?; Potentially print the symmetrized molecule and abort after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052
https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052:487,Safety,abort,abort,487,"> This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. unphysical close atoms should be acceptable as input, even if mostly of academic interest. But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; Then the question is if we should indeed abort or still try to symmetrize hoping to get lucky?; Potentially print the symmetrized molecule and abort after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052
https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333:485,Availability,error,error,485,"> Potentially print the symmetrized molecule and abort after that. Implementing that would require reworking the callers of `atom_at_position`, as it is a fairly low-level function that is not only called when we are trying to symmetrize. Throwing an exception in `atom_at_position` after the warning, and catching it in the symmetrization function may be feasible, other callers would not catch it and the uncaught exception would terminate execution. > But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; This is the primary reason why I am reworking this, although I also tend to abuse QC programs with thousands of extreme geometries. A third option would be to raise an error in `atom_at_position` by default, but add an expert option to turn the error into a warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333
https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333:570,Availability,toler,tolerance,570,"> Potentially print the symmetrized molecule and abort after that. Implementing that would require reworking the callers of `atom_at_position`, as it is a fairly low-level function that is not only called when we are trying to symmetrize. Throwing an exception in `atom_at_position` after the warning, and catching it in the symmetrization function may be feasible, other callers would not catch it and the uncaught exception would terminate execution. > But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; This is the primary reason why I am reworking this, although I also tend to abuse QC programs with thousands of extreme geometries. A third option would be to raise an error in `atom_at_position` by default, but add an expert option to turn the error into a warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333
https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333:750,Availability,error,error,750,"> Potentially print the symmetrized molecule and abort after that. Implementing that would require reworking the callers of `atom_at_position`, as it is a fairly low-level function that is not only called when we are trying to symmetrize. Throwing an exception in `atom_at_position` after the warning, and catching it in the symmetrization function may be feasible, other callers would not catch it and the uncaught exception would terminate execution. > But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; This is the primary reason why I am reworking this, although I also tend to abuse QC programs with thousands of extreme geometries. A third option would be to raise an error in `atom_at_position` by default, but add an expert option to turn the error into a warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333
https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333:827,Availability,error,error,827,"> Potentially print the symmetrized molecule and abort after that. Implementing that would require reworking the callers of `atom_at_position`, as it is a fairly low-level function that is not only called when we are trying to symmetrize. Throwing an exception in `atom_at_position` after the warning, and catching it in the symmetrization function may be feasible, other callers would not catch it and the uncaught exception would terminate execution. > But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; This is the primary reason why I am reworking this, although I also tend to abuse QC programs with thousands of extreme geometries. A third option would be to raise an error in `atom_at_position` by default, but add an expert option to turn the error into a warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333
https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333:49,Safety,abort,abort,49,"> Potentially print the symmetrized molecule and abort after that. Implementing that would require reworking the callers of `atom_at_position`, as it is a fairly low-level function that is not only called when we are trying to symmetrize. Throwing an exception in `atom_at_position` after the warning, and catching it in the symmetrization function may be feasible, other callers would not catch it and the uncaught exception would terminate execution. > But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; This is the primary reason why I am reworking this, although I also tend to abuse QC programs with thousands of extreme geometries. A third option would be to raise an error in `atom_at_position` by default, but add an expert option to turn the error into a warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333
https://github.com/psi4/psi4/pull/2465#issuecomment-1064093373:73,Availability,error,error,73,What legitimate use case is there for this being a warning instead of an error? I can't think of one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064093373
https://github.com/psi4/psi4/pull/2465#issuecomment-1064093375:39,Safety,abort,abort,39,"hmm, right. Best to keep it simple and abort then, it's a corner case after all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064093375
https://github.com/psi4/psi4/pull/2465#issuecomment-1064093375:28,Usability,simpl,simple,28,"hmm, right. Best to keep it simple and abort then, it's a corner case after all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064093375
https://github.com/psi4/psi4/pull/2465#issuecomment-1064156997:61,Availability,error,error,61,I am going to need to revise the docstrings now that we just error out instead of returning the closest match,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064156997
https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767:47,Availability,error,error,47,I have updated the docstrings and extended the error message just in case someone runs into a legitimate situation where it needs to be bypassed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767
https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767:7,Deployability,update,updated,7,I have updated the docstrings and extended the error message just in case someone runs into a legitimate situation where it needs to be bypassed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767
https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767:53,Integrability,message,message,53,I have updated the docstrings and extended the error message just in case someone runs into a legitimate situation where it needs to be bypassed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767
https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767:34,Modifiability,extend,extended,34,I have updated the docstrings and extended the error message just in case someone runs into a legitimate situation where it needs to be bypassed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767
https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:17,Availability,error,error,17,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547
https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:230,Availability,toler,tolerance,230,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547
https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:318,Availability,error,error,318,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547
https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:387,Availability,error,error,387,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547
https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:551,Availability,error,error,551,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547
https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:695,Availability,error,error,695,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547
https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:777,Availability,error,error,777,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547
https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:23,Integrability,message,message,23,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547
https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:393,Integrability,message,message,393,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547
https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:516,Integrability,message,message,516,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547
https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:783,Integrability,message,message,783,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547
https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:220,Safety,detect,detection,220,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547
https://github.com/psi4/psi4/pull/2465#issuecomment-1068217023:144,Integrability,interface,interface,144,"1. Done.; 2. Good point, it could be called from other places.; 3. N/A anymore; 4. Sentence removed. I have taken the inspiration from the MRCC interface, which prints a warning like this. https://github.com/psi4/psi4/blob/4f7de4dca376b9c4afd2105898a98e06efcd7309/psi4/src/psi4/mrcc/mrcc.cc#L738",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068217023
https://github.com/psi4/psi4/pull/2465#issuecomment-1068221472:9,Integrability,interface,interface,9,"The MRCC interface is a different case because:; 1. At the time it was coded, we had a developer who would volunteer to deal with it if requested.; 2. We had a well-defined use case where we already knew that adding the feature was the correct fix. Those are two special conditions, and there's a reason that there aren't other messages like the MRCC message in the Psi codebase!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068221472
https://github.com/psi4/psi4/pull/2465#issuecomment-1068221472:328,Integrability,message,messages,328,"The MRCC interface is a different case because:; 1. At the time it was coded, we had a developer who would volunteer to deal with it if requested.; 2. We had a well-defined use case where we already knew that adding the feature was the correct fix. Those are two special conditions, and there's a reason that there aren't other messages like the MRCC message in the Psi codebase!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068221472
https://github.com/psi4/psi4/pull/2465#issuecomment-1068221472:351,Integrability,message,message,351,"The MRCC interface is a different case because:; 1. At the time it was coded, we had a developer who would volunteer to deal with it if requested.; 2. We had a well-defined use case where we already knew that adding the feature was the correct fix. Those are two special conditions, and there's a reason that there aren't other messages like the MRCC message in the Psi codebase!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068221472
https://github.com/psi4/psi4/pull/2465#issuecomment-1069389171:9,Deployability,update,updated,9,PR intro updated. Is a rebase going to be required before merge?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1069389171
https://github.com/psi4/psi4/pull/2467#issuecomment-1065118824:311,Safety,safe,safely,311,"Yes, LEOM_CCSD refers to the local-EOM-CC code we developed for testing in Psi3. Similarly, LOCAL_GHOST was a keyword for placing basis functions on a ghost atom to account for diffuse electronic states in the local-EOM-CC calculations. These capabilities were not transferred to Psi4, so these keywords may be safely removed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2467#issuecomment-1065118824
https://github.com/psi4/psi4/pull/2467#issuecomment-1065118824:64,Testability,test,testing,64,"Yes, LEOM_CCSD refers to the local-EOM-CC code we developed for testing in Psi3. Similarly, LOCAL_GHOST was a keyword for placing basis functions on a ghost atom to account for diffuse electronic states in the local-EOM-CC calculations. These capabilities were not transferred to Psi4, so these keywords may be safely removed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2467#issuecomment-1065118824
https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:1085,Availability,down,downloading,1085,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911
https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:117,Deployability,install,installed,117,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911
https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:136,Deployability,configurat,configuration,136,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911
https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:238,Deployability,update,updates,238,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911
https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:423,Deployability,patch,patch-,423,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911
https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:570,Deployability,patch,patch-,570,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911
https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:617,Deployability,update,update,617,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911
https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:934,Deployability,deploy,deploy-preview,934,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911
https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:309,Integrability,synchroniz,synchronize,309,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911
https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:465,Integrability,synchroniz,synchronize,465,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911
https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:136,Modifiability,config,configuration,136,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911
https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:607,Safety,avoid,avoid,607,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911
https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:279,Testability,test,tests,279,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911
https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210:79,Energy Efficiency,charge,charges,79,"The potential gradient function should be usable to compute gradients on point charges, since the gradient for a point charge is simply the charge multiplied by the potential gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210
https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210:119,Energy Efficiency,charge,charge,119,"The potential gradient function should be usable to compute gradients on point charges, since the gradient for a point charge is simply the charge multiplied by the potential gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210
https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210:140,Energy Efficiency,charge,charge,140,"The potential gradient function should be usable to compute gradients on point charges, since the gradient for a point charge is simply the charge multiplied by the potential gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210
https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210:42,Usability,usab,usable,42,"The potential gradient function should be usable to compute gradients on point charges, since the gradient for a point charge is simply the charge multiplied by the potential gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210
https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210:129,Usability,simpl,simply,129,"The potential gradient function should be usable to compute gradients on point charges, since the gradient for a point charge is simply the charge multiplied by the potential gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210
https://github.com/psi4/psi4/pull/2473#issuecomment-1067313088:109,Testability,test,tests,109,"I think for your purpose, I'd use `ElectrostaticInt` from C++ (I'm using `ao_multipole_potential` because of tests from Python). `ElectrostaticInt` uses L2, whereas multipole potential ints will use M-D in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2473#issuecomment-1067313088
https://github.com/psi4/psi4/pull/2473#issuecomment-1809232656:258,Deployability,release,release,258,"This will be imminently unblocked by https://github.com/evaleev/libint/pull/279 (thanks, @JonathonMisiewicz)! But I don't think we want to rush that merge and this merge in time for v1.9, so I'm moving to v1.10. Hopefully 279 will be in the next official L2 release which we _will_ require for v1.9, so the ints will be ready for pseudospectral w/o another L2 shift.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2473#issuecomment-1809232656
https://github.com/psi4/psi4/pull/2473#issuecomment-2151577114:18,Testability,test,tests,18,Rebased and quick tests pass and the new test passes. I do have a local copy of the original branch in case we need to restore it.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2473#issuecomment-2151577114
https://github.com/psi4/psi4/pull/2473#issuecomment-2151577114:41,Testability,test,test,41,Rebased and quick tests pass and the new test passes. I do have a local copy of the original branch in case we need to restore it.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2473#issuecomment-2151577114
https://github.com/psi4/psi4/issues/2476#issuecomment-1073334686:45,Availability,error,error,45,"On further thought, I am not sure this is an error. In UHF there's no guarantee that the orbitals are spin-paired; the beta spatial orbitals are allowed to differ from the alpha ones. This naturally leads to spin contamination, but that's a feature not a bug!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2476#issuecomment-1073334686
https://github.com/psi4/psi4/issues/2476#issuecomment-1073387869:207,Safety,sanity check,sanity check,207,"You're right. The problem is the use of `docc` and `socc`: https://github.com/psi4/psi4/blob/1ffb67bf52dcca70e357d23714c7d975f9d1356e/psi4/src/psi4/libscf_solver/hf.cc#L474. After the recent addition of the sanity check in #2488, the code crashes in the iteration where some symmetries have more beta electrons and alpha electrons.; ```; Occupations; sym 0: 1 alpha 2 beta; sym 1: 0 alpha 0 beta; sym 2: 1 alpha 0 beta; sym 3: 1 alpha 0 beta; sym 4: 0 alpha 0 beta; sym 5: 1 alpha 1 beta; sym 6: 1 alpha 1 beta; sym 7: 1 alpha 1 beta; ```; The `docc` and `socc` syntax is unable to handle this, which leads to spin flips and the wrong spin state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2476#issuecomment-1073387869
https://github.com/psi4/psi4/issues/2476#issuecomment-1213093352:161,Safety,avoid,avoid,161,"When I attempt this, L2 complains that the angular momentum limit exceeded. Is this expected? I _should_ be able to fix this with a higher AM L2, but I'd rather avoid building myself, and we certainly aren't having the test suite build L2 itself.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2476#issuecomment-1213093352
https://github.com/psi4/psi4/issues/2476#issuecomment-1213093352:219,Testability,test,test,219,"When I attempt this, L2 complains that the angular momentum limit exceeded. Is this expected? I _should_ be able to fix this with a higher AM L2, but I'd rather avoid building myself, and we certainly aren't having the test suite build L2 itself.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2476#issuecomment-1213093352
https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956:123,Energy Efficiency,ENERGY,ENERGY,123,"A good test of when this is fixed: the `scf-property` test line `#compare_values(-39.14134740550916, variable('B3LYP TOTaL ENERGY'), 6, ""B3LYP energy"") #TEST # waiting for dft fctl psivars` should pass, uncommented.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956
https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956:143,Energy Efficiency,energy,energy,143,"A good test of when this is fixed: the `scf-property` test line `#compare_values(-39.14134740550916, variable('B3LYP TOTaL ENERGY'), 6, ""B3LYP energy"") #TEST # waiting for dft fctl psivars` should pass, uncommented.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956
https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956:101,Modifiability,variab,variable,101,"A good test of when this is fixed: the `scf-property` test line `#compare_values(-39.14134740550916, variable('B3LYP TOTaL ENERGY'), 6, ""B3LYP energy"") #TEST # waiting for dft fctl psivars` should pass, uncommented.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956
https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956:7,Testability,test,test,7,"A good test of when this is fixed: the `scf-property` test line `#compare_values(-39.14134740550916, variable('B3LYP TOTaL ENERGY'), 6, ""B3LYP energy"") #TEST # waiting for dft fctl psivars` should pass, uncommented.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956
https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956:54,Testability,test,test,54,"A good test of when this is fixed: the `scf-property` test line `#compare_values(-39.14134740550916, variable('B3LYP TOTaL ENERGY'), 6, ""B3LYP energy"") #TEST # waiting for dft fctl psivars` should pass, uncommented.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956
https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956:153,Testability,TEST,TEST,153,"A good test of when this is fixed: the `scf-property` test line `#compare_values(-39.14134740550916, variable('B3LYP TOTaL ENERGY'), 6, ""B3LYP energy"") #TEST # waiting for dft fctl psivars` should pass, uncommented.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956
https://github.com/psi4/psi4/pull/2479#issuecomment-1068050818:5,Availability,failure,failures,5,"Test failures here are some more references to n-pole components that need to be removed. I'll fix it, but it's slow-going as I need to sync up my local repo to L2-oei.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2479#issuecomment-1068050818
https://github.com/psi4/psi4/pull/2479#issuecomment-1068050818:0,Testability,Test,Test,0,"Test failures here are some more references to n-pole components that need to be removed. I'll fix it, but it's slow-going as I need to sync up my local repo to L2-oei.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2479#issuecomment-1068050818
https://github.com/psi4/psi4/pull/2479#issuecomment-1068222616:0,Testability,Test,Tests,0,"Tests are now passing, so please review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2479#issuecomment-1068222616
https://github.com/psi4/psi4/pull/2479#issuecomment-1069276890:363,Modifiability,variab,variable,363,"I thought the octupoles were re-shaped Py-side to be arrays of the appropriate dimension? The following line passes tests and shows octupoles as a 3-by-3-by-3 matrix. ```; compare_values(np.array([0, 0, -0.9526489, 0, 0, 0, -0.9526489, 0, 0, 0, 0, 0, 0, 0, -0.9526489, 0, -0.9526489, 0, -0.9526489, 0, 0, 0, -0.9526489, 0, 0, 0, -6.8644462]).reshape((3, 3, 3)),; variable(""MP2 OCTUPOLE""), 4, ""MP2 OCTUPOLE"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2479#issuecomment-1069276890
https://github.com/psi4/psi4/pull/2479#issuecomment-1069276890:116,Testability,test,tests,116,"I thought the octupoles were re-shaped Py-side to be arrays of the appropriate dimension? The following line passes tests and shows octupoles as a 3-by-3-by-3 matrix. ```; compare_values(np.array([0, 0, -0.9526489, 0, 0, 0, -0.9526489, 0, 0, 0, 0, 0, 0, 0, -0.9526489, 0, -0.9526489, 0, -0.9526489, 0, 0, 0, -0.9526489, 0, 0, 0, -6.8644462]).reshape((3, 3, 3)),; variable(""MP2 OCTUPOLE""), 4, ""MP2 OCTUPOLE"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2479#issuecomment-1069276890
https://github.com/psi4/psi4/pull/2479#issuecomment-1069276890:409,Testability,TEST,TEST,409,"I thought the octupoles were re-shaped Py-side to be arrays of the appropriate dimension? The following line passes tests and shows octupoles as a 3-by-3-by-3 matrix. ```; compare_values(np.array([0, 0, -0.9526489, 0, 0, 0, -0.9526489, 0, 0, 0, 0, 0, 0, 0, -0.9526489, 0, -0.9526489, 0, -0.9526489, 0, 0, 0, -0.9526489, 0, 0, 0, -6.8644462]).reshape((3, 3, 3)),; variable(""MP2 OCTUPOLE""), 4, ""MP2 OCTUPOLE"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2479#issuecomment-1069276890
https://github.com/psi4/psi4/pull/2479#issuecomment-1069338336:75,Safety,avoid,avoid,75,"Ah, ok. I didn't realize that. Might be worth mentioning that somewhere to avoid confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2479#issuecomment-1069338336
https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887:516,Deployability,install,installation,516,"You're right, the handling of simint vec type is unsophisticated. The mention of `SIMINT_VECTOR` in psi4's cmake is as indication that if you set the var for psi4, then it'll be passed on to the simint build, should simint be built from source. In that way, something like the below should do what you want. (The second is a standard CMake variable that means don't-look-for-prebuilt.). ```; -D SIMINT_VECTOR=avx; -D CMAKE_DISABLE_FIND_PACKAGE_simint=ON; ```. simint itself doesn't offer any handles for choosing an installation of a particular vectorization, nor does it provide any is-this-installation-compatible-with-given-vec handles. also, it's hard to know what the user wants: on an AVX computer (cmake can't quickly say that a computer is AVX, btw), a user getting a sse simint might be quite content b/c it'll run or discontent b/c it's unoptimized. Between the uncertainty and lack of tools, I went with the dumb handling you observed. For background, the conda package is sse so that it runs everywhere. And the cmake vector variable default is AVX since that's a likely minimum, and a wrong choice produces only local trouble. I can see that the top-level CMakeList.txt text needs to be clearer so the vector status isn't surprising. But I'm not sure if more logic is worth it. What do you think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887
https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887:592,Deployability,install,installation-compatible-with-given-vec,592,"You're right, the handling of simint vec type is unsophisticated. The mention of `SIMINT_VECTOR` in psi4's cmake is as indication that if you set the var for psi4, then it'll be passed on to the simint build, should simint be built from source. In that way, something like the below should do what you want. (The second is a standard CMake variable that means don't-look-for-prebuilt.). ```; -D SIMINT_VECTOR=avx; -D CMAKE_DISABLE_FIND_PACKAGE_simint=ON; ```. simint itself doesn't offer any handles for choosing an installation of a particular vectorization, nor does it provide any is-this-installation-compatible-with-given-vec handles. also, it's hard to know what the user wants: on an AVX computer (cmake can't quickly say that a computer is AVX, btw), a user getting a sse simint might be quite content b/c it'll run or discontent b/c it's unoptimized. Between the uncertainty and lack of tools, I went with the dumb handling you observed. For background, the conda package is sse so that it runs everywhere. And the cmake vector variable default is AVX since that's a likely minimum, and a wrong choice produces only local trouble. I can see that the top-level CMakeList.txt text needs to be clearer so the vector status isn't surprising. But I'm not sure if more logic is worth it. What do you think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887
https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887:340,Modifiability,variab,variable,340,"You're right, the handling of simint vec type is unsophisticated. The mention of `SIMINT_VECTOR` in psi4's cmake is as indication that if you set the var for psi4, then it'll be passed on to the simint build, should simint be built from source. In that way, something like the below should do what you want. (The second is a standard CMake variable that means don't-look-for-prebuilt.). ```; -D SIMINT_VECTOR=avx; -D CMAKE_DISABLE_FIND_PACKAGE_simint=ON; ```. simint itself doesn't offer any handles for choosing an installation of a particular vectorization, nor does it provide any is-this-installation-compatible-with-given-vec handles. also, it's hard to know what the user wants: on an AVX computer (cmake can't quickly say that a computer is AVX, btw), a user getting a sse simint might be quite content b/c it'll run or discontent b/c it's unoptimized. Between the uncertainty and lack of tools, I went with the dumb handling you observed. For background, the conda package is sse so that it runs everywhere. And the cmake vector variable default is AVX since that's a likely minimum, and a wrong choice produces only local trouble. I can see that the top-level CMakeList.txt text needs to be clearer so the vector status isn't surprising. But I'm not sure if more logic is worth it. What do you think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887
https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887:1037,Modifiability,variab,variable,1037,"You're right, the handling of simint vec type is unsophisticated. The mention of `SIMINT_VECTOR` in psi4's cmake is as indication that if you set the var for psi4, then it'll be passed on to the simint build, should simint be built from source. In that way, something like the below should do what you want. (The second is a standard CMake variable that means don't-look-for-prebuilt.). ```; -D SIMINT_VECTOR=avx; -D CMAKE_DISABLE_FIND_PACKAGE_simint=ON; ```. simint itself doesn't offer any handles for choosing an installation of a particular vectorization, nor does it provide any is-this-installation-compatible-with-given-vec handles. also, it's hard to know what the user wants: on an AVX computer (cmake can't quickly say that a computer is AVX, btw), a user getting a sse simint might be quite content b/c it'll run or discontent b/c it's unoptimized. Between the uncertainty and lack of tools, I went with the dumb handling you observed. For background, the conda package is sse so that it runs everywhere. And the cmake vector variable default is AVX since that's a likely minimum, and a wrong choice produces only local trouble. I can see that the top-level CMakeList.txt text needs to be clearer so the vector status isn't surprising. But I'm not sure if more logic is worth it. What do you think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887
https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887:1272,Testability,log,logic,1272,"You're right, the handling of simint vec type is unsophisticated. The mention of `SIMINT_VECTOR` in psi4's cmake is as indication that if you set the var for psi4, then it'll be passed on to the simint build, should simint be built from source. In that way, something like the below should do what you want. (The second is a standard CMake variable that means don't-look-for-prebuilt.). ```; -D SIMINT_VECTOR=avx; -D CMAKE_DISABLE_FIND_PACKAGE_simint=ON; ```. simint itself doesn't offer any handles for choosing an installation of a particular vectorization, nor does it provide any is-this-installation-compatible-with-given-vec handles. also, it's hard to know what the user wants: on an AVX computer (cmake can't quickly say that a computer is AVX, btw), a user getting a sse simint might be quite content b/c it'll run or discontent b/c it's unoptimized. Between the uncertainty and lack of tools, I went with the dumb handling you observed. For background, the conda package is sse so that it runs everywhere. And the cmake vector variable default is AVX since that's a likely minimum, and a wrong choice produces only local trouble. I can see that the top-level CMakeList.txt text needs to be clearer so the vector status isn't surprising. But I'm not sure if more logic is worth it. What do you think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887
https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887:1200,Usability,clear,clearer,1200,"You're right, the handling of simint vec type is unsophisticated. The mention of `SIMINT_VECTOR` in psi4's cmake is as indication that if you set the var for psi4, then it'll be passed on to the simint build, should simint be built from source. In that way, something like the below should do what you want. (The second is a standard CMake variable that means don't-look-for-prebuilt.). ```; -D SIMINT_VECTOR=avx; -D CMAKE_DISABLE_FIND_PACKAGE_simint=ON; ```. simint itself doesn't offer any handles for choosing an installation of a particular vectorization, nor does it provide any is-this-installation-compatible-with-given-vec handles. also, it's hard to know what the user wants: on an AVX computer (cmake can't quickly say that a computer is AVX, btw), a user getting a sse simint might be quite content b/c it'll run or discontent b/c it's unoptimized. Between the uncertainty and lack of tools, I went with the dumb handling you observed. For background, the conda package is sse so that it runs everywhere. And the cmake vector variable default is AVX since that's a likely minimum, and a wrong choice produces only local trouble. I can see that the top-level CMakeList.txt text needs to be clearer so the vector status isn't surprising. But I'm not sure if more logic is worth it. What do you think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887
https://github.com/psi4/psi4/issues/2480#issuecomment-1069404135:334,Modifiability,variab,variable,334,"Hmm. I agree it is probably not worth spending a lot of time on, but for CMake noobs like me `-D SIMINT_VECTOR=...` not having any effect on its own is definitely surprising.; Looking at https://github.com/psi4/psi4/blob/ce8ce9a5e0fad4ebd2d5dee9b6d06b01047574b1/external/upstream/simint/CMakeLists.txt#L8; it appears as if there is a variable that already contains the string describing the vectorization type of the found simint binary. I have no idea how `simint_VECTOR` is (correctly) getting set to SSE, but _something_ must be somehow detecting that it is not the AVX default value set at ; https://github.com/psi4/psi4/blob/7afd2276795993fcfc7a769e5c2568d108678fc5/CMakeLists.txt#L167",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1069404135
https://github.com/psi4/psi4/issues/2480#issuecomment-1069404135:540,Safety,detect,detecting,540,"Hmm. I agree it is probably not worth spending a lot of time on, but for CMake noobs like me `-D SIMINT_VECTOR=...` not having any effect on its own is definitely surprising.; Looking at https://github.com/psi4/psi4/blob/ce8ce9a5e0fad4ebd2d5dee9b6d06b01047574b1/external/upstream/simint/CMakeLists.txt#L8; it appears as if there is a variable that already contains the string describing the vectorization type of the found simint binary. I have no idea how `simint_VECTOR` is (correctly) getting set to SSE, but _something_ must be somehow detecting that it is not the AVX default value set at ; https://github.com/psi4/psi4/blob/7afd2276795993fcfc7a769e5c2568d108678fc5/CMakeLists.txt#L167",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1069404135
https://github.com/psi4/psi4/pull/2481#issuecomment-1084556386:0,Availability,Ping,Ping,0,Ping me for review again when you have this passing tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1084556386
https://github.com/psi4/psi4/pull/2481#issuecomment-1084556386:52,Testability,test,tests,52,Ping me for review again when you have this passing tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1084556386
https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269:219,Deployability,release,release,219,"While I appreciate that tests are now passing, I still request changes.; * Comments that refer to methods that no longer exist need to be removed.; * The comment on dfhelper's release_AO is vague. What does it mean to ""release AO""? Are you clearing memory used to store some AO-basis quantity?; * Naming a method ""release_AO"" that does not actually release AO is confusing. You need to change this.; * The title of this PR is misleading. This PR is not just optimizing I/O. This PR is _changing the values that Psi gives for SAPT(DFT)_ due to the options edits. Are these edits supposed to be part of the PR or not? That's going to determine how the rest of this review process goes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269
https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269:349,Deployability,release,release,349,"While I appreciate that tests are now passing, I still request changes.; * Comments that refer to methods that no longer exist need to be removed.; * The comment on dfhelper's release_AO is vague. What does it mean to ""release AO""? Are you clearing memory used to store some AO-basis quantity?; * Naming a method ""release_AO"" that does not actually release AO is confusing. You need to change this.; * The title of this PR is misleading. This PR is not just optimizing I/O. This PR is _changing the values that Psi gives for SAPT(DFT)_ due to the options edits. Are these edits supposed to be part of the PR or not? That's going to determine how the rest of this review process goes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269
https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269:458,Performance,optimiz,optimizing,458,"While I appreciate that tests are now passing, I still request changes.; * Comments that refer to methods that no longer exist need to be removed.; * The comment on dfhelper's release_AO is vague. What does it mean to ""release AO""? Are you clearing memory used to store some AO-basis quantity?; * Naming a method ""release_AO"" that does not actually release AO is confusing. You need to change this.; * The title of this PR is misleading. This PR is not just optimizing I/O. This PR is _changing the values that Psi gives for SAPT(DFT)_ due to the options edits. Are these edits supposed to be part of the PR or not? That's going to determine how the rest of this review process goes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269
https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269:24,Testability,test,tests,24,"While I appreciate that tests are now passing, I still request changes.; * Comments that refer to methods that no longer exist need to be removed.; * The comment on dfhelper's release_AO is vague. What does it mean to ""release AO""? Are you clearing memory used to store some AO-basis quantity?; * Naming a method ""release_AO"" that does not actually release AO is confusing. You need to change this.; * The title of this PR is misleading. This PR is not just optimizing I/O. This PR is _changing the values that Psi gives for SAPT(DFT)_ due to the options edits. Are these edits supposed to be part of the PR or not? That's going to determine how the rest of this review process goes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269
https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269:240,Usability,clear,clearing,240,"While I appreciate that tests are now passing, I still request changes.; * Comments that refer to methods that no longer exist need to be removed.; * The comment on dfhelper's release_AO is vague. What does it mean to ""release AO""? Are you clearing memory used to store some AO-basis quantity?; * Naming a method ""release_AO"" that does not actually release AO is confusing. You need to change this.; * The title of this PR is misleading. This PR is not just optimizing I/O. This PR is _changing the values that Psi gives for SAPT(DFT)_ due to the options edits. Are these edits supposed to be part of the PR or not? That's going to determine how the rest of this review process goes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269
https://github.com/psi4/psi4/pull/2481#issuecomment-1165674151:473,Deployability,update,update,473,"> I want @CDSherrill to confirm that these changes to the SAPT parameters are meant to come in now.; > ; > The fact that you can change this parameter _without breaking tests_ indicate that our SAPT(DFT) tests are not good enough. I think we have manually set `set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp` in the previous SAPT(DFT) tests, and that's why changing the default value of `SAPT_DFT_EXCH_DISP_SCALE_SCHEME` from `disp` to `fixed` won't break the tests. ; Should we update these tests with `SAPT_DFT_EXCH_DISP_SCALE_SCHEME` set to `fixed`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1165674151
https://github.com/psi4/psi4/pull/2481#issuecomment-1165674151:204,Testability,test,tests,204,"> I want @CDSherrill to confirm that these changes to the SAPT parameters are meant to come in now.; > ; > The fact that you can change this parameter _without breaking tests_ indicate that our SAPT(DFT) tests are not good enough. I think we have manually set `set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp` in the previous SAPT(DFT) tests, and that's why changing the default value of `SAPT_DFT_EXCH_DISP_SCALE_SCHEME` from `disp` to `fixed` won't break the tests. ; Should we update these tests with `SAPT_DFT_EXCH_DISP_SCALE_SCHEME` set to `fixed`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1165674151
https://github.com/psi4/psi4/pull/2481#issuecomment-1165674151:329,Testability,test,tests,329,"> I want @CDSherrill to confirm that these changes to the SAPT parameters are meant to come in now.; > ; > The fact that you can change this parameter _without breaking tests_ indicate that our SAPT(DFT) tests are not good enough. I think we have manually set `set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp` in the previous SAPT(DFT) tests, and that's why changing the default value of `SAPT_DFT_EXCH_DISP_SCALE_SCHEME` from `disp` to `fixed` won't break the tests. ; Should we update these tests with `SAPT_DFT_EXCH_DISP_SCALE_SCHEME` set to `fixed`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1165674151
https://github.com/psi4/psi4/pull/2481#issuecomment-1165674151:454,Testability,test,tests,454,"> I want @CDSherrill to confirm that these changes to the SAPT parameters are meant to come in now.; > ; > The fact that you can change this parameter _without breaking tests_ indicate that our SAPT(DFT) tests are not good enough. I think we have manually set `set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp` in the previous SAPT(DFT) tests, and that's why changing the default value of `SAPT_DFT_EXCH_DISP_SCALE_SCHEME` from `disp` to `fixed` won't break the tests. ; Should we update these tests with `SAPT_DFT_EXCH_DISP_SCALE_SCHEME` set to `fixed`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1165674151
https://github.com/psi4/psi4/pull/2481#issuecomment-1165674151:486,Testability,test,tests,486,"> I want @CDSherrill to confirm that these changes to the SAPT parameters are meant to come in now.; > ; > The fact that you can change this parameter _without breaking tests_ indicate that our SAPT(DFT) tests are not good enough. I think we have manually set `set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp` in the previous SAPT(DFT) tests, and that's why changing the default value of `SAPT_DFT_EXCH_DISP_SCALE_SCHEME` from `disp` to `fixed` won't break the tests. ; Should we update these tests with `SAPT_DFT_EXCH_DISP_SCALE_SCHEME` set to `fixed`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1165674151
https://github.com/psi4/psi4/pull/2481#issuecomment-1165691789:12,Testability,test,tests,12,"Leave those tests as they are, and create new tests for the fixed option. I also insist that you include a warning about those keyword changes in the documentation for SAPT(DFT), and in the output or logging file whenever SAPT(DFT) runs. This could cause users to get different numbers with the exact same input file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1165691789
https://github.com/psi4/psi4/pull/2481#issuecomment-1165691789:46,Testability,test,tests,46,"Leave those tests as they are, and create new tests for the fixed option. I also insist that you include a warning about those keyword changes in the documentation for SAPT(DFT), and in the output or logging file whenever SAPT(DFT) runs. This could cause users to get different numbers with the exact same input file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1165691789
https://github.com/psi4/psi4/pull/2481#issuecomment-1165691789:200,Testability,log,logging,200,"Leave those tests as they are, and create new tests for the fixed option. I also insist that you include a warning about those keyword changes in the documentation for SAPT(DFT), and in the output or logging file whenever SAPT(DFT) runs. This could cause users to get different numbers with the exact same input file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1165691789
https://github.com/psi4/psi4/pull/2481#issuecomment-1279657542:218,Integrability,message,messages,218,"> . Created new test cases in the same input file, i.e. doing non-hybrid/hybrid+DISP/hybrid+FIXED in the same test file. I think this is the way to go since it is what we did when adding in the hybrid feature. Warning messages added in documentation and SAPT(DFT) output.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1279657542
https://github.com/psi4/psi4/pull/2481#issuecomment-1279657542:16,Testability,test,test,16,"> . Created new test cases in the same input file, i.e. doing non-hybrid/hybrid+DISP/hybrid+FIXED in the same test file. I think this is the way to go since it is what we did when adding in the hybrid feature. Warning messages added in documentation and SAPT(DFT) output.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1279657542
https://github.com/psi4/psi4/pull/2481#issuecomment-1279657542:110,Testability,test,test,110,"> . Created new test cases in the same input file, i.e. doing non-hybrid/hybrid+DISP/hybrid+FIXED in the same test file. I think this is the way to go since it is what we did when adding in the hybrid feature. Warning messages added in documentation and SAPT(DFT) output.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1279657542
https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067:151,Availability,reliab,reliable,151,"I've discussed this PR with Yi. This is just to confirm that we want to change the default exch-disp scaling scheme, as the new one appears to be more reliable. Apparently the previous test case didn't break because the exch-disp scheme was manually selected in the test case, rather than utilizing the (updated) default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067
https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067:304,Deployability,update,updated,304,"I've discussed this PR with Yi. This is just to confirm that we want to change the default exch-disp scaling scheme, as the new one appears to be more reliable. Apparently the previous test case didn't break because the exch-disp scheme was manually selected in the test case, rather than utilizing the (updated) default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067
https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067:185,Testability,test,test,185,"I've discussed this PR with Yi. This is just to confirm that we want to change the default exch-disp scaling scheme, as the new one appears to be more reliable. Apparently the previous test case didn't break because the exch-disp scheme was manually selected in the test case, rather than utilizing the (updated) default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067
https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067:266,Testability,test,test,266,"I've discussed this PR with Yi. This is just to confirm that we want to change the default exch-disp scaling scheme, as the new one appears to be more reliable. Apparently the previous test case didn't break because the exch-disp scheme was manually selected in the test case, rather than utilizing the (updated) default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067
https://github.com/psi4/psi4/pull/2481#issuecomment-1282865700:13,Testability,test,test,13,"> We have no test coverage on the `DFT_DO_DHF` keyword, and this PR changes its behavior.; > ; > I'm going to request a _separate_ PR that adds this test coverage. That PR must be merged in first, so that we can be sure this PR is not changing the results from that keyword. Is a few new test cases everything that new PR should have, or should I cherry-pick the changes related to the `DFT_DO_DHF` keyword in this PR and apply to that one?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1282865700
https://github.com/psi4/psi4/pull/2481#issuecomment-1282865700:149,Testability,test,test,149,"> We have no test coverage on the `DFT_DO_DHF` keyword, and this PR changes its behavior.; > ; > I'm going to request a _separate_ PR that adds this test coverage. That PR must be merged in first, so that we can be sure this PR is not changing the results from that keyword. Is a few new test cases everything that new PR should have, or should I cherry-pick the changes related to the `DFT_DO_DHF` keyword in this PR and apply to that one?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1282865700
https://github.com/psi4/psi4/pull/2481#issuecomment-1282865700:288,Testability,test,test,288,"> We have no test coverage on the `DFT_DO_DHF` keyword, and this PR changes its behavior.; > ; > I'm going to request a _separate_ PR that adds this test coverage. That PR must be merged in first, so that we can be sure this PR is not changing the results from that keyword. Is a few new test cases everything that new PR should have, or should I cherry-pick the changes related to the `DFT_DO_DHF` keyword in this PR and apply to that one?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1282865700
https://github.com/psi4/psi4/pull/2481#issuecomment-1282881324:32,Testability,test,test,32,The new PR should **only** have test changes. The point of me asking for this is to make sure that this PR does not change the `DFT_DO_DHF` results that the new PR will test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1282881324
https://github.com/psi4/psi4/pull/2481#issuecomment-1282881324:169,Testability,test,test,169,The new PR should **only** have test changes. The point of me asking for this is to make sure that this PR does not change the `DFT_DO_DHF` results that the new PR will test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1282881324
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:961,Energy Efficiency,energy,energy,961,"Hi Yi,. Thanks for your work and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1040,Energy Efficiency,ENERGY,ENERGY,1040,"k and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1080,Energy Efficiency,ENERGY,ENERGY,1080,"e with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1118,Energy Efficiency,ENERGY,ENERGY,1118,"ld do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1158,Energy Efficiency,ENERGY,ENERGY,1158,"he scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1196,Energy Efficiency,ENERGY,ENERGY,1196,"of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1250,Energy Efficiency,ENERGY,ENERGY,1250,"nd routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1290,Energy Efficiency,ENERGY,ENERGY,1290,"now of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1328,Energy Efficiency,ENERGY,ENERGY,1328,"us GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_E",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1368,Energy Efficiency,ENERGY,ENERGY,1368," scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sap",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1406,Energy Efficiency,ENERGY,ENERGY,1406," them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in E",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1462,Energy Efficiency,ENERGY,ENERGY,1462,"y, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1502,Energy Efficiency,ENERGY,ENERGY,1502,", if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" +",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1540,Energy Efficiency,ENERGY,ENERGY,1540,"er.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1580,Energy Efficiency,ENERGY,ENERGY,1580,"ng like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1618,Energy Efficiency,ENERGY,ENERGY,1618,"ection without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1959,Energy Efficiency,energy,energy,1959,"ther PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:2051,Energy Efficiency,ENERGY,ENERGY,2051,"9, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:2069,Energy Efficiency,ENERGY,ENERGY,2069,"9, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:2349,Energy Efficiency,energy,energy,2349,"812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the o",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:2620,Energy Efficiency,energy,energy,2620,"26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults. ```; ==> E20 Dispersion (MP2) <==. Disp20 (MP2) -0.37881730 [mEh]; Exch-Disp20,u 0.02037338 [mEh]; Scaling Scheme: Disp; Scaling Factor: 0.707. SAPT(DFT) Results; ---------------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:2939,Energy Efficiency,energy,energy,2939,"_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults. ```; ==> E20 Dispersion (MP2) <==. Disp20 (MP2) -0.37881730 [mEh]; Exch-Disp20,u 0.02037338 [mEh]; Scaling Scheme: Disp; Scaling Factor: 0.707. SAPT(DFT) Results; ---------------------------------------------------------------------------------------------------------; Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; Elst1,r -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:245,Integrability,rout,routing,245,"Hi Yi,. Thanks for your work and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216
